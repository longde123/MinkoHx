{
    "name"  	: "reflection",
    	
    "attributeBindings" : {
        "position"              : "geometry[@{geometryId}].position",
        "uv"                    : "geometry[@{geometryId}].uv",
		"boneIdsA"				: "geometry[@{geometryId}].boneIdsA",
		"boneIdsB"				: "geometry[@{geometryId}].boneIdsB",
		"boneWeightsA"			: "geometry[@{geometryId}].boneWeightsA",
		"boneWeightsB"			: "geometry[@{geometryId}].boneWeightsB"
    },
    
    "uniformBindings"   : {
        "diffuseColor"          : "material[@{materialId}].diffuseColor",
        "diffuseMap"            : "material[@{materialId}].diffuseMap",
        "diffuseCubeMap"        : "material[@{materialId}].diffuseCubeMap",
        "modelToWorldMatrix"    : "transform.modelToWorldMatrix",
        "worldToScreenMatrix"   : { "property" : "camera.worldToScreenMatrix", "source" : "renderer" },
        "View"   				: { "property" : "camera.viewMatrix", "source" : "renderer" },
        "Projection"   			: { "property" : "camera.projectionMatrix", "source" : "renderer" },
		"boneMatrices"			: { "property" : "geometry[@{geometryId}].boneMatrices",			"source" : "target" },
		"numBones"				: { "property" : "geometry[@{geometryId}].numBones",				"source" : "target" }
	},
    
    "macroBindings" : {
        "DIFFUSE_MAP"           : "material[@{materialId}].diffuseMap",
        "DIFFUSE_CUBEMAP"       : "material[@{materialId}].diffuseCubeMap",
        "MODEL_TO_WORLD"        : "transform.modelToWorldMatrix",
        "HAS_POSITION"          : "geometry[@{geometryId}].position",
        "HAS_UV"                : "geometry[@{geometryId}].uv",
        "HAS_NORMAL"            : "geometry[@{geometryId}].normal",
        "NUM_BONES"             : { "property" : "geometry[@{geometryId}].numBones",   "source" : "target" }
    },

    "stateBindings" : {
        "blendMode"             : "material[@{materialId}].blendMode",
        "colorMask"             : "material[@{materialId}].colorMask",
        "depthMask"             : "material[@{materialId}].depthMask",
        "depthFunc"             : "material[@{materialId}].depthFunc",
        "triangleCulling"       : "material[@{materialId}].triangleCulling",
        "stencilFunc"           : "material[@{materialId}].stencilFunc",
        "stencilRef"            : "material[@{materialId}].stencilRef",
        "stencilMask"           : "material[@{materialId}].stencilMask",
        "stencilFailOp"         : "material[@{materialId}].stencilFailOp",
        "stencilZFailOp"        : "material[@{materialId}].stencilZFailOp",
        "stencilZPassOp"        : "material[@{materialId}].stencilZPassOp",
        "scissorBox.x"          : { "property" : "scissorBox.x",        "source" : "renderer" },
        "scissorBox.y"          : { "property" : "scissorBox.y",        "source" : "renderer" },
        "scissorBox.width"      : { "property" : "scissorBox.width",    "source" : "renderer" },
        "scissorBox.height"     : { "property" : "scissorBox.height",   "source" : "renderer" },
        "priority"              : "material[@{materialId}].priority",
        "zSort"                 : "material[@{materialId}].zSort"
    },
    
    "colorMask"         : true,
    "depthTest"         : [true, "less_equal"],
    "triangleCulling"   : "back",
	"stencilTest"		: ["always", 0, 1, ["keep", "keep", "keep"]],
    "scissorTest"		: false,
	"scissorBox"		: [0, 0, -1, -1],
	
    "samplerStates" : {
        "diffuseMap"    : { "wrapMode" : "repeat", "textureFilter" : "linear", "mipFilter" : "linear" }
    },
    
    "defaultTechnique"  : "opaque",

	"techniques" : [
    {
        "name"      : "opaque",


        "blendMode" : ["one", "zero"],
        "priority"  : "opaque",
        "zSort"     : "false",

		"passes"    : [
        {
			"vertexShader"   : "#pragma include('PlanarReflection.vertex.glsl')",
			"fragmentShader" : "#pragma include('PlanarReflection.fragment.glsl')"
		}
        ]
	},

    {
        "name"      : "transparent",


        "blendMode" : "alpha",
        "priority"  : "transparent",
        "zSort"     : "true",

        "passes"    : [
        {
            "vertexShader"      : "#pragma include('PlanarReflection.vertex.glsl')",
            "fragmentShader"    : "#pragma include('PlanarReflection.fragment.glsl')"
        }
        ] 
    }
    ]
}
