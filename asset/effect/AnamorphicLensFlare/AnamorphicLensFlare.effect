{
	"name" 		: "anamorphic lens flare",
	
	"attributeBindings" : {
		"aPosition"		: "geometry[@{geometryId}].position",
		"aUv"			: "geometry[@{geometryId}].uv",
		"a_position"	: "geometry[@{geometryId}].position",
		"a_texCoord"	: "geometry[@{geometryId}].uv"

	},

	"defaultTechnique" : "very high",
	"triangleCulling" : "none",
	"samplerStates" : {
		"s_texture"	: { "textureFilter" : "linear" }
	},

	"techniques" : [
		{
			"name" : "low",
			"passes" : [
				"threshold",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"compositing"
			]
		},
		{
			"name" : "medium",
			"passes" : [
				"threshold",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"compositing"
			]
		},
		{
			"name" : "high",
			"passes" : [
				"threshold",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"compositing"
			]
		},
		{
			"name" : "very high",
			"passes" : [
				"threshold",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"horizontal gaussian blur 1",
				"horizontal gaussian blur 2",
				"compositing"
			]
		}
	],

	"passes"	: [
		{
			"name" : "threshold",
			"uniformBindings" : {
				"uInputTex"		: "material[@{materialId}].backbuffer",
				"uScale"		: { "property" : "thresholdScale", "default" : [ 200.0, 200.0, 200.0, 1.0 ] },
				"uBias"			: { "property" : "thresholdBias", "default" : [-0.99, -0.99, -0.99, 0.0 ] }
			},
			"target" : { "name" : "blur input 1", "width" : 256, "height" : 256 },
			"samplerStates" : { "uInputTex"	: { "textureFilter" : "linear" } },
			"vertexShader" : "#pragma include('AnamorphicLensFlare.vertex.glsl')",
			"fragmentShader" : "#pragma include('Threshold.fragment.glsl')"
		},
		{
			"name"	: "horizontal gaussian blur 1",
			"uniformBindings" : { "s_texture" : "blur input 1" },
			"target" : { "name" : "blur input 2", "width" : 256, "height" : 256 },			
			"vertexShader" : "#pragma include('HGaussianBlur.vertex.glsl')",
			"fragmentShader" : "#pragma include('GaussianBlur.fragment.glsl')"
		},
		{
			"name"	: "vertical gaussian blur 1",
			"uniformBindings" : { "s_texture" : "blur input 1" },
			"target" : "blur input 2",			
			"vertexShader" : "#pragma include('VGaussianBlur.vertex.glsl')",
			"fragmentShader" : "#pragma include('GaussianBlur.fragment.glsl')"
		},
		{
			"name"	: "horizontal gaussian blur 2",
			"uniformBindings" : { "s_texture" : "blur input 2" },
			"target" : "blur input 1",
			"vertexShader" : "#pragma include('HGaussianBlur.vertex.glsl')",
			"fragmentShader" : "#pragma include('GaussianBlur.fragment.glsl')"
		},
		{
			"name"	: "vertical gaussian blur 2",
			"uniformBindings" : { "s_texture" : "blur input 2" },
			"target" : "blur input 1",
			"vertexShader" : "#pragma include('VGaussianBlur.vertex.glsl')",
			"fragmentShader" : "#pragma include('GaussianBlur.fragment.glsl')"
		},
		{
			"name" : "compositing",
			"uniformBindings" : {
				"uBackbuffer"	: "material[@{materialId}].backbuffer",
				"uFlares"		: "blur input 1"
			},
			"samplerStates" : {
				"uBackbuffer"	: { "textureFilter" : "linear" },
				"uFlares"		: { "textureFilter" : "linear" }
			},
			"vertexShader" : "#pragma include('AnamorphicLensFlare.vertex.glsl')",
			"fragmentShader" : "
				#ifdef GL_ES
				precision mediump float;
				#endif
				
				uniform sampler2D uBackbuffer;
				uniform sampler2D uFlares;
				
				varying vec2 vTexcoord;
				
				void main(void)
				{
					gl_FragColor = texture2D(uBackbuffer, vTexcoord) + texture2D(uFlares, vTexcoord);
				}
			"
		}
	]
}
