// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["minko"] = $hx_exports["minko"] || {};
$hx_exports["minko"]["signal"] = $hx_exports["minko"]["signal"] || {};
;$hx_exports["minko"]["scene"] = $hx_exports["minko"]["scene"] || {};
;$hx_exports["minko"]["net"] = $hx_exports["minko"]["net"] || {};
;$hx_exports["minko"]["math"] = $hx_exports["minko"]["math"] || {};
;$hx_exports["minko"]["material"] = $hx_exports["minko"]["material"] || {};
;$hx_exports["minko"]["input"] = $hx_exports["minko"]["input"] || {};
;$hx_exports["minko"]["geometry"] = $hx_exports["minko"]["geometry"] || {};
;$hx_exports["minko"]["render"] = $hx_exports["minko"]["render"] || {};
;$hx_exports["minko"]["file"] = $hx_exports["minko"]["file"] || {};
;$hx_exports["minko"]["data"] = $hx_exports["minko"]["data"] || {};
;$hx_exports["minko"]["audio"] = $hx_exports["minko"]["audio"] || {};
;$hx_exports["minko"]["component"] = $hx_exports["minko"]["component"] || {};
;$hx_exports["minko"]["async"] = $hx_exports["minko"]["async"] || {};
;$hx_exports["minko"]["animation"] = $hx_exports["minko"]["animation"] || {};
$hx_exports["haxe"] = $hx_exports["haxe"] || {};
$hx_exports["haxe"]["ds"] = $hx_exports["haxe"]["ds"] || {};
$hx_exports["haxe"]["ds"]["_StringMap"] = $hx_exports["haxe"]["ds"]["_StringMap"] || {};
;$hx_exports["haxe"]["io"] = $hx_exports["haxe"]["io"] || {};
$hx_exports["glm"] = $hx_exports["glm"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$iterator(it)().hasNext();
};
Lambda.find = function(it,f) {
	var v = $iterator(it)();
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,filter: function(f) {
		var l2 = new List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var glm_GLM = $hx_exports["glm"]["GLM"] = function() { };
glm_GLM.__name__ = true;
glm_GLM.lerp = function(a,b,t) {
	return a + t * (b - a);
};
glm_GLM.translate = function(translation,dest) {
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	dest._30 = translation.x;
	dest._31 = translation.y;
	dest._32 = translation.z;
	return dest;
};
glm_GLM.rotate = function(rotation,dest) {
	var x2 = rotation.x + rotation.x;
	var y2 = rotation.y + rotation.y;
	var z2 = rotation.z + rotation.z;
	var xx = rotation.x * x2;
	var xy = rotation.x * y2;
	var xz = rotation.x * z2;
	var yy = rotation.y * y2;
	var yz = rotation.y * z2;
	var zz = rotation.z * z2;
	var wx = rotation.w * x2;
	var wy = rotation.w * y2;
	var wz = rotation.w * z2;
	dest._00 = 1 - (yy + zz);
	dest._10 = xy - wz;
	dest._20 = xz + wy;
	dest._30 = 0;
	dest._01 = xy + wz;
	dest._11 = 1 - (xx + zz);
	dest._21 = yz - wx;
	dest._31 = 0;
	dest._02 = xz - wy;
	dest._12 = yz + wx;
	dest._22 = 1 - (xx + yy);
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	return dest;
};
glm_GLM.scale = function(amount,dest) {
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	dest._00 = amount.x;
	dest._11 = amount.y;
	dest._22 = amount.z;
	return dest;
};
glm_GLM.transform = function(translation,rotation,scale,dest) {
	var x2 = rotation.x + rotation.x;
	var y2 = rotation.y + rotation.y;
	var z2 = rotation.z + rotation.z;
	var xx = rotation.x * x2;
	var xy = rotation.x * y2;
	var xz = rotation.x * z2;
	var yy = rotation.y * y2;
	var yz = rotation.y * z2;
	var zz = rotation.z * z2;
	var wx = rotation.w * x2;
	var wy = rotation.w * y2;
	var wz = rotation.w * z2;
	dest._00 = (1 - (yy + zz)) * scale.x;
	dest._01 = (xy + wz) * scale.x;
	dest._02 = (xz - wy) * scale.x;
	dest._03 = 0;
	dest._10 = (xy - wz) * scale.y;
	dest._11 = (1 - (xx + zz)) * scale.y;
	dest._12 = (yz + wx) * scale.y;
	dest._13 = 0;
	dest._20 = (xz + wy) * scale.z;
	dest._21 = (yz - wx) * scale.z;
	dest._22 = (1 - (xx + yy)) * scale.z;
	dest._23 = 0;
	dest._30 = translation.x;
	dest._31 = translation.y;
	dest._32 = translation.z;
	dest._33 = 1;
	return dest;
};
glm_GLM.lookAt = function(eye,centre,up,dest) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest1 = this1;
	dest1.x = centre.x - eye.x;
	dest1.y = centre.y - eye.y;
	dest1.z = centre.z - eye.z;
	var f = dest1;
	var length = Math.sqrt(f.x * f.x + f.y * f.y + f.z * f.z);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	f.x *= mult;
	f.y *= mult;
	f.z *= mult;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	var dest2 = this2;
	var x = f.y * up.z - f.z * up.y;
	var y = f.z * up.x - f.x * up.z;
	var z = f.x * up.y - f.y * up.x;
	var this3 = new glm_Vec3Base();
	this3.x = x;
	this3.y = y;
	this3.z = z;
	dest2 = this3;
	var s = dest2;
	var length1 = Math.sqrt(s.x * s.x + s.y * s.y + s.z * s.z);
	var mult1 = 0;
	if(length1 >= glm_GLM.EPSILON) {
		mult1 = 1 / length1;
	}
	s.x *= mult1;
	s.y *= mult1;
	s.z *= mult1;
	var this4 = new glm_Vec3Base();
	this4.x = 0;
	this4.y = 0;
	this4.z = 0;
	var dest3 = this4;
	var x1 = s.y * f.z - s.z * f.y;
	var y1 = s.z * f.x - s.x * f.z;
	var z1 = s.x * f.y - s.y * f.x;
	var this5 = new glm_Vec3Base();
	this5.x = x1;
	this5.y = y1;
	this5.z = z1;
	dest3 = this5;
	var u = dest3;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	dest._00 = s.x;
	dest._10 = s.y;
	dest._20 = s.z;
	dest._01 = u.x;
	dest._11 = u.y;
	dest._21 = u.z;
	dest._02 = -f.x;
	dest._12 = -f.y;
	dest._22 = -f.z;
	dest._30 = -(s.x * eye.x + s.y * eye.y + s.z * eye.z);
	dest._31 = -(u.x * eye.x + u.y * eye.y + u.z * eye.z);
	dest._32 = f.x * eye.x + f.y * eye.y + f.z * eye.z;
	return dest;
};
glm_GLM.perspective = function(fovy,aspectRatio,near,far,dest) {
	var f = 1 / Math.tan(fovy / 2);
	var nf = 1 / (near - far);
	dest._00 = f / aspectRatio;
	dest._01 = 0;
	dest._02 = 0;
	dest._03 = 0;
	dest._10 = 0;
	dest._11 = f;
	dest._12 = 0;
	dest._13 = 0;
	dest._20 = 0;
	dest._21 = 0;
	dest._22 = (far + near) * nf;
	dest._23 = -1;
	dest._30 = 0;
	dest._31 = 0;
	dest._32 = 2 * far * near * nf;
	dest._33 = 0;
	return dest;
};
glm_GLM.orthographic = function(left,right,bottom,top,near,far,dest) {
	if(far == null) {
		far = 1;
	}
	if(near == null) {
		near = -1;
	}
	var rl = 1 / (right - left);
	var tb = 1 / (top - bottom);
	var fn = 1 / (far - near);
	dest._00 = 2 * rl;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = -1 * (left + right) * rl;
	dest._01 = 0;
	dest._11 = 2 * tb;
	dest._21 = 0;
	dest._31 = -1 * (top + bottom) * tb;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = -2 * fn;
	dest._32 = -1 * (far + near) * fn;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	return dest;
};
glm_GLM.frustum = function(left,right,bottom,top,near,far,dest) {
	if(far == null) {
		far = 1;
	}
	if(near == null) {
		near = -1;
	}
	var rl = 1 / (right - left);
	var tb = 1 / (top - bottom);
	var nf = 1 / (near - far);
	dest._00 = near * 2 * rl;
	dest._01 = 0;
	dest._02 = 0;
	dest._03 = 0;
	dest._10 = 0;
	dest._11 = near * 2 * tb;
	dest._12 = 0;
	dest._13 = 0;
	dest._20 = (right + left) * tb;
	dest._21 = (top + bottom) * tb;
	dest._22 = (far + near) * nf;
	dest._23 = -1;
	dest._30 = 0;
	dest._31 = 0;
	dest._32 = far * near * 2 * nf;
	dest._33 = 0;
	return dest;
};
var glm_Mat2Base = $hx_exports["glm"]["Mat2Base"] = function() {
};
glm_Mat2Base.__name__ = true;
glm_Mat2Base.prototype = {
	__class__: glm_Mat2Base
};
var glm__$Mat2_Mat2_$Impl_$ = $hx_exports["glm"]["Mat2Util"] = {};
glm__$Mat2_Mat2_$Impl_$.__name__ = true;
glm__$Mat2_Mat2_$Impl_$._new = function(_r0c0,_r0c1,_r1c0,_r1c1) {
	if(_r1c1 == null) {
		_r1c1 = 0;
	}
	if(_r1c0 == null) {
		_r1c0 = 0;
	}
	if(_r0c1 == null) {
		_r0c1 = 0;
	}
	if(_r0c0 == null) {
		_r0c0 = 0;
	}
	var this1 = new glm_Mat2Base();
	this1._00 = _r0c0;
	this1._01 = _r1c0;
	this1._10 = _r0c1;
	this1._11 = _r1c1;
	return this1;
};
glm__$Mat2_Mat2_$Impl_$.get_r0c0 = function(this1) {
	return this1._00;
};
glm__$Mat2_Mat2_$Impl_$.set_r0c0 = function(this1,v) {
	return this1._00 = v;
};
glm__$Mat2_Mat2_$Impl_$.get_r1c0 = function(this1) {
	return this1._01;
};
glm__$Mat2_Mat2_$Impl_$.set_r1c0 = function(this1,v) {
	return this1._01 = v;
};
glm__$Mat2_Mat2_$Impl_$.get_r0c1 = function(this1) {
	return this1._10;
};
glm__$Mat2_Mat2_$Impl_$.set_r0c1 = function(this1,v) {
	return this1._10 = v;
};
glm__$Mat2_Mat2_$Impl_$.get_r1c1 = function(this1) {
	return this1._11;
};
glm__$Mat2_Mat2_$Impl_$.set_r1c1 = function(this1,v) {
	return this1._11 = v;
};
glm__$Mat2_Mat2_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1._00;
	case 1:
		return this1._01;
	case 2:
		return this1._10;
	case 3:
		return this1._11;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Mat2_Mat2_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1._00 = value;
	case 1:
		return this1._01 = value;
	case 2:
		return this1._10 = value;
	case 3:
		return this1._11 = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Mat2_Mat2_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1._00 - b._00) >= glm_GLM.EPSILON || Math.abs(this1._10 - b._10) >= glm_GLM.EPSILON || Math.abs(this1._01 - b._01) >= glm_GLM.EPSILON || Math.abs(this1._11 - b._11) >= glm_GLM.EPSILON);
};
glm__$Mat2_Mat2_$Impl_$.toString = function(this1) {
	return "[" + this1._00 + ", " + this1._10 + "]\n" + ("[" + this1._01 + ", " + this1._11 + "]\n");
};
glm__$Mat2_Mat2_$Impl_$.identity = function(dest) {
	dest._00 = 1;
	dest._10 = 0;
	dest._01 = 0;
	dest._11 = 1;
	return dest;
};
glm__$Mat2_Mat2_$Impl_$.copy = function(src,dest) {
	dest._00 = src._00;
	dest._10 = src._10;
	dest._01 = src._01;
	dest._11 = src._11;
	return dest;
};
glm__$Mat2_Mat2_$Impl_$.transpose = function(src,dest) {
	var src_r1c0 = src._01;
	dest._00 = src._00;
	dest._01 = src._10;
	dest._10 = src_r1c0;
	dest._11 = src._11;
	return dest;
};
glm__$Mat2_Mat2_$Impl_$.determinant = function(src) {
	return src._00 * src._11 - src._10 * src._01;
};
glm__$Mat2_Mat2_$Impl_$.invert = function(src,dest) {
	var det = src._00 * src._11 - src._10 * src._01;
	if(Math.abs(det) < glm_GLM.EPSILON) {
		throw new js__$Boot_HaxeError("determinant is too small");
	}
	var invdet = 1.0 / det;
	var _s = src;
	if(src == dest) {
		var this1 = new glm_Mat2Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._10 = 0;
		this1._11 = 0;
		var dest1 = this1;
		dest1._00 = src._00;
		dest1._10 = src._10;
		dest1._01 = src._01;
		dest1._11 = src._11;
		_s = dest1;
	}
	dest._00 = _s._11 * invdet;
	dest._10 = -_s._10 * invdet;
	dest._01 = -_s._01 * invdet;
	dest._11 = _s._00 * invdet;
	return dest;
};
glm__$Mat2_Mat2_$Impl_$.multMat = function(a,b,dest) {
	var _a;
	var _b;
	if(dest == a) {
		var this1 = new glm_Mat2Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._10 = 0;
		this1._11 = 0;
		var dest1 = this1;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._01 = a._01;
		dest1._11 = a._11;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this2 = new glm_Mat2Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._10 = 0;
		this2._11 = 0;
		var dest2 = this2;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._01 = b._01;
		dest2._11 = b._11;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11;
	return dest;
};
glm__$Mat2_Mat2_$Impl_$.multMatOp = function(a,b) {
	var this1 = new glm_Mat2Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._10 = 0;
	this1._11 = 0;
	var dest = this1;
	var _a;
	var _b;
	if(dest == a) {
		var this2 = new glm_Mat2Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._10 = 0;
		this2._11 = 0;
		var dest1 = this2;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._01 = a._01;
		dest1._11 = a._11;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this3 = new glm_Mat2Base();
		this3._00 = 0;
		this3._01 = 0;
		this3._10 = 0;
		this3._11 = 0;
		var dest2 = this3;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._01 = b._01;
		dest2._11 = b._11;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11;
	return dest;
};
glm__$Mat2_Mat2_$Impl_$.multVec = function(m,v,dest) {
	var x = v.x;
	var y = v.y;
	dest.x = m._00 * x + m._10 * y;
	dest.y = m._01 * x + m._11 * y;
	return dest;
};
glm__$Mat2_Mat2_$Impl_$.multVecOp = function(m,v) {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	var x = v.x;
	var y = v.y;
	dest.x = m._00 * x + m._10 * y;
	dest.y = m._01 * x + m._11 * y;
	return dest;
};
glm__$Mat2_Mat2_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Mat2Base();
	this1._00 = arr[0];
	this1._01 = arr[1];
	this1._10 = arr[2];
	this1._11 = arr[3];
	return this1;
};
glm__$Mat2_Mat2_$Impl_$.toFloatArray = function(this1) {
	return [this1._00,this1._01,this1._10,this1._11];
};
var glm_Mat3Base = $hx_exports["glm"]["Mat3Base"] = function() {
};
glm_Mat3Base.__name__ = true;
glm_Mat3Base.prototype = {
	__class__: glm_Mat3Base
};
var glm__$Mat3_Mat3_$Impl_$ = $hx_exports["glm"]["Mat3Util"] = {};
glm__$Mat3_Mat3_$Impl_$.__name__ = true;
glm__$Mat3_Mat3_$Impl_$._new = function(_r0c0,_r0c1,_r0c2,_r1c0,_r1c1,_r1c2,_r2c0,_r2c1,_r2c2) {
	if(_r2c2 == null) {
		_r2c2 = 0;
	}
	if(_r2c1 == null) {
		_r2c1 = 0;
	}
	if(_r2c0 == null) {
		_r2c0 = 0;
	}
	if(_r1c2 == null) {
		_r1c2 = 0;
	}
	if(_r1c1 == null) {
		_r1c1 = 0;
	}
	if(_r1c0 == null) {
		_r1c0 = 0;
	}
	if(_r0c2 == null) {
		_r0c2 = 0;
	}
	if(_r0c1 == null) {
		_r0c1 = 0;
	}
	if(_r0c0 == null) {
		_r0c0 = 0;
	}
	var this1 = new glm_Mat3Base();
	this1._00 = _r0c0;
	this1._01 = _r1c0;
	this1._02 = _r2c0;
	this1._10 = _r0c1;
	this1._11 = _r1c1;
	this1._12 = _r2c1;
	this1._20 = _r0c2;
	this1._21 = _r1c2;
	this1._22 = _r2c2;
	return this1;
};
glm__$Mat3_Mat3_$Impl_$.get_r0c0 = function(this1) {
	return this1._00;
};
glm__$Mat3_Mat3_$Impl_$.set_r0c0 = function(this1,v) {
	return this1._00 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r1c0 = function(this1) {
	return this1._01;
};
glm__$Mat3_Mat3_$Impl_$.set_r1c0 = function(this1,v) {
	return this1._01 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r2c0 = function(this1) {
	return this1._02;
};
glm__$Mat3_Mat3_$Impl_$.set_r2c0 = function(this1,v) {
	return this1._02 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r0c1 = function(this1) {
	return this1._10;
};
glm__$Mat3_Mat3_$Impl_$.set_r0c1 = function(this1,v) {
	return this1._10 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r1c1 = function(this1) {
	return this1._11;
};
glm__$Mat3_Mat3_$Impl_$.set_r1c1 = function(this1,v) {
	return this1._11 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r2c1 = function(this1) {
	return this1._12;
};
glm__$Mat3_Mat3_$Impl_$.set_r2c1 = function(this1,v) {
	return this1._12 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r0c2 = function(this1) {
	return this1._20;
};
glm__$Mat3_Mat3_$Impl_$.set_r0c2 = function(this1,v) {
	return this1._20 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r1c2 = function(this1) {
	return this1._21;
};
glm__$Mat3_Mat3_$Impl_$.set_r1c2 = function(this1,v) {
	return this1._21 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r2c2 = function(this1) {
	return this1._22;
};
glm__$Mat3_Mat3_$Impl_$.set_r2c2 = function(this1,v) {
	return this1._22 = v;
};
glm__$Mat3_Mat3_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1._00;
	case 1:
		return this1._01;
	case 2:
		return this1._02;
	case 3:
		return this1._10;
	case 4:
		return this1._11;
	case 5:
		return this1._12;
	case 6:
		return this1._20;
	case 7:
		return this1._21;
	case 8:
		return this1._22;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-8)!");
	}
};
glm__$Mat3_Mat3_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1._00 = value;
	case 1:
		return this1._01 = value;
	case 2:
		return this1._02 = value;
	case 3:
		return this1._10 = value;
	case 4:
		return this1._11 = value;
	case 5:
		return this1._12 = value;
	case 6:
		return this1._20 = value;
	case 7:
		return this1._21 = value;
	case 8:
		return this1._22 = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-8)!");
	}
};
glm__$Mat3_Mat3_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1._00 - b._00) >= glm_GLM.EPSILON || Math.abs(this1._10 - b._10) >= glm_GLM.EPSILON || Math.abs(this1._20 - b._20) >= glm_GLM.EPSILON || Math.abs(this1._01 - b._01) >= glm_GLM.EPSILON || Math.abs(this1._11 - b._11) >= glm_GLM.EPSILON || Math.abs(this1._21 - b._21) >= glm_GLM.EPSILON || Math.abs(this1._02 - b._02) >= glm_GLM.EPSILON || Math.abs(this1._12 - b._12) >= glm_GLM.EPSILON || Math.abs(this1._22 - b._22) >= glm_GLM.EPSILON);
};
glm__$Mat3_Mat3_$Impl_$.toString = function(this1) {
	return "[" + this1._00 + ", " + this1._10 + ", " + this1._20 + "]\n" + ("[" + this1._01 + ", " + this1._11 + ", " + this1._21 + "]\n") + ("[" + this1._02 + ", " + this1._12 + ", " + this1._22 + "]\n");
};
glm__$Mat3_Mat3_$Impl_$.identity = function(dest) {
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.copy = function(src,dest) {
	dest._00 = src._00;
	dest._10 = src._10;
	dest._20 = src._20;
	dest._01 = src._01;
	dest._11 = src._11;
	dest._21 = src._21;
	dest._02 = src._02;
	dest._12 = src._12;
	dest._22 = src._22;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.transpose = function(src,dest) {
	var src_r1c0 = src._01;
	var src_r2c0 = src._02;
	var src_r2c1 = src._12;
	dest._00 = src._00;
	dest._01 = src._10;
	dest._02 = src._20;
	dest._10 = src_r1c0;
	dest._11 = src._11;
	dest._12 = src._21;
	dest._20 = src_r2c0;
	dest._21 = src_r2c1;
	dest._22 = src._22;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.cofactor = function(a,b,c,d) {
	return a * d - b * c;
};
glm__$Mat3_Mat3_$Impl_$.determinant = function(src) {
	var c00 = src._11 * src._22 - src._21 * src._12;
	var c01 = src._10 * src._22 - src._20 * src._12;
	var c02 = src._10 * src._21 - src._20 * src._11;
	return src._00 * c00 - src._01 * c01 + src._02 * c02;
};
glm__$Mat3_Mat3_$Impl_$.invert = function(src,dest) {
	var c00 = src._11 * src._22 - src._21 * src._12;
	var c01 = src._10 * src._22 - src._20 * src._12;
	var c02 = src._10 * src._21 - src._20 * src._11;
	var det = src._00 * c00 - src._01 * c01 + src._02 * c02;
	if(Math.abs(det) < glm_GLM.EPSILON) {
		throw new js__$Boot_HaxeError("determinant is too small");
	}
	var c10 = src._01 * src._22 - src._21 * src._02;
	var c11 = src._00 * src._22 - src._20 * src._02;
	var c12 = src._00 * src._21 - src._20 * src._01;
	var c20 = src._01 * src._12 - src._11 * src._02;
	var c21 = src._00 * src._12 - src._10 * src._02;
	var c22 = src._00 * src._11 - src._10 * src._01;
	var invdet = 1.0 / det;
	dest._00 = c00 * invdet;
	dest._01 = -c01 * invdet;
	dest._02 = c02 * invdet;
	dest._10 = -c10 * invdet;
	dest._11 = c11 * invdet;
	dest._12 = -c12 * invdet;
	dest._20 = c20 * invdet;
	dest._21 = -c21 * invdet;
	dest._22 = c22 * invdet;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.multMat = function(a,b,dest) {
	var _a;
	var _b;
	if(dest == a) {
		var this1 = new glm_Mat3Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		var dest1 = this1;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._20 = a._20;
		dest1._01 = a._01;
		dest1._11 = a._11;
		dest1._21 = a._21;
		dest1._02 = a._02;
		dest1._12 = a._12;
		dest1._22 = a._22;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this2 = new glm_Mat3Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		var dest2 = this2;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._20 = b._20;
		dest2._01 = b._01;
		dest2._11 = b._11;
		dest2._21 = b._21;
		dest2._02 = b._02;
		dest2._12 = b._12;
		dest2._22 = b._22;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12;
	dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12;
	dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22;
	dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02;
	dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12;
	dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.multMatOp = function(a,b) {
	var this1 = new glm_Mat3Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	var dest = this1;
	var _a;
	var _b;
	if(dest == a) {
		var this2 = new glm_Mat3Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		var dest1 = this2;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._20 = a._20;
		dest1._01 = a._01;
		dest1._11 = a._11;
		dest1._21 = a._21;
		dest1._02 = a._02;
		dest1._12 = a._12;
		dest1._22 = a._22;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this3 = new glm_Mat3Base();
		this3._00 = 0;
		this3._01 = 0;
		this3._02 = 0;
		this3._10 = 0;
		this3._11 = 0;
		this3._12 = 0;
		this3._20 = 0;
		this3._21 = 0;
		this3._22 = 0;
		var dest2 = this3;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._20 = b._20;
		dest2._01 = b._01;
		dest2._11 = b._11;
		dest2._21 = b._21;
		dest2._02 = b._02;
		dest2._12 = b._12;
		dest2._22 = b._22;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12;
	dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12;
	dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22;
	dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02;
	dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12;
	dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.multVec = function(m,v,dest) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	dest.x = m._00 * x + m._10 * y + m._20 * z;
	dest.y = m._01 * x + m._11 * y + m._21 * z;
	dest.z = m._02 * x + m._12 * y + m._22 * z;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.multVecOp = function(m,v) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	var x = v.x;
	var y = v.y;
	var z = v.z;
	dest.x = m._00 * x + m._10 * y + m._20 * z;
	dest.y = m._01 * x + m._11 * y + m._21 * z;
	dest.z = m._02 * x + m._12 * y + m._22 * z;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Mat3Base();
	this1._00 = arr[0];
	this1._01 = arr[1];
	this1._02 = arr[2];
	this1._10 = arr[3];
	this1._11 = arr[4];
	this1._12 = arr[5];
	this1._20 = arr[6];
	this1._21 = arr[7];
	this1._22 = arr[8];
	return this1;
};
glm__$Mat3_Mat3_$Impl_$.toFloatArray = function(this1) {
	return [this1._00,this1._01,this1._02,this1._10,this1._11,this1._12,this1._20,this1._21,this1._22];
};
var glm_Mat4Base = $hx_exports["glm"]["Mat4Base"] = function() {
};
glm_Mat4Base.__name__ = true;
glm_Mat4Base.prototype = {
	__class__: glm_Mat4Base
};
var glm__$Mat4_Mat4_$Impl_$ = $hx_exports["glm"]["Mat4Util"] = {};
glm__$Mat4_Mat4_$Impl_$.__name__ = true;
glm__$Mat4_Mat4_$Impl_$._new = function(_r0c0,_r0c1,_r0c2,_r0c3,_r1c0,_r1c1,_r1c2,_r1c3,_r2c0,_r2c1,_r2c2,_r2c3,_r3c0,_r3c1,_r3c2,_r3c3) {
	if(_r3c3 == null) {
		_r3c3 = 0;
	}
	if(_r3c2 == null) {
		_r3c2 = 0;
	}
	if(_r3c1 == null) {
		_r3c1 = 0;
	}
	if(_r3c0 == null) {
		_r3c0 = 0;
	}
	if(_r2c3 == null) {
		_r2c3 = 0;
	}
	if(_r2c2 == null) {
		_r2c2 = 0;
	}
	if(_r2c1 == null) {
		_r2c1 = 0;
	}
	if(_r2c0 == null) {
		_r2c0 = 0;
	}
	if(_r1c3 == null) {
		_r1c3 = 0;
	}
	if(_r1c2 == null) {
		_r1c2 = 0;
	}
	if(_r1c1 == null) {
		_r1c1 = 0;
	}
	if(_r1c0 == null) {
		_r1c0 = 0;
	}
	if(_r0c3 == null) {
		_r0c3 = 0;
	}
	if(_r0c2 == null) {
		_r0c2 = 0;
	}
	if(_r0c1 == null) {
		_r0c1 = 0;
	}
	if(_r0c0 == null) {
		_r0c0 = 0;
	}
	var this1 = new glm_Mat4Base();
	this1._00 = _r0c0;
	this1._01 = _r1c0;
	this1._02 = _r2c0;
	this1._03 = _r3c0;
	this1._10 = _r0c1;
	this1._11 = _r1c1;
	this1._12 = _r2c1;
	this1._13 = _r3c1;
	this1._20 = _r0c2;
	this1._21 = _r1c2;
	this1._22 = _r2c2;
	this1._23 = _r3c2;
	this1._30 = _r0c3;
	this1._31 = _r1c3;
	this1._32 = _r2c3;
	this1._33 = _r3c3;
	return this1;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c0 = function(this1) {
	return this1._00;
};
glm__$Mat4_Mat4_$Impl_$.set_r0c0 = function(this1,v) {
	return this1._00 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c0 = function(this1) {
	return this1._01;
};
glm__$Mat4_Mat4_$Impl_$.set_r1c0 = function(this1,v) {
	return this1._01 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c0 = function(this1) {
	return this1._02;
};
glm__$Mat4_Mat4_$Impl_$.set_r2c0 = function(this1,v) {
	return this1._02 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c0 = function(this1) {
	return this1._03;
};
glm__$Mat4_Mat4_$Impl_$.set_r3c0 = function(this1,v) {
	return this1._03 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c1 = function(this1) {
	return this1._10;
};
glm__$Mat4_Mat4_$Impl_$.set_r0c1 = function(this1,v) {
	return this1._10 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c1 = function(this1) {
	return this1._11;
};
glm__$Mat4_Mat4_$Impl_$.set_r1c1 = function(this1,v) {
	return this1._11 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c1 = function(this1) {
	return this1._12;
};
glm__$Mat4_Mat4_$Impl_$.set_r2c1 = function(this1,v) {
	return this1._12 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c1 = function(this1) {
	return this1._13;
};
glm__$Mat4_Mat4_$Impl_$.set_r3c1 = function(this1,v) {
	return this1._13 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c2 = function(this1) {
	return this1._20;
};
glm__$Mat4_Mat4_$Impl_$.set_r0c2 = function(this1,v) {
	return this1._20 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c2 = function(this1) {
	return this1._21;
};
glm__$Mat4_Mat4_$Impl_$.set_r1c2 = function(this1,v) {
	return this1._21 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c2 = function(this1) {
	return this1._22;
};
glm__$Mat4_Mat4_$Impl_$.set_r2c2 = function(this1,v) {
	return this1._22 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c2 = function(this1) {
	return this1._23;
};
glm__$Mat4_Mat4_$Impl_$.set_r3c2 = function(this1,v) {
	return this1._23 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c3 = function(this1) {
	return this1._30;
};
glm__$Mat4_Mat4_$Impl_$.set_r0c3 = function(this1,v) {
	return this1._30 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c3 = function(this1) {
	return this1._31;
};
glm__$Mat4_Mat4_$Impl_$.set_r1c3 = function(this1,v) {
	return this1._31 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c3 = function(this1) {
	return this1._32;
};
glm__$Mat4_Mat4_$Impl_$.set_r2c3 = function(this1,v) {
	return this1._32 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c3 = function(this1) {
	return this1._33;
};
glm__$Mat4_Mat4_$Impl_$.set_r3c3 = function(this1,v) {
	return this1._33 = v;
};
glm__$Mat4_Mat4_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1._00;
	case 1:
		return this1._01;
	case 2:
		return this1._02;
	case 3:
		return this1._03;
	case 4:
		return this1._10;
	case 5:
		return this1._11;
	case 6:
		return this1._12;
	case 7:
		return this1._13;
	case 8:
		return this1._20;
	case 9:
		return this1._21;
	case 10:
		return this1._22;
	case 11:
		return this1._23;
	case 12:
		return this1._30;
	case 13:
		return this1._31;
	case 14:
		return this1._32;
	case 15:
		return this1._33;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-15)!");
	}
};
glm__$Mat4_Mat4_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1._00 = value;
	case 1:
		return this1._01 = value;
	case 2:
		return this1._02 = value;
	case 3:
		return this1._03 = value;
	case 4:
		return this1._10 = value;
	case 5:
		return this1._11 = value;
	case 6:
		return this1._12 = value;
	case 7:
		return this1._13 = value;
	case 8:
		return this1._20 = value;
	case 9:
		return this1._21 = value;
	case 10:
		return this1._22 = value;
	case 11:
		return this1._23 = value;
	case 12:
		return this1._30 = value;
	case 13:
		return this1._31 = value;
	case 14:
		return this1._32 = value;
	case 15:
		return this1._33 = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-15)!");
	}
};
glm__$Mat4_Mat4_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1._00 - b._00) >= glm_GLM.EPSILON || Math.abs(this1._10 - b._10) >= glm_GLM.EPSILON || Math.abs(this1._20 - b._20) >= glm_GLM.EPSILON || Math.abs(this1._30 - b._30) >= glm_GLM.EPSILON || Math.abs(this1._01 - b._01) >= glm_GLM.EPSILON || Math.abs(this1._11 - b._11) >= glm_GLM.EPSILON || Math.abs(this1._21 - b._21) >= glm_GLM.EPSILON || Math.abs(this1._31 - b._31) >= glm_GLM.EPSILON || Math.abs(this1._02 - b._02) >= glm_GLM.EPSILON || Math.abs(this1._12 - b._12) >= glm_GLM.EPSILON || Math.abs(this1._22 - b._22) >= glm_GLM.EPSILON || Math.abs(this1._32 - b._32) >= glm_GLM.EPSILON || Math.abs(this1._03 - b._03) >= glm_GLM.EPSILON || Math.abs(this1._13 - b._13) >= glm_GLM.EPSILON || Math.abs(this1._23 - b._23) >= glm_GLM.EPSILON || Math.abs(this1._33 - b._33) >= glm_GLM.EPSILON);
};
glm__$Mat4_Mat4_$Impl_$.toString = function(this1) {
	return "[" + this1._00 + ", " + this1._10 + ", " + this1._20 + ", " + this1._30 + "]\n" + ("[" + this1._01 + ", " + this1._11 + ", " + this1._21 + ", " + this1._31 + "]\n") + ("[" + this1._02 + ", " + this1._12 + ", " + this1._22 + ", " + this1._32 + "]\n") + ("[" + this1._03 + ", " + this1._13 + ", " + this1._23 + ", " + this1._33 + "]\n");
};
glm__$Mat4_Mat4_$Impl_$.identity = function(dest) {
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.copy = function(src,dest) {
	dest._00 = src._00;
	dest._10 = src._10;
	dest._20 = src._20;
	dest._30 = src._30;
	dest._01 = src._01;
	dest._11 = src._11;
	dest._21 = src._21;
	dest._31 = src._31;
	dest._02 = src._02;
	dest._12 = src._12;
	dest._22 = src._22;
	dest._32 = src._32;
	dest._03 = src._03;
	dest._13 = src._13;
	dest._23 = src._23;
	dest._33 = src._33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.transpose = function(src,dest) {
	var src_r1c0 = src._01;
	var src_r2c0 = src._02;
	var src_r2c1 = src._12;
	var src_r3c0 = src._03;
	var src_r3c1 = src._13;
	var src_r3c2 = src._23;
	dest._00 = src._00;
	dest._01 = src._10;
	dest._02 = src._20;
	dest._03 = src._30;
	dest._10 = src_r1c0;
	dest._11 = src._11;
	dest._12 = src._21;
	dest._13 = src._31;
	dest._20 = src_r2c0;
	dest._21 = src_r2c1;
	dest._22 = src._22;
	dest._23 = src._32;
	dest._30 = src_r3c0;
	dest._31 = src_r3c1;
	dest._32 = src_r3c2;
	dest._33 = src._33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.determinant = function(src) {
	var a00 = src._00;
	var a01 = src._01;
	var a02 = src._02;
	var a03 = src._03;
	var a10 = src._10;
	var a11 = src._11;
	var a12 = src._12;
	var a13 = src._13;
	var a20 = src._20;
	var a21 = src._21;
	var a22 = src._22;
	var a23 = src._23;
	var a30 = src._30;
	var a31 = src._31;
	var a32 = src._32;
	var a33 = src._33;
	var b00 = a00 * a11 - a01 * a10;
	var b01 = a00 * a12 - a02 * a10;
	var b02 = a00 * a13 - a03 * a10;
	var b03 = a01 * a12 - a02 * a11;
	var b04 = a01 * a13 - a03 * a11;
	var b05 = a02 * a13 - a03 * a12;
	var b06 = a20 * a31 - a21 * a30;
	var b07 = a20 * a32 - a22 * a30;
	var b08 = a20 * a33 - a23 * a30;
	var b09 = a21 * a32 - a22 * a31;
	var b10 = a21 * a33 - a23 * a31;
	var b11 = a22 * a33 - a23 * a32;
	return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};
glm__$Mat4_Mat4_$Impl_$.invert = function(src,dest) {
	var a00 = src._00;
	var a01 = src._10;
	var a02 = src._20;
	var a03 = src._30;
	var a10 = src._01;
	var a11 = src._11;
	var a12 = src._21;
	var a13 = src._31;
	var a20 = src._02;
	var a21 = src._12;
	var a22 = src._22;
	var a23 = src._32;
	var a30 = src._03;
	var a31 = src._13;
	var a32 = src._23;
	var a33 = src._33;
	var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
	var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
	var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
	var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
	var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
	if(Math.abs(det) <= glm_GLM.EPSILON) {
		throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
	}
	var idet = 1 / det;
	dest._00 = t00 * idet;
	dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
	dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
	dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
	dest._10 = t01 * idet;
	dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
	dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
	dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
	dest._20 = t02 * idet;
	dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
	dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
	dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
	dest._30 = t03 * idet;
	dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
	dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
	dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multMat = function(a,b,dest) {
	var _a;
	var _b;
	if(dest == a) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest1 = this1;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._20 = a._20;
		dest1._30 = a._30;
		dest1._01 = a._01;
		dest1._11 = a._11;
		dest1._21 = a._21;
		dest1._31 = a._31;
		dest1._02 = a._02;
		dest1._12 = a._12;
		dest1._22 = a._22;
		dest1._32 = a._32;
		dest1._03 = a._03;
		dest1._13 = a._13;
		dest1._23 = a._23;
		dest1._33 = a._33;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest2 = this2;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._20 = b._20;
		dest2._30 = b._30;
		dest2._01 = b._01;
		dest2._11 = b._11;
		dest2._21 = b._21;
		dest2._31 = b._31;
		dest2._02 = b._02;
		dest2._12 = b._12;
		dest2._22 = b._22;
		dest2._32 = b._32;
		dest2._03 = b._03;
		dest2._13 = b._13;
		dest2._23 = b._23;
		dest2._33 = b._33;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
	dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
	dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
	dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
	dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
	dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
	dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
	dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
	dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
	dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
	dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
	dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
	dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multMatOp = function(a,b) {
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	var _a;
	var _b;
	if(dest == a) {
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._20 = a._20;
		dest1._30 = a._30;
		dest1._01 = a._01;
		dest1._11 = a._11;
		dest1._21 = a._21;
		dest1._31 = a._31;
		dest1._02 = a._02;
		dest1._12 = a._12;
		dest1._22 = a._22;
		dest1._32 = a._32;
		dest1._03 = a._03;
		dest1._13 = a._13;
		dest1._23 = a._23;
		dest1._33 = a._33;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this3 = new glm_Mat4Base();
		this3._00 = 0;
		this3._01 = 0;
		this3._02 = 0;
		this3._03 = 0;
		this3._10 = 0;
		this3._11 = 0;
		this3._12 = 0;
		this3._13 = 0;
		this3._20 = 0;
		this3._21 = 0;
		this3._22 = 0;
		this3._23 = 0;
		this3._30 = 0;
		this3._31 = 0;
		this3._32 = 0;
		this3._33 = 0;
		var dest2 = this3;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._20 = b._20;
		dest2._30 = b._30;
		dest2._01 = b._01;
		dest2._11 = b._11;
		dest2._21 = b._21;
		dest2._31 = b._31;
		dest2._02 = b._02;
		dest2._12 = b._12;
		dest2._22 = b._22;
		dest2._32 = b._32;
		dest2._03 = b._03;
		dest2._13 = b._13;
		dest2._23 = b._23;
		dest2._33 = b._33;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
	dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
	dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
	dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
	dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
	dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
	dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
	dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
	dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
	dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
	dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
	dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
	dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multVec = function(m,v,dest) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	var w = v.w;
	dest.x = m._00 * x + m._10 * y + m._20 * z + m._30 * w;
	dest.y = m._01 * x + m._11 * y + m._21 * z + m._31 * w;
	dest.z = m._02 * x + m._12 * y + m._22 * z + m._32 * w;
	dest.w = m._03 * x + m._13 * y + m._23 * z + m._33 * w;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multVecOp = function(m,v) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	var x = v.x;
	var y = v.y;
	var z = v.z;
	var w = v.w;
	dest.x = m._00 * x + m._10 * y + m._20 * z + m._30 * w;
	dest.y = m._01 * x + m._11 * y + m._21 * z + m._31 * w;
	dest.z = m._02 * x + m._12 * y + m._22 * z + m._32 * w;
	dest.w = m._03 * x + m._13 * y + m._23 * z + m._33 * w;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Mat4Base();
	this1._00 = arr[0];
	this1._01 = arr[1];
	this1._02 = arr[2];
	this1._03 = arr[3];
	this1._10 = arr[4];
	this1._11 = arr[5];
	this1._12 = arr[6];
	this1._13 = arr[7];
	this1._20 = arr[8];
	this1._21 = arr[9];
	this1._22 = arr[10];
	this1._23 = arr[11];
	this1._30 = arr[12];
	this1._31 = arr[13];
	this1._32 = arr[14];
	this1._33 = arr[15];
	return this1;
};
glm__$Mat4_Mat4_$Impl_$.toFloatArray = function(this1) {
	return [this1._00,this1._01,this1._02,this1._03,this1._10,this1._11,this1._12,this1._13,this1._20,this1._21,this1._22,this1._23,this1._30,this1._31,this1._32,this1._33];
};
var glm_QuatBase = $hx_exports["glm"]["QuatBase"] = function() {
};
glm_QuatBase.__name__ = true;
glm_QuatBase.prototype = {
	__class__: glm_QuatBase
};
var glm__$Quat_Quat_$Impl_$ = $hx_exports["glm"]["QuatUtil"] = {};
glm__$Quat_Quat_$Impl_$.__name__ = true;
glm__$Quat_Quat_$Impl_$.get_x = function(this1) {
	return this1.x;
};
glm__$Quat_Quat_$Impl_$.set_x = function(this1,v) {
	return this1.x = v;
};
glm__$Quat_Quat_$Impl_$.get_y = function(this1) {
	return this1.y;
};
glm__$Quat_Quat_$Impl_$.set_y = function(this1,v) {
	return this1.y = v;
};
glm__$Quat_Quat_$Impl_$.get_z = function(this1) {
	return this1.z;
};
glm__$Quat_Quat_$Impl_$.set_z = function(this1,v) {
	return this1.z = v;
};
glm__$Quat_Quat_$Impl_$.get_w = function(this1) {
	return this1.w;
};
glm__$Quat_Quat_$Impl_$.set_w = function(this1,v) {
	return this1.w = v;
};
glm__$Quat_Quat_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	case 3:
		return this1.w;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Quat_Quat_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1.x = value;
	case 1:
		return this1.y = value;
	case 2:
		return this1.z = value;
	case 3:
		return this1.w = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Quat_Quat_$Impl_$._new = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new glm_QuatBase();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	this1.w = w;
	return this1;
};
glm__$Quat_Quat_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON || Math.abs(this1.z - b.z) >= glm_GLM.EPSILON || Math.abs(this1.w - b.w) >= glm_GLM.EPSILON);
};
glm__$Quat_Quat_$Impl_$.toString = function(this1) {
	return "{" + this1.x + ", " + this1.y + ", " + this1.z + ", " + this1.w + "}";
};
glm__$Quat_Quat_$Impl_$.lengthSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
glm__$Quat_Quat_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
};
glm__$Quat_Quat_$Impl_$.normalize = function(q,dest) {
	var length = Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest.x = q.x * mult;
	dest.y = q.y * mult;
	dest.z = q.z * mult;
	dest.w = q.w * mult;
	return dest;
};
glm__$Quat_Quat_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
glm__$Quat_Quat_$Impl_$.identity = function(dest) {
	dest.x = 0;
	dest.y = 0;
	dest.z = 0;
	dest.w = 1;
	return dest;
};
glm__$Quat_Quat_$Impl_$.copy = function(src,dest) {
	dest.x = src.x;
	dest.y = src.y;
	dest.z = src.z;
	dest.w = src.w;
	return dest;
};
glm__$Quat_Quat_$Impl_$.axisAngle = function(axis,angle,dest) {
	angle *= 0.5;
	var s = Math.sin(angle);
	dest.x = s * axis.x;
	dest.y = s * axis.y;
	dest.z = s * axis.z;
	dest.w = Math.cos(angle);
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyQuats = function(a,b,dest) {
	var ax = a.x;
	var ay = a.y;
	var az = a.z;
	var aw = a.w;
	var bx = b.x;
	var by = b.y;
	var bz = b.z;
	var bw = b.w;
	dest.x = ax * bw + aw * bx + ay * bz - az * by;
	dest.y = ay * bw + aw * by + az * bx - ax * bz;
	dest.z = az * bw + aw * bz + ax * by - ay * bx;
	dest.w = aw * bw - ax * bx - ay * by - az * bz;
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyQuatsOp = function(a,b) {
	var this1 = new glm_QuatBase();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 1;
	var dest = this1;
	var ax = a.x;
	var ay = a.y;
	var az = a.z;
	var aw = a.w;
	var bx = b.x;
	var by = b.y;
	var bz = b.z;
	var bw = b.w;
	dest.x = ax * bw + aw * bx + ay * bz - az * by;
	dest.y = ay * bw + aw * by + az * bx - ax * bz;
	dest.z = az * bw + aw * bz + ax * by - ay * bx;
	dest.w = aw * bw - ax * bx - ay * by - az * bz;
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	dest.w = a.w * s;
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new glm_QuatBase();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 1;
	var dest = this1;
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	dest.w = a.w * s;
	return dest;
};
glm__$Quat_Quat_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a.x;
	dest.x = a1 + t * (b.x - a1);
	var a2 = a.y;
	dest.y = a2 + t * (b.y - a2);
	var a3 = a.z;
	dest.z = a3 + t * (b.z - a3);
	var a4 = a.w;
	dest.w = a4 + t * (b.w - a4);
	return dest;
};
glm__$Quat_Quat_$Impl_$.slerp = function(a,b,t,dest) {
	var bx = b.x;
	var by = b.y;
	var bz = b.z;
	var bw = b.w;
	var cosTheta = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	if(cosTheta < 0) {
		cosTheta = -cosTheta;
		bx = -bx;
		by = -by;
		bz = -bz;
		bw = -bw;
	}
	if(cosTheta > 1 - glm_GLM.EPSILON) {
		var a1 = a.x;
		dest.x = a1 + t * (b.x - a1);
		var a2 = a.y;
		dest.y = a2 + t * (b.y - a2);
		var a3 = a.z;
		dest.z = a3 + t * (b.z - a3);
		var a4 = a.w;
		dest.w = a4 + t * (b.w - a4);
		return dest;
	} else {
		var angle = Math.acos(cosTheta);
		var sa = 1 / Math.sin(angle);
		var i = Math.sin((1 - t) * angle);
		var j = Math.sin(t * angle);
		dest.x = (i * a.x + j * bx) * sa;
		dest.y = (i * a.y + j * by) * sa;
		dest.z = (i * a.z + j * bz) * sa;
		dest.w = (i * a.w + j * bw) * sa;
		return dest;
	}
};
glm__$Quat_Quat_$Impl_$.invert = function(q,dest) {
	var x = q.x;
	var y = q.y;
	var z = q.z;
	var w = q.w;
	var d = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;
	var oneOverD = d < glm_GLM.EPSILON ? 0 : 1 / d;
	dest.x = -x * oneOverD;
	dest.y = -y * oneOverD;
	dest.z = -z * oneOverD;
	dest.w = w * oneOverD;
	return dest;
};
glm__$Quat_Quat_$Impl_$.conjugate = function(q,dest) {
	dest.x = -1 * q.x;
	dest.y = -1 * q.y;
	dest.z = -1 * q.z;
	dest.w = q.w;
	return dest;
};
glm__$Quat_Quat_$Impl_$.fromEuler = function(x,y,z,dest) {
	var c1 = Math.cos(x / 2);
	var c2 = Math.cos(y / 2);
	var c3 = Math.cos(z / 2);
	var s1 = Math.sin(x / 2);
	var s2 = Math.sin(y / 2);
	var s3 = Math.sin(z / 2);
	dest.x = s1 * c2 * c3 + c1 * s2 * s3;
	dest.y = c1 * s2 * c3 - s1 * c2 * s3;
	dest.z = c1 * c2 * s3 + s1 * s2 * c3;
	dest.w = c1 * c2 * c3 - s1 * s2 * s3;
	return dest;
};
glm__$Quat_Quat_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_QuatBase();
	this1.x = arr[0];
	this1.y = arr[1];
	this1.z = arr[2];
	this1.w = arr[3];
	return this1;
};
glm__$Quat_Quat_$Impl_$.toFloatArray = function(this1) {
	return [this1.x,this1.y,this1.z,this1.w];
};
var glm_Vec2Base = $hx_exports["glm"]["Vec2Base"] = function() {
};
glm_Vec2Base.__name__ = true;
glm_Vec2Base.prototype = {
	__class__: glm_Vec2Base
};
var glm__$Vec2_Vec2_$Impl_$ = $hx_exports["glm"]["Vec2Util"] = {};
glm__$Vec2_Vec2_$Impl_$.__name__ = true;
glm__$Vec2_Vec2_$Impl_$.get_x = function(this1) {
	return this1.x;
};
glm__$Vec2_Vec2_$Impl_$.set_x = function(this1,v) {
	return this1.x = v;
};
glm__$Vec2_Vec2_$Impl_$.get_y = function(this1) {
	return this1.y;
};
glm__$Vec2_Vec2_$Impl_$.set_y = function(this1,v) {
	return this1.y = v;
};
glm__$Vec2_Vec2_$Impl_$.get_i = function(this1) {
	return this1.x;
};
glm__$Vec2_Vec2_$Impl_$.set_i = function(this1,v) {
	return this1.x = v;
};
glm__$Vec2_Vec2_$Impl_$.get_j = function(this1) {
	return this1.y;
};
glm__$Vec2_Vec2_$Impl_$.set_j = function(this1,v) {
	return this1.y = v;
};
glm__$Vec2_Vec2_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-1)!");
	}
};
glm__$Vec2_Vec2_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1.x = value;
	case 1:
		return this1.y = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-1)!");
	}
};
glm__$Vec2_Vec2_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new glm_Vec2Base();
	this1.x = x;
	this1.y = y;
	return this1;
};
glm__$Vec2_Vec2_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON);
};
glm__$Vec2_Vec2_$Impl_$.toString = function(this1) {
	return "<" + this1.x + ", " + this1.y + ">";
};
glm__$Vec2_Vec2_$Impl_$.lengthSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y;
};
glm__$Vec2_Vec2_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
glm__$Vec2_Vec2_$Impl_$.copy = function(src,dest) {
	dest.x = src.x;
	dest.y = src.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.setComponents = function(dest,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	dest.x = x;
	dest.y = y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.addVec = function(a,b,dest) {
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.subtractVec = function(a,b,dest) {
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.addVecOp = function(a,b) {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.subtractVecOp = function(a,b) {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.addScalar = function(a,s,dest) {
	dest.x = a.x + s;
	dest.y = a.y + s;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest.x = a.x * s;
	dest.y = a.y * s;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.addScalarOp = function(a,s) {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x + s;
	dest.y = a.y + s;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.subtractScalarOp = function(a,s) {
	var s1 = -s;
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x + s1;
	dest.y = a.y + s1;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x * s;
	dest.y = a.y * s;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.divideScalarOp = function(a,s) {
	var s1 = 1 / s;
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x * s1;
	dest.y = a.y * s1;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.distanceSquared = function(a,b) {
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
};
glm__$Vec2_Vec2_$Impl_$.distance = function(a,b) {
	return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
};
glm__$Vec2_Vec2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
glm__$Vec2_Vec2_$Impl_$.cross = function(a,b,dest) {
	var z = a.x * b.y - a.y * b.x;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = z;
	dest = this1;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.normalize = function(v,dest) {
	var length = Math.sqrt(v.x * v.x + v.y * v.y);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest.x = v.x * mult;
	dest.y = v.y * mult;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a.x;
	dest.x = a1 + t * (b.x - a1);
	var a2 = a.y;
	dest.y = a2 + t * (b.y - a2);
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Vec2Base();
	this1.x = arr[0];
	this1.y = arr[1];
	return this1;
};
glm__$Vec2_Vec2_$Impl_$.toFloatArray = function(this1) {
	return [this1.x,this1.y];
};
var glm_Vec3Base = $hx_exports["glm"]["Vec3Base"] = function() {
};
glm_Vec3Base.__name__ = true;
glm_Vec3Base.prototype = {
	__class__: glm_Vec3Base
};
var glm__$Vec3_Vec3_$Impl_$ = $hx_exports["glm"]["Vec3Util"] = {};
glm__$Vec3_Vec3_$Impl_$.__name__ = true;
glm__$Vec3_Vec3_$Impl_$.get_x = function(this1) {
	return this1.x;
};
glm__$Vec3_Vec3_$Impl_$.set_x = function(this1,v) {
	return this1.x = v;
};
glm__$Vec3_Vec3_$Impl_$.get_y = function(this1) {
	return this1.y;
};
glm__$Vec3_Vec3_$Impl_$.set_y = function(this1,v) {
	return this1.y = v;
};
glm__$Vec3_Vec3_$Impl_$.get_z = function(this1) {
	return this1.z;
};
glm__$Vec3_Vec3_$Impl_$.set_z = function(this1,v) {
	return this1.z = v;
};
glm__$Vec3_Vec3_$Impl_$.get_r = function(this1) {
	return this1.x;
};
glm__$Vec3_Vec3_$Impl_$.set_r = function(this1,v) {
	return this1.x = v;
};
glm__$Vec3_Vec3_$Impl_$.get_g = function(this1) {
	return this1.y;
};
glm__$Vec3_Vec3_$Impl_$.set_g = function(this1,v) {
	return this1.y = v;
};
glm__$Vec3_Vec3_$Impl_$.get_b = function(this1) {
	return this1.z;
};
glm__$Vec3_Vec3_$Impl_$.set_b = function(this1,v) {
	return this1.z = v;
};
glm__$Vec3_Vec3_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-2)!");
	}
};
glm__$Vec3_Vec3_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1.x = value;
	case 1:
		return this1.y = value;
	case 2:
		return this1.z = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-2)!");
	}
};
glm__$Vec3_Vec3_$Impl_$._new = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	return this1;
};
glm__$Vec3_Vec3_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON || Math.abs(this1.z - b.z) >= glm_GLM.EPSILON);
};
glm__$Vec3_Vec3_$Impl_$.toString = function(this1) {
	return "<" + this1.x + ", " + this1.y + ", " + this1.z + ">";
};
glm__$Vec3_Vec3_$Impl_$.lengthSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z;
};
glm__$Vec3_Vec3_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
};
glm__$Vec3_Vec3_$Impl_$.copy = function(src,dest) {
	dest.x = src.x;
	dest.y = src.y;
	dest.z = src.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.setComponents = function(dest,x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	dest.x = x;
	dest.y = y;
	dest.z = z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addVec = function(a,b,dest) {
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	dest.z = a.z + b.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.subtractVec = function(a,b,dest) {
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addVecOp = function(a,b) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	dest.z = a.z + b.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.subtractVecOp = function(a,b) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addScalar = function(a,s,dest) {
	dest.x = a.x + s;
	dest.y = a.y + s;
	dest.z = a.z + s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addScalarOp = function(a,s) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x + s;
	dest.y = a.y + s;
	dest.z = a.z + s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.subtractScalarOp = function(a,s) {
	var s1 = -s;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x + s1;
	dest.y = a.y + s1;
	dest.z = a.z + s1;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.divideScalarOp = function(a,s) {
	var s1 = 1 / s;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x * s1;
	dest.y = a.y * s1;
	dest.z = a.z * s1;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.distanceSquared = function(a,b) {
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z);
};
glm__$Vec3_Vec3_$Impl_$.distance = function(a,b) {
	return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));
};
glm__$Vec3_Vec3_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z;
};
glm__$Vec3_Vec3_$Impl_$.cross = function(a,b,dest) {
	var x = a.y * b.z - a.z * b.y;
	var y = a.z * b.x - a.x * b.z;
	var z = a.x * b.y - a.y * b.x;
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	dest = this1;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.normalize = function(v,dest) {
	var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest.x = v.x * mult;
	dest.y = v.y * mult;
	dest.z = v.z * mult;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a.x;
	dest.x = a1 + t * (b.x - a1);
	var a2 = a.y;
	dest.y = a2 + t * (b.y - a2);
	var a3 = a.z;
	dest.z = a3 + t * (b.z - a3);
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Vec3Base();
	this1.x = arr[0];
	this1.y = arr[1];
	this1.z = arr[2];
	return this1;
};
glm__$Vec3_Vec3_$Impl_$.toFloatArray = function(this1) {
	return [this1.x,this1.y,this1.z];
};
var glm_Vec4Base = $hx_exports["glm"]["Vec4Base"] = function() {
};
glm_Vec4Base.__name__ = true;
glm_Vec4Base.prototype = {
	__class__: glm_Vec4Base
};
var glm__$Vec4_Vec4_$Impl_$ = $hx_exports["glm"]["Vec4Util"] = {};
glm__$Vec4_Vec4_$Impl_$.__name__ = true;
glm__$Vec4_Vec4_$Impl_$.get_x = function(this1) {
	return this1.x;
};
glm__$Vec4_Vec4_$Impl_$.set_x = function(this1,v) {
	return this1.x = v;
};
glm__$Vec4_Vec4_$Impl_$.get_y = function(this1) {
	return this1.y;
};
glm__$Vec4_Vec4_$Impl_$.set_y = function(this1,v) {
	return this1.y = v;
};
glm__$Vec4_Vec4_$Impl_$.get_z = function(this1) {
	return this1.z;
};
glm__$Vec4_Vec4_$Impl_$.set_z = function(this1,v) {
	return this1.z = v;
};
glm__$Vec4_Vec4_$Impl_$.get_w = function(this1) {
	return this1.w;
};
glm__$Vec4_Vec4_$Impl_$.set_w = function(this1,v) {
	return this1.w = v;
};
glm__$Vec4_Vec4_$Impl_$.get_r = function(this1) {
	return this1.x;
};
glm__$Vec4_Vec4_$Impl_$.set_r = function(this1,v) {
	return this1.x = v;
};
glm__$Vec4_Vec4_$Impl_$.get_g = function(this1) {
	return this1.y;
};
glm__$Vec4_Vec4_$Impl_$.set_g = function(this1,v) {
	return this1.y = v;
};
glm__$Vec4_Vec4_$Impl_$.get_b = function(this1) {
	return this1.z;
};
glm__$Vec4_Vec4_$Impl_$.set_b = function(this1,v) {
	return this1.z = v;
};
glm__$Vec4_Vec4_$Impl_$.get_a = function(this1) {
	return this1.w;
};
glm__$Vec4_Vec4_$Impl_$.set_a = function(this1,v) {
	return this1.w = v;
};
glm__$Vec4_Vec4_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	case 3:
		return this1.w;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Vec4_Vec4_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1.x = value;
	case 1:
		return this1.y = value;
	case 2:
		return this1.z = value;
	case 3:
		return this1.w = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Vec4_Vec4_$Impl_$._new = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new glm_Vec4Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	this1.w = w;
	return this1;
};
glm__$Vec4_Vec4_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON || Math.abs(this1.z - b.z) >= glm_GLM.EPSILON || Math.abs(this1.w - b.w) >= glm_GLM.EPSILON);
};
glm__$Vec4_Vec4_$Impl_$.toString = function(this1) {
	return "<" + this1.x + ", " + this1.y + ", " + this1.z + ", " + this1.w + ">";
};
glm__$Vec4_Vec4_$Impl_$.lengthSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
glm__$Vec4_Vec4_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
};
glm__$Vec4_Vec4_$Impl_$.copy = function(src,dest) {
	dest.x = src.x;
	dest.y = src.y;
	dest.z = src.z;
	dest.w = src.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.setComponents = function(dest,x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	dest.x = x;
	dest.y = y;
	dest.z = z;
	dest.w = w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addVec = function(a,b,dest) {
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	dest.z = a.z + b.z;
	dest.w = a.w + b.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.subtractVec = function(a,b,dest) {
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	dest.w = a.w - b.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addVecOp = function(a,b) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	dest.z = a.z + b.z;
	dest.w = a.w + b.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.subtractVecOp = function(a,b) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	dest.w = a.w - b.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addScalar = function(a,s,dest) {
	dest.x = a.x + s;
	dest.y = a.y + s;
	dest.z = a.z + s;
	dest.w = a.w + s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	dest.w = a.w * s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addScalarOp = function(a,s) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x + s;
	dest.y = a.y + s;
	dest.z = a.z + s;
	dest.w = a.w + s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.subtractScalarOp = function(a,s) {
	var s1 = -s;
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x + s1;
	dest.y = a.y + s1;
	dest.z = a.z + s1;
	dest.w = a.w + s1;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	dest.w = a.w * s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.divideScalarOp = function(a,s) {
	var s1 = 1 / s;
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x * s1;
	dest.y = a.y * s1;
	dest.z = a.z * s1;
	dest.w = a.w * s1;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.distanceSquared = function(a,b) {
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z) + (a.w - b.w) * (a.w - b.w);
};
glm__$Vec4_Vec4_$Impl_$.distance = function(a,b) {
	return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z) + (a.w - b.w) * (a.w - b.w));
};
glm__$Vec4_Vec4_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
glm__$Vec4_Vec4_$Impl_$.normalize = function(v,dest) {
	var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest.x = v.x * mult;
	dest.y = v.y * mult;
	dest.z = v.z * mult;
	dest.w = v.w * mult;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a.x;
	dest.x = a1 + t * (b.x - a1);
	var a2 = a.y;
	dest.y = a2 + t * (b.y - a2);
	var a3 = a.z;
	dest.z = a3 + t * (b.z - a3);
	var a4 = a.w;
	dest.w = a4 + t * (b.w - a4);
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Vec4Base();
	this1.x = arr[0];
	this1.y = arr[1];
	this1.z = arr[2];
	this1.w = arr[3];
	return this1;
};
glm__$Vec4_Vec4_$Impl_$.toFloatArray = function(this1) {
	return [this1.x,this1.y,this1.z,this1.w];
};
var haxe_IMap = $hx_exports["haxe"]["IMap"] = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = $hx_exports["haxe"]["io"]["Bytes"] = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = $hx_exports["haxe"]["ds"]["IntMap"] = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = $hx_exports["haxe"]["ds"]["ObjectMap"] = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = $hx_exports["haxe"]["ds"]["_StringMap"]["StringMapIterator"] = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = $hx_exports["haxe"]["ds"]["StringMap"] = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_format_JsonParser = function(str) {
	this.str = str;
	this.pos = 0;
};
haxe_format_JsonParser.__name__ = true;
haxe_format_JsonParser.prototype = {
	parseRec: function() {
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				return this.parseString();
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var c1 = c;
				var start = this.pos - 1;
				var minus = c1 == 45;
				var digit = !minus;
				var zero = c1 == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				while(true) {
					c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				var f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
				var i = f | 0;
				if(i == f) {
					return i;
				} else {
					return f;
				}
				break;
			case 91:
				var arr = [];
				var comma = null;
				while(true) {
					var c2 = this.str.charCodeAt(this.pos++);
					switch(c2) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						if(comma == false) {
							this.invalidChar();
						}
						return arr;
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				var save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				var save1 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				var save2 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				var obj = { };
				var field = null;
				var comma1 = null;
				while(true) {
					var c3 = this.str.charCodeAt(this.pos++);
					switch(c3) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(comma1) {
							this.invalidChar();
						}
						field = this.parseString();
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						obj[field] = this.parseRec();
						field = null;
						comma1 = true;
						break;
					case 125:
						if(field != null || comma1 == false) {
							this.invalidChar();
						}
						return obj;
					default:
						this.invalidChar();
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.str;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.str.charCodeAt(this.pos++);
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCharCode(c);
					break;
				case 98:
					buf.b += "\x08";
					break;
				case 102:
					buf.b += "\x0C";
					break;
				case 110:
					buf.b += "\n";
					break;
				case 114:
					buf.b += "\r";
					break;
				case 116:
					buf.b += "\t";
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCharCode(uc);
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) {
				throw new js__$Boot_HaxeError("Unclosed string");
			}
		}
		if(buf == null) {
			return HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			var s1 = this.str;
			var len1 = this.pos - start - 1;
			buf.b += len1 == null ? HxOverrides.substr(s1,start,null) : HxOverrides.substr(s1,start,len1);
			return buf.b;
		}
	}
	,invalidChar: function() {
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	,invalidNumber: function(start) {
		throw new js__$Boot_HaxeError("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
	,__class__: haxe_format_JsonParser
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		var _this = this.b;
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = buf.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		return len;
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var minko_AbstractBackend = $hx_exports["minko"]["AbstractBackend"] = function() {
};
minko_AbstractBackend.__name__ = true;
minko_AbstractBackend.create = function() {
	return new minko_AbstractBackend();
};
minko_AbstractBackend.prototype = {
	initialize: function(canvas) {
	}
	,swapBuffers: function(canvas) {
	}
	,run: function(canvas) {
		while(canvas.get_active()) canvas.step();
	}
	,wait: function(canvas,ms) {
	}
	,__class__: minko_AbstractBackend
};
var minko_AbstractCanvas = $hx_exports["minko"]["AbstractCanvas"] = function(name,width,height,flags) {
	this._workers = new haxe_ds_StringMap();
	this._name = name;
	this._flags = flags;
	this._data = minko_data_Provider.create();
	this._active = false;
	this._swapBuffersAtEnterFrame = true;
	this._enterFrame = new minko_signal_Signal3();
	this._resized = new minko_signal_Signal3();
	this._fileDropped = new minko_signal_Signal();
	this._joystickAdded = new minko_signal_Signal2();
	this._joystickRemoved = new minko_signal_Signal2();
	this._suspended = new minko_signal_Signal();
	this._resumed = new minko_signal_Signal();
	this._width = width;
	this._height = height;
	this._x = 0;
	this._y = 0;
	this._onWindow = false;
	this._enableRendering = true;
	this._activeWorkers = [];
	var tmp = this._data;
	var this1 = new glm_Vec4Base();
	this1.x = 0.0;
	this1.y = 0.0;
	this1.z = width;
	this1.w = height;
	tmp.set("viewport",this1);
};
minko_AbstractCanvas.__name__ = true;
minko_AbstractCanvas.get_defaultCanvas = function() {
	return minko_AbstractCanvas._defaultCanvas;
};
minko_AbstractCanvas.set_defaultCanvas = function(value) {
	minko_AbstractCanvas._defaultCanvas = value;
	return value;
};
minko_AbstractCanvas.prototype = {
	get_framerate: function() {
		return minko_Timer.fps();
	}
	,getJoystickAxis: function(joystick,axis) {
		return 0;
	}
	,isWorkerRegistered: function(name) {
		return false;
	}
	,registerWorker: function(name,cls) {
		var key = name.toString();
		var _this = this._workers;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,cls);
		} else {
			_this.h[key] = cls;
		}
	}
	,initialize: function() {
	}
	,get_enterFrame: function() {
		return this._enterFrame;
	}
	,joystick: function(id) {
		if(id < this.get_numJoysticks()) {
			return this._joysticks.h[id];
		} else {
			return null;
		}
	}
	,get_aspectRatio: function() {
		return this.get_width() / this.get_height();
	}
	,get_data: function() {
		return this._data;
	}
	,get_context: function() {
		return this._context;
	}
	,get_mouse: function() {
		return this._mouse;
	}
	,get_keyboard: function() {
		return this._keyboard;
	}
	,get_touch: function() {
		return this._touch;
	}
	,get_numJoysticks: function() {
		return Lambda.count(this._joysticks);
	}
	,get_resized: function() {
		return this._resized;
	}
	,get_joystickAdded: function() {
		return this._joystickAdded;
	}
	,get_joystickRemoved: function() {
		return this._joystickRemoved;
	}
	,get_suspended: function() {
		return this._suspended;
	}
	,get_resumed: function() {
		return this._resumed;
	}
	,get_active: function() {
		return this._active;
	}
	,createScene: function() {
		var _gthis = this;
		var sceneManager = minko_component_SceneManager.create(this);
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 3.0;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var camera_mat = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = camera_mat._00;
		var a01 = camera_mat._10;
		var a02 = camera_mat._20;
		var a03 = camera_mat._30;
		var a10 = camera_mat._01;
		var a11 = camera_mat._11;
		var a12 = camera_mat._21;
		var a13 = camera_mat._31;
		var a20 = camera_mat._02;
		var a21 = camera_mat._12;
		var a22 = camera_mat._22;
		var a23 = camera_mat._32;
		var a30 = camera_mat._03;
		var a31 = camera_mat._13;
		var a32 = camera_mat._23;
		var a33 = camera_mat._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		camera_mat = dest;
		this._camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(2139062271)).addComponent(minko_component_Transform.createbyMatrix4(camera_mat)).addComponent(minko_component_PerspectiveCamera.create(this.get_aspectRatio()));
		root.addChild(this._camera);
		this._resizedSlot = this._resized.connect(function(canvas,w,h) {
			var perspectiveCamera = _gthis._camera.getComponent(minko_component_PerspectiveCamera);
			perspectiveCamera.set_aspectRatio(w / h);
		});
		return root;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_x: function(value) {
		if(value != this._x) {
			var viewport = this._data.get("viewport");
			this._x = value;
			viewport.x = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	,set_y: function(value) {
		if(value != this._y) {
			var viewport = this._data.get("viewport");
			this._y = value;
			viewport.y = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	,set_width: function(value) {
		if(value != this._width) {
			var viewport = this._data.get("viewport");
			this._width = value;
			viewport.z = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	,set_height: function(value) {
		if(value != this._height) {
			var viewport = this._data.get("viewport");
			this._height = value;
			viewport.w = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	,step: function() {
		var that = this;
		minko_Timer.update();
		if(this._enableRendering) {
			this._enterFrame.execute(that,(minko_Timer.startTimeStamp - minko_Timer.lastTimeStamp) * 1000.0,minko_Timer.dt * 1000.0);
			if(this._swapBuffersAtEnterFrame) {
				this.swapBuffers();
			}
		}
		if(minko_Timer.remainingTime > 0) {
			this._backend.wait(that,minko_Timer.remainingTime);
		}
	}
	,run: function() {
		this._active = true;
		this._backend.run(this);
	}
	,quit: function() {
		this._active = false;
	}
	,getWorker: function(name) {
		var _this = this._workers;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			return null;
		}
		var _this1 = this._workers;
		var worker = (__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name])(name);
		this._activeWorkers.push(worker);
		return worker;
	}
	,swapBuffers: function() {
		this._backend.swapBuffers(this);
	}
	,resetInputs: function() {
		while(this._touch.get_numTouches() > 0) {
			var id = this._touch.get_identifiers()[0];
			var touch = this._touch.get_touches().h[id];
			var x = touch.x;
			var y = touch.y;
			this._touch.updateTouch(id,x,y,0,0);
			this._touch.get_touchMove().execute(this._touch,id,0,0);
			this._touch.removeTouch(id);
			this._touch.get_touchUp().execute(this._touch,id,x,y);
		}
		this._mouse.set_dX(0);
		this._mouse.set_dY(0);
		if(this._mouse.get_leftButtonIsDown()) {
			this._mouse.get_leftButtonUp().execute(this._mouse);
		}
		if(this._mouse.get_rightButtonIsDown()) {
			this._mouse.get_rightButtonUp().execute(this._mouse);
		}
		if(this._mouse.get_middleButtonIsDown()) {
			this._mouse.get_middleButtonUp().execute(this._mouse);
		}
	}
	,__class__: minko_AbstractCanvas
};
var minko_EventKind = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"] };
minko_EventKind.EPush = ["EPush",0];
minko_EventKind.EPush.toString = $estr;
minko_EventKind.EPush.__enum__ = minko_EventKind;
minko_EventKind.ERelease = ["ERelease",1];
minko_EventKind.ERelease.toString = $estr;
minko_EventKind.ERelease.__enum__ = minko_EventKind;
minko_EventKind.EMove = ["EMove",2];
minko_EventKind.EMove.toString = $estr;
minko_EventKind.EMove.__enum__ = minko_EventKind;
minko_EventKind.EOver = ["EOver",3];
minko_EventKind.EOver.toString = $estr;
minko_EventKind.EOver.__enum__ = minko_EventKind;
minko_EventKind.EOut = ["EOut",4];
minko_EventKind.EOut.toString = $estr;
minko_EventKind.EOut.__enum__ = minko_EventKind;
minko_EventKind.EWheel = ["EWheel",5];
minko_EventKind.EWheel.toString = $estr;
minko_EventKind.EWheel.__enum__ = minko_EventKind;
minko_EventKind.EFocus = ["EFocus",6];
minko_EventKind.EFocus.toString = $estr;
minko_EventKind.EFocus.__enum__ = minko_EventKind;
minko_EventKind.EFocusLost = ["EFocusLost",7];
minko_EventKind.EFocusLost.toString = $estr;
minko_EventKind.EFocusLost.__enum__ = minko_EventKind;
minko_EventKind.EKeyDown = ["EKeyDown",8];
minko_EventKind.EKeyDown.toString = $estr;
minko_EventKind.EKeyDown.__enum__ = minko_EventKind;
minko_EventKind.EKeyUp = ["EKeyUp",9];
minko_EventKind.EKeyUp.toString = $estr;
minko_EventKind.EKeyUp.__enum__ = minko_EventKind;
minko_EventKind.EReleaseOutside = ["EReleaseOutside",10];
minko_EventKind.EReleaseOutside.toString = $estr;
minko_EventKind.EReleaseOutside.__enum__ = minko_EventKind;
minko_EventKind.ETextInput = ["ETextInput",11];
minko_EventKind.ETextInput.toString = $estr;
minko_EventKind.ETextInput.__enum__ = minko_EventKind;
minko_EventKind.ECheck = ["ECheck",12];
minko_EventKind.ECheck.toString = $estr;
minko_EventKind.ECheck.__enum__ = minko_EventKind;
var minko_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
minko_Event.__name__ = true;
minko_Event.prototype = {
	toString: function() {
		var tmp = Std.string(this.kind) + "[" + (this.relX | 0) + "," + (this.relY | 0) + "]";
		var _g = this.kind;
		var tmp1;
		switch(_g[1]) {
		case 0:case 1:case 10:
			tmp1 = ",button=" + this.button;
			break;
		case 2:case 3:case 4:case 6:case 7:case 12:
			tmp1 = "";
			break;
		case 5:
			tmp1 = ",wheelDelta=" + this.wheelDelta;
			break;
		case 8:case 9:
			tmp1 = ",keyCode=" + this.keyCode;
			break;
		case 11:
			tmp1 = ",charCode=" + this.charCode;
			break;
		}
		return tmp + tmp1;
	}
	,__class__: minko_Event
};
var minko_Canvas = $hx_exports["minko"]["Canvas"] = function(name,width,height,flags) {
	minko_AbstractCanvas.call(this,name,width,height,flags);
};
minko_Canvas.__name__ = true;
minko_Canvas.__super__ = minko_AbstractCanvas;
minko_Canvas.prototype = $extend(minko_AbstractCanvas.prototype,{
	__class__: minko_Canvas
});
var minko_Timer = function() { };
minko_Timer.__name__ = true;
minko_Timer.update = function() {
	minko_Timer.frameCount++;
	var newTime = new Date().getTime() / 1000;
	minko_Timer.elapsedTime = newTime - minko_Timer.lastTimeStamp;
	minko_Timer.lastTimeStamp = newTime;
	if(minko_Timer.elapsedTime < minko_Timer.maxDeltaTime) {
		var from = minko_Timer.elapsedTime;
		minko_Timer.currentDT = from + (minko_Timer.currentDT - from) * Math.min(Math.max(minko_Timer.smoothFactor,0),1);
		minko_Timer.remainingTime = 1 / minko_Timer.wantedFPS - minko_Timer.currentDT;
	} else {
		minko_Timer.elapsedTime = 1 / minko_Timer.wantedFPS;
		minko_Timer.remainingTime = 0;
	}
	minko_Timer.dt = minko_Timer.currentDT;
};
minko_Timer.get_tmod = function() {
	return minko_Timer.dt * minko_Timer.wantedFPS;
};
minko_Timer.set_tmod = function(v) {
	minko_Timer.dt = v / minko_Timer.wantedFPS;
	return v;
};
minko_Timer.fps = function() {
	return 1. / minko_Timer.currentDT;
};
minko_Timer.skip = function() {
	minko_Timer.lastTimeStamp = new Date().getTime() / 1000;
};
minko_Timer.reset = function() {
	minko_Timer.startTimeStamp = minko_Timer.lastTimeStamp = new Date().getTime() / 1000;
	minko_Timer.dt = minko_Timer.currentDT = 1. / minko_Timer.wantedFPS;
};
var minko_Tuple = $hx_exports["minko"]["Tuple"] = function(f,s) {
	this.first = f;
	this.second = s;
};
minko_Tuple.__name__ = true;
minko_Tuple.prototype = {
	__class__: minko_Tuple
};
var minko_Tuple3 = $hx_exports["minko"]["Tuple3"] = function(f,s,t) {
	this.first = f;
	this.second = s;
	this.thiree = t;
};
minko_Tuple3.__name__ = true;
minko_Tuple3.prototype = {
	__class__: minko_Tuple3
};
var minko_Tuple4 = $hx_exports["minko"]["Tuple4"] = function(a,b,c,d) {
	this.first = a;
	this.second = b;
	this.thiree = c;
	this.four = d;
};
minko_Tuple4.__name__ = true;
minko_Tuple4.prototype = {
	__class__: minko_Tuple4
};
var minko_Tuple5 = $hx_exports["minko"]["Tuple5"] = function(a,b,c,d,e) {
	this.first = a;
	this.second = b;
	this.thiree = c;
	this.four = d;
	this.five = e;
};
minko_Tuple5.__name__ = true;
minko_Tuple5.prototype = {
	__class__: minko_Tuple5
};
var minko_Tuple6 = $hx_exports["minko"]["Tuple6"] = function(a,b,c,d,e,f) {
	this.first = a;
	this.second = b;
	this.thiree = c;
	this.four = d;
	this.five = e;
	this.six = f;
};
minko_Tuple6.__name__ = true;
minko_Tuple6.prototype = {
	__class__: minko_Tuple6
};
var minko_Uuid = $hx_exports["minko"]["Uuid"] = function() { };
minko_Uuid.__name__ = true;
minko_Uuid.getUuid = function() {
	var seed = minko_math_Random.makeRandomSeed();
	var chars = minko_Uuid.CHARS;
	var uuid = [];
	var rnd = 0;
	var r;
	var _g = 0;
	while(_g < 36) {
		var i = _g++;
		if(i == 8 || i == 13 || i == 18 || i == 23) {
			uuid[i] = "-";
		} else if(i == 14) {
			uuid[i] = "4";
		} else {
			if(rnd <= 2) {
				seed = Math.floor(seed * 16807.0 % 2147483647.0);
				rnd = 33554432 + Math.floor(seed * 16777216) | 0;
			}
			r = rnd & 15;
			rnd >>= 4;
			uuid[i] = chars[i == 19 ? r & 3 | 8 : r];
		}
	}
	return uuid.join("");
};
var minko_Has_$uuid = $hx_exports["minko"]["Has_uuid"] = function() {
};
minko_Has_$uuid.__name__ = true;
minko_Has_$uuid.prototype = {
	set_uuid: function(value) {
		this._uuid = value;
		return value;
	}
	,get_uuid: function() {
		return this._uuid;
	}
	,__class__: minko_Has_$uuid
};
var minko_Enable_$uuid = $hx_exports["minko"]["Enable_uuid"] = function() {
	minko_Has_$uuid.call(this);
};
minko_Enable_$uuid.__name__ = true;
minko_Enable_$uuid.__super__ = minko_Has_$uuid;
minko_Enable_$uuid.prototype = $extend(minko_Has_$uuid.prototype,{
	enable_uuid: function() {
		this._uuid = minko_Uuid.getUuid();
	}
	,__class__: minko_Enable_$uuid
});
var minko_WebBackend = $hx_exports["minko"]["WebBackend"] = function() {
	minko_AbstractBackend.call(this);
};
minko_WebBackend.__name__ = true;
minko_WebBackend.create = function() {
	return new minko_WebBackend();
};
minko_WebBackend.getCurrentLoop = function() {
	return minko_WebBackend.loopFunc;
};
minko_WebBackend.setLoop = function(f) {
	if(!minko_WebBackend.loopInit) {
		minko_WebBackend.loopInit = true;
		minko_WebBackend.browserLoop();
	}
	minko_WebBackend.loopFunc = f;
};
minko_WebBackend.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(minko_WebBackend.browserLoop);
	if(minko_WebBackend.loopFunc != null) {
		minko_WebBackend.loopFunc();
	}
};
minko_WebBackend.__super__ = minko_AbstractBackend;
minko_WebBackend.prototype = $extend(minko_AbstractBackend.prototype,{
	initialize: function(canvas) {
	}
	,swapBuffers: function(canvas) {
	}
	,run: function(canvas) {
		this.currentCanvas = canvas;
		minko_WebBackend.setLoop($bind(this,this.emscriptenMainLoop));
	}
	,wait: function(canvas,ms) {
	}
	,emscriptenMainLoop: function() {
		this.currentCanvas.step();
	}
	,__class__: minko_WebBackend
});
var minko_WebCanvas = $hx_exports["minko"]["WebCanvas"] = function(name,width,height,flags) {
	minko_Canvas.call(this,name,width,height,flags);
	this.events = [];
};
minko_WebCanvas.__name__ = true;
minko_WebCanvas.create = function(name,width,height,flags) {
	if(flags == null) {
		flags = 2;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	var canvas = new minko_WebCanvas(name,width,height,flags);
	canvas.initialize();
	if(minko_AbstractCanvas.get_defaultCanvas() == null) {
		minko_AbstractCanvas.set_defaultCanvas(canvas);
	}
	return canvas;
};
minko_WebCanvas.__super__ = minko_Canvas;
minko_WebCanvas.prototype = $extend(minko_Canvas.prototype,{
	initialize: function() {
		minko_file_Options.registerDefaultProtocol("file",function() {
			return new minko_net_WebHTTPProtocol();
		});
		this.initializeInputs();
		this.initializeWindow();
		this.initializeContext();
	}
	,initializeInputs: function() {
		minko_Stage.getInstance().addEventTarget($bind(this,this.onEvent));
	}
	,initializeWindow: function() {
		this._keyboard = minko_input_Keyboard.create();
		this._mouse = minko_input_Mouse.create(this);
		this._touch = minko_input_Touch.create(this);
	}
	,initializeContext: function() {
		this._backend = minko_WebBackend.create();
		this._backend.initialize(this);
		var context = minko_render_GlContext.create();
		if(context == null) {
			throw new js__$Boot_HaxeError("Could not create context");
		}
		var antiAlias = 0;
		var canvas = minko_Stage.getInstance().canvas;
		var gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(canvas,{ alpha : false, stencil : true, antialias : antiAlias > 0});
		if(gl == null) {
			throw new js__$Boot_HaxeError("Could not acquire GL context");
		}
		context.gl = gl;
		context.initialize();
		this._context = context;
	}
	,onResize: function() {
		this.set_width(minko_Stage.getInstance().get_width());
		this.set_height(minko_Stage.getInstance().get_height());
		this._context.configureViewport(this.get_x(),this.get_y(),this.get_width(),this.get_height());
		this._resized.execute(this,this.get_width(),this.get_height());
	}
	,onEvent: function(e) {
		this.events.push(e);
	}
	,stepEvent: function() {
		var ee = this.events.concat([]);
		this.events = [];
		var executeMouseMove = false;
		var mouseDX = 0;
		var mouseDY = 0;
		var _g = 0;
		try {
			while(_g < ee.length) {
				var e = ee[_g];
				++_g;
				var kind = e.kind;
				switch(kind[1]) {
				case 0:
					this._mouse.set_x(Math.floor(e.relX));
					this._mouse.set_y(Math.floor(e.relY));
					var _g1 = e.button;
					switch(_g1) {
					case 0:
						this._mouse.get_leftButtonDown().execute(this._mouse);
						throw "__break__";
						break;
					case 1:
						this._mouse.get_rightButtonDown().execute(this._mouse);
						throw "__break__";
						break;
					case 2:
						this._mouse.get_middleButtonDown().execute(this._mouse);
						throw "__break__";
						break;
					}
					break;
				case 1:
					this._mouse.set_x(Math.floor(e.relX));
					this._mouse.set_y(Math.floor(e.relY));
					var _g11 = e.button;
					switch(_g11) {
					case 0:
						this._mouse.get_leftButtonUp().execute(this._mouse);
						throw "__break__";
						break;
					case 1:
						this._mouse.get_rightButtonUp().execute(this._mouse);
						throw "__break__";
						break;
					case 2:
						this._mouse.get_middleButtonUp().execute(this._mouse);
						throw "__break__";
						break;
					}
					break;
				case 2:
					var dX = Math.floor(e.relX) - this.get_mouse().get_x();
					var dY = Math.floor(e.relY) - this.get_mouse().get_y();
					this.get_mouse().set_x(Math.floor(e.relX));
					this.get_mouse().set_y(Math.floor(e.relY));
					mouseDX += dX;
					mouseDY += dY;
					executeMouseMove = true;
					break;
				case 3:
					break;
				case 4:
					break;
				case 5:
					this._mouse.get_wheel().execute(this._mouse,e.wheelDelta,e.wheelDelta);
					break;
				case 6:
					break;
				case 7:
					break;
				case 8:
					var keyCode = e.keyCode;
					this._keyboard.setKeyboardState(keyCode,1);
					this._keyboard.get_keyDown().execute(this._keyboard);
					var _g2 = 0;
					var _g12 = minko_input_Keyboard.NUM_KEYS;
					while(_g2 < _g12) {
						var i = _g2++;
						var code = i;
						if(!this._keyboard.hasKeyDownSignal(code)) {
							continue;
						}
						if(minko_input_KeyMap.keyToKeyCodeMap.h.hasOwnProperty(code) && minko_input_KeyMap.keyToKeyCodeMap.h[code] == keyCode) {
							this._keyboard.getKeyDown(code).execute(this._keyboard,i);
						}
					}
					break;
				case 9:
					var keyCode1 = e.keyCode;
					this._keyboard.setKeyboardState(keyCode1,0);
					this._keyboard.get_keyUp().execute(this._keyboard);
					var _g21 = 0;
					var _g13 = minko_input_Keyboard.NUM_KEYS;
					while(_g21 < _g13) {
						var i1 = _g21++;
						var code1 = i1;
						if(!this._keyboard.hasKeyUpSignal(code1)) {
							continue;
						}
						if(minko_input_KeyMap.keyToKeyCodeMap.h.hasOwnProperty(code1) && minko_input_KeyMap.keyToKeyCodeMap.h[code1] == keyCode1) {
							this._keyboard.getKeyUp(code1).execute(this._keyboard,i1);
						}
					}
					var _g22 = 0;
					var _g14 = minko_input_Keyboard.NUM_KEYS;
					while(_g22 < _g14) {
						var i2 = _g22++;
						var code2 = i2;
						if(this._keyboard.hasKeyUpSignal(code2)) {
							this._keyboard.getKeyUp(code2).execute(this._keyboard,i2);
						}
					}
					break;
				case 10:
					break;
				case 11:
					var c = e.charCode;
					this._keyboard.get_textInput().execute(this._keyboard,c);
					break;
				case 12:
					break;
				}
				if(executeMouseMove) {
					this._mouse.get_move().execute(this._mouse,mouseDX,mouseDY);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,step: function() {
		this.stepEvent();
		minko_Canvas.prototype.step.call(this);
	}
	,__class__: minko_WebCanvas
});
var minko_Stage = function(canvas) {
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	this.eventTargets = new List();
	this.resizeEvents = new List();
	this.element = canvas == null ? window : canvas;
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw new js__$Boot_HaxeError("Missing canvas #webgl");
		}
	}
	this.canvas = canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mousemove",$bind(this,this.onMouseMove));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("mousewheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	if(this.element == canvas) {
		canvas.setAttribute("tabindex","1");
		canvas.style.outline = "none";
	} else {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		canvas.oncontextmenu = function(e1) {
			e1.stopPropagation();
			e1.preventDefault();
			return false;
		};
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
minko_Stage.__name__ = true;
minko_Stage.getInstance = function() {
	if(minko_Stage.inst == null) {
		minko_Stage.inst = new minko_Stage();
	}
	return minko_Stage.inst;
};
minko_Stage.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,dispose: function() {
		this.timer.stop();
	}
	,onClose: function() {
		return true;
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		this.eventTargets = this.eventTargets.filter(function(e) {
			return !Reflect.compareMethods(e,et);
		});
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		this.resizeEvents = this.resizeEvents.filter(function(e) {
			return !Reflect.compareMethods(e,f);
		});
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,resize: function(width,height) {
	}
	,setFullScreen: function(v) {
	}
	,setCurrent: function() {
		minko_Stage.inst = this;
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * window.devicePixelRatio);
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * window.devicePixelRatio);
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * window.devicePixelRatio);
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * window.devicePixelRatio);
	}
	,get_mouseLock: function() {
		return false;
	}
	,set_mouseLock: function(v) {
		if(v) {
			throw new js__$Boot_HaxeError("Not implemented");
		}
		return false;
	}
	,get_vsync: function() {
		return true;
	}
	,set_vsync: function(b) {
		if(!b) {
			throw new js__$Boot_HaxeError("Can't disable vsync on this platform");
		}
		return true;
	}
	,onMouseDown: function(e) {
		var ev = new minko_Event(minko_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		var ev = new minko_Event(minko_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new minko_Event(minko_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		var ev = new minko_Event(minko_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = -e.wheelDelta / 30.0;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new minko_Event(minko_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new minko_Event(minko_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new minko_Event(minko_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new minko_Event(minko_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	,onKeyDown: function(e) {
		var ev = new minko_Event(minko_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	,onKeyPress: function(e) {
		var ev = new minko_Event(minko_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
	}
	,__class__: minko_Stage
};
var minko_animation_AbstractTimeline = $hx_exports["minko"]["animation"]["AbstractTimeline"] = function(propertyName,duration) {
	this._propertyName = propertyName;
	this._duration = duration;
	this._isLocked = false;
};
minko_animation_AbstractTimeline.__name__ = true;
minko_animation_AbstractTimeline.prototype = {
	clone: function() {
		throw new js__$Boot_HaxeError("Missing clone function for a component.");
	}
	,get_propertyName: function() {
		return this._propertyName;
	}
	,set_propertyName: function(value) {
		this._propertyName = value;
		return value;
	}
	,get_duration: function() {
		return this._duration;
	}
	,set_duration: function(value) {
		this._duration = value;
		return value;
	}
	,get_isLocked: function() {
		return this._isLocked;
	}
	,set_isLocked: function(value) {
		this._isLocked = value;
		return value;
	}
	,update: function(time,data,skipPropertyNameFormatting) {
		if(skipPropertyNameFormatting == null) {
			skipPropertyNameFormatting = true;
		}
	}
	,dispose: function() {
	}
	,__class__: minko_animation_AbstractTimeline
};
var minko_animation_TimelineLookup = $hx_exports["minko"]["animation"]["TimelineLookup"] = function() {
};
minko_animation_TimelineLookup.__name__ = true;
minko_animation_TimelineLookup.interpolate = function(thisMat,toMat,percent) {
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var m = this1;
	m._00 = thisMat._00 + (toMat._00 - thisMat._00) * percent;
	m._10 = thisMat._10 + (toMat._10 - thisMat._10) * percent;
	m._20 = thisMat._20 + (toMat._20 - thisMat._20) * percent;
	m._30 = thisMat._30 + (toMat._30 - thisMat._30) * percent;
	m._01 = thisMat._01 + (toMat._01 - thisMat._01) * percent;
	m._11 = thisMat._11 + (toMat._11 - thisMat._11) * percent;
	m._21 = thisMat._21 + (toMat._21 - thisMat._21) * percent;
	m._31 = thisMat._31 + (toMat._31 - thisMat._31) * percent;
	m._02 = thisMat._02 + (toMat._02 - thisMat._02) * percent;
	m._12 = thisMat._12 + (toMat._12 - thisMat._12) * percent;
	m._22 = thisMat._22 + (toMat._22 - thisMat._22) * percent;
	m._32 = thisMat._32 + (toMat._32 - thisMat._32) * percent;
	m._03 = thisMat._03 + (toMat._03 - thisMat._03) * percent;
	m._13 = thisMat._13 + (toMat._13 - thisMat._13) * percent;
	m._23 = thisMat._23 + (toMat._23 - thisMat._23) * percent;
	m._33 = thisMat._33 + (toMat._33 - thisMat._33) * percent;
	return m;
};
minko_animation_TimelineLookup.getTimeInRange = function(time,duration) {
	var t = duration > 0 ? time >= 0 ? time % duration : (time % duration + duration) % duration : 0;
	return t;
};
minko_animation_TimelineLookup.getIndexForTime = function(time,timetable) {
	var numKeys = timetable.length;
	if(numKeys == 0) {
		return 0;
	}
	var id = 0;
	var lowerId = 0;
	var upperId = numKeys;
	while(upperId - lowerId > 1) {
		id = lowerId + upperId >> 1;
		if(timetable[id].timetable > time) {
			upperId = id;
		} else {
			lowerId = id;
		}
	}
	return lowerId;
};
minko_animation_TimelineLookup.prototype = {
	__class__: minko_animation_TimelineLookup
};
var minko_animation_Matrix4x4Timeline = $hx_exports["minko"]["animation"]["Matrix4x4Timeline"] = function(propertyName,duration,timetable,matrices,interpolate) {
	if(interpolate == null) {
		interpolate = false;
	}
	minko_animation_AbstractTimeline.call(this,propertyName,duration);
	this._matrices = [];
	this._interpolate = interpolate;
	this.initializeMatrixTimetable(timetable,matrices);
};
minko_animation_Matrix4x4Timeline.__name__ = true;
minko_animation_Matrix4x4Timeline.create = function(propertyName,duration,timetable,matrices,interpolate) {
	if(interpolate == null) {
		interpolate = false;
	}
	var ptr = new minko_animation_Matrix4x4Timeline(propertyName,duration,timetable,matrices,interpolate);
	return ptr;
};
minko_animation_Matrix4x4Timeline.createbyMatrix4x4Timeline = function(matrix) {
	var ptr = new minko_animation_Matrix4x4Timeline(matrix._propertyName,matrix._duration);
	ptr._matrices = [];
	ptr._interpolate = matrix._interpolate;
	var _g1 = 0;
	var _g = matrix._matrices.length;
	while(_g1 < _g) {
		var keyId = _g1++;
		ptr._matrices[keyId] = matrix._matrices[keyId];
	}
	return ptr;
};
minko_animation_Matrix4x4Timeline.__super__ = minko_animation_AbstractTimeline;
minko_animation_Matrix4x4Timeline.prototype = $extend(minko_animation_AbstractTimeline.prototype,{
	clone: function() {
		return minko_animation_Matrix4x4Timeline.createbyMatrix4x4Timeline(this);
	}
	,get_matrices: function() {
		return this._matrices;
	}
	,get_interpolate: function() {
		return this._interpolate;
	}
	,update: function(time,data,skipPropertyNameFormatting) {
		if(skipPropertyNameFormatting == null) {
			skipPropertyNameFormatting = true;
		}
		if(this._isLocked || this._duration == 0 || this._matrices.length == 0) {
			return;
		}
		if(this._interpolate) {
			data.set(this._propertyName,this.interpolateTime(time));
		} else {
			var t = minko_animation_TimelineLookup.getTimeInRange(time,this._duration + 1);
			var keyId = minko_animation_TimelineLookup.getIndexForTime(t,this._matrices);
			data.set(this._propertyName,this._matrices[keyId].mat4);
		}
	}
	,interpolateTime: function(time) {
		var t = minko_animation_TimelineLookup.getTimeInRange(time,this._duration + 1);
		var keyId = minko_animation_TimelineLookup.getIndexForTime(t,this._matrices);
		if(t < this._matrices[0].timetable || t >= this._matrices[this._matrices.length - 1].timetable) {
			return this._matrices[keyId].mat4;
		}
		var current = this._matrices[keyId];
		var next = this._matrices[keyId + 1];
		var ratio = current.timetable < next.timetable ? (t - current.timetable) / (next.timetable - current.timetable) : 0.0;
		return minko_animation_TimelineLookup.interpolate(current.mat4,next.mat4,ratio);
	}
	,initializeMatrixTimetable: function(timetable,matrices) {
		if(timetable.length == 0) {
			throw new js__$Boot_HaxeError("timetable");
		}
		if(matrices.length == 0) {
			throw new js__$Boot_HaxeError("matrices");
		}
		if(timetable.length != matrices.length) {
			throw new js__$Boot_HaxeError("The number of keys must match in both the 'timetable' and 'matrices' parameters.");
		}
		var numKeys = timetable.length;
		var _g = [];
		var _g2 = 0;
		var _g1 = numKeys;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(new minko_animation_TimelineLookup());
		}
		this._matrices = _g;
		var _g21 = 0;
		var _g11 = numKeys;
		while(_g21 < _g11) {
			var keyId = _g21++;
			this._matrices[keyId].timetable = timetable[keyId];
			this._matrices[keyId].mat4 = matrices[keyId];
		}
		this._matrices.sort(function(a,b) {
			return a.timetable - b.timetable;
		});
	}
	,dispose: function() {
	}
	,__class__: minko_animation_Matrix4x4Timeline
});
var minko_async_Worker = $hx_exports["minko"]["async"]["Worker"] = function(name) {
	this._impl = new minko_async_WorkerImpl(this,name);
};
minko_async_Worker.__name__ = true;
minko_async_Worker.prototype = {
	start: function(input) {
		this._impl.start(input);
	}
	,get_message: function() {
		return this._impl.get_message();
	}
	,post: function(message) {
		this._impl.post(message);
	}
	,run: function(input) {
	}
	,poll: function() {
		this._impl.poll();
	}
	,dispose: function() {
	}
	,__class__: minko_async_Worker
};
var minko_async_Message = $hx_exports["minko"]["async"]["Message"] = function() {
};
minko_async_Message.__name__ = true;
minko_async_Message.prototype = {
	__class__: minko_async_Message
};
var minko_async_WorkerImpl = $hx_exports["minko"]["async"]["WorkerImpl"] = function(that,name) {
};
minko_async_WorkerImpl.__name__ = true;
minko_async_WorkerImpl.prototype = {
	start: function(input) {
	}
	,poll: function() {
	}
	,post: function(message) {
	}
	,get_message: function() {
		return null;
	}
	,dispose: function() {
	}
	,__class__: minko_async_WorkerImpl
};
var minko_component_AbstractComponent = $hx_exports["minko"]["component"]["AbstractComponent"] = function(layoutMask) {
	if(layoutMask == null) {
		layoutMask = -1;
	}
	minko_Enable_$uuid.call(this);
	this._layoutMask = layoutMask;
	this._layoutMaskChanged = new minko_signal_Signal();
};
minko_component_AbstractComponent.__name__ = true;
minko_component_AbstractComponent.__super__ = minko_Enable_$uuid;
minko_component_AbstractComponent.prototype = $extend(minko_Enable_$uuid.prototype,{
	dispose: function() {
		this._target = null;
	}
	,clone: function(option) {
		throw new js__$Boot_HaxeError("Missing clone function for a component.");
	}
	,get_target: function() {
		return this._target;
	}
	,get_layoutMask: function() {
		return this._layoutMask;
	}
	,set_layoutMask: function(value) {
		if(this._layoutMask != value) {
			this._layoutMask = value;
			this._layoutMaskChanged.execute(this);
		}
		return value;
	}
	,get_layoutMaskChanged: function() {
		return this._layoutMaskChanged;
	}
	,set_target: function(v) {
		if(this._target != v) {
			if(v == null) {
				var oldTarget = this._target;
				this.targetRemoved(oldTarget);
				this._target = null;
			} else {
				this._target = v;
				this.targetAdded(this._target);
			}
		}
		return v;
	}
	,targetAdded: function(node) {
	}
	,targetRemoved: function(node) {
	}
	,rebindDependencies: function(componentsMap,nodeMap,option) {
	}
	,__class__: minko_component_AbstractComponent
});
var minko_component_AbstractScript = $hx_exports["minko"]["component"]["AbstractScript"] = function() {
	minko_component_AbstractComponent.call(this);
	this._enabled = true;
	this._started = false;
	this._time = 0.0;
	this._deltaTime = 0.0;
	this._targetAddedSlot = null;
	this._targetRemovedSlot = null;
	this._addedSlot = null;
	this._removedSlot = null;
	this._componentAddedSlot = null;
	this._componentRemovedSlot = null;
	this._frameBeginSlot = null;
	this._frameEndSlot = null;
};
minko_component_AbstractScript.__name__ = true;
minko_component_AbstractScript.__super__ = minko_component_AbstractComponent;
minko_component_AbstractScript.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_enabled: function() {
		return this._enabled;
	}
	,set_enabled: function(v) {
		if(v != this._enabled) {
			this._enabled = v;
			this._started = !v;
			if(this.get_target() != null) {
				this.setSceneManager(this.get_target().get_root().getComponent(minko_component_SceneManager));
			}
		}
		return v;
	}
	,get_time: function() {
		return this._time;
	}
	,get_deltaTime: function() {
		return this._deltaTime;
	}
	,start: function(target) {
	}
	,update: function(target) {
	}
	,end: function(target) {
	}
	,stop: function(target) {
	}
	,get_ready: function() {
		return true;
	}
	,get_priority: function() {
		return 0.0;
	}
	,targetAdded: function(target) {
		this._componentAddedSlot = target.get_componentAdded().connect($bind(this,this.componentAddedHandler));
		this._componentRemovedSlot = target.get_componentRemoved().connect($bind(this,this.componentRemovedHandler));
		this._addedSlot = target.get_added().connect($bind(this,this.addedOrRemovedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.addedOrRemovedHandler));
		this._started = false;
		if(target.get_root().hasComponent(minko_component_SceneManager)) {
			this.setSceneManager(target.get_root().getComponent(minko_component_SceneManager));
		}
	}
	,addedOrRemovedHandler: function(node,target,parent) {
		if(node.get_root() != target.get_root()) {
			return;
		}
		this.setSceneManager(target.get_root().getComponent(minko_component_SceneManager));
	}
	,targetRemoved: function(target) {
		this._componentAddedSlot = null;
		this._componentRemovedSlot = null;
		this._frameBeginSlot = null;
		this._frameEndSlot = null;
		if(this._started) {
			this._started = false;
			this.stop(target);
		}
	}
	,componentAddedHandler: function(nod,target,component) {
		var sceneManager = js_Boot.__cast(component , minko_component_SceneManager);
		if(sceneManager != null) {
			this.setSceneManager(sceneManager);
		}
	}
	,componentRemovedHandler: function(nod,target,component) {
		var sceneManager = js_Boot.__cast(component , minko_component_SceneManager);
		if(sceneManager != null) {
			this.setSceneManager(null);
		}
	}
	,frameBeginHandler: function(sceneManager,time,deltaTime) {
		var target = this.get_target();
		this._time = time;
		this._deltaTime = deltaTime;
		if(!this._started && this.get_ready() && target != null) {
			this._started = true;
			this.start(target);
		}
		if(this._started) {
			this.update(target);
		}
		if(!this._started) {
			this.stop(target);
		}
	}
	,frameEndHandler: function(sceneManager,time,deltaTime) {
		if(this._started) {
			this.end(this.get_target());
		}
	}
	,setSceneManager: function(sceneManager) {
		if(sceneManager != null && this._enabled) {
			if(this._frameBeginSlot == null) {
				this._frameBeginSlot = sceneManager.get_frameBegin().connect($bind(this,this.frameBeginHandler),this.get_priority());
				if(this._frameEndSlot == null) {
					this._frameEndSlot = sceneManager.get_frameEnd().connect($bind(this,this.frameEndHandler),this.get_priority());
				} else if(this._frameBeginSlot != null) {
					if(this._started) {
						this._started = false;
						this.stop(this.get_target());
					}
					this._frameBeginSlot = null;
					this._frameEndSlot = null;
				}
			}
		}
	}
	,__class__: minko_component_AbstractScript
});
var minko_audio_PositionalSound = $hx_exports["minko"]["audio"]["PositionalSound"] = function(channel,camera) {
	minko_component_AbstractScript.call(this);
	this._channel = channel;
	this._camera = camera;
	this._audibilityCurve = minko_audio_PositionalSound.defaultAudibilityCurve;
};
minko_audio_PositionalSound.__name__ = true;
minko_audio_PositionalSound.create = function(channel,camera) {
	var p = new minko_audio_PositionalSound(channel,camera);
	return p;
};
minko_audio_PositionalSound.defaultAudibilityCurve = function(distance) {
	return 10.0 / (4.0 * Math.PI * distance);
};
minko_audio_PositionalSound.__super__ = minko_component_AbstractScript;
minko_audio_PositionalSound.prototype = $extend(minko_component_AbstractScript.prototype,{
	get_audibilityCurve: function() {
		return this._audibilityCurve;
	}
	,set_audibilityCurve: function(value) {
		this._audibilityCurve = value;
		return value;
	}
	,__class__: minko_audio_PositionalSound
});
var minko_audio_Sound = $hx_exports["minko"]["audio"]["Sound"] = function() {
};
minko_audio_Sound.__name__ = true;
minko_audio_Sound.prototype = {
	dispose: function() {
	}
	,__class__: minko_audio_Sound
};
var minko_audio_SoundChannel = $hx_exports["minko"]["audio"]["SoundChannel"] = function(sound) {
	this._complete = new minko_signal_Signal();
	this._sound = sound;
	this._transform = null;
};
minko_audio_SoundChannel.__name__ = true;
minko_audio_SoundChannel.prototype = {
	get_complete: function() {
		return this._complete;
	}
	,get_sound: function() {
		return this._sound;
	}
	,set_transform: function(value) {
		this._transform = value;
		return value;
	}
	,get_transform: function() {
		return this._transform;
	}
	,stop: function() {
	}
	,get_playing: function() {
		return false;
	}
	,dispose: function() {
	}
	,__class__: minko_audio_SoundChannel
};
var minko_audio_SoundTransform = $hx_exports["minko"]["audio"]["SoundTransform"] = function(volume) {
	this._left = 1.0;
	this._right = 1.0;
	this._volume = volume;
};
minko_audio_SoundTransform.__name__ = true;
minko_audio_SoundTransform.create = function(volume) {
	if(volume == null) {
		volume = 1.0;
	}
	return new minko_audio_SoundTransform(volume);
};
minko_audio_SoundTransform.prototype = {
	get_volume: function() {
		return this._volume;
	}
	,set_volume: function(value) {
		if(value < 0.0) {
			this._volume = 0.0;
		} else if(value > 1.0) {
			this._volume = 1.0;
		} else {
			this._volume = value;
		}
		return value;
	}
	,get_left: function() {
		return this._left;
	}
	,set_left: function(value) {
		if(value < 0.0) {
			this._left = 0.0;
		} else if(value > 1.0) {
			this._left = 1.0;
		} else {
			this._left = value;
		}
		return value;
	}
	,get_right: function() {
		return this._right;
	}
	,set_right: function(value) {
		if(value < 0.0) {
			this._right = 0.0;
		} else if(value > 1.0) {
			this._right = 1.0;
		} else {
			this._right = value;
		}
		return value;
	}
	,dispose: function() {
	}
	,__class__: minko_audio_SoundTransform
};
var minko_component_AnimationLabel = $hx_exports["minko"]["component"]["AnimationLabel"] = function(n,t) {
	this.name = n;
	this.time = t;
};
minko_component_AnimationLabel.__name__ = true;
minko_component_AnimationLabel.prototype = {
	__class__: minko_component_AnimationLabel
};
var minko_component_AbstractAnimation = $hx_exports["minko"]["component"]["AbstractAnimation"] = function(isLooping) {
	minko_component_AbstractComponent.call(this);
	this._maxTime = 0;
	this._loopMinTime = 0;
	this._loopMaxTime = 0;
	this._loopTimeRange = 0;
	this._currentTime = 0;
	this._previousTime = 0;
	this._previousGlobalTime = 0;
	this._isPlaying = false;
	this._isLooping = isLooping;
	this._isReversed = false;
	this._mustUpdateOnce = false;
	this._clockStart = new Date().getTime();
	this._timeFunction = null;
	this._labels = [];
	this._nextLabelIds = [];
	this._sceneManager = null;
	this._started = new minko_signal_Signal();
	this._looped = new minko_signal_Signal();
	this._stopped = new minko_signal_Signal();
	this._labelHit = new minko_signal_Signal3();
	this._targetAddedSlot = null;
	this._targetRemovedSlot = null;
	this._addedSlot = null;
	this._removedSlot = null;
	this._frameBeginSlot = null;
	this._timeFunction = function(t) {
		return t;
	};
};
minko_component_AbstractAnimation.__name__ = true;
minko_component_AbstractAnimation.__super__ = minko_component_AbstractComponent;
minko_component_AbstractAnimation.prototype = $extend(minko_component_AbstractComponent.prototype,{
	play: function() {
		this._previousGlobalTime = this._timeFunction(this._sceneManager != null ? Math.floor(this._sceneManager.get_time()) : 0);
		this._isPlaying = true;
		this._started.execute(this);
		this.checkLabelHit(this._currentTime,this._currentTime);
	}
	,stop: function() {
		if(this._isPlaying) {
			this.updateNextLabelIds(this._currentTime);
			this.checkLabelHit(this._currentTime,this._currentTime);
		}
		this._isPlaying = false;
		this._stopped.execute(this);
		this._mustUpdateOnce = true;
		this._previousGlobalTime = this._timeFunction(this._sceneManager != null ? this._sceneManager.get_time() | 0 : 0);
	}
	,clone: function(option) {
		return null;
	}
	,seek: function(currentTime) {
		if(!this.isInPlaybackWindow(currentTime)) {
			throw new js__$Boot_HaxeError("Provided time value is outside of playback window. In order to reset playback window, call resetPlaybackWindow().");
		}
		this._currentTime = currentTime;
		this.updateNextLabelIds(this._currentTime);
	}
	,get_currentTime: function() {
		return this._currentTime;
	}
	,get_loopStartTime: function() {
		if(!this._isReversed) {
			return this._loopMinTime;
		} else {
			return this._loopMaxTime;
		}
	}
	,get_loopEndTime: function() {
		if(!this._isReversed) {
			return this._loopMaxTime;
		} else {
			return this._loopMinTime;
		}
	}
	,hasLabel: function(name) {
		return Lambda.exists(this._labels,function(l) {
			return l.name == name;
		});
	}
	,getLabel: function(name) {
		return Lambda.find(this._labels,function(l) {
			return l.name == name;
		});
	}
	,addLabel: function(name,time) {
		if(this.hasLabel(name)) {
			throw new js__$Boot_HaxeError("A label called '" + name + "' already exists.");
		}
		this._labels.push(new minko_component_AnimationLabel(name,time));
		this.updateNextLabelIds(this._currentTime);
	}
	,changeLabel: function(name,newName) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		var label = this.getLabel(name);
		label.name = newName;
	}
	,setTimeForLabel: function(name,newTime) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		var label = this.getLabel(name);
		label.time = newTime;
	}
	,removeLabel: function(name) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		this._labels = this._labels.filter(function(l) {
			return l.name != name;
		});
	}
	,setPlaybackWindow: function(beginTime,endTime,forceRestart) {
		if(forceRestart == null) {
			forceRestart = false;
		}
		this._loopMinTime = beginTime;
		this._loopMaxTime = endTime;
		if(this._loopMinTime > this._loopMaxTime) {
			this._loopMinTime = endTime;
			this._loopMaxTime = beginTime;
		}
		this._loopTimeRange = this._loopMaxTime - this._loopMinTime + 1;
		if(!this.isInPlaybackWindow(this._currentTime) || forceRestart) {
			this._currentTime = this.get_loopStartTime();
		}
		this.updateNextLabelIds(this._currentTime);
	}
	,setPlaybackWindowbyName: function(beginLabelName,endLabelName,forceRestart) {
		if(forceRestart == null) {
			forceRestart = false;
		}
		this.setPlaybackWindow(this.getLabel(beginLabelName).time,this.getLabel(endLabelName).time,forceRestart);
	}
	,resetPlaybackWindow: function() {
		this.setPlaybackWindow(0,this._maxTime);
	}
	,get_numLabels: function() {
		return this._labels.length;
	}
	,labelName: function(labelId) {
		return this.getLabel(labelId).name;
	}
	,labelTime: function(labelId) {
		return this.getLabel(labelId).time;
	}
	,labelTimebyName: function(name) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		return this.getLabel(name).time;
	}
	,get_isPlaying: function() {
		return this._isPlaying;
	}
	,set_isPlaying: function(value) {
		this._isPlaying = value;
		return value;
	}
	,get_isLooping: function() {
		return this._isLooping;
	}
	,set_isLooping: function(value) {
		this._isLooping = value;
		return value;
	}
	,get_isReversed: function() {
		return this._isReversed;
	}
	,set_isReversed: function(value) {
		this._isReversed = value;
		return value;
	}
	,get_maxTime: function() {
		return this._maxTime;
	}
	,set_timeFunction: function(func) {
		this._timeFunction = func;
		return func;
	}
	,get_started: function() {
		return this._started;
	}
	,get_looped: function() {
		return this._looped;
	}
	,get_stopped: function() {
		return this._stopped;
	}
	,get_labelHit: function() {
		return this._labelHit;
	}
	,copyFrom: function(absAnimation,option) {
		this._maxTime = absAnimation._maxTime;
		this._loopMinTime = absAnimation._loopMinTime;
		this._loopMaxTime = absAnimation._loopMaxTime;
		this._loopTimeRange = absAnimation._loopTimeRange;
		this._currentTime = 0;
		this._previousTime = 0;
		this._previousGlobalTime = 0;
		this._isPlaying = false;
		this._isLooping = absAnimation._isLooping;
		this._isReversed = absAnimation._isReversed;
		this._mustUpdateOnce = absAnimation._mustUpdateOnce;
		this._clockStart = new Date().getTime();
		this._timeFunction = null;
		this._labels = [];
		this._nextLabelIds = [];
		this._sceneManager = null;
		this._started = new minko_signal_Signal();
		this._looped = new minko_signal_Signal();
		this._stopped = new minko_signal_Signal();
		this._labelHit = new minko_signal_Signal3();
		this._targetAddedSlot = null;
		this._targetRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
		this._frameBeginSlot = null;
		if(option == 1) {
			this._currentTime = absAnimation._currentTime;
			this._previousTime = absAnimation._previousTime;
			this._previousGlobalTime = absAnimation._previousGlobalTime;
			this._isPlaying = absAnimation._isPlaying;
		}
		this._timeFunction = function(t) {
			return t;
		};
		return this;
	}
	,dispose: function() {
		this._targetAddedSlot = null;
		this._targetRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
		this._frameBeginSlot = null;
	}
	,initialize: function() {
	}
	,targetAdded: function(node) {
		this._addedSlot = node.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = node.get_removed().connect($bind(this,this.removedHandler));
		this._target = node;
	}
	,targetRemoved: function(node) {
		this._addedSlot = null;
		this._removedSlot = null;
	}
	,addedHandler: function(node,target,parent) {
		this.findSceneManager();
	}
	,removedHandler: function(node,target,parent) {
		this.findSceneManager();
	}
	,componentAddedHandler: function(node,target,component) {
	}
	,componentRemovedHandler: function(node,target,component) {
	}
	,findSceneManager: function() {
		var roots = minko_scene_NodeSet.createbyNode(this.get_target()).roots().where(function(node) {
			return node.hasComponent(minko_component_SceneManager);
		});
		if(roots.get_nodes().length > 1) {
			throw new js__$Boot_HaxeError("Renderer cannot be in two separate scenes.");
		} else if(roots.get_nodes().length == 1) {
			this.setSceneManager(roots.get_nodes()[0].getComponent(minko_component_SceneManager));
		} else {
			this.setSceneManager(null);
		}
	}
	,setSceneManager: function(sceneManager) {
		if(sceneManager != null && sceneManager != this._sceneManager) {
			this._frameBeginSlot = sceneManager.get_frameBegin().connect($bind(this,this.frameBeginHandler));
			if(this._sceneManager == null) {
				this._previousGlobalTime = this._timeFunction(Math.floor(sceneManager.get_time()));
			}
		} else if(this._frameBeginSlot != null && sceneManager == null) {
			this.stop();
			this._frameBeginSlot.disconnect();
			this._frameBeginSlot = null;
		}
		this._sceneManager = sceneManager;
	}
	,frameBeginHandler: function(sceneManager,time,UnnamedParameter1) {
		this.updateRaw(Math.floor(time));
	}
	,updateNextLabelIds: function(time) {
		this._nextLabelIds = [];
		if(this._labels.length == 0) {
			return;
		}
		var UINT_MAX = 10000;
		var nextLabelTime = !this._isReversed ? UINT_MAX : 0;
		var _g1 = 0;
		var _g = this._labels.length;
		while(_g1 < _g) {
			var labelId = _g1++;
			var labelTime = this._labels[labelId].time;
			if(!this.isInPlaybackWindow(labelTime)) {
				continue;
			}
			if(!this._isReversed && time < labelTime) {
				if(labelTime < nextLabelTime) {
					nextLabelTime = labelTime;
					this._nextLabelIds = [];
					this._nextLabelIds.push(labelId);
				} else if(labelTime == nextLabelTime) {
					this._nextLabelIds.push(labelId);
				}
			} else if(this._isReversed && labelTime < time) {
				if(nextLabelTime < labelTime) {
					nextLabelTime = labelTime;
					this._nextLabelIds = [];
					this._nextLabelIds.push(labelId);
				} else if(labelTime == nextLabelTime) {
					this._nextLabelIds.push(labelId);
				}
			}
		}
		if(this._nextLabelIds.length == 0) {
			if(time != this.get_loopStartTime()) {
				this.updateNextLabelIds(this.get_loopStartTime());
			}
		} else if(this._isLooping && nextLabelTime == this.get_loopEndTime()) {
			var _g11 = 0;
			var _g2 = this._labels.length;
			while(_g11 < _g2) {
				var labelId1 = _g11++;
				if(this._labels[labelId1].time == this.get_loopStartTime() && this._nextLabelIds.indexOf(labelId1) == -1) {
					this._nextLabelIds.push(labelId1);
				}
			}
		}
	}
	,checkLabelHit: function(previousTime,newTime) {
		if(!this._isPlaying || this._nextLabelIds.length == 0) {
			return;
		}
		var nextLabel = this._labels[this._nextLabelIds[0]];
		var nextLabelTime = nextLabel.time;
		var trigger = false;
		if(!this._isReversed) {
			if(previousTime <= newTime) {
				if(newTime == nextLabelTime || previousTime < nextLabelTime && nextLabelTime <= newTime) {
					trigger = true;
				}
			} else if(previousTime < nextLabelTime) {
				trigger = true;
			} else if(nextLabelTime < newTime) {
				trigger = true;
			}
		} else if(newTime <= previousTime) {
			if(newTime == nextLabelTime || newTime <= nextLabelTime != null && nextLabelTime < previousTime) {
				trigger = true;
			}
		} else if(nextLabelTime < previousTime) {
			trigger = true;
		} else if(newTime < nextLabelTime) {
			trigger = true;
		}
		if(trigger) {
			var nextLabelIds = this._nextLabelIds;
			var _g = 0;
			while(_g < nextLabelIds.length) {
				var labelId = nextLabelIds[_g];
				++_g;
				var label = this._labels[labelId];
				this._labelHit.execute(this,label.name,label.time);
			}
			this.updateNextLabelIds(this.getNewLoopTime(this._currentTime,!this._isReversed ? 1 : -1));
		}
	}
	,isInPlaybackWindow: function(time) {
		if(this._loopMinTime <= time) {
			return time <= this._loopMaxTime;
		} else {
			return false;
		}
	}
	,update: function() {
	}
	,updateRaw: function(rawGlobalTime) {
		if(rawGlobalTime == null) {
			rawGlobalTime = 0;
		}
		if(!this._isPlaying && !this._mustUpdateOnce) {
			return false;
		}
		this._mustUpdateOnce = false;
		var globalTime = this._timeFunction(rawGlobalTime);
		var globalDeltaTime = globalTime - this._previousGlobalTime;
		var deltaTime = (!this._isReversed ? globalDeltaTime : -globalDeltaTime) | 0;
		this._previousTime = this._currentTime;
		if(this._isPlaying) {
			this._currentTime = this.getNewLoopTime(this._currentTime,deltaTime);
		}
		this._previousGlobalTime = globalTime;
		var looped = !this._isReversed && this._currentTime < this._previousTime || this._isReversed && this._previousTime < this._currentTime;
		if(looped) {
			if(this._isLooping) {
				this._looped.execute(this);
			} else {
				this._currentTime = this.get_loopEndTime();
				this.stop();
			}
		}
		this.update();
		this.checkLabelHit(this._previousTime,this._currentTime);
		if(!this._isPlaying) {
			return this._mustUpdateOnce;
		} else {
			return true;
		}
	}
	,getNewLoopTime: function(time,deltaTime) {
		var relTime = time - this._loopMinTime + deltaTime;
		var timeOffset = (relTime + this._loopTimeRange | 0) % this._loopTimeRange;
		return this._loopMinTime + timeOffset;
	}
	,__class__: minko_component_AbstractAnimation
});
var minko_component_AbstractRootDataComponent = $hx_exports["minko"]["component"]["AbstractRootDataComponent"] = function(collectionName) {
	minko_component_AbstractComponent.call(this);
	this._provider = new minko_data_Provider();
	this._collectionName = collectionName;
	this._enabled = true;
};
minko_component_AbstractRootDataComponent.__name__ = true;
minko_component_AbstractRootDataComponent.__super__ = minko_component_AbstractComponent;
minko_component_AbstractRootDataComponent.prototype = $extend(minko_component_AbstractComponent.prototype,{
	dispose: function() {
		this._provider = null;
		this._root = null;
		this._addedSlot = null;
		this._removedSlot = null;
		minko_component_AbstractComponent.prototype.dispose.call(this);
	}
	,get_provider: function() {
		return this._provider;
	}
	,get_root: function() {
		return this._root;
	}
	,targetAdded: function(target) {
		this._addedSlot = target.get_added().connect($bind(this,this.addedOrRemovedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.addedOrRemovedHandler));
		this.updateRoot(target.get_root());
	}
	,targetRemoved: function(target) {
		this._addedSlot.disconnect();
		this._addedSlot = null;
		this._removedSlot.disconnect();
		this._removedSlot = null;
		this.updateRoot(null);
	}
	,addedOrRemovedHandler: function(node,target,ancestor) {
		this.updateRoot(node.get_root());
	}
	,updateRoot: function(root) {
		var _gthis = this;
		if(root == this._root) {
			return;
		}
		if(this._root != null) {
			var collections = this._root.get_data().get_collections();
			var collectionIt = Lambda.find(collections,function(c) {
				return c.get_name() == _gthis._collectionName;
			});
			var collection = collectionIt;
			collection.remove(this._provider);
		}
		this._root = root;
		if(this._root != null) {
			var collections1 = this._root.get_data().get_collections();
			var collectionIt1 = Lambda.find(collections1,function(c1) {
				return c1.get_name() == _gthis._collectionName;
			});
			if(collectionIt1 == null) {
				var collection1 = minko_data_Collection.create(this._collectionName);
				collection1.pushBack(this._provider);
				this._root.get_data().addCollection(collection1);
			} else {
				collectionIt1.pushBack(this._provider);
			}
		}
	}
	,__class__: minko_component_AbstractRootDataComponent
});
var minko_component_AbstractLight = $hx_exports["minko"]["component"]["AbstractLight"] = function(collectionName) {
	minko_component_AbstractRootDataComponent.call(this,collectionName);
	var this1 = new glm_Vec3Base();
	this1.x = 1.0;
	this1.y = 1.0;
	this1.z = 1.0;
	this._color = this1;
	this.get_data().set("color",this._color);
};
minko_component_AbstractLight.__name__ = true;
minko_component_AbstractLight.__super__ = minko_component_AbstractRootDataComponent;
minko_component_AbstractLight.prototype = $extend(minko_component_AbstractRootDataComponent.prototype,{
	get_data: function() {
		return this.get_provider();
	}
	,dispose: function() {
		minko_component_AbstractRootDataComponent.prototype.dispose.call(this);
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		if(value != this._color) {
			this._color = value;
			this.get_data().set("color",this._color);
		}
		return value;
	}
	,get_layoutMask: function() {
		return minko_component_AbstractRootDataComponent.prototype.get_layoutMask.call(this);
	}
	,set_layoutMask: function(value) {
		this.get_data().set("layoutMask",value);
		minko_component_AbstractRootDataComponent.prototype.set_layoutMask.call(this,value);
		return value;
	}
	,__class__: minko_component_AbstractLight
});
var minko_component_AbstractDiscreteLight = $hx_exports["minko"]["component"]["AbstractDiscreteLight"] = function(arrayName,diffuse,specular) {
	if(specular == null) {
		specular = 1.0;
	}
	if(diffuse == null) {
		diffuse = 1.0;
	}
	minko_component_AbstractLight.call(this,arrayName);
	this.get_data().set("diffuse",diffuse).set("specular",specular);
};
minko_component_AbstractDiscreteLight.__name__ = true;
minko_component_AbstractDiscreteLight.__super__ = minko_component_AbstractLight;
minko_component_AbstractDiscreteLight.prototype = $extend(minko_component_AbstractLight.prototype,{
	get_diffuse: function() {
		return this.get_data().get("diffuse");
	}
	,set_diffuse: function(diffuse) {
		this.get_data().set("diffuse",diffuse);
		return diffuse;
	}
	,get_specular: function() {
		return this.get_data().get("specular");
	}
	,set_specular: function(specular) {
		this.get_data().set("specular",specular);
		return specular;
	}
	,targetAdded: function(target) {
		var _gthis = this;
		minko_component_AbstractLight.prototype.targetAdded.call(this,target);
		this._modelToWorldChangedSlot = target.get_data().getPropertyChanged("modelToWorldMatrix").connect(function(_1,_2,_3) {
			_gthis.modelToWorldMatrixChangedHandler(_1,_3);
		});
		if(target.get_data().hasProperty("modelToWorldMatrix")) {
			this.updateModelToWorldMatrix(target.get_data().get("modelToWorldMatrix"));
		}
	}
	,targetRemoved: function(target) {
		minko_component_AbstractLight.prototype.targetRemoved.call(this,target);
		this._modelToWorldChangedSlot = null;
	}
	,modelToWorldMatrixChangedHandler: function(container,propertyName) {
		this.updateModelToWorldMatrix(container.get(propertyName));
	}
	,updateModelToWorldMatrix: function(modelToWorld) {
	}
	,__class__: minko_component_AbstractDiscreteLight
});
var minko_component_AmbientLight = $hx_exports["minko"]["component"]["AmbientLight"] = function(ambient) {
	if(ambient == null) {
		ambient = .2;
	}
	minko_component_AbstractLight.call(this,"ambientLight");
	this._ambient = ambient;
	this.get_data().set("ambient",ambient);
};
minko_component_AmbientLight.__name__ = true;
minko_component_AmbientLight.create = function(ambient) {
	if(ambient == null) {
		ambient = .2;
	}
	return new minko_component_AmbientLight(ambient);
};
minko_component_AmbientLight.__super__ = minko_component_AbstractLight;
minko_component_AmbientLight.prototype = $extend(minko_component_AbstractLight.prototype,{
	clone: function(option) {
		var al = minko_component_AmbientLight.create().copyFrom(this,option);
		return al;
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(ambient) {
		this._ambient = ambient;
		this.get_data().set("ambient",ambient);
		return ambient;
	}
	,copyFrom: function(ambientLight,option) {
		this._ambient = ambientLight._ambient;
		this.get_data().set("ambient",ambientLight._ambient);
		return this;
	}
	,__class__: minko_component_AmbientLight
});
var minko_component_Animation = $hx_exports["minko"]["component"]["Animation"] = function(timelines,isLooping) {
	minko_component_AbstractAnimation.call(this,isLooping);
	this._timelines = timelines;
};
minko_component_Animation.__name__ = true;
minko_component_Animation.create = function(timelines,isLooping) {
	if(isLooping == null) {
		isLooping = true;
	}
	var ptr = new minko_component_Animation(timelines,isLooping);
	ptr.initialize();
	return ptr;
};
minko_component_Animation.__super__ = minko_component_AbstractAnimation;
minko_component_Animation.prototype = $extend(minko_component_AbstractAnimation.prototype,{
	clone: function(option) {
		var anim = new minko_component_Animation(this._timelines,this.get_isLooping());
		anim.copyFromAnimation(this,option);
		anim.initialize();
		return anim;
	}
	,rebindDependencies: function(componentsMap,nodeMap,option) {
	}
	,get_numTimelines: function() {
		return this._timelines.length;
	}
	,getTimeline: function(timelineId) {
		return this._timelines[timelineId];
	}
	,get_timelines: function() {
		return this._timelines;
	}
	,initialize: function() {
		minko_component_AbstractAnimation.prototype.initialize.call(this);
		this._maxTime = 0;
		var _g = 0;
		var _g1 = this._timelines;
		while(_g < _g1.length) {
			var timeline = _g1[_g];
			++_g;
			this._maxTime = Math.floor(Math.max(this._maxTime,timeline.get_duration()));
		}
		this.setPlaybackWindow(0,this._maxTime);
		this.seek(0);
	}
	,copyFromAnimation: function(anim,option) {
		this.copyFrom(anim,option);
		this._timelines = [];
		var _g1 = 0;
		var _g = anim._timelines.length;
		while(_g1 < _g) {
			var i = _g1++;
			var clone = anim._timelines[i].clone();
			this._timelines[i] = clone;
		}
		return this;
	}
	,update: function() {
		minko_component_AbstractAnimation.prototype.update.call(this);
		var _g = 0;
		var _g1 = this._timelines;
		while(_g < _g1.length) {
			var timeline = _g1[_g];
			++_g;
			var currentTime = this._currentTime % (timeline.get_duration() + 1);
			timeline.update(currentTime,this.get_target().get_data());
		}
	}
	,frameBeginHandler: function(manager,time,deltaTime) {
		minko_component_AbstractAnimation.prototype.frameBeginHandler.call(this,manager,time,deltaTime);
	}
	,updateNextLabelIds: function(time) {
		minko_component_AbstractAnimation.prototype.updateNextLabelIds.call(this,time);
	}
	,checkLabelHit: function(previousTime,newTime) {
		minko_component_AbstractAnimation.prototype.checkLabelHit.call(this,previousTime,newTime);
	}
	,__class__: minko_component_Animation
});
var minko_component_BoundingBox = $hx_exports["minko"]["component"]["BoundingBox"] = function() {
	minko_component_AbstractComponent.call(this);
	this._fixed = false;
	this._box = minko_math_Box.create();
	this._worldSpaceBox = minko_math_Box.create();
	this._invalidBox = true;
	this._invalidWorldSpaceBox = true;
};
minko_component_BoundingBox.__name__ = true;
minko_component_BoundingBox.create = function() {
	var bb = new minko_component_BoundingBox();
	return bb;
};
minko_component_BoundingBox.createbySize = function(size,center) {
	return minko_component_BoundingBox.createbyWHDC(size,size,size,center);
};
minko_component_BoundingBox.createbyWHDC = function(width,height,depth,center) {
	var x = center.x - width * .5;
	var y = center.y - height * .5;
	var z = center.z - depth * .5;
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	var x1 = center.x + width * .5;
	var y1 = center.y + height * .5;
	var z1 = center.z + depth * .5;
	var this2 = new glm_Vec3Base();
	this2.x = x1;
	this2.y = y1;
	this2.z = z1;
	return minko_component_BoundingBox.createbyVector3(this1,this2);
};
minko_component_BoundingBox.createbyVector3 = function(topRight,bottomLeft) {
	var bb = new minko_component_BoundingBox().setVector3(topRight,bottomLeft);
	return bb;
};
minko_component_BoundingBox.__super__ = minko_component_AbstractComponent;
minko_component_BoundingBox.prototype = $extend(minko_component_AbstractComponent.prototype,{
	clone: function(option) {
		var bbox = new minko_component_BoundingBox();
		bbox.copyFrom(this);
		return bbox;
	}
	,get_shape: function() {
		return this.get_box();
	}
	,get_box: function() {
		if(this._invalidWorldSpaceBox) {
			this.updateWorldSpaceBox();
		}
		return this._worldSpaceBox;
	}
	,get_modelSpaceBox: function() {
		if(this._invalidBox) {
			this.update();
		}
		return this._box;
	}
	,update: function() {
		this._invalidBox = false;
		var target = this.get_target();
		if(!this._fixed) {
			var surfaces = target.getComponents(minko_component_Surface);
			var this1 = new glm_Vec3Base();
			this1.x = Infinity;
			this1.y = Infinity;
			this1.z = Infinity;
			var min = this1;
			var this2 = new glm_Vec3Base();
			this2.x = -Infinity;
			this2.y = -Infinity;
			this2.z = -Infinity;
			var max = this2;
			if(surfaces.length > 0) {
				this.computeBox(surfaces,min,max);
				this._box.set_bottomLeft(min);
				this._box.set_topRight(max);
			} else {
				var tmp = this._box;
				var this3 = new glm_Vec3Base();
				this3.x = 0;
				this3.y = 0;
				this3.z = 0;
				tmp.set_bottomLeft(this3);
				var tmp1 = this._box;
				var this4 = new glm_Vec3Base();
				this4.x = 0;
				this4.y = 0;
				this4.z = 0;
				tmp1.set_topRight(this4);
			}
		}
		this._invalidWorldSpaceBox = true;
	}
	,setVector3: function(topRight,bottomLeft) {
		this._fixed = true;
		this._box = minko_math_Box.createbyVector3(topRight,bottomLeft);
		this._worldSpaceBox = minko_math_Box.createbyVector3(topRight,bottomLeft);
		this._invalidBox = true;
		this._invalidWorldSpaceBox = true;
		return this;
	}
	,copyFrom: function(bbox,option) {
		if(option == null) {
			option = 1;
		}
		this._fixed = bbox._fixed;
		this._box = option == 0 != null ? bbox._box : minko_math_Box.createbyVector3(bbox._box.get_topRight(),bbox._box.get_bottomLeft());
		this._worldSpaceBox = option == 0 != null ? bbox._worldSpaceBox : minko_math_Box.createbyVector3(bbox._worldSpaceBox.get_topRight(),bbox._worldSpaceBox.get_bottomLeft());
		this._invalidBox = bbox._invalidBox;
		this._invalidWorldSpaceBox = bbox._invalidWorldSpaceBox;
	}
	,updateWorldSpaceBox: function() {
		if(this._invalidBox) {
			this.update();
		}
		this._invalidWorldSpaceBox = false;
		if(!this.get_target().get_data().hasProperty("modelToWorldMatrix")) {
			this._worldSpaceBox.set_topRight(this._box.get_topRight());
			this._worldSpaceBox.set_bottomLeft(this._box.get_bottomLeft());
		} else {
			var t = this.get_target().get_data().get("modelToWorldMatrix");
			var vertices = this._box.getVertices();
			var numVertices = vertices.length;
			var _g1 = 0;
			var _g = numVertices;
			while(_g1 < _g) {
				var i = _g1++;
				var v = vertices[i];
				var x = v.x;
				var y = v.y;
				var z = v.z;
				var this1 = new glm_Vec4Base();
				this1.x = x;
				this1.y = y;
				this1.z = z;
				this1.w = 1.0;
				var v1 = this1;
				var this2 = new glm_Vec4Base();
				this2.x = 0;
				this2.y = 0;
				this2.z = 0;
				this2.w = 0;
				var dest = this2;
				var x1 = v1.x;
				var y1 = v1.y;
				var z1 = v1.z;
				var w = v1.w;
				dest.x = t._00 * x1 + t._10 * y1 + t._20 * z1 + t._30 * w;
				dest.y = t._01 * x1 + t._11 * y1 + t._21 * z1 + t._31 * w;
				dest.z = t._02 * x1 + t._12 * y1 + t._22 * z1 + t._32 * w;
				dest.w = t._03 * x1 + t._13 * y1 + t._23 * z1 + t._33 * w;
				var tmp = dest;
				var x2 = tmp.x;
				var y2 = tmp.y;
				var z2 = tmp.z;
				var this3 = new glm_Vec3Base();
				this3.x = x2;
				this3.y = y2;
				this3.z = z2;
				vertices[i] = this3;
			}
			var this4 = new glm_Vec3Base();
			this4.x = -Infinity;
			this4.y = -Infinity;
			this4.z = -Infinity;
			var max = this4;
			var this5 = new glm_Vec3Base();
			this5.x = Infinity;
			this5.y = Infinity;
			this5.z = Infinity;
			var min = this5;
			var _g2 = 0;
			while(_g2 < vertices.length) {
				var vertex = vertices[_g2];
				++_g2;
				if(vertex.x > max.x) {
					max.x = vertex.x;
				}
				if(vertex.x < min.x) {
					min.x = vertex.x;
				}
				if(vertex.y > max.y) {
					max.y = vertex.y;
				}
				if(vertex.y < min.y) {
					min.y = vertex.y;
				}
				if(vertex.z > max.z) {
					max.z = vertex.z;
				}
				if(vertex.z < min.z) {
					min.z = vertex.z;
				}
			}
			this._worldSpaceBox.set_topRight(max);
			this._worldSpaceBox.set_bottomLeft(min);
		}
	}
	,computeBox: function(surfaces,min,max) {
		var _g = 0;
		while(_g < surfaces.length) {
			var surface = surfaces[_g];
			++_g;
			var geom = surface.get_geometry();
			if(geom.hasVertexAttribute("position")) {
				var xyzBuffer = geom.vertexBuffer("position");
				var offset = xyzBuffer.attribute("position").offset;
				var _g2 = 0;
				var _g1 = xyzBuffer.get_numVertices();
				while(_g2 < _g1) {
					var i = _g2++;
					var x = xyzBuffer.get_data()[i * xyzBuffer.get_vertexSize() + offset];
					var y = xyzBuffer.get_data()[i * xyzBuffer.get_vertexSize() + offset + 1];
					var z = xyzBuffer.get_data()[i * xyzBuffer.get_vertexSize() + offset + 2];
					if(x < min.x) {
						min.x = x;
					}
					if(x > max.x) {
						max.x = x;
					}
					if(y < min.y) {
						min.y = y;
					}
					if(y > max.y) {
						max.y = y;
					}
					if(z < min.z) {
						min.z = z;
					}
					if(z > max.z) {
						max.z = z;
					}
				}
			} else {
				var this1 = new glm_Vec3Base();
				this1.x = 0.0;
				this1.y = 0.0;
				this1.z = 0.0;
				min = this1;
				var this2 = new glm_Vec3Base();
				this2.x = 0.0;
				this2.y = 0.0;
				this2.z = 0.0;
				max = this2;
			}
		}
	}
	,__class__: minko_component_BoundingBox
});
var minko_component_Culling = $hx_exports["minko"]["component"]["Culling"] = function(shape,bindProperty,layout) {
	minko_component_AbstractComponent.call(this);
	this._frustum = shape;
	this._bindProperty = bindProperty;
	this._worldSize = 50.0;
	this._maxDepth = 7;
	this._layout = layout;
};
minko_component_Culling.__name__ = true;
minko_component_Culling.create = function(shape,bindPropertyName,layout) {
	if(layout == null) {
		layout = 1;
	}
	return new minko_component_Culling(shape,bindPropertyName,layout);
};
minko_component_Culling.__super__ = minko_component_AbstractComponent;
minko_component_Culling.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_worldSize: function() {
		return this._worldSize;
	}
	,set_worldSize: function(value) {
		this._worldSize = value;
		return value;
	}
	,get_maxDepth: function() {
		return this._maxDepth;
	}
	,set_maxDepth: function(value) {
		this._maxDepth = value;
		return value;
	}
	,get_octTree: function() {
		return this._octTree;
	}
	,targetAdded: function(target) {
		var _gthis = this;
		if(target.getComponents(minko_component_Culling).length > 1) {
			throw new js__$Boot_HaxeError("The same camera node cannot have more than one Culling.");
		}
		if(this._octTree == null) {
			var tmp = this.get_worldSize();
			var tmp1 = this.get_maxDepth();
			var this1 = new glm_Vec3Base();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this._octTree = minko_math_OctTree.create(tmp,tmp1,this1);
		}
		if(target.get_root().hasComponent(minko_component_SceneManager)) {
			this.targetAddedToSceneHandler(null,target,null);
		} else {
			this._addedToSceneSlot = target.get_added().connect($bind(this,this.targetAddedToSceneHandler));
		}
		this._viewMatrixChangedSlot = target.get_data().getPropertyChanged(this._bindProperty).connect(function(d,p,n) {
			_gthis._updateNextFrame = true;
		});
	}
	,targetRemoved: function(target) {
		this._addedSlot = null;
		this._removedSlot = null;
		this._layoutChangedSlot = null;
		this._renderingBeginSlot = null;
		this._octTree = null;
		this._addedToSceneSlot = null;
		this._viewMatrixChangedSlot = null;
		this._renderingBeginSlot = null;
	}
	,addedHandler: function(node,target,ancestor) {
		var nodeSet = minko_scene_NodeSet.createbyNode(target).descendants(true).where(function(descendant) {
			if((descendant.get_layout() & 16) == 0) {
				return descendant.hasComponent(minko_component_Surface);
			} else {
				return false;
			}
		});
		var _g = 0;
		var _g1 = nodeSet.get_nodes();
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			this._octTree.insert(n);
		}
	}
	,removedHandler: function(node,target,ancestor) {
		var nodeSet = minko_scene_NodeSet.createbyNode(target).descendants(true).where(function(descendant) {
			if((descendant.get_layout() & 16) == 0) {
				return descendant.hasComponent(minko_component_Surface);
			} else {
				return false;
			}
		});
		var _g = 0;
		var _g1 = nodeSet.get_nodes();
		while(_g < _g1.length) {
			var nodeToRemove = _g1[_g];
			++_g;
			this._octTree.remove(nodeToRemove);
		}
	}
	,layoutChangedHandler: function(node,target) {
		if((target.get_layout() & 16) == 0) {
			this._octTree.insert(target);
		} else {
			this._octTree.remove(target);
		}
	}
	,targetAddedToSceneHandler: function(node,target,ancestor) {
		var _gthis = this;
		var sceneManager = target.get_root().getComponent(minko_component_SceneManager);
		if(sceneManager != null) {
			this._addedToSceneSlot = null;
			this._layoutChangedSlot = target.get_root().get_layoutChanged().connect($bind(this,this.layoutChangedHandler));
			this._addedSlot = target.get_root().get_added().connect($bind(this,this.addedHandler),-1.0);
			this._removedSlot = target.get_root().get_removed().connect($bind(this,this.removedHandler));
			this._renderingBeginSlot = sceneManager.get_renderingBegin().connect(function(sm,fid,rt) {
				if(_gthis._updateNextFrame) {
					_gthis._frustum.updateFromMatrix(_gthis.get_target().get_data().get(_gthis._bindProperty));
					_gthis._octTree.testFrustum(_gthis._frustum,function(node1) {
						var layout = node1.get_layout();
						if((layout & 32) == 0) {
							layout |= 1;
						}
						layout |= 128;
						node1.set_layout(layout);
					},function(node2) {
						var layout1 = node2.get_layout();
						layout1 &= ~1;
						layout1 &= ~128;
						node2.set_layout(layout1);
					});
					_gthis._updateNextFrame = false;
				}
			},-1.0);
			this.addedHandler(target.get_root(),target.get_root(),target.get_root());
		}
	}
	,__class__: minko_component_Culling
});
var minko_component_DirectionalLight = $hx_exports["minko"]["component"]["DirectionalLight"] = function(diffuse,specular) {
	minko_component_AbstractDiscreteLight.call(this,"directionalLight",diffuse,specular);
	this._shadowMappingEnabled = false;
	this._numShadowCascades = 0;
	this._shadowMap = null;
	this._shadowMapSize = 0;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) {
		var i = _g1++;
		_g.push(null);
	}
	this._shadowRenderers = _g;
	var _g11 = [];
	var _g2 = 0;
	while(_g2 < 4) {
		var i1 = _g2++;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		_g11.push(dest);
	}
	this._shadowProjections = _g11;
	var this2 = new glm_Mat4Base();
	this2._00 = 0;
	this2._01 = 0;
	this2._02 = 0;
	this2._03 = 0;
	this2._10 = 0;
	this2._11 = 0;
	this2._12 = 0;
	this2._13 = 0;
	this2._20 = 0;
	this2._21 = 0;
	this2._22 = 0;
	this2._23 = 0;
	this2._30 = 0;
	this2._31 = 0;
	this2._32 = 0;
	this2._33 = 0;
	var dest1 = this2;
	dest1._00 = 1;
	dest1._10 = 0;
	dest1._20 = 0;
	dest1._30 = 0;
	dest1._01 = 0;
	dest1._11 = 1;
	dest1._21 = 0;
	dest1._31 = 0;
	dest1._02 = 0;
	dest1._12 = 0;
	dest1._22 = 1;
	dest1._32 = 0;
	dest1._03 = 0;
	dest1._13 = 0;
	dest1._23 = 0;
	dest1._33 = 1;
	this.updateModelToWorldMatrix(dest1);
};
minko_component_DirectionalLight.__name__ = true;
minko_component_DirectionalLight.create = function(diffuse,specular) {
	if(specular == null) {
		specular = 1.0;
	}
	if(diffuse == null) {
		diffuse = 1.0;
	}
	return new minko_component_DirectionalLight(diffuse,specular);
};
minko_component_DirectionalLight.__super__ = minko_component_AbstractDiscreteLight;
minko_component_DirectionalLight.prototype = $extend(minko_component_AbstractDiscreteLight.prototype,{
	clone: function(option) {
		return minko_component_DirectionalLight.create(this.get_diffuse(),this.get_specular());
	}
	,get_shadowMap: function() {
		return this._shadowMap;
	}
	,set_shadowSpread: function(spread) {
		this.get_data().set("shadowSpread",spread);
		return spread;
	}
	,get_shadowProjections: function() {
		return this._shadowProjections;
	}
	,get_shadowMappingEnabled: function() {
		return this._shadowMappingEnabled;
	}
	,get_numShadowCascades: function() {
		return this._numShadowCascades;
	}
	,computeShadowProjection: function(view,projection,zFar,fitToCascade) {
		if(fitToCascade == null) {
			fitToCascade = false;
		}
		if(zFar == null) {
			zFar = 100000.0;
		}
		if(!this._shadowMappingEnabled) {
			return;
		}
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var a00 = projection._00;
		var a01 = projection._10;
		var a02 = projection._20;
		var a03 = projection._30;
		var a10 = projection._01;
		var a11 = projection._11;
		var a12 = projection._21;
		var a13 = projection._31;
		var a20 = projection._02;
		var a21 = projection._12;
		var a22 = projection._22;
		var a23 = projection._32;
		var a30 = projection._03;
		var a31 = projection._13;
		var a32 = projection._23;
		var a33 = projection._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var invProjection = dest;
		var this2 = new glm_Vec4Base();
		this2.x = -1.0;
		this2.y = 1.0;
		this2.z = -1.0;
		this2.w = 1.0;
		var v = this2;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 0;
		var dest1 = this3;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest1.x = invProjection._00 * x + invProjection._10 * y + invProjection._20 * z + invProjection._30 * w;
		dest1.y = invProjection._01 * x + invProjection._11 * y + invProjection._21 * z + invProjection._31 * w;
		dest1.z = invProjection._02 * x + invProjection._12 * y + invProjection._22 * z + invProjection._32 * w;
		dest1.w = invProjection._03 * x + invProjection._13 * y + invProjection._23 * z + invProjection._33 * w;
		var v_0 = dest1;
		var this4 = new glm_Vec4Base();
		this4.x = 1.0;
		this4.y = 1.0;
		this4.z = -1.0;
		this4.w = 1.0;
		var v1 = this4;
		var this5 = new glm_Vec4Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		this5.w = 0;
		var dest2 = this5;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest2.x = invProjection._00 * x1 + invProjection._10 * y1 + invProjection._20 * z1 + invProjection._30 * w1;
		dest2.y = invProjection._01 * x1 + invProjection._11 * y1 + invProjection._21 * z1 + invProjection._31 * w1;
		dest2.z = invProjection._02 * x1 + invProjection._12 * y1 + invProjection._22 * z1 + invProjection._32 * w1;
		dest2.w = invProjection._03 * x1 + invProjection._13 * y1 + invProjection._23 * z1 + invProjection._33 * w1;
		var v_1 = dest2;
		var this6 = new glm_Vec4Base();
		this6.x = 1.0;
		this6.y = -1.0;
		this6.z = -1.0;
		this6.w = 1.0;
		var v2 = this6;
		var this7 = new glm_Vec4Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		this7.w = 0;
		var dest3 = this7;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest3.x = invProjection._00 * x2 + invProjection._10 * y2 + invProjection._20 * z2 + invProjection._30 * w2;
		dest3.y = invProjection._01 * x2 + invProjection._11 * y2 + invProjection._21 * z2 + invProjection._31 * w2;
		dest3.z = invProjection._02 * x2 + invProjection._12 * y2 + invProjection._22 * z2 + invProjection._32 * w2;
		dest3.w = invProjection._03 * x2 + invProjection._13 * y2 + invProjection._23 * z2 + invProjection._33 * w2;
		var v_2 = dest3;
		var this8 = new glm_Vec4Base();
		this8.x = -1.0;
		this8.y = -1.0;
		this8.z = -1.0;
		this8.w = 1.0;
		var v3 = this8;
		var this9 = new glm_Vec4Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		this9.w = 0;
		var dest4 = this9;
		var x3 = v3.x;
		var y3 = v3.y;
		var z3 = v3.z;
		var w3 = v3.w;
		dest4.x = invProjection._00 * x3 + invProjection._10 * y3 + invProjection._20 * z3 + invProjection._30 * w3;
		dest4.y = invProjection._01 * x3 + invProjection._11 * y3 + invProjection._21 * z3 + invProjection._31 * w3;
		dest4.z = invProjection._02 * x3 + invProjection._12 * y3 + invProjection._22 * z3 + invProjection._32 * w3;
		dest4.w = invProjection._03 * x3 + invProjection._13 * y3 + invProjection._23 * z3 + invProjection._33 * w3;
		var v_3 = dest4;
		var this10 = new glm_Vec4Base();
		this10.x = -1.0;
		this10.y = 1.0;
		this10.z = 1.0;
		this10.w = 1.0;
		var v4 = this10;
		var this11 = new glm_Vec4Base();
		this11.x = 0;
		this11.y = 0;
		this11.z = 0;
		this11.w = 0;
		var dest5 = this11;
		var x4 = v4.x;
		var y4 = v4.y;
		var z4 = v4.z;
		var w4 = v4.w;
		dest5.x = invProjection._00 * x4 + invProjection._10 * y4 + invProjection._20 * z4 + invProjection._30 * w4;
		dest5.y = invProjection._01 * x4 + invProjection._11 * y4 + invProjection._21 * z4 + invProjection._31 * w4;
		dest5.z = invProjection._02 * x4 + invProjection._12 * y4 + invProjection._22 * z4 + invProjection._32 * w4;
		dest5.w = invProjection._03 * x4 + invProjection._13 * y4 + invProjection._23 * z4 + invProjection._33 * w4;
		var v_4 = dest5;
		var this12 = new glm_Vec4Base();
		this12.x = 1.0;
		this12.y = 1.0;
		this12.z = 1.0;
		this12.w = 1.0;
		var v5 = this12;
		var this13 = new glm_Vec4Base();
		this13.x = 0;
		this13.y = 0;
		this13.z = 0;
		this13.w = 0;
		var dest6 = this13;
		var x5 = v5.x;
		var y5 = v5.y;
		var z5 = v5.z;
		var w5 = v5.w;
		dest6.x = invProjection._00 * x5 + invProjection._10 * y5 + invProjection._20 * z5 + invProjection._30 * w5;
		dest6.y = invProjection._01 * x5 + invProjection._11 * y5 + invProjection._21 * z5 + invProjection._31 * w5;
		dest6.z = invProjection._02 * x5 + invProjection._12 * y5 + invProjection._22 * z5 + invProjection._32 * w5;
		dest6.w = invProjection._03 * x5 + invProjection._13 * y5 + invProjection._23 * z5 + invProjection._33 * w5;
		var v_5 = dest6;
		var this14 = new glm_Vec4Base();
		this14.x = 1.0;
		this14.y = -1.0;
		this14.z = 1.0;
		this14.w = 1.0;
		var v6 = this14;
		var this15 = new glm_Vec4Base();
		this15.x = 0;
		this15.y = 0;
		this15.z = 0;
		this15.w = 0;
		var dest7 = this15;
		var x6 = v6.x;
		var y6 = v6.y;
		var z6 = v6.z;
		var w6 = v6.w;
		dest7.x = invProjection._00 * x6 + invProjection._10 * y6 + invProjection._20 * z6 + invProjection._30 * w6;
		dest7.y = invProjection._01 * x6 + invProjection._11 * y6 + invProjection._21 * z6 + invProjection._31 * w6;
		dest7.z = invProjection._02 * x6 + invProjection._12 * y6 + invProjection._22 * z6 + invProjection._32 * w6;
		dest7.w = invProjection._03 * x6 + invProjection._13 * y6 + invProjection._23 * z6 + invProjection._33 * w6;
		var v_6 = dest7;
		var this16 = new glm_Vec4Base();
		this16.x = -1.0;
		this16.y = -1.0;
		this16.z = 1.0;
		this16.w = 1.0;
		var v7 = this16;
		var this17 = new glm_Vec4Base();
		this17.x = 0;
		this17.y = 0;
		this17.z = 0;
		this17.w = 0;
		var dest8 = this17;
		var x7 = v7.x;
		var y7 = v7.y;
		var z7 = v7.z;
		var w7 = v7.w;
		dest8.x = invProjection._00 * x7 + invProjection._10 * y7 + invProjection._20 * z7 + invProjection._30 * w7;
		dest8.y = invProjection._01 * x7 + invProjection._11 * y7 + invProjection._21 * z7 + invProjection._31 * w7;
		dest8.z = invProjection._02 * x7 + invProjection._12 * y7 + invProjection._22 * z7 + invProjection._32 * w7;
		dest8.w = invProjection._03 * x7 + invProjection._13 * y7 + invProjection._23 * z7 + invProjection._33 * w7;
		var v_7 = dest8;
		zFar = Math.floor(Math.min(zFar,-(v_4.z / v_4.w)));
		var a = v_0;
		var s = 1 / v_0.w;
		var this18 = new glm_Vec4Base();
		this18.x = 0;
		this18.y = 0;
		this18.z = 0;
		this18.w = 0;
		var dest9 = this18;
		dest9.x = a.x * s;
		dest9.y = a.y * s;
		dest9.z = a.z * s;
		dest9.w = a.w * s;
		var zNear = -dest9.z;
		var fov = Math.atan(1.0 / projection._11) * 2.0;
		var ratio = projection._11 / projection._00;
		var splitFar = [zFar,zFar,zFar,zFar];
		var splitNear = [zNear,zNear,zNear,zNear];
		var lambda = .5;
		var j = 1.0;
		var _g1 = 0;
		var _g = this._numShadowCascades - 1;
		while(_g1 < _g) {
			var i = _g1++;
			splitFar[i] = zNear * Math.pow(zFar / zNear,j / this._numShadowCascades) * lambda + (zNear + j / this._numShadowCascades * (zFar - zNear)) * (1 - lambda);
			splitNear[i + 1] = splitFar[i];
			j += 1.0;
		}
		var _g11 = 0;
		var _g2 = this._numShadowCascades;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var far = splitFar[i1];
			var this19 = new glm_Mat4Base();
			this19._00 = 0;
			this19._01 = 0;
			this19._02 = 0;
			this19._03 = 0;
			this19._10 = 0;
			this19._11 = 0;
			this19._12 = 0;
			this19._13 = 0;
			this19._20 = 0;
			this19._21 = 0;
			this19._22 = 0;
			this19._23 = 0;
			this19._30 = 0;
			this19._31 = 0;
			this19._32 = 0;
			this19._33 = 0;
			var dest10 = this19;
			var f = 1 / Math.tan(fov / 2);
			var nf = 1 / (zNear - far);
			dest10._00 = f / ratio;
			dest10._01 = 0;
			dest10._02 = 0;
			dest10._03 = 0;
			dest10._10 = 0;
			dest10._11 = f;
			dest10._12 = 0;
			dest10._13 = 0;
			dest10._20 = 0;
			dest10._21 = 0;
			dest10._22 = (far + zNear) * nf;
			dest10._23 = -1;
			dest10._30 = 0;
			dest10._31 = 0;
			dest10._32 = 2 * far * zNear * nf;
			dest10._33 = 0;
			var a1 = dest10;
			var this20 = new glm_Mat4Base();
			this20._00 = 0;
			this20._01 = 0;
			this20._02 = 0;
			this20._03 = 0;
			this20._10 = 0;
			this20._11 = 0;
			this20._12 = 0;
			this20._13 = 0;
			this20._20 = 0;
			this20._21 = 0;
			this20._22 = 0;
			this20._23 = 0;
			this20._30 = 0;
			this20._31 = 0;
			this20._32 = 0;
			this20._33 = 0;
			var dest11 = this20;
			var _a;
			var _b;
			if(dest11 == a1) {
				var this21 = new glm_Mat4Base();
				this21._00 = 0;
				this21._01 = 0;
				this21._02 = 0;
				this21._03 = 0;
				this21._10 = 0;
				this21._11 = 0;
				this21._12 = 0;
				this21._13 = 0;
				this21._20 = 0;
				this21._21 = 0;
				this21._22 = 0;
				this21._23 = 0;
				this21._30 = 0;
				this21._31 = 0;
				this21._32 = 0;
				this21._33 = 0;
				var dest12 = this21;
				dest12._00 = a1._00;
				dest12._10 = a1._10;
				dest12._20 = a1._20;
				dest12._30 = a1._30;
				dest12._01 = a1._01;
				dest12._11 = a1._11;
				dest12._21 = a1._21;
				dest12._31 = a1._31;
				dest12._02 = a1._02;
				dest12._12 = a1._12;
				dest12._22 = a1._22;
				dest12._32 = a1._32;
				dest12._03 = a1._03;
				dest12._13 = a1._13;
				dest12._23 = a1._23;
				dest12._33 = a1._33;
				_a = dest12;
				_b = view;
			} else if(dest11 == view) {
				_a = a1;
				var this22 = new glm_Mat4Base();
				this22._00 = 0;
				this22._01 = 0;
				this22._02 = 0;
				this22._03 = 0;
				this22._10 = 0;
				this22._11 = 0;
				this22._12 = 0;
				this22._13 = 0;
				this22._20 = 0;
				this22._21 = 0;
				this22._22 = 0;
				this22._23 = 0;
				this22._30 = 0;
				this22._31 = 0;
				this22._32 = 0;
				this22._33 = 0;
				var dest13 = this22;
				dest13._00 = view._00;
				dest13._10 = view._10;
				dest13._20 = view._20;
				dest13._30 = view._30;
				dest13._01 = view._01;
				dest13._11 = view._11;
				dest13._21 = view._21;
				dest13._31 = view._31;
				dest13._02 = view._02;
				dest13._12 = view._12;
				dest13._22 = view._22;
				dest13._32 = view._32;
				dest13._03 = view._03;
				dest13._13 = view._13;
				dest13._23 = view._23;
				dest13._33 = view._33;
				_b = dest13;
			} else {
				_a = a1;
				_b = view;
			}
			dest11._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest11._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest11._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest11._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest11._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest11._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest11._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest11._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest11._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest11._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest11._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest11._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest11._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest11._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest11._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest11._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			var cameraViewProjection = dest11;
			var box = this.computeBox(cameraViewProjection);
			var tmp = this._shadowProjections;
			var left = box.first.x;
			var right = box.second.x;
			var bottom = box.first.y;
			var top = box.second.y;
			var near = -box.second.z;
			var far1 = -box.first.z;
			var this23 = new glm_Mat4Base();
			this23._00 = 0;
			this23._01 = 0;
			this23._02 = 0;
			this23._03 = 0;
			this23._10 = 0;
			this23._11 = 0;
			this23._12 = 0;
			this23._13 = 0;
			this23._20 = 0;
			this23._21 = 0;
			this23._22 = 0;
			this23._23 = 0;
			this23._30 = 0;
			this23._31 = 0;
			this23._32 = 0;
			this23._33 = 0;
			var dest14 = this23;
			var rl = 1 / (right - left);
			var tb = 1 / (top - bottom);
			var fn = 1 / (far1 - near);
			dest14._00 = 2 * rl;
			dest14._10 = 0;
			dest14._20 = 0;
			dest14._30 = -1 * (left + right) * rl;
			dest14._01 = 0;
			dest14._11 = 2 * tb;
			dest14._21 = 0;
			dest14._31 = -1 * (top + bottom) * tb;
			dest14._02 = 0;
			dest14._12 = 0;
			dest14._22 = -2 * fn;
			dest14._32 = -1 * (far1 + near) * fn;
			dest14._03 = 0;
			dest14._13 = 0;
			dest14._23 = 0;
			dest14._33 = 1;
			tmp[i1] = dest14;
			if(fitToCascade) {
				zNear = splitFar[i1];
			}
		}
		var _g3 = this._numShadowCascades;
		while(_g3 < 4) {
			var i2 = _g3++;
			splitFar[i2] = -Infinity;
			splitNear[i2] = Infinity;
		}
		var tmp1 = this.get_data();
		var this24 = new glm_Vec4Base();
		this24.x = splitFar[0];
		this24.y = splitFar[1];
		this24.z = splitFar[2];
		this24.w = splitFar[3];
		tmp1.set("shadowSplitFar",this24);
		var tmp2 = this.get_data();
		var this25 = new glm_Vec4Base();
		this25.x = splitNear[0];
		this25.y = splitNear[1];
		this25.z = splitNear[2];
		this25.w = splitNear[3];
		tmp2.set("shadowSplitNear",this25);
		this.updateWorldToScreenMatrix();
	}
	,enableShadowMapping: function(shadowMapSize,numCascades) {
		if(numCascades == null) {
			numCascades = 4;
		}
		if(shadowMapSize == null) {
			shadowMapSize = 512;
		}
		if(!this._shadowMappingEnabled || shadowMapSize != this._shadowMapSize || numCascades != this._numShadowCascades) {
			if(this._shadowMap == null || shadowMapSize != this._shadowMapSize || numCascades != this._numShadowCascades) {
				this._numShadowCascades = numCascades;
				this._shadowMapSize = shadowMapSize;
				this.initializeShadowMapping();
			} else {
				var _g = 0;
				var _g1 = this._shadowRenderers;
				while(_g < _g1.length) {
					var renderer = _g1[_g];
					++_g;
					if(renderer != null) {
						renderer.set_enabled(true);
					}
				}
				this.get_data().set("shadowMap",this._shadowMap);
			}
			this._shadowMappingEnabled = true;
		}
	}
	,disableShadowMapping: function(disposeResources) {
		if(disposeResources == null) {
			disposeResources = false;
		}
		if(this._shadowMappingEnabled) {
			var _g = 0;
			var _g1 = this._shadowRenderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				if(renderer != null) {
					renderer.set_enabled(false);
				}
			}
			this.get_data().unset("shadowMap");
			if(disposeResources) {
				this._shadowMap = null;
				var _g2 = 0;
				var _g11 = this._shadowRenderers;
				while(_g2 < _g11.length) {
					var renderer1 = _g11[_g2];
					++_g2;
					if(renderer1 != null && this.get_target().existsComponent(renderer1)) {
						this.get_target().removeComponent(renderer1);
						renderer1 = null;
					}
				}
			}
			this._shadowMappingEnabled = false;
		}
	}
	,updateModelToWorldMatrix: function(modelToWorld) {
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = -1.0;
		this1.w = 0;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = modelToWorld._00 * x + modelToWorld._10 * y + modelToWorld._20 * z + modelToWorld._30 * w;
		dest.y = modelToWorld._01 * x + modelToWorld._11 * y + modelToWorld._21 * z + modelToWorld._31 * w;
		dest.z = modelToWorld._02 * x + modelToWorld._12 * y + modelToWorld._22 * z + modelToWorld._32 * w;
		dest.w = modelToWorld._03 * x + modelToWorld._13 * y + modelToWorld._23 * z + modelToWorld._33 * w;
		var tmp = dest;
		var x1 = tmp.x;
		var y1 = tmp.y;
		var z1 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x1;
		this3.y = y1;
		this3.z = z1;
		this._worldDirection = this3;
		var v1 = this._worldDirection;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest1 = this4;
		var length = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v1.x * mult;
		dest1.y = v1.y * mult;
		dest1.z = v1.z * mult;
		this._worldDirection = dest1;
		this.get_data().set("direction",this._worldDirection);
		this.updateWorldToScreenMatrix();
	}
	,updateRoot: function(root) {
		minko_component_AbstractDiscreteLight.prototype.updateRoot.call(this,root);
		if(root != null && this._shadowMappingEnabled && this._shadowMap == null) {
			this.initializeShadowMapping();
		}
	}
	,targetRemoved: function(target) {
		minko_component_AbstractDiscreteLight.prototype.targetRemoved.call(this,target);
		var _g = 0;
		var _g1 = this._shadowRenderers;
		while(_g < _g1.length) {
			var renderer = _g1[_g];
			++_g;
			if(renderer != null && target.existsComponent(renderer)) {
				target.removeComponent(renderer);
			}
		}
	}
	,copyFrom: function(directionalLight,option) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
	}
	,initializeShadowMapping: function() {
		if(this.get_target() == null || !this.get_target().get_root().hasComponent(minko_component_SceneManager)) {
			return false;
		}
		var sm = this.get_target().get_root().getComponent(minko_component_SceneManager);
		var assets = sm.get_assets();
		var effectName = "effect/ShadowMap.effect";
		var fx = assets.effect(effectName);
		var smTechnique = this.get_target().get_root().hasComponent(minko_component_ShadowMappingTechnique) ? this.get_target().get_root().get_data().get("shadowMappingTechnique") : 0;
		if(fx == null) {
			var texture = assets.texture("shadow-map-tmp");
			if(texture == null) {
				texture = minko_render_Texture.create(assets.get_context(),this._shadowMapSize,this._shadowMapSize,false,true);
				if(smTechnique == 1) {
					texture.upload();
				}
				assets.setTexture("shadow-map-tmp",texture);
			}
			texture = assets.texture("shadow-map-tmp-2");
			if(texture == null) {
				texture = minko_render_Texture.create(assets.get_context(),this._shadowMapSize,this._shadowMapSize,false,true);
				if(smTechnique == 1) {
					texture.upload();
				}
				assets.setTexture("shadow-map-tmp-2",texture);
			}
			var loader = minko_file_Loader.createbyLoader(assets.get_loader());
			loader.get_options().set_loadAsynchronously(false);
			loader.queue(effectName);
			loader.load();
			fx = assets.effect(effectName);
		}
		this._shadowMap = minko_render_Texture.create(assets.get_context(),this._shadowMapSize * 2,this._shadowMapSize * 2,false,true);
		this._shadowMap.upload();
		this.get_data().set("shadowMap",this._shadowMap).set("shadowMaxDistance",0.9).set("shadowSpread",1.0).set("shadowBias",-0.001).set("shadowMapSize",this._shadowMapSize * 2.0);
		var y = this._shadowMapSize;
		var z = this._shadowMapSize;
		var w = this._shadowMapSize;
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = y;
		this1.z = z;
		this1.w = w;
		var x = this._shadowMapSize;
		var y1 = this._shadowMapSize;
		var z1 = this._shadowMapSize;
		var w1 = this._shadowMapSize;
		var this2 = new glm_Vec4Base();
		this2.x = x;
		this2.y = y1;
		this2.z = z1;
		this2.w = w1;
		var z2 = this._shadowMapSize;
		var w2 = this._shadowMapSize;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = z2;
		this3.w = w2;
		var x1 = this._shadowMapSize;
		var z3 = this._shadowMapSize;
		var w3 = this._shadowMapSize;
		var this4 = new glm_Vec4Base();
		this4.x = x1;
		this4.y = 0;
		this4.z = z3;
		this4.w = w3;
		var viewports = [this1,this2,this3,this4];
		var _g1 = 0;
		var _g = this._numShadowCascades;
		while(_g1 < _g) {
			var i = _g1++;
			var techniqueName = "shadow-map-cascade" + i;
			if(smTechnique == 1) {
				techniqueName += "-esm";
			}
			var renderer = minko_component_Renderer.create(-1,this._shadowMap,fx,techniqueName,minko_render__$Priority_Priority_$Impl_$.FIRST - i);
			renderer.set_clearBeforeRender(i == 0);
			renderer.set_viewport(viewports[i]);
			renderer.get_effectVariables().push(new minko_Tuple("lightUuid",this.get_data().get_uuid()));
			renderer.set_layoutMask(1024);
			this.get_target().addComponent(renderer);
			this._shadowRenderers[i] = renderer;
		}
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		var this6 = new glm_Mat4Base();
		this6._00 = 0;
		this6._01 = 0;
		this6._02 = 0;
		this6._03 = 0;
		this6._10 = 0;
		this6._11 = 0;
		this6._12 = 0;
		this6._13 = 0;
		this6._20 = 0;
		this6._21 = 0;
		this6._22 = 0;
		this6._23 = 0;
		this6._30 = 0;
		this6._31 = 0;
		this6._32 = 0;
		this6._33 = 0;
		var dest1 = this6;
		var f = 1 / Math.tan(0.3925);
		var nf = -0.001000100010001;
		dest1._00 = f / 1.0;
		dest1._01 = 0;
		dest1._02 = 0;
		dest1._03 = 0;
		dest1._10 = 0;
		dest1._11 = f;
		dest1._12 = 0;
		dest1._13 = 0;
		dest1._20 = 0;
		dest1._21 = 0;
		dest1._22 = 1000.1 * nf;
		dest1._23 = -1;
		dest1._30 = 0;
		dest1._31 = 0;
		dest1._32 = 200. * nf;
		dest1._33 = 0;
		this.computeShadowProjection(dest,dest1);
		return true;
	}
	,updateWorldToScreenMatrix: function() {
		if(this.get_target() != null && this.get_target().get_data().hasProperty("modelToWorldMatrix")) {
			var src = this.get_target().get_data().get("modelToWorldMatrix");
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			var a00 = src._00;
			var a01 = src._10;
			var a02 = src._20;
			var a03 = src._30;
			var a10 = src._01;
			var a11 = src._11;
			var a12 = src._21;
			var a13 = src._31;
			var a20 = src._02;
			var a21 = src._12;
			var a22 = src._22;
			var a23 = src._32;
			var a30 = src._03;
			var a31 = src._13;
			var a32 = src._23;
			var a33 = src._33;
			var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
			var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
			var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
			var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
			var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
			if(Math.abs(det) <= glm_GLM.EPSILON) {
				throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
			}
			var idet = 1 / det;
			dest._00 = t00 * idet;
			dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
			dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
			dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
			dest._10 = t01 * idet;
			dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
			dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
			dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
			dest._20 = t02 * idet;
			dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
			dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
			dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
			dest._30 = t03 * idet;
			dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
			dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
			dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
			this._view = dest;
		} else {
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest1 = this2;
			dest1._00 = 1;
			dest1._10 = 0;
			dest1._20 = 0;
			dest1._30 = 0;
			dest1._01 = 0;
			dest1._11 = 1;
			dest1._21 = 0;
			dest1._31 = 0;
			dest1._02 = 0;
			dest1._12 = 0;
			dest1._22 = 1;
			dest1._32 = 0;
			dest1._03 = 0;
			dest1._13 = 0;
			dest1._23 = 0;
			dest1._33 = 1;
			this._view = dest1;
		}
		var zFar = [0.0,0.0,0.0,0.0];
		var zNear = [0.0,0.0,0.0,0.0];
		var viewProjections = [];
		var _g1 = 0;
		var _g = this._numShadowCascades;
		while(_g1 < _g) {
			var i = _g1++;
			var projection = this._shadowProjections[i];
			var istr = i == null ? "null" : "" + i;
			var farMinusNear = 2.0 / projection._22;
			var farPlusNear = projection._32 * farMinusNear;
			zNear[i] = (farMinusNear + farPlusNear) / 2.0;
			zFar[i] = farPlusNear - zNear[i];
			var b = this._view;
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			var _a;
			var _b;
			if(dest2 == projection) {
				var this4 = new glm_Mat4Base();
				this4._00 = 0;
				this4._01 = 0;
				this4._02 = 0;
				this4._03 = 0;
				this4._10 = 0;
				this4._11 = 0;
				this4._12 = 0;
				this4._13 = 0;
				this4._20 = 0;
				this4._21 = 0;
				this4._22 = 0;
				this4._23 = 0;
				this4._30 = 0;
				this4._31 = 0;
				this4._32 = 0;
				this4._33 = 0;
				var dest3 = this4;
				dest3._00 = projection._00;
				dest3._10 = projection._10;
				dest3._20 = projection._20;
				dest3._30 = projection._30;
				dest3._01 = projection._01;
				dest3._11 = projection._11;
				dest3._21 = projection._21;
				dest3._31 = projection._31;
				dest3._02 = projection._02;
				dest3._12 = projection._12;
				dest3._22 = projection._22;
				dest3._32 = projection._32;
				dest3._03 = projection._03;
				dest3._13 = projection._13;
				dest3._23 = projection._23;
				dest3._33 = projection._33;
				_a = dest3;
				_b = b;
			} else if(dest2 == b) {
				_a = projection;
				var this5 = new glm_Mat4Base();
				this5._00 = 0;
				this5._01 = 0;
				this5._02 = 0;
				this5._03 = 0;
				this5._10 = 0;
				this5._11 = 0;
				this5._12 = 0;
				this5._13 = 0;
				this5._20 = 0;
				this5._21 = 0;
				this5._22 = 0;
				this5._23 = 0;
				this5._30 = 0;
				this5._31 = 0;
				this5._32 = 0;
				this5._33 = 0;
				var dest4 = this5;
				dest4._00 = b._00;
				dest4._10 = b._10;
				dest4._20 = b._20;
				dest4._30 = b._30;
				dest4._01 = b._01;
				dest4._11 = b._11;
				dest4._21 = b._21;
				dest4._31 = b._31;
				dest4._02 = b._02;
				dest4._12 = b._12;
				dest4._22 = b._22;
				dest4._32 = b._32;
				dest4._03 = b._03;
				dest4._13 = b._13;
				dest4._23 = b._23;
				dest4._33 = b._33;
				_b = dest4;
			} else {
				_a = projection;
				_b = b;
			}
			dest2._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest2._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest2._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest2._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest2._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest2._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest2._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest2._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest2._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest2._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest2._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest2._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest2._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest2._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest2._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest2._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			var mat4 = dest2;
			viewProjections.push(mat4);
		}
		this.get_data().set("viewProjection",viewProjections).set("zNear",zNear).set("zFar",zFar);
	}
	,computeBox: function(viewProjection) {
		var a = this._view;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var a00 = viewProjection._00;
		var a01 = viewProjection._10;
		var a02 = viewProjection._20;
		var a03 = viewProjection._30;
		var a10 = viewProjection._01;
		var a11 = viewProjection._11;
		var a12 = viewProjection._21;
		var a13 = viewProjection._31;
		var a20 = viewProjection._02;
		var a21 = viewProjection._12;
		var a22 = viewProjection._22;
		var a23 = viewProjection._32;
		var a30 = viewProjection._03;
		var a31 = viewProjection._13;
		var a32 = viewProjection._23;
		var a33 = viewProjection._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var b = dest;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		var _a;
		var _b;
		if(dest1 == a) {
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = a._00;
			dest2._10 = a._10;
			dest2._20 = a._20;
			dest2._30 = a._30;
			dest2._01 = a._01;
			dest2._11 = a._11;
			dest2._21 = a._21;
			dest2._31 = a._31;
			dest2._02 = a._02;
			dest2._12 = a._12;
			dest2._22 = a._22;
			dest2._32 = a._32;
			dest2._03 = a._03;
			dest2._13 = a._13;
			dest2._23 = a._23;
			dest2._33 = a._33;
			_a = dest2;
			_b = b;
		} else if(dest1 == b) {
			_a = a;
			var this4 = new glm_Mat4Base();
			this4._00 = 0;
			this4._01 = 0;
			this4._02 = 0;
			this4._03 = 0;
			this4._10 = 0;
			this4._11 = 0;
			this4._12 = 0;
			this4._13 = 0;
			this4._20 = 0;
			this4._21 = 0;
			this4._22 = 0;
			this4._23 = 0;
			this4._30 = 0;
			this4._31 = 0;
			this4._32 = 0;
			this4._33 = 0;
			var dest3 = this4;
			dest3._00 = b._00;
			dest3._10 = b._10;
			dest3._20 = b._20;
			dest3._30 = b._30;
			dest3._01 = b._01;
			dest3._11 = b._11;
			dest3._21 = b._21;
			dest3._31 = b._31;
			dest3._02 = b._02;
			dest3._12 = b._12;
			dest3._22 = b._22;
			dest3._32 = b._32;
			dest3._03 = b._03;
			dest3._13 = b._13;
			dest3._23 = b._23;
			dest3._33 = b._33;
			_b = dest3;
		} else {
			_a = a;
			_b = b;
		}
		dest1._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest1._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest1._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest1._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest1._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest1._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest1._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest1._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest1._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest1._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest1._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest1._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest1._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest1._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest1._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest1._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		var t = dest1;
		var this5 = new glm_Vec4Base();
		this5.x = -1.0;
		this5.y = 1.0;
		this5.z = -1.0;
		this5.w = 1.0;
		var v = this5;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var dest4 = this6;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest4.x = t._00 * x + t._10 * y + t._20 * z + t._30 * w;
		dest4.y = t._01 * x + t._11 * y + t._21 * z + t._31 * w;
		dest4.z = t._02 * x + t._12 * y + t._22 * z + t._32 * w;
		dest4.w = t._03 * x + t._13 * y + t._23 * z + t._33 * w;
		var this7 = new glm_Vec4Base();
		this7.x = 1.0;
		this7.y = 1.0;
		this7.z = -1.0;
		this7.w = 1.0;
		var v1 = this7;
		var this8 = new glm_Vec4Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		this8.w = 0;
		var dest5 = this8;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest5.x = t._00 * x1 + t._10 * y1 + t._20 * z1 + t._30 * w1;
		dest5.y = t._01 * x1 + t._11 * y1 + t._21 * z1 + t._31 * w1;
		dest5.z = t._02 * x1 + t._12 * y1 + t._22 * z1 + t._32 * w1;
		dest5.w = t._03 * x1 + t._13 * y1 + t._23 * z1 + t._33 * w1;
		var this9 = new glm_Vec4Base();
		this9.x = 1.0;
		this9.y = -1.0;
		this9.z = -1.0;
		this9.w = 1.0;
		var v2 = this9;
		var this10 = new glm_Vec4Base();
		this10.x = 0;
		this10.y = 0;
		this10.z = 0;
		this10.w = 0;
		var dest6 = this10;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest6.x = t._00 * x2 + t._10 * y2 + t._20 * z2 + t._30 * w2;
		dest6.y = t._01 * x2 + t._11 * y2 + t._21 * z2 + t._31 * w2;
		dest6.z = t._02 * x2 + t._12 * y2 + t._22 * z2 + t._32 * w2;
		dest6.w = t._03 * x2 + t._13 * y2 + t._23 * z2 + t._33 * w2;
		var this11 = new glm_Vec4Base();
		this11.x = -1.0;
		this11.y = -1.0;
		this11.z = -1.0;
		this11.w = 1.0;
		var v3 = this11;
		var this12 = new glm_Vec4Base();
		this12.x = 0;
		this12.y = 0;
		this12.z = 0;
		this12.w = 0;
		var dest7 = this12;
		var x3 = v3.x;
		var y3 = v3.y;
		var z3 = v3.z;
		var w3 = v3.w;
		dest7.x = t._00 * x3 + t._10 * y3 + t._20 * z3 + t._30 * w3;
		dest7.y = t._01 * x3 + t._11 * y3 + t._21 * z3 + t._31 * w3;
		dest7.z = t._02 * x3 + t._12 * y3 + t._22 * z3 + t._32 * w3;
		dest7.w = t._03 * x3 + t._13 * y3 + t._23 * z3 + t._33 * w3;
		var this13 = new glm_Vec4Base();
		this13.x = -1.0;
		this13.y = 1.0;
		this13.z = 1.0;
		this13.w = 1.0;
		var v4 = this13;
		var this14 = new glm_Vec4Base();
		this14.x = 0;
		this14.y = 0;
		this14.z = 0;
		this14.w = 0;
		var dest8 = this14;
		var x4 = v4.x;
		var y4 = v4.y;
		var z4 = v4.z;
		var w4 = v4.w;
		dest8.x = t._00 * x4 + t._10 * y4 + t._20 * z4 + t._30 * w4;
		dest8.y = t._01 * x4 + t._11 * y4 + t._21 * z4 + t._31 * w4;
		dest8.z = t._02 * x4 + t._12 * y4 + t._22 * z4 + t._32 * w4;
		dest8.w = t._03 * x4 + t._13 * y4 + t._23 * z4 + t._33 * w4;
		var this15 = new glm_Vec4Base();
		this15.x = 1.0;
		this15.y = 1.0;
		this15.z = 1.0;
		this15.w = 1.0;
		var v5 = this15;
		var this16 = new glm_Vec4Base();
		this16.x = 0;
		this16.y = 0;
		this16.z = 0;
		this16.w = 0;
		var dest9 = this16;
		var x5 = v5.x;
		var y5 = v5.y;
		var z5 = v5.z;
		var w5 = v5.w;
		dest9.x = t._00 * x5 + t._10 * y5 + t._20 * z5 + t._30 * w5;
		dest9.y = t._01 * x5 + t._11 * y5 + t._21 * z5 + t._31 * w5;
		dest9.z = t._02 * x5 + t._12 * y5 + t._22 * z5 + t._32 * w5;
		dest9.w = t._03 * x5 + t._13 * y5 + t._23 * z5 + t._33 * w5;
		var this17 = new glm_Vec4Base();
		this17.x = 1.0;
		this17.y = -1.0;
		this17.z = 1.0;
		this17.w = 1.0;
		var v6 = this17;
		var this18 = new glm_Vec4Base();
		this18.x = 0;
		this18.y = 0;
		this18.z = 0;
		this18.w = 0;
		var dest10 = this18;
		var x6 = v6.x;
		var y6 = v6.y;
		var z6 = v6.z;
		var w6 = v6.w;
		dest10.x = t._00 * x6 + t._10 * y6 + t._20 * z6 + t._30 * w6;
		dest10.y = t._01 * x6 + t._11 * y6 + t._21 * z6 + t._31 * w6;
		dest10.z = t._02 * x6 + t._12 * y6 + t._22 * z6 + t._32 * w6;
		dest10.w = t._03 * x6 + t._13 * y6 + t._23 * z6 + t._33 * w6;
		var this19 = new glm_Vec4Base();
		this19.x = -1.0;
		this19.y = -1.0;
		this19.z = 1.0;
		this19.w = 1.0;
		var v7 = this19;
		var this20 = new glm_Vec4Base();
		this20.x = 0;
		this20.y = 0;
		this20.z = 0;
		this20.w = 0;
		var dest11 = this20;
		var x7 = v7.x;
		var y7 = v7.y;
		var z7 = v7.z;
		var w7 = v7.w;
		dest11.x = t._00 * x7 + t._10 * y7 + t._20 * z7 + t._30 * w7;
		dest11.y = t._01 * x7 + t._11 * y7 + t._21 * z7 + t._31 * w7;
		dest11.z = t._02 * x7 + t._12 * y7 + t._22 * z7 + t._32 * w7;
		dest11.w = t._03 * x7 + t._13 * y7 + t._23 * z7 + t._33 * w7;
		var v8 = [dest4,dest5,dest6,dest7,dest8,dest9,dest10,dest11];
		var _g1 = 0;
		var _g = v8.length;
		while(_g1 < _g) {
			var i = _g1++;
			var p = v8[i];
			var s = 1 / p.w;
			var this21 = new glm_Vec4Base();
			this21.x = 0;
			this21.y = 0;
			this21.z = 0;
			this21.w = 0;
			var dest12 = this21;
			dest12.x = p.x * s;
			dest12.y = p.y * s;
			dest12.z = p.z * s;
			dest12.w = p.w * s;
			v8[i] = dest12;
		}
		var this22 = new glm_Vec3Base();
		this22.x = Infinity;
		this22.y = Infinity;
		this22.z = Infinity;
		var bottomLeft = this22;
		var this23 = new glm_Vec3Base();
		this23.x = -Infinity;
		this23.y = -Infinity;
		this23.z = -Infinity;
		var topRight = this23;
		var _g2 = 0;
		while(_g2 < v8.length) {
			var p1 = v8[_g2];
			++_g2;
			if(p1.x < bottomLeft.x) {
				bottomLeft.x = p1.x;
			}
			if(p1.x > topRight.x) {
				topRight.x = p1.x;
			}
			if(p1.y < bottomLeft.y) {
				bottomLeft.y = p1.y;
			}
			if(p1.y > topRight.y) {
				topRight.y = p1.y;
			}
			if(p1.z < bottomLeft.z) {
				bottomLeft.z = p1.z;
			}
			if(p1.z > topRight.z) {
				topRight.z = p1.z;
			}
		}
		return new minko_Tuple(bottomLeft,topRight);
	}
	,computeBoundingSphere: function(view,projection) {
		var a = this._view;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var _a;
		var _b;
		if(dest == projection) {
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest1 = this2;
			dest1._00 = projection._00;
			dest1._10 = projection._10;
			dest1._20 = projection._20;
			dest1._30 = projection._30;
			dest1._01 = projection._01;
			dest1._11 = projection._11;
			dest1._21 = projection._21;
			dest1._31 = projection._31;
			dest1._02 = projection._02;
			dest1._12 = projection._12;
			dest1._22 = projection._22;
			dest1._32 = projection._32;
			dest1._03 = projection._03;
			dest1._13 = projection._13;
			dest1._23 = projection._23;
			dest1._33 = projection._33;
			_a = dest1;
			_b = view;
		} else if(dest == view) {
			_a = projection;
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = view._00;
			dest2._10 = view._10;
			dest2._20 = view._20;
			dest2._30 = view._30;
			dest2._01 = view._01;
			dest2._11 = view._11;
			dest2._21 = view._21;
			dest2._31 = view._31;
			dest2._02 = view._02;
			dest2._12 = view._12;
			dest2._22 = view._22;
			dest2._32 = view._32;
			dest2._03 = view._03;
			dest2._13 = view._13;
			dest2._23 = view._23;
			dest2._33 = view._33;
			_b = dest2;
		} else {
			_a = projection;
			_b = view;
		}
		dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		var src = dest;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var dest3 = this4;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest3._00 = t00 * idet;
		dest3._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest3._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest3._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest3._10 = t01 * idet;
		dest3._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest3._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest3._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest3._20 = t02 * idet;
		dest3._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest3._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest3._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest3._30 = t03 * idet;
		dest3._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest3._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest3._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var b = dest3;
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest4 = this5;
		var _a1;
		var _b1;
		if(dest4 == a) {
			var this6 = new glm_Mat4Base();
			this6._00 = 0;
			this6._01 = 0;
			this6._02 = 0;
			this6._03 = 0;
			this6._10 = 0;
			this6._11 = 0;
			this6._12 = 0;
			this6._13 = 0;
			this6._20 = 0;
			this6._21 = 0;
			this6._22 = 0;
			this6._23 = 0;
			this6._30 = 0;
			this6._31 = 0;
			this6._32 = 0;
			this6._33 = 0;
			var dest5 = this6;
			dest5._00 = a._00;
			dest5._10 = a._10;
			dest5._20 = a._20;
			dest5._30 = a._30;
			dest5._01 = a._01;
			dest5._11 = a._11;
			dest5._21 = a._21;
			dest5._31 = a._31;
			dest5._02 = a._02;
			dest5._12 = a._12;
			dest5._22 = a._22;
			dest5._32 = a._32;
			dest5._03 = a._03;
			dest5._13 = a._13;
			dest5._23 = a._23;
			dest5._33 = a._33;
			_a1 = dest5;
			_b1 = b;
		} else if(dest4 == b) {
			_a1 = a;
			var this7 = new glm_Mat4Base();
			this7._00 = 0;
			this7._01 = 0;
			this7._02 = 0;
			this7._03 = 0;
			this7._10 = 0;
			this7._11 = 0;
			this7._12 = 0;
			this7._13 = 0;
			this7._20 = 0;
			this7._21 = 0;
			this7._22 = 0;
			this7._23 = 0;
			this7._30 = 0;
			this7._31 = 0;
			this7._32 = 0;
			this7._33 = 0;
			var dest6 = this7;
			dest6._00 = b._00;
			dest6._10 = b._10;
			dest6._20 = b._20;
			dest6._30 = b._30;
			dest6._01 = b._01;
			dest6._11 = b._11;
			dest6._21 = b._21;
			dest6._31 = b._31;
			dest6._02 = b._02;
			dest6._12 = b._12;
			dest6._22 = b._22;
			dest6._32 = b._32;
			dest6._03 = b._03;
			dest6._13 = b._13;
			dest6._23 = b._23;
			dest6._33 = b._33;
			_b1 = dest6;
		} else {
			_a1 = a;
			_b1 = b;
		}
		dest4._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
		dest4._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
		dest4._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
		dest4._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
		dest4._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
		dest4._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
		dest4._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
		dest4._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
		dest4._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
		dest4._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
		dest4._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
		dest4._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
		dest4._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
		dest4._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
		dest4._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
		dest4._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
		var invProj = dest4;
		var this8 = new glm_Vec4Base();
		this8.x = 0.0;
		this8.y = 0.0;
		this8.z = 0.0;
		this8.w = 1.0;
		var v = this8;
		var this9 = new glm_Vec4Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		this9.w = 0;
		var dest7 = this9;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest7.x = invProj._00 * x + invProj._10 * y + invProj._20 * z + invProj._30 * w;
		dest7.y = invProj._01 * x + invProj._11 * y + invProj._21 * z + invProj._31 * w;
		dest7.z = invProj._02 * x + invProj._12 * y + invProj._22 * z + invProj._32 * w;
		dest7.w = invProj._03 * x + invProj._13 * y + invProj._23 * z + invProj._33 * w;
		var center = dest7;
		var s = 1 / center.w;
		var this10 = new glm_Vec4Base();
		this10.x = 0;
		this10.y = 0;
		this10.z = 0;
		this10.w = 0;
		var dest8 = this10;
		dest8.x = center.x * s;
		dest8.y = center.y * s;
		dest8.z = center.z * s;
		dest8.w = center.w * s;
		center = dest8;
		var this11 = new glm_Vec4Base();
		this11.x = 1.0;
		this11.y = 1.0;
		this11.z = 1.0;
		this11.w = 1.0;
		var v1 = this11;
		var this12 = new glm_Vec4Base();
		this12.x = 0;
		this12.y = 0;
		this12.z = 0;
		this12.w = 0;
		var dest9 = this12;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest9.x = invProj._00 * x1 + invProj._10 * y1 + invProj._20 * z1 + invProj._30 * w1;
		dest9.y = invProj._01 * x1 + invProj._11 * y1 + invProj._21 * z1 + invProj._31 * w1;
		dest9.z = invProj._02 * x1 + invProj._12 * y1 + invProj._22 * z1 + invProj._32 * w1;
		dest9.w = invProj._03 * x1 + invProj._13 * y1 + invProj._23 * z1 + invProj._33 * w1;
		var max = dest9;
		var this13 = new glm_Vec4Base();
		this13.x = -1.0;
		this13.y = -1.0;
		this13.z = -1.0;
		this13.w = 1.0;
		var v2 = this13;
		var this14 = new glm_Vec4Base();
		this14.x = 0;
		this14.y = 0;
		this14.z = 0;
		this14.w = 0;
		var dest10 = this14;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest10.x = invProj._00 * x2 + invProj._10 * y2 + invProj._20 * z2 + invProj._30 * w2;
		dest10.y = invProj._01 * x2 + invProj._11 * y2 + invProj._21 * z2 + invProj._31 * w2;
		dest10.z = invProj._02 * x2 + invProj._12 * y2 + invProj._22 * z2 + invProj._32 * w2;
		dest10.w = invProj._03 * x2 + invProj._13 * y2 + invProj._23 * z2 + invProj._33 * w2;
		var min = dest10;
		var s1 = 1 / max.w;
		var this15 = new glm_Vec4Base();
		this15.x = 0;
		this15.y = 0;
		this15.z = 0;
		this15.w = 0;
		var dest11 = this15;
		dest11.x = max.x * s1;
		dest11.y = max.y * s1;
		dest11.z = max.z * s1;
		dest11.w = max.w * s1;
		max = dest11;
		var s2 = 1 / min.w;
		var this16 = new glm_Vec4Base();
		this16.x = 0;
		this16.y = 0;
		this16.z = 0;
		this16.w = 0;
		var dest12 = this16;
		dest12.x = min.x * s2;
		dest12.y = min.y * s2;
		dest12.z = min.z * s2;
		dest12.w = min.w * s2;
		min = dest12;
		var radius = Math.max((max.x - center.x) * (max.x - center.x) + (max.y - center.y) * (max.y - center.y) + (max.z - center.z) * (max.z - center.z) + (max.w - center.w) * (max.w - center.w),(min.x - center.x) * (min.x - center.x) + (min.y - center.y) * (min.y - center.y) + (min.z - center.z) * (min.z - center.z) + (min.w - center.w) * (min.w - center.w));
		var x3 = center.x;
		var y3 = center.y;
		var z3 = center.z;
		var this17 = new glm_Vec3Base();
		this17.x = x3;
		this17.y = y3;
		this17.z = z3;
		return { first : this17, second : radius};
	}
	,minSphere: function(pt,np,bnd,nb) {
	}
	,__class__: minko_component_DirectionalLight
});
var minko_component_FrustumDisplay = $hx_exports["minko"]["component"]["FrustumDisplay"] = function(projection) {
	minko_component_AbstractComponent.call(this);
	this._projection = projection;
	this._surface = null;
	this._addedSlot = null;
	this._material = minko_material_BasicMaterial.create();
	var tmp = this._material;
	var this1 = new glm_Vec4Base();
	this1.x = 1.0;
	this1.y = 1.0;
	this1.z = 1.0;
	this1.w = .1;
	tmp.set_diffuseColor(this1);
	this._material.set_priority(minko_render__$Priority_Priority_$Impl_$.LAST);
	this._material.set_depthMask(false);
	this._material.set_zSorted(true);
	this._material.set_blendingMode(16 | 512);
};
minko_component_FrustumDisplay.__name__ = true;
minko_component_FrustumDisplay.create = function(projection) {
	return new minko_component_FrustumDisplay(projection);
};
minko_component_FrustumDisplay.__super__ = minko_component_AbstractComponent;
minko_component_FrustumDisplay.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_material: function() {
		return this._material;
	}
	,targetAdded: function(target) {
		if(target.get_root().hasComponent(minko_component_SceneManager)) {
			this.addedHandler(null,target,null);
		} else {
			this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
		}
	}
	,targetRemoved: function(target) {
		this._addedSlot = null;
		if(target.existsComponent(this._surface)) {
			target.removeComponent(this._surface);
		}
		this._surface = null;
		if(target.existsComponent(this._lines)) {
			target.removeComponent(this._lines);
		}
		this._lines = null;
	}
	,addedHandler: function(node,target,added) {
		if(this._surface == null && target.get_root().hasComponent(minko_component_SceneManager)) {
			this.initialize();
		}
	}
	,initialize: function() {
		var vertices = this.getVertices();
		this.initializePlanes(vertices);
		this.initializeLines(vertices);
	}
	,initializePlanes: function(vertices) {
		var sceneManager = this.get_target().get_root().getComponent(minko_component_SceneManager);
		var assets = sceneManager.get_assets();
		var effect = assets.effect("effect/Basic.effect");
		if(effect == null) {
			var loader = minko_file_Loader.createbyLoader(assets.get_loader());
			loader.get_options().set_loadAsynchronously(false);
			loader.queue("effect/Basic.effect");
			loader.load();
			effect = assets.effect("effect/Basic.effect");
		}
		var geom = this.initializeFrustumGeometry(vertices,assets.get_context());
		this._surface = minko_component_Surface.create(geom,this._material,effect,"transparent");
		this._surface.set_layoutMask(2);
		this.get_target().addComponent(this._surface);
	}
	,initializeLines: function(vertices) {
		var sceneManager = this.get_target().get_root().getComponent(minko_component_SceneManager);
		var assets = sceneManager.get_assets();
		var effect = assets.effect("effect/Line.effect");
		if(effect == null) {
			var loader = minko_file_Loader.createbyLoader(assets.get_loader());
			loader.get_options().set_loadAsynchronously(false);
			loader.queue("effect/Line.effect");
			loader.load();
			effect = assets.effect("effect/Line.effect");
		}
		var lines = minko_geometry_LineGeometry.create(assets.get_context());
		lines.moveToVector3(vertices[0]);
		var _g = 1;
		while(_g < 4) {
			var i = _g++;
			lines.lineToVector3(vertices[i]);
		}
		lines.lineToVector3(vertices[0]);
		lines.moveToVector3(vertices[4]);
		var _g1 = 4;
		while(_g1 < 8) {
			var i1 = _g1++;
			lines.lineToVector3(vertices[i1]);
		}
		lines.lineToVector3(vertices[4]);
		var _g2 = 0;
		while(_g2 < 4) {
			var i2 = _g2++;
			lines.moveToVector3(vertices[i2]).lineToVector3(vertices[i2 + 4]);
		}
		lines.upload();
		this._lines = minko_component_Surface.create(lines,this._material,effect);
		this._lines.set_layoutMask(2);
		this.get_target().addComponent(this._lines);
	}
	,initializeFrustumGeometry: function(vertices,context) {
		var vb = minko_render_VertexBuffer.createbyVec3Data(context,vertices,vertices.length * 3);
		vb.addAttribute("position",3);
		vb.upload();
		var ib = minko_render_IndexBuffer.createbyData(context,[0,3,1,1,3,2,4,5,7,5,6,7,4,0,5,5,0,1,7,6,3,6,2,3,4,3,0,4,7,3,5,1,6,1,2,6]);
		ib.upload();
		var geom = minko_geometry_Geometry.createbyName();
		geom.addVertexBuffer(vb);
		geom.set_indices(ib);
		return geom;
	}
	,getVertices: function() {
		var src = this._projection;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var invProj = dest;
		var this2 = new glm_Vec4Base();
		this2.x = -1.0;
		this2.y = 1.0;
		this2.z = -1.0;
		this2.w = 1.0;
		var v = this2;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 0;
		var dest1 = this3;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest1.x = invProj._00 * x + invProj._10 * y + invProj._20 * z + invProj._30 * w;
		dest1.y = invProj._01 * x + invProj._11 * y + invProj._21 * z + invProj._31 * w;
		dest1.z = invProj._02 * x + invProj._12 * y + invProj._22 * z + invProj._32 * w;
		dest1.w = invProj._03 * x + invProj._13 * y + invProj._23 * z + invProj._33 * w;
		var this4 = new glm_Vec4Base();
		this4.x = 1.0;
		this4.y = 1.0;
		this4.z = -1.0;
		this4.w = 1.0;
		var v1 = this4;
		var this5 = new glm_Vec4Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		this5.w = 0;
		var dest2 = this5;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest2.x = invProj._00 * x1 + invProj._10 * y1 + invProj._20 * z1 + invProj._30 * w1;
		dest2.y = invProj._01 * x1 + invProj._11 * y1 + invProj._21 * z1 + invProj._31 * w1;
		dest2.z = invProj._02 * x1 + invProj._12 * y1 + invProj._22 * z1 + invProj._32 * w1;
		dest2.w = invProj._03 * x1 + invProj._13 * y1 + invProj._23 * z1 + invProj._33 * w1;
		var this6 = new glm_Vec4Base();
		this6.x = 1.0;
		this6.y = -1.0;
		this6.z = -1.0;
		this6.w = 1.0;
		var v2 = this6;
		var this7 = new glm_Vec4Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		this7.w = 0;
		var dest3 = this7;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest3.x = invProj._00 * x2 + invProj._10 * y2 + invProj._20 * z2 + invProj._30 * w2;
		dest3.y = invProj._01 * x2 + invProj._11 * y2 + invProj._21 * z2 + invProj._31 * w2;
		dest3.z = invProj._02 * x2 + invProj._12 * y2 + invProj._22 * z2 + invProj._32 * w2;
		dest3.w = invProj._03 * x2 + invProj._13 * y2 + invProj._23 * z2 + invProj._33 * w2;
		var this8 = new glm_Vec4Base();
		this8.x = -1.0;
		this8.y = -1.0;
		this8.z = -1.0;
		this8.w = 1.0;
		var v3 = this8;
		var this9 = new glm_Vec4Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		this9.w = 0;
		var dest4 = this9;
		var x3 = v3.x;
		var y3 = v3.y;
		var z3 = v3.z;
		var w3 = v3.w;
		dest4.x = invProj._00 * x3 + invProj._10 * y3 + invProj._20 * z3 + invProj._30 * w3;
		dest4.y = invProj._01 * x3 + invProj._11 * y3 + invProj._21 * z3 + invProj._31 * w3;
		dest4.z = invProj._02 * x3 + invProj._12 * y3 + invProj._22 * z3 + invProj._32 * w3;
		dest4.w = invProj._03 * x3 + invProj._13 * y3 + invProj._23 * z3 + invProj._33 * w3;
		var this10 = new glm_Vec4Base();
		this10.x = -1.0;
		this10.y = 1.0;
		this10.z = 1.0;
		this10.w = 1.0;
		var v4 = this10;
		var this11 = new glm_Vec4Base();
		this11.x = 0;
		this11.y = 0;
		this11.z = 0;
		this11.w = 0;
		var dest5 = this11;
		var x4 = v4.x;
		var y4 = v4.y;
		var z4 = v4.z;
		var w4 = v4.w;
		dest5.x = invProj._00 * x4 + invProj._10 * y4 + invProj._20 * z4 + invProj._30 * w4;
		dest5.y = invProj._01 * x4 + invProj._11 * y4 + invProj._21 * z4 + invProj._31 * w4;
		dest5.z = invProj._02 * x4 + invProj._12 * y4 + invProj._22 * z4 + invProj._32 * w4;
		dest5.w = invProj._03 * x4 + invProj._13 * y4 + invProj._23 * z4 + invProj._33 * w4;
		var this12 = new glm_Vec4Base();
		this12.x = 1.0;
		this12.y = 1.0;
		this12.z = 1.0;
		this12.w = 1.0;
		var v5 = this12;
		var this13 = new glm_Vec4Base();
		this13.x = 0;
		this13.y = 0;
		this13.z = 0;
		this13.w = 0;
		var dest6 = this13;
		var x5 = v5.x;
		var y5 = v5.y;
		var z5 = v5.z;
		var w5 = v5.w;
		dest6.x = invProj._00 * x5 + invProj._10 * y5 + invProj._20 * z5 + invProj._30 * w5;
		dest6.y = invProj._01 * x5 + invProj._11 * y5 + invProj._21 * z5 + invProj._31 * w5;
		dest6.z = invProj._02 * x5 + invProj._12 * y5 + invProj._22 * z5 + invProj._32 * w5;
		dest6.w = invProj._03 * x5 + invProj._13 * y5 + invProj._23 * z5 + invProj._33 * w5;
		var this14 = new glm_Vec4Base();
		this14.x = 1.0;
		this14.y = -1.0;
		this14.z = 1.0;
		this14.w = 1.0;
		var v6 = this14;
		var this15 = new glm_Vec4Base();
		this15.x = 0;
		this15.y = 0;
		this15.z = 0;
		this15.w = 0;
		var dest7 = this15;
		var x6 = v6.x;
		var y6 = v6.y;
		var z6 = v6.z;
		var w6 = v6.w;
		dest7.x = invProj._00 * x6 + invProj._10 * y6 + invProj._20 * z6 + invProj._30 * w6;
		dest7.y = invProj._01 * x6 + invProj._11 * y6 + invProj._21 * z6 + invProj._31 * w6;
		dest7.z = invProj._02 * x6 + invProj._12 * y6 + invProj._22 * z6 + invProj._32 * w6;
		dest7.w = invProj._03 * x6 + invProj._13 * y6 + invProj._23 * z6 + invProj._33 * w6;
		var this16 = new glm_Vec4Base();
		this16.x = -1.0;
		this16.y = -1.0;
		this16.z = 1.0;
		this16.w = 1.0;
		var v7 = this16;
		var this17 = new glm_Vec4Base();
		this17.x = 0;
		this17.y = 0;
		this17.z = 0;
		this17.w = 0;
		var dest8 = this17;
		var x7 = v7.x;
		var y7 = v7.y;
		var z7 = v7.z;
		var w7 = v7.w;
		dest8.x = invProj._00 * x7 + invProj._10 * y7 + invProj._20 * z7 + invProj._30 * w7;
		dest8.y = invProj._01 * x7 + invProj._11 * y7 + invProj._21 * z7 + invProj._31 * w7;
		dest8.z = invProj._02 * x7 + invProj._12 * y7 + invProj._22 * z7 + invProj._32 * w7;
		dest8.w = invProj._03 * x7 + invProj._13 * y7 + invProj._23 * z7 + invProj._33 * w7;
		var vv = [dest1,dest2,dest3,dest4,dest5,dest6,dest7,dest8];
		var vertices = [];
		var _g = 0;
		while(_g < vv.length) {
			var v8 = vv[_g];
			++_g;
			var s = 1 / v8.w;
			var this18 = new glm_Vec4Base();
			this18.x = 0;
			this18.y = 0;
			this18.z = 0;
			this18.w = 0;
			var dest9 = this18;
			dest9.x = v8.x * s;
			dest9.y = v8.y * s;
			dest9.z = v8.z * s;
			dest9.w = v8.w * s;
			var v9 = dest9;
			var x8 = v9.x;
			var y8 = v9.y;
			var z8 = v9.z;
			var this19 = new glm_Vec3Base();
			this19.x = x8;
			this19.y = y8;
			this19.z = z8;
			vertices.push(this19);
		}
		return vertices;
	}
	,__class__: minko_component_FrustumDisplay
});
var minko_component_ImageBasedLight = $hx_exports["minko"]["component"]["ImageBasedLight"] = function() {
	minko_component_AbstractLight.call(this,"imageBasedLight");
};
minko_component_ImageBasedLight.__name__ = true;
minko_component_ImageBasedLight.create = function() {
	var instance = new minko_component_ImageBasedLight();
	instance.set_brightness(1.0);
	return instance;
};
minko_component_ImageBasedLight.__super__ = minko_component_AbstractLight;
minko_component_ImageBasedLight.prototype = $extend(minko_component_AbstractLight.prototype,{
	get_diffuse: function() {
		return this.get_provider().get("diffuse");
	}
	,set_diffuse: function(value) {
		this.get_provider().set("diffuse",Math.min(Math.max(value,0.0),1.0));
		return value;
	}
	,get_specular: function() {
		return this.get_provider().get("specular");
	}
	,set_specular: function(value) {
		this.get_provider().set("specular",Math.min(Math.max(value,0.0),1.0));
		return value;
	}
	,get_irradianceMap: function() {
		return this.get_provider().get("irradianceMap");
	}
	,set_irradianceMap: function(value) {
		this.get_provider().set("irradianceMap",value);
		return value;
	}
	,get_radianceMap: function() {
		return this.get_provider().get("radianceMap");
	}
	,set_radianceMap: function(value) {
		this.get_provider().set("radianceMap",value);
		return value;
	}
	,get_brightness: function() {
		return this.get_provider().get("brightness");
	}
	,set_brightness: function(value) {
		this.get_provider().set("brightness",value);
		return value;
	}
	,get_orientation: function() {
		return this.get_provider().get("orientation");
	}
	,set_orientation: function(value) {
		this.get_provider().set("orientation",value);
		return value;
	}
	,__class__: minko_component_ImageBasedLight
});
var minko_component_PriorityComparator = function() { };
minko_component_PriorityComparator.__name__ = true;
minko_component_PriorityComparator.functorMethod = function(left,right) {
	return Math.floor(left.get_priority() - right.get_priority());
};
var minko_component_Job = $hx_exports["minko"]["component"]["Job"] = function() {
	this._jobManager = new minko_component_JobManager(24);
	this._running = false;
	this._priorityChanged = new minko_signal_Signal();
};
minko_component_Job.__name__ = true;
minko_component_Job.prototype = {
	get_complete: function() {
		return 0;
	}
	,beforeFirstStep: function() {
	}
	,step: function() {
	}
	,get_priority: function() {
		return this._priority;
	}
	,set_priority: function(p) {
		this._priority = p;
		return p;
	}
	,afterLastStep: function() {
	}
	,get_running: function() {
		return this._running;
	}
	,set_running: function(value) {
		this._running = value;
		return value;
	}
	,get_jobManager: function() {
		return this._jobManager;
	}
	,set_jobManager: function(v) {
		this._jobManager = v;
		return v;
	}
	,get_priorityChanged: function() {
		return this._priorityChanged;
	}
	,__class__: minko_component_Job
};
var minko_component_JobManager = $hx_exports["minko"]["component"]["JobManager"] = function(loadingFramerate) {
	minko_component_AbstractScript.call(this);
	this._loadingFramerate = loadingFramerate;
	this._sortingNeeded = false;
	this._frameTime = 1.0 / loadingFramerate;
};
minko_component_JobManager.__name__ = true;
minko_component_JobManager.create = function(loadingFramerate) {
	return new minko_component_JobManager(loadingFramerate);
};
minko_component_JobManager.__super__ = minko_component_AbstractScript;
minko_component_JobManager.prototype = $extend(minko_component_AbstractScript.prototype,{
	pushJob: function(job) {
		var _gthis = this;
		this._jobPriorityChangedSlots.set(job,job.get_priorityChanged().connect(function(priority) {
			_gthis._sortingNeeded = true;
		}));
		job.set_jobManager(this);
		this.insertJob(job);
		return this;
	}
	,update: function(target) {
		this._frameStartTime = new Date().getTime();
	}
	,end: function(target) {
		if(this._jobs.length == 0) {
			return;
		}
		var consumeTime = (new Date().getTime() - this._frameStartTime) / 1000;
		var currentJob = null;
		var numStepPerformed = 0;
		while(consumeTime < this._frameTime || numStepPerformed < 1) {
			if(this._sortingNeeded) {
				this._sortingNeeded = false;
				currentJob = null;
				this._jobs.sort(minko_component_PriorityComparator.functorMethod);
			}
			if(!this.hasPendingJob()) {
				break;
			}
			if(currentJob == null) {
				currentJob = this._jobs[this._jobs.length - 1];
				if(!currentJob.get_running()) {
					currentJob.set_running(true);
					currentJob.beforeFirstStep();
				}
			}
			var currentJobComplete = currentJob.get_complete();
			if(currentJobComplete == 0) {
				currentJob.step();
				currentJobComplete |= currentJob.get_complete();
			}
			if(currentJobComplete == 1) {
				this._jobs.pop();
				currentJob.afterLastStep();
				this._jobPriorityChangedSlots.remove(currentJob);
				currentJob = null;
			}
			++numStepPerformed;
			consumeTime = (new Date().getTime() - this._frameStartTime) / 1000;
		}
	}
	,insertJob: function(job) {
		this._jobs.push(job);
		this._sortingNeeded = true;
	}
	,hasPendingJob: function() {
		if(this._jobs.length > 0) {
			return this._jobs[this._jobs.length - 1].get_priority() > 0.0;
		} else {
			return false;
		}
	}
	,__class__: minko_component_JobManager
});
var minko_component_MasterAnimation = $hx_exports["minko"]["component"]["MasterAnimation"] = function(isLooping) {
	minko_component_AbstractAnimation.call(this,isLooping);
	this._animations = [];
};
minko_component_MasterAnimation.__name__ = true;
minko_component_MasterAnimation.create = function(isLooping) {
	if(isLooping == null) {
		isLooping = true;
	}
	var ptr = new minko_component_MasterAnimation(isLooping);
	return ptr;
};
minko_component_MasterAnimation.__super__ = minko_component_AbstractAnimation;
minko_component_MasterAnimation.prototype = $extend(minko_component_AbstractAnimation.prototype,{
	seekLabel: function(labelName) {
		this.seek(this.labelTimebyName(labelName));
		return;
	}
	,play: function() {
		minko_component_AbstractAnimation.prototype.play.call(this);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.play();
		}
	}
	,stop: function() {
		minko_component_AbstractAnimation.prototype.stop.call(this);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.stop();
		}
	}
	,seek: function(time) {
		minko_component_AbstractAnimation.prototype.seek.call(this,time);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.seek(time);
		}
	}
	,clone: function(option) {
		var anim = new minko_component_MasterAnimation(this.get_isLooping());
		anim.copyFrom(this,option);
		return anim;
	}
	,addLabel: function(name,time) {
		minko_component_AbstractAnimation.prototype.addLabel.call(this,name,time);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.addLabel(name,time);
		}
	}
	,changeLabel: function(name,newName) {
		minko_component_AbstractAnimation.prototype.changeLabel.call(this,name,newName);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.changeLabel(name,newName);
		}
	}
	,setTimeForLabel: function(name,newTime) {
		minko_component_AbstractAnimation.prototype.setTimeForLabel.call(this,name,newTime);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.setTimeForLabel(name,newTime);
		}
	}
	,removeLabel: function(name) {
		minko_component_AbstractAnimation.prototype.removeLabel.call(this,name);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.removeLabel(name);
		}
	}
	,setPlaybackWindow: function(beginLabelName,endLabelName,forceRestart) {
		if(forceRestart == null) {
			forceRestart = false;
		}
		minko_component_AbstractAnimation.prototype.setPlaybackWindow.call(this,beginLabelName,endLabelName,forceRestart);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.setPlaybackWindow(beginLabelName,endLabelName,forceRestart);
		}
	}
	,resetPlaybackWindow: function() {
		minko_component_AbstractAnimation.prototype.resetPlaybackWindow.call(this);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.resetPlaybackWindow();
		}
	}
	,initAnimations: function() {
		var target = this.get_target();
		var targetParent = target.get_parent();
		var rootNode = targetParent != null ? targetParent : target;
		var descendants = minko_scene_NodeSet.createbyNode(rootNode).descendants(true);
		var nodes = descendants.get_nodes();
		var _g = 0;
		while(_g < nodes.length) {
			var descendant = nodes[_g];
			++_g;
			var _g1 = 0;
			var _g2 = descendant.getComponents(minko_component_Skinning);
			while(_g1 < _g2.length) {
				var skinning = _g2[_g1];
				++_g1;
				this._animations.push(skinning);
			}
			var _g11 = 0;
			var _g21 = descendant.getComponents(minko_component_Animation);
			while(_g11 < _g21.length) {
				var animation = _g21[_g11];
				++_g11;
				this._animations.push(animation);
			}
		}
		this._maxTime = 0;
		var _g3 = 0;
		var _g12 = this._animations;
		while(_g3 < _g12.length) {
			var animation1 = _g12[_g3];
			++_g3;
			this._maxTime = Math.floor(Math.max(this._maxTime,animation1.get_maxTime()));
		}
		this.setPlaybackWindow(0,this._maxTime);
		this.seek(0);
		this.play();
	}
	,rebindDependencies: function(componentsMap,nodeMap,option) {
		var newAnimations = [];
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			var it = componentsMap.h[animation.__id__];
			if(it != null) {
				newAnimations.push(animation);
			}
		}
		this._animations = newAnimations;
	}
	,set_timeFunction: function(func) {
		minko_component_AbstractAnimation.prototype.set_timeFunction.call(this,func);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.set_timeFunction(func);
		}
		return func;
	}
	,set_isReversed: function(value) {
		minko_component_AbstractAnimation.prototype.set_isReversed.call(this,value);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.set_isReversed(value);
		}
		return value;
	}
	,targetAdded: function(target) {
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.removedHandler));
		this._target = target;
		this.initAnimations();
	}
	,targetRemoved: function(target) {
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			var anim = animation;
			if(anim != null) {
				anim._currentTime = this._currentTime;
				anim.update();
			}
		}
	}
	,__class__: minko_component_MasterAnimation
});
var minko_component_Metadata = $hx_exports["minko"]["component"]["Metadata"] = function(__data) {
	minko_component_AbstractComponent.call(this);
	this._data = __data;
};
minko_component_Metadata.__name__ = true;
minko_component_Metadata.create = function(data) {
	return new minko_component_Metadata(data);
};
minko_component_Metadata.__super__ = minko_component_AbstractComponent;
minko_component_Metadata.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_data: function() {
		return this._data;
	}
	,get: function(propertyName) {
		var _this = this._data;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	,set: function(propertyName,value) {
		var _this = this._data;
		if(__map_reserved[propertyName] != null) {
			_this.setReserved(propertyName,value);
		} else {
			_this.h[propertyName] = value;
		}
		return;
	}
	,has: function(propertyName) {
		var _this = this._data;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,__class__: minko_component_Metadata
});
var minko_component_MouseManager = $hx_exports["minko"]["component"]["MouseManager"] = function(mouse) {
	minko_component_AbstractComponent.call(this);
	this._mouse = mouse;
	this._ray = minko_math_Ray.create();
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this._previousRayOrigin = this1;
	this._lastItemUnderCursor = null;
};
minko_component_MouseManager.__name__ = true;
minko_component_MouseManager.create = function(mouse) {
	return new minko_component_MouseManager(mouse);
};
minko_component_MouseManager.__super__ = minko_component_AbstractComponent;
minko_component_MouseManager.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_mouse: function() {
		return this._mouse;
	}
	,pick: function(ray) {
		var hits = [];
		var descendants = minko_scene_NodeSet.createbyNode(this.get_target().get_root()).descendants(true).where(function(node) {
			return node.hasComponent(minko_component_BoundingBox);
		});
		var distance = new haxe_ds_ObjectMap();
		var localRay = minko_math_Ray.create();
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			var distance1 = 0.0;
			var boundingBox = descendant.getComponent(minko_component_BoundingBox);
			if(boundingBox.get_box().castRay(ray,distance1)) {
				hits.push(new minko_Tuple(descendant,distance1));
			}
		}
		hits.sort(function(a,b) {
			return Math.floor(a.second - b.second);
		});
		if(hits.length > 0) {
			var node1 = hits[0].first;
			var mp = node1.getComponent(minko_component_MousePicking);
			if(this._previousRayOrigin != ray.get_origin()) {
				if(mp != null) {
					mp.get_move().execute(mp,hits,ray);
				}
				this._previousRayOrigin = ray.get_origin();
			}
		}
	}
	,targetAdded: function(target) {
		var _gthis = this;
		if(this._mouse == null) {
			return;
		}
		this._mouseMoveSlot = this._mouse.get_move().connect(function(m,dx,dy) {
			var cam = target.getComponent(minko_component_PerspectiveCamera);
			if(cam != null) {
				var tmp = m.get_normalizedX();
				var tmp1 = m.get_normalizedY();
				var tmp2 = _gthis._ray = cam.unproject(tmp,tmp1);
				_gthis.pick(tmp2);
			}
		});
		this._mouseLeftButtonDownSlot = this._mouse.get_leftButtonDown().connect(function(m1) {
		});
	}
	,targetRemoved: function(target) {
		this._mouseMoveSlot = null;
		this._mouseLeftButtonDownSlot = null;
	}
	,initialize: function() {
	}
	,__class__: minko_component_MouseManager
});
var minko_component_MousePicking = $hx_exports["minko"]["component"]["MousePicking"] = function() {
	minko_component_AbstractComponent.call(this);
	this._move = new minko_signal_Signal3();
	this._over = new minko_signal_Signal3();
	this._out = new minko_signal_Signal3();
	this._rollOver = new minko_signal_Signal3();
	this._rollOut = new minko_signal_Signal3();
	this._leftButtonUp = new minko_signal_Signal3();
	this._leftButtonDown = new minko_signal_Signal3();
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this._previousRayOrigin = this1;
};
minko_component_MousePicking.__name__ = true;
minko_component_MousePicking.create = function() {
	var mp = new minko_component_MousePicking();
	mp.initialize();
	return mp;
};
minko_component_MousePicking.__super__ = minko_component_AbstractComponent;
minko_component_MousePicking.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_move: function() {
		return this._move;
	}
	,get_over: function() {
		return this._over;
	}
	,pick: function(ray) {
		var _gthis = this;
		var hits = [];
		var descendants = minko_scene_NodeSet.createbyNode(this.get_target()).descendants(true).where(function(node) {
			if((node.get_layout() & _gthis.get_layoutMask()) != 0) {
				return node.hasComponent(minko_component_BoundingBox);
			} else {
				return false;
			}
		});
		var distance = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			var boxs = descendant.getComponents(minko_component_BoundingBox);
			var _g2 = 0;
			while(_g2 < boxs.length) {
				var box = boxs[_g2];
				++_g2;
				var distance1 = 0.0;
				if(box.get_shape().castRay(ray,distance1)) {
					hits.push(new minko_Tuple(descendant,distance1));
				}
			}
		}
		hits.sort(function(a,b) {
			return Math.floor(a.second - b.second);
		});
		if(hits.length > 0) {
			if(this._previousRayOrigin == ray.get_origin()) {
				this._move.execute(this,hits,ray);
				this._previousRayOrigin = ray.get_origin();
			}
			this._over.execute(this,hits,ray);
		}
	}
	,initialize: function() {
	}
	,__class__: minko_component_MousePicking
});
var minko_component_PerspectiveCamera = $hx_exports["minko"]["component"]["PerspectiveCamera"] = function(fov,aspectRatio,zNear,zFar,postPerspective) {
	minko_component_AbstractComponent.call(this);
	this._data = minko_data_Provider.create();
	this._fov = fov;
	this._aspectRatio = aspectRatio;
	this._zNear = zNear;
	this._zFar = zFar;
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this._view = dest;
	var this2 = new glm_Mat4Base();
	this2._00 = 0;
	this2._01 = 0;
	this2._02 = 0;
	this2._03 = 0;
	this2._10 = 0;
	this2._11 = 0;
	this2._12 = 0;
	this2._13 = 0;
	this2._20 = 0;
	this2._21 = 0;
	this2._22 = 0;
	this2._23 = 0;
	this2._30 = 0;
	this2._31 = 0;
	this2._32 = 0;
	this2._33 = 0;
	var dest1 = this2;
	var f = 1 / Math.tan(fov / 2);
	var nf = 1 / (zNear - zFar);
	dest1._00 = f / aspectRatio;
	dest1._01 = 0;
	dest1._02 = 0;
	dest1._03 = 0;
	dest1._10 = 0;
	dest1._11 = f;
	dest1._12 = 0;
	dest1._13 = 0;
	dest1._20 = 0;
	dest1._21 = 0;
	dest1._22 = (zFar + zNear) * nf;
	dest1._23 = -1;
	dest1._30 = 0;
	dest1._31 = 0;
	dest1._32 = 2 * zFar * zNear * nf;
	dest1._33 = 0;
	this._projection = dest1;
	this._viewProjection = this._projection;
	var this3 = new glm_Vec3Base();
	this3.x = 0;
	this3.y = 0;
	this3.z = 0;
	this._position = this3;
	var this4 = new glm_Vec3Base();
	this4.x = 0.0;
	this4.y = 0.0;
	this4.z = 1.0;
	this._direction = this4;
	this._postProjection = postPerspective;
	this._data.set("eyeDirection",this._direction).set("eyePosition",this._position).set("viewMatrix",this._view).set("projectionMatrix",this._projection).set("worldToScreenMatrix",this._viewProjection).set("fov",this._fov).set("aspectRatio",this._aspectRatio).set("zNear",this._zNear).set("zFar",this._zFar);
};
minko_component_PerspectiveCamera.__name__ = true;
minko_component_PerspectiveCamera.create = function(aspectRatio,fov,zNear,zFar,postProjection) {
	if(zFar == null) {
		zFar = 1000.0;
	}
	if(zNear == null) {
		zNear = 0.1;
	}
	if(fov == null) {
		fov = .785;
	}
	var tmp;
	if(postProjection == null) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		tmp = dest;
	} else {
		tmp = postProjection;
	}
	return new minko_component_PerspectiveCamera(fov,aspectRatio,zNear,zFar,tmp);
};
minko_component_PerspectiveCamera.projectWorldPosition = function(worldPosition,viewportWidth,viewportHeight,viewMatrix,viewProjectionMatrix) {
	var width = viewportWidth;
	var height = viewportHeight;
	var x = worldPosition.x;
	var y = worldPosition.y;
	var z = worldPosition.z;
	var this1 = new glm_Vec4Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	this1.w = 1.0;
	var pos = this1;
	var this2 = new glm_Vec4Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	this2.w = 0;
	var dest = this2;
	var x1 = pos.x;
	var y1 = pos.y;
	var z1 = pos.z;
	var w = pos.w;
	dest.x = viewProjectionMatrix._00 * x1 + viewProjectionMatrix._10 * y1 + viewProjectionMatrix._20 * z1 + viewProjectionMatrix._30 * w;
	dest.y = viewProjectionMatrix._01 * x1 + viewProjectionMatrix._11 * y1 + viewProjectionMatrix._21 * z1 + viewProjectionMatrix._31 * w;
	dest.z = viewProjectionMatrix._02 * x1 + viewProjectionMatrix._12 * y1 + viewProjectionMatrix._22 * z1 + viewProjectionMatrix._32 * w;
	dest.w = viewProjectionMatrix._03 * x1 + viewProjectionMatrix._13 * y1 + viewProjectionMatrix._23 * z1 + viewProjectionMatrix._33 * w;
	var vector = dest;
	var s = 1 / vector.w;
	var this3 = new glm_Vec4Base();
	this3.x = 0;
	this3.y = 0;
	this3.z = 0;
	this3.w = 0;
	var dest1 = this3;
	dest1.x = vector.x * s;
	dest1.y = vector.y * s;
	dest1.z = vector.z * s;
	dest1.w = vector.w * s;
	vector = dest1;
	var this4 = new glm_Vec4Base();
	this4.x = 0;
	this4.y = 0;
	this4.z = 0;
	this4.w = 0;
	var dest2 = this4;
	var x2 = pos.x;
	var y2 = pos.y;
	var z2 = pos.z;
	var w1 = pos.w;
	dest2.x = viewMatrix._00 * x2 + viewMatrix._10 * y2 + viewMatrix._20 * z2 + viewMatrix._30 * w1;
	dest2.y = viewMatrix._01 * x2 + viewMatrix._11 * y2 + viewMatrix._21 * z2 + viewMatrix._31 * w1;
	dest2.z = viewMatrix._02 * x2 + viewMatrix._12 * y2 + viewMatrix._22 * z2 + viewMatrix._32 * w1;
	dest2.w = viewMatrix._03 * x2 + viewMatrix._13 * y2 + viewMatrix._23 * z2 + viewMatrix._33 * w1;
	pos = dest2;
	var x3 = width * (vector.x + 1.0) * .5;
	var y3 = height * (1.0 - (vector.y + 1.0) * .5);
	var z3 = -pos.z;
	var this5 = new glm_Vec3Base();
	this5.x = x3;
	this5.y = y3;
	this5.z = z3;
	return this5;
};
minko_component_PerspectiveCamera.__super__ = minko_component_AbstractComponent;
minko_component_PerspectiveCamera.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_fieldOfView: function() {
		return this._fov;
	}
	,set_fieldOfView: function(fov) {
		if(fov != this._fov) {
			this._fov = fov;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return fov;
	}
	,get_aspectRatio: function() {
		return this._aspectRatio;
	}
	,set_aspectRatio: function(v) {
		if(v != this._aspectRatio) {
			this._aspectRatio = v;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return v;
	}
	,get_zNear: function() {
		return this._zNear;
	}
	,set_zNear: function(v) {
		if(v != this._zNear) {
			this._zNear = v;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return v;
	}
	,get_zFar: function() {
		return this._zFar;
	}
	,set_zFar: function(v) {
		if(v != this._zFar) {
			this._zFar = v;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return v;
	}
	,get_data: function() {
		return this._data;
	}
	,get_viewMatrix: function() {
		return this._view;
	}
	,get_projectionMatrix: function() {
		return this._projection;
	}
	,get_viewProjectionMatrix: function() {
		return this._viewProjection;
	}
	,updateProjection: function(fov,aspectRatio,zNear,zFar) {
		this._fov = fov;
		this._aspectRatio = aspectRatio;
		this._zNear = zNear;
		this._zFar = zFar;
		var a = this._postProjection;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var f = 1 / Math.tan(fov / 2);
		var nf = 1 / (zNear - zFar);
		dest._00 = f / aspectRatio;
		dest._01 = 0;
		dest._02 = 0;
		dest._03 = 0;
		dest._10 = 0;
		dest._11 = f;
		dest._12 = 0;
		dest._13 = 0;
		dest._20 = 0;
		dest._21 = 0;
		dest._22 = (zFar + zNear) * nf;
		dest._23 = -1;
		dest._30 = 0;
		dest._31 = 0;
		dest._32 = 2 * zFar * zNear * nf;
		dest._33 = 0;
		var b = dest;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		var _a;
		var _b;
		if(dest1 == a) {
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = a._00;
			dest2._10 = a._10;
			dest2._20 = a._20;
			dest2._30 = a._30;
			dest2._01 = a._01;
			dest2._11 = a._11;
			dest2._21 = a._21;
			dest2._31 = a._31;
			dest2._02 = a._02;
			dest2._12 = a._12;
			dest2._22 = a._22;
			dest2._32 = a._32;
			dest2._03 = a._03;
			dest2._13 = a._13;
			dest2._23 = a._23;
			dest2._33 = a._33;
			_a = dest2;
			_b = b;
		} else if(dest1 == b) {
			_a = a;
			var this4 = new glm_Mat4Base();
			this4._00 = 0;
			this4._01 = 0;
			this4._02 = 0;
			this4._03 = 0;
			this4._10 = 0;
			this4._11 = 0;
			this4._12 = 0;
			this4._13 = 0;
			this4._20 = 0;
			this4._21 = 0;
			this4._22 = 0;
			this4._23 = 0;
			this4._30 = 0;
			this4._31 = 0;
			this4._32 = 0;
			this4._33 = 0;
			var dest3 = this4;
			dest3._00 = b._00;
			dest3._10 = b._10;
			dest3._20 = b._20;
			dest3._30 = b._30;
			dest3._01 = b._01;
			dest3._11 = b._11;
			dest3._21 = b._21;
			dest3._31 = b._31;
			dest3._02 = b._02;
			dest3._12 = b._12;
			dest3._22 = b._22;
			dest3._32 = b._32;
			dest3._03 = b._03;
			dest3._13 = b._13;
			dest3._23 = b._23;
			dest3._33 = b._33;
			_b = dest3;
		} else {
			_a = a;
			_b = b;
		}
		dest1._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest1._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest1._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest1._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest1._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest1._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest1._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest1._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest1._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest1._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest1._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest1._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest1._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest1._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest1._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest1._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		this._projection = dest1;
		var a1 = this._projection;
		var b1 = this._view;
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest4 = this5;
		var _a1;
		var _b1;
		if(dest4 == a1) {
			var this6 = new glm_Mat4Base();
			this6._00 = 0;
			this6._01 = 0;
			this6._02 = 0;
			this6._03 = 0;
			this6._10 = 0;
			this6._11 = 0;
			this6._12 = 0;
			this6._13 = 0;
			this6._20 = 0;
			this6._21 = 0;
			this6._22 = 0;
			this6._23 = 0;
			this6._30 = 0;
			this6._31 = 0;
			this6._32 = 0;
			this6._33 = 0;
			var dest5 = this6;
			dest5._00 = a1._00;
			dest5._10 = a1._10;
			dest5._20 = a1._20;
			dest5._30 = a1._30;
			dest5._01 = a1._01;
			dest5._11 = a1._11;
			dest5._21 = a1._21;
			dest5._31 = a1._31;
			dest5._02 = a1._02;
			dest5._12 = a1._12;
			dest5._22 = a1._22;
			dest5._32 = a1._32;
			dest5._03 = a1._03;
			dest5._13 = a1._13;
			dest5._23 = a1._23;
			dest5._33 = a1._33;
			_a1 = dest5;
			_b1 = b1;
		} else if(dest4 == b1) {
			_a1 = a1;
			var this7 = new glm_Mat4Base();
			this7._00 = 0;
			this7._01 = 0;
			this7._02 = 0;
			this7._03 = 0;
			this7._10 = 0;
			this7._11 = 0;
			this7._12 = 0;
			this7._13 = 0;
			this7._20 = 0;
			this7._21 = 0;
			this7._22 = 0;
			this7._23 = 0;
			this7._30 = 0;
			this7._31 = 0;
			this7._32 = 0;
			this7._33 = 0;
			var dest6 = this7;
			dest6._00 = b1._00;
			dest6._10 = b1._10;
			dest6._20 = b1._20;
			dest6._30 = b1._30;
			dest6._01 = b1._01;
			dest6._11 = b1._11;
			dest6._21 = b1._21;
			dest6._31 = b1._31;
			dest6._02 = b1._02;
			dest6._12 = b1._12;
			dest6._22 = b1._22;
			dest6._32 = b1._32;
			dest6._03 = b1._03;
			dest6._13 = b1._13;
			dest6._23 = b1._23;
			dest6._33 = b1._33;
			_b1 = dest6;
		} else {
			_a1 = a1;
			_b1 = b1;
		}
		dest4._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
		dest4._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
		dest4._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
		dest4._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
		dest4._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
		dest4._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
		dest4._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
		dest4._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
		dest4._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
		dest4._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
		dest4._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
		dest4._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
		dest4._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
		dest4._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
		dest4._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
		dest4._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
		this._viewProjection = dest4;
		this._data.set("fov",this._fov).set("aspectRatio",this._aspectRatio).set("zNear",this._zNear).set("zFar",this._zFar).set("projectionMatrix",this._projection).set("worldToScreenMatrix",this._viewProjection);
	}
	,unproject: function(x,y) {
		var fovDiv2 = this._fov * .5;
		var dx = Math.tan(fovDiv2) * x * this._aspectRatio;
		var dy = -Math.tan(fovDiv2) * y;
		var x1 = dx * this._zNear;
		var y1 = dy * this._zNear;
		var z = -this._zNear;
		var this1 = new glm_Vec3Base();
		this1.x = x1;
		this1.y = y1;
		this1.z = z;
		var origin = this1;
		var x2 = dx * this._zNear;
		var y2 = dy * this._zNear;
		var z1 = -this._zNear;
		var this2 = new glm_Vec3Base();
		this2.x = x2;
		this2.y = y2;
		this2.z = z1;
		var direction = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var dest = this3;
		var length = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest.x = direction.x * mult;
		dest.y = direction.y * mult;
		dest.z = direction.z * mult;
		direction = dest;
		var t = this.get_target().getComponent(minko_component_Transform);
		if(t != null) {
			var tModelToWorld = t.get_modelToWorldMatrix();
			var x3 = origin.x;
			var y3 = origin.y;
			var z2 = origin.z;
			var this4 = new glm_Vec4Base();
			this4.x = x3;
			this4.y = y3;
			this4.z = z2;
			this4.w = 1;
			var v = this4;
			var this5 = new glm_Vec4Base();
			this5.x = 0;
			this5.y = 0;
			this5.z = 0;
			this5.w = 0;
			var dest1 = this5;
			var x4 = v.x;
			var y4 = v.y;
			var z3 = v.z;
			var w = v.w;
			dest1.x = tModelToWorld._00 * x4 + tModelToWorld._10 * y4 + tModelToWorld._20 * z3 + tModelToWorld._30 * w;
			dest1.y = tModelToWorld._01 * x4 + tModelToWorld._11 * y4 + tModelToWorld._21 * z3 + tModelToWorld._31 * w;
			dest1.z = tModelToWorld._02 * x4 + tModelToWorld._12 * y4 + tModelToWorld._22 * z3 + tModelToWorld._32 * w;
			dest1.w = tModelToWorld._03 * x4 + tModelToWorld._13 * y4 + tModelToWorld._23 * z3 + tModelToWorld._33 * w;
			var tmp = dest1;
			var x5 = tmp.x;
			var y5 = tmp.y;
			var z4 = tmp.z;
			var this6 = new glm_Vec3Base();
			this6.x = x5;
			this6.y = y5;
			this6.z = z4;
			origin = this6;
			var _r0c0 = tModelToWorld._00;
			var _r0c1 = tModelToWorld._10;
			var _r0c2 = tModelToWorld._20;
			var _r1c0 = tModelToWorld._01;
			var _r1c1 = tModelToWorld._11;
			var _r1c2 = tModelToWorld._21;
			var _r2c0 = tModelToWorld._02;
			var _r2c1 = tModelToWorld._22;
			var _r2c2 = tModelToWorld._22;
			var this7 = new glm_Mat3Base();
			this7._00 = _r0c0;
			this7._01 = _r1c0;
			this7._02 = _r2c0;
			this7._10 = _r0c1;
			this7._11 = _r1c1;
			this7._12 = _r2c1;
			this7._20 = _r0c2;
			this7._21 = _r1c2;
			this7._22 = _r2c2;
			var m = this7;
			var this8 = new glm_Vec3Base();
			this8.x = 0;
			this8.y = 0;
			this8.z = 0;
			var dest2 = this8;
			var x6 = direction.x;
			var y6 = direction.y;
			var z5 = direction.z;
			dest2.x = m._00 * x6 + m._10 * y6 + m._20 * z5;
			dest2.y = m._01 * x6 + m._11 * y6 + m._21 * z5;
			dest2.z = m._02 * x6 + m._12 * y6 + m._22 * z5;
			direction = dest2;
			var this9 = new glm_Vec3Base();
			this9.x = 0;
			this9.y = 0;
			this9.z = 0;
			var dest3 = this9;
			var length1 = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
			var mult1 = 0;
			if(length1 >= glm_GLM.EPSILON) {
				mult1 = 1 / length1;
			}
			dest3.x = direction.x * mult1;
			dest3.y = direction.y * mult1;
			dest3.z = direction.z * mult1;
			direction = dest3;
		}
		return minko_math_Ray.createbyVector3(origin,direction);
	}
	,project: function(worldPosition) {
		var sm = this.get_target().get_root().getComponent(minko_component_SceneManager);
		var context = sm.get_assets().get_context();
		return minko_component_PerspectiveCamera.projectWorldPosition(worldPosition,context.get_viewportWidth(),context.get_viewportHeight(),this._view,this._viewProjection);
	}
	,targetAdded: function(target) {
		var _gthis = this;
		target.get_data().addProvider(this._data);
		this._modelToWorldChangedSlot = target.get_data().getPropertyChanged("modelToWorldMatrix").connect(function(s,p,s1) {
			_gthis.localToWorldChangedHandler(s);
		});
		if(target.get_data().hasProperty("modelToWorldMatrix")) {
			this.updateMatrices(target.get_data().get("modelToWorldMatrix"));
		}
	}
	,targetRemoved: function(target) {
		target.get_data().removeProvider(this._data);
	}
	,localToWorldChangedHandler: function(data) {
		this.updateMatrices(data.get("modelToWorldMatrix"));
	}
	,updateMatrices: function(modelToWorldMatrix) {
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 0.0;
		this1.w = 1.0;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = modelToWorldMatrix._00 * x + modelToWorldMatrix._10 * y + modelToWorldMatrix._20 * z + modelToWorldMatrix._30 * w;
		dest.y = modelToWorldMatrix._01 * x + modelToWorldMatrix._11 * y + modelToWorldMatrix._21 * z + modelToWorldMatrix._31 * w;
		dest.z = modelToWorldMatrix._02 * x + modelToWorldMatrix._12 * y + modelToWorldMatrix._22 * z + modelToWorldMatrix._32 * w;
		dest.w = modelToWorldMatrix._03 * x + modelToWorldMatrix._13 * y + modelToWorldMatrix._23 * z + modelToWorldMatrix._33 * w;
		var tmp = dest;
		var x1 = tmp.x;
		var y1 = tmp.y;
		var z1 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x1;
		this3.y = y1;
		this3.z = z1;
		this._position = this3;
		var _r0c0 = modelToWorldMatrix._00;
		var _r0c1 = modelToWorldMatrix._10;
		var _r0c2 = modelToWorldMatrix._20;
		var _r1c0 = modelToWorldMatrix._01;
		var _r1c1 = modelToWorldMatrix._11;
		var _r1c2 = modelToWorldMatrix._21;
		var _r2c0 = modelToWorldMatrix._02;
		var _r2c1 = modelToWorldMatrix._22;
		var _r2c2 = modelToWorldMatrix._22;
		var this4 = new glm_Mat3Base();
		this4._00 = _r0c0;
		this4._01 = _r1c0;
		this4._02 = _r2c0;
		this4._10 = _r0c1;
		this4._11 = _r1c1;
		this4._12 = _r2c1;
		this4._20 = _r0c2;
		this4._21 = _r1c2;
		this4._22 = _r2c2;
		var m = this4;
		var this5 = new glm_Vec3Base();
		this5.x = 0.0;
		this5.y = 0.0;
		this5.z = 1.0;
		var v1 = this5;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		var dest1 = this6;
		var x2 = v1.x;
		var y2 = v1.y;
		var z2 = v1.z;
		dest1.x = m._00 * x2 + m._10 * y2 + m._20 * z2;
		dest1.y = m._01 * x2 + m._11 * y2 + m._21 * z2;
		dest1.z = m._02 * x2 + m._12 * y2 + m._22 * z2;
		this._direction = dest1;
		var v2 = this._direction;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var dest2 = this7;
		var length = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest2.x = v2.x * mult;
		dest2.y = v2.y * mult;
		dest2.z = v2.z * mult;
		this._direction = dest2;
		var this8 = new glm_Mat4Base();
		this8._00 = 0;
		this8._01 = 0;
		this8._02 = 0;
		this8._03 = 0;
		this8._10 = 0;
		this8._11 = 0;
		this8._12 = 0;
		this8._13 = 0;
		this8._20 = 0;
		this8._21 = 0;
		this8._22 = 0;
		this8._23 = 0;
		this8._30 = 0;
		this8._31 = 0;
		this8._32 = 0;
		this8._33 = 0;
		var dest3 = this8;
		var a00 = modelToWorldMatrix._00;
		var a01 = modelToWorldMatrix._10;
		var a02 = modelToWorldMatrix._20;
		var a03 = modelToWorldMatrix._30;
		var a10 = modelToWorldMatrix._01;
		var a11 = modelToWorldMatrix._11;
		var a12 = modelToWorldMatrix._21;
		var a13 = modelToWorldMatrix._31;
		var a20 = modelToWorldMatrix._02;
		var a21 = modelToWorldMatrix._12;
		var a22 = modelToWorldMatrix._22;
		var a23 = modelToWorldMatrix._32;
		var a30 = modelToWorldMatrix._03;
		var a31 = modelToWorldMatrix._13;
		var a32 = modelToWorldMatrix._23;
		var a33 = modelToWorldMatrix._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest3._00 = t00 * idet;
		dest3._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest3._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest3._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest3._10 = t01 * idet;
		dest3._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest3._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest3._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest3._20 = t02 * idet;
		dest3._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest3._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest3._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest3._30 = t03 * idet;
		dest3._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest3._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest3._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		this._view = dest3;
		this._data.set("eyeDirection",this._direction).set("eyePosition",this._position).set("viewMatrix",this._view);
		this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
	}
	,__class__: minko_component_PerspectiveCamera
});
var minko_component_Picking = $hx_exports["minko"]["component"]["Picking"] = function() {
	minko_component_AbstractComponent.call(this);
	this._sceneManager = null;
	this._context = null;
	this._mouse = null;
	this._touch = null;
	this._camera = null;
	this._pickingId = 0;
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this._pickingProjection = dest;
	this._pickingProvider = minko_data_Provider.create();
	this._pickingEffect = null;
	this._pickingDepthEffect = null;
	this._mouseMove = new minko_signal_Signal();
	this._mouseLeftClick = new minko_signal_Signal();
	this._mouseRightClick = new minko_signal_Signal();
	this._mouseLeftDown = new minko_signal_Signal();
	this._mouseRightDown = new minko_signal_Signal();
	this._mouseLeftUp = new minko_signal_Signal();
	this._mouseRightUp = new minko_signal_Signal();
	this._mouseOut = new minko_signal_Signal();
	this._mouseOver = new minko_signal_Signal();
	this._mouseWheel = new minko_signal_Signal();
	this._touchDown = new minko_signal_Signal();
	this._touchMove = new minko_signal_Signal();
	this._touchUp = new minko_signal_Signal();
	this._tap = new minko_signal_Signal();
	this._doubleTap = new minko_signal_Signal();
	this._longHold = new minko_signal_Signal();
	this._lastDepthValue = 0.0;
	this._lastMergingMask = 0;
	this._addPickingLayout = true;
	this._emulateMouseWithTouch = true;
	this._frameBeginSlot = null;
	this._enabled = false;
	this._renderDepth = true;
	this._debug = false;
	this._lastColor = new haxe_io_Bytes(new ArrayBuffer(4));
	this._lastDepth = new haxe_io_Bytes(new ArrayBuffer(4));
	this._surfaceToPickingId = new haxe_ds_ObjectMap();
	this._pickingIdToSurface = new haxe_ds_IntMap();
};
minko_component_Picking.__name__ = true;
minko_component_Picking.create = function(camera,addPickingLayoutToNodes,emulateMouseWithTouch,pickingEffect,pickingDepthEffect) {
	if(emulateMouseWithTouch == null) {
		emulateMouseWithTouch = true;
	}
	if(addPickingLayoutToNodes == null) {
		addPickingLayoutToNodes = true;
	}
	var picking = new minko_component_Picking();
	picking.initialize(camera,addPickingLayoutToNodes,emulateMouseWithTouch,pickingEffect,pickingDepthEffect);
	return picking;
};
minko_component_Picking.unpack = function(depth) {
	var this1 = new glm_Vec3Base();
	this1.x = 1.0;
	this1.y = 0.00392156862745098;
	this1.z = 1.5378700499807768e-005;
	var b = this1;
	return depth.x * b.x + depth.y * b.y + depth.z * b.z;
};
minko_component_Picking.__super__ = minko_component_AbstractComponent;
minko_component_Picking.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_mouseOver: function() {
		return this._mouseOver;
	}
	,get_mouseRightDown: function() {
		return this._mouseRightDown;
	}
	,get_mouseRightUp: function() {
		return this._mouseRightUp;
	}
	,get_mouseDown: function() {
		return this._mouseLeftDown;
	}
	,get_mouseUp: function() {
		return this._mouseLeftUp;
	}
	,get_mouseRightClick: function() {
		return this._mouseRightClick;
	}
	,get_mouseClick: function() {
		return this._mouseLeftClick;
	}
	,get_mouseOut: function() {
		return this._mouseOut;
	}
	,get_mouseMove: function() {
		return this._mouseMove;
	}
	,get_mouseWheel: function() {
		return this._mouseWheel;
	}
	,get_touchDown: function() {
		return this._touchDown;
	}
	,get_touchMove: function() {
		return this._touchMove;
	}
	,get_touchUp: function() {
		return this._touchUp;
	}
	,get_touchTap: function() {
		return this._tap;
	}
	,get_touchDoubleTap: function() {
		return this._doubleTap;
	}
	,get_touchLongHold: function() {
		return this._longHold;
	}
	,get_pickedSurface: function() {
		return this._lastPickedSurface;
	}
	,get_renderDepth: function() {
		return this._renderDepth;
	}
	,set_renderDepth: function(value) {
		this._renderDepth = value;
		return value;
	}
	,get_pickedDepth: function() {
		return this._lastDepthValue;
	}
	,get_pickedMergingMask: function() {
		return this._lastMergingMask;
	}
	,set_debug: function(v) {
		this._debug = v;
		return v;
	}
	,targetRemoved: function(target) {
		this.unbindSignals();
		if(target.existsComponent(this._renderer)) {
			target.removeComponent(this._renderer);
		}
		if(target.existsComponent(this._depthRenderer)) {
			target.removeComponent(this._depthRenderer);
		}
		this._renderer = null;
		this._depthRenderer = null;
		this._sceneManager = null;
		this._enabled = false;
		this.removedHandler(target.get_root(),target,target.get_parent());
	}
	,initialize: function(camera,addPickingLayout,emulateMouseWithTouch,pickingEffect,pickingDepthEffect) {
		this._camera = camera;
		this._addPickingLayout = addPickingLayout;
		this._emulateMouseWithTouch = emulateMouseWithTouch;
		this._pickingEffect = pickingEffect;
		this._pickingDepthEffect = pickingDepthEffect;
		this._pickingProvider.set("pickingProjection",this._pickingProjection);
		var tmp = this._pickingProvider;
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		tmp.set("pickingOrigin",this1);
	}
	,bindSignals: function() {
		this._mouseMoveSlot = this._mouse.get_move().connect($bind(this,this.mouseMoveHandler));
		this._mouseLeftDownSlot = this._mouse.get_leftButtonDown().connect($bind(this,this.mouseLeftDownHandler));
		this._mouseRightDownSlot = this._mouse.get_rightButtonDown().connect($bind(this,this.mouseRightDownHandler));
		this._mouseLeftClickSlot = this._mouse.get_leftButtonClick().connect($bind(this,this.mouseLeftClickHandler));
		this._mouseRightClickSlot = this._mouse.get_rightButtonClick().connect($bind(this,this.mouseRightClickHandler));
		this._mouseLeftUpSlot = this._mouse.get_leftButtonUp().connect($bind(this,this.mouseLeftUpHandler));
		this._mouseRightUpSlot = this._mouse.get_rightButtonUp().connect($bind(this,this.mouseRightUpHandler));
		this._mouseWheelSlot = this._mouse.get_wheel().connect($bind(this,this.mouseWheelHandler));
		this._touchDownSlot = this._touch.get_touchDown().connect($bind(this,this.touchDownHandler));
		this._touchUpSlot = this._touch.get_touchUp().connect($bind(this,this.touchUpHandler));
		this._touchMoveSlot = this._touch.get_touchMove().connect($bind(this,this.touchMoveHandler));
		this._touchTapSlot = this._touch.get_tap().connect($bind(this,this.touchTapHandler));
		this._touchDoubleTapSlot = this._touch.get_doubleTap().connect($bind(this,this.touchDoubleTapHandler));
		this._touchLongHoldSlot = this._touch.get_longHold().connect($bind(this,this.touchLongHoldHandler));
		this._executeMoveHandler = false;
		this._executeRightClickHandler = false;
		this._executeLeftClickHandler = false;
		this._executeRightDownHandler = false;
		this._executeLeftDownHandler = false;
		this._executeRightUpHandler = false;
		this._executeLeftUpHandler = false;
		this._executeTouchDownHandler = false;
		this._executeTouchUpHandler = false;
		this._executeTouchMoveHandler = false;
		this._executeTapHandler = false;
		this._executeDoubleTapHandler = false;
		this._executeLongHoldHandler = false;
	}
	,unbindSignals: function() {
		this._mouseMoveSlot = null;
		this._mouseLeftDownSlot = null;
		this._mouseRightDownSlot = null;
		this._mouseLeftClickSlot = null;
		this._mouseRightClickSlot = null;
		this._mouseLeftUpSlot = null;
		this._mouseRightUpSlot = null;
		this._touchDownSlot = null;
		this._touchUpSlot = null;
		this._touchMoveSlot = null;
		this._touchTapSlot = null;
		this._touchDoubleTapSlot = null;
		this._touchLongHoldSlot = null;
		this._frameBeginSlot = null;
		this._renderingBeginSlot = null;
		this._renderingEndSlot = null;
		this._depthRenderingBeginSlot = null;
		this._depthRenderingEndSlot = null;
		this._componentAddedSlot = null;
		this._componentRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
	}
	,targetAdded: function(target) {
		this._sceneManager = target.get_root().getComponent(minko_component_SceneManager);
		var canvas = this._sceneManager.get_canvas();
		this._mouse = canvas.get_mouse();
		this._touch = canvas.get_touch();
		this._context = canvas.get_context();
		this.bindSignals();
		if(this._pickingEffect == null) {
			this._pickingEffect = this._sceneManager.get_assets().effect("effect/Picking.effect");
		}
		var priority = this._debug ? -1000.0 : 1000.0;
		this._renderer = minko_component_Renderer.create(-65281,null,this._pickingEffect,"default",priority,"Picking Renderer");
		if(!this._debug) {
			this._renderer.scissorBox(0,0,1,1);
		}
		this._renderer.set_layoutMask(64);
		if(!this._debug) {
			this._renderer.set_enabled(false);
		}
		if(this._pickingDepthEffect == null) {
			this._pickingDepthEffect = this._sceneManager.get_assets().effect("effect/PickingDepth.effect");
		}
		this._depthRenderer = minko_component_Renderer.create(-65281,null,this._pickingDepthEffect,"default",999.0,"Depth Picking Renderer");
		this._depthRenderer.scissorBox(0,0,1,1);
		this._depthRenderer.set_layoutMask(512);
		this._depthRenderer.set_enabled(false);
		this.updateDescendants(target);
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.removedHandler));
		if(target.get_parent() != null || target.hasComponent(minko_component_SceneManager)) {
			this.addedHandler(target,target,target.get_parent());
		}
		target.addComponent(this._renderer);
		target.addComponent(this._depthRenderer);
		var perspectiveCamera = this._camera.getComponent(minko_component_PerspectiveCamera);
		target.get_data().addProvider(this._pickingProvider);
		target.get_data().addProvider(perspectiveCamera.get_data());
		this.addSurfacesForNode(target);
	}
	,addedHandler: function(target,child,parent) {
		this.updateDescendants(target);
		if(Lambda.has(this._descendants,child) == false) {
			return;
		}
		if(child == target && this._renderingBeginSlot == null) {
			this._renderingBeginSlot = this._renderer.get_renderingBegin().connect($bind(this,this.renderingBegin));
			this._renderingEndSlot = this._renderer.get_beforePresent().connect($bind(this,this.renderingEnd));
			this._depthRenderingBeginSlot = this._depthRenderer.get_renderingBegin().connect($bind(this,this.depthRenderingBegin));
			this._depthRenderingEndSlot = this._depthRenderer.get_beforePresent().connect($bind(this,this.depthRenderingEnd));
			this._componentAddedSlot = child.get_componentAdded().connect($bind(this,this.componentAddedHandler));
			this._componentRemovedSlot = child.get_componentRemoved().connect($bind(this,this.componentRemovedHandler));
		}
		if(Lambda.has(this._descendants,child)) {
			this.addSurfacesForNode(child);
		}
	}
	,componentAddedHandler: function(target,node,ctrl) {
		if(Lambda.has(this._descendants,node)) {
			return;
		}
		if(js_Boot.__instanceof(ctrl,minko_component_Surface)) {
			var surfaceCtrl = js_Boot.__cast(ctrl , minko_component_Surface);
			this.addSurface(surfaceCtrl);
		}
	}
	,componentRemovedHandler: function(target,node,ctrl) {
		if(Lambda.has(this._descendants,node) == false) {
			return;
		}
		if(js_Boot.__instanceof(ctrl,minko_component_Surface)) {
			var surfaceCtrl = js_Boot.__cast(ctrl , minko_component_Surface);
			this.removeSurface(surfaceCtrl,node);
		}
		if(!node.hasComponent(minko_component_Surface) && this._addPickingLayout) {
			node.set_layout(node.get_layout() & ~64);
		}
	}
	,addSurface: function(surface) {
		if(this._surfaceToPickingId.h.__keys__[surface.__id__] != null == false) {
			this._pickingId += 2;
			this._surfaceToPickingId.set(surface,this._pickingId);
			this._pickingIdToSurface.h[this._pickingId] = surface;
			var tmp = surface.get_data();
			var x = (this._pickingId >> 16 & 255) / 255.0;
			var y = (this._pickingId >> 8 & 255) / 255.0;
			var z = (this._pickingId & 255) / 255.0;
			var this1 = new glm_Vec4Base();
			this1.x = x;
			this1.y = y;
			this1.z = z;
			this1.w = 1;
			tmp.set("pickingColor",this1);
			if(this._addPickingLayout) {
				surface.get_target().set_layout(this.get_target().get_layout() | 64);
			}
			surface.set_layoutMask(surface.get_layoutMask() & ~512);
		}
	}
	,removeSurface: function(surface,node) {
		if(this._surfaceToPickingId.h.__keys__[surface.__id__] != null == false) {
			return;
		}
		surface.get_data().unset("pickingColor");
		var surfacePickingId = this._surfaceToPickingId.h[surface.__id__];
		this._surfaceToPickingId.remove(surface);
		this._pickingIdToSurface.remove(surfacePickingId);
	}
	,removedHandler: function(target,child,parent) {
		if(Lambda.has(this._descendants,child) == false) {
			return;
		}
		this.removeSurfacesForNode(child);
		this.updateDescendants(target);
	}
	,addSurfacesForNode: function(node) {
		var surfaces = minko_scene_NodeSet.createbyNode(node).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaces.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			var surfaces1 = surfaceNode.getComponents(minko_component_Surface);
			var _g2 = 0;
			while(_g2 < surfaces1.length) {
				var surface = surfaces1[_g2];
				++_g2;
				this.addSurface(surface);
			}
		}
	}
	,removeSurfacesForNode: function(node) {
		var surfaces = minko_scene_NodeSet.createbyNode(node).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaces.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			surfaceNode.set_layout(surfaceNode.get_layout() & ~64);
			var surfaces1 = surfaceNode.getComponents(minko_component_Surface);
			var _g2 = 0;
			while(_g2 < surfaces1.length) {
				var surface = surfaces1[_g2];
				++_g2;
				this.removeSurface(surface,surfaceNode);
			}
		}
	}
	,updateDescendants: function(target) {
		var nodeSet = minko_scene_NodeSet.createbyNode(target).descendants(true);
		this._descendants = nodeSet.get_nodes();
	}
	,set_enabled: function(v) {
		if(v && this._frameBeginSlot == null) {
			v = true;
			this._frameBeginSlot = this._sceneManager.get_frameBegin().connect($bind(this,this.frameBeginHandler),1000.0);
		} else if(!v && this._frameBeginSlot != null) {
			this._frameBeginSlot = null;
		}
		this._enabled = v;
		return v;
	}
	,frameBeginHandler: function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
		if(this._debug) {
			return;
		}
		this._renderer.set_enabled(true);
		this._renderer.render(this._sceneManager.get_canvas().get_context());
		this._renderer.set_enabled(false);
	}
	,renderingBegin: function(renderer) {
		if(!this._enabled) {
			return;
		}
		this.updatePickingProjection();
	}
	,doRenderDepth: function(renderer,pickedSurface) {
		if(!this._enabled) {
			return;
		}
		var pickedSurfaceTarget = pickedSurface.get_target();
		pickedSurfaceTarget.set_layout(pickedSurfaceTarget.get_layout() | 512);
		pickedSurface.set_layoutMask(pickedSurface.get_layoutMask() | 512);
		renderer.set_enabled(true);
		renderer.render(this._sceneManager.get_canvas().get_context());
		renderer.set_enabled(false);
		pickedSurfaceTarget.set_layout(pickedSurfaceTarget.get_layout() & ~512);
		pickedSurface.set_layoutMask(pickedSurface.get_layoutMask() & ~512);
	}
	,renderingEnd: function(renderer) {
		if(!this._enabled) {
			return;
		}
		this._context.readRectPixels(0,0,1,1,this._lastColor);
		var pickedSurfaceId = (this._lastColor.b[0] << 16) + (this._lastColor.b[1] << 8) + this._lastColor.b[2];
		var surfaceIt = this._pickingIdToSurface.h.hasOwnProperty(pickedSurfaceId);
		if(surfaceIt != false) {
			var pickedSurface = this._pickingIdToSurface.h[pickedSurfaceId];
			if(this._renderDepth) {
				this.doRenderDepth(this._depthRenderer,pickedSurface);
			} else {
				this.dispatchEvents(pickedSurface,this._lastDepthValue);
			}
		} else {
			this.dispatchEvents(null,this._lastDepthValue);
		}
	}
	,depthRenderingBegin: function(renderer) {
		if(!this._enabled) {
			return;
		}
		this.updatePickingOrigin();
	}
	,depthRenderingEnd: function(renderer) {
		if(!this._enabled) {
			return;
		}
		var pickedSurfaceId = (this._lastColor.b[0] << 16) + (this._lastColor.b[1] << 8) + this._lastColor.b[2];
		var surfaceIt = this._pickingIdToSurface.h.hasOwnProperty(pickedSurfaceId);
		if(surfaceIt != false) {
			var pickedSurface = this._pickingIdToSurface.h[pickedSurfaceId];
			this._context.readRectPixels(0,0,1,1,this._lastDepth);
			var zFar = this._camera.get_data().get("zFar");
			var x = this._lastDepth.b[0];
			var y = this._lastDepth.b[1];
			var z = this._lastDepth.b[2];
			var this1 = new glm_Vec3Base();
			this1.x = x;
			this1.y = y;
			this1.z = z;
			var a = this1;
			var s = 0.00392156862745098;
			var this2 = new glm_Vec3Base();
			this2.x = 0;
			this2.y = 0;
			this2.z = 0;
			var dest = this2;
			dest.x = a.x * s;
			dest.y = a.y * s;
			dest.z = a.z * s;
			var depth = dest;
			var this3 = new glm_Vec3Base();
			this3.x = 1.0;
			this3.y = 0.00392156862745098;
			this3.z = 1.5378700499807768e-005;
			var b = this3;
			var normalizedDepth = (depth.x * b.x + depth.y * b.y + depth.z * b.z) * zFar;
			this._lastDepthValue = normalizedDepth;
			this._lastMergingMask = this._lastDepth.b[3];
			this.dispatchEvents(pickedSurface,this._lastDepthValue);
		}
	}
	,updatePickingProjection: function() {
		var mouseX = this._mouse.get_x();
		var mouseY = this._mouse.get_y();
		var perspectiveCamera = this._camera.getComponent(minko_component_PerspectiveCamera);
		var fovy = perspectiveCamera.get_fieldOfView();
		var aspectRatio = perspectiveCamera.get_aspectRatio();
		var near = perspectiveCamera.get_zNear();
		var far = perspectiveCamera.get_zFar();
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var f = 1 / Math.tan(fovy / 2);
		var nf = 1 / (near - far);
		dest._00 = f / aspectRatio;
		dest._01 = 0;
		dest._02 = 0;
		dest._03 = 0;
		dest._10 = 0;
		dest._11 = f;
		dest._12 = 0;
		dest._13 = 0;
		dest._20 = 0;
		dest._21 = 0;
		dest._22 = (far + near) * nf;
		dest._23 = -1;
		dest._30 = 0;
		dest._31 = 0;
		dest._32 = 2 * far * near * nf;
		dest._33 = 0;
		var projection = dest;
		projection._20 = mouseX / this._context.get_viewportWidth() * 2.0;
		projection._21 = (this._context.get_viewportHeight() - mouseY) / this._context.get_viewportHeight() * 2.0;
		this._pickingProvider.set("pickingProjection",projection);
	}
	,updatePickingOrigin: function() {
		var perspectiveCamera = this._camera.getComponent(minko_component_PerspectiveCamera);
		var normalizedMouseX = this._mouse.get_normalizedX();
		var normalizedMouseY = this._mouse.get_normalizedY();
		var pickingRay = perspectiveCamera.unproject(normalizedMouseX,normalizedMouseY);
		this._pickingProvider.set("pickingOrigin",pickingRay.get_origin());
	}
	,dispatchEvents: function(pickedSurface,depth) {
		if(this._lastPickedSurface != pickedSurface) {
			if(this._lastPickedSurface != null && this._mouseOut.get_numCallbacks() > 0) {
				this._mouseOut.execute(this._lastPickedSurface.get_target());
			}
			this._lastPickedSurface = pickedSurface;
			if(this._lastPickedSurface != null && this._mouseOver.get_numCallbacks() > 0) {
				this._mouseOver.execute(this._lastPickedSurface.get_target());
			}
		}
		if(this._executeMoveHandler && this._lastPickedSurface != null) {
			this._mouseMove.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeRightDownHandler && this._lastPickedSurface != null) {
			this._mouseRightDown.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeLeftDownHandler && this._lastPickedSurface != null) {
			this._mouseLeftDown.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeRightClickHandler && this._lastPickedSurface != null) {
			this._mouseRightClick.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeLeftClickHandler && this._lastPickedSurface != null) {
			this._mouseLeftClick.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeRightUpHandler && this._lastPickedSurface != null) {
			this._mouseRightUp.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeLeftUpHandler && this._lastPickedSurface != null) {
			this._mouseLeftUp.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeMouseWheel && this._lastPickedSurface != null) {
			this._mouseWheel.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeTouchDownHandler && this._lastPickedSurface != null) {
			this._touchDown.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeTouchUpHandler && this._lastPickedSurface != null) {
			this._touchUp.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeTouchMoveHandler && this._lastPickedSurface != null) {
			this._touchMove.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeTapHandler && this._lastPickedSurface != null) {
			this._tap.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeDoubleTapHandler && this._lastPickedSurface != null) {
			this._doubleTap.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeLongHoldHandler && this._lastPickedSurface != null) {
			this._longHold.execute(this._lastPickedSurface.get_target());
		}
		if(!(this._mouseOver.get_numCallbacks() > 0 || this._mouseOut.get_numCallbacks() > 0)) {
			this.set_enabled(false);
		}
		this._executeMoveHandler = false;
		this._executeRightDownHandler = false;
		this._executeLeftDownHandler = false;
		this._executeRightClickHandler = false;
		this._executeLeftClickHandler = false;
		this._executeRightUpHandler = false;
		this._executeLeftUpHandler = false;
	}
	,mouseMoveHandler: function(mouse,dx,dy) {
		if(this._mouseOver.get_numCallbacks() > 0 || this._mouseOut.get_numCallbacks() > 0) {
			this._executeMoveHandler = true;
			this.set_enabled(true);
		}
	}
	,mouseRightUpHandler: function(mouse) {
		if(this._mouseRightUp.get_numCallbacks() > 0) {
			this._executeRightUpHandler = true;
			this.set_enabled(true);
		}
	}
	,mouseLeftUpHandler: function(mouse) {
		if(this._mouseLeftUp.get_numCallbacks() > 0) {
			this._executeLeftUpHandler = true;
			this.set_enabled(true);
		}
	}
	,mouseRightClickHandler: function(mouse) {
		if(this._mouseRightClick.get_numCallbacks() > 0) {
			this._executeRightClickHandler = true;
			this.set_enabled(true);
		}
	}
	,mouseLeftClickHandler: function(mouse) {
		if(this._mouseLeftClick.get_numCallbacks() > 0) {
			this._executeLeftClickHandler = true;
			this.set_enabled(true);
		}
	}
	,mouseRightDownHandler: function(mouse) {
		if(this._mouseRightDown.get_numCallbacks() > 0) {
			this._executeRightDownHandler = true;
			this.set_enabled(true);
		}
	}
	,mouseLeftDownHandler: function(mouse) {
		if(this._mouseLeftDown.get_numCallbacks() > 0) {
			this._executeLeftDownHandler = true;
			this.set_enabled(true);
		}
	}
	,mouseWheelHandler: function(mouse,x,y) {
		if(this._mouseWheel.get_numCallbacks() > 0) {
			this._executeMouseWheel = true;
			this.set_enabled(true);
		}
	}
	,touchDownHandler: function(touch,identifier,x,y) {
		if(this._touchDown.get_numCallbacks() > 0) {
			this._executeTouchDownHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._touch.get_numTouches() == 1 && this._mouseLeftDown.get_numCallbacks() > 0) {
			this._executeLeftDownHandler = true;
			this.set_enabled(true);
		}
	}
	,touchUpHandler: function(touch,identifier,x,y) {
		if(this._touchUp.get_numCallbacks() > 0) {
			this._executeTouchUpHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._touch.get_numTouches() == 1 && this._mouseLeftUp.get_numCallbacks() > 0) {
			this._executeLeftUpHandler = true;
			this.set_enabled(true);
		}
	}
	,touchMoveHandler: function(touch,identifier,x,y) {
		if(this._touchMove.get_numCallbacks() > 0) {
			this._executeTouchMoveHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._touch.get_numTouches() == 1 && this._mouseMove.get_numCallbacks() > 0) {
			this._executeMoveHandler = true;
			this.set_enabled(true);
		}
	}
	,touchTapHandler: function(touch,x,y) {
		if(this._tap.get_numCallbacks() > 0) {
			this._executeTapHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._mouseLeftClick.get_numCallbacks() > 0) {
			this._executeLeftClickHandler = true;
			this.set_enabled(true);
		}
	}
	,touchDoubleTapHandler: function(touch,x,y) {
		if(this._doubleTap.get_numCallbacks() > 0) {
			this._executeDoubleTapHandler = true;
			this.set_enabled(true);
		}
	}
	,touchLongHoldHandler: function(touch,x,y) {
		if(this._doubleTap.get_numCallbacks() > 0) {
			this._executeDoubleTapHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._mouseRightClick.get_numCallbacks() > 0) {
			this._executeRightClickHandler = true;
			this.set_enabled(true);
		}
	}
	,__class__: minko_component_Picking
});
var minko_component_PointLight = $hx_exports["minko"]["component"]["PointLight"] = function(diffuse,specular,attenuationConstant,attenuationLinear,attenuationQuadratic) {
	minko_component_AbstractDiscreteLight.call(this,"pointLight",diffuse,specular);
	var this1 = new glm_Vec3Base();
	this1.x = attenuationConstant;
	this1.y = attenuationLinear;
	this1.z = attenuationQuadratic;
	this._attenuationCoeffs = this1;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	this._worldPosition = this2;
	this.get_data().set("attenuationCoeffs",this._attenuationCoeffs);
	var this3 = new glm_Mat4Base();
	this3._00 = 0;
	this3._01 = 0;
	this3._02 = 0;
	this3._03 = 0;
	this3._10 = 0;
	this3._11 = 0;
	this3._12 = 0;
	this3._13 = 0;
	this3._20 = 0;
	this3._21 = 0;
	this3._22 = 0;
	this3._23 = 0;
	this3._30 = 0;
	this3._31 = 0;
	this3._32 = 0;
	this3._33 = 0;
	var dest = this3;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this.updateModelToWorldMatrix(dest);
};
minko_component_PointLight.__name__ = true;
minko_component_PointLight.create = function(diffuse,specular,attenuationConstant,attenuationLinear,attenuationQuadratic) {
	if(attenuationQuadratic == null) {
		attenuationQuadratic = -1.0;
	}
	if(attenuationLinear == null) {
		attenuationLinear = -1.0;
	}
	if(attenuationConstant == null) {
		attenuationConstant = -1.0;
	}
	if(specular == null) {
		specular = 1.0;
	}
	if(diffuse == null) {
		diffuse = 1.0;
	}
	return new minko_component_PointLight(diffuse,specular,attenuationConstant,attenuationLinear,attenuationQuadratic);
};
minko_component_PointLight.__super__ = minko_component_AbstractDiscreteLight;
minko_component_PointLight.prototype = $extend(minko_component_AbstractDiscreteLight.prototype,{
	clone: function(option) {
		var light = minko_component_PointLight.create().copyFrom(this,option);
		return light;
	}
	,get_attenuationEnabled: function() {
		return !(this._attenuationCoeffs.x < 0.0 || this._attenuationCoeffs.y < 0.0 || this._attenuationCoeffs.z < 0.0);
	}
	,get_attenuationCoefficients: function() {
		return this._attenuationCoeffs;
	}
	,setAttenuationCoefficients: function(constant,linear,quadratic) {
		var this1 = new glm_Vec3Base();
		this1.x = constant;
		this1.y = linear;
		this1.z = quadratic;
		return this.set_attenuationCoefficients(this1);
	}
	,set_attenuationCoefficients: function(value) {
		this.get_data().set("attenuationCoeffs",this._attenuationCoeffs = value);
		return value;
	}
	,get_position: function() {
		return this.get_data().get("position");
	}
	,updateModelToWorldMatrix: function(modelToWorld) {
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 0.0;
		this1.w = 1.0;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = modelToWorld._00 * x + modelToWorld._10 * y + modelToWorld._20 * z + modelToWorld._30 * w;
		dest.y = modelToWorld._01 * x + modelToWorld._11 * y + modelToWorld._21 * z + modelToWorld._31 * w;
		dest.z = modelToWorld._02 * x + modelToWorld._12 * y + modelToWorld._22 * z + modelToWorld._32 * w;
		dest.w = modelToWorld._03 * x + modelToWorld._13 * y + modelToWorld._23 * z + modelToWorld._33 * w;
		var tmp = dest;
		var tmp1 = this.get_data();
		var x1 = tmp.x;
		var y1 = tmp.y;
		var z1 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x1;
		this3.y = y1;
		this3.z = z1;
		tmp1.set("position",this3);
	}
	,copyFrom: function(pointLight,option) {
		this.get_data().set("diffuse",pointLight.get_diffuse()).set("specular",pointLight.get_specular());
		this._attenuationCoeffs = pointLight.get_attenuationCoefficients();
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
		return this;
	}
	,__class__: minko_component_PointLight
});
var minko_component_Reflection = $hx_exports["minko"]["component"]["Reflection"] = function(assets,renderTargetWidth,renderTargetHeight,clearColor) {
	if(clearColor == null) {
		clearColor = -1;
	}
	if(renderTargetHeight == null) {
		renderTargetHeight = 2;
	}
	if(renderTargetWidth == null) {
		renderTargetWidth = 2;
	}
	minko_component_AbstractScript.call(this);
	this._assets = assets;
	this._width = renderTargetWidth;
	this._height = renderTargetWidth;
	this._clearColor = clearColor;
	this._rootAdded = new minko_signal_Signal2();
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) {
		var i = _g1++;
		_g.push(0);
	}
	this._clipPlane = _g;
	this._activeCamera = null;
	this._enabled = true;
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this._reflectedViewMatrix = dest;
	var tmp = this._assets.get_context();
	var x = this._width;
	--x;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	var x1 = this._height;
	--x1;
	x1 |= x1 >> 1;
	x1 |= x1 >> 2;
	x1 |= x1 >> 4;
	x1 |= x1 >> 8;
	x1 |= x1 >> 16;
	this._renderTarget = minko_render_Texture.create(tmp,x + 1,x1 + 1,false,true);
};
minko_component_Reflection.__name__ = true;
minko_component_Reflection.create = function(assets,renderTargetWidth,renderTargetHeight,clearColor) {
	return new minko_component_Reflection(assets,renderTargetWidth,renderTargetHeight,clearColor);
};
minko_component_Reflection.__super__ = minko_component_AbstractScript;
minko_component_Reflection.prototype = $extend(minko_component_AbstractScript.prototype,{
	get_renderTarget: function() {
		return this._renderTarget;
	}
	,copyFrom: function(reflection,option) {
		this._assets = reflection._assets;
		this._width = reflection._width;
		this._height = reflection._height;
		this._clearColor = reflection._clearColor;
		this._rootAdded = new minko_signal_Signal2();
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push(0);
		}
		this._clipPlane = _g;
		this._activeCamera = reflection._activeCamera;
		this._enabled = reflection._enabled;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this._reflectedViewMatrix = dest;
		var tmp = this._assets.get_context();
		var x = this._width;
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		var x1 = this._height;
		--x1;
		x1 |= x1 >> 1;
		x1 |= x1 >> 2;
		x1 |= x1 >> 4;
		x1 |= x1 >> 8;
		x1 |= x1 >> 16;
		this._renderTarget = minko_render_Texture.create(tmp,x + 1,x1 + 1,false,true);
		return this;
	}
	,clone: function(option) {
		var reflection = new minko_component_Reflection(null).copyFrom(this,option);
		return reflection;
	}
	,start: function(target) {
		this._addedToSceneSlot = null;
		var renderTarget = minko_render_Texture.create(this._assets.get_context(),this._width,this._height,false,true);
		this._renderTargets.push(renderTarget);
		var originalCamera = target.getComponents(minko_component_PerspectiveCamera)[0];
		var virtualPerspectiveCameraComponent = minko_component_PerspectiveCamera.create(originalCamera.get_aspectRatio(),originalCamera.get_fieldOfView(),originalCamera.get_zNear(),originalCamera.get_zFar());
		target.get_root().addChild(this._virtualCamera);
		if(target.getComponents(minko_component_PerspectiveCamera).length < 1) {
			throw new js__$Boot_HaxeError("Reflection must be added to a camera");
		}
	}
	,update: function(target) {
		this.updateReflectionMatrix();
	}
	,stop: function(target) {
	}
	,updateReflectionMatrix: function() {
	}
	,__class__: minko_component_Reflection
});
var minko_component_Renderer = $hx_exports["minko"]["component"]["Renderer"] = function(renderTarget,effect,effectTechnique,priority) {
	this.enable_uuid();
	minko_component_AbstractComponent.call(this,1);
	this._backgroundColor = 0;
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = -1;
	this1.w = -1;
	this._viewportBox = this1;
	var this2 = new glm_Vec4Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = -1;
	this2.w = -1;
	this._scissorBox = this2;
	this._enabled = true;
	this._mustZSort = true;
	this._renderingBegin = new minko_signal_Signal();
	this._renderingEnd = new minko_signal_Signal();
	this._beforePresent = new minko_signal_Signal();
	this._effect = effect;
	this._effectTechnique = effectTechnique;
	this._clearBeforeRender = true;
	this._priority = priority;
	this._renderTarget = renderTarget;
	this._postProcessingGeom = null;
	this._filterChanged = new minko_signal_Signal4();
	this._numDrawCalls = 0;
	this._numTriangles = 0;
	this._drawCallPool = new minko_render_DrawCallPool();
	this._name = "";
	this._sceneManager = null;
	this._variables = [];
	this._toCollect = [];
	this._drawCallToZSortNeededSlot = new haxe_ds_ObjectMap();
	this._surfaceChangedSlots = new haxe_ds_ObjectMap();
	this._surfaceToDrawCallIterator = new haxe_ds_ObjectMap();
	this._filterChanged = new minko_signal_Signal4();
	this._nodeLayoutChangedSlot = new haxe_ds_ObjectMap();
	this._surfaceLayoutMaskChangedSlot = new haxe_ds_ObjectMap();
};
minko_component_Renderer.__name__ = true;
minko_component_Renderer.create = function(backgroundColor,renderTarget,effect,effectTechnique,priority,name) {
	if(name == null) {
		name = "";
	}
	if(priority == null) {
		priority = 0.0;
	}
	if(effectTechnique == null) {
		effectTechnique = "default";
	}
	if(backgroundColor == null) {
		backgroundColor = 0;
	}
	var ctrl = new minko_component_Renderer(renderTarget,effect,effectTechnique,priority);
	ctrl.set_backgroundColor(backgroundColor);
	ctrl.set_name(name);
	return ctrl;
};
minko_component_Renderer.__super__ = minko_component_AbstractComponent;
minko_component_Renderer.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_effect: function() {
		return this._effect;
	}
	,set_effect: function(v) {
		this.changeEffectOrTechnique(v,this._effectTechnique);
		return v;
	}
	,setEffect: function(effect,technique) {
		this.changeEffectOrTechnique(effect,technique);
	}
	,get_numDrawCalls: function() {
		return this._numDrawCalls;
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,get_backgroundColor: function() {
		return this._backgroundColor;
	}
	,set_backgroundColor: function(value) {
		this._backgroundColor = value;
		return value;
	}
	,set_name: function(value) {
		this._name = value;
		return value;
	}
	,get_name: function() {
		return this._name;
	}
	,get_priority: function() {
		return this._priority;
	}
	,set_priority: function(value) {
		this._priority = value;
		return value;
	}
	,set_viewport: function(value) {
		this._viewportBox = value;
		return value;
	}
	,scissorBox: function(x,y,w,h) {
		this._scissorBox.x = x;
		this._scissorBox.y = y;
		this._scissorBox.z = w;
		this._scissorBox.w = h;
	}
	,get_renderTarget: function() {
		return this._renderTarget;
	}
	,set_renderTarget: function(target) {
		this._renderTarget = target;
		return target;
	}
	,get_clearBeforeRender: function() {
		return this._clearBeforeRender;
	}
	,set_clearBeforeRender: function(value) {
		this._clearBeforeRender = value;
		return value;
	}
	,get_effectVariables: function() {
		return this._variables;
	}
	,get_effectTechnique: function() {
		return this._effectTechnique;
	}
	,set_effectTechnique: function(value) {
		this.changeEffectOrTechnique(this._effect,value);
		return value;
	}
	,get_enabled: function() {
		return this._enabled;
	}
	,set_enabled: function(value) {
		this._enabled = value;
		return value;
	}
	,get_drawCallPool: function() {
		return this._drawCallPool;
	}
	,get_renderingBegin: function() {
		return this._renderingBegin;
	}
	,get_beforePresent: function() {
		return this._beforePresent;
	}
	,get_renderingEnd: function() {
		return this._renderingEnd;
	}
	,reset: function() {
		this._toCollect = [];
		var s = this._surfaceToDrawCallIterator.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			this.removeSurface(s1);
		}
		this._surfaceToDrawCallIterator = new haxe_ds_ObjectMap();
		this._drawCallPool.clear();
	}
	,initializePostProcessingGeometry: function() {
		var context = this._sceneManager.get_assets().get_context();
		var vb = minko_render_VertexBuffer.createbyData(context,[-1.0,1.0,0.0,1.0,-1.0,-1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,0.0,0.0,1.0,-1.0,1.0,0.0]);
		vb.addAttribute("position",2);
		vb.addAttribute("uv",2,2);
		var p = minko_data_Provider.create();
		p.set("postProcessingPosition",vb.attribute("position"));
		p.set("postProcessingUV",vb.attribute("uv"));
		this._postProcessingGeom = minko_geometry_Geometry.createbyName();
		this._postProcessingGeom.addVertexBuffer(vb);
		this.get_target().get_data().addProvider(p);
	}
	,targetAdded: function(target) {
		if(this._effect != null) {
			target.get_data().addProviderbyName(this._effect.get_data(),"effect");
		}
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.removedHandler));
		this.addedHandler(target.get_root(),target,target.get_parent());
	}
	,addedHandler: function(node,target,parent) {
		this.findSceneManager();
		this.removeRootSlot();
		this._rootDescendantAddedSlot = target.get_root().get_added().connect($bind(this,this.rootDescendantAddedHandler),Infinity);
		this._rootDescendantRemovedSlot = target.get_root().get_removed().connect($bind(this,this.rootDescendantRemovedHandler),Infinity);
		this._componentAddedSlot = target.get_root().get_componentAdded().connect($bind(this,this.componentAddedHandler),Infinity);
		this._componentRemovedSlot = target.get_root().get_componentRemoved().connect($bind(this,this.componentRemovedHandler),Infinity);
		this.reset();
		this.rootDescendantAddedHandler(null,target.get_root(),null);
	}
	,removeRootSlot: function() {
		if(this._rootDescendantAddedSlot != null) {
			this._rootDescendantAddedSlot.disconnect();
		}
		if(this._rootDescendantRemovedSlot != null) {
			this._rootDescendantRemovedSlot.disconnect();
		}
		if(this._componentAddedSlot != null) {
			this._componentAddedSlot.disconnect();
		}
		if(this._componentRemovedSlot != null) {
			this._componentRemovedSlot.disconnect();
		}
		this._rootDescendantAddedSlot = null;
		this._rootDescendantRemovedSlot = null;
		this._componentAddedSlot = null;
		this._componentRemovedSlot = null;
	}
	,targetRemoved: function(target) {
		this.removeRootSlot();
		if(this._addedSlot != null) {
			this._addedSlot.disconnect();
		}
		if(this._removedSlot != null) {
			this._removedSlot.disconnect();
		}
		if(this._renderingBeginSlot != null) {
			this._renderingBeginSlot.disconnect();
		}
		this._addedSlot = null;
		this._removedSlot = null;
		this._renderingBeginSlot = null;
		this._surfaceChangedSlots = null;
		this._drawCallPool.clear();
		if(this._effect != null) {
			target.get_data().removeProviderbyName(this._effect.get_data(),"effect");
		}
	}
	,removedHandler: function(node,target,parent) {
		this.findSceneManager();
		this.removeRootSlot();
		this.rootDescendantRemovedHandler(null,target.get_root(),null);
	}
	,rootDescendantAddedHandler: function(node,target,parent) {
		var surfaceNodes = minko_scene_NodeSet.createbyNode(target).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaceNodes.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = surfaceNode.getComponents(minko_component_Surface);
			while(_g2 < _g3.length) {
				var surface = _g3[_g2];
				++_g2;
				this.addToCollect(surface);
			}
		}
	}
	,rootDescendantRemovedHandler: function(node,target,parent) {
		var surfaceNodes = minko_scene_NodeSet.createbyNode(target).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaceNodes.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = surfaceNode.getComponents(minko_component_Surface);
			while(_g2 < _g3.length) {
				var surface = _g3[_g2];
				++_g2;
				this.unwatchSurface(surface,surfaceNode);
				this.removeSurface(surface);
			}
		}
	}
	,componentAddedHandler: function(node,target,ctrl) {
		var _gthis = this;
		if(js_Boot.__instanceof(ctrl,minko_component_Surface)) {
			var surfaceCtrl = js_Boot.__cast(ctrl , minko_component_Surface);
			this.addToCollect(surfaceCtrl);
		} else if(js_Boot.__instanceof(ctrl,minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(ctrl , minko_component_SceneManager);
			this.setSceneManager(sceneManager);
		} else if(js_Boot.__instanceof(ctrl,minko_component_PerspectiveCamera)) {
			var perspectiveCamera = js_Boot.__cast(ctrl , minko_component_PerspectiveCamera);
			this._worldToScreenMatrixPropertyChangedSlot = perspectiveCamera.get_target().get_data().getPropertyChanged("worldToScreenMatrix").connect(function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
				_gthis._mustZSort = true;
			});
		}
	}
	,addToCollect: function(surfaceCtrl) {
		this._toCollect.push(surfaceCtrl);
	}
	,componentRemovedHandler: function(node,target,cmp) {
		if(js_Boot.__instanceof(cmp,minko_component_Surface)) {
			var surface = js_Boot.__cast(cmp , minko_component_Surface);
			this.unwatchSurface(surface,target);
			this.removeSurface(surface);
		} else if(js_Boot.__instanceof(cmp,minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(cmp , minko_component_SceneManager);
			this.setSceneManager(null);
		} else if(js_Boot.__instanceof(cmp,minko_component_PerspectiveCamera)) {
			var perspectiveCamera = js_Boot.__cast(cmp , minko_component_PerspectiveCamera);
			this._worldToScreenMatrixPropertyChangedSlot = null;
		}
	}
	,addSurface: function(surface) {
		if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null) {
			throw new js__$Boot_HaxeError("surface");
		}
		if(this._surfaceChangedSlots.h.__keys__[surface.__id__] != null == false) {
			this._surfaceChangedSlots.set(surface,[]);
		}
		if(this._effect != null || surface.get_effect() != null) {
			if(!this.checkSurfaceLayout(surface)) {
				return;
			}
			var variables = [].concat(this._variables);
			variables.push(new minko_Tuple("surfaceUuid",surface.get_uuid()));
			variables.push(new minko_Tuple("geometryUuid",surface.get_geometry().get_uuid()));
			variables.push(new minko_Tuple("materialUuid",surface.get_material().get_uuid()));
			variables.push(new minko_Tuple("effectUuid",this._effect != null ? this._effect.get_uuid() : surface.get_effect().get_uuid()));
			var drawCalls = this._drawCallPool.addDrawCalls(this._effect != null ? this._effect : surface.get_effect(),this._effect != null ? this._effectTechnique : surface.get_technique(),variables,surface.get_target().get_root().get_data(),this.get_target().get_data(),surface.get_target().get_data());
			this._surfaceToDrawCallIterator.set(surface,drawCalls);
			this._surfaceChangedSlots.h[surface.__id__].push(surface.get_geometryChanged().connect($bind(this,this.surfaceGeometryOrMaterialChangedHandler)));
			this._surfaceChangedSlots.h[surface.__id__].push(surface.get_materialChanged().connect($bind(this,this.surfaceGeometryOrMaterialChangedHandler)));
		}
		this._surfaceChangedSlots.h[surface.__id__].push(surface.get_effectChanged().connect($bind(this,this.surfaceEffectChangedHandler)));
	}
	,removeSurface: function(surface) {
		HxOverrides.remove(this._toCollect,surface);
		if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null == true) {
			this._drawCallPool.removeDrawCalls(this._surfaceToDrawCallIterator.h[surface.__id__]);
			this._surfaceToDrawCallIterator.remove(surface);
			var changedSlots = this._surfaceChangedSlots.h[surface.__id__];
			var _g = 0;
			while(_g < changedSlots.length) {
				var s = changedSlots[_g];
				++_g;
				s.disconnect();
			}
			this._surfaceChangedSlots.remove(surface);
		}
	}
	,surfaceGeometryOrMaterialChangedHandler: function(surface) {
		var variables = [].concat(this._variables);
		variables.push(new minko_Tuple("surfaceUuid",surface.get_uuid()));
		variables.push(new minko_Tuple("geometryUuid",surface.get_geometry().get_uuid()));
		variables.push(new minko_Tuple("materialUuid",surface.get_material().get_uuid()));
		variables.push(new minko_Tuple("effectUuid",this._effect != null ? this._effect.get_uuid() : surface.get_effect().get_uuid()));
		this._drawCallPool.invalidateDrawCalls(this._surfaceToDrawCallIterator.h[surface.__id__],variables);
	}
	,surfaceEffectChangedHandler: function(surface) {
		this.removeSurface(surface);
		this.addToCollect(surface);
	}
	,render: function(context,renderTarget) {
		var _gthis = this;
		if(!this._enabled) {
			return;
		}
		var forceSort = !Lambda.empty(this._toCollect);
		var _g = 0;
		var _g1 = this._toCollect;
		while(_g < _g1.length) {
			var surface = _g1[_g];
			++_g;
			this.watchSurface(surface);
			this.addSurface(surface);
		}
		this._toCollect = [];
		this._renderingBegin.execute(this);
		var rt = this._renderTarget != null ? this._renderTarget : renderTarget;
		if(this._scissorBox.z >= 0 && this._scissorBox.w >= 0) {
			context.setScissorTest(true,this._scissorBox);
		} else {
			context.setScissorTest(false,this._scissorBox);
		}
		if(rt != null) {
			context.setRenderToTexture(rt.get_id(),true);
		} else {
			context.setRenderToBackBuffer();
		}
		if(this._viewportBox.z >= 0 && this._viewportBox.w >= 0) {
			context.configureViewport(Math.floor(this._viewportBox.x),Math.floor(this._viewportBox.y),Math.floor(this._viewportBox.z),Math.floor(this._viewportBox.w));
		}
		if(this._clearBeforeRender) {
			context.clear((this._backgroundColor >> 24 & 255) / 255.0,(this._backgroundColor >> 16 & 255) / 255.0,(this._backgroundColor >> 8 & 255) / 255.0,(this._backgroundColor & 255) / 255.0);
		}
		this._drawCallPool.update(forceSort,this._mustZSort);
		this._mustZSort = false;
		var drawCallKeys = this._drawCallPool.get_drawCallsKeys();
		var drawCalls = this._drawCallPool.get_drawCalls();
		this._numDrawCalls = 0;
		this._numTriangles = 0;
		var _g2 = 0;
		while(_g2 < drawCallKeys.length) {
			var dk = drawCallKeys[_g2];
			++_g2;
			var priorityToDrawCalls = __map_reserved[dk] != null ? drawCalls.getReserved(dk) : drawCalls.h[dk];
			var drawCalls1 = priorityToDrawCalls.first;
			var _g3 = 0;
			while(_g3 < drawCalls1.length) {
				var drawCall = drawCalls1[_g3];
				++_g3;
				if(drawCall.get_enabled()) {
					drawCall.render(context,rt,_gthis._viewportBox,_gthis._backgroundColor);
					++_gthis._numDrawCalls;
					_gthis._numTriangles += drawCall.get_numTriangles();
				}
			}
			var drawCalls2 = priorityToDrawCalls.second;
			var _g4 = 0;
			while(_g4 < drawCalls2.length) {
				var drawCall1 = drawCalls2[_g4];
				++_g4;
				if(drawCall1.get_enabled()) {
					drawCall1.render(context,rt,_gthis._viewportBox,_gthis._backgroundColor);
					++_gthis._numDrawCalls;
					_gthis._numTriangles += drawCall1.get_numTriangles();
				}
			}
		}
		this._beforePresent.execute(this);
		context.present();
		this._renderingEnd.execute(this);
	}
	,clear: function(canvas) {
		var x = (this._backgroundColor >> 24 & 255) / 255.0;
		var y = (this._backgroundColor >> 16 & 255) / 255.0;
		var z = (this._backgroundColor >> 8 & 255) / 255.0;
		var w = (this._backgroundColor & 255) / 255.0;
		var this1 = new glm_Vec4Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		this1.w = w;
		var backgroundColor = this1;
		this.clearbyVector4(canvas,backgroundColor);
	}
	,clearbyVector4: function(canvas,clearColor) {
		canvas.get_context().clear(clearColor.x,clearColor.y,clearColor.z,clearColor.w);
		canvas.swapBuffers();
		canvas.get_context().clear(clearColor.x,clearColor.y,clearColor.z,clearColor.w);
	}
	,findSceneManager: function() {
		var roots = minko_scene_NodeSet.createbyNode(this.get_target()).roots().where(function(node) {
			return node.hasComponent(minko_component_SceneManager);
		});
		if(roots.get_nodes().length > 1) {
			throw new js__$Boot_HaxeError("Renderer cannot be in two separate scenes.");
		} else if(roots.get_nodes().length == 1) {
			this.setSceneManager(roots.get_nodes()[0].getComponent(minko_component_SceneManager));
		} else {
			this.setSceneManager(null);
		}
	}
	,setSceneManager: function(sceneManager) {
		if(sceneManager != this._sceneManager) {
			if(sceneManager != null) {
				this._sceneManager = sceneManager;
				this._renderingBeginSlot = this._sceneManager.get_renderingEnd().connect($bind(this,this.sceneManagerRenderingBeginHandler),this._priority);
				this.initializePostProcessingGeometry();
			} else {
				this._sceneManager = null;
				this._renderingBeginSlot = null;
				if(this._postProcessingGeom != null) {
					this.get_target().get_data().removeProviderbyName(this._postProcessingGeom.get_data(),"geometry");
					this._postProcessingGeom = null;
				}
			}
		}
	}
	,sceneManagerRenderingBeginHandler: function(sceneManager,frameId,renderTarget) {
		this.render(sceneManager.get_assets().get_context(),renderTarget);
	}
	,addFilter: function(filter,source) {
		return this;
	}
	,removeFilter: function(filter,source) {
		return this;
	}
	,surfaceLayoutMaskChangedHandler: function(surface) {
		if(this.checkSurfaceLayout(surface)) {
			this.enableDrawCalls(surface,true);
			if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null == false) {
				this.addToCollect(surface);
			}
		} else if((surface.get_target().get_layout() & 32) != 0 || (surface.get_target().get_layout() & 128) == 0) {
			this.enableDrawCalls(surface,false);
		} else if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null) {
			this.removeSurface(surface);
		}
	}
	,watchSurface: function(surface) {
		var _gthis = this;
		var node = surface.get_target();
		if(this._nodeLayoutChangedSlot.h.__keys__[node.__id__] != null == false) {
			this._nodeLayoutChangedSlot.set(node,node.get_layoutChanged().connect(function(n,t) {
				var _g = 0;
				var _g1 = t.getComponents(minko_component_Surface);
				while(_g < _g1.length) {
					var surface1 = _g1[_g];
					++_g;
					_gthis.surfaceLayoutMaskChangedHandler(surface1);
				}
			}));
		}
		if(this._surfaceLayoutMaskChangedSlot.h.__keys__[surface.__id__] != null == false) {
			this._surfaceLayoutMaskChangedSlot.set(surface,surface.get_layoutMaskChanged().connect(function(surface2) {
				_gthis.surfaceLayoutMaskChangedHandler(surface2);
			}));
		}
	}
	,unwatchSurface: function(surface,node) {
		if(this._surfaceLayoutMaskChangedSlot.h.__keys__[surface.__id__] != null) {
			this._surfaceLayoutMaskChangedSlot.h[surface.__id__].disconnect();
			this._surfaceLayoutMaskChangedSlot.remove(surface);
		}
		if(!node.hasComponent(minko_component_Surface)) {
			this._nodeLayoutChangedSlot.h[node.__id__].disconnect();
			this._nodeLayoutChangedSlot.remove(node);
		}
	}
	,checkSurfaceLayout: function(surface) {
		return (surface.get_target().get_layout() & surface.get_layoutMask() & this.get_layoutMask()) != 0;
	}
	,set_layoutMask: function(value) {
		minko_component_AbstractComponent.prototype.set_layoutMask.call(this,value);
		if(this.get_target() != null) {
			this._drawCallPool.clear();
			this.rootDescendantRemovedHandler(null,this.get_target().get_root(),null);
		}
		return value;
	}
	,enableDrawCalls: function(surface,enabled) {
		if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] == null) {
			return;
		}
		var drawCallId = this._surfaceToDrawCallIterator.h[surface.__id__];
		var _this = this._drawCallPool.get_drawCalls();
		var priorityToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(priorityToDrawCalls.hasNext()) {
			var priorityToDrawCalls1 = priorityToDrawCalls.next();
			var drawCalls = priorityToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				if(drawCall.get_batchIDs().length > 1) {
					continue;
				}
				if(drawCall.get_batchIDs()[0] == drawCallId) {
					drawCall.set_enabled(enabled);
				}
			}
			var drawCalls1 = priorityToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls1.length) {
				var drawCall1 = drawCalls1[_g1];
				++_g1;
				if(drawCall1.get_batchIDs().length > 1) {
					continue;
				}
				if(drawCall1.get_batchIDs()[0] == drawCallId) {
					drawCall1.set_enabled(enabled);
				}
			}
		}
	}
	,changeEffectOrTechnique: function(effect,technique) {
		if(effect != this._effect || technique != this._effectTechnique) {
			this._effect = effect;
			this._effectTechnique = technique;
			this.reset();
			this.rootDescendantAddedHandler(this.get_target().get_root(),this.get_target().get_root(),this.get_target().get_parent());
		}
	}
	,__class__: minko_component_Renderer
});
var minko_component_SceneManager = $hx_exports["minko"]["component"]["SceneManager"] = function(canvas) {
	minko_component_AbstractComponent.call(this);
	this._canvas = canvas;
	this._frameId = 0;
	this._time = 0.0;
	this._assets = minko_file_AssetLibrary.create(canvas.get_context());
	this._frameBegin = new minko_signal_Signal3();
	this._frameEnd = new minko_signal_Signal3();
	this._cullBegin = new minko_signal_Signal();
	this._cullEnd = new minko_signal_Signal();
	this._renderBegin = new minko_signal_Signal3();
	this._renderEnd = new minko_signal_Signal3();
	this._data = minko_data_Provider.create();
};
minko_component_SceneManager.__name__ = true;
minko_component_SceneManager.create = function(canvas) {
	var sm = new minko_component_SceneManager(canvas);
	return sm;
};
minko_component_SceneManager.__super__ = minko_component_AbstractComponent;
minko_component_SceneManager.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_canvas: function() {
		return this._canvas;
	}
	,get_frameId: function() {
		return this._frameId;
	}
	,get_assets: function() {
		return this._assets;
	}
	,get_frameBegin: function() {
		return this._frameBegin;
	}
	,get_frameEnd: function() {
		return this._frameEnd;
	}
	,get_cullingBegin: function() {
		return this._cullBegin;
	}
	,get_cullingEnd: function() {
		return this._cullEnd;
	}
	,get_renderingBegin: function() {
		return this._renderBegin;
	}
	,get_renderingEnd: function() {
		return this._renderEnd;
	}
	,get_time: function() {
		return this._time;
	}
	,targetAdded: function(target) {
		if(target.get_root() != target) {
			throw new js__$Boot_HaxeError("SceneManager must be on the root node only.");
		}
		if(target.getComponents(minko_component_SceneManager).length > 1) {
			throw new js__$Boot_HaxeError("The same root node cannot have more than one SceneManager.");
		}
		target.get_data().addProvider(this._data);
		target.get_data().addProvider(this._canvas.get_data());
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
	}
	,targetRemoved: function(target) {
		this._addedSlot = null;
		target.get_data().removeProvider(this._data);
		target.get_data().removeProvider(this._canvas.get_data());
	}
	,addedHandler: function(node,target,ancestor) {
		if(target == this.get_target()) {
			throw new js__$Boot_HaxeError("SceneManager must be on the root node only.");
		}
	}
	,nextFrame: function(time,deltaTime,renderTarget) {
		this._time = time;
		this._data.set("time",this._time);
		this._frameBegin.execute(this,time,deltaTime);
		this._cullBegin.execute(this);
		this._cullEnd.execute(this);
		this._renderBegin.execute(this,this._frameId,renderTarget);
		this._renderEnd.execute(this,this._frameId,renderTarget);
		this._frameEnd.execute(this,time,deltaTime);
		++this._frameId;
	}
	,__class__: minko_component_SceneManager
});
var minko_component_ShadowMappingTechnique = $hx_exports["minko"]["component"]["ShadowMappingTechnique"] = function(technique) {
	minko_component_AbstractComponent.call(this);
	this._technique = technique;
	this._data = minko_data_Provider.create();
	this._data.set("shadowMappingTechnique",technique);
};
minko_component_ShadowMappingTechnique.__name__ = true;
minko_component_ShadowMappingTechnique.create = function(technique) {
	return new minko_component_ShadowMappingTechnique(technique);
};
minko_component_ShadowMappingTechnique.__super__ = minko_component_AbstractComponent;
minko_component_ShadowMappingTechnique.prototype = $extend(minko_component_AbstractComponent.prototype,{
	targetAdded: function(target) {
		target.get_data().addProvider(this._data);
	}
	,__class__: minko_component_ShadowMappingTechnique
});
var minko_component_Skinning = $hx_exports["minko"]["component"]["Skinning"] = function(skin,method,context,skeletonRoot,moveTargetBelowRoot,isLooping) {
	minko_component_AbstractAnimation.call(this,isLooping);
	this._skin = skin;
	this._context = context;
	this._method = method;
	this._skeletonRoot = skeletonRoot;
	this._moveTargetBelowRoot = moveTargetBelowRoot;
	this._boneVertexBuffer = null;
	this._targetGeometry = new haxe_ds_ObjectMap();
	this._targetInputPositions = new haxe_ds_ObjectMap();
	this._targetInputNormals = new haxe_ds_ObjectMap();
};
minko_component_Skinning.__name__ = true;
minko_component_Skinning.create = function(skin,method,context,skeletonRoot,moveTargetBelowRoot,isLooping) {
	if(isLooping == null) {
		isLooping = true;
	}
	if(moveTargetBelowRoot == null) {
		moveTargetBelowRoot = false;
	}
	var ptr = new minko_component_Skinning(skin,method,context,skeletonRoot,moveTargetBelowRoot,isLooping);
	ptr.initialize();
	return ptr;
};
minko_component_Skinning.__super__ = minko_component_AbstractAnimation;
minko_component_Skinning.prototype = $extend(minko_component_AbstractAnimation.prototype,{
	clone: function(option) {
		var skin = minko_component_Skinning.create(null,null,null,null).copyFromSkinning(this,option);
		skin.initialize();
		return skin;
	}
	,get_skin: function() {
		return this._skin;
	}
	,initialize: function() {
		minko_component_AbstractAnimation.prototype.initialize.call(this);
		if(this._skin == null) {
			throw new js__$Boot_HaxeError("skin");
		}
		if(this._context == null) {
			throw new js__$Boot_HaxeError("context");
		}
		if(this._method != 0 && this._skin.get_maxNumVertexBones() > minko_component_Skinning.MAX_NUM_BONES_PER_VERTEX) {
			var error_msg = "The maximum number of bones per vertex gets too high (" + this._skin.get_maxNumVertexBones() + ") to propose hardware skinning (max allowed = " + minko_component_Skinning.MAX_NUM_BONES_PER_VERTEX + ")";
			this._method = 0;
		}
		this._boneVertexBuffer = this._method == 0 ? null : this.createVertexBufferForBones();
		this._maxTime = this._skin.get_duration();
		this.setPlaybackWindow(0,this._maxTime);
		this.seek(0);
	}
	,targetAdded: function(target) {
		minko_component_AbstractAnimation.prototype.targetAdded.call(this,target);
		if(this._skeletonRoot == null || !this._moveTargetBelowRoot) {
			return;
		}
		if(target.get_parent() != null) {
			target.get_parent().removeChild(target);
		}
		this._skeletonRoot.addChild(target);
		if(target.hasComponent(minko_component_Transform)) {
			var transform = target.getComponent(minko_component_Transform);
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			dest._00 = 1;
			dest._10 = 0;
			dest._20 = 0;
			dest._30 = 0;
			dest._01 = 0;
			dest._11 = 1;
			dest._21 = 0;
			dest._31 = 0;
			dest._02 = 0;
			dest._12 = 0;
			dest._22 = 1;
			dest._32 = 0;
			dest._03 = 0;
			dest._13 = 0;
			dest._23 = 0;
			dest._33 = 1;
			transform.set_matrix(dest);
		}
		if(target.hasComponent(minko_component_MasterAnimation)) {
			var masterAnimation = target.getComponent(minko_component_MasterAnimation);
			masterAnimation.initAnimations();
		}
	}
	,copyFromSkinning: function(skinning,option) {
		this.copyFrom(skinning,option);
		this._skin = new minko_geometry_Skin();
		this._context = skinning._context;
		this._method = skinning._method;
		this._skeletonRoot = skinning._skeletonRoot;
		this._moveTargetBelowRoot = skinning._moveTargetBelowRoot;
		this._boneVertexBuffer = null;
		this._targetGeometry = new haxe_ds_ObjectMap();
		this._targetInputPositions = new haxe_ds_ObjectMap();
		this._targetInputNormals = new haxe_ds_ObjectMap();
		this._skin = skinning._skin.clone();
		var targetGeometry = skinning._targetGeometry;
		var it = targetGeometry.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			this._targetGeometry.set(it1,targetGeometry.h[it1.__id__]);
		}
		return this;
	}
	,addedHandler: function(node,target,parent) {
		minko_component_AbstractAnimation.prototype.addedHandler.call(this,node,target,parent);
		if(this._skin.get_duration() == 0) {
			return;
		}
		if(node.getComponents(minko_component_Surface).length > 1) {
			throw new js__$Boot_HaxeError("Warning: The skinning component is not intended to work on node with several surfaces. Attempts to apply skinning to first surface.");
		}
		if(node.hasComponent(minko_component_Surface)) {
			var geometry = (js_Boot.__cast(node.getComponent(minko_component_Surface) , minko_component_Surface)).get_geometry();
			if(geometry.hasVertexAttribute(minko_component_Skinning.ATTRNAME_POSITION) && geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_POSITION).get_numVertices() == this._skin.get_numVertices() && !geometry.hasVertexBuffer(this._boneVertexBuffer)) {
				this._targetGeometry.set(node,geometry);
				this._targetInputPositions.set(node,geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_POSITION).get_data());
				if(geometry.hasVertexAttribute(minko_component_Skinning.ATTRNAME_NORMAL) && geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_NORMAL).get_numVertices() == this._skin.get_numVertices()) {
					this._targetInputNormals.set(node,geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_NORMAL).get_data());
				}
				if(this._method != 0) {
					geometry.addVertexBuffer(this._boneVertexBuffer);
					geometry.get_data().set(minko_component_Skinning.PNAME_BONE_MATRICES,[]);
					geometry.get_data().set(minko_component_Skinning.PNAME_NUM_BONES,0);
				}
			}
		}
	}
	,removedHandler: function(node,target,parent) {
		minko_component_AbstractAnimation.prototype.removedHandler.call(this,node,target,parent);
		if(this._targetGeometry.h.__keys__[target.__id__] != null) {
			var geometry = this._targetGeometry.h[target.__id__];
			if(this._method != 0) {
				geometry.removeVertexBuffer(this._boneVertexBuffer);
				geometry.get_data().unset(minko_component_Skinning.PNAME_BONE_MATRICES);
				geometry.get_data().unset(minko_component_Skinning.PNAME_NUM_BONES);
			}
			this._targetGeometry.remove(target);
		}
		if(this._targetInputPositions.h.__keys__[target.__id__] != null) {
			this._targetInputPositions.remove(target);
		}
		if(this._targetInputNormals.h.__keys__[target.__id__] != null) {
			this._targetInputNormals.remove(target);
		}
	}
	,update: function() {
		var frameId = this._skin.getFrameId(this._currentTime);
		this.updateFrame(frameId,this.get_target());
	}
	,updateFrame: function(frameId,target) {
		if(this._targetGeometry.h.__keys__[target.__id__] != null == false) {
			return;
		}
		var geometry = this._targetGeometry.h[target.__id__];
		var boneMatrices = this._skin.getMatrices(frameId);
		if(this._method == 1) {
			if(!geometry.get_data().hasProperty(minko_component_Skinning.PNAME_NUM_BONES) || geometry.get_data().get(minko_component_Skinning.PNAME_NUM_BONES) != this._skin.get_numBones()) {
				geometry.get_data().set(minko_component_Skinning.PNAME_NUM_BONES,this._skin.get_numBones());
			}
			geometry.get_data().set(minko_component_Skinning.PNAME_BONE_MATRICES,boneMatrices);
			geometry.get_data().set(minko_component_Skinning.PNAME_NUM_BONES,this._skin.get_numBones());
		} else {
			this.performSoftwareSkinningFrame(target,boneMatrices);
		}
	}
	,performSoftwareSkinningFrame: function(target,boneMatrices) {
		var geometry = this._targetGeometry.h[target.__id__];
		var xyzBuffer = geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_POSITION);
		var xyzAttr = xyzBuffer.attribute(minko_component_Skinning.ATTRNAME_POSITION);
		this.performSoftwareSkinning(xyzAttr,xyzBuffer,this._targetInputPositions.h[target.__id__],boneMatrices,false);
		if(geometry.hasVertexAttribute(minko_component_Skinning.ATTRNAME_NORMAL) && this._targetInputNormals.h.__keys__[target.__id__] != null) {
			var normalBuffer = geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_NORMAL);
			var normalAttr = normalBuffer.attribute(minko_component_Skinning.ATTRNAME_NORMAL);
			this.performSoftwareSkinning(normalAttr,normalBuffer,this._targetInputNormals.h[target.__id__],boneMatrices,true);
		}
	}
	,performSoftwareSkinning: function(attr,vertexBuffer,inputData,boneMatrices,doDeltaTransform) {
		var vertexSize = vertexBuffer.get_vertexSize();
		var outputData = vertexBuffer.get_data();
		var numVertices = Math.floor(outputData.length / vertexSize);
		var index = attr.offset;
		var _g1 = 0;
		var _g = numVertices;
		while(_g1 < _g) {
			var vId = _g1++;
			var this1 = new glm_Vec4Base();
			this1.x = inputData[index];
			this1.y = inputData[index + 1];
			this1.z = inputData[index + 2];
			this1.w = 1.0;
			var v1 = this1;
			var this2 = new glm_Vec4Base();
			this2.x = 0.0;
			this2.y = 0;
			this2.z = 0;
			this2.w = 0;
			var v2 = this2;
			var numVertexBones = this._skin.numVertexBones(vId);
			var _g3 = 0;
			var _g2 = numVertexBones;
			while(_g3 < _g2) {
				var j = _g3++;
				var boneId = 0;
				var boneWeight = 0.0;
				this._skin.vertexBoneData(vId,j,boneId,boneWeight);
				var boneMatrix = boneMatrices[boneId];
				if(!doDeltaTransform) {
					var this3 = new glm_Vec4Base();
					this3.x = 0;
					this3.y = 0;
					this3.z = 0;
					this3.w = 0;
					var dest = this3;
					dest.x = v1.x * boneWeight;
					dest.y = v1.y * boneWeight;
					dest.z = v1.z * boneWeight;
					dest.w = v1.w * boneWeight;
					var v = dest;
					var this4 = new glm_Vec4Base();
					this4.x = 0;
					this4.y = 0;
					this4.z = 0;
					this4.w = 0;
					var dest1 = this4;
					var x = v.x;
					var y = v.y;
					var z = v.z;
					var w = v.w;
					dest1.x = boneMatrix._00 * x + boneMatrix._10 * y + boneMatrix._20 * z + boneMatrix._30 * w;
					dest1.y = boneMatrix._01 * x + boneMatrix._11 * y + boneMatrix._21 * z + boneMatrix._31 * w;
					dest1.z = boneMatrix._02 * x + boneMatrix._12 * y + boneMatrix._22 * z + boneMatrix._32 * w;
					dest1.w = boneMatrix._03 * x + boneMatrix._13 * y + boneMatrix._23 * z + boneMatrix._33 * w;
					var b = dest1;
					var this5 = new glm_Vec4Base();
					this5.x = 0;
					this5.y = 0;
					this5.z = 0;
					this5.w = 0;
					var dest2 = this5;
					dest2.x = v2.x + b.x;
					dest2.y = v2.y + b.y;
					dest2.z = v2.z + b.z;
					dest2.w = v2.w + b.w;
					v2 = dest2;
				} else {
					var _r0c0 = boneMatrix._00;
					var _r0c1 = boneMatrix._10;
					var _r0c2 = boneMatrix._20;
					var _r1c0 = boneMatrix._01;
					var _r1c1 = boneMatrix._11;
					var _r1c2 = boneMatrix._21;
					var _r2c0 = boneMatrix._02;
					var _r2c1 = boneMatrix._22;
					var _r2c2 = boneMatrix._22;
					var this6 = new glm_Mat3Base();
					this6._00 = _r0c0;
					this6._01 = _r1c0;
					this6._02 = _r2c0;
					this6._10 = _r0c1;
					this6._11 = _r1c1;
					this6._12 = _r2c1;
					this6._20 = _r0c2;
					this6._21 = _r1c2;
					this6._22 = _r2c2;
					var mat3 = this6;
					var x1 = v1.x;
					var y1 = v1.y;
					var z1 = v1.z;
					var this7 = new glm_Vec3Base();
					this7.x = x1;
					this7.y = y1;
					this7.z = z1;
					var vec3 = this7;
					var this8 = new glm_Vec3Base();
					this8.x = 0;
					this8.y = 0;
					this8.z = 0;
					var dest3 = this8;
					dest3.x = vec3.x * boneWeight;
					dest3.y = vec3.y * boneWeight;
					dest3.z = vec3.z * boneWeight;
					var v3 = dest3;
					var this9 = new glm_Vec3Base();
					this9.x = 0;
					this9.y = 0;
					this9.z = 0;
					var dest4 = this9;
					var x2 = v3.x;
					var y2 = v3.y;
					var z2 = v3.z;
					dest4.x = mat3._00 * x2 + mat3._10 * y2 + mat3._20 * z2;
					dest4.y = mat3._01 * x2 + mat3._11 * y2 + mat3._21 * z2;
					dest4.z = mat3._02 * x2 + mat3._12 * y2 + mat3._22 * z2;
					var v4 = dest4;
					var x3 = v4.x;
					var y3 = v4.y;
					var z3 = v4.z;
					var this10 = new glm_Vec4Base();
					this10.x = x3;
					this10.y = y3;
					this10.z = z3;
					this10.w = 0;
					var b1 = this10;
					var this11 = new glm_Vec4Base();
					this11.x = 0;
					this11.y = 0;
					this11.z = 0;
					this11.w = 0;
					var dest5 = this11;
					dest5.x = v2.x + b1.x;
					dest5.y = v2.y + b1.y;
					dest5.z = v2.z + b1.z;
					dest5.w = v2.w + b1.w;
					v2 = dest5;
				}
			}
			outputData[index] = v2.x;
			outputData[index + 1] = v2.y;
			outputData[index + 2] = v2.z;
			index += vertexSize;
		}
		vertexBuffer.upload();
	}
	,createVertexBufferForBones: function() {
		var vertexSize = 16;
		var numVertices = this._skin.get_numVertices();
		var _g = [];
		var _g2 = 0;
		var _g1 = numVertices * vertexSize;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0.0);
		}
		var vertexData = _g;
		var index = 0;
		var _g21 = 0;
		var _g11 = numVertices;
		while(_g21 < _g11) {
			var vId = _g21++;
			var numVertexBones = this._skin.numVertexBones(vId);
			var j = 0;
			while(j < numVertexBones && j < vertexSize >> 2) {
				vertexData[index + j] = this._skin.vertexBoneId(vId,j);
				++j;
			}
			index += vertexSize >> 1;
			j = 0;
			while(j < numVertexBones && j < vertexSize >> 2) {
				vertexData[index + j] = this._skin.vertexBoneWeight(vId,j);
				++j;
			}
			index += vertexSize >> 1;
		}
		var vertexBuffer = minko_render_VertexBuffer.createbyData(this._context,vertexData);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_IDS_A,4,0);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_IDS_B,4,4);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_A,4,8);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_B,4,12);
		return vertexBuffer;
	}
	,rebindDependencies: function(componentsMap,nodeMap,option) {
		this._skeletonRoot = nodeMap.h[this._skeletonRoot.__id__];
		var oldSurface = null;
		var node = this._targetGeometry.keys();
		while(node.hasNext()) {
			var node1 = node.next();
			oldSurface = node1.getComponent(minko_component_Surface);
			break;
		}
		var oldGeometry = oldSurface.get_geometry();
		var componentsMapSurface = js_Boot.__cast(componentsMap.h[oldSurface.__id__] , minko_component_Surface);
		componentsMapSurface.set_geometry(oldGeometry.clone());
	}
	,__class__: minko_component_Skinning
});
var minko_component_SpotLight = $hx_exports["minko"]["component"]["SpotLight"] = function(diffuse,specular,innerAngleRadians,outerAngleRadians,attenuationConstant,attenuationLinear,attenuationQuadratic) {
	minko_component_AbstractDiscreteLight.call(this,"spotLight",diffuse,specular);
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this.updateModelToWorldMatrix(dest);
	var this2 = new glm_Vec3Base();
	this2.x = attenuationConstant;
	this2.y = attenuationLinear;
	this2.z = attenuationQuadratic;
	this.set_attenuationCoefficients(this2);
	this.set_innerConeAngle(innerAngleRadians);
	this.set_outerConeAngle(outerAngleRadians);
};
minko_component_SpotLight.__name__ = true;
minko_component_SpotLight.create = function(diffuse,specular,innerAngleRadians,outerAngleRadians,attenuationConstant,attenuationLinear,attenuationQuadratic) {
	if(attenuationQuadratic == null) {
		attenuationQuadratic = -1.0;
	}
	if(attenuationLinear == null) {
		attenuationLinear = -1.0;
	}
	if(attenuationConstant == null) {
		attenuationConstant = -1.0;
	}
	if(outerAngleRadians == null) {
		outerAngleRadians = 0.78539816339744828;
	}
	if(innerAngleRadians == null) {
		innerAngleRadians = 0.62831853071795862;
	}
	if(specular == null) {
		specular = 1.0;
	}
	if(diffuse == null) {
		diffuse = 1.0;
	}
	return new minko_component_SpotLight(diffuse,specular,innerAngleRadians,outerAngleRadians,attenuationConstant,attenuationLinear,attenuationQuadratic);
};
minko_component_SpotLight.__super__ = minko_component_AbstractDiscreteLight;
minko_component_SpotLight.prototype = $extend(minko_component_AbstractDiscreteLight.prototype,{
	clone: function(option) {
		var light = minko_component_SpotLight.create().copyFrom(this,option);
		return light;
	}
	,get_innerConeAngle: function() {
		return Math.acos(this.get_data().get("cosInnerConeAngle"));
	}
	,set_innerConeAngle: function(radians) {
		this.get_data().set("cosInnerConeAngle",Math.cos(Math.max(0.0,Math.min(0.5 * Math.PI,radians))));
		return radians;
	}
	,get_outerConeAngle: function() {
		return Math.acos(this.get_data().get("cosOuterConeAngle"));
	}
	,set_outerConeAngle: function(radians) {
		this.get_data().set("cosOuterConeAngle",Math.cos(Math.max(0.0,Math.min(0.5 * Math.PI,radians))));
		return radians;
	}
	,get_attenuationEnabled: function() {
		var coef = this.get_attenuationCoefficients();
		return !(coef.x < 0.0 || coef.y < 0.0 || coef.z < 0.0);
	}
	,get_attenuationCoefficients: function() {
		return this.get_data().get("attenuationCoeffs");
	}
	,setAttenuationCoefficients: function(constant,linear,quadratic) {
		var this1 = new glm_Vec3Base();
		this1.x = constant;
		this1.y = linear;
		this1.z = quadratic;
		return this.set_attenuationCoefficients(this1);
	}
	,set_attenuationCoefficients: function(value) {
		this.get_data().set("attenuationCoeffs",value);
		return value;
	}
	,get_position: function() {
		return this.get_data().get("position");
	}
	,updateModelToWorldMatrix: function(modelToWorld) {
		var _r0c0 = modelToWorld._00;
		var _r0c1 = modelToWorld._10;
		var _r0c2 = modelToWorld._20;
		var _r1c0 = modelToWorld._01;
		var _r1c1 = modelToWorld._11;
		var _r1c2 = modelToWorld._21;
		var _r2c0 = modelToWorld._02;
		var _r2c1 = modelToWorld._22;
		var _r2c2 = modelToWorld._22;
		var this1 = new glm_Mat3Base();
		this1._00 = _r0c0;
		this1._01 = _r1c0;
		this1._02 = _r2c0;
		this1._10 = _r0c1;
		this1._11 = _r1c1;
		this1._12 = _r2c1;
		this1._20 = _r0c2;
		this1._21 = _r1c2;
		this1._22 = _r2c2;
		var m = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0.0;
		this2.y = 0.0;
		this2.z = -1.0;
		var v = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var dest = this3;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		dest.x = m._00 * x + m._10 * y + m._20 * z;
		dest.y = m._01 * x + m._11 * y + m._21 * z;
		dest.z = m._02 * x + m._12 * y + m._22 * z;
		var v1 = dest;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest1 = this4;
		var length = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v1.x * mult;
		dest1.y = v1.y * mult;
		dest1.z = v1.z * mult;
		var tmp2 = dest1;
		var tmp = this.get_data();
		var this5 = new glm_Vec4Base();
		this5.x = 0.0;
		this5.y = 0.0;
		this5.z = 0.0;
		this5.w = 1.0;
		var v2 = this5;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var dest2 = this6;
		var x1 = v2.x;
		var y1 = v2.y;
		var z1 = v2.z;
		var w = v2.w;
		dest2.x = modelToWorld._00 * x1 + modelToWorld._10 * y1 + modelToWorld._20 * z1 + modelToWorld._30 * w;
		dest2.y = modelToWorld._01 * x1 + modelToWorld._11 * y1 + modelToWorld._21 * z1 + modelToWorld._31 * w;
		dest2.z = modelToWorld._02 * x1 + modelToWorld._12 * y1 + modelToWorld._22 * z1 + modelToWorld._32 * w;
		dest2.w = modelToWorld._03 * x1 + modelToWorld._13 * y1 + modelToWorld._23 * z1 + modelToWorld._33 * w;
		var v3 = dest2;
		var x2 = v3.x;
		var y2 = v3.y;
		var z2 = v3.z;
		var this7 = new glm_Vec3Base();
		this7.x = x2;
		this7.y = y2;
		this7.z = z2;
		tmp.set("position",this7).set("direction",tmp2);
	}
	,copyFrom: function(spotlight,option) {
		this.get_data().set("diffuse",spotlight.get_diffuse()).set("specular",spotlight.get_specular());
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
		var test = spotlight.get_attenuationCoefficients();
		this.get_data().set("attenuationCoeffs",spotlight.get_attenuationCoefficients());
		this.get_data().set("cosInnerConeAngle",spotlight.get_innerConeAngle());
		this.get_data().set("cosOuterConeAngle",spotlight.get_outerConeAngle());
		return this;
	}
	,__class__: minko_component_SpotLight
});
var minko_component_Surface = $hx_exports["minko"]["component"]["Surface"] = function(name,geometry,material,effect,technique) {
	minko_component_AbstractComponent.call(this);
	this._name = name;
	this._geometry = geometry;
	this._material = material;
	this._effect = effect;
	this._provider = minko_data_Provider.create();
	this._technique = technique;
	if(this._effect != null && !this._effect.hasTechnique(this._technique)) {
		var message = "Effect " + this._effect.get_name() + " does not provide a '" + this._technique + "' technique.";
		throw new js__$Boot_HaxeError(message);
	}
	this._geometryChanged = new minko_signal_Signal();
	this._materialChanged = new minko_signal_Signal();
	this._effectChanged = new minko_signal_Signal();
	this.initializeIndexRange(geometry);
};
minko_component_Surface.__name__ = true;
minko_component_Surface.create = function(geometry,material,effect,technique,name) {
	if(name == null) {
		name = "";
	}
	if(technique == null) {
		technique = "default";
	}
	return new minko_component_Surface(name,geometry,material,effect,technique);
};
minko_component_Surface.__super__ = minko_component_AbstractComponent;
minko_component_Surface.prototype = $extend(minko_component_AbstractComponent.prototype,{
	dispose: function() {
		minko_component_AbstractComponent.prototype.dispose.call(this);
	}
	,get_uuid: function() {
		return this._provider.get_uuid();
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(value) {
		this._name = value;
		return value;
	}
	,get_data: function() {
		return this._provider;
	}
	,get_geometry: function() {
		return this._geometry;
	}
	,set_firstIndex: function(index) {
		this.get_data().set("firstIndex",index);
		return index;
	}
	,set_numIndices: function(numIndices) {
		this.get_data().set("numIndices",numIndices);
		return numIndices;
	}
	,get_material: function() {
		return this._material;
	}
	,set_effect: function(v) {
		this._effect = v;
		return v;
	}
	,get_effect: function() {
		return this._effect;
	}
	,get_technique: function() {
		return this._technique;
	}
	,get_geometryChanged: function() {
		return this._geometryChanged;
	}
	,get_materialChanged: function() {
		return this._materialChanged;
	}
	,get_effectChanged: function() {
		return this._effectChanged;
	}
	,targetAdded: function(target) {
		var targetData = target.get_data();
		targetData.addProviderbyName(this._provider,"surface");
		targetData.addProviderbyName(this._material.get_data(),"material");
		targetData.addProviderbyName(this._geometry.get_data(),"geometry");
		if(this._effect != null) {
			targetData.addProviderbyName(this._effect.get_data(),"effect");
		}
	}
	,targetRemoved: function(target) {
		var _gthis = this;
		this._bubbleUpSlot = target.get_root().get_componentRemoved().connect(function(n,t,c) {
			_gthis._bubbleUpSlot = null;
			var targetData = target.get_data();
			targetData.removeProviderbyName(_gthis._provider,"surface");
			targetData.removeProviderbyName(_gthis._material.get_data(),"material");
			targetData.removeProviderbyName(_gthis._geometry.get_data(),"geometry");
			if(_gthis._effect != null) {
				targetData.removeProviderbyName(_gthis._effect.get_data(),"effect");
			}
		});
	}
	,set_geometry: function(value) {
		if(value == this._geometry) {
			return value;
		}
		var t = this.get_target();
		if(t != null) {
			t.get_data().removeProviderbyName(this._geometry.get_data(),"geometry");
		}
		this._geometry = value;
		if(t != null) {
			t.get_data().addProviderbyName(this._geometry.get_data(),"geometry");
		}
		this.initializeIndexRange(value);
		this._geometryChanged.execute(this);
		return value;
	}
	,set_material: function(value) {
		if(value == this._material) {
			return value;
		}
		var t = this.get_target();
		if(t != null) {
			t.get_data().removeProviderbyName(this._material.get_data(),"material");
		}
		this._material = value;
		if(t != null) {
			t.get_data().addProviderbyName(this._material.get_data(),"material");
		}
		this._materialChanged.execute(this);
		return value;
	}
	,setEffectAndTechnique: function(effect,technique) {
		if(effect == null) {
			throw new js__$Boot_HaxeError("effect");
		}
		if(!effect.hasTechnique(technique)) {
			throw new js__$Boot_HaxeError("The effect \"" + effect.get_name() + "\" does not provide the \"" + this._technique + "\" technique.");
		}
		var changed = false;
		if(effect != this._effect) {
			changed = true;
			if(this.get_target() != null) {
				if(this._effect != null) {
					this.get_target().get_data().removeProviderbyName(this._effect.get_data(),"effect");
				}
				if(effect != null) {
					this.get_target().get_data().addProviderbyName(effect.get_data(),"effect");
				}
			}
			this._effect = effect;
		}
		if(technique != this._technique) {
			changed = true;
			this._technique = technique;
			this._provider.set("technique",technique);
		}
		if(changed) {
			this._effectChanged.execute(this);
		}
	}
	,initializeIndexRange: function(geometry) {
		this.set_firstIndex(0);
		this.set_numIndices(geometry.get_data().hasProperty("numIndices") ? geometry.get_data().get("numIndices") : 0);
	}
	,__class__: minko_component_Surface
});
var minko_component_RootTransform = $hx_exports["minko"]["component"]["RootTransform"] = function() {
	minko_component_AbstractComponent.call(this);
	this._nodeTransformCache = [];
	this._nodeToId = new haxe_ds_ObjectMap();
	this._nodes = [];
	this._invalidLists = false;
	this._targetSlots = [];
	this._renderingBeginSlot = null;
	this._toAdd = [];
	this._toRemove = [];
	this._nodeToPropertyChangedSlot = new haxe_ds_ObjectMap();
};
minko_component_RootTransform.__name__ = true;
minko_component_RootTransform.create = function() {
	return new minko_component_RootTransform();
};
minko_component_RootTransform.__super__ = minko_component_AbstractComponent;
minko_component_RootTransform.prototype = $extend(minko_component_AbstractComponent.prototype,{
	dispose: function() {
		this._nodeTransformCache = null;
		this._nodeToId = null;
		var _n = this._nodeToPropertyChangedSlot.iterator();
		while(_n.hasNext()) {
			var _n1 = _n.next();
			_n1.dispose();
		}
		this._nodeToPropertyChangedSlot = null;
		var _g = 0;
		var _g1 = this._targetSlots;
		while(_g < _g1.length) {
			var _t = _g1[_g];
			++_g;
			_t.dispose();
		}
		this._targetSlots = null;
		if(this._renderingBeginSlot != null) {
			this._renderingBeginSlot.dispose();
		}
		this._renderingBeginSlot = null;
		minko_component_AbstractComponent.prototype.dispose.call(this);
	}
	,setDirty: function(target,d) {
		if(!this._invalidLists) {
			this._nodeTransformCache[this._nodeToId.h[target.__id__]]._dirty = true;
		}
	}
	,clone: function(option) {
		return minko_component_RootTransform.create();
	}
	,targetAdded: function(target) {
		this._targetSlots.push(target.get_added().connect($bind(this,this.addedHandler)));
		this._targetSlots.push(target.get_removed().connect($bind(this,this.removedHandler)));
		this._targetSlots.push(target.get_componentAdded().connect($bind(this,this.componentAddedHandler)));
		this._targetSlots.push(target.get_componentRemoved().connect($bind(this,this.componentRemovedHandler)));
		var sceneManager = target.get_root().getComponent(minko_component_SceneManager);
		if(sceneManager != null) {
			this._renderingBeginSlot = sceneManager.get_renderingBegin().connect($bind(this,this.renderingBeginHandler),1000.0);
		}
		this.addedHandler(target,target.get_root(),target.get_parent());
	}
	,targetRemoved: function(target) {
		var _g = 0;
		var _g1 = this._targetSlots;
		while(_g < _g1.length) {
			var _t = _g1[_g];
			++_g;
			_t.dispose();
		}
		this._targetSlots = [];
		if(this._renderingBeginSlot != null) {
			this._renderingBeginSlot.dispose();
		}
		this._renderingBeginSlot = null;
	}
	,componentAddedHandler: function(node,target,ctrl) {
		if(js_Boot.__instanceof(ctrl,minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(ctrl , minko_component_SceneManager);
			this._renderingBeginSlot = sceneManager.get_renderingBegin().connect($bind(this,this.renderingBeginHandler),1000.0);
		} else if(js_Boot.__instanceof(ctrl,minko_component_Transform)) {
			var removeIt = Lambda.has(this._toRemove,target);
			if(removeIt) {
				HxOverrides.remove(this._toRemove,target);
			} else {
				this._toAdd.push(target);
				this._invalidLists = true;
			}
		}
	}
	,componentRemovedHandler: function(node,target,ctrl) {
		if(js_Boot.__instanceof(ctrl,minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(ctrl , minko_component_SceneManager);
			this._renderingBeginSlot = null;
		} else if(js_Boot.__instanceof(ctrl,minko_component_Transform)) {
			var addIt = Lambda.has(this._toAdd,target);
			if(addIt) {
				HxOverrides.remove(this._toAdd,target);
			} else {
				this._toRemove.push(target);
				this._invalidLists = true;
			}
		}
	}
	,addedHandler: function(node,target,ancestor) {
		if(node.get_root() == this.get_target() && node != target) {
			var otherRoot = target.getComponent(minko_component_RootTransform);
			if(otherRoot != null) {
				this._toAdd = this._toAdd.concat(otherRoot._nodes.concat(otherRoot._toAdd));
				var _g = 0;
				var _g1 = this._toRemove;
				while(_g < _g1.length) {
					var toRemove = _g1[_g];
					++_g;
					HxOverrides.remove(this._toAdd,toRemove);
				}
				this._invalidLists = true;
				target.removeComponent(otherRoot);
			}
		}
	}
	,removedHandler: function(node,target,ancestor) {
		this._invalidLists = true;
		var withTransforms = minko_scene_NodeSet.createbyNode(target).descendants(true,false).where(function(n) {
			return n.hasComponent(minko_component_Transform);
		});
		this._toRemove = withTransforms.get_nodes().concat(this._toRemove);
	}
	,updateTransformsList: function() {
		var _gthis = this;
		if(this._toAdd.length == 0 && this._toRemove.length == 0) {
			return;
		}
		var _g = 0;
		var _g1 = this._toRemove;
		while(_g < _g1.length) {
			var toRemove = _g1[_g];
			++_g;
			this._nodeToId.remove(toRemove);
			this._nodeToPropertyChangedSlot.h[toRemove.__id__].disconnect();
			this._nodeToPropertyChangedSlot.remove(toRemove);
		}
		this._nodes = [];
		var nodeAndId = this._nodeToId.keys();
		while(nodeAndId.hasNext()) {
			var nodeAndId1 = nodeAndId.next();
			this._nodes.push(nodeAndId1);
		}
		var _g2 = 0;
		var _g11 = this._toAdd;
		while(_g2 < _g11.length) {
			var node = [_g11[_g2]];
			++_g2;
			this._nodes.push(node[0]);
			this._nodeToPropertyChangedSlot.set(node[0],node[0].get_data().getPropertyChanged("matrix").connect((function(node1) {
				return function(store,provider,propertyName) {
					_gthis._nodeTransformCache[_gthis._nodeToId.h[node1[0].__id__]]._dirty = true;
				};
			})(node)));
		}
		this._toAdd = [];
		this._toRemove = [];
		var _g3 = [];
		var _g21 = 0;
		var _g12 = this._nodes.length;
		while(_g21 < _g12) {
			var i = _g21++;
			_g3.push(new minko_component_NodeTransformCacheEntry());
		}
		this._nodeTransformCache = _g3;
		var _g13 = 0;
		var _g22 = this._nodes;
		while(_g13 < _g22.length) {
			var node2 = _g22[_g13];
			++_g13;
			var transform = node2.getComponent(minko_component_Transform);
			transform.set_dirty(true);
		}
		this.sortNodes();
		var nodeId = 0;
		var ancestor = null;
		var ancestorId = -1;
		var firstSiblingId = -1;
		var numSiblings = 0;
		var _g14 = 0;
		var _g23 = this._nodes;
		while(_g14 < _g23.length) {
			var node3 = _g23[_g14];
			++_g14;
			var previousAncestor = ancestor;
			ancestor = node3.get_parent();
			while(ancestor != null && !ancestor.hasComponent(minko_component_Transform)) ancestor = ancestor.get_parent();
			if(previousAncestor == null && ancestor == null) {
				numSiblings = 0;
			} else if(ancestor != previousAncestor) {
				if(previousAncestor == null) {
					ancestorId = this._nodeToId.h[ancestor.__id__];
					firstSiblingId = nodeId;
					++numSiblings;
				} else {
					var previousAncestorId = this._nodeToId.h[previousAncestor.__id__];
					var previousAncestorCacheEntry = this._nodeTransformCache[previousAncestorId];
					previousAncestorCacheEntry._firstChildId = firstSiblingId;
					previousAncestorCacheEntry._numChildren = numSiblings;
					firstSiblingId = nodeId;
					if(ancestor != null) {
						numSiblings = 1;
					} else {
						numSiblings = 0;
					}
					previousAncestor = ancestor;
					if(ancestor != null) {
						ancestorId = this._nodeToId.h[ancestor.__id__];
					} else {
						ancestorId = -1;
					}
				}
			} else {
				++numSiblings;
			}
			this._nodeToId.set(node3,nodeId);
			var nodeCacheEntry = this._nodeTransformCache[nodeId];
			nodeCacheEntry._node = node3;
			nodeCacheEntry._parentId = ancestorId;
			nodeCacheEntry._matrix = node3.get_data().getUnsafePointer("matrix");
			nodeCacheEntry._modelToWorldMatrix = node3.get_data().getUnsafePointer("modelToWorldMatrix");
			nodeCacheEntry._provider = (js_Boot.__cast(node3.getComponent(minko_component_Transform) , minko_component_Transform)).get_data();
			++nodeId;
		}
		if(ancestor != null) {
			ancestorId = this._nodeToId.h[ancestor.__id__];
			var ancestorCacheEntry = this._nodeTransformCache[ancestorId];
			ancestorCacheEntry._firstChildId = firstSiblingId;
			ancestorCacheEntry._numChildren = numSiblings;
		}
		this._invalidLists = false;
	}
	,sortNodes: function() {
		var sortedNodeSet = minko_scene_NodeSet.createbyNode(this._nodes[0].get_root()).descendants(true,false).where(function(descendant) {
			var transform = descendant.getComponent(minko_component_Transform);
			if(transform != null) {
				return transform.get_dirty();
			} else {
				return false;
			}
		});
		this._nodes = sortedNodeSet.get_nodes().concat([]);
	}
	,updateTransforms: function() {
		var modelToWorldMatrix = null;
		var nodeId = 0;
		var propertyName = "modelToWorldMatrix";
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			var nodeCacheEntry = this._nodeTransformCache[nodeId];
			if(nodeCacheEntry._dirty) {
				var parentId = nodeCacheEntry._parentId;
				if(parentId < 0) {
					modelToWorldMatrix = nodeCacheEntry._matrix;
				} else {
					var parentCacheEntry = this._nodeTransformCache[parentId];
					var a = parentCacheEntry._modelToWorldMatrix;
					var b = nodeCacheEntry._matrix;
					var this1 = new glm_Mat4Base();
					this1._00 = 0;
					this1._01 = 0;
					this1._02 = 0;
					this1._03 = 0;
					this1._10 = 0;
					this1._11 = 0;
					this1._12 = 0;
					this1._13 = 0;
					this1._20 = 0;
					this1._21 = 0;
					this1._22 = 0;
					this1._23 = 0;
					this1._30 = 0;
					this1._31 = 0;
					this1._32 = 0;
					this1._33 = 0;
					var dest = this1;
					var _a;
					var _b;
					if(dest == a) {
						var this2 = new glm_Mat4Base();
						this2._00 = 0;
						this2._01 = 0;
						this2._02 = 0;
						this2._03 = 0;
						this2._10 = 0;
						this2._11 = 0;
						this2._12 = 0;
						this2._13 = 0;
						this2._20 = 0;
						this2._21 = 0;
						this2._22 = 0;
						this2._23 = 0;
						this2._30 = 0;
						this2._31 = 0;
						this2._32 = 0;
						this2._33 = 0;
						var dest1 = this2;
						dest1._00 = a._00;
						dest1._10 = a._10;
						dest1._20 = a._20;
						dest1._30 = a._30;
						dest1._01 = a._01;
						dest1._11 = a._11;
						dest1._21 = a._21;
						dest1._31 = a._31;
						dest1._02 = a._02;
						dest1._12 = a._12;
						dest1._22 = a._22;
						dest1._32 = a._32;
						dest1._03 = a._03;
						dest1._13 = a._13;
						dest1._23 = a._23;
						dest1._33 = a._33;
						_a = dest1;
						_b = b;
					} else if(dest == b) {
						_a = a;
						var this3 = new glm_Mat4Base();
						this3._00 = 0;
						this3._01 = 0;
						this3._02 = 0;
						this3._03 = 0;
						this3._10 = 0;
						this3._11 = 0;
						this3._12 = 0;
						this3._13 = 0;
						this3._20 = 0;
						this3._21 = 0;
						this3._22 = 0;
						this3._23 = 0;
						this3._30 = 0;
						this3._31 = 0;
						this3._32 = 0;
						this3._33 = 0;
						var dest2 = this3;
						dest2._00 = b._00;
						dest2._10 = b._10;
						dest2._20 = b._20;
						dest2._30 = b._30;
						dest2._01 = b._01;
						dest2._11 = b._11;
						dest2._21 = b._21;
						dest2._31 = b._31;
						dest2._02 = b._02;
						dest2._12 = b._12;
						dest2._22 = b._22;
						dest2._32 = b._32;
						dest2._03 = b._03;
						dest2._13 = b._13;
						dest2._23 = b._23;
						dest2._33 = b._33;
						_b = dest2;
					} else {
						_a = a;
						_b = b;
					}
					dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
					dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
					dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
					dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
					dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
					dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
					dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
					dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
					dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
					dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
					dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
					dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
					dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
					dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
					dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
					dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
					modelToWorldMatrix = dest;
				}
				var this4 = nodeCacheEntry._modelToWorldMatrix;
				if(!(!(Math.abs(this4._00 - modelToWorldMatrix._00) >= glm_GLM.EPSILON || Math.abs(this4._10 - modelToWorldMatrix._10) >= glm_GLM.EPSILON || Math.abs(this4._20 - modelToWorldMatrix._20) >= glm_GLM.EPSILON || Math.abs(this4._30 - modelToWorldMatrix._30) >= glm_GLM.EPSILON || Math.abs(this4._01 - modelToWorldMatrix._01) >= glm_GLM.EPSILON || Math.abs(this4._11 - modelToWorldMatrix._11) >= glm_GLM.EPSILON || Math.abs(this4._21 - modelToWorldMatrix._21) >= glm_GLM.EPSILON || Math.abs(this4._31 - modelToWorldMatrix._31) >= glm_GLM.EPSILON || Math.abs(this4._02 - modelToWorldMatrix._02) >= glm_GLM.EPSILON || Math.abs(this4._12 - modelToWorldMatrix._12) >= glm_GLM.EPSILON || Math.abs(this4._22 - modelToWorldMatrix._22) >= glm_GLM.EPSILON || Math.abs(this4._32 - modelToWorldMatrix._32) >= glm_GLM.EPSILON || Math.abs(this4._03 - modelToWorldMatrix._03) >= glm_GLM.EPSILON || Math.abs(this4._13 - modelToWorldMatrix._13) >= glm_GLM.EPSILON || Math.abs(this4._23 - modelToWorldMatrix._23) >= glm_GLM.EPSILON || Math.abs(this4._33 - modelToWorldMatrix._33) >= glm_GLM.EPSILON))) {
					var nodeData = node.get_data();
					var provider = nodeCacheEntry._provider;
					var a1 = nodeCacheEntry._modelToWorldMatrix;
					a1._00 = modelToWorldMatrix._00;
					a1._10 = modelToWorldMatrix._10;
					a1._20 = modelToWorldMatrix._20;
					a1._30 = modelToWorldMatrix._30;
					a1._01 = modelToWorldMatrix._01;
					a1._11 = modelToWorldMatrix._11;
					a1._21 = modelToWorldMatrix._21;
					a1._31 = modelToWorldMatrix._31;
					a1._02 = modelToWorldMatrix._02;
					a1._12 = modelToWorldMatrix._12;
					a1._22 = modelToWorldMatrix._22;
					a1._32 = modelToWorldMatrix._32;
					a1._03 = modelToWorldMatrix._03;
					a1._13 = modelToWorldMatrix._13;
					a1._23 = modelToWorldMatrix._23;
					a1._33 = modelToWorldMatrix._33;
					nodeData.get_propertyChanged().execute(nodeData,provider,propertyName);
					if(nodeData.hasPropertyChangedSignal("modelToWorldMatrix")) {
						nodeData.getPropertyChanged("modelToWorldMatrix").execute(nodeData,provider,propertyName);
					}
					var numChildren = nodeCacheEntry._numChildren;
					if(numChildren > 0) {
						var firstChildId = nodeCacheEntry._firstChildId;
						var lastChildId = firstChildId + numChildren;
						var _g3 = firstChildId;
						var _g2 = lastChildId;
						while(_g3 < _g2) {
							var childId = _g3++;
							var childCacheEntry = this._nodeTransformCache[childId];
							childCacheEntry._dirty = true;
						}
					}
				}
				nodeCacheEntry._dirty = false;
				var transform = node.getComponent(minko_component_Transform);
				transform.set_dirty(false);
			}
			++nodeId;
		}
	}
	,forceUpdate: function(node,updateTransformLists) {
		if(this._invalidLists || updateTransformLists) {
			this.updateTransformsList();
		}
		this.updateTransforms();
	}
	,renderingBeginHandler: function(sceneManager,frameId,abstractTexture) {
		if(this._invalidLists) {
			this.updateTransformsList();
		}
		this.updateTransforms();
	}
	,__class__: minko_component_RootTransform
});
var minko_component_NodeTransformCacheEntry = $hx_exports["minko"]["component"]["NodeTransformCacheEntry"] = function() {
	this._node = null;
	this._matrix = null;
	this._modelToWorldMatrix = null;
	this._parentId = -1;
	this._firstChildId = -1;
	this._numChildren = 0;
	this._dirty = true;
	this._provider = null;
};
minko_component_NodeTransformCacheEntry.__name__ = true;
minko_component_NodeTransformCacheEntry.prototype = {
	__class__: minko_component_NodeTransformCacheEntry
};
var minko_component_Transform = $hx_exports["minko"]["component"]["Transform"] = function() {
	minko_component_AbstractComponent.call(this);
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this._matrix = dest;
	var this2 = new glm_Mat4Base();
	this2._00 = 0;
	this2._01 = 0;
	this2._02 = 0;
	this2._03 = 0;
	this2._10 = 0;
	this2._11 = 0;
	this2._12 = 0;
	this2._13 = 0;
	this2._20 = 0;
	this2._21 = 0;
	this2._22 = 0;
	this2._23 = 0;
	this2._30 = 0;
	this2._31 = 0;
	this2._32 = 0;
	this2._33 = 0;
	var dest1 = this2;
	dest1._00 = 1;
	dest1._10 = 0;
	dest1._20 = 0;
	dest1._30 = 0;
	dest1._01 = 0;
	dest1._11 = 1;
	dest1._21 = 0;
	dest1._31 = 0;
	dest1._02 = 0;
	dest1._12 = 0;
	dest1._22 = 1;
	dest1._32 = 0;
	dest1._03 = 0;
	dest1._13 = 0;
	dest1._23 = 0;
	dest1._33 = 1;
	this._modelToWorld = dest1;
	this._data = minko_data_Provider.create();
	this._dirty = false;
	this._data.set("matrix",this._matrix).set("modelToWorldMatrix",this._modelToWorld);
};
minko_component_Transform.__name__ = true;
minko_component_Transform.create = function() {
	var ctrl = new minko_component_Transform();
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	ctrl.set_matrix(dest);
	return ctrl;
};
minko_component_Transform.createbyMatrix4 = function(transform) {
	var ctrl = minko_component_Transform.create();
	ctrl.set_matrix(transform);
	return ctrl;
};
minko_component_Transform.__super__ = minko_component_AbstractComponent;
minko_component_Transform.prototype = $extend(minko_component_AbstractComponent.prototype,{
	dispose: function() {
		minko_component_AbstractComponent.prototype.dispose.call(this);
		if(this._addedSlot != null) {
			this._addedSlot.dispose();
		}
		this._addedSlot = null;
		if(this._removedSlot != null) {
			this._removedSlot.dispose();
		}
		this._removedSlot = null;
		this._modelToWorld = null;
		this._matrix = null;
		if(this._data != null) {
			this._data.dispose();
		}
		this._data = null;
	}
	,clone: function(option) {
		var this1 = this.get_matrix();
		var arr_0 = this1._00;
		var arr_1 = this1._01;
		var arr_2 = this1._02;
		var arr_3 = this1._03;
		var arr_4 = this1._10;
		var arr_5 = this1._11;
		var arr_6 = this1._12;
		var arr_7 = this1._13;
		var arr_8 = this1._20;
		var arr_9 = this1._21;
		var arr_10 = this1._22;
		var arr_11 = this1._23;
		var arr_12 = this1._30;
		var arr_13 = this1._31;
		var arr_14 = this1._32;
		var arr_15 = this1._33;
		var this2 = new glm_Mat4Base();
		this2._00 = arr_0;
		this2._01 = arr_1;
		this2._02 = arr_2;
		this2._03 = arr_3;
		this2._10 = arr_4;
		this2._11 = arr_5;
		this2._12 = arr_6;
		this2._13 = arr_7;
		this2._20 = arr_8;
		this2._21 = arr_9;
		this2._22 = arr_10;
		this2._23 = arr_11;
		this2._30 = arr_12;
		this2._31 = arr_13;
		this2._32 = arr_14;
		this2._33 = arr_15;
		return minko_component_Transform.createbyMatrix4(this2);
	}
	,get_data: function() {
		return this._data;
	}
	,get_dirty: function() {
		return this._dirty;
	}
	,set_dirty: function(v) {
		this._dirty = v;
		return v;
	}
	,get_matrix: function() {
		return this._matrix;
	}
	,set_matrix: function(value) {
		var b = this._matrix;
		if(!(!(Math.abs(value._00 - b._00) >= glm_GLM.EPSILON || Math.abs(value._10 - b._10) >= glm_GLM.EPSILON || Math.abs(value._20 - b._20) >= glm_GLM.EPSILON || Math.abs(value._30 - b._30) >= glm_GLM.EPSILON || Math.abs(value._01 - b._01) >= glm_GLM.EPSILON || Math.abs(value._11 - b._11) >= glm_GLM.EPSILON || Math.abs(value._21 - b._21) >= glm_GLM.EPSILON || Math.abs(value._31 - b._31) >= glm_GLM.EPSILON || Math.abs(value._02 - b._02) >= glm_GLM.EPSILON || Math.abs(value._12 - b._12) >= glm_GLM.EPSILON || Math.abs(value._22 - b._22) >= glm_GLM.EPSILON || Math.abs(value._32 - b._32) >= glm_GLM.EPSILON || Math.abs(value._03 - b._03) >= glm_GLM.EPSILON || Math.abs(value._13 - b._13) >= glm_GLM.EPSILON || Math.abs(value._23 - b._23) >= glm_GLM.EPSILON || Math.abs(value._33 - b._33) >= glm_GLM.EPSILON))) {
			var a = this._matrix;
			a._00 = value._00;
			a._10 = value._10;
			a._20 = value._20;
			a._30 = value._30;
			a._01 = value._01;
			a._11 = value._11;
			a._21 = value._21;
			a._31 = value._31;
			a._02 = value._02;
			a._12 = value._12;
			a._22 = value._22;
			a._32 = value._32;
			a._03 = value._03;
			a._13 = value._13;
			a._23 = value._23;
			a._33 = value._33;
		}
		if(this.get_target() != null) {
			var rootTransform = this.get_target().get_root().getComponent(minko_component_RootTransform);
			if(rootTransform != null) {
				rootTransform.setDirty(this.get_target(),true);
			}
		}
		return value;
	}
	,get_modelToWorldMatrix: function() {
		return this._modelToWorldMatrix(false);
	}
	,_modelToWorldMatrix: function(forceUpdate) {
		if(forceUpdate) {
			this.updateModelToWorldMatrix();
		}
		return this._modelToWorld;
	}
	,updateModelToWorldMatrix: function() {
		var rt = this.get_target().get_root().getComponent(minko_component_RootTransform);
		rt.forceUpdate(this.get_target(),true);
	}
	,targetAdded: function(target) {
		if(target.getComponents(minko_component_Transform).length > 1) {
			throw new js__$Boot_HaxeError("A node cannot have more than one Transform.");
		}
		target.get_data().addProvider(this._data);
		this._addedSlot = target.get_added().connect($bind(this,this.addedOrRemovedHandler));
		this.addedOrRemovedHandler(null,target,target.get_parent());
	}
	,addedOrRemovedHandler: function(node,target,parent) {
		if(!target.get_root().hasComponent(minko_component_RootTransform)) {
			target.get_root().addComponent(minko_component_RootTransform.create());
		}
	}
	,targetRemoved: function(target) {
		target.get_data().removeProvider(this._data);
		if(this._addedSlot != null) {
			this._addedSlot.disconnect();
		}
		this._addedSlot = null;
		if(this._removedSlot != null) {
			this._removedSlot.disconnect();
		}
		this._removedSlot = null;
	}
	,__class__: minko_component_Transform
});
var minko_data_AbstractFilter = $hx_exports["minko"]["data"]["AbstractFilter"] = function() {
	this._watchedProperties = [];
	this._currentSurface = null;
	this._currentSurfaceRemovedSlot = null;
	this._currentSurfaceTargetRemovedSlot = null;
	this._changed = new minko_signal_Signal2();
};
minko_data_AbstractFilter.__name__ = true;
minko_data_AbstractFilter.prototype = {
	get_currentSurface: function() {
		return this._currentSurface;
	}
	,get_changed: function() {
		return this._changed;
	}
	,watchProperty: function(propertyName) {
		this._watchedProperties.push(propertyName);
		this.get_changed().execute(this,null);
	}
	,unwatchProperty: function(propertyName) {
		var it = Lambda.find(this._watchedProperties,function(value) {
			return value == propertyName;
		});
		if(it == null) {
			throw new js__$Boot_HaxeError("This property is not watching currently.");
		}
		HxOverrides.remove(this._watchedProperties,propertyName);
		this.get_changed().execute(this,null);
	}
	,currentSurfaceRemovedHandler: function(UnnamedParameter1,UnnamedParameter2) {
		this.forgetCurrentSurface();
	}
	,currentSurfaceTargetRemovedHandler: function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
		this.forgetCurrentSurface();
	}
	,forgetCurrentSurface: function() {
		this._currentSurface = null;
		this._currentSurfaceRemovedSlot.disconnect();
		this._currentSurfaceRemovedSlot = null;
		this._currentSurfaceTargetRemovedSlot.disconnect();
		this._currentSurfaceTargetRemovedSlot = null;
	}
	,__class__: minko_data_AbstractFilter
};
var minko_data_Binding = $hx_exports["minko"]["data"]["Binding"] = function() {
	this.propertyName = "";
	this.source = 0;
	minko_Enable_$uuid.call(this);
	this.enable_uuid();
};
minko_data_Binding.__name__ = true;
minko_data_Binding.__super__ = minko_Enable_$uuid;
minko_data_Binding.prototype = $extend(minko_Enable_$uuid.prototype,{
	setBinding: function(propertyName,source) {
		this.propertyName = propertyName;
		this.source = source;
		return this;
	}
	,__class__: minko_data_Binding
});
var minko_data_MacroBinding = $hx_exports["minko"]["data"]["MacroBinding"] = function() {
	minko_data_Binding.call(this);
	this.minValue = -Infinity;
	this.maxValue = Infinity;
};
minko_data_MacroBinding.__name__ = true;
minko_data_MacroBinding.__super__ = minko_data_Binding;
minko_data_MacroBinding.prototype = $extend(minko_data_Binding.prototype,{
	setBindingMinMax: function(min,max) {
		this.minValue = min;
		this.maxValue = max;
	}
	,dispose: function() {
	}
	,__class__: minko_data_MacroBinding
});
var minko_data_BindingMapBase = $hx_exports["minko"]["data"]["BindingMapBase"] = function() {
	minko_Enable_$uuid.call(this);
	this.defaultValues = new minko_data_Store();
	this.bindings = new haxe_ds_StringMap();
};
minko_data_BindingMapBase.__name__ = true;
minko_data_BindingMapBase.copyFrom = function(t,m) {
	t.bindings = new haxe_ds_StringMap();
	var k = m.bindings.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		var _this = t.bindings;
		var _this1 = m.bindings;
		var value = __map_reserved[k1] != null ? _this1.getReserved(k1) : _this1.h[k1];
		if(__map_reserved[k1] != null) {
			_this.setReserved(k1,value);
		} else {
			_this.h[k1] = value;
		}
	}
	t.defaultValues = new minko_data_Store();
	t.defaultValues.copyFrom(m.defaultValues,true);
	return t;
};
minko_data_BindingMapBase.__super__ = minko_Enable_$uuid;
minko_data_BindingMapBase.prototype = $extend(minko_Enable_$uuid.prototype,{
	setBindingsAndStore: function(bindings,defaultValues) {
		this.bindings = bindings;
		this.defaultValues = defaultValues;
	}
	,dispose: function() {
	}
	,__class__: minko_data_BindingMapBase
});
var minko_data_MacroBindingMap = $hx_exports["minko"]["data"]["MacroBindingMap"] = function() {
	minko_data_BindingMapBase.call(this);
	this.types = new haxe_ds_StringMap();
	this.enable_uuid();
};
minko_data_MacroBindingMap.__name__ = true;
minko_data_MacroBindingMap.copyFrom2 = function(t,m) {
	minko_data_BindingMapBase.copyFrom(t,m);
	var ts = (js_Boot.__cast(m , minko_data_MacroBindingMap)).types;
	var key = ts.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var _this = t.types;
		var value = __map_reserved[key1] != null ? ts.getReserved(key1) : ts.h[key1];
		if(__map_reserved[key1] != null) {
			_this.setReserved(key1,value);
		} else {
			_this.h[key1] = value;
		}
	}
	return t;
};
minko_data_MacroBindingMap.stringToMacroType = function(s) {
	if(s == "int") {
		return 1;
	}
	if(s == "int2") {
		return 2;
	}
	if(s == "int3") {
		return 3;
	}
	if(s == "int4") {
		return 4;
	}
	if(s == "float") {
		return 9;
	}
	if(s == "float2") {
		return 10;
	}
	if(s == "float3") {
		return 11;
	}
	if(s == "float4") {
		return 12;
	}
	if(s == "bool") {
		return 5;
	}
	if(s == "bool2") {
		return 6;
	}
	if(s == "bool3") {
		return 7;
	}
	if(s == "bool4") {
		return 8;
	}
	return 0;
};
minko_data_MacroBindingMap.__super__ = minko_data_BindingMapBase;
minko_data_MacroBindingMap.prototype = $extend(minko_data_BindingMapBase.prototype,{
	__class__: minko_data_MacroBindingMap
});
var minko_data_Collection = $hx_exports["minko"]["data"]["Collection"] = function(name) {
	this._name = name;
	this._items = [];
	this._itemAdded = new minko_signal_Signal2();
	this._itemRemoved = new minko_signal_Signal2();
};
minko_data_Collection.__name__ = true;
minko_data_Collection.create = function(name) {
	return new minko_data_Collection(name);
};
minko_data_Collection.createbyCollection = function(collection,deepCopy) {
	if(deepCopy == null) {
		deepCopy = false;
	}
	var copy = minko_data_Collection.create(collection._name);
	if(deepCopy) {
		var _g = 0;
		var _g1 = collection._items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			copy._items.push(minko_data_Provider.createbyProvider(item));
		}
	} else {
		copy._items = collection._items;
	}
	return copy;
};
minko_data_Collection.prototype = {
	dispose: function() {
		if(this._itemAdded != null) {
			this._itemAdded.dispose();
		}
		this._itemAdded = null;
		if(this._itemRemoved != null) {
			this._itemRemoved.dispose();
		}
		this._itemRemoved = null;
		this._items = null;
	}
	,get_name: function() {
		return this._name;
	}
	,get_items: function() {
		return this._items;
	}
	,get_itemAdded: function() {
		return this._itemAdded;
	}
	,get_itemRemoved: function() {
		return this._itemRemoved;
	}
	,get_front: function() {
		return this._items[0];
	}
	,get_back: function() {
		return this._items[this._items.length - 1];
	}
	,insert: function(position,provider) {
		this._items.splice(position,0,provider);
		this._itemAdded.execute(this,provider);
		return this;
	}
	,erase: function(position) {
		var provider = this._items[position];
		return this.remove(provider);
	}
	,remove: function(provider) {
		HxOverrides.remove(this._items,provider);
		this._itemRemoved.execute(this,provider);
		return this;
	}
	,pushBack: function(provider) {
		this._items.push(provider);
		this._itemAdded.execute(this,provider);
		return this;
	}
	,popBack: function() {
		var provider = this._items.pop();
		this._itemRemoved.execute(this,provider);
		return this;
	}
	,__class__: minko_data_Collection
};
var minko_data_PixelData = $hx_exports["minko"]["data"]["PixelData"] = function(w,h,p) {
	this.width = w;
	this.height = h;
	this.pixels = p;
};
minko_data_PixelData.__name__ = true;
minko_data_PixelData.prototype = {
	__class__: minko_data_PixelData
};
var minko_data_Provider = $hx_exports["minko"]["data"]["Provider"] = function() {
	minko_Enable_$uuid.call(this);
	this._values = new haxe_ds_StringMap();
	this._propertyAdded = new minko_signal_Signal2();
	this._propertyChanged = new minko_signal_Signal2();
	this._propertyRemoved = new minko_signal_Signal2();
	this.enable_uuid();
};
minko_data_Provider.__name__ = true;
minko_data_Provider.create = function() {
	var provider = new minko_data_Provider();
	return provider;
};
minko_data_Provider.createbyUuid = function(uuid) {
	var provider = new minko_data_Provider();
	provider.set_uuid(uuid);
	return provider;
};
minko_data_Provider.createbyStringMap = function(values) {
	var provider = new minko_data_Provider();
	provider.setProvider(values);
	return provider;
};
minko_data_Provider.createbyProvider = function(source) {
	var provider = minko_data_Provider.create();
	return provider.copyFrom(source);
};
minko_data_Provider.__super__ = minko_Enable_$uuid;
minko_data_Provider.prototype = $extend(minko_Enable_$uuid.prototype,{
	dispose: function() {
		if(this._values != null) {
			this._values = null;
		}
		if(this._propertyAdded != null) {
			this._propertyAdded.dispose();
		}
		if(this._propertyChanged != null) {
			this._propertyChanged.dispose();
		}
		if(this._propertyRemoved != null) {
			this._propertyRemoved.dispose();
		}
		this._propertyAdded = null;
		this._propertyChanged = null;
		this._propertyRemoved = null;
	}
	,front: function() {
		var _this = this._values;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys()).next();
	}
	,hasProperty: function(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,get_values: function() {
		return this._values;
	}
	,get_propertyAdded: function() {
		return this._propertyAdded;
	}
	,get_propertyChanged: function() {
		return this._propertyChanged;
	}
	,get_propertyRemoved: function() {
		return this._propertyRemoved;
	}
	,get: function(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	,getUnsafePointer: function(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	,set: function(propertyName,value) {
		if(this.hasProperty(propertyName)) {
			var _this = this._values;
			var ptr = __map_reserved[propertyName] != null ? _this.getReserved(propertyName) : _this.h[propertyName];
			var changed = ptr != value;
			var _this1 = this._values;
			var value1 = value;
			if(__map_reserved[propertyName] != null) {
				_this1.setReserved(propertyName,value1);
			} else {
				_this1.h[propertyName] = value1;
			}
			if(changed) {
				this._propertyChanged.execute(this,propertyName);
			}
		} else {
			var _this2 = this._values;
			var value2 = value;
			if(__map_reserved[propertyName] != null) {
				_this2.setReserved(propertyName,value2);
			} else {
				_this2.h[propertyName] = value2;
			}
			this._propertyAdded.execute(this,propertyName);
			this._propertyChanged.execute(this,propertyName);
		}
		return this;
	}
	,setProvider: function(values) {
		var p = values.keys();
		while(p.hasNext()) {
			var p1 = p.next();
			var value = __map_reserved[p1] != null ? values.getReserved(p1) : values.h[p1];
			var _this = this._values;
			var value1 = value;
			if(__map_reserved[p1] != null) {
				_this.setReserved(p1,value1);
			} else {
				_this.h[p1] = value1;
			}
		}
	}
	,propertyHasType: function(propertyName) {
		var _this = this._values;
		return (__map_reserved[propertyName] != null ? _this.getReserved(propertyName) : _this.h[propertyName]) != null;
	}
	,clear: function() {
		this._values = new haxe_ds_StringMap();
	}
	,unset: function(propertyName) {
		var _this = this._values;
		var propertyIt = __map_reserved[propertyName] != null ? _this.getReserved(propertyName) : _this.h[propertyName];
		if(propertyIt != null) {
			this._values.remove(propertyName);
			this._propertyRemoved.execute(this,propertyName);
		}
	}
	,copyFrom: function(source) {
		var nameAnd = source._values.keys();
		while(nameAnd.hasNext()) {
			var nameAnd1 = nameAnd.next();
			var _this = this._values;
			var value = source.get(nameAnd1);
			if(__map_reserved[nameAnd1] != null) {
				_this.setReserved(nameAnd1,value);
			} else {
				_this.h[nameAnd1] = value;
			}
		}
		return this;
	}
	,getValue: function(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	,setValue: function(propertyName,value) {
		var _this = this._values;
		var value1 = value;
		if(__map_reserved[propertyName] != null) {
			_this.setReserved(propertyName,value1);
		} else {
			_this.h[propertyName] = value1;
		}
	}
	,__class__: minko_data_Provider
});
var minko_data_ResolvedBinding = $hx_exports["minko"]["data"]["ResolvedBinding"] = function(binding,propertyName,store) {
	this.binding = binding;
	this.propertyName = propertyName;
	this.store = store;
};
minko_data_ResolvedBinding.__name__ = true;
minko_data_ResolvedBinding.prototype = {
	__class__: minko_data_ResolvedBinding
};
var minko_data_Store = $hx_exports["minko"]["data"]["Store"] = function() {
	minko_Enable_$uuid.call(this);
	this.enable_uuid();
	this.initialize();
};
minko_data_Store.__name__ = true;
minko_data_Store.getActualPropertyName = function(vars,propertyName) {
	var s = propertyName;
	var _g = 0;
	while(_g < vars.length) {
		var variableName = vars[_g];
		++_g;
		var pos = propertyName.indexOf("@{" + variableName.first + "}");
		if(pos != -1) {
			s = HxOverrides.substr(s,0,pos) + variableName.second + HxOverrides.substr(s,pos + variableName.first.length + 3,null);
			break;
		} else {
			pos = propertyName.indexOf("@" + variableName.first);
			if(pos != -1) {
				s = HxOverrides.substr(s,0,pos) + variableName.second + HxOverrides.substr(s,pos + variableName.first.length + 1,null);
				break;
			}
		}
	}
	return s;
};
minko_data_Store.__super__ = minko_Enable_$uuid;
minko_data_Store.prototype = $extend(minko_Enable_$uuid.prototype,{
	initialize: function() {
		this._providers = [];
		this._collections = [];
		this._lengthProvider = null;
		this._propertyAdded = new minko_signal_Signal3();
		this._propertyRemoved = new minko_signal_Signal3();
		this._propertyChanged = new minko_signal_Signal3();
		this._propertyNameToChangedSignal = new haxe_ds_StringMap();
		this._propertyNameToAddedSignal = new haxe_ds_StringMap();
		this._propertyNameToRemovedSignal = new haxe_ds_StringMap();
		this._propertySlots = new haxe_ds_ObjectMap();
		this._collectionItemAddedSlots = new haxe_ds_ObjectMap();
		this._collectionItemRemovedSlots = new haxe_ds_ObjectMap();
	}
	,dispose: function() {
		if(this._propertyNameToChangedSignal != null) {
			var _this = this._propertyNameToChangedSignal;
			var it = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(it.hasNext()) {
				var it1 = it.next();
				if(it1 != null) {
					it1.dispose();
				}
			}
		}
		if(this._propertyNameToAddedSignal != null) {
			var _this1 = this._propertyNameToAddedSignal;
			var it2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(it2.hasNext()) {
				var it3 = it2.next();
				if(it3 != null) {
					it3.dispose();
				}
			}
		}
		if(this._propertyNameToRemovedSignal != null) {
			var _this2 = this._propertyNameToRemovedSignal;
			var it4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(it4.hasNext()) {
				var it5 = it4.next();
				if(it5 != null) {
					it5.dispose();
				}
			}
		}
		if(this._propertySlots != null) {
			var _ps = this._propertySlots.iterator();
			while(_ps.hasNext()) {
				var _ps1 = _ps.next();
				var _g = 0;
				while(_g < _ps1.length) {
					var _p = _ps1[_g];
					++_g;
					_p.dispose();
				}
			}
			this._propertySlots = null;
		}
		if(this._collectionItemAddedSlots != null) {
			this._collectionItemAddedSlots = null;
		}
		if(this._collectionItemRemovedSlots != null) {
			this._collectionItemRemovedSlots = null;
		}
	}
	,propertyHasType: function(propertyName) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			throw new js__$Boot_HaxeError("");
		}
		return provider.propertyHasType(providerAndToken.second);
	}
	,get: function(propertyName) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			throw new js__$Boot_HaxeError("");
		}
		return provider.get(providerAndToken.second);
	}
	,getUnsafePointer: function(propertyName) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			return null;
		}
		return provider.getUnsafePointer(providerAndToken.second);
	}
	,set: function(propertyName,value) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			throw new js__$Boot_HaxeError("");
		}
		provider.set(providerAndToken.second,value);
		return this;
	}
	,get_propertyAdded: function() {
		return this._propertyAdded;
	}
	,get_propertyRemoved: function() {
		return this._propertyRemoved;
	}
	,get_propertyChanged: function() {
		return this._propertyChanged;
	}
	,getPropertyAdded: function(propertyName) {
		return this.getOrInsertSignal(this._propertyNameToAddedSignal,propertyName);
	}
	,getPropertyRemoved: function(propertyName) {
		return this.getOrInsertSignal(this._propertyNameToRemovedSignal,propertyName);
	}
	,getPropertyChanged: function(propertyName) {
		return this.getOrInsertSignal(this._propertyNameToChangedSignal,propertyName);
	}
	,get_providers: function() {
		return this._providers;
	}
	,set_providers: function(v) {
		this._providers = v;
		return v;
	}
	,get_collections: function() {
		return this._collections;
	}
	,addProvider: function(provider) {
		this.doAddProvider(provider);
	}
	,addProviderbyName: function(provider,collectionName) {
		this.addProviderToCollection(provider,collectionName);
	}
	,removeProvider: function(provider) {
		this.doRemoveProvider(provider);
	}
	,removeProviderbyName: function(provider,collectionName) {
		this.removeProviderFromCollection(provider,collectionName);
	}
	,addCollection: function(collection) {
		var _gthis = this;
		this._collections.push(collection);
		var tmp = this._collectionItemAddedSlots;
		var tmp1 = collection.get_itemAdded().connect(function(UnnamedParameter1,provider) {
			_gthis.doAddProvider(provider,collection);
		});
		tmp.set(collection,tmp1);
		var tmp2 = this._collectionItemRemovedSlots;
		var tmp3 = collection.get_itemRemoved().connect(function(UnnamedParameter11,provider1) {
			_gthis.doRemoveProvider(provider1,collection);
		});
		tmp2.set(collection,tmp3);
		if(collection.get_items().length != 0) {
			var _g = 0;
			var _g1 = collection.get_items();
			while(_g < _g1.length) {
				var provider2 = _g1[_g];
				++_g;
				this.doAddProvider(provider2,collection);
			}
		} else {
			this.updateCollectionLength(collection);
		}
	}
	,removeCollection: function(collection) {
		HxOverrides.remove(this._collections,collection);
		this._collectionItemAddedSlots.h[collection.__id__].dispose();
		this._collectionItemAddedSlots.remove(collection);
		this._collectionItemRemovedSlots.h[collection.__id__].dispose();
		this._collectionItemRemovedSlots.remove(collection);
		var _g = 0;
		var _g1 = collection.get_items();
		while(_g < _g1.length) {
			var provider = _g1[_g];
			++_g;
			this.doRemoveProvider(provider,collection);
		}
	}
	,hasProperty: function(propertyName) {
		return this.getProviderByPropertyName(propertyName).first != null;
	}
	,hasPropertyAddedSignal: function(propertyName) {
		var _this = this._propertyNameToAddedSignal;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,hasPropertyRemovedSignal: function(propertyName) {
		var _this = this._propertyNameToRemovedSignal;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,hasPropertyChangedSignal: function(propertyName) {
		var _this = this._propertyNameToChangedSignal;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,getProviderByPropertyName: function(propertyName) {
		var pos = propertyName.indexOf("[");
		if(pos != -1) {
			var collectionName = HxOverrides.substr(propertyName,0,pos);
			var _g = 0;
			var _g1 = this._collections;
			while(_g < _g1.length) {
				var collection = _g1[_g];
				++_g;
				if(collection.get_name() == collectionName) {
					var pos2 = propertyName.indexOf("]");
					var indexStr = HxOverrides.substr(propertyName,pos + 1,pos2 - pos - 1);
					var pos3 = indexStr.indexOf("-");
					var token = HxOverrides.substr(propertyName,pos2 + 2,null);
					if(pos3 != -1 && pos3 < pos2) {
						var _g2 = 0;
						var _g3 = collection.get_items();
						while(_g2 < _g3.length) {
							var provider = _g3[_g2];
							++_g2;
							if(provider.get_uuid() == indexStr && provider.hasProperty(token)) {
								return new minko_Tuple(provider,token);
							}
						}
					} else {
						var index = Std.parseInt(indexStr);
						if(index < collection.get_items().length) {
							var provider1 = collection.get_items()[index];
							if(provider1.hasProperty(token)) {
								return new minko_Tuple(provider1,token);
							}
						}
					}
					return new minko_Tuple(null,token);
				}
			}
		} else {
			var _g4 = 0;
			var _g11 = this._providers;
			while(_g4 < _g11.length) {
				var provider2 = _g11[_g4];
				++_g4;
				if(provider2.hasProperty(propertyName)) {
					return new minko_Tuple(provider2,propertyName);
				}
			}
		}
		return new minko_Tuple(null,propertyName);
	}
	,doRemoveProvider: function(provider,collection) {
		HxOverrides.remove(this._providers,provider);
		var property = provider.get_values().keys();
		while(property.hasNext()) {
			var property1 = property.next();
			this.providerPropertyRemovedHandler(provider,collection,property1);
		}
		if(this._propertySlots.h.__keys__[provider.__id__] != null) {
			var _slots = this._propertySlots.h[provider.__id__];
			var _g = 0;
			while(_g < _slots.length) {
				var s = _slots[_g];
				++_g;
				s.disconnect();
			}
			this._propertySlots.remove(provider);
		}
		if(collection == null) {
			var nameAndValue = provider.get_values().keys();
			while(nameAndValue.hasNext()) {
				var nameAndValue1 = nameAndValue.next();
				var tmp;
				var _this = this._propertyNameToChangedSignal;
				if(__map_reserved[nameAndValue1] != null ? _this.existsReserved(nameAndValue1) : _this.h.hasOwnProperty(nameAndValue1)) {
					var _this1 = this._propertyNameToChangedSignal;
					tmp = (__map_reserved[nameAndValue1] != null ? _this1.getReserved(nameAndValue1) : _this1.h[nameAndValue1]).get_numCallbacks() == 0;
				} else {
					tmp = false;
				}
				if(tmp) {
					this._propertyNameToChangedSignal.remove(nameAndValue1);
				}
			}
		} else {
			var providerIndex = collection.get_items().indexOf(provider);
			var prefix = collection.get_name() + "[" + providerIndex + "].";
			var nameAndValue2 = provider.get_values().keys();
			while(nameAndValue2.hasNext()) {
				var nameAndValue3 = nameAndValue2.next();
				var _this2 = this._propertyNameToChangedSignal;
				var key = prefix + nameAndValue3;
				if(__map_reserved[key] != null ? _this2.existsReserved(key) : _this2.h.hasOwnProperty(key)) {
					var _this3 = this._propertyNameToChangedSignal;
					var key1 = prefix + nameAndValue3;
					(__map_reserved[key1] != null ? _this3.getReserved(key1) : _this3.h[key1]).dispose();
					this._propertyNameToChangedSignal.remove(prefix + nameAndValue3);
				}
			}
			this.updateCollectionLength(collection);
			var _g1 = 0;
			var _g11 = collection.get_items();
			while(_g1 < _g11.length) {
				var provider1 = _g11[_g1];
				++_g1;
				var property2 = provider1.get_values().keys();
				while(property2.hasNext()) {
					var property3 = property2.next();
					this.executePropertySignal(provider1,collection,property3,this._propertyChanged,this._propertyNameToChangedSignal);
				}
			}
		}
	}
	,formatPropertyName: function(collection,provider,propertyName,useUuid) {
		if(useUuid == null) {
			useUuid = false;
		}
		if(collection == null) {
			return propertyName;
		}
		if(useUuid) {
			return this.formatPropertyIndexName(collection,provider.get_uuid(),propertyName);
		}
		var it = collection.get_items().indexOf(provider);
		return this.formatPropertyIndexName(collection,it == null ? "null" : "" + it,propertyName);
	}
	,formatPropertyIndexName: function(collection,index,propertyName) {
		if(collection == null) {
			return propertyName;
		}
		return collection.get_name() + "[" + index + "]." + propertyName;
	}
	,executePropertySignal: function(provider,collection,propertyName,anyChangedSignal,propertyNameToSignal) {
		anyChangedSignal.execute(this,provider,propertyName);
		if(collection != null) {
			var formattedPropertyName = this.formatPropertyName(collection,provider,propertyName,true);
			if(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.existsReserved(formattedPropertyName) : propertyNameToSignal.h.hasOwnProperty(formattedPropertyName)) {
				(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.getReserved(formattedPropertyName) : propertyNameToSignal.h[formattedPropertyName]).execute(this,provider,propertyName);
			}
			formattedPropertyName = this.formatPropertyName(collection,provider,propertyName);
			if(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.existsReserved(formattedPropertyName) : propertyNameToSignal.h.hasOwnProperty(formattedPropertyName)) {
				(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.getReserved(formattedPropertyName) : propertyNameToSignal.h[formattedPropertyName]).execute(this,provider,propertyName);
			}
		} else if(__map_reserved[propertyName] != null ? propertyNameToSignal.existsReserved(propertyName) : propertyNameToSignal.h.hasOwnProperty(propertyName)) {
			(__map_reserved[propertyName] != null ? propertyNameToSignal.getReserved(propertyName) : propertyNameToSignal.h[propertyName]).execute(this,provider,propertyName);
		}
	}
	,providerPropertyAddedHandler: function(provider,collection,propertyName) {
		this.executePropertySignal(provider,collection,propertyName,this._propertyAdded,this._propertyNameToAddedSignal);
		this.executePropertySignal(provider,collection,propertyName,this._propertyChanged,this._propertyNameToChangedSignal);
	}
	,providerPropertyRemovedHandler: function(provider,collection,propertyName) {
		this.executePropertySignal(provider,collection,propertyName,this._propertyChanged,this._propertyNameToChangedSignal);
		this.executePropertySignal(provider,collection,propertyName,this._propertyRemoved,this._propertyNameToRemovedSignal);
		var formattedName = this.formatPropertyName(collection,provider,propertyName);
		var _this = this._propertyNameToAddedSignal;
		var it = __map_reserved[formattedName] != null ? _this.getReserved(formattedName) : _this.h[formattedName];
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToAddedSignal.remove(formattedName);
		}
		var _this1 = this._propertyNameToRemovedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this1.getReserved(formattedName);
		} else {
			it = _this1.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToRemovedSignal.remove(formattedName);
		}
		var _this2 = this._propertyNameToChangedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this2.getReserved(formattedName);
		} else {
			it = _this2.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToChangedSignal.remove(formattedName);
		}
		formattedName = this.formatPropertyName(collection,provider,propertyName,true);
		var _this3 = this._propertyNameToAddedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this3.getReserved(formattedName);
		} else {
			it = _this3.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToAddedSignal.remove(formattedName);
		}
		var _this4 = this._propertyNameToRemovedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this4.getReserved(formattedName);
		} else {
			it = _this4.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToRemovedSignal.remove(formattedName);
		}
		var _this5 = this._propertyNameToChangedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this5.getReserved(formattedName);
		} else {
			it = _this5.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToChangedSignal.remove(formattedName);
		}
	}
	,addProviderToCollection: function(provider,collectionName) {
		var collectionIt = Lambda.find(this._collections,function(c) {
			return c.get_name() == collectionName;
		});
		var collection = null;
		if(collectionIt == null) {
			collection = minko_data_Collection.create(collectionName);
			this.addCollection(collection);
		} else {
			collection = collectionIt;
		}
		collection.pushBack(provider);
	}
	,removeProviderFromCollection: function(provider,collectionName) {
		var collectionIt = Lambda.find(this._collections,function(c) {
			return c.get_name() == collectionName;
		});
		if(collectionIt == null) {
			throw new js__$Boot_HaxeError("collectionName = " + collectionName);
		}
		collectionIt.remove(provider);
	}
	,doAddProvider: function(provider,collection) {
		var _gthis = this;
		this._providers.push(provider);
		this._propertySlots.set(provider,[provider.get_propertyAdded().connect(function(p,propertyName) {
			_gthis.providerPropertyAddedHandler(p,collection,propertyName);
		}),provider.get_propertyRemoved().connect(function(p1,propertyName1) {
			_gthis.providerPropertyRemovedHandler(p1,collection,propertyName1);
		}),provider.get_propertyChanged().connect(function(p2,propertyName2) {
			_gthis.executePropertySignal(p2,collection,propertyName2,_gthis._propertyChanged,_gthis._propertyNameToChangedSignal);
		})]);
		var property = provider.get_values().keys();
		while(property.hasNext()) {
			var property1 = property.next();
			this.providerPropertyAddedHandler(provider,collection,property1);
		}
		if(collection != null) {
			this.updateCollectionLength(collection);
		}
	}
	,updateCollectionLength: function(collection) {
		if(this._lengthProvider == null) {
			this._lengthProvider = minko_data_Provider.create();
			this.doAddProvider(this._lengthProvider);
		}
		this._lengthProvider.set(collection.get_name() + ".length",collection.get_items().length);
	}
	,copyFrom: function(store,deepCopy) {
		if(deepCopy == null) {
			deepCopy = false;
		}
		if(deepCopy) {
			var added = [];
			var _g = 0;
			var _g1 = store._collections;
			while(_g < _g1.length) {
				var collection = _g1[_g];
				++_g;
				added = added.concat(collection.get_items());
				this.addCollection(minko_data_Collection.createbyCollection(collection));
			}
			var _g2 = 0;
			var _g11 = store._providers;
			while(_g2 < _g11.length) {
				var provider = _g11[_g2];
				++_g2;
				var it = Lambda.has(added,provider);
				if(it == false) {
					this._providers.push(minko_data_Provider.createbyProvider(provider));
				}
			}
		} else {
			this._collections = [].concat(store._collections);
			this._providers = [].concat(store._providers);
			if(store._lengthProvider != null) {
				this._lengthProvider = minko_data_Provider.createbyProvider(store._lengthProvider);
			}
		}
		return this;
	}
	,getOrInsertSignal: function(signals,propertyName) {
		var signal;
		if(!(__map_reserved[propertyName] != null ? signals.existsReserved(propertyName) : signals.h.hasOwnProperty(propertyName))) {
			signal = new minko_signal_Signal3();
			if(__map_reserved[propertyName] != null) {
				signals.setReserved(propertyName,signal);
			} else {
				signals.h[propertyName] = signal;
			}
		} else {
			signal = __map_reserved[propertyName] != null ? signals.getReserved(propertyName) : signals.h[propertyName];
		}
		return signal;
	}
	,__class__: minko_data_Store
});
var minko_file_AbstractAssetDescriptor = $hx_exports["minko"]["file"]["AbstractAssetDescriptor"] = function() {
};
minko_file_AbstractAssetDescriptor.__name__ = true;
minko_file_AbstractAssetDescriptor.prototype = {
	get_location: function() {
		return null;
	}
	,set_location: function(l) {
		return null;
	}
	,dispose: function() {
	}
	,__class__: minko_file_AbstractAssetDescriptor
};
var minko_file_AbstractParser = $hx_exports["minko"]["file"]["AbstractParser"] = function() {
	this._progress = new minko_signal_Signal2();
	this._complete = new minko_signal_Signal();
	this._error = new minko_signal_Signal2();
};
minko_file_AbstractParser.__name__ = true;
minko_file_AbstractParser.prototype = {
	dispose: function() {
	}
	,get_progress: function() {
		return this._progress;
	}
	,get_complete: function() {
		return this._complete;
	}
	,get_error: function() {
		return this._error;
	}
	,parse: function(filename,resolvedFilename,options,data,assetLibrary) {
	}
	,__class__: minko_file_AbstractParser
};
var minko_file_AbstractProtocol = $hx_exports["minko"]["file"]["AbstractProtocol"] = function() {
	this._file = minko_file_File.create();
	this._options = minko_file_Options.empty();
	this._complete = new minko_signal_Signal();
	this._progress = new minko_signal_Signal2();
	this._error = new minko_signal_Signal2();
};
minko_file_AbstractProtocol.__name__ = true;
minko_file_AbstractProtocol.create = function() {
	return new minko_file_AbstractProtocol();
};
minko_file_AbstractProtocol.prototype = {
	dispose: function() {
	}
	,get_file: function() {
		return this._file;
	}
	,get_options: function() {
		return this._options;
	}
	,set_options: function(v) {
		this._options = v;
		return v;
	}
	,get_complete: function() {
		return this._complete;
	}
	,get_progress: function() {
		return this._progress;
	}
	,get_error: function() {
		return this._error;
	}
	,loadFile: function(filename,resolvedFilename,options) {
		this._options = options;
		this._file.set_filename(filename);
		this._file.set_resolvedFilename(resolvedFilename);
		this.load();
	}
	,load: function() {
	}
	,fileExists: function(filename) {
		return false;
	}
	,isAbsolutePath: function(filename) {
		return false;
	}
	,get_resolvedFilename: function() {
		return this._file._resolvedFilename;
	}
	,get_data: function() {
		return this._file._data;
	}
	,set_data: function(d) {
		this._file._data = d;
		return d;
	}
	,__class__: minko_file_AbstractProtocol
};
var minko_file_AssetLibrary = $hx_exports["minko"]["file"]["AssetLibrary"] = function(context) {
	this._context = context;
	this._loader = minko_file_Loader.create();
	this._materials = new haxe_ds_StringMap();
	this._geometries = new haxe_ds_StringMap();
	this._effects = new haxe_ds_StringMap();
	this._textures = new haxe_ds_StringMap();
	this._cubeTextures = new haxe_ds_StringMap();
	this._rectangleTextures = new haxe_ds_StringMap();
	this._symbols = new haxe_ds_StringMap();
	this._blobs = new haxe_ds_StringMap();
	this._scripts = new haxe_ds_StringMap();
	this._layouts = new haxe_ds_StringMap();
	this._sounds = new haxe_ds_StringMap();
	this._assetDescriptors = new haxe_ds_StringMap();
	this._parserError = new minko_signal_Signal2();
	this._ready = new minko_signal_Signal();
};
minko_file_AssetLibrary.__name__ = true;
minko_file_AssetLibrary.create = function(context) {
	var al = new minko_file_AssetLibrary(context);
	al._loader.get_options().set_context(context);
	al._loader.get_options().set_assetLibrary(al);
	return al;
};
minko_file_AssetLibrary.createbyAssetLibrary = function(original) {
	var al = minko_file_AssetLibrary.create(original._context);
	var it = original._materials.keys();
	while(it.hasNext()) {
		var it1 = it.next();
		var _this = al._materials;
		var _this1 = original._materials;
		var value = __map_reserved[it1] != null ? _this1.getReserved(it1) : _this1.h[it1];
		if(__map_reserved[it1] != null) {
			_this.setReserved(it1,value);
		} else {
			_this.h[it1] = value;
		}
	}
	var it2 = original._geometries.keys();
	while(it2.hasNext()) {
		var it3 = it2.next();
		var _this2 = al._geometries;
		var _this3 = original._geometries;
		var value1 = __map_reserved[it3] != null ? _this3.getReserved(it3) : _this3.h[it3];
		if(__map_reserved[it3] != null) {
			_this2.setReserved(it3,value1);
		} else {
			_this2.h[it3] = value1;
		}
	}
	var it4 = original._effects.keys();
	while(it4.hasNext()) {
		var it5 = it4.next();
		var _this4 = al._effects;
		var _this5 = original._effects;
		var value2 = __map_reserved[it5] != null ? _this5.getReserved(it5) : _this5.h[it5];
		if(__map_reserved[it5] != null) {
			_this4.setReserved(it5,value2);
		} else {
			_this4.h[it5] = value2;
		}
	}
	var it6 = original._textures.keys();
	while(it6.hasNext()) {
		var it7 = it6.next();
		var _this6 = al._textures;
		var _this7 = original._textures;
		var value3 = __map_reserved[it7] != null ? _this7.getReserved(it7) : _this7.h[it7];
		if(__map_reserved[it7] != null) {
			_this6.setReserved(it7,value3);
		} else {
			_this6.h[it7] = value3;
		}
	}
	var it8 = original._cubeTextures.keys();
	while(it8.hasNext()) {
		var it9 = it8.next();
		var _this8 = al._cubeTextures;
		var _this9 = original._cubeTextures;
		var value4 = __map_reserved[it9] != null ? _this9.getReserved(it9) : _this9.h[it9];
		if(__map_reserved[it9] != null) {
			_this8.setReserved(it9,value4);
		} else {
			_this8.h[it9] = value4;
		}
	}
	var it10 = original._rectangleTextures.keys();
	while(it10.hasNext()) {
		var it11 = it10.next();
		var _this10 = al._rectangleTextures;
		var _this11 = original._rectangleTextures;
		var value5 = __map_reserved[it11] != null ? _this11.getReserved(it11) : _this11.h[it11];
		if(__map_reserved[it11] != null) {
			_this10.setReserved(it11,value5);
		} else {
			_this10.h[it11] = value5;
		}
	}
	var it12 = original._symbols.keys();
	while(it12.hasNext()) {
		var it13 = it12.next();
		var _this12 = al._symbols;
		var _this13 = original._symbols;
		var value6 = __map_reserved[it13] != null ? _this13.getReserved(it13) : _this13.h[it13];
		if(__map_reserved[it13] != null) {
			_this12.setReserved(it13,value6);
		} else {
			_this12.h[it13] = value6;
		}
	}
	var it14 = original._blobs.keys();
	while(it14.hasNext()) {
		var it15 = it14.next();
		var _this14 = al._blobs;
		var _this15 = original._blobs;
		var value7 = __map_reserved[it15] != null ? _this15.getReserved(it15) : _this15.h[it15];
		if(__map_reserved[it15] != null) {
			_this14.setReserved(it15,value7);
		} else {
			_this14.h[it15] = value7;
		}
	}
	var it16 = original._scripts.keys();
	while(it16.hasNext()) {
		var it17 = it16.next();
		var _this16 = al._scripts;
		var _this17 = original._scripts;
		var value8 = __map_reserved[it17] != null ? _this17.getReserved(it17) : _this17.h[it17];
		if(__map_reserved[it17] != null) {
			_this16.setReserved(it17,value8);
		} else {
			_this16.h[it17] = value8;
		}
	}
	var it18 = original._layouts.keys();
	while(it18.hasNext()) {
		var it19 = it18.next();
		var _this18 = al._layouts;
		var _this19 = original._layouts;
		var value9 = __map_reserved[it19] != null ? _this19.getReserved(it19) : _this19.h[it19];
		if(__map_reserved[it19] != null) {
			_this18.setReserved(it19,value9);
		} else {
			_this18.h[it19] = value9;
		}
	}
	var it20 = original._assetDescriptors.keys();
	while(it20.hasNext()) {
		var it21 = it20.next();
		var _this20 = al._assetDescriptors;
		var _this21 = original._assetDescriptors;
		var value10 = __map_reserved[it21] != null ? _this21.getReserved(it21) : _this21.h[it21];
		if(__map_reserved[it21] != null) {
			_this20.setReserved(it21,value10);
		} else {
			_this20.h[it21] = value10;
		}
	}
	return al;
};
minko_file_AssetLibrary.prototype = {
	get_numGeometries: function() {
		return Lambda.count(this._geometries);
	}
	,get_numMaterials: function() {
		return Lambda.count(this._materials);
	}
	,get_numEffects: function() {
		return Lambda.count(this._effects);
	}
	,get_numTextures: function() {
		return Lambda.count(this._textures);
	}
	,get_context: function() {
		return this._context;
	}
	,get_loader: function() {
		return this._loader;
	}
	,disposeLoader: function() {
		this._loader = null;
	}
	,geometry: function(name) {
		var _this = this._geometries;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._geometries;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setGeometry: function(name,geometry) {
		var tempname = name;
		var _this = this._geometries;
		if(__map_reserved[tempname] != null ? _this.existsReserved(tempname) : _this.h.hasOwnProperty(tempname)) {
			tempname = tempname + "_" + this.get_numGeometries();
		}
		var _this1 = this._geometries;
		if(__map_reserved[tempname] != null) {
			_this1.setReserved(tempname,geometry);
		} else {
			_this1.h[tempname] = geometry;
		}
		return this;
	}
	,geometryName: function(geometry) {
		var it = this._geometries.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._geometries;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == geometry) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this geometry.");
	}
	,texture: function(name) {
		var _this = this._textures;
		var foundTextureIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundTextureIt) {
			var _this1 = this._textures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setTexture: function(name,texture) {
		var _this = this._textures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return this;
	}
	,getTextureByUuid: function(uuid,failIfNotReady) {
		var it = Lambda.find(this._textures,function(t) {
			if(t.get_sampler().uuid == uuid) {
				if(!(!failIfNotReady)) {
					return t.get_isReady();
				} else {
					return true;
				}
			} else {
				return false;
			}
		});
		return it;
	}
	,cubeTexture: function(name) {
		var _this = this._cubeTextures;
		var foundTextureIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundTextureIt) {
			var _this1 = this._cubeTextures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setCubeTexture: function(name,texture) {
		var _this = this._cubeTextures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return this;
	}
	,rectangleTexture: function(name) {
		var _this = this._rectangleTextures;
		var foundTextureIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundTextureIt) {
			var _this1 = this._rectangleTextures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setRectangleTexture: function(name,texture) {
		var _this = this._rectangleTextures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return this;
	}
	,textureName: function(texture) {
		var it = this._textures.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._textures;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == texture) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this texture.");
	}
	,symbol: function(name) {
		var _this = this._symbols;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._symbols;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setSymbol: function(name,node) {
		var _this = this._symbols;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,node);
		} else {
			_this.h[name] = node;
		}
		return this;
	}
	,symbolName: function(node) {
		var it = this._symbols.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._symbols;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == node) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this symbol.");
	}
	,material: function(name) {
		var _this = this._materials;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._materials;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setMaterial: function(name,material) {
		var mat = material;
		var _this = this._materials;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,material);
		} else {
			_this.h[name] = material;
		}
		return this;
	}
	,materialName: function(material) {
		var it = this._materials.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._materials;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == material) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this material.");
	}
	,effect: function(name) {
		var _this = this._effects;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._effects;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setEffect: function(name,effect) {
		var _this = this._effects;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,effect);
		} else {
			_this.h[name] = effect;
		}
		return this;
	}
	,effectName: function(effect) {
		var it = this._effects.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._effects;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == effect) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this effect.");
	}
	,hasBlob: function(name) {
		var _this = this._blobs;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,blob: function(name) {
		var _this = this._blobs;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			throw new js__$Boot_HaxeError("");
		}
		var _this1 = this._blobs;
		if(__map_reserved[name] != null) {
			return _this1.getReserved(name);
		} else {
			return _this1.h[name];
		}
	}
	,setBlob: function(name,blob) {
		var _this = this._blobs;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,blob);
		} else {
			_this.h[name] = blob;
		}
		return this;
	}
	,script: function(name) {
		var _this = this._scripts;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._scripts;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setScript: function(name,script) {
		var _this = this._scripts;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,script);
		} else {
			_this.h[name] = script;
		}
		return this;
	}
	,scriptName: function(script) {
		var it = this._scripts.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._scripts;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == script) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this script.");
	}
	,layout: function(name) {
		var _this = this._layouts;
		if((__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) == false) {
			var existingMask = 0;
			var layout = this._layouts.keys();
			while(layout.hasNext()) {
				var layout1 = layout.next();
				var _this1 = this._layouts;
				existingMask |= __map_reserved[layout1] != null ? _this1.getReserved(layout1) : _this1.h[layout1];
			}
			var mask = 1;
			var i = 0;
			while(i < 32 && (existingMask & mask) == 1) {
				++i;
				mask <<= 1;
				continue;
			}
			if(mask == 0) {
				throw new js__$Boot_HaxeError("");
			}
			var _this2 = this._layouts;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,mask);
			} else {
				_this2.h[name] = mask;
			}
		}
		var _this3 = this._layouts;
		if(__map_reserved[name] != null) {
			return _this3.getReserved(name);
		} else {
			return _this3.h[name];
		}
	}
	,setLayout: function(name,mask) {
		var _this = this._layouts;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,mask);
		} else {
			_this.h[name] = mask;
		}
		return this;
	}
	,sound: function(name) {
		var _this = this._sounds;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,setSound: function(name,sound) {
		var _this = this._sounds;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,sound);
		} else {
			_this.h[name] = sound;
		}
		return this;
	}
	,assetDescriptor: function(name) {
		var _this = this._assetDescriptors;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._assetDescriptors;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setAssetDescriptor: function(name,assetDescriptor) {
		var _this = this._assetDescriptors;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,assetDescriptor);
		} else {
			_this.h[name] = assetDescriptor;
		}
		return this;
	}
	,__class__: minko_file_AssetLibrary
};
var minko_file_AssetLocation = $hx_exports["minko"]["file"]["AssetLocation"] = function(filename,offset,length) {
	this.filename = filename;
	this.offset = offset;
	this.length = length;
};
minko_file_AssetLocation.__name__ = true;
minko_file_AssetLocation.prototype = {
	__class__: minko_file_AssetLocation
};
var minko_file_GLSLBlockTree = $hx_exports["minko"]["file"]["GLSLBlockTree"] = function(n) {
	this.leaf = [];
	this.node = n;
};
minko_file_GLSLBlockTree.__name__ = true;
minko_file_GLSLBlockTree.prototype = {
	__class__: minko_file_GLSLBlockTree
};
var minko_file_Block = $hx_exports["minko"]["file"]["Block"] = function() {
};
minko_file_Block.__name__ = true;
minko_file_Block.prototype = {
	dispose: function() {
	}
	,__class__: minko_file_Block
};
var minko_file_AttributeBlock = $hx_exports["minko"]["file"]["AttributeBlock"] = function() {
	minko_file_Block.call(this);
	this.bindingMap = new minko_data_BindingMapBase();
};
minko_file_AttributeBlock.__name__ = true;
minko_file_AttributeBlock.__super__ = minko_file_Block;
minko_file_AttributeBlock.prototype = $extend(minko_file_Block.prototype,{
	copyFrom: function(s) {
		minko_data_BindingMapBase.copyFrom(this.bindingMap,s.bindingMap);
		return this;
	}
	,__class__: minko_file_AttributeBlock
});
var minko_file_MacroBlock = $hx_exports["minko"]["file"]["MacroBlock"] = function() {
	minko_file_Block.call(this);
	this.bindingMap = new minko_data_MacroBindingMap();
};
minko_file_MacroBlock.__name__ = true;
minko_file_MacroBlock.__super__ = minko_file_Block;
minko_file_MacroBlock.prototype = $extend(minko_file_Block.prototype,{
	copyFrom: function(s) {
		minko_data_MacroBindingMap.copyFrom2(this.bindingMap,s.bindingMap);
		return this;
	}
	,__class__: minko_file_MacroBlock
});
var minko_file_UniformBlock = $hx_exports["minko"]["file"]["UniformBlock"] = function() {
	minko_file_Block.call(this);
	this.bindingMap = new minko_data_BindingMapBase();
};
minko_file_UniformBlock.__name__ = true;
minko_file_UniformBlock.__super__ = minko_file_Block;
minko_file_UniformBlock.prototype = $extend(minko_file_Block.prototype,{
	copyFrom: function(s) {
		minko_data_BindingMapBase.copyFrom(this.bindingMap,s.bindingMap);
		return this;
	}
	,__class__: minko_file_UniformBlock
});
var minko_file_StateBlock = $hx_exports["minko"]["file"]["StateBlock"] = function() {
	minko_file_Block.call(this);
	this.bindingMap = new minko_data_BindingMapBase();
	this.states = new minko_render_States();
	this.states.set_priority(minko_render_States.UNSET_PRIORITY_VALUE);
	this.bindingMap.defaultValues.addProvider(this.states.get_data());
};
minko_file_StateBlock.__name__ = true;
minko_file_StateBlock.__super__ = minko_file_Block;
minko_file_StateBlock.prototype = $extend(minko_file_Block.prototype,{
	copyFrom: function(s) {
		minko_data_BindingMapBase.copyFrom(this.bindingMap,s.bindingMap);
		this.states = new minko_render_States().copyFrom(s.states);
		console.log("this.states = new States().copyFrom(s.states);");
		console.log(this.states);
		this.bindingMap.defaultValues.removeProvider(this.bindingMap.defaultValues.get_providers()[0]);
		this.bindingMap.defaultValues.addProvider(this.states.get_data());
		return this;
	}
	,__class__: minko_file_StateBlock
});
var minko_file_Scope = $hx_exports["minko"]["file"]["Scope"] = function() {
	this.parent = null;
	this.children = [];
	this.attributeBlock = new minko_file_AttributeBlock();
	this.uniformBlock = new minko_file_UniformBlock();
	this.stateBlock = new minko_file_StateBlock();
	this.macroBlock = new minko_file_MacroBlock();
	this.defaultTechnique = "";
	this.passes = [];
	this.techniques = new haxe_ds_StringMap();
};
minko_file_Scope.__name__ = true;
minko_file_Scope.prototype = {
	copyFrom: function(scope) {
		this.parent = scope.parent;
		this.children = [];
		this.attributeBlock.copyFrom(scope.attributeBlock);
		this.uniformBlock.copyFrom(scope.uniformBlock);
		this.stateBlock = new minko_file_StateBlock().copyFrom(scope.stateBlock);
		this.macroBlock.copyFrom(scope.macroBlock);
		this.defaultTechnique = scope.defaultTechnique;
		this.passes = scope.passes.concat([]);
		this.techniques = scope.techniques;
		return this;
	}
	,copyFromParent: function(scope,parent) {
		this.copyFrom(scope);
		this.parent = parent;
		parent.children.push(this);
		return this;
	}
	,__class__: minko_file_Scope
};
var minko_render__$Priority_Priority_$Impl_$ = $hx_exports["minko"]["render"]["Priority"] = {};
minko_render__$Priority_Priority_$Impl_$.__name__ = true;
var minko_file_EffectParser = $hx_exports["minko"]["file"]["EffectParser"] = function() {
	minko_file_AbstractParser.call(this);
	this._effect = null;
	this._numDependencies = 0;
	this._numLoadedDependencies = 0;
	this._effectData = minko_data_Provider.create();
	this._filename = "";
	this._resolvedFilename = "";
	this._options = null;
	this._effectName = "";
	this._assetLibrary = null;
	this._globalScope = new minko_file_Scope();
	this._shaderToGLSL = new haxe_ds_ObjectMap();
	this._loaderCompleteSlots = new haxe_ds_ObjectMap();
	this._loaderErrorSlots = new haxe_ds_ObjectMap();
};
minko_file_EffectParser.__name__ = true;
minko_file_EffectParser.initialize_blendingSourceMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 1;
	if(__map_reserved["zero"] != null) {
		tmp.setReserved("zero",value);
	} else {
		tmp.h["zero"] = value;
	}
	var value1 = 2;
	if(__map_reserved["one"] != null) {
		tmp.setReserved("one",value1);
	} else {
		tmp.h["one"] = value1;
	}
	var value2 = 4;
	if(__map_reserved["color"] != null) {
		tmp.setReserved("color",value2);
	} else {
		tmp.h["color"] = value2;
	}
	var value3 = 8;
	if(__map_reserved["one_minus_src_color"] != null) {
		tmp.setReserved("one_minus_src_color",value3);
	} else {
		tmp.h["one_minus_src_color"] = value3;
	}
	var value4 = 16;
	if(__map_reserved["src_alpha"] != null) {
		tmp.setReserved("src_alpha",value4);
	} else {
		tmp.h["src_alpha"] = value4;
	}
	var value5 = 32;
	if(__map_reserved["one_minus_src_alpha"] != null) {
		tmp.setReserved("one_minus_src_alpha",value5);
	} else {
		tmp.h["one_minus_src_alpha"] = value5;
	}
	var value6 = 64;
	if(__map_reserved["dst_alpha"] != null) {
		tmp.setReserved("dst_alpha",value6);
	} else {
		tmp.h["dst_alpha"] = value6;
	}
	var value7 = 128;
	if(__map_reserved["one_minus_dst_alpha"] != null) {
		tmp.setReserved("one_minus_dst_alpha",value7);
	} else {
		tmp.h["one_minus_dst_alpha"] = value7;
	}
	return tmp;
};
minko_file_EffectParser.initialize_blendingDestinationMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 256;
	if(__map_reserved["zero"] != null) {
		tmp.setReserved("zero",value);
	} else {
		tmp.h["zero"] = value;
	}
	var value1 = 512;
	if(__map_reserved["one"] != null) {
		tmp.setReserved("one",value1);
	} else {
		tmp.h["one"] = value1;
	}
	var value2 = 1024;
	if(__map_reserved["dst_color"] != null) {
		tmp.setReserved("dst_color",value2);
	} else {
		tmp.h["dst_color"] = value2;
	}
	var value3 = 2048;
	if(__map_reserved["one_minus_dst_color"] != null) {
		tmp.setReserved("one_minus_dst_color",value3);
	} else {
		tmp.h["one_minus_dst_color"] = value3;
	}
	var value4 = 4096;
	if(__map_reserved["src_alpha_saturate"] != null) {
		tmp.setReserved("src_alpha_saturate",value4);
	} else {
		tmp.h["src_alpha_saturate"] = value4;
	}
	var value5 = 8192;
	if(__map_reserved["one_minus_src_alpha"] != null) {
		tmp.setReserved("one_minus_src_alpha",value5);
	} else {
		tmp.h["one_minus_src_alpha"] = value5;
	}
	var value6 = 16384;
	if(__map_reserved["dst_alpha"] != null) {
		tmp.setReserved("dst_alpha",value6);
	} else {
		tmp.h["dst_alpha"] = value6;
	}
	var value7 = 32768;
	if(__map_reserved["one_minus_dst_alpha"] != null) {
		tmp.setReserved("one_minus_dst_alpha",value7);
	} else {
		tmp.h["one_minus_dst_alpha"] = value7;
	}
	return tmp;
};
minko_file_EffectParser.initialize_blendingModeMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 2 | 256;
	if(__map_reserved["default"] != null) {
		tmp.setReserved("default",value);
	} else {
		tmp.h["default"] = value;
	}
	var value1 = 16 | 8192;
	if(__map_reserved["alpha"] != null) {
		tmp.setReserved("alpha",value1);
	} else {
		tmp.h["alpha"] = value1;
	}
	var value2 = 16 | 512;
	if(__map_reserved["additive"] != null) {
		tmp.setReserved("additive",value2);
	} else {
		tmp.h["additive"] = value2;
	}
	return tmp;
};
minko_file_EffectParser.initialize_compareFuncMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 0;
	if(__map_reserved["always"] != null) {
		tmp.setReserved("always",value);
	} else {
		tmp.h["always"] = value;
	}
	var value1 = 1;
	if(__map_reserved["equal"] != null) {
		tmp.setReserved("equal",value1);
	} else {
		tmp.h["equal"] = value1;
	}
	var value2 = 2;
	if(__map_reserved["greater"] != null) {
		tmp.setReserved("greater",value2);
	} else {
		tmp.h["greater"] = value2;
	}
	var value3 = 3;
	if(__map_reserved["greater_equal"] != null) {
		tmp.setReserved("greater_equal",value3);
	} else {
		tmp.h["greater_equal"] = value3;
	}
	var value4 = 4;
	if(__map_reserved["less"] != null) {
		tmp.setReserved("less",value4);
	} else {
		tmp.h["less"] = value4;
	}
	var value5 = 5;
	if(__map_reserved["less_equal"] != null) {
		tmp.setReserved("less_equal",value5);
	} else {
		tmp.h["less_equal"] = value5;
	}
	var value6 = 6;
	if(__map_reserved["never"] != null) {
		tmp.setReserved("never",value6);
	} else {
		tmp.h["never"] = value6;
	}
	var value7 = 7;
	if(__map_reserved["not_equal"] != null) {
		tmp.setReserved("not_equal",value7);
	} else {
		tmp.h["not_equal"] = value7;
	}
	return tmp;
};
minko_file_EffectParser.initialize_triangleCullingMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 0;
	if(__map_reserved["none"] != null) {
		tmp.setReserved("none",value);
	} else {
		tmp.h["none"] = value;
	}
	var value1 = 1;
	if(__map_reserved["front"] != null) {
		tmp.setReserved("front",value1);
	} else {
		tmp.h["front"] = value1;
	}
	var value2 = 2;
	if(__map_reserved["back"] != null) {
		tmp.setReserved("back",value2);
	} else {
		tmp.h["back"] = value2;
	}
	var value3 = 3;
	if(__map_reserved["both"] != null) {
		tmp.setReserved("both",value3);
	} else {
		tmp.h["both"] = value3;
	}
	return tmp;
};
minko_file_EffectParser.initialize_stencilOpMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 0;
	if(__map_reserved["keep"] != null) {
		tmp.setReserved("keep",value);
	} else {
		tmp.h["keep"] = value;
	}
	var value1 = 1;
	if(__map_reserved["zero"] != null) {
		tmp.setReserved("zero",value1);
	} else {
		tmp.h["zero"] = value1;
	}
	var value2 = 2;
	if(__map_reserved["replace"] != null) {
		tmp.setReserved("replace",value2);
	} else {
		tmp.h["replace"] = value2;
	}
	var value3 = 3;
	if(__map_reserved["incr"] != null) {
		tmp.setReserved("incr",value3);
	} else {
		tmp.h["incr"] = value3;
	}
	var value4 = 4;
	if(__map_reserved["incr_wrap"] != null) {
		tmp.setReserved("incr_wrap",value4);
	} else {
		tmp.h["incr_wrap"] = value4;
	}
	var value5 = 5;
	if(__map_reserved["decr"] != null) {
		tmp.setReserved("decr",value5);
	} else {
		tmp.h["decr"] = value5;
	}
	var value6 = 6;
	if(__map_reserved["decr_wrap"] != null) {
		tmp.setReserved("decr_wrap",value6);
	} else {
		tmp.h["decr_wrap"] = value6;
	}
	var value7 = 7;
	if(__map_reserved["invert"] != null) {
		tmp.setReserved("invert",value7);
	} else {
		tmp.h["invert"] = value7;
	}
	return tmp;
};
minko_file_EffectParser.initialize_priorityMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = minko_render__$Priority_Priority_$Impl_$.FIRST;
	if(__map_reserved["first"] != null) {
		tmp.setReserved("first",value);
	} else {
		tmp.h["first"] = value;
	}
	var value1 = minko_render__$Priority_Priority_$Impl_$.BACKGROUND;
	if(__map_reserved["background"] != null) {
		tmp.setReserved("background",value1);
	} else {
		tmp.h["background"] = value1;
	}
	var value2 = minko_render__$Priority_Priority_$Impl_$.OPAQUE;
	if(__map_reserved["opaque"] != null) {
		tmp.setReserved("opaque",value2);
	} else {
		tmp.h["opaque"] = value2;
	}
	var value3 = minko_render__$Priority_Priority_$Impl_$.TRANSPARENT;
	if(__map_reserved["transparent"] != null) {
		tmp.setReserved("transparent",value3);
	} else {
		tmp.h["transparent"] = value3;
	}
	var value4 = minko_render__$Priority_Priority_$Impl_$.LAST;
	if(__map_reserved["last"] != null) {
		tmp.setReserved("last",value4);
	} else {
		tmp.h["last"] = value4;
	}
	return tmp;
};
minko_file_EffectParser.create = function() {
	return new minko_file_EffectParser();
};
minko_file_EffectParser.__super__ = minko_file_AbstractParser;
minko_file_EffectParser.prototype = $extend(minko_file_AbstractParser.prototype,{
	get_effect: function() {
		return this._effect;
	}
	,get_effectName: function() {
		return this._effectName;
	}
	,isDynamic: function(o) {
		if(!((o instanceof Array) && o.__enum__ == null) && !(typeof(o) == "number" && ((o | 0) === o)) && typeof(o) != "number" && typeof(o) != "string" && typeof(o) != "boolean") {
			return o != null;
		} else {
			return false;
		}
	}
	,parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var root = { };
		var tempData = data.getString(0,data.length);
		try {
			root = new haxe_format_JsonParser(tempData).parseRec();
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				this._error.execute(this,resolvedFilename + ": " + e);
			} else throw(e);
		}
		this._options = options.clone();
		this._options.set_loadAsynchronously(false);
		var pos = resolvedFilename.lastIndexOf("/");
		if(pos == -1) {
			pos = resolvedFilename.lastIndexOf("\\");
		}
		if(pos != -1) {
			this._options = this._options.clone();
			this._options.set_includePaths([]);
			this._options.get_includePaths().push(HxOverrides.substr(resolvedFilename,0,pos));
		}
		this._filename = filename;
		this._resolvedFilename = resolvedFilename;
		this._assetLibrary = assetLibrary;
		if(Object.prototype.hasOwnProperty.call(root,"name")) {
			this._effectName = Reflect.field(root,"name");
		} else {
			this._effectName = filename;
		}
		this.parseGlobalScope(root,this._globalScope);
		this._effect = minko_render_Effect.create(this._effectName);
		if(this._numDependencies == this._numLoadedDependencies) {
			this.finalize();
		}
	}
	,getPriorityValue: function(name) {
		var _this = minko_file_EffectParser._priorityMap;
		var foundPriorityIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundPriorityIt) {
			var _this1 = minko_file_EffectParser._priorityMap;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			var _this2 = minko_file_EffectParser._priorityMap;
			if(__map_reserved["opaque"] != null) {
				return _this2.getReserved("opaque");
			} else {
				return _this2.h["opaque"];
			}
		}
	}
	,parseGlobalScope: function(node,scope) {
		this.parseAttributes(node,scope,scope.attributeBlock);
		this.parseUniforms(node,scope,scope.uniformBlock);
		this.parseMacros(node,scope,scope.macroBlock);
		this.parseStates(node,scope,scope.stateBlock);
		this.parsePasses(node,scope,scope.passes);
		this.parseTechniques(node,scope,scope.techniques);
	}
	,parseConfiguration: function(node) {
		var confValue = Reflect.field(node,"configuration");
		var platforms = this._options.get_platforms();
		var userFlags = this._options.get_userFlags();
		var r = false;
		if((confValue instanceof Array) && confValue.__enum__ == null) {
			var tmps = confValue;
			var _g = 0;
			while(_g < tmps.length) {
				var value = tmps[_g];
				++_g;
				if(typeof(value) == "string" && Lambda.has(platforms,value) || Lambda.has(userFlags,value)) {
					return true;
				} else if((value instanceof Array) && value.__enum__ == null) {
					var tmp = value;
					var _g1 = 0;
					while(_g1 < tmp.length) {
						var str = tmp[_g1];
						++_g1;
						if(typeof(str) == "string" && Lambda.has(platforms,str) || Lambda.has(userFlags,str)) {
							r = r;
							break;
						}
					}
				}
			}
		} else {
			return true;
		}
		return r;
	}
	,fixMissingPassPriorities: function(passes) {
		var numPasses = passes.length;
		var passOne = passes[0];
		if(numPasses == 1) {
			if(passOne.get_states().get_priority() == minko_render_States.UNSET_PRIORITY_VALUE) {
				passOne.get_states().set_priority(minko_render_States.DEFAULT_PRIORITY);
			}
		} else {
			var _g1 = 0;
			var _g = numPasses;
			while(_g1 < _g) {
				var i = _g1++;
				var pass = passes[i];
				if(pass.get_states().get_priority() == minko_render_States.UNSET_PRIORITY_VALUE) {
					var nextPassWithPriority = i + 1;
					while(nextPassWithPriority < numPasses && passes[nextPassWithPriority].get_states().get_priority() == minko_render_States.UNSET_PRIORITY_VALUE) ++nextPassWithPriority;
					if(nextPassWithPriority >= numPasses) {
						pass.get_states().set_priority(minko_render_States.DEFAULT_PRIORITY + (numPasses - i - 1));
					} else {
						pass.get_states().set_priority(nextPassWithPriority - i + passes[nextPassWithPriority].get_states().get_priority());
					}
				}
			}
		}
	}
	,parseTechniques: function(node,scope,techniques) {
		var techniquesNode = Reflect.field(node,"techniques");
		if((techniquesNode instanceof Array) && techniquesNode.__enum__ == null) {
			var tmp = techniquesNode;
			var _g = 0;
			while(_g < tmp.length) {
				var techniqueNode = tmp[_g];
				++_g;
				if(!this.parseConfiguration(techniqueNode)) {
					continue;
				}
				var techniqueNameNode = Reflect.field(techniqueNode,"name");
				var techniqueName = "";
				if(typeof(techniqueNameNode) == "string") {
					techniqueName = js_Boot.__cast(techniqueNameNode , String);
				} else if((techniqueNameNode instanceof Array) && techniqueNameNode.__enum__ == null) {
					var tmp1 = techniqueNameNode;
					if(tmp1.length == 1) {
						techniqueName = "default";
					} else {
						techniqueName = this._effectName + "-technique-" + Lambda.count(techniques);
					}
				} else {
					techniqueName = "default";
				}
				var techniqueScope = new minko_file_Scope().copyFromParent(scope,scope);
				if(!(__map_reserved[techniqueName] != null ? techniques.existsReserved(techniqueName) : techniques.h.hasOwnProperty(techniqueName))) {
					var value = [];
					if(__map_reserved[techniqueName] != null) {
						techniques.setReserved(techniqueName,value);
					} else {
						techniques.h[techniqueName] = value;
					}
				}
				this.parseAttributes(techniqueNode,techniqueScope,techniqueScope.attributeBlock);
				this.parseUniforms(techniqueNode,techniqueScope,techniqueScope.uniformBlock);
				this.parseMacros(techniqueNode,techniqueScope,techniqueScope.macroBlock);
				this.parseStates(techniqueNode,techniqueScope,techniqueScope.stateBlock);
				this.parsePasses(techniqueNode,techniqueScope,__map_reserved[techniqueName] != null ? techniques.getReserved(techniqueName) : techniques.h[techniqueName]);
				this.fixMissingPassPriorities(__map_reserved[techniqueName] != null ? techniques.getReserved(techniqueName) : techniques.h[techniqueName]);
			}
		}
	}
	,getPassToExtend: function(extendNode) {
		var pass = null;
		var passName;
		if(typeof(extendNode) == "string") {
			passName = extendNode;
			var passIt = Lambda.find(this._globalScope.passes,function(p) {
				return p.get_name() == passName;
			});
			if(passIt != null) {
				pass = passIt;
			}
		} else if(this.isDynamic(extendNode)) {
			passName = Reflect.field(extendNode,"pass");
			var techniqueName = Reflect.field(extendNode,"technique");
			var effectFilename = Reflect.field(extendNode,"effect");
			if(techniqueName == "") {
				techniqueName = "default";
			}
			if(this._assetLibrary.effect(effectFilename) == null) {
				var options = this._options.clone();
				var loader = minko_file_Loader.createbyLoader(this._assetLibrary.get_loader());
				options.set_loadAsynchronously(false);
				loader.setQueue(effectFilename,options);
				loader.load();
				pass = this.findPassFromEffectFilename(effectFilename,techniqueName,passName);
			} else {
				pass = this.findPassFromEffectFilename(effectFilename,techniqueName,passName);
			}
		} else {
			throw new js__$Boot_HaxeError("");
		}
		if(pass == null) {
			throw new js__$Boot_HaxeError("Undefined base pass with name '" + passName + "'.");
		}
		return pass;
	}
	,findPassFromEffectFilename: function(effectFilename,techniqueName,passName) {
		var effect = this._assetLibrary.effect(effectFilename);
		if(effect == null) {
			return null;
		}
		var techniqueNameAndPasses = effect.get_techniques().keys();
		while(techniqueNameAndPasses.hasNext()) {
			var techniqueNameAndPasses1 = techniqueNameAndPasses.next();
			if(techniqueNameAndPasses1 == techniqueName) {
				var _g = 0;
				var _this = effect.get_techniques();
				var _g1 = __map_reserved[techniqueNameAndPasses1] != null ? _this.getReserved(techniqueNameAndPasses1) : _this.h[techniqueNameAndPasses1];
				while(_g < _g1.length) {
					var p = _g1[_g];
					++_g;
					if(p.get_name() == passName) {
						return p;
					}
				}
			}
		}
		return null;
	}
	,parsePassDynamic: function(node,scope,passes,pass) {
		var passScope = new minko_file_Scope().copyFromParent(scope,scope);
		var vertexShader = null;
		var fragmentShader = null;
		var passName = this._effectName + "-pass" + scope.passes.length;
		var nameNode = Reflect.field(node,"name");
		var isForward = true;
		if(Object.prototype.hasOwnProperty.call(node,"extends") && pass != null) {
			var extendNode = Reflect.field(node,"extends");
			var a = passScope.attributeBlock.bindingMap.bindings;
			var b = pass.get_attributeBindings().bindings;
			var k = b.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				if(!(__map_reserved[k1] != null ? a.existsReserved(k1) : a.h.hasOwnProperty(k1))) {
					var value = __map_reserved[k1] != null ? b.getReserved(k1) : b.h[k1];
					if(__map_reserved[k1] != null) {
						a.setReserved(k1,value);
					} else {
						a.h[k1] = value;
					}
				}
			}
			var a1 = passScope.uniformBlock.bindingMap.bindings;
			var b1 = pass.get_uniformBindings().bindings;
			var k2 = b1.keys();
			while(k2.hasNext()) {
				var k3 = k2.next();
				if(!(__map_reserved[k3] != null ? a1.existsReserved(k3) : a1.h.hasOwnProperty(k3))) {
					var value1 = __map_reserved[k3] != null ? b1.getReserved(k3) : b1.h[k3];
					if(__map_reserved[k3] != null) {
						a1.setReserved(k3,value1);
					} else {
						a1.h[k3] = value1;
					}
				}
			}
			var a2 = passScope.macroBlock.bindingMap.bindings;
			var b2 = pass.get_macroBindings().bindings;
			var k4 = b2.keys();
			while(k4.hasNext()) {
				var k5 = k4.next();
				if(!(__map_reserved[k5] != null ? a2.existsReserved(k5) : a2.h.hasOwnProperty(k5))) {
					var value2 = __map_reserved[k5] != null ? b2.getReserved(k5) : b2.h[k5];
					if(__map_reserved[k5] != null) {
						a2.setReserved(k5,value2);
					} else {
						a2.h[k5] = value2;
					}
				}
			}
			var a3 = passScope.macroBlock.bindingMap.types;
			var b3 = pass.get_macroBindings().types;
			var k6 = b3.keys();
			while(k6.hasNext()) {
				var k7 = k6.next();
				if(!(__map_reserved[k7] != null ? a3.existsReserved(k7) : a3.h.hasOwnProperty(k7))) {
					var value3 = __map_reserved[k7] != null ? b3.getReserved(k7) : b3.h[k7];
					if(__map_reserved[k7] != null) {
						a3.setReserved(k7,value3);
					} else {
						a3.h[k7] = value3;
					}
				}
			}
			var a4 = passScope.stateBlock.bindingMap.bindings;
			var b4 = pass.get_stateBindings().bindings;
			var k8 = b4.keys();
			while(k8.hasNext()) {
				var k9 = k8.next();
				if(!(__map_reserved[k9] != null ? a4.existsReserved(k9) : a4.h.hasOwnProperty(k9))) {
					var value4 = __map_reserved[k9] != null ? b4.getReserved(k9) : b4.h[k9];
					if(__map_reserved[k9] != null) {
						a4.setReserved(k9,value4);
					} else {
						a4.h[k9] = value4;
					}
				}
			}
			if(pass.get_attributeBindings().defaultValues.get_providers().length > 0) {
				if(passScope.attributeBlock.bindingMap.defaultValues.get_providers().length == 0) {
					var tmp = new minko_data_Store();
					passScope.attributeBlock.bindingMap.defaultValues = tmp.copyFrom(pass.get_attributeBindings().defaultValues,true);
				} else {
					var _g = [];
					var _g1 = 0;
					var _g2 = pass.get_attributeBindings().defaultValues.get_providers();
					while(_g1 < _g2.length) {
						var provider = _g2[_g1];
						++_g1;
						_g.push(new minko_data_Provider().copyFrom(provider));
					}
					var tmp1 = _g;
					passScope.attributeBlock.bindingMap.defaultValues.set_providers(tmp1);
				}
			}
			if(pass.get_uniformBindings().defaultValues.get_providers().length > 0) {
				if(passScope.uniformBlock.bindingMap.defaultValues.get_providers().length == 0) {
					var tmp2 = new minko_data_Store();
					passScope.uniformBlock.bindingMap.defaultValues = tmp2.copyFrom(pass.get_uniformBindings().defaultValues,true);
				} else {
					var _g3 = [];
					var _g11 = 0;
					var _g21 = pass.get_uniformBindings().defaultValues.get_providers();
					while(_g11 < _g21.length) {
						var provider1 = _g21[_g11];
						++_g11;
						_g3.push(new minko_data_Provider().copyFrom(provider1));
					}
					var tmp3 = _g3;
					passScope.uniformBlock.bindingMap.defaultValues.set_providers(tmp3);
				}
			}
			if(pass.get_macroBindings().defaultValues.get_providers().length > 0) {
				if(passScope.macroBlock.bindingMap.defaultValues.get_providers().length == 0) {
					var tmp4 = new minko_data_Store();
					passScope.macroBlock.bindingMap.defaultValues = tmp4.copyFrom(pass.get_macroBindings().defaultValues,true);
				} else {
					var _g4 = [];
					var _g12 = 0;
					var _g22 = pass.get_macroBindings().defaultValues.get_providers();
					while(_g12 < _g22.length) {
						var provider2 = _g22[_g12];
						++_g12;
						_g4.push(new minko_data_Provider().copyFrom(provider2));
					}
					var tmp5 = _g4;
					passScope.macroBlock.bindingMap.defaultValues.set_providers(tmp5);
				}
			}
			passScope.stateBlock.states.set_data(minko_data_Provider.createbyProvider(pass.get_stateBindings().defaultValues.get_providers()[0]));
			passScope.stateBlock.bindingMap.defaultValues.removeProvider(passScope.stateBlock.bindingMap.defaultValues.get_providers()[0]);
			passScope.stateBlock.bindingMap.defaultValues.addProvider(passScope.stateBlock.states.get_data());
			vertexShader = pass.get_program().get_vertexShader();
			fragmentShader = pass.get_program().get_fragmentShader();
			isForward = pass.get_isForward();
			passName = pass.get_name();
		}
		if(typeof(nameNode) == "string") {
			passName = nameNode;
		}
		this.parseAttributes(node,passScope,passScope.attributeBlock);
		this.parseUniforms(node,passScope,passScope.uniformBlock);
		this.parseMacros(node,passScope,passScope.macroBlock);
		this.parseStates(node,passScope,passScope.stateBlock);
		if(Object.prototype.hasOwnProperty.call(node,"vertexShader")) {
			vertexShader = this.parseShader(Reflect.field(node,"vertexShader"),passScope,0);
		} else if(vertexShader == null) {
			throw new js__$Boot_HaxeError("Missing vertex shader for pass \"" + passName + "\"");
		}
		if(Object.prototype.hasOwnProperty.call(node,"fragmentShader")) {
			fragmentShader = this.parseShader(Reflect.field(node,"fragmentShader"),passScope,1);
		} else if(fragmentShader == null) {
			throw new js__$Boot_HaxeError("Missing fragment shader for pass \"" + passName + "\"");
		}
		if(Object.prototype.hasOwnProperty.call(node,"forward")) {
			isForward = Reflect.field(node,"forward");
		}
		if(!isForward) {
			this.checkDeferredPassBindings(passScope);
		}
		passes.push(minko_render_Pass.create(passName,isForward,minko_render_Program.createbyShader(passName,this._options.get_context(),vertexShader,fragmentShader),passScope.attributeBlock.bindingMap,passScope.uniformBlock.bindingMap,passScope.stateBlock.bindingMap,passScope.macroBlock.bindingMap));
	}
	,parsePassString: function(node,scope,passes,pass) {
		passes.push(minko_render_Pass.createbyPass(pass,true));
	}
	,parsePass: function(node,scope,passes) {
		if(typeof(node) == "string") {
			var pass = this.getPassToExtend(node);
			this.parsePassString(node,scope,passes,pass);
		} else if(this.isDynamic(node)) {
			if(Object.prototype.hasOwnProperty.call(node,"extends")) {
				var extendNode = Reflect.field(node,"extends");
				var pass1 = this.getPassToExtend(extendNode);
				this.parsePassDynamic(node,scope,passes,pass1);
			} else {
				this.parsePassDynamic(node,scope,passes,null);
			}
		}
	}
	,checkDeferredPassBindings: function(passScope) {
		var _this = passScope.attributeBlock.bindingMap.bindings;
		var bindingNameAndValue = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(bindingNameAndValue.hasNext()) {
			var bindingNameAndValue1 = bindingNameAndValue.next();
			if(bindingNameAndValue1.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
		var _this1 = passScope.uniformBlock.bindingMap.bindings;
		var bindingNameAndValue2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(bindingNameAndValue2.hasNext()) {
			var bindingNameAndValue3 = bindingNameAndValue2.next();
			if(bindingNameAndValue3.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
		var _this2 = passScope.stateBlock.bindingMap.bindings;
		var bindingNameAndValue4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(bindingNameAndValue4.hasNext()) {
			var bindingNameAndValue5 = bindingNameAndValue4.next();
			if(bindingNameAndValue5.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
		var _this3 = passScope.macroBlock.bindingMap.bindings;
		var bindingNameAndValue6 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
		while(bindingNameAndValue6.hasNext()) {
			var bindingNameAndValue7 = bindingNameAndValue6.next();
			if(bindingNameAndValue7.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
	}
	,parsePasses: function(node,scope,passes) {
		var passesNode = Reflect.field(node,"passes");
		if((passesNode instanceof Array) && passesNode.__enum__ == null) {
			var tmp = passesNode;
			var _g = 0;
			while(_g < tmp.length) {
				var passNode = tmp[_g];
				++_g;
				if(this.isDynamic(passNode) && !this.parseConfiguration(passNode)) {
					continue;
				}
				this.parsePass(passNode,scope,passes);
			}
		}
	}
	,parseDefaultValue: function(node,scope,valueName,defaultValues) {
		if(!this.isDynamic(node)) {
			return;
		}
		var memberNames = Reflect.fields(node);
		if(Lambda.has(memberNames,"default") == false) {
			return;
		}
		var defaultValueNode = Reflect.field(node,"default");
		if(this.isDynamic(defaultValueNode)) {
			this.parseDefaultValueVectorObject(defaultValueNode,scope,valueName,defaultValues);
		} else if((defaultValueNode instanceof Array) && defaultValueNode.__enum__ == null) {
			var tmps = defaultValueNode;
			if(tmps.length == 1 && ((tmps[0] instanceof Array) && tmps[0].__enum__ == null)) {
				this.parseDefaultValueVectorArray(tmps[0],scope,valueName,defaultValues);
			} else {
				throw new js__$Boot_HaxeError("");
			}
		} else if(typeof(defaultValueNode) == "boolean") {
			defaultValues.set(valueName,js_Boot.__cast(defaultValueNode , Bool) ? 1 : 0);
		} else if(typeof(defaultValueNode) == "number" && ((defaultValueNode | 0) === defaultValueNode)) {
			defaultValues.set(valueName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "number") {
			defaultValues.set(valueName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "string") {
			this.loadTexture(js_Boot.__cast(defaultValueNode , String),valueName,defaultValues);
		}
	}
	,parseDefaultValueSamplerStates: function(cls,node,scope,valueName,defaultValues) {
		if(!this.isDynamic(node)) {
			return;
		}
		var memberNames = Reflect.fields(node);
		if(Lambda.has(memberNames,"default") == false) {
			return;
		}
		var defaultValueNode = Reflect.field(node,"default");
		if(typeof(defaultValueNode) == "string") {
			if(cls == "WrapMode") {
				defaultValues.set(valueName,minko_render_SamplerStates.stringToWrapMode(defaultValueNode));
			} else if(cls == "TextureFilter") {
				defaultValues.set(valueName,minko_render_SamplerStates.stringToTextureFilter(defaultValueNode));
			} else if(cls == "MipFilter") {
				defaultValues.set(valueName,minko_render_SamplerStates.stringToMipFilter(defaultValueNode));
			}
		}
	}
	,parseDefaultValueStates: function(node,scope,stateName,defaultValues) {
		if(!this.isDynamic(node)) {
			return;
		}
		var memberNames = Reflect.fields(node);
		if(Lambda.has(memberNames,"default") == false) {
			return;
		}
		var defaultValueNode = Reflect.field(node,"default");
		if(typeof(defaultValueNode) == "boolean") {
			defaultValues.set(stateName,defaultValueNode ? 1 : 0);
		} else if(typeof(defaultValueNode) == "number" && ((defaultValueNode | 0) === defaultValueNode)) {
			defaultValues.set(stateName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "number") {
			defaultValues.set(stateName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "string") {
			defaultValues.set(stateName,defaultValueNode);
		} else if((defaultValueNode instanceof Array) && defaultValueNode.__enum__ == null) {
			if(stateName == "priority" && typeof(node[0]) == "string" && typeof(node[1]) == "number") {
				defaultValues.set(stateName,this.getPriorityValue(node[0]) + node[1]);
			} else {
				throw new js__$Boot_HaxeError("");
			}
		}
	}
	,parseDefaultValueVectorArray: function(defaultValueNode,scope,valueName,defaultValues) {
		var size = defaultValueNode.length;
		var type = defaultValueNode[0];
		if(typeof(type) == "number" && ((type | 0) === type) || typeof(type) == "number") {
			var value = [];
			var _g1 = 0;
			var _g = size;
			while(_g1 < _g) {
				var i = _g1++;
				value[i] = defaultValueNode[i];
			}
			if(size == 2) {
				var this1 = new glm_Vec2Base();
				this1.x = value[0];
				this1.y = value[1];
				defaultValues.set(valueName,this1);
			} else if(size == 3) {
				var this2 = new glm_Vec3Base();
				this2.x = value[0];
				this2.y = value[1];
				this2.z = value[2];
				defaultValues.set(valueName,this2);
			} else if(size == 4) {
				var this3 = new glm_Vec4Base();
				this3.x = value[0];
				this3.y = value[1];
				this3.z = value[2];
				this3.w = value[3];
				defaultValues.set(valueName,this3);
			}
		} else if(typeof(type) == "boolean") {
			var value1 = [];
			var _g11 = 0;
			var _g2 = size;
			while(_g11 < _g2) {
				var i1 = _g11++;
				value1[i1] = defaultValueNode[i1] ? 1 : 0;
			}
			if(size == 2) {
				var this4 = new glm_Vec2Base();
				this4.x = value1[0];
				this4.y = value1[1];
				defaultValues.set(valueName,this4);
			} else if(size == 3) {
				var this5 = new glm_Vec3Base();
				this5.x = value1[0];
				this5.y = value1[1];
				this5.z = value1[2];
				defaultValues.set(valueName,this5);
			} else if(size == 4) {
				var this6 = new glm_Vec4Base();
				this6.x = value1[0];
				this6.y = value1[1];
				this6.z = value1[2];
				this6.w = value1[3];
				defaultValues.set(valueName,this6);
			}
		}
	}
	,parseDefaultValueVectorObject: function(defaultValueNode,scope,valueName,defaultValues) {
		var memberNames = Reflect.fields(defaultValueNode);
		var size = memberNames.length;
		var type = Reflect.field(defaultValueNode,memberNames[0]);
		var offsets = ["x","y","z","w"];
		if(typeof(type) == "number" && ((type | 0) === type) || typeof(type) == "number") {
			var value = [];
			var _g1 = 0;
			var _g = size;
			while(_g1 < _g) {
				var i = _g1++;
				value[i] = Reflect.field(defaultValueNode,offsets[i]);
			}
			if(size == 2) {
				var this1 = new glm_Vec2Base();
				this1.x = value[0];
				this1.y = value[1];
				defaultValues.set(valueName,this1);
			} else if(size == 3) {
				var this2 = new glm_Vec3Base();
				this2.x = value[0];
				this2.y = value[1];
				this2.z = value[2];
				defaultValues.set(valueName,this2);
			} else if(size == 4) {
				var this3 = new glm_Vec4Base();
				this3.x = value[0];
				this3.y = value[1];
				this3.z = value[2];
				this3.w = value[3];
				defaultValues.set(valueName,this3);
			}
		} else if(typeof(type) == "boolean") {
			var value1 = [];
			var _g11 = 0;
			var _g2 = size;
			while(_g11 < _g2) {
				var i1 = _g11++;
				value1[i1] = Reflect.field(defaultValueNode,offsets[i1]) ? 1 : 0;
			}
			if(size == 2) {
				var this4 = new glm_Vec2Base();
				this4.x = value1[0];
				this4.y = value1[1];
				defaultValues.set(valueName,this4);
			} else if(size == 3) {
				var this5 = new glm_Vec3Base();
				this5.x = value1[0];
				this5.y = value1[1];
				this5.z = value1[2];
				defaultValues.set(valueName,this5);
			} else if(size == 4) {
				var this6 = new glm_Vec4Base();
				this6.x = value1[0];
				this6.y = value1[1];
				this6.z = value1[2];
				this6.w = value1[3];
				defaultValues.set(valueName,this6);
			}
		}
	}
	,parseBinding: function(node,scope,binding) {
		binding.source = 0;
		if(typeof(node) == "string") {
			binding.propertyName = node;
			return true;
		} else {
			var bindingNode = Reflect.field(node,"binding");
			if(typeof(bindingNode) == "string") {
				binding.propertyName = bindingNode;
				return true;
			} else if(this.isDynamic(bindingNode)) {
				var propertyNode = Reflect.field(bindingNode,"property");
				var sourceNode = Reflect.field(bindingNode,"source");
				if(typeof(propertyNode) == "string") {
					binding.propertyName = propertyNode;
				}
				if(typeof(sourceNode) == "string") {
					var sourceStr = sourceNode;
					if(sourceStr == "target") {
						binding.source = 0;
					} else if(sourceStr == "renderer") {
						binding.source = 1;
					} else if(sourceStr == "root") {
						binding.source = 2;
					}
				}
				return true;
			}
		}
		return false;
	}
	,parseMacroBinding: function(node,scope,binding) {
		if(!this.isDynamic(node)) {
			return;
		}
		var bindingNode = Reflect.field(node,"binding");
		if(!this.isDynamic(bindingNode)) {
			return;
		}
		var minNode = Reflect.field(bindingNode,"min");
		if(typeof(minNode) == "number" && ((minNode | 0) === minNode)) {
			binding.minValue = minNode;
		}
		var maxNode = Reflect.field(bindingNode,"max");
		if(typeof(maxNode) == "number" && ((maxNode | 0) === maxNode)) {
			binding.maxValue = maxNode;
		}
	}
	,parseMacroBindings: function(node,scope,bindings) {
	}
	,parseAttributes: function(node,scope,attributes) {
		var attributesNode = Reflect.field(node,"attributes");
		if(this.isDynamic(attributesNode)) {
			var defaultValuesProvider = null;
			if(attributes.bindingMap.defaultValues.get_providers().length > 0) {
				defaultValuesProvider = attributes.bindingMap.defaultValues.get_providers()[0];
			} else {
				defaultValuesProvider = minko_data_Provider.create();
				attributes.bindingMap.defaultValues.addProvider(defaultValuesProvider);
			}
			var memberNames = Reflect.fields(attributesNode);
			var _g = 0;
			while(_g < memberNames.length) {
				var attributeName = memberNames[_g];
				++_g;
				var attributeNode = Reflect.field(attributesNode,attributeName);
				var binding = new minko_data_Binding();
				if(this.parseBinding(attributeNode,scope,binding)) {
					var _this = attributes.bindingMap.bindings;
					if(__map_reserved[attributeName] != null) {
						_this.setReserved(attributeName,binding);
					} else {
						_this.h[attributeName] = binding;
					}
				}
			}
		}
	}
	,parseUniforms: function(node,scope,uniforms) {
		var uniformsNode = Reflect.field(node,"uniforms");
		if(this.isDynamic(uniformsNode)) {
			var defaultValuesProvider = null;
			if(uniforms.bindingMap.defaultValues.get_providers().length > 0) {
				defaultValuesProvider = uniforms.bindingMap.defaultValues.get_providers()[0];
			} else {
				defaultValuesProvider = minko_data_Provider.create();
				uniforms.bindingMap.defaultValues.addProvider(defaultValuesProvider);
			}
			var _g = 0;
			var _g1 = Reflect.fields(uniformsNode);
			while(_g < _g1.length) {
				var uniformName = _g1[_g];
				++_g;
				var uniformNode = Reflect.field(uniformsNode,uniformName);
				var binding = new minko_data_Binding();
				if(this.parseBinding(uniformNode,scope,binding)) {
					var _this = uniforms.bindingMap.bindings;
					if(__map_reserved[uniformName] != null) {
						_this.setReserved(uniformName,binding);
					} else {
						_this.h[uniformName] = binding;
					}
				}
				this.parseSamplerStates(uniformNode,scope,uniformName,defaultValuesProvider,uniforms.bindingMap);
				this.parseDefaultValue(uniformNode,scope,uniformName,defaultValuesProvider);
			}
		}
	}
	,parseMacros: function(node,scope,macros) {
		var macrosNode = Reflect.field(node,"macros");
		if(this.isDynamic(macrosNode)) {
			var defaultValuesProvider = null;
			if(macros.bindingMap.defaultValues.get_providers().length > 0) {
				defaultValuesProvider = macros.bindingMap.defaultValues.get_providers()[0];
			} else {
				defaultValuesProvider = minko_data_Provider.create();
				macros.bindingMap.defaultValues.addProvider(defaultValuesProvider);
			}
			var _g = 0;
			var _g1 = Reflect.fields(macrosNode);
			while(_g < _g1.length) {
				var macroName = _g1[_g];
				++_g;
				var macroNode = Reflect.field(macrosNode,macroName);
				var binding = new minko_data_MacroBinding();
				if(this.parseBinding(macroNode,scope,binding)) {
					this.parseMacroBinding(macroNode,scope,binding);
					var _this = macros.bindingMap.bindings;
					if(__map_reserved[macroName] != null) {
						_this.setReserved(macroName,binding);
					} else {
						_this.h[macroName] = binding;
					}
				}
				this.parseDefaultValue(macroNode,scope,macroName,defaultValuesProvider);
				var _this1 = macros.bindingMap.types;
				var value = 0;
				if(__map_reserved[macroName] != null) {
					_this1.setReserved(macroName,value);
				} else {
					_this1.h[macroName] = value;
				}
				if(this.isDynamic(macroNode)) {
					var typeNode = Reflect.field(macroNode,"type");
					if(typeof(typeNode) == "string") {
						var _this2 = macros.bindingMap.types;
						var value1 = minko_data_MacroBindingMap.stringToMacroType(typeNode);
						if(__map_reserved[macroName] != null) {
							_this2.setReserved(macroName,value1);
						} else {
							_this2.h[macroName] = value1;
						}
					}
				}
			}
		}
	}
	,parseStates: function(node,scope,stateBlock) {
		var statesNode = Reflect.field(node,"states");
		var memberNames = Reflect.fields(statesNode);
		if(this.isDynamic(statesNode)) {
			var _g = 0;
			while(_g < memberNames.length) {
				var stateName = memberNames[_g];
				++_g;
				if(Lambda.has(minko_render_States.PROPERTY_NAMES,stateName)) {
					var parse_states = Reflect.field(statesNode,stateName);
					if(this.isDynamic(parse_states)) {
						var binding = new minko_data_Binding();
						if(this.parseBinding(parse_states,scope,binding)) {
							var _this = stateBlock.bindingMap.bindings;
							if(__map_reserved[stateName] != null) {
								_this.setReserved(stateName,binding);
							} else {
								_this.h[stateName] = binding;
							}
						} else {
							this.parseState(parse_states,scope,stateBlock,stateName);
						}
						if(Object.prototype.hasOwnProperty.call(parse_states,"default")) {
							var defaultValueNode = Reflect.field(parse_states,"default");
							this.parseState(defaultValueNode,scope,stateBlock,stateName);
						}
					} else {
						this.parseState(parse_states,scope,stateBlock,stateName);
					}
				} else if(Lambda.has(minko_file_EffectParser._extraStateNames,stateName)) {
					var parse_states1 = Reflect.field(statesNode,stateName);
					if(stateName == "blendingMode") {
						this.parseBlendingMode(parse_states1,scope,stateBlock);
					} else if(stateName == "stencilTest") {
						this.parseStencilState(parse_states1,scope,stateBlock);
					}
				}
			}
		}
	}
	,parseState: function(node,scope,stateBlock,stateProperty) {
		if(stateProperty == "priority") {
			this.parsePriority(node,scope,stateBlock);
		} else if(stateProperty == minko_file_EffectParser._extraStateNames[0]) {
			this.parseBlendingMode(node,scope,stateBlock);
		} else if(stateProperty == "blendingSource") {
			this.parseBlendingSource(node,scope,stateBlock);
		} else if(stateProperty == "blendingDestination") {
			this.parseBlendingDestination(node,scope,stateBlock);
		} else if(stateProperty == "zSorted") {
			this.parseZSort(node,scope,stateBlock);
		} else if(stateProperty == "colorMask") {
			this.parseColorMask(node,scope,stateBlock);
		} else if(stateProperty == "depthMask") {
			this.parseDepthMask(node,scope,stateBlock);
		} else if(stateProperty == "depthFunction") {
			this.parseDepthFunction(node,scope,stateBlock);
		} else if(stateProperty == "triangleCulling") {
			this.parseTriangleCulling(node,scope,stateBlock);
		} else if(stateProperty == "stencilFunction") {
			this.parseStencilFunction(node,scope,stateBlock);
		} else if(stateProperty == "stencilReference") {
			this.parseStencilReference(node,scope,stateBlock);
		} else if(stateProperty == "stencilMask") {
			this.parseStencilMask(node,scope,stateBlock);
		} else if(stateProperty == "stencilFailOperation") {
			this.parseStencilFailOperation(node,scope,stateBlock);
		} else if(stateProperty == "stencilZFailOperation") {
			this.parseStencilZFailOperation(node,scope,stateBlock);
		} else if(stateProperty == "stencilZPassOperation") {
			this.parseStencilZPassOperation(node,scope,stateBlock);
		} else if(stateProperty == "scissorTest") {
			this.parseScissorTest(node,scope,stateBlock);
		} else if(stateProperty == "scissorBox") {
			this.parseScissorBox(node,scope,stateBlock);
		} else if(stateProperty == "target") {
			this.parseTarget(node,scope,stateBlock);
		}
	}
	,parsePriority: function(node,scope,stateBlock) {
		if(node != null) {
			var priority = 0.0;
			if(typeof(node) == "number" && ((node | 0) === node)) {
				priority = node;
			} else if(typeof(node) == "number") {
				priority = node;
			} else if(typeof(node) == "string") {
				priority = this.getPriorityValue(node);
			} else if((node instanceof Array) && node.__enum__ == null) {
				var tmp = node;
				if(typeof(tmp[0]) == "string" && typeof(tmp[1]) == "number") {
					priority = this.getPriorityValue(tmp[0]) + tmp[1];
				}
			}
			stateBlock.states.set_priority(priority);
		}
	}
	,parseBlendingMode: function(node,scope,stateBlock) {
		if((node instanceof Array) && node.__enum__ == null) {
			var blendingSrcString = node[0];
			var _this = minko_file_EffectParser._blendingSourceMap;
			if(__map_reserved[blendingSrcString] != null ? _this.existsReserved(blendingSrcString) : _this.h.hasOwnProperty(blendingSrcString)) {
				var _this1 = minko_file_EffectParser._blendingSourceMap;
				stateBlock.states.set_blendingSourceFactor(__map_reserved[blendingSrcString] != null ? _this1.getReserved(blendingSrcString) : _this1.h[blendingSrcString]);
			}
			var blendingDstString = node[1];
			var _this2 = minko_file_EffectParser._blendingDestinationMap;
			if(__map_reserved[blendingDstString] != null ? _this2.existsReserved(blendingDstString) : _this2.h.hasOwnProperty(blendingDstString)) {
				var _this3 = minko_file_EffectParser._blendingDestinationMap;
				stateBlock.states.set_blendingDestinationFactor(__map_reserved[blendingDstString] != null ? _this3.getReserved(blendingDstString) : _this3.h[blendingDstString]);
			}
		} else if(typeof(node) == "string") {
			var blendingModeString = node;
			var _this4 = minko_file_EffectParser._blendingModeMap;
			if(__map_reserved[blendingModeString] != null ? _this4.existsReserved(blendingModeString) : _this4.h.hasOwnProperty(blendingModeString)) {
				var _this5 = minko_file_EffectParser._blendingModeMap;
				var blendingMode = __map_reserved[blendingModeString] != null ? _this5.getReserved(blendingModeString) : _this5.h[blendingModeString];
				stateBlock.states.set_blendingSourceFactor(blendingMode & 255);
				stateBlock.states.set_blendingDestinationFactor(blendingMode & 65280);
			}
		}
	}
	,parseBlendingSource: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._blendingSourceMap;
			var key = node;
			var blendingSourceString = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			stateBlock.states.set_blendingSourceFactor(blendingSourceString);
		}
	}
	,parseBlendingDestination: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._blendingDestinationMap;
			var key = node;
			var blendingDestination = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			stateBlock.states.set_blendingDestinationFactor(blendingDestination);
		}
	}
	,parseZSort: function(node,scope,stateBlock) {
		if(typeof(node) == "boolean") {
			stateBlock.states.set_zSorted(node);
		}
	}
	,parseColorMask: function(node,scope,stateBlock) {
		if(typeof(node) == "boolean") {
			stateBlock.states.set_colorMask(node);
		}
	}
	,parseDepthMask: function(node,scope,stateBlock) {
		if(typeof(node) == "boolean") {
			stateBlock.states.set_depthMask(node);
		}
	}
	,parseDepthFunction: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var compareModeString = node;
			var _this = minko_file_EffectParser._compareFuncMap;
			var exist = __map_reserved[compareModeString] != null ? _this.existsReserved(compareModeString) : _this.h.hasOwnProperty(compareModeString);
			if(exist) {
				var _this1 = minko_file_EffectParser._compareFuncMap;
				stateBlock.states.set_depthFunction(__map_reserved[compareModeString] != null ? _this1.getReserved(compareModeString) : _this1.h[compareModeString]);
			}
		}
	}
	,parseTriangleCulling: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var triangleCullingString = node;
			var _this = minko_file_EffectParser._triangleCullingMap;
			var exist = __map_reserved[triangleCullingString] != null ? _this.existsReserved(triangleCullingString) : _this.h.hasOwnProperty(triangleCullingString);
			if(exist) {
				var _this1 = minko_file_EffectParser._triangleCullingMap;
				stateBlock.states.set_triangleCulling(__map_reserved[triangleCullingString] != null ? _this1.getReserved(triangleCullingString) : _this1.h[triangleCullingString]);
			}
		}
	}
	,parseTarget: function(node,scope,stateBlock) {
		var target = null;
		var targetName = "";
		if(this.isDynamic(node)) {
			var nameValue = Reflect.field(node,"name");
			if(typeof(nameValue) == "string") {
				targetName = nameValue;
			}
			if(!Object.prototype.hasOwnProperty.call(node,"size") && !(Object.prototype.hasOwnProperty.call(node,"width") && Object.prototype.hasOwnProperty.call(node,"height"))) {
				return;
			}
			var width = 0;
			var height = 0;
			if(Object.prototype.hasOwnProperty.call(node,"size")) {
				height = Reflect.field(node,"size");
				width = height;
			} else {
				if(!Object.prototype.hasOwnProperty.call(node,"width") || !Object.prototype.hasOwnProperty.call(node,"height")) {
					this._error.execute(this,this._resolvedFilename + ": render target definition requires both \"width\" and \"height\" properties.");
				}
				width = Reflect.field(node,"width");
				height = Reflect.field(node,"height");
			}
			var isCubeTexture = Object.prototype.hasOwnProperty.call(node,"isCube") && Reflect.field(node,"isCube");
			if(isCubeTexture) {
				target = minko_render_CubeTexture.create(this._options.get_context(),width,height,false,true);
				if(targetName.length != 0) {
					this._assetLibrary.setCubeTexture(targetName,target);
				}
			} else {
				target = minko_render_Texture.create(this._options.get_context(),width,height,false,true);
				if(targetName.length != 0) {
					this._assetLibrary.setTexture(targetName,target);
				}
			}
			target.upload();
			this._effectData.set(targetName,target);
		} else if(typeof(node) == "string") {
			targetName = node;
			target = this._assetLibrary.texture(targetName);
			if(target == null) {
				throw new js__$Boot_HaxeError("");
			}
			this._effectData.set(targetName,target);
		}
		if(target != null) {
			stateBlock.states.set_target(target);
			console.log("      stateBlock.states.target = (target );");
			console.log(target);
		}
	}
	,parseStencilState: function(node,scope,stateBlock) {
		if(this.isDynamic(node)) {
			var stencilFuncValue = Reflect.field(node,"stencilFunction");
			var stencilRefValue = Reflect.field(node,"stencilReference");
			var stencilMaskValue = Reflect.field(node,"stencilMask");
			var stencilOpsValue = Reflect.field(node,"stencilOps");
			this.parseStencilFunction(stencilFuncValue,scope,stateBlock);
			this.parseStencilReference(stencilRefValue,scope,stateBlock);
			this.parseStencilMask(stencilMaskValue,scope,stateBlock);
			this.parseStencilOperations(stencilOpsValue,scope,stateBlock);
		} else if((node instanceof Array) && node.__enum__ == null) {
			this.parseStencilFunction(node[0],scope,stateBlock);
			this.parseStencilReference(node[1],scope,stateBlock);
			this.parseStencilMask(node[2],scope,stateBlock);
			this.parseStencilOperations(node[3],scope,stateBlock);
		}
	}
	,parseStencilFunction: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._compareFuncMap;
			var key = node;
			stateBlock.states.set_stencilFunction(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	,parseStencilReference: function(node,scope,stateBlock) {
		if(typeof(node) == "number" && ((node | 0) === node)) {
			stateBlock.states.set_stencilReference(node);
		}
	}
	,parseStencilMask: function(node,scope,stateBlock) {
		if(typeof(node) == "number" && ((node | 0) === node)) {
			stateBlock.states.set_stencilMask(node);
		}
	}
	,parseStencilOperations: function(node,scope,stateBlock) {
		if((node instanceof Array) && node.__enum__ == null) {
			if(typeof(node[0]) == "string") {
				var _this = minko_file_EffectParser._stencilOpMap;
				var key = node[0];
				stateBlock.states.set_stencilFailOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
			}
			if(typeof(node[1]) == "string") {
				var _this1 = minko_file_EffectParser._stencilOpMap;
				var key1 = node[1];
				stateBlock.states.set_stencilZFailOperation(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
			}
			if(typeof(node[2]) == "string") {
				var _this2 = minko_file_EffectParser._stencilOpMap;
				var key2 = node[2];
				stateBlock.states.set_stencilZPassOperation(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]);
			}
		} else {
			this.parseStencilFailOperation(Reflect.field(node,"fail"),scope,stateBlock);
			this.parseStencilZFailOperation(Reflect.field(node,"zfail"),scope,stateBlock);
			this.parseStencilZPassOperation(Reflect.field(node,"zpass"),scope,stateBlock);
		}
	}
	,parseStencilFailOperation: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._stencilOpMap;
			var key = node;
			stateBlock.states.set_stencilFailOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	,parseStencilZFailOperation: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._stencilOpMap;
			var key = node;
			stateBlock.states.set_stencilZFailOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	,parseStencilZPassOperation: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._stencilOpMap;
			var key = node;
			stateBlock.states.set_stencilZPassOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	,parseScissorTest: function(node,scope,stateBlock) {
		if(node != null && typeof(node) == "boolean") {
			stateBlock.states.set_scissorTest(node);
		}
	}
	,parseScissorBox: function(node,scope,stateBlock) {
		if(node != null && ((node instanceof Array) && node.__enum__ == null)) {
			var this1 = new glm_Vec4Base();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this1.w = 0;
			var scissorBox = this1;
			if(js_Boot.__instanceof(node[0],Int)) {
				scissorBox.x = node[0];
			}
			if(js_Boot.__instanceof(node[1],Int)) {
				scissorBox.y = node[1];
			}
			if(js_Boot.__instanceof(node[2],Int)) {
				scissorBox.z = node[2];
			}
			if(js_Boot.__instanceof(node[3],Int)) {
				scissorBox.w = node[3];
			}
			stateBlock.states.set_scissorBox(scissorBox);
		}
	}
	,parseSamplerStates: function(node,scope,uniformName,defaultValues,bindingMap) {
		if(this.isDynamic(node)) {
			var wrapModeNode = Reflect.field(node,"wrapMode");
			if(typeof(wrapModeNode) == "string") {
				var wrapModeStr = wrapModeNode;
				var wrapMode = minko_render_SamplerStates.stringToWrapMode(wrapModeStr);
				defaultValues.set(minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"wrapMode"),wrapMode);
			} else if(this.isDynamic(wrapModeNode)) {
				var uniformWrapModeBindingName = minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"wrapMode");
				var _this = bindingMap.bindings;
				if(!(__map_reserved[uniformWrapModeBindingName] != null ? _this.existsReserved(uniformWrapModeBindingName) : _this.h.hasOwnProperty(uniformWrapModeBindingName))) {
					var _this1 = bindingMap.bindings;
					var value = new minko_data_Binding();
					if(__map_reserved[uniformWrapModeBindingName] != null) {
						_this1.setReserved(uniformWrapModeBindingName,value);
					} else {
						_this1.h[uniformWrapModeBindingName] = value;
					}
				}
				var _this2 = bindingMap.bindings;
				this.parseBinding(wrapModeNode,scope,__map_reserved[uniformWrapModeBindingName] != null ? _this2.getReserved(uniformWrapModeBindingName) : _this2.h[uniformWrapModeBindingName]);
				this.parseDefaultValueSamplerStates("WrapMode",wrapModeNode,scope,uniformWrapModeBindingName,defaultValues);
			}
			var textureFilterNode = Reflect.field(node,"textureFilter");
			if(typeof(textureFilterNode) == "string") {
				var textureFilterStr = textureFilterNode;
				var textureFilter = minko_render_SamplerStates.stringToTextureFilter(textureFilterStr);
				defaultValues.set(minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"textureFilter"),textureFilter);
			} else if(this.isDynamic(textureFilterNode)) {
				var uniformTextureFilterBindingName = minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"textureFilter");
				var _this3 = bindingMap.bindings;
				if(!(__map_reserved[uniformTextureFilterBindingName] != null ? _this3.existsReserved(uniformTextureFilterBindingName) : _this3.h.hasOwnProperty(uniformTextureFilterBindingName))) {
					var _this4 = bindingMap.bindings;
					var value1 = new minko_data_Binding();
					if(__map_reserved[uniformTextureFilterBindingName] != null) {
						_this4.setReserved(uniformTextureFilterBindingName,value1);
					} else {
						_this4.h[uniformTextureFilterBindingName] = value1;
					}
				}
				var _this5 = bindingMap.bindings;
				this.parseBinding(textureFilterNode,scope,__map_reserved[uniformTextureFilterBindingName] != null ? _this5.getReserved(uniformTextureFilterBindingName) : _this5.h[uniformTextureFilterBindingName]);
				this.parseDefaultValueSamplerStates("TextureFilter",textureFilterNode,scope,uniformTextureFilterBindingName,defaultValues);
			}
			var mipFilterNode = Reflect.field(node,"mipFilter");
			if(typeof(mipFilterNode) == "string") {
				var mipFilterStr = mipFilterNode;
				var mipFilter = minko_render_SamplerStates.stringToMipFilter(mipFilterStr);
				defaultValues.set(minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"mipFilter"),mipFilter);
			} else if(this.isDynamic(mipFilterNode)) {
				var uniformMipFilterBindingName = minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"mipFilter");
				var _this6 = bindingMap.bindings;
				if(!(__map_reserved[uniformMipFilterBindingName] != null ? _this6.existsReserved(uniformMipFilterBindingName) : _this6.h.hasOwnProperty(uniformMipFilterBindingName))) {
					var _this7 = bindingMap.bindings;
					var value2 = new minko_data_Binding();
					if(__map_reserved[uniformMipFilterBindingName] != null) {
						_this7.setReserved(uniformMipFilterBindingName,value2);
					} else {
						_this7.h[uniformMipFilterBindingName] = value2;
					}
				}
				var _this8 = bindingMap.bindings;
				this.parseBinding(mipFilterNode,scope,__map_reserved[uniformMipFilterBindingName] != null ? _this8.getReserved(uniformMipFilterBindingName) : _this8.h[uniformMipFilterBindingName]);
				this.parseDefaultValueSamplerStates("MipFilter",mipFilterNode,scope,uniformMipFilterBindingName,defaultValues);
			}
		}
	}
	,parseShader: function(node,scope,type) {
		if(typeof(node) != "string") {
			throw new js__$Boot_HaxeError("");
		}
		var glsl = node;
		var shader = minko_render_Shader.createbySource(this._options.get_context(),type,glsl);
		var blocks = new minko_file_GLSLBlockTree(new minko_Tuple(0,""));
		var includes = [];
		this._shaderToGLSL.set(shader,blocks);
		this.parseGLSL(glsl,this._options,blocks,includes);
		shader.set_source(glsl);
		return shader;
	}
	,parseGLSL: function(glsl,options,blocks,includes) {
		var stream = glsl.split("\n");
		var i = 0;
		var lastBlockEnd = 0;
		var numIncludes = 0;
		var _g = 0;
		while(_g < stream.length) {
			var line = stream[_g];
			++_g;
			var pos = line.indexOf("#pragma include ");
			var commentPos = line.indexOf("//");
			if(pos != -1 && (commentPos == -1 || pos < commentPos) && (line.indexOf("\"",pos) != -1 || line.indexOf("'",pos) != -1)) {
				var splitStr = "'";
				if(line.indexOf("\"",pos) != -1) {
					splitStr = "\"";
				}
				var filename = line.substring(line.indexOf(splitStr,pos) + splitStr.length,line.lastIndexOf(splitStr));
				if(lastBlockEnd != i) {
					blocks.leaf.push(new minko_file_GLSLBlockTree(new minko_Tuple(0,HxOverrides.substr(glsl,lastBlockEnd,i - lastBlockEnd))));
				}
				if(!Lambda.has(includes,filename)) {
					includes.push(filename);
					blocks.leaf.push(new minko_file_GLSLBlockTree(new minko_Tuple(1,filename)));
				}
				lastBlockEnd = i + line.length + 1;
				++numIncludes;
			}
			i += line.length + 1;
		}
		if(i != lastBlockEnd) {
			blocks.leaf.push(new minko_file_GLSLBlockTree(new minko_Tuple(0,HxOverrides.substr(glsl,lastBlockEnd,null))));
		}
		if(numIncludes > 0) {
			this.loadGLSLDependencies(blocks,options,includes);
		}
	}
	,loadGLSLDependencies: function(blocks,options,includes) {
		var _gthis = this;
		var _g = 0;
		var _g1 = blocks.leaf;
		while(_g < _g1.length) {
			var blockIt = [_g1[_g]];
			++_g;
			var block = [blockIt[0].node];
			if(block[0].first == 1) {
				if(options.get_assetLibrary().hasBlob(block[0].second)) {
					var data = options.get_assetLibrary().blob(block[0].second);
					block[0].first = 0;
					block[0].second = "\n";
					this.parseGLSL(data.toString(),options,blockIt[0],includes);
				} else {
					var loader = minko_file_Loader.createbyOptions(options);
					++this._numDependencies;
					this._loaderCompleteSlots.set(loader,loader.get_complete().connect((function(block1,blockIt1) {
						return function(_1) {
							_gthis.glslIncludeCompleteHandler(_1,blockIt1[0],block1[0].second,includes);
						};
					})(block,blockIt),0,true));
					this._loaderErrorSlots.set(loader,loader.get_error().connect((function(block2) {
						return function(_11,_2) {
							_gthis.dependencyErrorHandler(_11,_2,block2[0].second);
						};
					})(block),0,true));
					loader.queue(block[0].second).load();
				}
			}
		}
		if(this._numDependencies == this._numLoadedDependencies && this._effect != null) {
			this.finalize();
		}
	}
	,dependencyErrorHandler: function(loader,error,filename) {
		var err = "Unable to load '" + filename + "' required by \"" + this._filename + "\", included paths are: " + Std.string(loader.get_options().get_includePaths());
		this._error.execute(this,err);
	}
	,createStates: function(block) {
		return null;
	}
	,concatenateGLSLBlocks: function(blocks) {
		var glsl = blocks.node.second;
		var _g = 0;
		var _g1 = blocks.leaf;
		while(_g < _g1.length) {
			var block = _g1[_g];
			++_g;
			glsl += this.concatenateGLSLBlocks(block);
		}
		return glsl;
	}
	,glslIncludeCompleteHandler: function(loader,blocks,filename,includes) {
		var block = blocks.node;
		block.first = 0;
		block.second = "\n";
		++this._numLoadedDependencies;
		var _this = loader.get_files();
		var file = __map_reserved[filename] != null ? _this.getReserved(filename) : _this.h[filename];
		var resolvedFilename = file.get_resolvedFilename();
		var options = loader.get_options();
		var pos = resolvedFilename.lastIndexOf("/");
		if(pos == -1) {
			pos = resolvedFilename.lastIndexOf("\\");
		}
		if(pos != -1) {
			options = options.clone();
			options.set_includePaths([]);
			options.get_includePaths().push(HxOverrides.substr(resolvedFilename,0,pos));
		}
		this.parseGLSL(file.get_data().toString(),options,blocks,includes);
		if(this._numDependencies == this._numLoadedDependencies && this._effect != null) {
			this.finalize();
		}
	}
	,loadTexture: function(textureFilename,uniformName,defaultValues) {
		var _gthis = this;
		if(this._options.get_assetLibrary().texture(textureFilename) != null) {
			var tmp = this._assetLibrary.texture(textureFilename);
			defaultValues.set(uniformName,tmp);
			return;
		}
		var loader = minko_file_Loader.createbyOptions(this._options);
		this._numDependencies++;
		this._loaderCompleteSlots.set(loader,loader.get_complete().connect(function(loader1) {
			var texture = _gthis._assetLibrary.texture(textureFilename);
			defaultValues.set(uniformName,texture);
			texture.upload();
			++_gthis._numLoadedDependencies;
			if(_gthis._numDependencies == _gthis._numLoadedDependencies && _gthis._effect != null) {
				_gthis.finalize();
			}
		}));
		this._loaderErrorSlots.set(loader,loader.get_error().connect(function(_1,_2) {
			_gthis.dependencyErrorHandler(_1,_2,textureFilename);
		}));
		loader.queue(textureFilename).load();
	}
	,finalize: function() {
		var technique = this._globalScope.techniques.keys();
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _this = this._globalScope.techniques;
			var technique_second = __map_reserved[technique1] != null ? _this.getReserved(technique1) : _this.h[technique1];
			this._effect.addTechnique(technique1,technique_second);
			var _g = 0;
			while(_g < technique_second.length) {
				var pass = technique_second[_g];
				++_g;
				var vs = pass.get_program().get_vertexShader();
				var fs = pass.get_program().get_fragmentShader();
				if(this._shaderToGLSL.h.__keys__[vs.__id__] != null) {
					vs.set_source("#define VERTEX_SHADER\n" + this.concatenateGLSLBlocks(this._shaderToGLSL.h[vs.__id__]));
				}
				if(this._shaderToGLSL.h.__keys__[fs.__id__] != null) {
					fs.set_source("#define FRAGMENT_SHADER\n" + this.concatenateGLSLBlocks(this._shaderToGLSL.h[fs.__id__]));
				}
			}
		}
		this._effect.get_data().copyFrom(this._effectData);
		this._options.get_assetLibrary().setEffect(this._filename,this._effect);
		this._complete.execute(this);
		var lc = this._loaderCompleteSlots.iterator();
		while(lc.hasNext()) {
			var lc1 = lc.next();
			lc1.disconnect();
		}
		this._loaderCompleteSlots = new haxe_ds_ObjectMap();
		var lc2 = this._loaderErrorSlots.iterator();
		while(lc2.hasNext()) {
			var lc3 = lc2.next();
			lc3.disconnect();
		}
		this._loaderErrorSlots = new haxe_ds_ObjectMap();
	}
	,__class__: minko_file_EffectParser
});
var minko_file_File = $hx_exports["minko"]["file"]["File"] = function() {
};
minko_file_File.__name__ = true;
minko_file_File.create = function() {
	return new minko_file_File();
};
minko_file_File.getCurrentWorkingDirectory = function() {
	return ".";
};
minko_file_File.getBinaryDirectory = function() {
	return ".";
};
minko_file_File.sanitizeFilename = function(filename) {
	var f = StringTools.replace(filename,"\\","/");
	return f;
};
minko_file_File.canonizeFilename = function(filename) {
	var r = new EReg("[\\/]","ig");
	var segments = r.split(filename);
	var path = [];
	var _g = 0;
	while(_g < segments.length) {
		var current = segments[_g];
		++_g;
		if(StringTools.trim(current) == "" || current == ".") {
			continue;
		}
		if(current != "..") {
			path.push(current);
		} else if(path.length > 0 && path[path.length - 1] != "..") {
			path.pop();
		} else {
			path.push(current);
		}
	}
	var ss = filename.length > 0 && filename.charAt(0) == "/" ? "/" : "";
	var output = ss + path.join("/");
	if(path.length != 0) {
		output = HxOverrides.substr(output,0,output.length);
	}
	if(output.length == 0) {
		output = ".";
	}
	return output;
};
minko_file_File.removePrefixPathFromFilename = function(filename) {
	var cleanFilename = minko_file_File.sanitizeFilename(filename);
	var filenameWithoutPrefixPath = cleanFilename;
	var lastSeparatorPosition = filenameWithoutPrefixPath.lastIndexOf("/");
	if(lastSeparatorPosition != -1) {
		filenameWithoutPrefixPath = HxOverrides.substr(filenameWithoutPrefixPath,lastSeparatorPosition + 1,null);
	}
	return filenameWithoutPrefixPath;
};
minko_file_File.extractPrefixPathFromFilename = function(filename) {
	var cleanFilename = minko_file_File.sanitizeFilename(filename);
	var prefixPath = cleanFilename;
	var lastSeparatorPosition = prefixPath.lastIndexOf("/");
	if(lastSeparatorPosition != -1) {
		prefixPath = HxOverrides.substr(prefixPath,0,lastSeparatorPosition);
	} else {
		return "";
	}
	return prefixPath;
};
minko_file_File.getExtension = function(filename) {
	var extension = "";
	var lastDotPosition = filename.lastIndexOf(".");
	if(lastDotPosition != -1) {
		extension = HxOverrides.substr(filename,lastDotPosition + 1,null);
		extension = extension.toLowerCase();
	}
	return extension;
};
minko_file_File.replaceExtension = function(filename,extension) {
	var transformedFilename = filename;
	var lastDotPosition = transformedFilename.lastIndexOf(".");
	if(lastDotPosition != -1) {
		var previousExtension = HxOverrides.substr(transformedFilename,lastDotPosition + 1,null);
		transformedFilename = HxOverrides.substr(transformedFilename,0,transformedFilename.length - (previousExtension.length + 1));
	}
	transformedFilename += "." + extension;
	return transformedFilename;
};
minko_file_File.prototype = {
	get_filename: function() {
		return this._filename;
	}
	,set_filename: function(v) {
		this._filename = v;
		return v;
	}
	,get_resolvedFilename: function() {
		return this._resolvedFilename;
	}
	,set_resolvedFilename: function(v) {
		this._resolvedFilename = v;
		return v;
	}
	,get_data: function() {
		return this._data;
	}
	,__class__: minko_file_File
};
var minko_file_FileProtocol = $hx_exports["minko"]["file"]["FileProtocol"] = function() {
	this._workerSlots = new haxe_ds_ObjectMap();
	minko_file_AbstractProtocol.call(this);
};
minko_file_FileProtocol.__name__ = true;
minko_file_FileProtocol.create = function() {
	return new minko_file_FileProtocol();
};
minko_file_FileProtocol.__super__ = minko_file_AbstractProtocol;
minko_file_FileProtocol.prototype = $extend(minko_file_AbstractProtocol.prototype,{
	load: function() {
		var _gthis = this;
		var loader = this;
		minko_file_FileProtocol._runningLoaders.push(loader);
		var resolvedFilename = this.get_resolvedFilename();
		var options = this._options;
		var cleanFilename = resolvedFilename;
		var prefixPosition = resolvedFilename.indexOf("://");
		if(prefixPosition != -1) {
			cleanFilename = HxOverrides.substr(resolvedFilename,prefixPosition + 3,null);
		}
		if(this._options.get_loadAsynchronously() && minko_AbstractCanvas.get_defaultCanvas() != null && minko_AbstractCanvas.get_defaultCanvas().isWorkerRegistered("file-protocol")) {
			var worker = minko_AbstractCanvas.get_defaultCanvas().getWorker("file-protocol");
			var tmp = this._workerSlots;
			var tmp1 = worker.get_message().connect(function(UnnamedParameter1,message) {
				if(message.type == "complete") {
					var bytes = message.data;
					_gthis.set_data(bytes);
					_gthis._complete.execute(loader);
					HxOverrides.remove(minko_file_FileProtocol._runningLoaders,loader);
					_gthis._workerSlots.h[worker.__id__].disconnect();
					_gthis._workerSlots.remove(worker);
				} else if(message.type == "progress") {
					var ratio = message.data;
					_gthis._progress.execute(loader,ratio);
				} else if(message.type == "error") {
					var err = message.data;
					_gthis._error.execute(loader,err);
					_gthis._complete.execute(loader);
					HxOverrides.remove(minko_file_FileProtocol._runningLoaders,loader);
					_gthis._workerSlots.h[worker.__id__].disconnect();
					_gthis._workerSlots.remove(worker);
				}
			});
			tmp.set(worker,tmp1);
			var offset = options.get_seekingOffset();
			var length = options.get_seekedLength();
			var offsetByteArray = [];
			offsetByteArray[0] = (offset & -16777216) >> 24;
			offsetByteArray[1] = (offset & 16711680) >> 16;
			offsetByteArray[2] = (offset & 65280) >> 8;
			offsetByteArray[3] = offset & 255;
			var lengthByteArray = [];
			lengthByteArray[0] = (length & -16777216) >> 24;
			lengthByteArray[1] = (length & 16711680) >> 16;
			lengthByteArray[2] = (length & 65280) >> 8;
			lengthByteArray[3] = length & 255;
			var cleanFilenameByteArray = [];
			var _g1 = 0;
			var _g = cleanFilename.length;
			while(_g1 < _g) {
				var i = _g1++;
				cleanFilenameByteArray.push(HxOverrides.cca(cleanFilename,i));
			}
			var input = new haxe_io_Bytes(new ArrayBuffer(8 + cleanFilenameByteArray.length));
			var pos = 0;
			var _g2 = 0;
			while(_g2 < offsetByteArray.length) {
				var v = offsetByteArray[_g2];
				++_g2;
				input.b[pos++] = v & 255;
			}
			var _g3 = 0;
			while(_g3 < lengthByteArray.length) {
				var v1 = lengthByteArray[_g3];
				++_g3;
				input.b[pos++] = v1 & 255;
			}
			var _g4 = 0;
			while(_g4 < cleanFilenameByteArray.length) {
				var v2 = cleanFilenameByteArray[_g4];
				++_g4;
				input.b[pos++] = v2 & 255;
			}
			worker.start(input);
		}
	}
	,fileExists: function(filename) {
		return false;
	}
	,isAbsolutePath: function(filename) {
		var cleanFilename = minko_file_File.sanitizeFilename(filename);
		return cleanFilename.indexOf("/") == 0;
	}
	,__class__: minko_file_FileProtocol
});
var minko_file_JPEGParser = $hx_exports["minko"]["file"]["JPEGParser"] = function() {
	minko_file_AbstractParser.call(this);
};
minko_file_JPEGParser.__name__ = true;
minko_file_JPEGParser.__super__ = minko_file_AbstractParser;
minko_file_JPEGParser.prototype = $extend(minko_file_AbstractParser.prototype,{
	parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var _gthis = this;
		minko_utils_WebNodeTools.loadFromBytes("jpg",data,function(pd) {
			_gthis.__parse(filename,resolvedFilename,options,pd,assetLibrary);
		});
	}
	,__parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var bmpData = data.pixels;
		var width = data.width;
		var height = data.height;
		var texture = null;
		if(options.get_isCubeTexture()) {
			var parser = new minko_file_MipMapChainParser();
			var cubeTexture = parser.parseCubeTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),options.get_parseMipMaps() || options.get_generateMipmaps(),options.get_resizeSmoothly(),1,filename);
			cubeTexture = (options.get_textureFunction())(filename,cubeTexture);
			assetLibrary.setCubeTexture(filename,cubeTexture);
			texture = cubeTexture;
		} else if(!options.get_isRectangleTexture()) {
			var parser1 = new minko_file_MipMapChainParser();
			var texture2d = parser1.parseTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),options.get_parseMipMaps() || options.get_generateMipmaps(),options.get_resizeSmoothly(),1,filename);
			texture2d = (options.get_textureFunction())(filename,texture2d);
			texture = texture2d;
			assetLibrary.setTexture(filename,texture2d);
		}
		console.log("JPEGParser" + filename);
		texture.upload();
		if(options.get_disposeTextureAfterLoading()) {
			texture.disposeData();
		}
		this.get_complete().execute(this);
	}
	,__class__: minko_file_JPEGParser
});
var minko_file_Loader = $hx_exports["minko"]["file"]["Loader"] = function() {
	this._options = minko_file_Options.empty();
	this._complete = new minko_signal_Signal();
	this._progress = new minko_signal_Signal2();
	this._parsingProgress = new minko_signal_Signal2();
	this._error = new minko_signal_Signal2();
	this._numFilesToParse = 0;
	this._filesQueue = [];
	this._loading = [];
	this._filenameToOptions = new haxe_ds_StringMap();
	this._files = new haxe_ds_StringMap();
	this._protocolErrorSlots = new haxe_ds_ObjectMap();
	this._protocolCompleteSlots = new haxe_ds_ObjectMap();
	this._protocolProgressSlots = new haxe_ds_ObjectMap();
	this._parserProgressSlots = new haxe_ds_ObjectMap();
	this._parserCompleteSlots = new haxe_ds_ObjectMap();
	this._parserErrorSlots = new haxe_ds_ObjectMap();
	this._protocolToProgress = new haxe_ds_ObjectMap();
	this._parserToProgress = new haxe_ds_ObjectMap();
};
minko_file_Loader.__name__ = true;
minko_file_Loader.create = function() {
	return new minko_file_Loader();
};
minko_file_Loader.createbyOptions = function(options) {
	var copy = minko_file_Loader.create();
	copy._options = options;
	return copy;
};
minko_file_Loader.createbyLoader = function(loader) {
	var copy = minko_file_Loader.create();
	copy._options = loader._options;
	return copy;
};
minko_file_Loader.prototype = {
	get_options: function() {
		return this._options;
	}
	,set_options: function(v) {
		this._options = v;
		return v;
	}
	,get_complete: function() {
		return this._complete;
	}
	,get_progress: function() {
		return this._progress;
	}
	,get_parsingProgress: function() {
		return this._parsingProgress;
	}
	,get_error: function() {
		return this._error;
	}
	,get_filesQueue: function() {
		return this._filesQueue;
	}
	,get_loading: function() {
		if(this._filesQueue.length <= 0) {
			return this._loading.length > 0;
		} else {
			return true;
		}
	}
	,queue: function(filename) {
		return this.setQueue(filename,null);
	}
	,setQueue: function(filename,options) {
		if(StringTools.trim(filename) == "") {
			return this;
		}
		this._filesQueue.push(filename);
		var _this = this._filenameToOptions;
		var value = options != null ? options : this._options;
		if(__map_reserved[filename] != null) {
			_this.setReserved(filename,value);
		} else {
			_this.h[filename] = value;
		}
		return this;
	}
	,load: function() {
		if(this._filesQueue.length == 0) {
			this._complete.execute(this);
		} else {
			this._numFiles = this._filesQueue.length;
			this._protocolToProgress = new haxe_ds_ObjectMap();
			var queue = this._filesQueue.concat([]);
			var _g = 0;
			while(_g < queue.length) {
				var filename = queue[_g];
				++_g;
				var _this = this._filenameToOptions;
				var options = __map_reserved[filename] != null ? _this.getReserved(filename) : _this.h[filename];
				var includePaths = options.get_includePaths();
				var loadFile = false;
				var resolvedFilename = (options.get_uriFunction())(minko_file_File.sanitizeFilename(filename));
				var protocol = ((options.get_protocolFunction())(resolvedFilename))();
				protocol.set_options(options);
				if(includePaths.length == 0 || protocol.isAbsolutePath(resolvedFilename)) {
					loadFile = true;
				} else {
					var _g1 = 0;
					while(_g1 < includePaths.length) {
						var includePath = includePaths[_g1];
						++_g1;
						resolvedFilename = (options.get_uriFunction())(minko_file_File.sanitizeFilename(includePath + "/" + filename));
						protocol = ((options.get_protocolFunction())(resolvedFilename))();
						protocol.set_options(options);
						if(protocol.fileExists(resolvedFilename)) {
							loadFile = true;
							break;
						}
					}
					if(loadFile == false) {
						includePaths = minko_file_Options.includePaths_clear();
						var _g11 = 0;
						while(_g11 < includePaths.length) {
							var includePath1 = includePaths[_g11];
							++_g11;
							resolvedFilename = (options.get_uriFunction())(minko_file_File.sanitizeFilename(includePath1 + "/" + filename));
							protocol = ((options.get_protocolFunction())(resolvedFilename))();
							protocol.set_options(options);
							if(protocol.fileExists(resolvedFilename)) {
								loadFile = true;
								break;
							}
						}
					}
				}
				if(loadFile) {
					var _this1 = this._files;
					var value = protocol.get_file();
					if(__map_reserved[filename] != null) {
						_this1.setReserved(filename,value);
					} else {
						_this1.h[filename] = value;
					}
					HxOverrides.remove(this._filesQueue,filename);
					this._loading.push(filename);
					var that = [this];
					this._protocolErrorSlots.set(protocol,protocol.get_error().connect((function(that1) {
						return function(protocol1,err) {
							that1[0].protocolErrorHandler(protocol1,err);
						};
					})(that)));
					this._protocolCompleteSlots.set(protocol,protocol.get_complete().connect((function(that2) {
						return function(protocol2) {
							that2[0].protocolCompleteHandler(protocol2);
						};
					})(that)));
					this._protocolProgressSlots.set(protocol,protocol.get_progress().connect((function(that3) {
						return function(protocol3,progress) {
							that3[0].protocolProgressHandler(protocol3,progress);
						};
					})(that)));
					protocol.loadFile(filename,resolvedFilename,options);
				} else {
					var error = "ProtocolError" + "File does not exist: " + filename + ", include paths: " + this._options.get_includePaths().join(",");
					this.errorThrown(error);
				}
			}
		}
	}
	,get_files: function() {
		return this._files;
	}
	,protocolErrorHandler: function(protocol,err) {
		var error = "ProtocolError" + "Protocol error: " + protocol.get_file().get_filename() + ", include paths: " + this._options.get_includePaths().join(",");
		this.errorThrown(error);
	}
	,protocolCompleteHandler: function(protocol) {
		this._protocolToProgress.set(protocol,1.0);
		var filename = protocol.get_file().get_filename();
		HxOverrides.remove(this._loading,filename);
		this._filenameToOptions.remove(filename);
		this._protocolErrorSlots.h[protocol.__id__].disconnect();
		this._protocolErrorSlots.remove(protocol);
		this._protocolCompleteSlots.h[protocol.__id__].disconnect();
		this._protocolCompleteSlots.remove(protocol);
		this._protocolProgressSlots.h[protocol.__id__].disconnect();
		this._protocolProgressSlots.remove(protocol);
		this._numFilesToParse++;
		console.log("file '" + protocol.get_file().get_filename() + "' loaded, " + this._loading.length + " file(s) still loading, " + this._filesQueue.length + " file(s) in the queue");
		var parsed = this.processData(filename,protocol.get_file().get_resolvedFilename(),protocol.get_options(),protocol.get_file().get_data());
		if(this.get_options().get_storeDataIfNotParsed()) {
			if(!parsed) {
				--this._numFilesToParse;
				this.finalize();
			}
		}
	}
	,protocolProgressHandler: function(protocol,progress) {
		this._protocolToProgress.set(protocol,progress);
		var newTotalProgress = 0.0;
		var protocolAndProgress = this._protocolToProgress.keys();
		while(protocolAndProgress.hasNext()) {
			var protocolAndProgress1 = protocolAndProgress.next();
			newTotalProgress += this._protocolToProgress.h[protocolAndProgress1.__id__] / this._numFiles;
		}
		if(newTotalProgress > 1.0) {
			newTotalProgress = 1.0;
		}
		this._progress.execute(this,newTotalProgress);
	}
	,finalize: function() {
		if(this._loading.length == 0 && this._filesQueue.length == 0 && this._numFilesToParse == 0) {
			this._protocolErrorSlots = new haxe_ds_ObjectMap();
			this._protocolCompleteSlots = new haxe_ds_ObjectMap();
			this._protocolProgressSlots = new haxe_ds_ObjectMap();
			this._filenameToOptions = new haxe_ds_StringMap();
			this._complete.execute(this);
			this._parserErrorSlots = new haxe_ds_ObjectMap();
			this._protocolToProgress = new haxe_ds_ObjectMap();
			this._files = new haxe_ds_StringMap();
		}
	}
	,processData: function(filename,resolvedFilename,options,data) {
		var extension = HxOverrides.substr(filename,filename.lastIndexOf(".") + 1,null).toLowerCase();
		var parser = null;
		try {
			if(options.getParser(extension) != null) {
				parser = (options.getParser(extension))();
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				console.log(e);
			} else throw(e);
		}
		if(parser != null) {
			this._parserProgressSlots.set(parser,parser.get_progress().connect($bind(this,this.parserProgressHandler)));
			this._parserCompleteSlots.set(parser,parser.get_complete().connect($bind(this,this.parserCompleteHandler)));
			this._parserErrorSlots.set(parser,parser.get_error().connect($bind(this,this.parserErrorHandler)));
			parser.parse(filename,resolvedFilename,options,data,options.get_assetLibrary());
		} else if(options.get_storeDataIfNotParsed()) {
			if(extension != "glsl") {
				console.log("no parser found for extension '" + extension + "'");
			}
			options.get_assetLibrary().setBlob(filename,data);
		}
		return parser != null;
	}
	,parserProgressHandler: function(parser,progress) {
		this._parserToProgress.set(parser,progress);
		var newTotalProgress = 0.0;
		var parserAndProgress = this._parserToProgress.keys();
		while(parserAndProgress.hasNext()) {
			var parserAndProgress1 = parserAndProgress.next();
			newTotalProgress += this._parserToProgress.h[parserAndProgress1.__id__] / this._numFiles;
		}
		if(newTotalProgress > 1.0) {
			newTotalProgress = 1.0;
		}
		this._parsingProgress.execute(this,newTotalProgress);
	}
	,parserCompleteHandler: function(parser) {
		--this._numFilesToParse;
		this._parserCompleteSlots.remove(parser);
		this._parserToProgress.set(parser,1.0);
		this.finalize();
	}
	,parserErrorHandler: function(parser,error) {
		this.errorThrown(error);
	}
	,errorThrown: function(error) {
		if(this._error.get_numCallbacks() > 0) {
			this._error.execute(this,error);
		} else {
			console.log(error);
			throw new js__$Boot_HaxeError(error);
		}
	}
	,__class__: minko_file_Loader
};
var minko_file_MipMapChainParser = $hx_exports["minko"]["file"]["MipMapChainParser"] = function() {
};
minko_file_MipMapChainParser.__name__ = true;
minko_file_MipMapChainParser.prototype = {
	parseTexture: function(context,width,height,data,parseMipMaps,mipMapping,smooth,format,filename) {
		if(filename == null) {
			filename = "";
		}
		if(format == null) {
			format = 1;
		}
		if(smooth == null) {
			smooth = true;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		var numLevels;
		if(mipMapping && parseMipMaps) {
			var tmp = width;
			var p = 0;
			while(tmp >= 1) {
				++p;
				tmp >>= 1;
			}
			numLevels = p + 1;
		} else {
			numLevels = 1;
		}
		var actualHeight = height;
		if(mipMapping && parseMipMaps && width * 2 - 1 != height) {
			var diff = height - width * 2 - 1;
			actualHeight = height + Math.floor((diff + 1) / 2);
		}
		var bytesPerPixel = format == 0 ? 3 : 4;
		var rgba = new haxe_io_Bytes(new ArrayBuffer(width * actualHeight * 4));
		var texture = minko_render_Texture.create(context,width,actualHeight,mipMapping,false,smooth,1,filename);
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		this.parseMipMap(rgba,0,data,0,width,height,this1,width,actualHeight,bytesPerPixel);
		texture.get_data()[0] = rgba;
		texture.upload();
		return texture;
	}
	,parseMipMap: function(_out,rgbaOffset,data,dataOffset,width,height,offset,mipMapWidth,mipMapHeight,bytesPerPixel) {
		var endX = Math.floor(offset.x + mipMapWidth);
		var endY = Math.floor(offset.y + mipMapHeight);
		var idx = 0;
		var _g1 = Math.floor(offset.y);
		var _g = endY;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = Math.floor(offset.x);
			var _g2 = endX;
			while(_g3 < _g2) {
				var x = _g3++;
				var xy = (x + y * width) * bytesPerPixel;
				var _g5 = 0;
				var _g4 = bytesPerPixel;
				while(_g5 < _g4) {
					var i = _g5++;
					_out.b[rgbaOffset + idx++] = data.b[dataOffset + xy++] & 255;
				}
				var _g41 = bytesPerPixel;
				while(_g41 < 4) {
					var i1 = _g41++;
					_out.b[rgbaOffset + idx++] = 1;
				}
			}
		}
	}
	,parseCubeTexture: function(context,width,height,data,parseMipMaps,mipMapping,smooth,format,filename) {
		if(filename == null) {
			filename = "";
		}
		if(format == null) {
			format = 1;
		}
		if(smooth == null) {
			smooth = true;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		var faceSize = Math.floor(width / 4);
		var texture = minko_render_CubeTexture.create(context,faceSize,faceSize,mipMapping,false,smooth,1,filename);
		var faces = [0,1,2,3,4,5];
		var this1 = new glm_Vec2Base();
		this1.x = 2;
		this1.y = 1;
		var this2 = new glm_Vec2Base();
		this2.x = 0;
		this2.y = 1;
		var this3 = new glm_Vec2Base();
		this3.x = 1;
		this3.y = 0;
		var this4 = new glm_Vec2Base();
		this4.x = 1;
		this4.y = 2;
		var this5 = new glm_Vec2Base();
		this5.x = 1;
		this5.y = 1;
		var this6 = new glm_Vec2Base();
		this6.x = 3;
		this6.y = 1;
		var faceOffset = [this1,this2,this3,this4,this5,this6];
		var rgba = new haxe_io_Bytes(new ArrayBuffer(faceSize * faceSize * 4));
		var bytesPerPixel = format == 1 ? 4 : 3;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var a = faceOffset[i];
			var this7 = new glm_Vec2Base();
			this7.x = 0;
			this7.y = 0;
			var dest = this7;
			dest.x = a.x * faceSize;
			dest.y = a.y * faceSize;
			var offset = dest;
			var face = faces[i];
			this.parseMipMap(rgba,0,data,0,width,height,offset,faceSize,faceSize,bytesPerPixel);
			texture.setData(rgba,face);
		}
		texture.upload();
		var eof = width * height * bytesPerPixel;
		if(mipMapping && parseMipMaps) {
			var _g1 = 0;
			while(_g1 < 6) {
				var i1 = _g1++;
				var face1 = faces[i1];
				var level = 1;
				var dataOffset = width * faceSize * 3 * bytesPerPixel;
				var size = faceSize / 2;
				while(size >= 1) {
					var a1 = faceOffset[i1];
					var this8 = new glm_Vec2Base();
					this8.x = 0;
					this8.y = 0;
					var dest1 = this8;
					dest1.x = a1.x * size;
					dest1.y = a1.y * size;
					var offset1 = dest1;
					if(dataOffset >= eof) {
						break;
					}
					this.parseMipMap(rgba,0,data,dataOffset,width,height,offset1,size,size,bytesPerPixel);
					texture.uploadMipLevel(level,rgba,face1);
					dataOffset += Math.floor(width * size * 3 * bytesPerPixel);
					size /= 2;
					++level;
				}
			}
		}
		return texture;
	}
	,dispose: function() {
	}
	,__class__: minko_file_MipMapChainParser
};
var minko_file_Options = $hx_exports["minko"]["file"]["Options"] = function() {
	this._parsers = new haxe_ds_StringMap();
	this._protocols = new haxe_ds_StringMap();
	this._context = null;
	this._includePaths = [];
	this._platforms = [];
	this._userFlags = [];
	this._optimizeForRendering = true;
	this._generateMipMaps = false;
	this._parseMipMaps = false;
	this._resizeSmoothly = false;
	this._isCubeTexture = false;
	this._isRectangleTexture = false;
	this._generateSmoothNormals = false;
	this._normalMaxSmoothingAngle = 80.0;
	this._includeAnimation = true;
	this._startAnimation = true;
	this._loadAsynchronously = false;
	this._disposeIndexBufferAfterLoading = false;
	this._disposeVertexBufferAfterLoading = false;
	this._disposeTextureAfterLoading = false;
	this._storeDataIfNotParsed = true;
	this._preserveMaterials = true;
	this._trackAssetDescriptor = false;
	this._skinningFramerate = 30;
	this._skinningMethod = 1;
	this._material = null;
	this._effect = null;
	this._seekingOffset = 0;
	this._seekedLength = 0;
	this._materialFunction = null;
	this._textureFunction = null;
	this._geometryFunction = null;
	this._protocolFunction = null;
	this._parserFunction = null;
	this._uriFunction = null;
	this._nodeFunction = null;
	this._effectFunction = null;
	this._textureFormatFunction = null;
	this._attributeFunction = null;
	this._fileStatusFunction = null;
	this._preventLoadingFunction = null;
	var binaryDir = minko_file_File.getBinaryDirectory();
	this.get_includePaths().push(binaryDir + "/asset");
	this.get_includePaths().push(".");
	this.initializePlatforms();
	this.initializeUserFlags();
};
minko_file_Options.__name__ = true;
minko_file_Options.empty = function() {
	var instance = new minko_file_Options();
	instance.initialize();
	return instance;
};
minko_file_Options.create = function(context) {
	var options = minko_file_Options.empty();
	options._context = context;
	return options;
};
minko_file_Options.registerDefaultProtocol = function(protocol,cls) {
	var prefix = protocol.toLowerCase();
	var _this = minko_file_Options._defaultProtocols;
	if(__map_reserved[prefix] != null) {
		_this.setReserved(prefix,cls);
	} else {
		_this.h[prefix] = cls;
	}
};
minko_file_Options.includePaths_clear = function() {
	var binaryDir = "";
	var __includePaths = [];
	__includePaths.push("asset/effect");
	return __includePaths;
};
minko_file_Options.prototype = {
	clone: function() {
		var copy = new minko_file_Options().copyFrom(this);
		copy.initialize();
		return copy;
	}
	,get_context: function() {
		return this._context;
	}
	,set_context: function(v) {
		this._context = v;
		return v;
	}
	,get_assetLibrary: function() {
		return this._assets;
	}
	,set_assetLibrary: function(v) {
		this._assets = v;
		return v;
	}
	,set_includePaths: function(v) {
		this._includePaths = v;
		return v;
	}
	,get_includePaths: function() {
		return this._includePaths;
	}
	,get_platforms: function() {
		return this._platforms;
	}
	,get_userFlags: function() {
		return this._userFlags;
	}
	,get_optimizeForRendering: function() {
		return this._optimizeForRendering;
	}
	,set_optimizeForRendering: function(value) {
		this._optimizeForRendering = value;
		return value;
	}
	,get_generateMipmaps: function() {
		return this._generateMipMaps;
	}
	,set_generateMipmaps: function(generateMipmaps) {
		this._generateMipMaps = generateMipmaps;
		return generateMipmaps;
	}
	,get_parseMipMaps: function() {
		return this._parseMipMaps;
	}
	,set_parseMipMaps: function(parseMipMaps) {
		this._parseMipMaps = parseMipMaps;
		return parseMipMaps;
	}
	,get_includeAnimation: function() {
		return this._includeAnimation;
	}
	,set_includeAnimation: function(value) {
		this._includeAnimation = value;
		return value;
	}
	,get_startAnimation: function() {
		return this._startAnimation;
	}
	,set_startAnimation: function(value) {
		this._startAnimation = value;
		return value;
	}
	,get_loadAsynchronously: function() {
		return this._loadAsynchronously;
	}
	,set_loadAsynchronously: function(value) {
		this._loadAsynchronously = value;
		return value;
	}
	,get_resizeSmoothly: function() {
		return this._resizeSmoothly;
	}
	,set_resizeSmoothly: function(value) {
		this._resizeSmoothly = value;
		return value;
	}
	,get_isCubeTexture: function() {
		return this._isCubeTexture;
	}
	,set_isCubeTexture: function(value) {
		this._isCubeTexture = value;
		return value;
	}
	,get_isRectangleTexture: function() {
		return this._isRectangleTexture;
	}
	,set_isRectangleTexture: function(value) {
		this._isRectangleTexture = value;
		return value;
	}
	,get_generateSmoothNormals: function() {
		return this._generateSmoothNormals;
	}
	,set_generateSmoothNormals: function(value) {
		this._generateSmoothNormals = value;
		return value;
	}
	,get_normalMaxSmoothingAngle: function() {
		return this._normalMaxSmoothingAngle;
	}
	,set_normalMaxSmoothingAngle: function(value) {
		this._normalMaxSmoothingAngle = value;
		return value;
	}
	,get_disposeIndexBufferAfterLoading: function() {
		return this._disposeIndexBufferAfterLoading;
	}
	,set_disposeIndexBufferAfterLoading: function(value) {
		this._disposeIndexBufferAfterLoading = value;
		return value;
	}
	,get_disposeVertexBufferAfterLoading: function() {
		return this._disposeVertexBufferAfterLoading;
	}
	,set_disposeVertexBufferAfterLoading: function(value) {
		this._disposeVertexBufferAfterLoading = value;
		return value;
	}
	,get_disposeTextureAfterLoading: function() {
		return this._disposeTextureAfterLoading;
	}
	,set_disposeTextureAfterLoading: function(value) {
		this._disposeTextureAfterLoading = value;
		return value;
	}
	,get_storeDataIfNotParsed: function() {
		return this._storeDataIfNotParsed;
	}
	,set_storeDataIfNotParsed: function(value) {
		this._storeDataIfNotParsed = value;
		return value;
	}
	,get_preserveMaterials: function() {
		return this._preserveMaterials;
	}
	,set_preserveMaterials: function(value) {
		this._preserveMaterials = value;
		return value;
	}
	,get_trackAssetDescriptor: function() {
		return this._trackAssetDescriptor;
	}
	,set_trackAssetDescriptor: function(value) {
		this._trackAssetDescriptor = value;
		return value;
	}
	,get_skinningFramerate: function() {
		return this._skinningFramerate;
	}
	,set_skinningFramerate: function(value) {
		this._skinningFramerate = value;
		return value;
	}
	,get_skinningMethod: function() {
		return this._skinningMethod;
	}
	,set_skinningMethod: function(value) {
		this._skinningMethod = value;
		return value;
	}
	,get_effect: function() {
		return this._effect;
	}
	,set_effect: function(effect) {
		this._effect = effect;
		return effect;
	}
	,get_material: function() {
		return this._material;
	}
	,set_material: function(material) {
		this._material = material;
		return material;
	}
	,registerTextureFormat: function(textureFormat) {
		this._textureFormats.push(textureFormat);
		return this;
	}
	,get_protocolFunction: function() {
		if(this._protocolFunction != null) {
			return this._protocolFunction;
		} else {
			return $bind(this,this.defaultProtocolFunction);
		}
	}
	,set_protocolFunction: function(func) {
		this._protocolFunction = func;
		return func;
	}
	,get_parserFunction: function() {
		return this._parserFunction;
	}
	,set_parserFunction: function(func) {
		this._parserFunction = func;
		return func;
	}
	,get_materialFunction: function() {
		return this._materialFunction;
	}
	,set_materialFunction: function(func) {
		this._materialFunction = func;
		return func;
	}
	,get_textureFunction: function() {
		return this._textureFunction;
	}
	,set_textureFunction: function(func) {
		this._textureFunction = func;
		return func;
	}
	,get_geometryFunction: function() {
		return this._geometryFunction;
	}
	,set_geometryFunction: function(func) {
		this._geometryFunction = func;
		return func;
	}
	,get_uriFunction: function() {
		return this._uriFunction;
	}
	,set_uriFunction: function(func) {
		this._uriFunction = func;
		return func;
	}
	,get_nodeFunction: function() {
		return this._nodeFunction;
	}
	,set_nodeFunction: function(func) {
		this._nodeFunction = func;
		return func;
	}
	,get_effectFunction: function() {
		return this._effectFunction;
	}
	,set_effectFunction: function(func) {
		this._effectFunction = func;
		return func;
	}
	,get_textureFormatFunction: function() {
		return this._textureFormatFunction;
	}
	,set_textureFormatFunction: function(func) {
		this._textureFormatFunction = func;
		return func;
	}
	,get_attributeFunction: function() {
		return this._attributeFunction;
	}
	,set_attributeFunction: function(func) {
		this._attributeFunction = func;
		return func;
	}
	,get_fileStatusFunction: function() {
		return this._fileStatusFunction;
	}
	,set_fileStatusFunction: function(func) {
		this._fileStatusFunction = func;
		return func;
	}
	,get_preventLoadingFunction: function() {
		return this._preventLoadingFunction;
	}
	,set_preventLoadingFunction: function(func) {
		this._preventLoadingFunction = func;
		return func;
	}
	,get_seekingOffset: function() {
		return this._seekingOffset;
	}
	,set_seekingOffset: function(value) {
		this._seekingOffset = value;
		return value;
	}
	,get_seekedLength: function() {
		return this._seekedLength;
	}
	,set_seekedLength: function(value) {
		this._seekedLength = value;
		return value;
	}
	,registerParser: function(extension,cls) {
		var ext = extension.toLowerCase();
		var _this = this._parsers;
		if(__map_reserved[ext] != null) {
			_this.setReserved(ext,cls);
		} else {
			_this.h[ext] = cls;
		}
		return this;
	}
	,getParser: function(extension) {
		if(this._parserFunction != null) {
			return this._parserFunction(extension);
		}
		var _this = this._parsers;
		if((__map_reserved[extension] != null ? _this.existsReserved(extension) : _this.h.hasOwnProperty(extension)) == false) {
			return null;
		} else {
			var _this1 = this._parsers;
			if(__map_reserved[extension] != null) {
				return _this1.getReserved(extension);
			} else {
				return _this1.h[extension];
			}
		}
	}
	,registerProtocol: function(cls,protocol) {
		var prefix = protocol.toLowerCase();
		var _this = this._protocols;
		if(__map_reserved[prefix] != null) {
			_this.setReserved(prefix,cls);
		} else {
			_this.h[prefix] = cls;
		}
		return this;
	}
	,getProtocol: function(protocol) {
		var p;
		var _this = this._protocols;
		if((__map_reserved[protocol] != null ? _this.existsReserved(protocol) : _this.h.hasOwnProperty(protocol)) == false) {
			p = null;
		} else {
			var _this1 = this._protocols;
			if(__map_reserved[protocol] != null) {
				p = _this1.getReserved(protocol);
			} else {
				p = _this1.h[protocol];
			}
		}
		if(p != null) {
			return p;
		}
		var defaultProtocol;
		var _this2 = minko_file_Options._defaultProtocols;
		if((__map_reserved[protocol] != null ? _this2.existsReserved(protocol) : _this2.h.hasOwnProperty(protocol)) == false) {
			defaultProtocol = null;
		} else {
			var _this3 = minko_file_Options._defaultProtocols;
			if(__map_reserved[protocol] != null) {
				defaultProtocol = _this3.getReserved(protocol);
			} else {
				defaultProtocol = _this3.h[protocol];
			}
		}
		return defaultProtocol;
	}
	,copyFrom: function(copy) {
		this._context = copy._context;
		this._assets = copy._assets;
		this._includePaths = copy._includePaths.concat([]);
		this._platforms = copy._platforms.concat([]);
		this._userFlags = copy._userFlags.concat([]);
		this._optimizeForRendering = copy._optimizeForRendering;
		this._parsers = copy._parsers;
		this._protocols = copy._protocols;
		this._generateMipMaps = copy._generateMipMaps;
		this._parseMipMaps = copy._parseMipMaps;
		this._resizeSmoothly = copy._resizeSmoothly;
		this._isCubeTexture = copy._isCubeTexture;
		this._isRectangleTexture = copy._isRectangleTexture;
		this._generateSmoothNormals = copy._generateSmoothNormals;
		this._normalMaxSmoothingAngle = copy._normalMaxSmoothingAngle;
		this._includeAnimation = copy._includeAnimation;
		this._startAnimation = copy._startAnimation;
		this._disposeIndexBufferAfterLoading = copy._disposeIndexBufferAfterLoading;
		this._disposeVertexBufferAfterLoading = copy._disposeVertexBufferAfterLoading;
		this._disposeTextureAfterLoading = copy._disposeTextureAfterLoading;
		this._storeDataIfNotParsed = copy._storeDataIfNotParsed;
		this._preserveMaterials = copy._preserveMaterials;
		this._trackAssetDescriptor = copy._trackAssetDescriptor;
		this._skinningFramerate = copy._skinningFramerate;
		this._skinningMethod = copy._skinningMethod;
		this._effect = copy._effect;
		this._textureFormats = copy._textureFormats;
		this._material = copy._material;
		this._materialFunction = copy._materialFunction;
		this._textureFunction = copy._textureFunction;
		this._geometryFunction = copy._geometryFunction;
		this._protocolFunction = copy._protocolFunction;
		this._parserFunction = copy._parserFunction;
		this._uriFunction = copy._uriFunction;
		this._nodeFunction = copy._nodeFunction;
		this._effectFunction = copy._effectFunction;
		this._textureFormatFunction = copy._textureFormatFunction;
		this._attributeFunction = copy._attributeFunction;
		this._fileStatusFunction = copy._fileStatusFunction;
		this._preventLoadingFunction = copy._preventLoadingFunction;
		this._loadAsynchronously = copy._loadAsynchronously;
		this._seekingOffset = copy._seekingOffset;
		this._seekedLength = copy._seekedLength;
		return this;
	}
	,initialize: function() {
		this.resetNotInheritedValues();
		this.initializeDefaultFunctions();
		var _this = this._parsers;
		if(!(__map_reserved["effect"] != null ? _this.existsReserved("effect") : _this.h.hasOwnProperty("effect"))) {
			this.registerParser("effect",function() {
				return new minko_file_EffectParser();
			});
		}
		var _this1 = minko_file_Options._defaultProtocols;
		if(!(__map_reserved["file"] != null ? _this1.existsReserved("file") : _this1.h.hasOwnProperty("file"))) {
			minko_file_Options.registerDefaultProtocol("file",function() {
				return new minko_file_FileProtocol();
			});
		}
	}
	,initializePlatforms: function() {
	}
	,initializeUserFlags: function() {
	}
	,initializeDefaultFunctions: function() {
		var options = this;
		if(this._materialFunction == null) {
			this._materialFunction = function(UnnamedParameter1,material) {
				return material;
			};
		}
		if(this._textureFunction == null) {
			this._textureFunction = function(UnnamedParameter11,texture) {
				return texture;
			};
		}
		if(this._geometryFunction == null) {
			this._geometryFunction = function(UnnamedParameter12,geom) {
				return geom;
			};
		}
		if(this._uriFunction == null) {
			this._uriFunction = function(uri) {
				return uri;
			};
		}
		if(this._nodeFunction == null) {
			this._nodeFunction = function(node) {
				return node;
			};
		}
		if(this._effectFunction == null) {
			this._effectFunction = function(effect) {
				return effect;
			};
		}
		this._textureFormatFunction = function(availableTextureFormats) {
			var defaultTextureFormats = [12,13,10,11,8,9,5,4,15,14,7,6,3,2,1,0];
			var textureFormats = options._textureFormats.length == 0 ? defaultTextureFormats : options._textureFormats;
			var textureFormatIt = Lambda.find(textureFormats,function(textureFormat) {
				return Lambda.has(availableTextureFormats,textureFormat);
			});
			if(textureFormatIt != null) {
				return textureFormatIt;
			}
			if(Lambda.has(textureFormats,0) && Lambda.has(availableTextureFormats,1)) {
				return 1;
			}
			if(Lambda.has(textureFormats,1) && Lambda.has(availableTextureFormats,0)) {
				return 0;
			}
			var errorMessage = "No desired texture format available";
			throw new js__$Boot_HaxeError(errorMessage);
		};
		if(this._material == null) {
			this._material = minko_file_Options._defaultMaterial;
		}
		if(this._attributeFunction == null) {
			this._attributeFunction = function(node1,key,value) {
			};
		}
		this._parserFunction = null;
		if(this._preventLoadingFunction == null) {
			this._preventLoadingFunction = function(filename) {
				return false;
			};
		}
	}
	,resetNotInheritedValues: function() {
		this.set_seekingOffset(0);
		this.set_seekedLength(0);
	}
	,defaultProtocolFunction: function(filename) {
		var protocol = "";
		var index = 0;
		var _g1 = 0;
		var _g = filename.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < filename.length - 2 && filename.charAt(i) == ":" && filename.charAt(i + 1) == "/" && filename.charAt(i + 2) == "/") {
				break;
			}
			protocol += filename.charAt(i);
			index = i;
		}
		if(index != filename.length) {
			var loader = this.getProtocol(protocol);
			if(loader != null) {
				return loader;
			}
		}
		return this.getProtocol("file");
	}
	,__class__: minko_file_Options
};
var minko_file_PNGParser = $hx_exports["minko"]["file"]["PNGParser"] = function() {
	minko_file_AbstractParser.call(this);
};
minko_file_PNGParser.__name__ = true;
minko_file_PNGParser.__super__ = minko_file_AbstractParser;
minko_file_PNGParser.prototype = $extend(minko_file_AbstractParser.prototype,{
	parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var _gthis = this;
		minko_utils_WebNodeTools.loadFromBytes("png",data,function(pd) {
			_gthis.__parse(filename,resolvedFilename,options,pd,assetLibrary);
		});
	}
	,__parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var bmpData = data.pixels;
		var width = data.width;
		var height = data.height;
		var texture = null;
		if(options.get_isCubeTexture()) {
			var parser = new minko_file_MipMapChainParser();
			var cubeTexture = parser.parseCubeTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),options.get_parseMipMaps() || options.get_generateMipmaps(),options.get_resizeSmoothly(),1,filename);
			cubeTexture = (options.get_textureFunction())(filename,cubeTexture);
			assetLibrary.setCubeTexture(filename,cubeTexture);
			texture = cubeTexture;
		} else if(!options.get_isRectangleTexture()) {
			var parser1 = new minko_file_MipMapChainParser();
			var texture2d = parser1.parseTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),options.get_parseMipMaps() || options.get_generateMipmaps(),options.get_resizeSmoothly(),1,filename);
			texture2d = (options.get_textureFunction())(filename,texture2d);
			texture = texture2d;
			assetLibrary.setTexture(filename,texture2d);
		}
		console.log("PNGParser" + filename);
		texture.upload();
		if(options.get_disposeTextureAfterLoading()) {
			texture.disposeData();
		}
		this.get_complete().execute(this);
	}
	,__class__: minko_file_PNGParser
});
var minko_geometry_Bone = $hx_exports["minko"]["geometry"]["Bone"] = function(node,offsetMatrix,vertexIds,vertexWeights) {
	this._node = node;
	this._offsetMatrix = offsetMatrix;
	this._vertexIds = vertexIds;
	this._vertexWeights = vertexWeights;
	if(this._vertexIds.length != this._vertexWeights.length) {
		throw new js__$Boot_HaxeError("A bone's arrays of vertex indices and vertex weights must have the same size.");
	}
};
minko_geometry_Bone.__name__ = true;
minko_geometry_Bone.create = function(node,offsetMatrix,vertexIds,vertexWeights) {
	return new minko_geometry_Bone(node,offsetMatrix,vertexIds,vertexWeights);
};
minko_geometry_Bone.prototype = {
	get_node: function() {
		return this._node;
	}
	,get_offsetMatrix: function() {
		return this._offsetMatrix;
	}
	,get_vertexIds: function() {
		return this._vertexIds;
	}
	,get_vertexWeights: function() {
		return this._vertexWeights;
	}
	,__class__: minko_geometry_Bone
};
var minko_geometry_Geometry = $hx_exports["minko"]["geometry"]["Geometry"] = function(name) {
	minko_Has_$uuid.call(this);
	this._data = minko_data_Provider.create();
	this._vertexSize = 0;
	this._numVertices = 0;
	this._indexBuffer = null;
	this._vertexBuffers = [];
	this._vbToVertexSizeChangedSlot = new haxe_ds_ObjectMap();
	this._data.set("name",name);
	this._data.set("uuid",this._data.get_uuid());
};
minko_geometry_Geometry.__name__ = true;
minko_geometry_Geometry.createbyName = function(name) {
	if(name == null) {
		name = "geometry";
	}
	return new minko_geometry_Geometry(name);
};
minko_geometry_Geometry.__super__ = minko_Has_$uuid;
minko_geometry_Geometry.prototype = $extend(minko_Has_$uuid.prototype,{
	dispose: function() {
		this._data = null;
		this._vertexBuffers = null;
		this._indexBuffer = null;
	}
	,get_uuid: function() {
		return this._data.get_uuid();
	}
	,clone: function() {
		var geometry = new minko_geometry_Geometry("").copyFrom(this);
		return geometry;
	}
	,get_data: function() {
		return this._data;
	}
	,get_vertexBuffers: function() {
		return this._vertexBuffers;
	}
	,get_name: function() {
		return this._data.get("name");
	}
	,vertexBuffer: function(vertexAttributeName) {
		var vertexBufferIt = Lambda.find(this._vertexBuffers,function(vb) {
			return vb.hasAttribute(vertexAttributeName);
		});
		if(vertexBufferIt == null) {
			return null;
		}
		return vertexBufferIt;
	}
	,hasVertexBuffer: function(vertexBuffer) {
		return Lambda.has(this._vertexBuffers,vertexBuffer);
	}
	,hasVertexAttribute: function(vertexAttributeName) {
		return this._data.hasProperty(vertexAttributeName);
	}
	,set_indices: function(__indices) {
		this._indexBuffer = __indices;
		if(__indices.get_isReady()) {
			this._data.set("indices",__indices.get_id());
			this._data.set("firstIndex",0);
			this._data.set("numIndices",__indices.get_numIndices());
		}
		return __indices;
	}
	,get_indices: function() {
		return this._indexBuffer;
	}
	,addVertexBuffer: function(vertexBuffer) {
		if(this.hasVertexBuffer(vertexBuffer)) {
			throw new js__$Boot_HaxeError("vertexBuffer");
		}
		var bufVertexSize = vertexBuffer.get_vertexSize();
		var bufNumVertices = vertexBuffer.get_numVertices();
		var _g = 0;
		var _g1 = vertexBuffer.get_attributes();
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this._data.set(attribute.name,attribute);
		}
		this._vertexSize += bufVertexSize;
		this._data.set("vertex.size",this._vertexSize);
		if(this._vertexBuffers.length > 0 && this._numVertices != bufNumVertices) {
			throw new js__$Boot_HaxeError("inconsistent number of vertices between the geometry's vertex streams.");
		} else if(this._vertexBuffers.length == 0) {
			this._numVertices = bufNumVertices;
		}
		this._vertexBuffers.push(vertexBuffer);
		this._vbToVertexSizeChangedSlot.set(vertexBuffer,vertexBuffer.get_vertexSizeChanged().connect($bind(this,this.vertexSizeChanged)));
		this.computeCenterPosition();
	}
	,removeVertexBuffer: function(vertexBufferIt) {
		if(!this.hasVertexBuffer(vertexBufferIt)) {
			throw new js__$Boot_HaxeError("vertexBuffer");
		}
		var vertexBuffer = vertexBufferIt;
		var _g = 0;
		var _g1 = vertexBuffer.get_attributes();
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this._data.unset(attribute.name);
		}
		this._vertexSize -= vertexBuffer.get_vertexSize();
		this._data.set("vertex.size",this._vertexSize);
		HxOverrides.remove(this._vertexBuffers,vertexBufferIt);
		if(this._vertexBuffers.length == 0) {
			this._numVertices = 0;
		}
		this._vbToVertexSizeChangedSlot.h[vertexBuffer.__id__].disconnect();
		this._vbToVertexSizeChangedSlot.remove(vertexBuffer);
		vertexBuffer.dispose();
	}
	,removeVertexBufferbyName: function(attributeName) {
		var vertexBufferIt = Lambda.find(this._vertexBuffers,function(vb) {
			return vb.hasAttribute(attributeName);
		});
		if(vertexBufferIt == null) {
			throw new js__$Boot_HaxeError("attributeName = " + attributeName);
		}
		this.removeVertexBuffer(vertexBufferIt);
	}
	,get_numVertices: function() {
		return this._numVertices;
	}
	,get_vertexSize: function() {
		return this._vertexSize;
	}
	,computeNormals: function() {
		if(this.get_numVertices() == 0) {
			return this;
		}
		var normalBuffer = this.vertexBuffer("normal");
		var xyzBuffer = this.vertexBuffer("position");
		if(xyzBuffer == null) {
			throw new js__$Boot_HaxeError("Computation of normals requires positions.");
		}
		var uintIndices = this.get_indices().get_dataPointer();
		var numFaces = Math.floor(uintIndices.length / 3);
		var vertexIds = [0,0,0];
		var xyz = [];
		var xyzAttribute = xyzBuffer.attribute("position");
		var xyzSize = xyzAttribute.vertexSize;
		var xyzOffset = xyzAttribute.offset;
		var xyzData = xyzBuffer.get_data();
		var normalSize;
		var normalOffset;
		var normalsData;
		if(normalBuffer != null) {
			normalsData = normalBuffer.get_data();
			var normalAttribute = normalBuffer.attribute("normal");
			normalSize = normalAttribute.vertexSize;
			normalOffset = normalAttribute.offset;
		} else {
			var _g = [];
			var _g2 = 0;
			var _g1 = 3 * this.get_numVertices();
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(0.0);
			}
			normalsData = _g;
			normalSize = 3;
			normalOffset = 0;
		}
		var _g11 = 0;
		var _g3 = this.get_numVertices();
		while(_g11 < _g3) {
			var i1 = _g11++;
			var index = normalOffset + i1 * normalSize;
			normalsData[index] = 0.0;
			normalsData[index + 1] = 0.0;
			normalsData[index + 2] = 0.0;
		}
		var offset = 0;
		var _g12 = 0;
		var _g4 = numFaces;
		while(_g12 < _g4) {
			var i2 = _g12++;
			var _g21 = 0;
			while(_g21 < 3) {
				var k = _g21++;
				vertexIds[k] = uintIndices[offset++];
				var index1 = xyzOffset + vertexIds[k] * xyzSize;
				var this1 = new glm_Vec3Base();
				this1.x = xyzData[index1];
				this1.y = xyzData[index1 + 1];
				this1.z = xyzData[index1 + 2];
				xyz[k] = this1;
			}
			var a = xyz[0];
			var b = xyz[1];
			var this2 = new glm_Vec3Base();
			this2.x = 0;
			this2.y = 0;
			this2.z = 0;
			var dest = this2;
			dest.x = a.x - b.x;
			dest.y = a.y - b.y;
			dest.z = a.z - b.z;
			var a1 = dest;
			var a2 = xyz[0];
			var b1 = xyz[2];
			var this3 = new glm_Vec3Base();
			this3.x = 0;
			this3.y = 0;
			this3.z = 0;
			var dest1 = this3;
			dest1.x = a2.x - b1.x;
			dest1.y = a2.y - b1.y;
			dest1.z = a2.z - b1.z;
			var b2 = dest1;
			var this4 = new glm_Vec3Base();
			this4.x = 0;
			this4.y = 0;
			this4.z = 0;
			var dest2 = this4;
			var x = a1.y * b2.z - a1.z * b2.y;
			var y = a1.z * b2.x - a1.x * b2.z;
			var z = a1.x * b2.y - a1.y * b2.x;
			var this5 = new glm_Vec3Base();
			this5.x = x;
			this5.y = y;
			this5.z = z;
			dest2 = this5;
			var faceNormal = dest2;
			var _g22 = 0;
			while(_g22 < 3) {
				var k1 = _g22++;
				var index2 = normalOffset + normalSize * vertexIds[k1];
				normalsData[index2] += faceNormal.x;
				normalsData[index2 + 1] += faceNormal.y;
				normalsData[index2 + 2] += faceNormal.z;
			}
		}
		var _g13 = 0;
		var _g5 = this.get_numVertices();
		while(_g13 < _g5) {
			var i3 = _g13++;
			var indexOffset = normalOffset + i3 * normalSize;
			var x1 = normalsData[indexOffset];
			var y1 = normalsData[indexOffset + 1];
			var z1 = normalsData[indexOffset + 2];
			var lengthSquared = x1 * x1 + y1 * y1 + z1 * z1;
			var invLength = lengthSquared > glm_GLM.EPSILON ? 1.0 / Math.sqrt(lengthSquared) : 1.0;
			normalsData[indexOffset] *= invLength;
			normalsData[indexOffset + 1] *= invLength;
			normalsData[indexOffset + 2] *= invLength;
		}
		if(normalBuffer == null) {
			normalBuffer = minko_render_VertexBuffer.createbyData(xyzBuffer.get_context(),normalsData);
			normalBuffer.addAttribute("normal",normalSize,normalOffset);
			this.addVertexBuffer(normalBuffer);
			normalsData = null;
		}
		return this;
	}
	,computeTangentSpace: function(doNormals) {
		if(this.get_numVertices() == 0) {
			return this;
		}
		var xyzBuffer = this.vertexBuffer("position");
		if(xyzBuffer == null) {
			throw new js__$Boot_HaxeError("Computation of tangent space requires positions.");
		}
		var uvBuffer = this.vertexBuffer("uv");
		if(uvBuffer == null) {
			throw new js__$Boot_HaxeError("Computation of tangent space requires uvs.");
		}
		if(doNormals) {
			this.computeNormals();
		}
		var uintIndices = this.get_indices().get_dataPointer();
		var numFaces = Math.floor(uintIndices.length / 3);
		var vertexIds = [0,0,0];
		var xyz = [];
		var uv = [];
		var xyzSize = xyzBuffer.get_vertexSize();
		var xyzOffset = xyzBuffer.attribute("position").offset;
		var xyzData = xyzBuffer.get_data();
		var uvSize = uvBuffer.get_vertexSize();
		var uvOffset = uvBuffer.attribute("uv").offset;
		var uvData = uvBuffer.get_data();
		var _g = [];
		var _g2 = 0;
		var _g1 = 3 * this.get_numVertices();
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0.0);
		}
		var tangentsData = _g;
		var offset = 0;
		var _g21 = 0;
		var _g11 = numFaces;
		while(_g21 < _g11) {
			var i1 = _g21++;
			var _g3 = 0;
			while(_g3 < 3) {
				var k = _g3++;
				vertexIds[k] = uintIndices[offset++];
				var index = xyzOffset + vertexIds[k] * xyzSize;
				var this1 = new glm_Vec3Base();
				this1.x = xyzData[index];
				this1.y = xyzData[index + 1];
				this1.z = xyzData[index + 2];
				xyz[k] = this1;
				index = uvOffset + vertexIds[k] * uvSize;
				var this2 = new glm_Vec2Base();
				this2.x = uvData[index];
				this2.y = uvData[index + 1];
				uv[k] = this2;
			}
			var a = uv[0];
			var b = uv[2];
			var this3 = new glm_Vec2Base();
			this3.x = 0;
			this3.y = 0;
			var dest = this3;
			dest.x = a.x - b.x;
			dest.y = a.y - b.y;
			var uv02 = dest;
			var a1 = uv[1];
			var b1 = uv[2];
			var this4 = new glm_Vec2Base();
			this4.x = 0;
			this4.y = 0;
			var dest1 = this4;
			dest1.x = a1.x - b1.x;
			dest1.y = a1.y - b1.y;
			var uv12 = dest1;
			var denom = uv02.x * uv12.y - uv12.x * uv02.y;
			var invDenom = Math.abs(denom) > glm_GLM.EPSILON ? 1.0 / denom : 1.0;
			var a2 = xyz[0];
			var b2 = xyz[2];
			var this5 = new glm_Vec3Base();
			this5.x = 0;
			this5.y = 0;
			this5.z = 0;
			var dest2 = this5;
			dest2.x = a2.x - b2.x;
			dest2.y = a2.y - b2.y;
			dest2.z = a2.z - b2.z;
			var a3 = dest2;
			var s = uv12.y;
			var this6 = new glm_Vec3Base();
			this6.x = 0;
			this6.y = 0;
			this6.z = 0;
			var dest3 = this6;
			dest3.x = a3.x * s;
			dest3.y = a3.y * s;
			dest3.z = a3.z * s;
			var a4 = dest3;
			var a5 = xyz[1];
			var b3 = xyz[2];
			var this7 = new glm_Vec3Base();
			this7.x = 0;
			this7.y = 0;
			this7.z = 0;
			var dest4 = this7;
			dest4.x = a5.x - b3.x;
			dest4.y = a5.y - b3.y;
			dest4.z = a5.z - b3.z;
			var a6 = dest4;
			var s1 = uv02.y;
			var this8 = new glm_Vec3Base();
			this8.x = 0;
			this8.y = 0;
			this8.z = 0;
			var dest5 = this8;
			dest5.x = a6.x * s1;
			dest5.y = a6.y * s1;
			dest5.z = a6.z * s1;
			var b4 = dest5;
			var this9 = new glm_Vec3Base();
			this9.x = 0;
			this9.y = 0;
			this9.z = 0;
			var dest6 = this9;
			dest6.x = a4.x - b4.x;
			dest6.y = a4.y - b4.y;
			dest6.z = a4.z - b4.z;
			var a7 = dest6;
			var this10 = new glm_Vec3Base();
			this10.x = 0;
			this10.y = 0;
			this10.z = 0;
			var dest7 = this10;
			dest7.x = a7.x * invDenom;
			dest7.y = a7.y * invDenom;
			dest7.z = a7.z * invDenom;
			var faceTangent = dest7;
			var _g31 = 0;
			while(_g31 < 3) {
				var k1 = _g31++;
				var index1 = 3 * vertexIds[k1];
				tangentsData[index1] += faceTangent.x;
				tangentsData[index1 + 1] += faceTangent.y;
				tangentsData[index1 + 2] += faceTangent.z;
			}
		}
		var index2 = 0;
		var _g22 = 0;
		var _g12 = this.get_numVertices();
		while(_g22 < _g12) {
			var i2 = _g22++;
			var x = tangentsData[index2];
			var y = tangentsData[index2 + 1];
			var z = tangentsData[index2 + 2];
			var lengthSquared = x * x + y * y + z * z;
			var invLength = lengthSquared > glm_GLM.EPSILON ? 1.0 / Math.sqrt(lengthSquared) : 1.0;
			tangentsData[index2] *= invLength;
			tangentsData[index2 + 1] *= invLength;
			tangentsData[index2 + 2] *= invLength;
			index2 += 3;
		}
		var tangentsBuffer = minko_render_VertexBuffer.createbyData(xyzBuffer.get_context(),tangentsData);
		tangentsBuffer.addAttribute("tangent",3,0);
		this.addVertexBuffer(tangentsBuffer);
		return this;
	}
	,computeCenterPosition: function() {
		if(this.get_numVertices() == 0) {
			return this;
		}
		var xyzBuffer = this.vertexBuffer("position");
		if(xyzBuffer == null) {
			return this;
		}
		var xyzAttr = xyzBuffer.attribute("position");
		var xyzOffset = xyzAttr.offset;
		var xyzSize = Math.floor(Math.max(0,Math.min(3,xyzAttr.size)));
		var xyzData = xyzBuffer.get_data();
		var minXYZ = [Infinity,Infinity,Infinity];
		var maxXYZ = [-Infinity,-Infinity,-Infinity];
		var vertexIndex = xyzOffset;
		while(vertexIndex < xyzData.length) {
			var _g1 = 0;
			var _g = xyzSize;
			while(_g1 < _g) {
				var k = _g1++;
				var vk = xyzData[vertexIndex + k];
				minXYZ[k] = Math.min(minXYZ[k],vk);
				maxXYZ[k] = Math.max(maxXYZ[k],vk);
			}
			vertexIndex += xyzBuffer.get_vertexSize();
		}
		var this1 = new glm_Vec3Base();
		this1.x = minXYZ[0];
		this1.y = minXYZ[1];
		this1.z = minXYZ[2];
		var minPosition = this1;
		var this2 = new glm_Vec3Base();
		this2.x = maxXYZ[0];
		this2.y = maxXYZ[1];
		this2.z = maxXYZ[2];
		var maxPosition = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var dest = this3;
		dest.x = minPosition.x - maxPosition.x;
		dest.y = minPosition.y - maxPosition.y;
		dest.z = minPosition.z - maxPosition.z;
		var a = dest;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest1 = this4;
		dest1.x = a.x * .5;
		dest1.y = a.y * .5;
		dest1.z = a.z * .5;
		var centerPosition = dest1;
		this._data.set("centerPosition",centerPosition);
		return this;
	}
	,removeDuplicatedVertices: function() {
		var vertices = [];
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vb = _g1[_g];
			++_g;
			vertices.push(vb.get_data());
		}
		this.removeDuplicateVertices(this._indexBuffer.get_data(),vertices,this.get_numVertices());
	}
	,removeDuplicateVertices: function(indices,vertices,numVertices) {
		var newVertexCount = 0;
		var newLimit = 0;
		var hashToNewVertexId = new haxe_ds_StringMap();
		var oldVertexIdToNewVertexId_h = { };
		var _g1 = 0;
		var _g = numVertices;
		while(_g1 < _g) {
			var oldVertexId = _g1++;
			var hash = "";
			var _g2 = 0;
			while(_g2 < vertices.length) {
				var vb = vertices[_g2];
				++_g2;
				var vertexSize = Math.floor(vb.length / numVertices);
				var _g4 = 0;
				var _g3 = vertexSize;
				while(_g4 < _g3) {
					var i = _g4++;
					hash += vb[oldVertexId * vertexSize + i] + " ";
				}
			}
			var newVertexId = 0;
			if(!(__map_reserved[hash] != null ? hashToNewVertexId.existsReserved(hash) : hashToNewVertexId.h.hasOwnProperty(hash))) {
				newVertexId = newVertexCount++;
				if(__map_reserved[hash] != null) {
					hashToNewVertexId.setReserved(hash,newVertexId);
				} else {
					hashToNewVertexId.h[hash] = newVertexId;
				}
				newLimit = 1 + newVertexId;
				if(newVertexId != oldVertexId) {
					var _g21 = 0;
					while(_g21 < vertices.length) {
						var vb1 = vertices[_g21];
						++_g21;
						var vertexSize1 = Math.floor(vb1.length / numVertices);
						var _g41 = 0;
						var _g31 = vertexSize1;
						while(_g41 < _g31) {
							var i1 = _g41++;
							vb1[newVertexId * vertexSize1 + i1] = vb1[oldVertexId * vertexSize1 + i1];
						}
					}
				}
			} else {
				newVertexId = __map_reserved[hash] != null ? hashToNewVertexId.getReserved(hash) : hashToNewVertexId.h[hash];
			}
			oldVertexIdToNewVertexId_h[oldVertexId] = newVertexId;
		}
		var _g5 = 0;
		while(_g5 < vertices.length) {
			var vb2 = vertices[_g5];
			++_g5;
			var len = newLimit * vb2.length / numVertices;
			while(vb2.length > len) vb2.pop();
		}
		var _g11 = 0;
		var _g6 = indices.length;
		while(_g11 < _g6) {
			var i2 = _g11++;
			var index = indices[i2];
			indices[i2] = oldVertexIdToNewVertexId_h[index];
		}
	}
	,getVertexAttribute: function(attributeName) {
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			if(vertexBuffer.hasAttribute(attributeName)) {
				return vertexBuffer.attribute(attributeName);
			}
		}
		throw new js__$Boot_HaxeError("attributeName = " + attributeName);
	}
	,castRay: function(ray,distance,triangle,hitXyz,hitUv,hitNormal) {
		var EPSILON = 0.00001;
		var hit = false;
		var indicesData = this._indexBuffer.get_data();
		var numIndices = indicesData.length;
		var xyzBuffer = this.vertexBuffer("position");
		var xyzData = xyzBuffer.get_data();
		var xyzPtr = xyzData;
		var xyzVertexSize = xyzBuffer.get_vertexSize();
		var xyzOffset = xyzBuffer.attribute("position").offset;
		var minDistance = Infinity;
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		var lambda = this1;
		var triangleIndice = -3;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var v0 = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var v1 = this3;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var v2 = this4;
		var this5 = new glm_Vec3Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		var edge1 = this5;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		var edge2 = this6;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var pvec = this7;
		var this8 = new glm_Vec3Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		var tvec = this8;
		var this9 = new glm_Vec3Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		var qvec = this9;
		var dot = 0.0;
		var invDot = 0.0;
		var u = 0.0;
		var v = 0.0;
		var t = 0.0;
		var i = 0;
		while(i < numIndices) {
			var index = indicesData[i] * xyzVertexSize;
			var this10 = new glm_Vec3Base();
			this10.x = xyzPtr[index];
			this10.y = xyzPtr[index + 1];
			this10.z = xyzPtr[index + 2];
			v0 = this10;
			index = indicesData[i + 1] * xyzVertexSize;
			var this11 = new glm_Vec3Base();
			this11.x = xyzPtr[index];
			this11.y = xyzPtr[index + 1];
			this11.z = xyzPtr[index + 2];
			v1 = this11;
			index = indicesData[i + 2] * xyzVertexSize;
			var this12 = new glm_Vec3Base();
			this12.x = xyzPtr[index];
			this12.y = xyzPtr[index + 1];
			this12.z = xyzPtr[index + 2];
			v2 = this12;
			var this13 = new glm_Vec3Base();
			this13.x = 0;
			this13.y = 0;
			this13.z = 0;
			var dest = this13;
			dest.x = v1.x - v0.x;
			dest.y = v1.y - v0.y;
			dest.z = v1.z - v0.z;
			edge1 = dest;
			var this14 = new glm_Vec3Base();
			this14.x = 0;
			this14.y = 0;
			this14.z = 0;
			var dest1 = this14;
			dest1.x = v2.x - v0.x;
			dest1.y = v2.y - v0.y;
			dest1.z = v2.z - v0.z;
			edge2 = dest1;
			var a = ray.get_direction();
			var this15 = new glm_Vec3Base();
			this15.x = 0;
			this15.y = 0;
			this15.z = 0;
			var dest2 = this15;
			var x = a.y * edge2.z - a.z * edge2.y;
			var y = a.z * edge2.x - a.x * edge2.z;
			var z = a.x * edge2.y - a.y * edge2.x;
			var this16 = new glm_Vec3Base();
			this16.x = x;
			this16.y = y;
			this16.z = z;
			dest2 = this16;
			pvec = dest2;
			dot = edge1.x * pvec.x + edge1.y * pvec.y + edge1.z * pvec.z;
			if(dot > -EPSILON && dot < EPSILON) {
				continue;
			}
			invDot = 1.0 / dot;
			var a1 = ray.get_origin();
			var this17 = new glm_Vec3Base();
			this17.x = 0;
			this17.y = 0;
			this17.z = 0;
			var dest3 = this17;
			dest3.x = a1.x - v0.x;
			dest3.y = a1.y - v0.y;
			dest3.z = a1.z - v0.z;
			tvec = dest3;
			u = (tvec.x * pvec.x + tvec.y * pvec.y + tvec.z * pvec.z) * invDot;
			if(u < 0.0 || u > 1.0) {
				continue;
			}
			var this18 = new glm_Vec3Base();
			this18.x = 0;
			this18.y = 0;
			this18.z = 0;
			var dest4 = this18;
			var x1 = tvec.y * edge1.z - tvec.z * edge1.y;
			var y1 = tvec.z * edge1.x - tvec.x * edge1.z;
			var z1 = tvec.x * edge1.y - tvec.y * edge1.x;
			var this19 = new glm_Vec3Base();
			this19.x = x1;
			this19.y = y1;
			this19.z = z1;
			dest4 = this19;
			qvec = dest4;
			var a2 = ray.get_direction();
			v = (a2.x * qvec.x + a2.y * qvec.y + a2.z * qvec.z) * invDot;
			if(v < 0.0 || u + v > 1.0) {
				continue;
			}
			t = (qvec.x * edge2.x + qvec.y * edge2.y + qvec.z * edge2.z) * invDot;
			if(t < minDistance && t > 0) {
				minDistance = t;
				distance = t;
				triangle = i;
				hit = true;
				if(hitUv != null) {
					lambda.x = u;
					lambda.y = v;
				}
				if(hitXyz != null) {
					var x2 = ray.get_origin().x + minDistance * ray.get_direction().x;
					var y2 = ray.get_origin().y + minDistance * ray.get_direction().y;
					var z2 = ray.get_origin().z + minDistance * ray.get_direction().z;
					var this20 = new glm_Vec3Base();
					this20.x = x2;
					this20.y = y2;
					this20.z = z2;
					hitXyz = this20;
				}
			}
			if(hitUv != null) {
				this.getHitUv(triangle,lambda,hitUv);
			}
			if(hitNormal != null) {
				this.getHitNormal(triangle,hitNormal);
			}
			i += 3;
		}
		return hit;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vb = _g1[_g];
			++_g;
			vb.upload();
		}
		this._indexBuffer.upload();
	}
	,disposeIndexBufferData: function() {
		this._indexBuffer.disposeData();
	}
	,disposeVertexBufferData: function() {
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.disposeData();
		}
	}
	,copyFrom: function(geometry) {
		this._data = minko_data_Provider.createbyProvider(geometry._data);
		this._vertexSize = geometry._vertexSize;
		this._numVertices = geometry._numVertices;
		this._vertexBuffers = geometry._vertexBuffers.concat([]);
		this._indexBuffer = geometry._indexBuffer;
		return this;
	}
	,set_vertexSize: function(value) {
		this._vertexSize = value;
		return value;
	}
	,vertexSizeChanged: function(vertexBuffer,offset) {
		this._vertexSize += offset;
	}
	,getHitUv: function(triangle,lambda,hitUv) {
		var uvBuffer = this.vertexBuffer("uv");
		var uvData = uvBuffer.get_data();
		var uvPtr = uvData[0];
		var uvVertexSize = uvBuffer.get_vertexSize();
		var uvOffset = uvBuffer.attribute("uv").offset;
		var indicesData = this._indexBuffer.get_data();
		var u0 = uvData[indicesData[triangle] * uvVertexSize + uvOffset];
		var v0 = uvData[indicesData[triangle] * uvVertexSize + uvOffset + 1];
		var u1 = uvData[indicesData[triangle + 1] * uvVertexSize + uvOffset];
		var v1 = uvData[indicesData[triangle + 1] * uvVertexSize + uvOffset + 1];
		var u2 = uvData[indicesData[triangle + 2] * uvVertexSize + uvOffset];
		var v2 = uvData[indicesData[triangle + 2] * uvVertexSize + uvOffset + 1];
		var z = 1.0 - lambda.x - lambda.y;
		var x = z * u0 + lambda.x * u1 + lambda.y * u2;
		var y = z * v0 + lambda.x * v1 + lambda.y * v2;
		var this1 = new glm_Vec2Base();
		this1.x = x;
		this1.y = y;
		hitUv = this1;
	}
	,getHitNormal: function(triangle,hitNormal) {
		var normalBuffer = this.vertexBuffer("normal");
		var normalData = normalBuffer.get_data();
		var normalVertexSize = normalBuffer.get_vertexSize();
		var normalOffset = normalBuffer.attribute("normal").offset;
		var indicesData = this._indexBuffer.get_data();
		var index = indicesData[triangle] * normalVertexSize + normalOffset;
		var this1 = new glm_Vec3Base();
		this1.x = normalData[index];
		this1.y = normalData[index + 1];
		this1.z = normalData[index + 2];
		var v0 = this1;
		index = indicesData[triangle + 1] * normalVertexSize + normalOffset;
		var this2 = new glm_Vec3Base();
		this2.x = normalData[index];
		this2.y = normalData[index + 1];
		this2.z = normalData[index + 2];
		var v1 = this2;
		index = indicesData[triangle + 2] * normalVertexSize + normalOffset;
		var this3 = new glm_Vec3Base();
		this3.x = normalData[index];
		this3.y = normalData[index + 1];
		this3.z = normalData[index + 2];
		var v2 = this3;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest = this4;
		dest.x = v1.x - v0.x;
		dest.y = v1.y - v0.y;
		dest.z = v1.z - v0.z;
		var v = dest;
		var this5 = new glm_Vec3Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		var dest1 = this5;
		var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v.x * mult;
		dest1.y = v.y * mult;
		dest1.z = v.z * mult;
		var edge1 = dest1;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		var dest2 = this6;
		dest2.x = v2.x - v0.x;
		dest2.y = v2.y - v0.y;
		dest2.z = v2.z - v0.z;
		var v3 = dest2;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var dest3 = this7;
		var length1 = Math.sqrt(v3.x * v3.x + v3.y * v3.y + v3.z * v3.z);
		var mult1 = 0;
		if(length1 >= glm_GLM.EPSILON) {
			mult1 = 1 / length1;
		}
		dest3.x = v3.x * mult1;
		dest3.y = v3.y * mult1;
		dest3.z = v3.z * mult1;
		var edge2 = dest3;
		var this8 = new glm_Vec3Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		var dest4 = this8;
		var x = edge2.y * edge1.z - edge2.z * edge1.y;
		var y = edge2.z * edge1.x - edge2.x * edge1.z;
		var z = edge2.x * edge1.y - edge2.y * edge1.x;
		var this9 = new glm_Vec3Base();
		this9.x = x;
		this9.y = y;
		this9.z = z;
		dest4 = this9;
		hitNormal = dest4;
	}
	,__class__: minko_geometry_Geometry
});
var minko_geometry_CubeGeometry = $hx_exports["minko"]["geometry"]["CubeGeometry"] = function() {
	minko_geometry_Geometry.call(this,"cube");
};
minko_geometry_CubeGeometry.__name__ = true;
minko_geometry_CubeGeometry.create = function(context) {
	var geom = new minko_geometry_CubeGeometry();
	geom.initialize(context);
	return geom;
};
minko_geometry_CubeGeometry.__super__ = minko_geometry_Geometry;
minko_geometry_CubeGeometry.prototype = $extend(minko_geometry_Geometry.prototype,{
	initialize: function(context) {
		var xyzData = [0.5,0.5,-0.5,0.0,1.0,0.0,1.0,0.0,-0.5,0.5,0.5,0.0,1.0,0.0,0.0,1.0,0.5,0.5,0.5,0.0,1.0,0.0,1.0,1.0,0.5,0.5,-0.5,0.0,1.0,0.0,1.0,0.0,-0.5,0.5,-0.5,0.0,1.0,0.0,0.0,0.0,-0.5,0.5,0.5,0.0,1.0,0.0,0.0,1.0,-0.5,-0.5,0.5,0.0,-1.0,0.0,0.0,0.0,0.5,-0.5,-0.5,0.0,-1.0,0.0,1.0,1.0,0.5,-0.5,0.5,0.0,-1.0,0.0,1.0,0.0,-0.5,-0.5,-0.5,0.0,-1.0,0.0,0.0,1.0,0.5,-0.5,-0.5,0.0,-1.0,0.0,1.0,1.0,-0.5,-0.5,0.5,0.0,-1.0,0.0,0.0,0.0,0.5,-0.5,-0.5,0.0,0.0,-1.0,0.0,1.0,-0.5,0.5,-0.5,0.0,0.0,-1.0,1.0,0.0,0.5,0.5,-0.5,0.0,0.0,-1.0,0.0,0.0,-0.5,0.5,-0.5,0.0,0.0,-1.0,1.0,0.0,0.5,-0.5,-0.5,0.0,0.0,-1.0,0.0,1.0,-0.5,-0.5,-0.5,0.0,0.0,-1.0,1.0,1.0,-0.5,0.5,0.5,0.0,0.0,1.0,0.0,0.0,-0.5,-0.5,0.5,0.0,0.0,1.0,0.0,1.0,0.5,0.5,0.5,0.0,0.0,1.0,1.0,0.0,-0.5,-0.5,0.5,0.0,0.0,1.0,0.0,1.0,0.5,-0.5,0.5,0.0,0.0,1.0,1.0,1.0,0.5,0.5,0.5,0.0,0.0,1.0,1.0,0.0,-0.5,-0.5,0.5,-1.0,0.0,0.0,1.0,1.0,-0.5,0.5,-0.5,-1.0,0.0,0.0,0.0,0.0,-0.5,-0.5,-0.5,-1.0,0.0,0.0,0.0,1.0,-0.5,0.5,-0.5,-1.0,0.0,0.0,0.0,0.0,-0.5,-0.5,0.5,-1.0,0.0,0.0,1.0,1.0,-0.5,0.5,0.5,-1.0,0.0,0.0,1.0,0.0,0.5,-0.5,-0.5,1.0,0.0,0.0,1.0,1.0,0.5,0.5,-0.5,1.0,0.0,0.0,1.0,0.0,0.5,0.5,0.5,1.0,0.0,0.0,0.0,0.0,0.5,0.5,0.5,1.0,0.0,0.0,0.0,0.0,0.5,-0.5,0.5,1.0,0.0,0.0,0.0,1.0,0.5,-0.5,-0.5,1.0,0.0,0.0,1.0,1.0];
		var i = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35];
		var vertexBuffer = minko_render_VertexBuffer.createbyData(context,xyzData);
		vertexBuffer.addAttribute("position",3,0);
		vertexBuffer.addAttribute("normal",3,3);
		vertexBuffer.addAttribute("uv",2,6);
		this.addVertexBuffer(vertexBuffer);
		this.set_indices(minko_render_IndexBuffer.createbyData(context,i));
		this.computeCenterPosition();
	}
	,__class__: minko_geometry_CubeGeometry
});
var minko_geometry_LineGeometry = $hx_exports["minko"]["geometry"]["LineGeometry"] = function() {
	minko_geometry_Geometry.call(this,"line");
	this._currentX = 0.0;
	this._currentY = 0.0;
	this._currentZ = 0.0;
	this._numLines = 0;
	this._vertexBuffer = null;
	this.__indexBuffer = null;
};
minko_geometry_LineGeometry.__name__ = true;
minko_geometry_LineGeometry.create = function(context) {
	var ptr = new minko_geometry_LineGeometry();
	ptr.initialize(context);
	return ptr;
};
minko_geometry_LineGeometry.__super__ = minko_geometry_Geometry;
minko_geometry_LineGeometry.prototype = $extend(minko_geometry_Geometry.prototype,{
	get_currentXYZ: function() {
		var x = this._currentX;
		var y = this._currentY;
		var z = this._currentZ;
		var this1 = new glm_Vec3Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		return this1;
	}
	,get_numLines: function() {
		return this._numLines;
	}
	,moveTo: function(x,y,z) {
		this._currentX = x;
		this._currentY = y;
		this._currentZ = z;
		return this;
	}
	,moveToVector3: function(xyz) {
		return this.moveTo(xyz.x,xyz.y,xyz.z);
	}
	,lineTo: function(x,y,z,numSegments) {
		if(numSegments == null) {
			numSegments = 1;
		}
		if(numSegments == 0) {
			return this.moveTo(x,y,z);
		}
		var vertexSize = this._vertexBuffer.get_vertexSize();
		var oldVertexDataSize = this._vertexBuffer.get_data().length;
		var oldIndexDataSize = this.__indexBuffer.get_data().length;
		var vertexData = [];
		var indexData = [];
		if(oldVertexDataSize > 0) {
			vertexData = this._vertexBuffer.get_data().concat([]);
		}
		if(oldIndexDataSize > 0) {
			indexData = this.__indexBuffer.get_data().concat([]);
		}
		this._vertexBuffer.dispose();
		this.__indexBuffer.dispose();
		var invNumSegments = 1.0 / numSegments;
		var stepX = (x - this._currentX) * invNumSegments;
		var stepY = (y - this._currentY) * invNumSegments;
		var stepZ = (z - this._currentZ) * invNumSegments;
		var vid = oldVertexDataSize;
		var iid = oldIndexDataSize;
		var _g1 = 0;
		var _g = numSegments;
		while(_g1 < _g) {
			var segmentId = _g1++;
			if(this._numLines >= 16000) {
				throw new js__$Boot_HaxeError("Maximal number of segments (" + this._numLines + ") for line geometry reached.");
			}
			var nextX = this._currentX + stepX;
			var nextY = this._currentY + stepY;
			var nextZ = this._currentZ + stepZ;
			var _g2 = 0;
			while(_g2 < 4) {
				var k = _g2++;
				var wStart = k < 2 ? 1.0 : 0.0;
				var wStop = k < 2 ? 0.0 : 1.0;
				var lineSpread = 0 < k && k < 3 ? 1.0 : -1.0;
				vertexData[vid++] = this._currentX;
				vertexData[vid++] = this._currentY;
				vertexData[vid++] = this._currentZ;
				vertexData[vid++] = nextX;
				vertexData[vid++] = nextY;
				vertexData[vid++] = nextZ;
				vertexData[vid++] = wStart;
				vertexData[vid++] = wStop;
				vertexData[vid++] = lineSpread;
			}
			var iOffset = this._numLines << 2;
			indexData[iid++] = iOffset;
			indexData[iid++] = iOffset + 2;
			indexData[iid++] = iOffset + 1;
			indexData[iid++] = iOffset;
			indexData[iid++] = iOffset + 3;
			indexData[iid++] = iOffset + 2;
			this._currentX = nextX;
			this._currentY = nextY;
			this._currentZ = nextZ;
			++this._numLines;
		}
		this._vertexBuffer.set_data(vertexData);
		this.__indexBuffer.set_data(indexData);
		return this;
	}
	,lineToVector3: function(xyz,numSegments) {
		if(numSegments == null) {
			numSegments = 1;
		}
		return this.lineTo(xyz.x,xyz.y,xyz.z,numSegments);
	}
	,upload: function() {
		this.__indexBuffer.upload();
		this._vertexBuffer.upload();
		this.addVertexBuffer(this._vertexBuffer);
		this.set_indices(this.__indexBuffer);
		this.computeCenterPosition();
	}
	,initialize: function(context) {
		if(context == null) {
			throw new js__$Boot_HaxeError("context");
		}
		this._vertexBuffer = minko_render_VertexBuffer.create(context);
		this.__indexBuffer = minko_render_IndexBuffer.create(context);
		this._vertexBuffer.addAttribute("startPosition",3,0);
		this._vertexBuffer.addAttribute("stopPosition",3,3);
		this._vertexBuffer.addAttribute("weights",3,6);
	}
	,__class__: minko_geometry_LineGeometry
});
var minko_geometry_QuadGeometry = $hx_exports["minko"]["geometry"]["QuadGeometry"] = function(numColumns,numRows,width,height) {
	if(height == null) {
		height = 1.0;
	}
	if(width == null) {
		width = 1.0;
	}
	if(numRows == null) {
		numRows = 1;
	}
	if(numColumns == null) {
		numColumns = 1;
	}
	minko_geometry_Geometry.call(this,"quad_" + numColumns + "x" + numRows);
	this._numColumns = numColumns;
	this._numRows = numRows;
	this._width = width;
	this._height = height;
};
minko_geometry_QuadGeometry.__name__ = true;
minko_geometry_QuadGeometry.create = function(context,numColumns,numRows,width,height) {
	if(height == null) {
		height = 1.0;
	}
	if(width == null) {
		width = 1.0;
	}
	if(numRows == null) {
		numRows = 1;
	}
	if(numColumns == null) {
		numColumns = 1;
	}
	var geom = new minko_geometry_QuadGeometry(numColumns,numRows,width,height);
	geom.initialize(context);
	return geom;
};
minko_geometry_QuadGeometry.__super__ = minko_geometry_Geometry;
minko_geometry_QuadGeometry.prototype = $extend(minko_geometry_Geometry.prototype,{
	initialize: function(context) {
		var vertexData = [];
		var indicesData = [];
		var y = 0;
		while(y <= this._numRows) {
			var x = 0;
			while(x <= this._numColumns) {
				vertexData.push((x / this._numColumns - 0.5) * this._width);
				vertexData.push((y / this._numRows - 0.5) * this._height);
				vertexData.push(0.0);
				vertexData.push(0.0);
				vertexData.push(0.0);
				vertexData.push(1.0);
				vertexData.push(x / this._numColumns);
				vertexData.push(1.0 - y / this._numRows);
				++x;
			}
			++y;
		}
		var _g1 = 0;
		var _g = this._numRows;
		while(_g1 < _g) {
			var y1 = _g1++;
			var _g3 = 0;
			var _g2 = this._numColumns;
			while(_g3 < _g2) {
				var x1 = _g3++;
				indicesData.push(x1 + (this._numColumns + 1) * y1);
				indicesData.push(x1 + 1 + y1 * (this._numColumns + 1));
				indicesData.push((y1 + 1) * (this._numColumns + 1) + x1);
				indicesData.push(x1 + 1 + y1 * (this._numColumns + 1));
				indicesData.push((y1 + 1) * (this._numColumns + 1) + x1 + 1);
				indicesData.push((y1 + 1) * (this._numColumns + 1) + x1);
			}
		}
		var vertexBuffer = minko_render_VertexBuffer.createbyData(context,vertexData);
		var indexBuffer = minko_render_IndexBuffer.createbyData(context,indicesData);
		vertexBuffer.addAttribute("position",3,0);
		vertexBuffer.addAttribute("normal",3,3);
		vertexBuffer.addAttribute("uv",2,6);
		this.addVertexBuffer(vertexBuffer);
		this.set_indices(indexBuffer);
		this.computeCenterPosition();
	}
	,__class__: minko_geometry_QuadGeometry
});
var minko_geometry_Skin = $hx_exports["minko"]["geometry"]["Skin"] = function(numBones,duration,numFrames) {
	if(numFrames == null) {
		numFrames = 0;
	}
	if(duration == null) {
		duration = 0;
	}
	if(numBones == null) {
		numBones = 0;
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = numBones;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(null);
	}
	this._bones = _g;
	this._numBones = numBones;
	this._duration = duration;
	this._timeFactor = duration > 0 ? numFrames / duration : 0.0;
	var _g11 = [];
	var _g3 = 0;
	var _g21 = numFrames;
	while(_g3 < _g21) {
		var i1 = _g3++;
		var _g4 = [];
		var _g6 = 0;
		var _g5 = numBones;
		while(_g6 < _g5) {
			var j = _g6++;
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			dest._00 = 1;
			dest._10 = 0;
			dest._20 = 0;
			dest._30 = 0;
			dest._01 = 0;
			dest._11 = 1;
			dest._21 = 0;
			dest._31 = 0;
			dest._02 = 0;
			dest._12 = 0;
			dest._22 = 1;
			dest._32 = 0;
			dest._03 = 0;
			dest._13 = 0;
			dest._23 = 0;
			dest._33 = 1;
			_g4.push(dest);
		}
		_g11.push(_g4);
	}
	this._boneMatricesPerFrame = _g11;
	this._maxNumVertexBones = 0;
	this._numVertexBones = [];
	this._vertexBones = [];
	this._vertexBoneWeights = [];
};
minko_geometry_Skin.__name__ = true;
minko_geometry_Skin.create = function(numBones,duration,numFrames) {
	return new minko_geometry_Skin(numBones,duration,numFrames);
};
minko_geometry_Skin.prototype = {
	clone: function() {
		var skin = new minko_geometry_Skin().copyFrom(this);
		return skin;
	}
	,get_numBones: function() {
		return this._numBones;
	}
	,get_maxNumVertexBones: function() {
		return this._maxNumVertexBones;
	}
	,get_bones: function() {
		return this._bones;
	}
	,set_bones: function(v) {
		this._bones = v;
		return v;
	}
	,getBone: function(boneId) {
		return this._bones[boneId];
	}
	,setBone: function(boneId,value) {
		this._bones[boneId] = value;
	}
	,get_duration: function() {
		return this._duration;
	}
	,getFrameId: function(time) {
		var frameId = time * this._timeFactor;
		return Math.floor(Math.min(frameId,this.get_numFrames() - 1));
	}
	,get_numFrames: function() {
		return this._boneMatricesPerFrame.length;
	}
	,set_boneMatricesPerFrame: function(v) {
		this._boneMatricesPerFrame = v;
		return v;
	}
	,get_boneMatricesPerFrame: function() {
		return this._boneMatricesPerFrame;
	}
	,getMatrices: function(frameId) {
		return this._boneMatricesPerFrame[frameId];
	}
	,setMatrix: function(frameId,boneId,value) {
		this._boneMatricesPerFrame[frameId][boneId] = value;
	}
	,get_numVertices: function() {
		return this._numVertexBones.length;
	}
	,numVertexBones: function(vertexId) {
		return this._numVertexBones[vertexId];
	}
	,vertexBoneData: function(vertexId,j,boneId,boneWeight) {
		var index = this.vertexArraysIndex(vertexId,j);
		boneId = this._vertexBones[index];
		boneWeight = this._vertexBoneWeights[index];
	}
	,vertexBoneId: function(vertexId,j) {
		return this._vertexBones[this.vertexArraysIndex(vertexId,j)];
	}
	,vertexBoneWeight: function(vertexId,j) {
		return this._vertexBoneWeights[this.vertexArraysIndex(vertexId,j)];
	}
	,reorganizeByVertices: function() {
		this._numVertexBones = null;
		this._vertexBones = null;
		this._vertexBoneWeights = null;
		var lastId = this.get_lastVertexId();
		var numVertices = lastId + 1;
		var numBones = this._bones.length;
		var _g = [];
		var _g2 = 0;
		var _g1 = numVertices;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0);
		}
		this._numVertexBones = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g21 = numVertices * numBones;
		while(_g3 < _g21) {
			var i1 = _g3++;
			_g11.push(0);
		}
		this._vertexBones = _g11;
		var _g22 = [];
		var _g4 = 0;
		var _g31 = numVertices * numBones;
		while(_g4 < _g31) {
			var i2 = _g4++;
			_g22.push(0.0);
		}
		this._vertexBoneWeights = _g22;
		var _g41 = 0;
		var _g32 = numBones;
		while(_g41 < _g32) {
			var boneId = _g41++;
			var bone = this._bones[boneId];
			var vertexIds = bone.get_vertexIds();
			var vertexWeights = bone.get_vertexWeights();
			var _g6 = 0;
			var _g5 = vertexIds.length;
			while(_g6 < _g5) {
				var i3 = _g6++;
				if(vertexWeights[i3] > 0.0) {
					var vId = vertexIds[i3];
					var j = this._numVertexBones[vId];
					++this._numVertexBones[vId];
					var index = this.vertexArraysIndex(vId,j);
					this._vertexBones[index] = boneId;
					this._vertexBoneWeights[index] = vertexWeights[i3];
				}
			}
		}
		this._maxNumVertexBones = 0;
		var _g42 = 0;
		var _g33 = numVertices;
		while(_g42 < _g33) {
			var vId1 = _g42++;
			this._maxNumVertexBones = Math.floor(Math.max(this._maxNumVertexBones,this._numVertexBones[vId1]));
		}
		return this;
	}
	,disposeBones: function() {
		this._bones = null;
		return this;
	}
	,copyFrom: function(skin) {
		this._bones = [];
		this._numBones = skin._numBones;
		this._duration = skin._duration;
		this._timeFactor = skin._timeFactor;
		this._boneMatricesPerFrame = skin._boneMatricesPerFrame.concat([]);
		this._maxNumVertexBones = skin._maxNumVertexBones;
		this._numVertexBones = skin._numVertexBones.concat([]);
		this._vertexBones = skin._vertexBones.concat([]);
		this._vertexBoneWeights = skin._vertexBoneWeights.concat([]);
		return this;
	}
	,get_lastVertexId: function() {
		var lastId = 0;
		var _g1 = 0;
		var _g = this._bones.length;
		while(_g1 < _g) {
			var boneId = _g1++;
			var vertexId = this._bones[boneId].get_vertexIds();
			var _g3 = 0;
			var _g2 = vertexId.length;
			while(_g3 < _g2) {
				var i = _g3++;
				lastId = Math.floor(Math.max(lastId,vertexId[i]));
			}
		}
		return lastId;
	}
	,vertexArraysIndex: function(vertexId,j) {
		return j + this._numBones * vertexId;
	}
	,__class__: minko_geometry_Skin
};
var minko_geometry_SphereGeometry = $hx_exports["minko"]["geometry"]["SphereGeometry"] = function() {
	minko_geometry_Geometry.call(this,"sphere");
};
minko_geometry_SphereGeometry.__name__ = true;
minko_geometry_SphereGeometry.create = function(context,numParallels,numMeridians,withNormals) {
	if(withNormals == null) {
		withNormals = true;
	}
	if(numMeridians == null) {
		numMeridians = 0;
	}
	if(numParallels == null) {
		numParallels = 10;
	}
	if(numMeridians != 0) {
		numMeridians = numMeridians;
	} else {
		numMeridians = numParallels;
	}
	var geom = new minko_geometry_SphereGeometry();
	geom.initializeVertices(context,numParallels,numMeridians,withNormals);
	geom.initializeIndices(context,numParallels,numMeridians);
	return geom;
};
minko_geometry_SphereGeometry.__super__ = minko_geometry_Geometry;
minko_geometry_SphereGeometry.prototype = $extend(minko_geometry_Geometry.prototype,{
	initializeVertices: function(context,numParallels,numMeridians,withNormals) {
		var numVertices = (numParallels - 2) * (numMeridians + 1) + 2;
		var c = 0;
		var k = 0;
		var data = [];
		var _g1 = 1;
		var _g = numParallels - 1;
		while(_g1 < _g) {
			var j = _g1++;
			var i = 0;
			while(i < numMeridians + 1) {
				var theta = j / (numParallels - 1.0) * Math.PI;
				var phi = i / numMeridians * 2.0 * Math.PI;
				var x = Math.sin(theta) * Math.cos(phi) * .5;
				var y = Math.cos(theta) * .5;
				var z = -Math.sin(theta) * Math.sin(phi) * .5;
				data.push(x);
				data.push(y);
				data.push(z);
				data.push(1.0 - i / numMeridians);
				data.push(j / (numParallels - 1.0));
				if(withNormals) {
					data.push(x * 2.0);
					data.push(y * 2.0);
					data.push(z * 2.0);
				}
				++i;
				c += 3;
				k += 2;
			}
		}
		data.push(0.0);
		data.push(.5);
		data.push(0.0);
		data.push(.5);
		data.push(0.0);
		if(withNormals) {
			data.push(0.0);
			data.push(1.0);
			data.push(0.0);
		}
		data.push(0.0);
		data.push(-.5);
		data.push(0.0);
		data.push(.5);
		data.push(1.0);
		if(withNormals) {
			data.push(0.0);
			data.push(-1.0);
			data.push(0.0);
		}
		var stream = minko_render_VertexBuffer.createbyData(context,data);
		stream.addAttribute("position",3,0);
		stream.addAttribute("uv",2,3);
		if(withNormals) {
			stream.addAttribute("normal",3,5);
		}
		this.addVertexBuffer(stream);
		this.computeCenterPosition();
	}
	,initializeIndices: function(context,numParallels,numMeridians) {
		var data = [];
		var c = 0;
		++numMeridians;
		var _g1 = 0;
		var _g = numParallels - 3;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = numMeridians - 1;
			while(_g3 < _g2) {
				var i = _g3++;
				data[c++] = j * numMeridians + i;
				data[c++] = (j + 1) * numMeridians + i + 1;
				data[c++] = j * numMeridians + i + 1;
				data[c++] = j * numMeridians + i;
				data[c++] = (j + 1) * numMeridians + i;
				data[c++] = (j + 1) * numMeridians + i + 1;
			}
		}
		var _g11 = 0;
		var _g4 = numMeridians - 1;
		while(_g11 < _g4) {
			var i1 = _g11++;
			data[c++] = (numParallels - 2) * numMeridians;
			data[c++] = i1;
			data[c++] = i1 + 1;
			data[c++] = (numParallels - 2) * numMeridians + 1;
			data[c++] = (numParallels - 3) * numMeridians + i1 + 1;
			data[c++] = (numParallels - 3) * numMeridians + i1;
		}
		this.set_indices(minko_render_IndexBuffer.createbyData(context,data));
	}
	,__class__: minko_geometry_SphereGeometry
});
var minko_geometry_TeapotGeometry = $hx_exports["minko"]["geometry"]["TeapotGeometry"] = function() {
	minko_geometry_Geometry.call(this,"teapot");
};
minko_geometry_TeapotGeometry.__name__ = true;
minko_geometry_TeapotGeometry.create = function(context,divs) {
	if(divs == null) {
		divs = 10;
	}
	var tp = new minko_geometry_TeapotGeometry();
	tp.initialize(context,divs);
	return tp;
};
minko_geometry_TeapotGeometry.__super__ = minko_geometry_Geometry;
minko_geometry_TeapotGeometry.prototype = $extend(minko_geometry_Geometry.prototype,{
	initialize: function(context,divs) {
		var indicesData = [];
		var vertices = [[]];
		var _g = [];
		var _g1 = 0;
		while(_g1 < 16) {
			var i = _g1++;
			_g.push([]);
		}
		var patch = _g;
		var currentVertexId = 0;
		var _g11 = 0;
		var _g2 = minko_geometry_TeapotGeometry._patches;
		while(_g11 < _g2.length) {
			var bezierPatch = _g2[_g11];
			++_g11;
			var _g3 = 0;
			while(_g3 < 16) {
				var i1 = _g3++;
				patch[i1][0] = minko_geometry_TeapotGeometry._points[bezierPatch[i1] - 1][0];
				patch[i1][1] = minko_geometry_TeapotGeometry._points[bezierPatch[i1] - 1][1];
				patch[i1][2] = minko_geometry_TeapotGeometry._points[bezierPatch[i1] - 1][2];
			}
			this.genPatchVertices(patch,divs,vertices[0]);
			this.genPatchIndices(currentVertexId,divs,indicesData);
			currentVertexId += (divs + 1) * (divs + 1);
		}
		this.removeDuplicateVertices(indicesData,vertices,Math.floor(vertices[0].length / 3));
		var vb = minko_render_VertexBuffer.createbyData(context,vertices[0]);
		vb.addAttribute("position",3);
		this.addVertexBuffer(vb);
		this.set_indices(minko_render_IndexBuffer.createbyData(context,indicesData));
		this.computeCenterPosition();
	}
	,genPatchVertices: function(patch,divs,vertices) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 3) {
			var i = _g1++;
			_g.push(0.0);
		}
		var zero3 = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g2 = divs + 1;
		while(_g3 < _g2) {
			var i1 = _g3++;
			_g11.push(zero3.slice());
		}
		var last = _g11;
		var _g21 = [];
		var _g31 = 0;
		while(_g31 < 4) {
			var i2 = _g31++;
			_g21.push(zero3.slice());
		}
		var tmp = _g21;
		var _g4 = 0;
		var _g32 = divs + 1;
		while(_g4 < _g32) {
			var u = _g4++;
			var py = u / divs;
			this.bernstein(py,patch[0],patch[1],patch[2],patch[3],tmp[0]);
			this.bernstein(py,patch[4],patch[5],patch[6],patch[7],tmp[1]);
			this.bernstein(py,patch[8],patch[9],patch[10],patch[11],tmp[2]);
			this.bernstein(py,patch[12],patch[13],patch[14],patch[15],tmp[3]);
			var _g6 = 0;
			var _g5 = divs + 1;
			while(_g6 < _g5) {
				var v = _g6++;
				var px = v / divs;
				this.bernstein(px,tmp[0],tmp[1],tmp[2],tmp[3],last[v]);
				vertices.push(last[v][0]);
				vertices.push(last[v][2]);
				vertices.push(last[v][1]);
			}
		}
	}
	,genPatchIndices: function(offset,divs,indices) {
		var _g1 = 0;
		var _g = divs;
		while(_g1 < _g) {
			var u = _g1++;
			var _g3 = 0;
			var _g2 = divs;
			while(_g3 < _g2) {
				var v = _g3++;
				indices.push(offset + u * (divs + 1) + v);
				indices.push(offset + u * (divs + 1) + v + 1);
				indices.push(offset + (u + 1) * (divs + 1) + v);
				indices.push(offset + u * (divs + 1) + v + 1);
				indices.push(offset + (u + 1) * (divs + 1) + v + 1);
				indices.push(offset + (u + 1) * (divs + 1) + v);
			}
		}
	}
	,bernstein: function(u,p0,p1,p2,p3,_out) {
		var um = 1.0 - u;
		var um2 = um * um;
		var u2 = u * u;
		var c0 = u * u2;
		var c1 = 3.0 * u2 * um;
		var c2 = 3.0 * u * um2;
		var c3 = um * um2;
		_out[0] = c0 * p0[0] + c1 * p1[0] + c2 * p2[0] + c3 * p3[0];
		_out[1] = c0 * p0[1] + c1 * p1[1] + c2 * p2[1] + c3 * p3[1];
		_out[2] = c0 * p0[2] + c1 * p1[2] + c2 * p2[2] + c3 * p3[2];
	}
	,__class__: minko_geometry_TeapotGeometry
});
var minko_input_Joystick = $hx_exports["minko"]["input"]["Joystick"] = function(canvas,joystickId) {
	this._canvas = canvas;
	this._joystickAxisMotion = new minko_signal_Signal4();
	this._joystickHatMotion = new minko_signal_Signal4();
	this._joystickButtonUp = new minko_signal_Signal3();
	this._joystickButtonDown = new minko_signal_Signal3();
	this._joystickId = joystickId;
};
minko_input_Joystick.__name__ = true;
minko_input_Joystick.prototype = {
	get_joystickId: function() {
		return this._joystickId;
	}
	,get_joystickAxisMotion: function() {
		return this._joystickAxisMotion;
	}
	,get_joystickHatMotion: function() {
		return this._joystickHatMotion;
	}
	,get_joystickButtonDown: function() {
		return this._joystickButtonDown;
	}
	,get_joystickButtonUp: function() {
		return this._joystickButtonUp;
	}
	,__class__: minko_input_Joystick
};
var minko_input_KeyMap = $hx_exports["minko"]["input"]["KeyMap"] = function() { };
minko_input_KeyMap.__name__ = true;
minko_input_KeyMap.initializeKeyToKeyCodeMap = function() {
	var keyToKeyCodeMap = new haxe_ds_IntMap();
	keyToKeyCodeMap.h[3] = 24;
	keyToKeyCodeMap.h[8] = 8;
	keyToKeyCodeMap.h[9] = 9;
	keyToKeyCodeMap.h[12] = 12;
	keyToKeyCodeMap.h[13] = 13;
	keyToKeyCodeMap.h[27] = 27;
	keyToKeyCodeMap.h[28] = 28;
	keyToKeyCodeMap.h[29] = 29;
	keyToKeyCodeMap.h[30] = 30;
	keyToKeyCodeMap.h[31] = 31;
	keyToKeyCodeMap.h[32] = 32;
	keyToKeyCodeMap.h[46] = 127;
	keyToKeyCodeMap.h[48] = 48;
	keyToKeyCodeMap.h[49] = 49;
	keyToKeyCodeMap.h[50] = 50;
	keyToKeyCodeMap.h[51] = 51;
	keyToKeyCodeMap.h[52] = 52;
	keyToKeyCodeMap.h[53] = 53;
	keyToKeyCodeMap.h[54] = 54;
	keyToKeyCodeMap.h[55] = 55;
	keyToKeyCodeMap.h[56] = 56;
	keyToKeyCodeMap.h[57] = 57;
	keyToKeyCodeMap.h[58] = 58;
	keyToKeyCodeMap.h[59] = 59;
	keyToKeyCodeMap.h[60] = 60;
	keyToKeyCodeMap.h[61] = 61;
	keyToKeyCodeMap.h[62] = 62;
	keyToKeyCodeMap.h[63] = 63;
	keyToKeyCodeMap.h[64] = 64;
	keyToKeyCodeMap.h[65] = 97;
	keyToKeyCodeMap.h[66] = 98;
	keyToKeyCodeMap.h[67] = 99;
	keyToKeyCodeMap.h[68] = 100;
	keyToKeyCodeMap.h[69] = 101;
	keyToKeyCodeMap.h[70] = 102;
	keyToKeyCodeMap.h[71] = 103;
	keyToKeyCodeMap.h[72] = 104;
	keyToKeyCodeMap.h[73] = 105;
	keyToKeyCodeMap.h[74] = 106;
	keyToKeyCodeMap.h[75] = 107;
	keyToKeyCodeMap.h[76] = 108;
	keyToKeyCodeMap.h[77] = 109;
	keyToKeyCodeMap.h[78] = 110;
	keyToKeyCodeMap.h[79] = 111;
	keyToKeyCodeMap.h[80] = 112;
	keyToKeyCodeMap.h[81] = 113;
	keyToKeyCodeMap.h[82] = 114;
	keyToKeyCodeMap.h[83] = 115;
	keyToKeyCodeMap.h[84] = 116;
	keyToKeyCodeMap.h[85] = 117;
	keyToKeyCodeMap.h[86] = 118;
	keyToKeyCodeMap.h[87] = 119;
	keyToKeyCodeMap.h[88] = 120;
	keyToKeyCodeMap.h[89] = 121;
	keyToKeyCodeMap.h[90] = 122;
	keyToKeyCodeMap.h[160] = 94;
	keyToKeyCodeMap.h[161] = 33;
	keyToKeyCodeMap.h[162] = 34;
	keyToKeyCodeMap.h[163] = 35;
	keyToKeyCodeMap.h[164] = 36;
	keyToKeyCodeMap.h[165] = 37;
	keyToKeyCodeMap.h[166] = 38;
	keyToKeyCodeMap.h[167] = 95;
	keyToKeyCodeMap.h[168] = 40;
	keyToKeyCodeMap.h[169] = 41;
	keyToKeyCodeMap.h[170] = 42;
	keyToKeyCodeMap.h[171] = 43;
	keyToKeyCodeMap.h[172] = 124;
	keyToKeyCodeMap.h[173] = 45;
	keyToKeyCodeMap.h[174] = 123;
	keyToKeyCodeMap.h[175] = 125;
	keyToKeyCodeMap.h[176] = 126;
	keyToKeyCodeMap.h[188] = 44;
	keyToKeyCodeMap.h[190] = 46;
	keyToKeyCodeMap.h[191] = 47;
	keyToKeyCodeMap.h[192] = 96;
	keyToKeyCodeMap.h[219] = 91;
	keyToKeyCodeMap.h[220] = 92;
	keyToKeyCodeMap.h[221] = 93;
	keyToKeyCodeMap.h[222] = 39;
	return keyToKeyCodeMap;
};
minko_input_KeyMap.initializeKeyToScanCodeMap = function() {
	var keyToScanCodeMap = new haxe_ds_IntMap();
	keyToScanCodeMap.h[6] = 117;
	keyToScanCodeMap.h[145] = 71;
	keyToScanCodeMap.h[21] = 144;
	keyToScanCodeMap.h[22] = 144;
	keyToScanCodeMap.h[23] = 144;
	keyToScanCodeMap.h[24] = 144;
	keyToScanCodeMap.h[25] = 144;
	keyToScanCodeMap.h[16] = 225;
	keyToScanCodeMap.h[17] = 224;
	keyToScanCodeMap.h[18] = 226;
	keyToScanCodeMap.h[19] = 72;
	keyToScanCodeMap.h[20] = 57;
	keyToScanCodeMap.h[33] = 75;
	keyToScanCodeMap.h[34] = 78;
	keyToScanCodeMap.h[35] = 77;
	keyToScanCodeMap.h[36] = 74;
	keyToScanCodeMap.h[37] = 80;
	keyToScanCodeMap.h[38] = 82;
	keyToScanCodeMap.h[39] = 79;
	keyToScanCodeMap.h[40] = 81;
	keyToScanCodeMap.h[41] = 119;
	keyToScanCodeMap.h[43] = 116;
	keyToScanCodeMap.h[44] = 70;
	keyToScanCodeMap.h[45] = 73;
	keyToScanCodeMap.h[224] = 231;
	keyToScanCodeMap.h[225] = 230;
	keyToScanCodeMap.h[91] = 227;
	keyToScanCodeMap.h[93] = 101;
	keyToScanCodeMap.h[95] = 282;
	keyToScanCodeMap.h[96] = 98;
	keyToScanCodeMap.h[97] = 89;
	keyToScanCodeMap.h[98] = 90;
	keyToScanCodeMap.h[99] = 91;
	keyToScanCodeMap.h[100] = 92;
	keyToScanCodeMap.h[101] = 93;
	keyToScanCodeMap.h[102] = 94;
	keyToScanCodeMap.h[103] = 95;
	keyToScanCodeMap.h[104] = 96;
	keyToScanCodeMap.h[105] = 97;
	keyToScanCodeMap.h[106] = 85;
	keyToScanCodeMap.h[107] = 87;
	keyToScanCodeMap.h[108] = 159;
	keyToScanCodeMap.h[109] = 86;
	keyToScanCodeMap.h[110] = 220;
	keyToScanCodeMap.h[111] = 84;
	keyToScanCodeMap.h[112] = 58;
	keyToScanCodeMap.h[113] = 59;
	keyToScanCodeMap.h[114] = 60;
	keyToScanCodeMap.h[115] = 61;
	keyToScanCodeMap.h[116] = 62;
	keyToScanCodeMap.h[117] = 63;
	keyToScanCodeMap.h[118] = 64;
	keyToScanCodeMap.h[119] = 65;
	keyToScanCodeMap.h[120] = 66;
	keyToScanCodeMap.h[121] = 67;
	keyToScanCodeMap.h[122] = 68;
	keyToScanCodeMap.h[123] = 69;
	keyToScanCodeMap.h[124] = 104;
	keyToScanCodeMap.h[125] = 105;
	keyToScanCodeMap.h[126] = 106;
	keyToScanCodeMap.h[127] = 107;
	keyToScanCodeMap.h[128] = 108;
	keyToScanCodeMap.h[129] = 109;
	keyToScanCodeMap.h[130] = 110;
	keyToScanCodeMap.h[131] = 111;
	keyToScanCodeMap.h[132] = 112;
	keyToScanCodeMap.h[133] = 113;
	keyToScanCodeMap.h[134] = 114;
	keyToScanCodeMap.h[135] = 115;
	keyToScanCodeMap.h[144] = 83;
	keyToScanCodeMap.h[181] = 127;
	keyToScanCodeMap.h[182] = 129;
	keyToScanCodeMap.h[183] = 128;
	keyToScanCodeMap.h[300] = 228;
	keyToScanCodeMap.h[301] = 229;
	return keyToScanCodeMap;
};
var minko_input_Keyboard = $hx_exports["minko"]["input"]["Keyboard"] = function() {
	this._down = new minko_signal_Signal();
	this._up = new minko_signal_Signal();
	this._textInput = new minko_signal_Signal2();
	this._keyDown = new haxe_ds_IntMap();
	this._keyUp = new haxe_ds_IntMap();
};
minko_input_Keyboard.__name__ = true;
minko_input_Keyboard.create = function() {
	return new minko_input_Keyboard();
};
minko_input_Keyboard.getKeyName = function(key) {
	return minko_input_Keyboard._keyToName[key];
};
minko_input_Keyboard.initializeKeyNames = function() {
	var names = [];
	names[3] = "CANCEL";
	names[6] = "HELP";
	names[8] = "BACK_SPACE";
	names[9] = "TAB";
	names[12] = "CLEAR";
	names[13] = "RETURN";
	names[14] = "ENTER";
	names[16] = "SHIFT";
	names[17] = "CONTROL";
	names[18] = "ALT";
	names[19] = "PAUSE";
	names[20] = "CAPS_LOCK";
	names[21] = "KANA";
	names[22] = "EISU";
	names[23] = "JUNJA";
	names[24] = "FINAL";
	names[25] = "KANJI";
	names[27] = "ESCAPE";
	names[28] = "CONVERT";
	names[29] = "NONCONVERT";
	names[30] = "ACCEPT";
	names[31] = "MODECHANGE";
	names[32] = "SPACE";
	names[33] = "PAGE_UP";
	names[34] = "PAGE_DOWN";
	names[35] = "END";
	names[36] = "HOME";
	names[37] = "LEFT";
	names[38] = "UP";
	names[39] = "RIGHT";
	names[40] = "DOWN";
	names[41] = "SELECT";
	names[42] = "PRINT";
	names[43] = "EXECUTE";
	names[44] = "PRINTSCREEN";
	names[45] = "INSERT";
	names[46] = "DELETE";
	names[48] = "_0";
	names[49] = "_1";
	names[50] = "_2";
	names[51] = "_3";
	names[52] = "_4";
	names[53] = "_5";
	names[54] = "_6";
	names[55] = "_7";
	names[56] = "_8";
	names[57] = "_9";
	names[58] = "COLON";
	names[59] = "SEMICOLON";
	names[60] = "LESS_THAN";
	names[61] = "EQUALS";
	names[62] = "GREATER_THAN";
	names[63] = "QUESTION_MARK";
	names[64] = "AT";
	names[65] = "A";
	names[66] = "B";
	names[67] = "C";
	names[68] = "D";
	names[69] = "E";
	names[70] = "F";
	names[71] = "G";
	names[72] = "H";
	names[73] = "I";
	names[74] = "J";
	names[75] = "K";
	names[76] = "L";
	names[77] = "M";
	names[78] = "N";
	names[79] = "O";
	names[80] = "P";
	names[81] = "Q";
	names[82] = "R";
	names[83] = "S";
	names[84] = "T";
	names[85] = "U";
	names[86] = "V";
	names[87] = "W";
	names[88] = "X";
	names[89] = "Y";
	names[90] = "Z";
	names[91] = "WIN";
	names[93] = "CONTEXT_MENU";
	names[95] = "SLEEP";
	names[96] = "NUMPAD0";
	names[97] = "NUMPAD1";
	names[98] = "NUMPAD2";
	names[99] = "NUMPAD3";
	names[100] = "NUMPAD4";
	names[101] = "NUMPAD5";
	names[102] = "NUMPAD6";
	names[103] = "NUMPAD7";
	names[104] = "NUMPAD8";
	names[105] = "NUMPAD9";
	names[106] = "MULTIPLY";
	names[107] = "ADD";
	names[108] = "SEPARATOR";
	names[109] = "SUBTRACT";
	names[110] = "DECIMAL";
	names[111] = "DIVIDE";
	names[112] = "F1";
	names[113] = "F2";
	names[114] = "F3";
	names[115] = "F4";
	names[116] = "F5";
	names[117] = "F6";
	names[118] = "F7";
	names[119] = "F8";
	names[120] = "F9";
	names[121] = "F10";
	names[122] = "F11";
	names[123] = "F12";
	names[124] = "F13";
	names[125] = "F14";
	names[126] = "F15";
	names[127] = "F16";
	names[128] = "F17";
	names[129] = "F18";
	names[130] = "F19";
	names[131] = "F20";
	names[132] = "F21";
	names[133] = "F22";
	names[134] = "F23";
	names[135] = "F24";
	names[144] = "NUM_LOCK";
	names[145] = "SCROLL_LOCK";
	names[146] = "WIN_OEM_FJ_JISHO";
	names[147] = "WIN_OEM_FJ_MASSHOU";
	names[148] = "WIN_OEM_FJ_TOUROKU";
	names[149] = "WIN_OEM_FJ_LOYA";
	names[150] = "WIN_OEM_FJ_ROYA";
	names[160] = "CIRCUMFLEX";
	names[161] = "EXCLAMATION";
	names[162] = "DOUBLE_QUOTE";
	names[163] = "HASH";
	names[164] = "DOLLAR";
	names[165] = "PERCENT";
	names[166] = "AMPERSAND";
	names[167] = "UNDERSCORE";
	names[168] = "OPEN_PAREN";
	names[169] = "CLOSE_PAREN";
	names[170] = "ASTERISK";
	names[171] = "PLUS";
	names[172] = "PIPE";
	names[173] = "HYPHEN_MINUS";
	names[174] = "OPEN_CURLY_BRACKET";
	names[175] = "CLOSE_CURLY_BRACKET";
	names[176] = "TILDE";
	names[181] = "VOLUME_MUTE";
	names[182] = "VOLUME_DOWN";
	names[183] = "VOLUME_UP";
	names[188] = "COMMA";
	names[190] = "PERIOD";
	names[191] = "SLASH";
	names[192] = "BACK_QUOTE";
	names[219] = "OPEN_BRACKET";
	names[220] = "BACK_SLASH";
	names[221] = "CLOSE_BRACKET";
	names[222] = "QUOTE";
	names[224] = "META";
	names[225] = "ALTGR";
	names[227] = "WIN_ICO_HELP";
	names[228] = "WIN_ICO_00";
	names[230] = "WIN_ICO_CLEAR";
	names[233] = "WIN_OEM_RESET";
	names[234] = "WIN_OEM_JUMP";
	names[235] = "WIN_OEM_PA1";
	names[236] = "WIN_OEM_PA2";
	names[237] = "WIN_OEM_PA3";
	names[238] = "WIN_OEM_WSCTRL";
	names[239] = "WIN_OEM_CUSEL";
	names[240] = "WIN_OEM_ATTN";
	names[241] = "WIN_OEM_FINISH";
	names[242] = "WIN_OEM_COPY";
	names[243] = "WIN_OEM_AUTO";
	names[244] = "WIN_OEM_ENLW";
	names[245] = "WIN_OEM_BACKTAB";
	names[246] = "ATTN";
	names[247] = "CRSEL";
	names[248] = "EXSEL";
	names[249] = "EREOF";
	names[250] = "PLAY";
	names[251] = "ZOOM";
	names[253] = "PA1";
	names[254] = "WIN_OEM_CLEAR";
	names[300] = "CONTROL_RIGHT";
	names[301] = "SHIFT_RIGHT";
	return names;
};
minko_input_Keyboard.prototype = {
	get_keyDown: function() {
		return this._down;
	}
	,get_textInput: function() {
		return this._textInput;
	}
	,getKeyDown: function(key) {
		var index = key;
		if(!this._keyDown.h.hasOwnProperty(index)) {
			var _this = this._keyDown;
			var value = new minko_signal_Signal2();
			_this.h[index] = value;
		}
		return this._keyDown.h[index];
	}
	,get_keyUp: function() {
		return this._up;
	}
	,getKeyUp: function(key) {
		var index = key;
		if(!this._keyUp.h.hasOwnProperty(index)) {
			var _this = this._keyUp;
			var value = new minko_signal_Signal2();
			_this.h[index] = value;
		}
		return this._keyUp.h[index];
	}
	,keyIsDown: function(key) {
		return false;
	}
	,hasKeyDownSignal: function(key) {
		return this._keyDown.h.hasOwnProperty(key);
	}
	,hasKeyUpSignal: function(key) {
		return this._keyUp.h.hasOwnProperty(key);
	}
	,setKeyboardState: function(key,state) {
	}
	,__class__: minko_input_Keyboard
};
var minko_input_Mouse = $hx_exports["minko"]["input"]["Mouse"] = function(canvas) {
	var _gthis = this;
	this._canvas = canvas;
	this._x = 0;
	this._y = 0;
	this._dX = 0;
	this._dY = 0;
	this._leftButtonIsDown = false;
	this._rightButtonIsDown = false;
	this._middleButtonIsDown = false;
	this._mouseMove = new minko_signal_Signal3();
	this._mouseWheel = new minko_signal_Signal3();
	this._mouseLeftButtonDown = new minko_signal_Signal();
	this._mouseLeftButtonUp = new minko_signal_Signal();
	this._mouseLeftClick = new minko_signal_Signal();
	this._mouseRightButtonDown = new minko_signal_Signal();
	this._mouseRightButtonUp = new minko_signal_Signal();
	this._mouseRightClick = new minko_signal_Signal();
	this._mouseMiddleButtonDown = new minko_signal_Signal();
	this._mouseMiddleButtonUp = new minko_signal_Signal();
	this._mouseMiddleClick = new minko_signal_Signal();
	this._slots = [];
	this._slots.push(this._mouseLeftButtonDown.connect(function(mouse) {
		_gthis._leftButtonIsDown = true;
		_gthis._lastMouseLeftDownX = _gthis.get_x();
		_gthis._lastMouseLeftDownY = _gthis.get_y();
	}));
	this._slots.push(this._mouseLeftButtonUp.connect(function(mouse1) {
		_gthis._leftButtonIsDown = false;
		var dX = Math.abs(_gthis.get_x() - _gthis._lastMouseLeftDownX);
		var dY = Math.abs(_gthis.get_y() - _gthis._lastMouseLeftDownY);
		if(dX < 5 && dY < 5) {
			_gthis.get_leftButtonClick().execute(mouse1);
		}
	}));
	this._slots.push(this._mouseRightButtonDown.connect(function(mouse2) {
		_gthis._rightButtonIsDown = true;
		_gthis._lastMouseRightDownX = _gthis.get_x();
		_gthis._lastMouseRightDownY = _gthis.get_y();
	}));
	this._slots.push(this._mouseRightButtonUp.connect(function(mouse3) {
		_gthis._rightButtonIsDown = false;
		var dX1 = Math.abs(_gthis.get_x() - _gthis._lastMouseRightDownX);
		var dY1 = Math.abs(_gthis.get_y() - _gthis._lastMouseRightDownY);
		if(dX1 < 5 && dY1 < 5) {
			_gthis.get_rightButtonClick().execute(mouse3);
		}
	}));
	this._slots.push(this._mouseMiddleButtonDown.connect(function(mouse4) {
		_gthis._middleButtonIsDown = true;
		_gthis._lastMouseMiddleDownX = _gthis.get_x();
		_gthis._lastMouseMiddleDownY = _gthis.get_y();
	}));
	this._slots.push(this._mouseMiddleButtonUp.connect(function(mouse5) {
		_gthis._middleButtonIsDown = false;
		var dX2 = Math.abs(_gthis.get_x() - _gthis._lastMouseMiddleDownX);
		var dY2 = Math.abs(_gthis.get_y() - _gthis._lastMouseMiddleDownY);
		if(dX2 < 5 && dY2 < 5) {
			_gthis.get_middleButtonClick().execute(mouse5);
		}
	}));
};
minko_input_Mouse.__name__ = true;
minko_input_Mouse.create = function(canvas) {
	return new minko_input_Mouse(canvas);
};
minko_input_Mouse.prototype = {
	get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,set_x: function(v) {
		this._x = v;
		return v;
	}
	,set_y: function(v) {
		this._y = v;
		return v;
	}
	,get_dX: function() {
		return this._dX;
	}
	,get_dY: function() {
		return this._dY;
	}
	,set_dX: function(v) {
		this._dX = v;
		return v;
	}
	,set_dY: function(v) {
		this._dY = v;
		return v;
	}
	,get_leftButtonIsDown: function() {
		return this._leftButtonIsDown;
	}
	,get_rightButtonIsDown: function() {
		return this._rightButtonIsDown;
	}
	,get_middleButtonIsDown: function() {
		return this._middleButtonIsDown;
	}
	,get_normalizedX: function() {
		return 2.0 * (this._x / this._canvas.get_width() - 0.5);
	}
	,get_normalizedY: function() {
		return 2.0 * (this._y / this._canvas.get_height() - .5);
	}
	,get_move: function() {
		return this._mouseMove;
	}
	,get_wheel: function() {
		return this._mouseWheel;
	}
	,get_leftButtonDown: function() {
		return this._mouseLeftButtonDown;
	}
	,get_leftButtonUp: function() {
		return this._mouseLeftButtonUp;
	}
	,get_leftButtonClick: function() {
		return this._mouseLeftClick;
	}
	,get_rightButtonDown: function() {
		return this._mouseRightButtonDown;
	}
	,get_rightButtonUp: function() {
		return this._mouseRightButtonUp;
	}
	,get_rightButtonClick: function() {
		return this._mouseRightClick;
	}
	,get_middleButtonDown: function() {
		return this._mouseMiddleButtonDown;
	}
	,get_middleButtonUp: function() {
		return this._mouseMiddleButtonUp;
	}
	,get_middleButtonClick: function() {
		return this._mouseMiddleClick;
	}
	,__class__: minko_input_Mouse
};
var minko_input_TouchPoint = $hx_exports["minko"]["input"]["TouchPoint"] = function(x,y,dX,dY) {
	this.x = x;
	this.y = y;
	this.dX = dX;
	this.dY = dY;
};
minko_input_TouchPoint.__name__ = true;
minko_input_TouchPoint.prototype = {
	__class__: minko_input_TouchPoint
};
var minko_input_Touch = $hx_exports["minko"]["input"]["Touch"] = function(canvas) {
	this._canvas = canvas;
	this._touches = new haxe_ds_IntMap();
	this._touchMove = new minko_signal_Signal4();
	this._touchDown = new minko_signal_Signal4();
	this._touchUp = new minko_signal_Signal4();
	this._pinchZoom = new minko_signal_Signal2();
	this._swipeLeft = new minko_signal_Signal();
	this._swipeRight = new minko_signal_Signal();
	this._swipeUp = new minko_signal_Signal();
	this._swipeDown = new minko_signal_Signal();
	this._tap = new minko_signal_Signal3();
	this._doubleTap = new minko_signal_Signal3();
	this._longHold = new minko_signal_Signal3();
};
minko_input_Touch.__name__ = true;
minko_input_Touch.create = function(canvas) {
	return new minko_input_Touch(canvas);
};
minko_input_Touch.prototype = {
	get_touches: function() {
		return this._touches;
	}
	,get_identifiers: function() {
		return this._identifiers;
	}
	,get_numTouches: function() {
		return this._identifiers.length;
	}
	,touch: function(identifier) {
		return this._touches.h[identifier];
	}
	,get_touchMove: function() {
		return this._touchMove;
	}
	,get_touchDown: function() {
		return this._touchDown;
	}
	,get_touchUp: function() {
		return this._touchUp;
	}
	,get_swipeLeft: function() {
		return this._swipeLeft;
	}
	,get_swipeRight: function() {
		return this._swipeRight;
	}
	,get_swipeUp: function() {
		return this._swipeUp;
	}
	,get_swipeDown: function() {
		return this._swipeDown;
	}
	,get_pinchZoom: function() {
		return this._pinchZoom;
	}
	,get_tap: function() {
		return this._tap;
	}
	,get_doubleTap: function() {
		return this._doubleTap;
	}
	,get_longHold: function() {
		return this._longHold;
	}
	,get_averageX: function() {
		var x = 0.0;
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			x += this._touches.h[this._identifiers[i]].x;
		}
		x /= l;
		return x;
	}
	,get_averageY: function() {
		var y = 0.0;
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			y += this._touches.h[this._identifiers[i]].y;
		}
		y /= l;
		return y;
	}
	,get_averageDX: function() {
		var x = 0.0;
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			x += this._touches.h[this._identifiers[i]].dX;
		}
		x /= l;
		return x;
	}
	,get_averageDY: function() {
		var y = 0.0;
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			y += this._touches.h[this._identifiers[i]].dY;
		}
		y /= l;
		return y;
	}
	,resetDeltas: function() {
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			this._touches.h[this._identifiers[i]].dX = 0;
			this._touches.h[this._identifiers[i]].dY = 0;
		}
	}
	,addTouch: function(identifier,x,y,dX,dY) {
	}
	,updateTouch: function(identifier,x,y,dX,dY) {
	}
	,removeTouch: function(identifier) {
	}
	,__class__: minko_input_Touch
};
var minko_material_Material = $hx_exports["minko"]["material"]["Material"] = function(name) {
	minko_Has_$uuid.call(this);
	this._provider = minko_data_Provider.create();
	this._provider.set("name",name);
	this._provider.set("uuid",this._provider.get_uuid());
};
minko_material_Material.__name__ = true;
minko_material_Material.create = function(name) {
	if(name == null) {
		name = "material";
	}
	var instance = new minko_material_Material(name);
	instance.initialize();
	return instance;
};
minko_material_Material.createbyMaterial = function(source) {
	var mat = minko_material_Material.create();
	mat._provider.copyFrom(source._provider);
	return mat;
};
minko_material_Material.__super__ = minko_Has_$uuid;
minko_material_Material.prototype = $extend(minko_Has_$uuid.prototype,{
	dispose: function() {
		this._provider = null;
	}
	,get_uuid: function() {
		return this._provider.get_uuid();
	}
	,get_name: function() {
		return this._provider.get("name");
	}
	,get_data: function() {
		return this._provider;
	}
	,hasProperty: function(propertyName) {
		return this._provider.hasProperty(propertyName);
	}
	,get: function(propertyName) {
		return this._provider.get(propertyName);
	}
	,unset: function(propertyName) {
		this._provider.unset(propertyName);
	}
	,setbyKeyObject: function(values) {
		var fields = Reflect.fields(values);
		var _g = 0;
		while(_g < fields.length) {
			var key = fields[_g];
			++_g;
			this._provider.set(key,Reflect.field(values,key));
		}
		return this;
	}
	,set: function(key,values) {
		this._provider.set(key,values);
		return this;
	}
	,copyFrom: function(values) {
		this._provider = minko_data_Provider.createbyProvider(values);
		this._provider.set("uuid",this._provider.get_uuid());
	}
	,initialize: function() {
	}
	,__class__: minko_material_Material
});
var minko_material_BasicMaterial = $hx_exports["minko"]["material"]["BasicMaterial"] = function(name) {
	minko_material_Material.call(this,name);
};
minko_material_BasicMaterial.__name__ = true;
minko_material_BasicMaterial.create = function(name) {
	if(name == null) {
		name = "BasicMaterial";
	}
	return new minko_material_BasicMaterial(name);
};
minko_material_BasicMaterial.createbyBasicMaterial = function(source) {
	var pm = minko_material_BasicMaterial.create(source.get_name());
	pm.get_data().copyFrom(source.get_data());
	return pm;
};
minko_material_BasicMaterial.__super__ = minko_material_Material;
minko_material_BasicMaterial.prototype = $extend(minko_material_Material.prototype,{
	set_diffuseColor: function(value) {
		this.get_data().set("diffuseColor",value);
		return value;
	}
	,diffuseColorRGBA: function(diffuseRGBA) {
		var this1 = new glm_Vec4Base();
		this1.x = (diffuseRGBA >> 24 & 255) / 255;
		this1.y = (diffuseRGBA >> 16 & 255) / 255;
		this1.z = (diffuseRGBA >> 8 & 255) / 255;
		this1.w = (diffuseRGBA & 255) / 255;
		return this.set_diffuseColor(this1);
	}
	,get_diffuseColor: function() {
		return this.get_data().get("diffuseColor");
	}
	,set_uvScale: function(value) {
		this.get_data().set("uvScale",value);
		return value;
	}
	,get_uvScale: function() {
		return this.get_data().get("uvScale");
	}
	,set_uvOffset: function(value) {
		this.get_data().set("uvOffset",value);
		return value;
	}
	,get_uvOffset: function() {
		return this.get_data().get("uvOffset");
	}
	,get_diffuseMap: function() {
		if(this.get_data().hasProperty("diffuseMap")) {
			return this.get_data().get("diffuseMap");
		} else {
			return null;
		}
	}
	,set_diffuseMap: function(texture) {
		if(texture != null) {
			this.get_data().set("diffuseMap",texture);
		} else {
			this.get_data().unset("diffuseMap");
		}
		return texture;
	}
	,set_fogColor: function(value) {
		this.get_data().set("fogColor",value);
		return value;
	}
	,fogColorRGBA: function(fogRGBA) {
		var this1 = new glm_Vec4Base();
		this1.x = (fogRGBA >> 24 & 255) / 255;
		this1.y = (fogRGBA >> 16 & 255) / 255;
		this1.z = (fogRGBA >> 8 & 255) / 255;
		this1.w = (fogRGBA & 255) / 255;
		return this.set_fogColor(this1);
	}
	,get_fogColor: function() {
		return this.get_data().get("fogColor");
	}
	,set_fogStart: function(value) {
		this.get_data().get("fogBounds").x = value;
		return value;
	}
	,get_fogStart: function() {
		return this.get_data().get("fogBounds").x;
	}
	,set_fogEnd: function(value) {
		this.get_data().get("fogBounds").y = value;
		return value;
	}
	,get_fogEnd: function() {
		return this.get_data().get("fogBounds").y;
	}
	,set_fogTechnique: function(value) {
		this.get_data().set("fogTechnique",value);
		return value;
	}
	,get_fogTechnique: function() {
		return this.get_data().get("fogTechnique");
	}
	,setBlendingMode: function(src,dst) {
		this.get_data().set("blendingMode",src | dst);
		this.get_data().set("blendingSource",src);
		this.get_data().set("blendingDestination",dst);
		return this;
	}
	,set_blendingMode: function(value) {
		var srcBlendingMode = value & 255;
		var dstBlendingMode = value & 65280;
		this.get_data().set("blendingMode",value);
		this.get_data().set("blendingSource",srcBlendingMode);
		this.get_data().set("blendingDestination",dstBlendingMode);
		return value;
	}
	,get_blendingSourceFactor: function() {
		if(this.get_data().hasProperty("bleblendingModendMode")) {
			return this.get_data().get("blendingMode") & 255;
		} else {
			return this._defaultStates.get_blendingSourceFactor();
		}
	}
	,get_blendingDestinationFactor: function() {
		if(this.get_data().hasProperty("blendingMode")) {
			return this.get_data().get("blendingMode") & 65280;
		} else {
			return this._defaultStates.get_blendingDestinationFactor();
		}
	}
	,set_colorMask: function(value) {
		this.get_data().set("colorMask",value);
		return value;
	}
	,get_colorMask: function() {
		if(this.get_data().hasProperty("colorMask")) {
			return this.get_data().get("colorMask");
		} else {
			return this._defaultStates.get_colorMask();
		}
	}
	,set_depthMask: function(value) {
		this.get_data().set("depthMask",value);
		return value;
	}
	,get_depthMask: function() {
		if(this.get_data().hasProperty("depthMask")) {
			return this.get_data().get("depthMask");
		} else {
			return this._defaultStates.get_depthMask();
		}
	}
	,set_depthFunction: function(value) {
		this.get_data().set("depthFunction",value);
		return value;
	}
	,get_depthFunction: function() {
		if(this.get_data().hasProperty("depthFunction")) {
			return this.get_data().get("depthFunction");
		} else {
			return this._defaultStates.get_depthFunction();
		}
	}
	,set_triangleCulling: function(value) {
		this.get_data().set("triangleCulling",value);
		return value;
	}
	,get_triangleCulling: function() {
		if(this.get_data().hasProperty("triangleCulling")) {
			return this.get_data().get("triangleCulling");
		} else {
			return this._defaultStates.get_triangleCulling();
		}
	}
	,set_stencilFunction: function(value) {
		this.get_data().set("stencilFunction",value);
		return value;
	}
	,get_stencilFunction: function() {
		if(this.get_data().hasProperty("stencilFunction")) {
			return this.get_data().get("stencilFunction");
		} else {
			return this._defaultStates.get_stencilFunction();
		}
	}
	,set_stencilReference: function(value) {
		this.get_data().set("stencilReference",value);
		return value;
	}
	,get_stencilReference: function() {
		if(this.get_data().hasProperty("stencilReference")) {
			return this.get_data().get("stencilReference");
		} else {
			return this._defaultStates.get_stencilReference();
		}
	}
	,set_stencilMask: function(value) {
		this.get_data().set("stencilMask",value);
		return value;
	}
	,get_stencilMask: function() {
		if(this.get_data().hasProperty("stencilMask")) {
			return this.get_data().get("stencilMask");
		} else {
			return this._defaultStates.get_stencilMask();
		}
	}
	,set_stencilFailOperation: function(value) {
		this.get_data().set("stencilFailOperation",value);
		return value;
	}
	,get_stencilFailOperation: function() {
		if(this.get_data().hasProperty("stencilFailOperation")) {
			return this.get_data().get("stencilFailOperation");
		} else {
			return this._defaultStates.get_stencilFailOperation();
		}
	}
	,set_stencilZFailOperation: function(value) {
		this.get_data().set("stencilZFailOperation",value);
		return value;
	}
	,get_stencilZFailOperation: function() {
		if(this.get_data().hasProperty("stencilZFailOperation")) {
			return this.get_data().get("stencilZFailOperation");
		} else {
			return this._defaultStates.get_stencilZFailOperation();
		}
	}
	,set_stencilZPassOperation: function(value) {
		this.get_data().set("stencilZPassOperation",value);
		return value;
	}
	,get_stencilZPassOperation: function() {
		if(this.get_data().hasProperty("stencilZPassOperation")) {
			return this.get_data().get("stencilZPassOperation");
		} else {
			return this._defaultStates.get_stencilZPassOperation();
		}
	}
	,set_priority: function(value) {
		this.get_data().set("priority",value);
		return value;
	}
	,get_priority: function() {
		if(this.get_data().hasProperty("priority")) {
			return this.get_data().get("priority");
		} else {
			return this._defaultStates.get_priority();
		}
	}
	,set_zSorted: function(value) {
		this.get_data().set("zSorted",value);
		return value;
	}
	,get_zSorted: function() {
		if(this.get_data().hasProperty("zSorted")) {
			return this.get_data().get("zSorted");
		} else {
			return this._defaultStates.get_zSorted();
		}
	}
	,__class__: minko_material_BasicMaterial
});
var minko_material_PhongMaterial = $hx_exports["minko"]["material"]["PhongMaterial"] = function(name) {
	minko_material_BasicMaterial.call(this,name);
};
minko_material_PhongMaterial.__name__ = true;
minko_material_PhongMaterial.create = function(name) {
	if(name == null) {
		name = "PhongMaterial";
	}
	return new minko_material_PhongMaterial(name);
};
minko_material_PhongMaterial.createbyPhongMaterial = function(source) {
	var pm = minko_material_PhongMaterial.create(source.get_name());
	pm.get_data().copyFrom(source.get_data());
	return pm;
};
minko_material_PhongMaterial.__super__ = minko_material_BasicMaterial;
minko_material_PhongMaterial.prototype = $extend(minko_material_BasicMaterial.prototype,{
	set_specularColor: function(color) {
		this.get_data().set("specularColor",color);
		return color;
	}
	,specularColorRGBA: function(color) {
		var this1 = new glm_Vec4Base();
		this1.x = (color >> 24 & 255) / 255;
		this1.y = (color >> 16 & 255) / 255;
		this1.z = (color >> 8 & 255) / 255;
		this1.w = (color & 255) / 255;
		return this.set_specularColor(this1);
	}
	,get_specularColor: function() {
		return this.get_data().get("specularColor");
	}
	,set_shininess: function(value) {
		this.get_data().set("shininess",value);
		return value;
	}
	,get_shininess: function() {
		return this.get_data().get("shininess");
	}
	,get_normalMap: function() {
		if(this.get_data().hasProperty("normalMap")) {
			return this.get_data().get("normalMap");
		} else {
			return null;
		}
	}
	,set_normalMap: function(value) {
		if(value.get_type() == 1) {
			throw new js__$Boot_HaxeError("Only 2d normal maps are currently supported.");
		}
		this.get_data().set("normalMap",value);
		return value;
	}
	,get_specularMap: function() {
		if(this.get_data().hasProperty("specularMap")) {
			return this.get_data().get("specularMap");
		} else {
			return null;
		}
	}
	,set_specularMap: function(value) {
		if(value.get_type() == 1) {
			throw new js__$Boot_HaxeError("Only 2d normal maps are currently supported.");
		}
		this.get_data().set("specularMap",value);
		return value;
	}
	,set_environmentAlpha: function(value) {
		this.get_data().set("environmentAlpha",value);
		return value;
	}
	,get_environmentAlpha: function() {
		return this.get_data().get("environmentAlpha");
	}
	,get_environmentCubemap: function() {
		if(this.get_data().hasProperty("environmentCubemap")) {
			return this.get_data().get("environmentCubemap");
		} else {
			return null;
		}
	}
	,set_environmentMap: function(value) {
		if(value.get_type() == 0) {
			this.get_data().set("environmentMap2d",value);
		} else {
			this.get_data().set("environmentCubemap",value);
		}
		return value;
	}
	,get_environmentMap2d: function() {
		if(this.get_data().hasProperty("environmentMap2d")) {
			return this.get_data().get("environmentMap2d");
		} else {
			return null;
		}
	}
	,get_alphaMap: function() {
		if(this.get_data().hasProperty("alphaMap")) {
			return this.get_data().get("alphaMap");
		} else {
			return null;
		}
	}
	,set_alphaMap: function(value) {
		if(value.get_type() == 1) {
			throw new js__$Boot_HaxeError("Only 2d transparency maps are currently supported.");
		}
		this.get_data().set("alphaMap",value);
		return value;
	}
	,set_alphaThreshold: function(value) {
		this.get_data().set("alphaThreshold",value);
		return value;
	}
	,get_alphaThreshold: function() {
		return this.get_data().get("alphaThreshold");
	}
	,get_fresnelReflectance: function() {
		return this.get_data().get("fresnelReflectance");
	}
	,set_fresnelReflectance: function(value) {
		this.get_data().set("fresnelReflectance",value);
		return value;
	}
	,get_fresnelExponent: function() {
		return this.get_data().get("fresnelExponent");
	}
	,set_fresnelExponent: function(value) {
		this.get_data().set("fresnelExponent",value);
		return value;
	}
	,__class__: minko_material_PhongMaterial
});
var minko_material_WaterMaterial = $hx_exports["minko"]["material"]["WaterMaterial"] = function(numWaves,name) {
	minko_material_PhongMaterial.call(this,name);
	this._numWaves = numWaves;
	var _g = [];
	var _g2 = 0;
	var _g1 = numWaves;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(0.0);
	}
	this._amplitudes = _g;
	var _g11 = [];
	var _g3 = 0;
	var _g21 = numWaves * 2;
	while(_g3 < _g21) {
		var i1 = _g3++;
		var this1 = new glm_Vec2Base();
		this1.x = 1;
		this1.y = 1;
		_g11.push(this1);
	}
	this._origins = _g11;
	var _g22 = [];
	var _g4 = 0;
	var _g31 = numWaves;
	while(_g4 < _g31) {
		var i2 = _g4++;
		_g22.push(0.0);
	}
	this._waveLength = _g22;
	var _g32 = [];
	var _g5 = 0;
	var _g41 = numWaves;
	while(_g5 < _g41) {
		var i3 = _g5++;
		_g32.push(0.0);
	}
	this._speeds = _g32;
	var _g42 = [];
	var _g6 = 0;
	var _g51 = numWaves;
	while(_g6 < _g51) {
		var i4 = _g6++;
		_g42.push(0.0);
	}
	this._sharpness = _g42;
	var _g52 = [];
	var _g7 = 0;
	var _g61 = numWaves;
	while(_g7 < _g61) {
		var i5 = _g7++;
		_g52.push(0);
	}
	this._waveType = _g52;
	this.get_data().set("numWaves",this._numWaves).set("waveOrigin",this._origins).set("waveLength",this._waveLength).set("waveAmplitude",this._amplitudes).set("waveSharpness",this._sharpness).set("waveSpeed",this._speeds).set("waveType",this._waveType);
};
minko_material_WaterMaterial.__name__ = true;
minko_material_WaterMaterial.createWaves = function(numWaves,name) {
	if(name == null) {
		name = "WaterMaterial";
	}
	return new minko_material_WaterMaterial(numWaves,name);
};
minko_material_WaterMaterial.__super__ = minko_material_PhongMaterial;
minko_material_WaterMaterial.prototype = $extend(minko_material_PhongMaterial.prototype,{
	setWaveProperty: function(propertyName,waveId,value) {
		var values = this.get_data().getUnsafePointer(propertyName);
		values[waveId] = value;
	}
	,setDirection: function(waveId,direction) {
		this.setWaveProperty("waveOrigin",waveId,direction);
		this.setWaveProperty("waveType",waveId,0);
		return this;
	}
	,setCenter: function(waveId,origin) {
		this.setWaveProperty("waveOrigin",waveId,origin);
		this.setWaveProperty("waveType",waveId,1);
		return this;
	}
	,setAmplitude: function(waveId,amplitude) {
		this.setWaveProperty("waveAmplitude",waveId,amplitude);
		return this;
	}
	,setWaveLength: function(waveId,waveLength) {
		this.setWaveProperty("waveLength",waveId,waveLength);
		return this;
	}
	,setSharpness: function(waveId,sharpness) {
		this.setWaveProperty("waveSharpness",waveId,sharpness);
		return this;
	}
	,setSpeed: function(waveId,speed) {
		this.setWaveProperty("waveSpeed",waveId,speed);
		return this;
	}
	,__class__: minko_material_WaterMaterial
});
var minko_math_AbstractShape = $hx_exports["minko"]["math"]["AbstractShape"] = function() {
};
minko_math_AbstractShape.__name__ = true;
minko_math_AbstractShape.prototype = {
	castRay: function(ray,distance) {
		return false;
	}
	,testBoundingBox: function(box) {
		return 0;
	}
	,testBoundingBoxandPlane: function(box,basePlaneId) {
		return null;
	}
	,updateFromMatrix: function(matrix) {
	}
	,__class__: minko_math_AbstractShape
};
var minko_math_Box = $hx_exports["minko"]["math"]["Box"] = function() {
	minko_math_AbstractShape.call(this);
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this._topRight = this1;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	this._bottomLeft = this2;
};
minko_math_Box.__name__ = true;
minko_math_Box.create = function() {
	return new minko_math_Box();
};
minko_math_Box.createbyVector3 = function(topRight,bottomLeft) {
	var box = new minko_math_Box();
	box._topRight = topRight;
	box._bottomLeft = bottomLeft;
	return box;
};
minko_math_Box.merge = function(box1,box2,out) {
	if(out == null) {
		out = minko_math_Box.create();
	}
	var x = Math.max(box1._topRight.x,box2._topRight.x);
	var y = Math.max(box1._topRight.y,box2._topRight.y);
	var z = Math.max(box1._topRight.z,box2._topRight.z);
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	out.set_topRight(this1);
	var x1 = Math.min(box1._bottomLeft.x,box2._bottomLeft.x);
	var y1 = Math.min(box1._bottomLeft.y,box2._bottomLeft.y);
	var z1 = Math.min(box1._bottomLeft.z,box2._bottomLeft.z);
	var this2 = new glm_Vec3Base();
	this2.x = x1;
	this2.y = y1;
	this2.z = z1;
	out.set_bottomLeft(this2);
	return out;
};
minko_math_Box.__super__ = minko_math_AbstractShape;
minko_math_Box.prototype = $extend(minko_math_AbstractShape.prototype,{
	mergeBox: function(box2) {
		return minko_math_Box.merge(this,box2,this);
	}
	,get_topRight: function() {
		return this._topRight;
	}
	,set_topRight: function(v) {
		this._topRight = v;
		return v;
	}
	,get_bottomLeft: function() {
		return this._bottomLeft;
	}
	,set_bottomLeft: function(v) {
		this._bottomLeft = v;
		return v;
	}
	,get_width: function() {
		return this._topRight.x - this._bottomLeft.x;
	}
	,get_height: function() {
		return this._topRight.y - this._bottomLeft.y;
	}
	,get_depth: function() {
		return this._topRight.z - this._bottomLeft.z;
	}
	,copyFrom: function(box) {
		this._topRight = box._topRight;
		this._bottomLeft = box._bottomLeft;
		return this;
	}
	,distance: function(position) {
		var withinBounds = position.x > this._bottomLeft.x && position.y > this._bottomLeft.y && position.z > this._bottomLeft.z && position.x < this._topRight.x && position.y < this._topRight.y && position.z < this._topRight.z;
		if(withinBounds) {
			return 0.0;
		}
		var squareDistance = 0.0;
		var _g = 0;
		var _g1 = ["x","y","z"];
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var position_i = Reflect.field(position,i);
			var _bottomLeft_i = Reflect.field(this._bottomLeft,i);
			var _topRight_i = Reflect.field(this._topRight,i);
			if(position_i < _bottomLeft_i) {
				var delta = _bottomLeft_i - position_i;
				squareDistance += delta * delta;
			} else if(position_i > _topRight_i) {
				var delta1 = position_i - _topRight_i;
				squareDistance += delta1 * delta1;
			}
		}
		return Math.sqrt(squareDistance);
	}
	,castRay: function(ray,distance) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var near = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var far = this2;
		if(this._topRight.z > this._bottomLeft.z) {
			near = this._bottomLeft;
			far = this._topRight;
		} else {
			near = this._topRight;
			far = this._bottomLeft;
		}
		var t0x = (near.x - ray.get_origin().x) / ray.get_direction().x;
		var t1x = (far.x - ray.get_origin().x) / ray.get_direction().x;
		if(t0x > t1x) {
			var tmp = t1x;
			t1x = t0x;
			t0x = tmp;
		}
		var tmin = t0x;
		var tmax = t1x;
		var t0y = (near.y - ray.get_origin().y) / ray.get_direction().y;
		var t1y = (far.y - ray.get_origin().y) / ray.get_direction().y;
		if(t0y > t1y) {
			var tmp1 = t1y;
			t1y = t0y;
			t0y = tmp1;
		}
		if(t0y > tmax || tmin > t1y) {
			return false;
		}
		if(t0y > tmin) {
			tmin = t0y;
		}
		if(t1y < tmax) {
			tmax = t1y;
		}
		var t0z = (near.z - ray.get_origin().z) / ray.get_direction().z;
		var t1z = (far.z - ray.get_origin().z) / ray.get_direction().z;
		if(t0z > t1z) {
			var tmp2 = t1z;
			t1z = t0z;
			t0z = tmp2;
		}
		if(t0z > tmax || tmin > t1z) {
			return false;
		}
		if(t0z > tmin) {
			tmin = t0z;
		}
		if(t1z < tmax) {
			tmax = t1z;
		}
		distance = tmin;
		return true;
	}
	,getVertices: function() {
		var vertices = this._topRight;
		var x = this._topRight.x - this.get_width();
		var y = this._topRight.y;
		var z = this._topRight.z;
		var this1 = new glm_Vec3Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		var x1 = this._topRight.x - this.get_width();
		var y1 = this._topRight.y;
		var z1 = this._topRight.z - this.get_depth();
		var this2 = new glm_Vec3Base();
		this2.x = x1;
		this2.y = y1;
		this2.z = z1;
		var x2 = this._topRight.x;
		var y2 = this._topRight.y;
		var z2 = this._topRight.z - this.get_depth();
		var this3 = new glm_Vec3Base();
		this3.x = x2;
		this3.y = y2;
		this3.z = z2;
		var vertices1 = this._bottomLeft;
		var x3 = this._bottomLeft.x + this.get_width();
		var y3 = this._bottomLeft.y;
		var z3 = this._bottomLeft.z;
		var this4 = new glm_Vec3Base();
		this4.x = x3;
		this4.y = y3;
		this4.z = z3;
		var x4 = this._bottomLeft.x + this.get_width();
		var y4 = this._bottomLeft.y;
		var z4 = this._bottomLeft.z + this.get_depth();
		var this5 = new glm_Vec3Base();
		this5.x = x4;
		this5.y = y4;
		this5.z = z4;
		var x5 = this._bottomLeft.x;
		var y5 = this._bottomLeft.y;
		var z5 = this._bottomLeft.z + this.get_depth();
		var this6 = new glm_Vec3Base();
		this6.x = x5;
		this6.y = y5;
		this6.z = z5;
		var vertices2 = [vertices,this1,this2,this3,vertices1,this4,this5,this6];
		return vertices2;
	}
	,testBoundingBox: function(box) {
		if(box.get_bottomLeft().x > this.get_topRight().x) {
			return 0;
		}
		if(box.get_topRight().x < this.get_bottomLeft().x) {
			return 2;
		}
		if(box.get_bottomLeft().y > this.get_topRight().y) {
			return 3;
		}
		if(box.get_topRight().y < this.get_bottomLeft().y) {
			return 1;
		}
		if(box.get_topRight().z < this.get_bottomLeft().z) {
			return 5;
		}
		if(box.get_bottomLeft().z > this.get_topRight().z) {
			return 4;
		}
		if(this.get_bottomLeft().x > box.get_bottomLeft().x && this.get_bottomLeft().y > box.get_bottomLeft().y && this.get_bottomLeft().z > box.get_bottomLeft().z && this.get_topRight().x < box.get_topRight().x && this.get_topRight().y < box.get_topRight().y && this.get_topRight().z < box.get_topRight().z) {
			return -1;
		}
		return -2;
	}
	,updateFromMatrix: function(matrix) {
		var x = this._bottomLeft.x;
		var y = this._bottomLeft.y;
		var z = this._bottomLeft.z;
		var this1 = new glm_Vec4Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		this1.w = 1;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x1 = v.x;
		var y1 = v.y;
		var z1 = v.z;
		var w = v.w;
		dest.x = matrix._00 * x1 + matrix._10 * y1 + matrix._20 * z1 + matrix._30 * w;
		dest.y = matrix._01 * x1 + matrix._11 * y1 + matrix._21 * z1 + matrix._31 * w;
		dest.z = matrix._02 * x1 + matrix._12 * y1 + matrix._22 * z1 + matrix._32 * w;
		dest.w = matrix._03 * x1 + matrix._13 * y1 + matrix._23 * z1 + matrix._33 * w;
		var tmp = dest;
		var x2 = tmp.x;
		var y2 = tmp.y;
		var z2 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x2;
		this3.y = y2;
		this3.z = z2;
		this._bottomLeft = this3;
		var x3 = this._topRight.x;
		var y3 = this._topRight.y;
		var z3 = this._topRight.z;
		var this4 = new glm_Vec4Base();
		this4.x = x3;
		this4.y = y3;
		this4.z = z3;
		this4.w = 1;
		var v1 = this4;
		var this5 = new glm_Vec4Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		this5.w = 0;
		var dest1 = this5;
		var x4 = v1.x;
		var y4 = v1.y;
		var z4 = v1.z;
		var w1 = v1.w;
		dest1.x = matrix._00 * x4 + matrix._10 * y4 + matrix._20 * z4 + matrix._30 * w1;
		dest1.y = matrix._01 * x4 + matrix._11 * y4 + matrix._21 * z4 + matrix._31 * w1;
		dest1.z = matrix._02 * x4 + matrix._12 * y4 + matrix._22 * z4 + matrix._32 * w1;
		dest1.w = matrix._03 * x4 + matrix._13 * y4 + matrix._23 * z4 + matrix._33 * w1;
		tmp = dest1;
		var x5 = tmp.x;
		var y5 = tmp.y;
		var z5 = tmp.z;
		var this6 = new glm_Vec3Base();
		this6.x = x5;
		this6.y = y5;
		this6.z = z5;
		this._topRight = this6;
	}
	,__class__: minko_math_Box
});
var minko_math_Frustum = $hx_exports["minko"]["math"]["Frustum"] = function() {
	minko_math_AbstractShape.call(this);
	this._points = [];
	var _g = [];
	var _g1 = 0;
	while(_g1 < 6) {
		var i = _g1++;
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		_g.push(this1);
	}
	this._planes = _g;
	var _g11 = [];
	var _g2 = 0;
	while(_g2 < 6) {
		var i1 = _g2++;
		_g11.push(false);
	}
	this._blfResult = _g11;
	var _g21 = [];
	var _g3 = 0;
	while(_g3 < 6) {
		var i2 = _g3++;
		_g21.push(false);
	}
	this._blbResult = _g21;
	var _g31 = [];
	var _g4 = 0;
	while(_g4 < 6) {
		var i3 = _g4++;
		_g31.push(false);
	}
	this._brfResult = _g31;
	var _g41 = [];
	var _g5 = 0;
	while(_g5 < 6) {
		var i4 = _g5++;
		_g41.push(false);
	}
	this._brbResult = _g41;
	var _g51 = [];
	var _g6 = 0;
	while(_g6 < 6) {
		var i5 = _g6++;
		_g51.push(false);
	}
	this._tlfResult = _g51;
	var _g61 = [];
	var _g7 = 0;
	while(_g7 < 6) {
		var i6 = _g7++;
		_g61.push(false);
	}
	this._tlbResult = _g61;
	var _g71 = [];
	var _g8 = 0;
	while(_g8 < 6) {
		var i7 = _g8++;
		_g71.push(false);
	}
	this._trfResult = _g71;
	var _g81 = [];
	var _g9 = 0;
	while(_g9 < 6) {
		var i8 = _g9++;
		_g81.push(false);
	}
	this._trbResult = _g81;
};
minko_math_Frustum.__name__ = true;
minko_math_Frustum.create = function() {
	return new minko_math_Frustum();
};
minko_math_Frustum.__super__ = minko_math_AbstractShape;
minko_math_Frustum.prototype = $extend(minko_math_AbstractShape.prototype,{
	castRay: function(ray,distance) {
		return false;
	}
	,getRawData: function(matrix) {
		var out = [matrix._00,matrix._01,matrix._02,matrix._03,matrix._10,matrix._11,matrix._12,matrix._13,matrix._20,matrix._21,matrix._22,matrix._23,matrix._30,matrix._31,matrix._32,matrix._33];
		return out;
	}
	,updateFromMatrix: function(matrix) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var src_r1c0 = matrix._01;
		var src_r2c0 = matrix._02;
		var src_r2c1 = matrix._12;
		var src_r3c0 = matrix._03;
		var src_r3c1 = matrix._13;
		var src_r3c2 = matrix._23;
		dest._00 = matrix._00;
		dest._01 = matrix._10;
		dest._02 = matrix._20;
		dest._03 = matrix._30;
		dest._10 = src_r1c0;
		dest._11 = matrix._11;
		dest._12 = matrix._21;
		dest._13 = matrix._31;
		dest._20 = src_r2c0;
		dest._21 = src_r2c1;
		dest._22 = matrix._22;
		dest._23 = matrix._32;
		dest._30 = src_r3c0;
		dest._31 = src_r3c1;
		dest._32 = src_r3c2;
		dest._33 = matrix._33;
		var matrix1 = dest;
		var out = [matrix1._00,matrix1._01,matrix1._02,matrix1._03,matrix1._10,matrix1._11,matrix1._12,matrix1._13,matrix1._20,matrix1._21,matrix1._22,matrix1._23,matrix1._30,matrix1._31,matrix1._32,matrix1._33];
		var data = out;
		var tmp = this._planes;
		var this2 = new glm_Vec4Base();
		this2.x = data[12] + data[0];
		this2.y = data[13] + data[1];
		this2.z = data[14] + data[2];
		this2.w = data[15] + data[3];
		var v = this2;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 0;
		var dest1 = this3;
		var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v.x * mult;
		dest1.y = v.y * mult;
		dest1.z = v.z * mult;
		dest1.w = v.w * mult;
		tmp[0] = dest1;
		var tmp1 = this._planes;
		var this4 = new glm_Vec4Base();
		this4.x = data[12] - data[0];
		this4.y = data[13] - data[1];
		this4.z = data[14] - data[2];
		this4.w = data[15] - data[3];
		var v1 = this4;
		var this5 = new glm_Vec4Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		this5.w = 0;
		var dest2 = this5;
		var length1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z + v1.w * v1.w);
		var mult1 = 0;
		if(length1 >= glm_GLM.EPSILON) {
			mult1 = 1 / length1;
		}
		dest2.x = v1.x * mult1;
		dest2.y = v1.y * mult1;
		dest2.z = v1.z * mult1;
		dest2.w = v1.w * mult1;
		tmp1[2] = dest2;
		var tmp2 = this._planes;
		var this6 = new glm_Vec4Base();
		this6.x = data[12] + data[4];
		this6.y = data[13] + data[5];
		this6.z = data[14] + data[6];
		this6.w = data[15] + data[7];
		var v2 = this6;
		var this7 = new glm_Vec4Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		this7.w = 0;
		var dest3 = this7;
		var length2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z + v2.w * v2.w);
		var mult2 = 0;
		if(length2 >= glm_GLM.EPSILON) {
			mult2 = 1 / length2;
		}
		dest3.x = v2.x * mult2;
		dest3.y = v2.y * mult2;
		dest3.z = v2.z * mult2;
		dest3.w = v2.w * mult2;
		tmp2[3] = dest3;
		var tmp3 = this._planes;
		var this8 = new glm_Vec4Base();
		this8.x = data[12] - data[4];
		this8.y = data[13] - data[5];
		this8.z = data[14] - data[6];
		this8.w = data[15] - data[7];
		var v3 = this8;
		var this9 = new glm_Vec4Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		this9.w = 0;
		var dest4 = this9;
		var length3 = Math.sqrt(v3.x * v3.x + v3.y * v3.y + v3.z * v3.z + v3.w * v3.w);
		var mult3 = 0;
		if(length3 >= glm_GLM.EPSILON) {
			mult3 = 1 / length3;
		}
		dest4.x = v3.x * mult3;
		dest4.y = v3.y * mult3;
		dest4.z = v3.z * mult3;
		dest4.w = v3.w * mult3;
		tmp3[1] = dest4;
		var tmp4 = this._planes;
		var this10 = new glm_Vec4Base();
		this10.x = data[8];
		this10.y = data[9];
		this10.z = data[10];
		this10.w = data[11];
		var v4 = this10;
		var this11 = new glm_Vec4Base();
		this11.x = 0;
		this11.y = 0;
		this11.z = 0;
		this11.w = 0;
		var dest5 = this11;
		var length4 = Math.sqrt(v4.x * v4.x + v4.y * v4.y + v4.z * v4.z + v4.w * v4.w);
		var mult4 = 0;
		if(length4 >= glm_GLM.EPSILON) {
			mult4 = 1 / length4;
		}
		dest5.x = v4.x * mult4;
		dest5.y = v4.y * mult4;
		dest5.z = v4.z * mult4;
		dest5.w = v4.w * mult4;
		tmp4[4] = dest5;
		var tmp5 = this._planes;
		var this12 = new glm_Vec4Base();
		this12.x = data[12] - data[8];
		this12.y = data[13] - data[9];
		this12.z = data[14] - data[10];
		this12.w = data[15] - data[11];
		var v5 = this12;
		var this13 = new glm_Vec4Base();
		this13.x = 0;
		this13.y = 0;
		this13.z = 0;
		this13.w = 0;
		var dest6 = this13;
		var length5 = Math.sqrt(v5.x * v5.x + v5.y * v5.y + v5.z * v5.z + v5.w * v5.w);
		var mult5 = 0;
		if(length5 >= glm_GLM.EPSILON) {
			mult5 = 1 / length5;
		}
		dest6.x = v5.x * mult5;
		dest6.y = v5.y * mult5;
		dest6.z = v5.z * mult5;
		dest6.w = v5.w * mult5;
		tmp5[5] = dest6;
	}
	,testBoundingBox: function(box) {
		return this.testBoundingBoxandPlane(box,0).first;
	}
	,testBoundingBoxandPlane: function(box,basePlaneId) {
		var result = 0;
		var xblf = box.get_bottomLeft().x;
		var yblf = box.get_bottomLeft().y;
		var zblf = box.get_bottomLeft().z;
		var xtrb = box.get_topRight().x;
		var ytrb = box.get_topRight().y;
		var ztrb = box.get_topRight().z;
		var xbrf = xtrb;
		var ybrf = yblf;
		var zbrf = zblf;
		var xblb = xblf;
		var yblb = yblf;
		var zblb = ztrb;
		var xbrb = xtrb;
		var ybrb = yblf;
		var zbrb = ztrb;
		var xtlb = xblf;
		var ytlb = ytrb;
		var ztlb = ztrb;
		var xtlf = xtlb;
		var ytlf = ytrb;
		var ztlf = zblf;
		var xtrf = xbrf;
		var ytrf = ytrb;
		var ztrf = zblf;
		var _g1 = 0;
		var _g = this._planes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var planeId = (basePlaneId + i) % this._planes.length;
			var pa = this._planes[planeId].x;
			var pb = this._planes[planeId].y;
			var pc = this._planes[planeId].z;
			var pd = this._planes[planeId].w;
			this._blfResult[planeId] = pa * xblf + pb * yblf + pc * zblf + pd < 0.0;
			this._brfResult[planeId] = pa * xbrf + pb * ybrf + pc * zbrf + pd < 0.0;
			this._blbResult[planeId] = pa * xblb + pb * yblb + pc * zblb + pd < 0.0;
			this._brbResult[planeId] = pa * xbrb + pb * ybrb + pc * zbrb + pd < 0.0;
			this._tlfResult[planeId] = pa * xtlf + pb * ytlf + pc * ztlf + pd < 0.0;
			this._trfResult[planeId] = pa * xtrf + pb * ytrf + pc * ztrf + pd < 0.0;
			this._tlbResult[planeId] = pa * xtlb + pb * ytlb + pc * ztlb + pd < 0.0;
			this._trbResult[planeId] = pa * xtrb + pb * ytrb + pc * ztrb + pd < 0.0;
			if(this._blfResult[planeId] && this._brfResult[planeId] && this._blbResult[planeId] && this._brbResult[planeId] && this._tlfResult[planeId] && this._trfResult[planeId] && this._tlbResult[planeId] && this._trbResult[planeId]) {
				return new minko_Tuple(planeId,planeId);
			}
		}
		if((this._blfResult[0] && this._trbResult[2] || this._blfResult[2] && this._trbResult[0]) && (this._blfResult[1] && this._trbResult[3] || this._blfResult[3] && this._trbResult[1]) && (this._blfResult[4] && this._trbResult[5] || this._blfResult[5] && this._trbResult[4])) {
			return new minko_Tuple(-2,0);
		}
		return new minko_Tuple(-1,0);
	}
	,__class__: minko_math_Frustum
});
var minko_math_NodeEntry = $hx_exports["minko"]["math"]["NodeEntry"] = function(node,box) {
	this.node = node;
	this.box = box;
};
minko_math_NodeEntry.__name__ = true;
minko_math_NodeEntry.prototype = {
	__class__: minko_math_NodeEntry
};
var minko_math_OctTree = $hx_exports["minko"]["math"]["OctTree"] = function(worldSize,maxDepth,center,depth) {
	this._maxDepth = maxDepth;
	this._depth = depth;
	this._splitted = false;
	this._worldSize = worldSize;
	this._center = center;
	this._frustumLastPlaneId = 0;
	var halfEdgeLength = this.get_edgeLength() / 2.0;
	var a = this._center;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x + halfEdgeLength;
	dest.y = a.y + halfEdgeLength;
	dest.z = a.z + halfEdgeLength;
	var a1 = this._center;
	var s = -halfEdgeLength;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	var dest1 = this2;
	dest1.x = a1.x + s;
	dest1.y = a1.y + s;
	dest1.z = a1.z + s;
	this._octantBox = minko_math_Box.createbyVector3(dest,dest1);
	this._nodeToTransformChangedSlot = new haxe_ds_ObjectMap();
	this._children = [];
	this._content = [];
	this._childrenContent = [];
	this._nodeToOctant = new haxe_ds_ObjectMap();
	this._invalidNodes = [];
};
minko_math_OctTree.__name__ = true;
minko_math_OctTree.create = function(worldSize,maxDepth,center,depth) {
	if(depth == null) {
		depth = 0;
	}
	var instance = new minko_math_OctTree(worldSize,maxDepth,center,depth);
	instance._root = instance;
	return instance;
};
minko_math_OctTree.prototype = {
	insert: function(node) {
		if(this._nodeToOctant.h.__keys__[node.__id__] != null) {
			return this;
		}
		if(!node.hasComponent(minko_component_BoundingBox)) {
			return this;
		}
		var transform = node.getComponent(minko_component_Transform);
		transform.updateModelToWorldMatrix();
		var optimalDepth = Math.floor(Math.min(this.computeDepth(node),this._maxDepth));
		var currentDepth = 0;
		return this._root.doInsert(node,0,optimalDepth);
	}
	,remove: function(node) {
		var root = this._root;
		HxOverrides.remove(root._invalidNodes,node);
		return root.doRemove(node);
	}
	,computeDepth: function(node) {
		var surface = node.getComponent(minko_component_Surface);
		var size = this.computeSize(node.getComponent(minko_component_BoundingBox));
		return Math.floor(Math.log(this._worldSize / size) / Math.log(2));
	}
	,generateVisual: function(assetLibrary,rootNode) {
		if(rootNode == null) {
			rootNode = minko_scene_Node.create();
		}
		var node = minko_scene_Node.create();
		if(this._content.length > 0) {
			var x = this._center.x;
			var y = this._center.y;
			var z = this._center.z;
			var this1 = new glm_Vec3Base();
			this1.x = x;
			this1.y = y;
			this1.z = z;
			var translation = this1;
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest = this2;
			dest._00 = 1;
			dest._10 = 0;
			dest._20 = 0;
			dest._30 = 0;
			dest._01 = 0;
			dest._11 = 1;
			dest._21 = 0;
			dest._31 = 0;
			dest._02 = 0;
			dest._12 = 0;
			dest._22 = 1;
			dest._32 = 0;
			dest._03 = 0;
			dest._13 = 0;
			dest._23 = 0;
			dest._33 = 1;
			var dest1 = dest;
			dest1._00 = 1;
			dest1._10 = 0;
			dest1._20 = 0;
			dest1._30 = 0;
			dest1._01 = 0;
			dest1._11 = 1;
			dest1._21 = 0;
			dest1._31 = 0;
			dest1._02 = 0;
			dest1._12 = 0;
			dest1._22 = 1;
			dest1._32 = 0;
			dest1._03 = 0;
			dest1._13 = 0;
			dest1._23 = 0;
			dest1._33 = 1;
			dest1._30 = translation.x;
			dest1._31 = translation.y;
			dest1._32 = translation.z;
			var a = dest1;
			var x1 = this.get_edgeLength();
			var y1 = this.get_edgeLength();
			var z1 = this.get_edgeLength();
			var this3 = new glm_Vec3Base();
			this3.x = x1;
			this3.y = y1;
			this3.z = z1;
			var amount = this3;
			var this4 = new glm_Mat4Base();
			this4._00 = 0;
			this4._01 = 0;
			this4._02 = 0;
			this4._03 = 0;
			this4._10 = 0;
			this4._11 = 0;
			this4._12 = 0;
			this4._13 = 0;
			this4._20 = 0;
			this4._21 = 0;
			this4._22 = 0;
			this4._23 = 0;
			this4._30 = 0;
			this4._31 = 0;
			this4._32 = 0;
			this4._33 = 0;
			var dest2 = this4;
			dest2._00 = 1;
			dest2._10 = 0;
			dest2._20 = 0;
			dest2._30 = 0;
			dest2._01 = 0;
			dest2._11 = 1;
			dest2._21 = 0;
			dest2._31 = 0;
			dest2._02 = 0;
			dest2._12 = 0;
			dest2._22 = 1;
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			var dest3 = dest2;
			dest3._00 = 1;
			dest3._10 = 0;
			dest3._20 = 0;
			dest3._30 = 0;
			dest3._01 = 0;
			dest3._11 = 1;
			dest3._21 = 0;
			dest3._31 = 0;
			dest3._02 = 0;
			dest3._12 = 0;
			dest3._22 = 1;
			dest3._32 = 0;
			dest3._03 = 0;
			dest3._13 = 0;
			dest3._23 = 0;
			dest3._33 = 1;
			dest3._00 = amount.x;
			dest3._11 = amount.y;
			dest3._22 = amount.z;
			var b = dest3;
			var this5 = new glm_Mat4Base();
			this5._00 = 0;
			this5._01 = 0;
			this5._02 = 0;
			this5._03 = 0;
			this5._10 = 0;
			this5._11 = 0;
			this5._12 = 0;
			this5._13 = 0;
			this5._20 = 0;
			this5._21 = 0;
			this5._22 = 0;
			this5._23 = 0;
			this5._30 = 0;
			this5._31 = 0;
			this5._32 = 0;
			this5._33 = 0;
			var dest4 = this5;
			var _a;
			var _b;
			if(dest4 == a) {
				var this6 = new glm_Mat4Base();
				this6._00 = 0;
				this6._01 = 0;
				this6._02 = 0;
				this6._03 = 0;
				this6._10 = 0;
				this6._11 = 0;
				this6._12 = 0;
				this6._13 = 0;
				this6._20 = 0;
				this6._21 = 0;
				this6._22 = 0;
				this6._23 = 0;
				this6._30 = 0;
				this6._31 = 0;
				this6._32 = 0;
				this6._33 = 0;
				var dest5 = this6;
				dest5._00 = a._00;
				dest5._10 = a._10;
				dest5._20 = a._20;
				dest5._30 = a._30;
				dest5._01 = a._01;
				dest5._11 = a._11;
				dest5._21 = a._21;
				dest5._31 = a._31;
				dest5._02 = a._02;
				dest5._12 = a._12;
				dest5._22 = a._22;
				dest5._32 = a._32;
				dest5._03 = a._03;
				dest5._13 = a._13;
				dest5._23 = a._23;
				dest5._33 = a._33;
				_a = dest5;
				_b = b;
			} else if(dest4 == b) {
				_a = a;
				var this7 = new glm_Mat4Base();
				this7._00 = 0;
				this7._01 = 0;
				this7._02 = 0;
				this7._03 = 0;
				this7._10 = 0;
				this7._11 = 0;
				this7._12 = 0;
				this7._13 = 0;
				this7._20 = 0;
				this7._21 = 0;
				this7._22 = 0;
				this7._23 = 0;
				this7._30 = 0;
				this7._31 = 0;
				this7._32 = 0;
				this7._33 = 0;
				var dest6 = this7;
				dest6._00 = b._00;
				dest6._10 = b._10;
				dest6._20 = b._20;
				dest6._30 = b._30;
				dest6._01 = b._01;
				dest6._11 = b._11;
				dest6._21 = b._21;
				dest6._31 = b._31;
				dest6._02 = b._02;
				dest6._12 = b._12;
				dest6._22 = b._22;
				dest6._32 = b._32;
				dest6._03 = b._03;
				dest6._13 = b._13;
				dest6._23 = b._23;
				dest6._33 = b._33;
				_b = dest6;
			} else {
				_a = a;
				_b = b;
			}
			dest4._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest4._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest4._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest4._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest4._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest4._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest4._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest4._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest4._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest4._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest4._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest4._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest4._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest4._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest4._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest4._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			var matrix = dest4;
			var material = minko_material_BasicMaterial.create();
			material.diffuseColorRGBA(16711712);
			material.set_blendingMode(16 | 8192);
			material.set_triangleCulling(0);
			material.set_priority(minko_render__$Priority_Priority_$Impl_$.TRANSPARENT);
			node.addComponent(minko_component_Transform.createbyMatrix4(matrix)).addComponent(minko_component_Surface.create(minko_geometry_CubeGeometry.create(assetLibrary.get_context()),material,assetLibrary.effect("effect/Basic.effect")));
			rootNode.addChild(node);
			this._debugNode = node;
		}
		if(this._splitted) {
			var _g = 0;
			var _g1 = this._children;
			while(_g < _g1.length) {
				var octant = _g1[_g];
				++_g;
				octant.generateVisual(assetLibrary,rootNode);
			}
		}
		return node;
	}
	,testFrustum: function(frustum,insideFrustumCallback,outsideFustumCallback) {
		if(this._invalidNodes.length > 0) {
			var _g = 0;
			var _g1 = this._invalidNodes;
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				this.remove(node);
				this.insert(node);
			}
			this._invalidNodes = [];
		}
		var frustumPtr = frustum;
		if(frustumPtr != null) {
			var result = frustumPtr.testBoundingBoxandPlane(this._octantBox,this._frustumLastPlaneId);
			var shapePosition = result.first;
			this._frustumLastPlaneId = result.second;
			if(shapePosition == -2 || shapePosition == -1) {
				if(this._splitted) {
					var _g2 = 0;
					var _g11 = this._children;
					while(_g2 < _g11.length) {
						var octantChild = _g11[_g2];
						++_g2;
						octantChild.testFrustum(frustum,insideFrustumCallback,outsideFustumCallback);
					}
				}
				var _g3 = 0;
				var _g12 = this._content;
				while(_g3 < _g12.length) {
					var nodeEntry = _g12[_g3];
					++_g3;
					var node1 = nodeEntry.node;
					var nodeBox = nodeEntry.box;
					var nodeResult = frustumPtr.testBoundingBoxandPlane(nodeBox,this._frustumLastPlaneId);
					if(nodeResult.first == -2 || nodeResult.first == -1) {
						insideFrustumCallback(node1);
					} else {
						outsideFustumCallback(node1);
					}
				}
			} else {
				var _g4 = 0;
				var _g13 = this._childrenContent;
				while(_g4 < _g13.length) {
					var node2 = _g13[_g4];
					++_g4;
					outsideFustumCallback(node2);
				}
			}
		}
	}
	,addToContent: function(node) {
		var _gthis = this;
		this._nodeToOctant.set(node,this);
		this.addToChildContent(node);
		var tmp = this._content;
		var tmp1 = (js_Boot.__cast(node.getComponent(minko_component_BoundingBox) , minko_component_BoundingBox)).get_box();
		tmp.push(new minko_math_NodeEntry(node,tmp1));
		var tmp2 = this._nodeToTransformChangedSlot;
		var tmp3 = node.get_data().getPropertyChanged("modelToWorldMatrix").connect(function(store,provider,propertyName) {
			_gthis.nodeModelToWorldChanged(node);
		});
		tmp2.set(node,tmp3);
	}
	,removeFromContent: function(node) {
		var contentNodeIt = Lambda.find(this._content,function(nodeEntry) {
			return nodeEntry.node == node;
		});
		if(contentNodeIt == null) {
			return false;
		}
		HxOverrides.remove(this._content,contentNodeIt);
		this._nodeToTransformChangedSlot.remove(node);
		return true;
	}
	,addToChildContent: function(node) {
		this._childrenContent.push(node);
		if(this._parent == null) {
			return;
		}
		var parent = this._parent;
		parent._nodeToOctant.set(node,this);
		parent.addToChildContent(node);
	}
	,intersects: function(node) {
		var nodeBox = (js_Boot.__cast(node.getComponent(minko_component_BoundingBox) , minko_component_BoundingBox)).get_box();
		var nodeMinBound = nodeBox.get_bottomLeft();
		var nodeMaxBound = nodeBox.get_topRight();
		var minBound = this._octantBox.get_bottomLeft();
		var maxBound = this._octantBox.get_topRight();
		if(nodeMinBound.x >= maxBound.x || nodeMaxBound.x < minBound.x) {
			return false;
		}
		if(nodeMinBound.y >= maxBound.y || nodeMaxBound.y < minBound.y) {
			return false;
		}
		if(nodeMinBound.z >= maxBound.z || nodeMaxBound.z < minBound.z) {
			return false;
		}
		return true;
	}
	,findNodeOctant: function(node) {
	}
	,nodeModelToWorldChanged: function(node) {
		this.invalidateNode(node);
	}
	,invalidateNode: function(node) {
		this._root._invalidNodes.push(node);
	}
	,childOctantsIntersection: function(node,octants) {
		var nodeBox = (js_Boot.__cast(node.getComponent(minko_component_BoundingBox) , minko_component_BoundingBox)).get_box();
		var nodeMinBound = nodeBox.get_bottomLeft();
		var nodeMaxBound = nodeBox.get_topRight();
		var _g = 0;
		var _g1 = this._children;
		while(_g < _g1.length) {
			var childOctant = _g1[_g];
			++_g;
			if(!childOctant.intersects(node)) {
				continue;
			}
			octants.push(childOctant);
		}
		return octants.length > 0;
	}
	,doInsert: function(node,currentDepth,optimalDepth) {
		if(!this._splitted) {
			this.split();
		}
		var octants = [];
		if(!this.childOctantsIntersection(node,octants)) {
			this.addToContent(node);
			return this;
		}
		var childOctantsConflict = octants.length > 1;
		var octant = childOctantsConflict ? this : octants[0];
		if(childOctantsConflict || currentDepth == optimalDepth) {
			octant.addToContent(node);
			return this;
		}
		return octant.doInsert(node,currentDepth + 1,optimalDepth);
	}
	,doRemove: function(node) {
		var octantIt = this._nodeToOctant.h.__keys__[node.__id__] != null;
		if(octantIt == false) {
			return this;
		}
		var octant = this._nodeToOctant.h[node.__id__];
		HxOverrides.remove(this._childrenContent,node);
		this._nodeToOctant.remove(node);
		if(this.removeFromContent(node) || octant == this) {
			return this;
		}
		return octant.doRemove(node);
	}
	,split: function() {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 8) {
			var i = _g1++;
			_g.push(null);
		}
		this._children = _g;
		var halfEdgeLength = this.get_edgeLength() / 2.0;
		var _g11 = 0;
		while(_g11 < 2) {
			var x = _g11++;
			var _g2 = 0;
			while(_g2 < 2) {
				var y = _g2++;
				var _g3 = 0;
				while(_g3 < 2) {
					var z = _g3++;
					var index = x + (y << 1) + (z << 2);
					var child = this._worldSize;
					var child1 = this._maxDepth;
					var x1 = this._center.x + (x == 0 ? -halfEdgeLength / 2.0 : halfEdgeLength / 2.0);
					var y1 = this._center.y + (y == 0 ? -halfEdgeLength / 2.0 : halfEdgeLength / 2.0);
					var z1 = this._center.z + (z == 0 ? -halfEdgeLength / 2.0 : halfEdgeLength / 2.0);
					var this1 = new glm_Vec3Base();
					this1.x = x1;
					this1.y = y1;
					this1.z = z1;
					var child2 = minko_math_OctTree.create(child,child1,this1,this._depth + 1);
					this._children[index] = child2;
					child2._parent = this;
					child2._root = this._root;
				}
			}
		}
		this._splitted = true;
	}
	,computeSize: function(boundingBox) {
		return Math.max(boundingBox.get_box().get_width(),Math.max(boundingBox.get_box().get_height(),boundingBox.get_box().get_depth()));
	}
	,get_edgeLength: function() {
		return this._worldSize / Math.pow(2.0,this._depth);
	}
	,__class__: minko_math_OctTree
};
var minko_math_HashCore = function() { };
minko_math_HashCore.__name__ = true;
minko_math_HashCore.djb2 = function(s) {
	var hash = 5381;
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		hash = (hash << 5) + hash + HxOverrides.cca(s,i);
	}
	return hash;
};
minko_math_HashCore.sdbm = function(s) {
	var hash = 0;
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		hash = HxOverrides.cca(s,i) + (hash << 6) + (hash << 16) - hash;
	}
	return hash;
};
minko_math_HashCore.javaHashCode = function(s) {
	var hash = 0;
	if(s.length == 0) {
		return hash;
	}
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		hash = (hash << 5) - hash + HxOverrides.cca(s,i);
		hash &= hash;
	}
	return hash;
};
var minko_math_Random = function() { };
minko_math_Random.__name__ = true;
minko_math_Random.makeRandomSeed = function() {
	return Math.floor(Math.random() * 2147483647.0);
};
minko_math_Random.nextParkMiller = function(seed) {
	return Math.floor(seed * 16807.0 % 2147483647.0);
};
minko_math_Random.nextParkMiller31 = function(seed) {
	var lo = 16807 * (seed & 65535);
	var hi = 16807 * (seed >>> 16);
	lo += (hi & 32767) << 16;
	lo += hi >>> 15;
	if(lo > 2147483647) {
		lo -= 2147483647;
	}
	return lo;
};
minko_math_Random.nextLCG = function(seed) {
	return Math.floor((1103515245.0 * seed + 12345) % 2147483647.0);
};
minko_math_Random.toFloat = function(seed) {
	return seed / 2147483647.0;
};
minko_math_Random.toBool = function(seed) {
	return seed / 2147483647.0 > 0.5;
};
minko_math_Random.toFloatRange = function(seed,min,max) {
	return min + (max - min) * (seed / 2147483647.0);
};
minko_math_Random.toIntRange = function(seed,min,max) {
	return Math.round(min - 0.4999 + (max + 0.4999 - (min - 0.4999)) * (seed / 2147483647.0));
};
minko_math_Random.stringToSeed = function(s) {
	return Math.floor(minko_math_HashCore.djb2(s) % 2147483647.0);
};
var minko_math_Ray = $hx_exports["minko"]["math"]["Ray"] = function() {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this._origin = this1;
	var this2 = new glm_Vec3Base();
	this2.x = 0.0;
	this2.y = 0.0;
	this2.z = -1.0;
	this._direction = this2;
};
minko_math_Ray.__name__ = true;
minko_math_Ray.createbyVector3 = function(origin,direction) {
	var ray = new minko_math_Ray();
	ray.setRay(origin,direction);
	return ray;
};
minko_math_Ray.create = function() {
	return new minko_math_Ray();
};
minko_math_Ray.prototype = {
	get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		return value;
	}
	,get_origin: function() {
		return this._origin;
	}
	,set_origin: function(value) {
		this._origin = value;
		return value;
	}
	,setRay: function(origin,direction) {
		this._origin = origin;
		this._direction = direction;
	}
	,__class__: minko_math_Ray
};
var minko_net_HTTPOptions = $hx_exports["minko"]["net"]["HTTPOptions"] = function() {
	minko_file_Options.call(this);
	this._username = "";
	this._password = "";
	this._additionalHeaders = [];
	this._verifyPeer = true;
};
minko_net_HTTPOptions.__name__ = true;
minko_net_HTTPOptions.create = function() {
	var instance = new minko_net_HTTPOptions();
	instance.initialize();
	return instance;
};
minko_net_HTTPOptions.createbyOptions = function(copy) {
	var instance = new minko_net_HTTPOptions().copyFrom(copy);
	instance.initialize();
	return instance;
};
minko_net_HTTPOptions.__super__ = minko_file_Options;
minko_net_HTTPOptions.prototype = $extend(minko_file_Options.prototype,{
	get_username: function() {
		return this._username;
	}
	,set_username: function(v) {
		this._username = v;
		return v;
	}
	,get_password: function() {
		return this._password;
	}
	,set_password: function(v) {
		this._password = v;
		return v;
	}
	,get_additionalHeaders: function() {
		return this._additionalHeaders;
	}
	,get_verifyPeer: function() {
		return this._verifyPeer;
	}
	,set_verifyPeer: function(v) {
		this._verifyPeer = v;
		return v;
	}
	,copyFrom: function(copy) {
		minko_file_Options.prototype.copyFrom.call(this,copy);
		this._username = (js_Boot.__cast(copy , minko_net_HTTPOptions))._username;
		this._password = (js_Boot.__cast(copy , minko_net_HTTPOptions))._password;
		this._additionalHeaders = (js_Boot.__cast(copy , minko_net_HTTPOptions))._additionalHeaders;
		this._verifyPeer = (js_Boot.__cast(copy , minko_net_HTTPOptions))._verifyPeer;
		return this;
	}
	,clone: function() {
		var copy = new minko_net_HTTPOptions().copyFrom(this);
		copy.initialize();
		return copy;
	}
	,__class__: minko_net_HTTPOptions
});
var minko_net_WebHTTPProtocol = $hx_exports["minko"]["net"]["WebHTTPProtocol"] = function() {
	minko_file_AbstractProtocol.call(this);
	this._status = 0;
};
minko_net_WebHTTPProtocol.__name__ = true;
minko_net_WebHTTPProtocol.create = function() {
	return new minko_net_WebHTTPProtocol();
};
minko_net_WebHTTPProtocol.__super__ = minko_file_AbstractProtocol;
minko_net_WebHTTPProtocol.prototype = $extend(minko_file_AbstractProtocol.prototype,{
	wget2CompleteHandler: function(id,arg,data,size) {
		arg.completeHandler(data);
	}
	,wget2ErrorHandler: function(id,arg,code,message) {
		arg.errorHandler(code,message);
	}
	,wget2ProgressHandler: function(id,arg,loadedBytes,totalBytes) {
		arg.progressHandler(loadedBytes,totalBytes);
	}
	,load: function() {
		minko_net_WebHTTPProtocol._httpProtocolReferences.push(this);
		this._options.set_protocolFunction(function(filename) {
			return function() {
				return new minko_net_WebHTTPProtocol();
			};
		});
		this.get_progress().execute(this,0.0);
		var username = null;
		var password = null;
		var additionalHeaders = [];
		var verifyPeer = true;
		if(js_Boot.__instanceof(this._options,minko_net_HTTPOptions)) {
			var httpOptions = js_Boot.__cast(this._options , minko_net_HTTPOptions);
			username = haxe_io_Bytes.ofString(httpOptions.get_username());
			password = haxe_io_Bytes.ofString(httpOptions.get_password());
			additionalHeaders = httpOptions.get_additionalHeaders();
			verifyPeer = httpOptions.get_verifyPeer();
		}
		var seekingOffset = this._options.get_seekingOffset();
		var seekedLength = this._options.get_seekedLength();
		if(seekingOffset >= 0 && seekedLength > 0) {
			var rangeMin = seekingOffset == null ? "null" : "" + seekingOffset;
			var rangeMax = Std.string(seekingOffset + seekedLength - 1);
			additionalHeaders.push(new minko_Tuple("Range","bytes=" + rangeMin + "-" + rangeMax));
		}
		if(this.get_options().get_loadAsynchronously()) {
			var additionalHeadersJsonString = "";
			if(additionalHeaders.length != 0) {
				var additionalHeaderCount = 0;
				additionalHeadersJsonString += "{ ";
				var _g = 0;
				while(_g < additionalHeaders.length) {
					var additionalHeader = additionalHeaders[_g];
					++_g;
					additionalHeadersJsonString += "\"" + additionalHeader.first + "\" : \"" + additionalHeader.second + "\"";
					if(additionalHeaderCount < additionalHeaders.length - 1) {
						additionalHeadersJsonString += ", ";
					}
					++additionalHeaderCount;
				}
				additionalHeadersJsonString += " }";
			}
			this._handle = minko_net_EmscriptenAsync.emscripten_async_wget3_data(this.get_resolvedFilename(),"GET","",additionalHeadersJsonString,this,true,$bind(this,this.wget2CompleteHandler),$bind(this,this.wget2ErrorHandler),$bind(this,this.wget2ProgressHandler));
		} else {
			var xhr = new XMLHttpRequest();
			xhr.open("GET",this.get_resolvedFilename(),false);
			xhr.overrideMimeType("text/plain; charset=x-user-defined");
			var _g1 = 0;
			while(_g1 < additionalHeaders.length) {
				var additionalHeader1 = additionalHeaders[_g1];
				++_g1;
				xhr.setRequestHeader(additionalHeader1.first,additionalHeader1.second);
			}
			xhr.send(null);
			var size = -1;
			var bytes = null;
			if(xhr.readyState == 4 && xhr.status == 0 || (xhr.status == 200 || xhr.status == 206)) {
				var array = new Uint8Array(xhr.responseText.length);
				var _g11 = 0;
				var _g2 = xhr.responseText.length;
				while(_g11 < _g2) {
					var i = _g11++;
					array[i] = HxOverrides.cca(xhr.responseText,i) & 255;
				}
				bytes = haxe_io_Bytes.ofData(array.buffer);
				size = xhr.responseText.length;
			} else {
				size = -1;
			}
			if(size >= 0) {
				this.completeHandler(bytes);
			} else {
				this.errorHandler(0,"");
			}
		}
	}
	,fileExists: function(filename) {
		var username = "";
		var password = "";
		var additionalHeaders = [];
		var verifyPeer = true;
		if(js_Boot.__instanceof(this._options,minko_net_HTTPOptions)) {
			var httpOptions = this._options;
			username = httpOptions.get_username();
			password = httpOptions.get_password();
			additionalHeaders = httpOptions.get_additionalHeaders();
			verifyPeer = httpOptions.get_verifyPeer();
		}
		additionalHeaders.push(new minko_Tuple("Access-Control-Allow-Methods","GET, POST,PUT"));
		var xhr = new XMLHttpRequest();
		xhr.open("HEAD",filename,false);
		if(additionalHeaders != null) {
			var _g = 0;
			while(_g < additionalHeaders.length) {
				var additionalHeader = additionalHeaders[_g];
				++_g;
				if(additionalHeader.first == "") {
					continue;
				}
				xhr.setRequestHeader(additionalHeader.first,additionalHeader.second);
			}
		}
		try {
			xhr.send(null);
		} catch( e ) {
			return false;
		}
		var status = xhr.status;
		if(!(xhr.readyState == 4 && xhr.status == 0)) {
			if(status >= 200) {
				return status < 300;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isAbsolutePath: function(filename) {
		return filename.indexOf("://") != -1;
	}
	,completeHandler: function(data) {
		if(this._status == 1) {
			return;
		}
		this.set_data(data);
		this.get_progress().execute(this,1.0);
		this.get_complete().execute(this);
		HxOverrides.remove(minko_net_WebHTTPProtocol._httpProtocolReferences,this);
	}
	,errorHandler: function(code,message) {
		if(message == null) {
			message = "";
		}
		this.get_error().execute(this,message);
		HxOverrides.remove(minko_net_WebHTTPProtocol._httpProtocolReferences,this);
	}
	,progressHandler: function(loadedBytes,totalBytes) {
		if(this._status == 1) {
			return;
		}
		var progress = 0.0;
		if(totalBytes != 0) {
			progress = loadedBytes / totalBytes;
		}
		if(this.get_options().get_fileStatusFunction() != null) {
			var fileStatus = (this.get_options().get_fileStatusFunction())(this.get_file(),progress);
			if(fileStatus == 1) {
				this._status = 1;
				minko_net_EmscriptenAsync.emscripten_async_wget2_abort(this._handle);
				this.get_error().execute(this,"");
				return;
			}
		}
		this.get_progress().execute(this,progress);
	}
	,__class__: minko_net_WebHTTPProtocol
});
var minko_net_EmscriptenAsync = function() { };
minko_net_EmscriptenAsync.__name__ = true;
minko_net_EmscriptenAsync.getNextWgetRequestHandle = function() {
	var a = minko_net_EmscriptenAsync.nextWgetRequestHandle;
	minko_net_EmscriptenAsync.nextWgetRequestHandle++;
	return a;
};
minko_net_EmscriptenAsync.emscripten_async_wget2_abort = function(handle) {
	var http = minko_net_EmscriptenAsync.wgetRequests.h[handle];
	if(http != null) {
		http.abort();
	}
};
minko_net_EmscriptenAsync.emscripten_async_wget3_data = function(url,request,param,additionalHeader,arg,free,onload,onerror,onprogress) {
	var _url = url;
	var _request = request;
	var _param = param;
	var http = new XMLHttpRequest();
	http.open(_request,_url,true);
	http.responseType = "arraybuffer";
	var handle = minko_net_EmscriptenAsync.getNextWgetRequestHandle();
	var http_onload = function(e) {
		if(http.status == 200 || http.status == 206 || HxOverrides.substr(_url,0,4).toLowerCase() != "http") {
			var byteArray = new Uint8Array(http.response);
			var buffer = haxe_io_Bytes.ofData(byteArray.buffer);
			if(onload != null) {
				onload(handle,arg,buffer,byteArray.length);
			}
			if(free) {
				buffer = null;
			}
		} else if(onerror != null) {
			onerror(handle,arg,http.status,http.statusText);
		}
		minko_net_EmscriptenAsync.wgetRequests.remove(handle);
	};
	http.onload = http_onload;
	var http_onerror = function(e1) {
		if(onerror != null) {
			onerror(handle,arg,http.status,http.statusText);
		}
		minko_net_EmscriptenAsync.wgetRequests.remove(handle);
	};
	http.onerror = http_onerror;
	var http_onprogress = function(e2) {
		if(onprogress != null) {
			onprogress(handle,arg,e2.loaded,e2.lengthComputable || e2.lengthComputable == null ? e2.total : 0);
		}
	};
	http.onprogress = http_onprogress;
	var http_onabort = function(e3) {
		minko_net_EmscriptenAsync.wgetRequests.remove(handle);
	};
	http.onabort = http_onabort;
	if(additionalHeader != "") {
		var additionalHeaderObject = JSON.parse(additionalHeader);
		var _g = 0;
		var _g1 = Reflect.fields(additionalHeaderObject);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			var tmp = Reflect.field(additionalHeaderObject,entry);
			http.setRequestHeader(entry,tmp);
		}
	}
	if(_request == "POST") {
		http.setRequestHeader("Content-type","application/x-www-form-urlencoded");
		http.setRequestHeader("Content-length",_param.length == null ? "null" : "" + _param.length);
		http.setRequestHeader("Connection","close");
		http.send(_param);
	} else {
		http.send(null);
	}
	minko_net_EmscriptenAsync.wgetRequests.h[handle] = http;
	return handle;
};
var minko_render_AbstractContext = $hx_exports["minko"]["render"]["AbstractContext"] = function() {
};
minko_render_AbstractContext.__name__ = true;
minko_render_AbstractContext.prototype = {
	dispose: function() {
	}
	,get_errorsEnabled: function() {
		return false;
	}
	,set_errorsEnabled: function(errors) {
		return errors;
	}
	,get_driverInfo: function() {
		return "";
	}
	,get_renderTarget: function() {
		return -1;
	}
	,get_viewportWidth: function() {
		return -1;
	}
	,get_viewportHeight: function() {
		return -1;
	}
	,get_currentProgram: function() {
		return -1;
	}
	,configureViewport: function(x,y,width,height) {
	}
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = -1;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 0.0;
		}
		if(blue == null) {
			blue = 0.0;
		}
		if(green == null) {
			green = 0.0;
		}
		if(red == null) {
			red = 0.0;
		}
	}
	,present: function() {
	}
	,drawIndexBufferTriangles: function(indexBuffer,firstIndex,numTriangles) {
	}
	,drawTriangles: function(firstIndex,numTriangles) {
	}
	,createVertexBuffer: function(size) {
		return -1;
	}
	,setVertexBufferAt: function(position,vertexBuffer,size,stride,offset) {
	}
	,uploadVertexBufferData: function(vertexBuffer,offset,size,data) {
	}
	,deleteVertexBuffer: function(vertexBuffer) {
	}
	,createIndexBuffer: function(size) {
		return -1;
	}
	,uploaderIndexBufferData: function(indexBuffer,offset,size,data) {
	}
	,deleteIndexBuffer: function(indexBuffer) {
	}
	,createTexture: function(type,width,height,mipMapping,optimizeForRenderToTexture,assertPowerOfTwoSized) {
		if(assertPowerOfTwoSized == null) {
			assertPowerOfTwoSized = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		return -1;
	}
	,createRectangleTexture: function(type,width,height) {
		return -1;
	}
	,createCompressedTexture: function(type,format,width,height,mipMapping) {
		return -1;
	}
	,uploadTexture2dData: function(texture,width,height,mipLevel,data) {
	}
	,uploadCubeTextureData: function(texture,face,width,height,mipLevel,data) {
	}
	,uploadCompressedTexture2dData: function(texture,format,width,height,size,mipLevel,data) {
	}
	,uploadCompressedCubeTextureData: function(texture,face,format,width,height,mipLevel,data) {
	}
	,activateMipMapping: function(texture) {
	}
	,deleteTexture: function(texture) {
	}
	,setTextureAt: function(position,texture,location) {
		if(location == null) {
			location = -1;
		}
	}
	,setSamplerStateAt: function(position,wrapping,filtering,mipFiltering) {
	}
	,createProgram: function() {
		return -1;
	}
	,attachShader: function(program,shader) {
	}
	,linkProgram: function(program) {
	}
	,deleteProgram: function(program) {
	}
	,setProgram: function(program) {
	}
	,compileShader: function(shader) {
	}
	,setShaderSource: function(shader,source) {
	}
	,createVertexShader: function() {
		return -1;
	}
	,deleteVertexShader: function(vertexShader) {
	}
	,createFragmentShader: function() {
		return -1;
	}
	,deleteFragmentShader: function(fragmentShader) {
	}
	,getProgramInputs: function(program) {
		return null;
	}
	,setBlendingModeSD: function(source,destination) {
	}
	,setBlendingMode: function(blendMode) {
	}
	,setColorMask: function(NamelessParameter) {
	}
	,setDepthTest: function(depthMask,depthFunc) {
	}
	,setStencilTest: function(stencilFunc,stencilRef,stencilMask,stencilFailOp,stencilZFailOp,stencilZPassOp) {
	}
	,setScissorTest: function(scissorTest,NamelessParameter2) {
	}
	,readPixels: function(pixels) {
	}
	,readRectPixels: function(x,y,width,height,pixels) {
	}
	,setTriangleCulling: function(triangleCulling) {
	}
	,setRenderToBackBuffer: function() {
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
	}
	,generateMipmaps: function(texture) {
	}
	,setUniformFloat: function(location,count,v) {
	}
	,setUniformFloat2: function(location,count,v) {
	}
	,setUniformFloat3: function(location,count,v) {
	}
	,setUniformFloat4: function(location,count,v) {
	}
	,setUniformMatrix4x4: function(location,count,v) {
	}
	,setUniformInt: function(location,count,v) {
	}
	,setUniformInt2: function(location,count,v) {
	}
	,setUniformInt3: function(location,count,v) {
	}
	,setUniformInt4: function(location,count,v) {
	}
	,createVertexAttributeArray: function() {
		return -1;
	}
	,setVertexAttributeArray: function(vertexArray) {
	}
	,__class__: minko_render_AbstractContext
};
var minko_render_AbstractResource = $hx_exports["minko"]["render"]["AbstractResource"] = function(context) {
	this._uuid = minko_Uuid.getUuid();
	this._context = context;
	this._id = -1;
};
minko_render_AbstractResource.__name__ = true;
minko_render_AbstractResource.prototype = {
	get_uuid: function() {
		return this._uuid;
	}
	,get_context: function() {
		return this._context;
	}
	,set_id: function(v) {
		this._id = v;
		return this._id;
	}
	,get_id: function() {
		if(this._id == -1) {
			throw new js__$Boot_HaxeError("");
		}
		return this._id;
	}
	,get_isReady: function() {
		return this._id != -1;
	}
	,dispose: function() {
	}
	,upload: function() {
	}
	,__class__: minko_render_AbstractResource
};
var minko_render_AbstractTexture = $hx_exports["minko"]["render"]["AbstractTexture"] = function(type,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename) {
	this.MAX_SIZE = 4096;
	minko_render_AbstractResource.call(this,context);
	this._sampler = new minko_render_TextureSampler(this.get_uuid(),this._id);
	this._type = type;
	this._format = format;
	this._width = width;
	this._height = height;
	var x = width;
	--x;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	this._widthGPU = Math.floor(Math.min(x + 1,this.MAX_SIZE));
	var x1 = height;
	--x1;
	x1 |= x1 >> 1;
	x1 |= x1 >> 2;
	x1 |= x1 >> 4;
	x1 |= x1 >> 8;
	x1 |= x1 >> 16;
	this._heightGPU = Math.floor(Math.min(x1 + 1,this.MAX_SIZE));
	this._mipMapping = mipMapping;
	this._resizeSmoothly = resizeSmoothly;
	this._optimizeForRenderToTexture = optimizeForRenderToTexture;
	this._filename = filename;
};
minko_render_AbstractTexture.__name__ = true;
minko_render_AbstractTexture.__super__ = minko_render_AbstractResource;
minko_render_AbstractTexture.prototype = $extend(minko_render_AbstractResource.prototype,{
	get_sampler: function() {
		return this._sampler;
	}
	,set_id: function(v) {
		this._id = v;
		this._sampler.id = v;
		return this._id;
	}
	,get_type: function() {
		return this._type;
	}
	,get_format: function() {
		return this._format;
	}
	,get_width: function() {
		return this._widthGPU;
	}
	,get_height: function() {
		return this._heightGPU;
	}
	,get_originalWidth: function() {
		return this._width;
	}
	,get_originalHeight: function() {
		return this._height;
	}
	,get_mipMapping: function() {
		return this._mipMapping;
	}
	,activateMipMapping: function() {
		if(this._mipMapping) {
			return;
		}
		this._mipMapping = true;
		this._context.activateMipMapping(this._id);
	}
	,get_optimizeForRenderToTexture: function() {
		return this._optimizeForRenderToTexture;
	}
	,resize: function(width,height,resizeSmoothly) {
	}
	,disposeData: function() {
	}
	,resizeData: function(width,height,data,newWidth,newHeight,resizeSmoothly) {
		var newData = null;
		if(newWidth == 0 || newHeight == 0) {
			return data;
		}
		if(newWidth == width && newHeight == height) {
			newData = new haxe_io_Bytes(new ArrayBuffer(width * height * 4));
			newData.blit(0,data,0,width * height * 4);
			return data;
		}
		var size = newWidth * newHeight * 4;
		var xFactor = (width - 1.0) / (newWidth - 1.0);
		var yFactor = (height - 1.0) / (newHeight - 1.0);
		newData = new haxe_io_Bytes(new ArrayBuffer(size));
		var idx = 0;
		var y = 0.0;
		var _g1 = 0;
		var _g = newHeight;
		while(_g1 < _g) {
			var q = _g1++;
			var j = Math.floor(y);
			var dy = y - j;
			if(j >= height) {
				j = height - 1;
			}
			var x = 0.0;
			var _g3 = 0;
			var _g2 = newWidth;
			while(_g3 < _g2) {
				var p = _g3++;
				var i = Math.floor(x);
				if(i >= width) {
					i = width - 1;
				}
				var ijTL = i + width * j << 2;
				if(resizeSmoothly) {
					var dx = x - i;
					var dxy = dx * dy;
					var ijTR = i < width - 1 ? ijTL + 4 : ijTL;
					var ijBL = j < height - 1 ? ijTL + (width << 2) : ijTL;
					var ijBR = i < width - 1 && j < height - 1 ? ijTL + (width + 1 << 2) : ijTL;
					var wTL = 1.0 - dx - dy + dxy;
					var wTR = dx - dxy;
					var wBL = dy - dxy;
					var wBR = dxy;
					var _g4 = 0;
					while(_g4 < 4) {
						var k = _g4++;
						var color = wTL * data.b[ijTL + k] + wTR * data.b[ijTR + k] + wBL * data.b[ijBL + k] + wBR * data.b[ijBR + k];
						newData.b[idx + k] = Math.floor(color) & 255;
					}
				} else {
					var _g41 = 0;
					while(_g41 < 4) {
						var k1 = _g41++;
						newData.b[idx + k1] = data.b[ijTL + k1] & 255;
					}
				}
				idx += 4;
				x += xFactor;
			}
			y += yFactor;
		}
		return newData;
	}
	,getMipmapWidth: function(level) {
		var tmp = this._widthGPU;
		var p = 0;
		while(tmp >= 1) {
			++p;
			tmp >>= 1;
		}
		var p1 = p;
		return 1 << p1 - level;
	}
	,getMipmapHeight: function(level) {
		var tmp = this._heightGPU;
		var p = 0;
		while(tmp >= 1) {
			++p;
			tmp >>= 1;
		}
		var p1 = p;
		return 1 << p1 - level;
	}
	,__class__: minko_render_AbstractTexture
});
var minko_render_CubeTexture = $hx_exports["minko"]["render"]["CubeTexture"] = function(context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename) {
	if(filename == null) {
		filename = "";
	}
	if(resizeSmoothly == null) {
		resizeSmoothly = true;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	if(format == null) {
		format = 1;
	}
	minko_render_AbstractTexture.call(this,1,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
	this._data = [];
	var x = width;
	--x;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	this._widthGPU = Math.floor(Math.min(x + 1,this.MAX_SIZE));
	var x1 = height;
	--x1;
	x1 |= x1 >> 1;
	x1 |= x1 >> 2;
	x1 |= x1 >> 4;
	x1 |= x1 >> 8;
	x1 |= x1 >> 16;
	this._heightGPU = Math.floor(Math.min(x1 + 1,this.MAX_SIZE));
};
minko_render_CubeTexture.__name__ = true;
minko_render_CubeTexture.create = function(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename) {
	if(filename == null) {
		filename = "";
	}
	if(format == null) {
		format = 1;
	}
	if(resizeSmoothly == null) {
		resizeSmoothly = true;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	return new minko_render_CubeTexture(context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
};
minko_render_CubeTexture.__super__ = minko_render_AbstractTexture;
minko_render_CubeTexture.prototype = $extend(minko_render_AbstractTexture.prototype,{
	setData: function(data,face,widthGPU,heightGPU) {
		if(heightGPU == null) {
			heightGPU = -1;
		}
		if(widthGPU == null) {
			widthGPU = -1;
		}
		this._data[face] = this.resizeData(this._width,this._height,data,this._widthGPU,this._heightGPU,this._resizeSmoothly);
	}
	,resize: function(width,height,resizeSmoothly) {
		var previousWidth = this.get_width();
		var previousHeight = this.get_height();
		var _g = 0;
		while(_g < 6) {
			var faceId = _g++;
			var previousData = this._data[faceId];
			this._data[faceId] = this.resizeData(previousWidth,previousHeight,previousData,width,height,resizeSmoothly);
		}
		this._width = width << 2;
		this._widthGPU = width;
		this._height = height * 3;
		this._heightGPU = height;
	}
	,uploadMipLevel: function(level,data,face) {
		var width = this._widthGPU >> level;
		var height = this._heightGPU >> level;
		this._context.uploadCubeTextureData(this._id,face,width,height,level,data);
	}
	,upload: function() {
		if(this._id == -1) {
			this.set_id(this._context.createTexture(this._type,this._widthGPU,this._heightGPU,this._mipMapping,this._optimizeForRenderToTexture));
		}
		var numFacePixels = this._widthGPU * this._heightGPU;
		if(numFacePixels == 0) {
			return;
		}
		var _g = 0;
		while(_g < 6) {
			var faceId = _g++;
			var faceData = this._data[faceId];
			var face = faceId;
			this._context.uploadCubeTextureData(this._id,face,this._widthGPU,this._heightGPU,0,faceData);
		}
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteTexture(this._id);
			this.set_id(-1);
		}
		this.disposeData();
	}
	,disposeData: function() {
		var _g = 0;
		var _g1 = this._data;
		while(_g < _g1.length) {
			var face = _g1[_g];
			++_g;
		}
		this._data = null;
	}
	,__class__: minko_render_CubeTexture
});
var minko_render_UniformValue = $hx_exports["minko"]["render"]["UniformValue"] = function(location,size,count,dataArray) {
	this.location = location;
	this.size = size;
	this.count = count;
	this.dataArray = dataArray;
};
minko_render_UniformValue.__name__ = true;
minko_render_UniformValue.vecInts1 = function(dataValue) {
	return [dataValue];
};
minko_render_UniformValue.vecInts2 = function(dataValue) {
	return [dataValue.x,dataValue.y].map(function(v) {
		return Math.floor(v);
	});
};
minko_render_UniformValue.vecInts3 = function(dataValue) {
	return [dataValue.x,dataValue.y,dataValue.z].map(function(v) {
		return Math.floor(v);
	});
};
minko_render_UniformValue.vecInts4 = function(dataValue) {
	return [dataValue.x,dataValue.y,dataValue.z,dataValue.w].map(function(v) {
		return Math.floor(v);
	});
};
minko_render_UniformValue.vecFloats1 = function(dataValue) {
	return [dataValue];
};
minko_render_UniformValue.vecFloats2 = function(dataValue) {
	return [dataValue.x,dataValue.y];
};
minko_render_UniformValue.vecFloats3 = function(dataValue) {
	return [dataValue.x,dataValue.y,dataValue.z];
};
minko_render_UniformValue.vecFloats4 = function(dataValue) {
	return [dataValue.x,dataValue.y,dataValue.z,dataValue.w];
};
minko_render_UniformValue.matFloats = function(dataValue) {
	return [dataValue._00,dataValue._01,dataValue._02,dataValue._03,dataValue._10,dataValue._11,dataValue._12,dataValue._13,dataValue._20,dataValue._21,dataValue._22,dataValue._23,dataValue._30,dataValue._31,dataValue._32,dataValue._33];
};
minko_render_UniformValue.vecsInts1 = function(dataValue) {
	return dataValue;
};
minko_render_UniformValue.vecsInts2 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecInts2(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsInts3 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecInts3(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsInts4 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecInts4(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsFloats1 = function(dataValue) {
	return dataValue;
};
minko_render_UniformValue.vecsFloats2 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecFloats2(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsFloats3 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecFloats3(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsFloats4 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecFloats4(d));
	}
	return tmp;
};
minko_render_UniformValue.matsFloats = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.matFloats(d));
	}
	return tmp;
};
minko_render_UniformValue.prototype = {
	__class__: minko_render_UniformValue
};
var minko_render_SamplerValue = $hx_exports["minko"]["render"]["SamplerValue"] = function(position,sampler,location) {
	this.position = position;
	this.location = location;
	this.sampler = sampler;
};
minko_render_SamplerValue.__name__ = true;
minko_render_SamplerValue.prototype = {
	__class__: minko_render_SamplerValue
};
var minko_render_AttributeValue = $hx_exports["minko"]["render"]["AttributeValue"] = function(location,resourceId,size,vertexSize,offset) {
	this.location = location;
	this.resourceId = resourceId;
	this.size = size;
	this.stride = vertexSize;
	this.offset = offset;
};
minko_render_AttributeValue.__name__ = true;
minko_render_AttributeValue.prototype = {
	__class__: minko_render_AttributeValue
};
var minko_render_DrawCall = $hx_exports["minko"]["render"]["DrawCall"] = function(batchId,pass,variables,rootData,rendererData,targetData) {
	this._enabled = true;
	this._pass = pass;
	this._rootData = rootData;
	this._rendererData = rendererData;
	this._targetData = targetData;
	this._variables = variables;
	this._indexBuffer = null;
	this._firstIndex = null;
	this._numIndices = null;
	this._priority = minko_render_States.DEFAULT_PRIORITY;
	this._zSorted = false;
	this._blendingSourceFactor = 2;
	this._blendingDestinationFactor = 256;
	this._colorMask = true;
	this._depthMask = true;
	this._depthFunc = 4;
	this._triangleCulling = 2;
	this._stencilFunction = 0;
	this._stencilReference = 0;
	this._stencilMask = 1;
	this._stencilFailOp = 0;
	this._stencilZFailOp = 0;
	this._stencilZPassOp = 0;
	this._scissorTest = false;
	this._scissorBox = minko_render_States.DEFAULT_SCISSOR_BOX;
	this._target = minko_render_States.DEFAULT_TARGET;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this._centerPosition = this1;
	this._modelToWorldMatrix = null;
	this._worldToScreenMatrix = null;
	this._modelToWorldMatrixPropertyRemovedSlot = null;
	this._worldToScreenMatrixPropertyRemovedSlot = null;
	this._vertexAttribArray = 0;
	this._batchIDs = [batchId];
	this._uniformFloat = [];
	this._uniformInt = [];
	this._uniformBool = [];
	this._samplers = [];
	this._attributes = [];
	this.bindPositionalMembers();
	minko_Enable_$uuid.call(this);
	this.enable_uuid();
};
minko_render_DrawCall.__name__ = true;
minko_render_DrawCall.setUniformValue = function(uniforms,location,size,count,dataArray,data) {
	var it = Lambda.find(uniforms,function(u) {
		return u.location == location;
	});
	if(it == null) {
		it = new minko_render_UniformValue(location,size,count,dataArray);
		uniforms.push(it);
	} else {
		it.dataArray = dataArray;
	}
	it.data = data;
};
minko_render_DrawCall.__super__ = minko_Enable_$uuid;
minko_render_DrawCall.prototype = $extend(minko_Enable_$uuid.prototype,{
	dispose: function() {
		this._pass = null;
		this._rootData = null;
		this._rendererData = null;
		this._targetData = null;
		this._variables = null;
		if(this._modelToWorldMatrixPropertyAddedSlot != null) {
			this._modelToWorldMatrixPropertyAddedSlot.dispose();
		}
		if(this._worldToScreenMatrixPropertyAddedSlot != null) {
			this._worldToScreenMatrixPropertyAddedSlot.dispose();
		}
		if(this._modelToWorldMatrixPropertyRemovedSlot != null) {
			this._modelToWorldMatrixPropertyRemovedSlot.dispose();
		}
		if(this._worldToScreenMatrixPropertyRemovedSlot != null) {
			this._worldToScreenMatrixPropertyRemovedSlot.dispose();
		}
		this._modelToWorldMatrixPropertyAddedSlot = null;
		this._worldToScreenMatrixPropertyAddedSlot = null;
		this._modelToWorldMatrixPropertyRemovedSlot = null;
		this._worldToScreenMatrixPropertyRemovedSlot = null;
	}
	,get_enabled: function() {
		return this._enabled;
	}
	,set_enabled: function(value) {
		this._enabled = value;
		return value;
	}
	,get_batchIDs: function() {
		return this._batchIDs;
	}
	,get_pass: function() {
		return this._pass;
	}
	,get_program: function() {
		return this._program;
	}
	,set_variables: function(v) {
		this._variables = v;
		return v;
	}
	,get_variables: function() {
		return this._variables;
	}
	,get_rootData: function() {
		return this._rootData;
	}
	,get_rendererData: function() {
		return this._rendererData;
	}
	,get_targetData: function() {
		return this._targetData;
	}
	,get_boundBoolUniforms: function() {
		return this._uniformBool;
	}
	,get_boundIntUniforms: function() {
		return this._uniformInt;
	}
	,get_boundFloatUniforms: function() {
		return this._uniformFloat;
	}
	,get_samplers: function() {
		return this._samplers;
	}
	,get_priority: function() {
		return this._priority;
	}
	,get_zSorted: function() {
		if(this._zSorted) {
			return this._zSorted;
		} else {
			return false;
		}
	}
	,get_blendingSource: function() {
		return this._blendingSourceFactor;
	}
	,get_blendingDestination: function() {
		return this._blendingDestinationFactor;
	}
	,get_colorMask: function() {
		return this._colorMask;
	}
	,get_depthMask: function() {
		return this._depthMask;
	}
	,get_depthFunction: function() {
		return this._depthFunc;
	}
	,get_triangleCulling: function() {
		return this._triangleCulling;
	}
	,get_stencilFunction: function() {
		return this._stencilFunction;
	}
	,get_stencilReference: function() {
		return this._stencilReference;
	}
	,get_stencilMask: function() {
		return this._stencilMask;
	}
	,get_stencilFailOperation: function() {
		return this._stencilFailOp;
	}
	,get_stencilZFailOperation: function() {
		return this._stencilZFailOp;
	}
	,get_stencilZPassOperation: function() {
		return this._stencilZPassOp;
	}
	,get_scissorTest: function() {
		return this._scissorTest;
	}
	,get_scissorBox: function() {
		return this._scissorBox;
	}
	,get_target: function() {
		return this._target;
	}
	,get_numTriangles: function() {
		if(this._numIndices != null) {
			return Math.floor(this._numIndices / 3);
		} else {
			return 0;
		}
	}
	,bind: function(program) {
		this.reset();
		this._program = program;
	}
	,render: function(context,renderTarget,viewport,clearColor) {
		if(!this.get_enabled()) {
			return;
		}
		context.setProgram(this._program.get_id());
		var hasOwnTarget = this._target != null && this._target.get_id() != 0;
		var renderTargetId = hasOwnTarget ? this._target.get_id() : renderTarget != null ? renderTarget.get_id() : 0;
		var targetChanged = false;
		if(renderTargetId != 0) {
			if(renderTargetId != context.get_renderTarget()) {
				context.setRenderToTexture(renderTargetId,true);
				if(hasOwnTarget) {
					context.clear((clearColor >> 24 & 255) / 255.0,(clearColor >> 16 & 255) / 255.0,(clearColor >> 8 & 255) / 255.0,(clearColor & 255) / 255.0);
				}
				targetChanged = true;
			}
		} else {
			context.setRenderToBackBuffer();
		}
		if(targetChanged && !hasOwnTarget && viewport.z >= 0 && viewport.w >= 0) {
			context.configureViewport(Math.floor(viewport.x),Math.floor(viewport.y),Math.floor(viewport.z),Math.floor(viewport.w));
		}
		var _g = 0;
		var _g1 = this._uniformBool;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.size == 1) {
				context.setUniformInt(u.location,u.count,u.dataArray);
			} else if(u.size == 2) {
				context.setUniformInt2(u.location,u.count,u.dataArray);
			} else if(u.size == 3) {
				context.setUniformInt3(u.location,u.count,u.dataArray);
			} else if(u.size == 4) {
				context.setUniformInt4(u.location,u.count,u.dataArray);
			}
		}
		var _g2 = 0;
		var _g11 = this._uniformInt;
		while(_g2 < _g11.length) {
			var u1 = _g11[_g2];
			++_g2;
			if(u1.size == 1) {
				context.setUniformInt(u1.location,u1.count,u1.dataArray);
			} else if(u1.size == 2) {
				context.setUniformInt2(u1.location,u1.count,u1.dataArray);
			} else if(u1.size == 3) {
				context.setUniformInt3(u1.location,u1.count,u1.dataArray);
			} else if(u1.size == 4) {
				context.setUniformInt4(u1.location,u1.count,u1.dataArray);
			}
		}
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var mvMatrix = this1;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var pMatrix = this2;
		var _g3 = 0;
		var _g12 = this._uniformFloat;
		while(_g3 < _g12.length) {
			var u2 = _g12[_g3];
			++_g3;
			if(u2.size == 1) {
				context.setUniformFloat(u2.location,u2.count,u2.dataArray);
			} else if(u2.size == 2) {
				context.setUniformFloat2(u2.location,u2.count,u2.dataArray);
			} else if(u2.size == 3) {
				context.setUniformFloat3(u2.location,u2.count,u2.dataArray);
			} else if(u2.size == 4) {
				context.setUniformFloat4(u2.location,u2.count,u2.dataArray);
			} else if(u2.size == 16) {
				context.setUniformMatrix4x4(u2.location,u2.count,u2.dataArray);
			}
		}
		var _g4 = 0;
		var _g13 = this._samplers;
		while(_g4 < _g13.length) {
			var s = _g13[_g4];
			++_g4;
			var ss = s.sampler;
			var sid = ss.id;
			context.setTextureAt(s.position,s.sampler.id,s.location);
			context.setSamplerStateAt(s.position,s.wrapMode,s.textureFilter,s.mipFilter);
		}
		var _g5 = 0;
		var _g14 = this._attributes;
		while(_g5 < _g14.length) {
			var a = _g14[_g5];
			++_g5;
			context.setVertexBufferAt(a.location,a.resourceId,a.size,a.stride,a.offset);
		}
		context.setColorMask(this._colorMask);
		context.setBlendingModeSD(this._blendingSourceFactor,this._blendingDestinationFactor);
		context.setDepthTest(this._depthMask,this._depthFunc);
		context.setStencilTest(this._stencilFunction,this._stencilReference,this._stencilMask,this._stencilFailOp,this._stencilZFailOp,this._stencilZPassOp);
		context.setScissorTest(this._scissorTest,this._scissorBox);
		context.setTriangleCulling(this._triangleCulling);
		if(!this._pass.get_isForward()) {
			context.drawTriangles(0,2);
		} else {
			context.drawIndexBufferTriangles(this._indexBuffer,this._firstIndex,Math.floor(this._numIndices / 3));
		}
	}
	,bindAttribute: function(input,attributeBindings,defaultValues) {
		var binding = this.resolveBinding(input.name,attributeBindings);
		if(binding == null) {
			if(!defaultValues.hasProperty(input.name)) {
				var it = Lambda.has(this._program.get_setAttributeNames(),input.name);
				if(it == false) {
					console.log("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
					throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
				}
				this.setAttributeValueFromStore(input,input.name,defaultValues);
			}
		} else {
			if(!binding.store.hasProperty(binding.propertyName)) {
				if(!defaultValues.hasProperty(input.name)) {
					console.log("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
					throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
				}
				this.setAttributeValueFromStore(input,input.name,defaultValues);
			} else {
				this.setAttributeValueFromStore(input,binding.propertyName,binding.store);
			}
			binding = null;
		}
	}
	,bindUniform: function(input,uniformBindings,defaultValues) {
		var binding = this.resolveBinding(input.name,uniformBindings);
		if(binding == null) {
			if(!defaultValues.hasProperty(input.name)) {
				var it = Lambda.has(this._program.get_setUniformNames(),input.name);
				if(it == false) {
					console.log("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
					throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
				}
			}
			this.setUniformValueFromStore(input,input.name,defaultValues);
		} else if(!binding.store.hasProperty(binding.propertyName)) {
			if(!defaultValues.hasProperty(input.name)) {
				console.log("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
				throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
			} else {
				this.setUniformValueFromStore(input,input.name,defaultValues);
			}
		} else {
			this.setUniformValueFromStore(input,binding.propertyName,binding.store);
		}
		return binding;
	}
	,bindSamplerStates: function(input,uniformBindings,defaultValues) {
		var wrapModeBinding = this.bindSamplerState(input,uniformBindings,defaultValues,"wrapMode");
		var textureFilterBinding = this.bindSamplerState(input,uniformBindings,defaultValues,"textureFilter");
		var mipFilterBinding = this.bindSamplerState(input,uniformBindings,defaultValues,"mipFilter");
		var samplerStatesResolveBindings = [wrapModeBinding,textureFilterBinding,mipFilterBinding];
		return samplerStatesResolveBindings;
	}
	,bindSamplerState: function(input,uniformBindings,defaultValues,samplerStateProperty) {
		if(samplerStateProperty == "wrapMode" || samplerStateProperty == "textureFilter" || samplerStateProperty == "mipFilter") {
			var samplerStateUniformName = minko_render_SamplerStates.uniformNameToSamplerStateName(input.name,samplerStateProperty);
			var binding = this.resolveBinding(samplerStateUniformName,uniformBindings);
			if(binding == null) {
				this.setSamplerStateValueFromStore(input,samplerStateUniformName,defaultValues,samplerStateProperty);
			} else if(!binding.store.hasProperty(binding.propertyName)) {
				this.setSamplerStateValueFromStore(input,samplerStateUniformName,defaultValues,samplerStateProperty);
			} else {
				this.setSamplerStateValueFromStore(input,binding.propertyName,binding.store,samplerStateProperty);
			}
			return binding;
		}
		return null;
	}
	,bindStates: function(stateBindings,defaultValues) {
		var statesResolveBindings = [this.bindState("priority",stateBindings,defaultValues),this.bindState("zSorted",stateBindings,defaultValues),this.bindState("blendingSource",stateBindings,defaultValues),this.bindState("blendingDestination",stateBindings,defaultValues),this.bindState("colorMask",stateBindings,defaultValues),this.bindState("depthMask",stateBindings,defaultValues),this.bindState("depthFunction",stateBindings,defaultValues),this.bindState("triangleCulling",stateBindings,defaultValues),this.bindState("stencilFunction",stateBindings,defaultValues),this.bindState("stencilReference",stateBindings,defaultValues),this.bindState("stencilMask",stateBindings,defaultValues),this.bindState("stencilFailOperation",stateBindings,defaultValues),this.bindState("stencilZFailOperation",stateBindings,defaultValues),this.bindState("stencilZPassOperation",stateBindings,defaultValues),this.bindState("scissorTest",stateBindings,defaultValues),this.bindState("scissorBox",stateBindings,defaultValues),this.bindState("target",stateBindings,defaultValues)];
		return statesResolveBindings;
	}
	,bindState: function(stateName,bindings,defaultValues) {
		var binding = this.resolveBinding(stateName,bindings);
		if(binding == null) {
			this.setStateValueFromStore(stateName,defaultValues);
		} else if(!binding.store.hasProperty(binding.propertyName)) {
			this.setStateValueFromStore(stateName,defaultValues);
		} else {
			this.setStateValueFromStore(stateName,binding.store);
		}
		return binding;
	}
	,bindPositionalMembers: function() {
		var _gthis = this;
		if(this._targetData.hasProperty("centerPosition")) {
			this._centerPosition = this._targetData.get("centerPosition");
		}
		if(this._targetData.hasProperty("modelToWorldMatrix")) {
			this._modelToWorldMatrix = this._targetData.get("modelToWorldMatrix");
		} else {
			this._modelToWorldMatrixPropertyAddedSlot = this._targetData.getPropertyAdded("modelToWorldMatrix").connect(function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
				_gthis._modelToWorldMatrix = _gthis._targetData.get("modelToWorldMatrix");
			});
		}
		if(this._rendererData.hasProperty("worldToScreenMatrix")) {
			this._worldToScreenMatrix = this._rendererData.get("worldToScreenMatrix");
		} else {
			this._worldToScreenMatrixPropertyAddedSlot = this._rendererData.getPropertyAdded("worldToScreenMatrix").connect(function(store,data,UnnamedParameter11) {
				_gthis._worldToScreenMatrix = _gthis._rendererData.get("worldToScreenMatrix");
			});
		}
		this._modelToWorldMatrixPropertyRemovedSlot = this._targetData.getPropertyRemoved("modelToWorldMatrix").connect(function(UnnamedParameter12,UnnamedParameter21,UnnamedParameter31) {
			_gthis._modelToWorldMatrix = null;
		});
		this._worldToScreenMatrixPropertyRemovedSlot = this._rendererData.getPropertyRemoved("worldToScreenMatrix").connect(function(store1,data1,UnnamedParameter13) {
			_gthis._worldToScreenMatrix = null;
		});
	}
	,bindIndexBuffer: function() {
		var indexBufferProperty = minko_data_Store.getActualPropertyName(this._variables,"geometry[@{geometryUuid}].indices");
		if(this._targetData.hasProperty(indexBufferProperty)) {
			this._indexBuffer = this._targetData.get(indexBufferProperty);
		}
		var surfaceFirstIndexProperty = minko_data_Store.getActualPropertyName(this._variables,"surface[@{surfaceUuid}].firstIndex");
		if(!this._targetData.hasProperty(surfaceFirstIndexProperty)) {
			var geometryFirstIndexProperty = minko_data_Store.getActualPropertyName(this._variables,"geometry[@{geometryUuid}].firstIndex");
			if(this._targetData.hasProperty(geometryFirstIndexProperty)) {
				this._firstIndex = this._targetData.get(geometryFirstIndexProperty);
			}
		} else {
			this._firstIndex = this._targetData.get(surfaceFirstIndexProperty);
		}
		var surfaceNumIndicesProperty = minko_data_Store.getActualPropertyName(this._variables,"surface[@{surfaceUuid}].numIndices");
		if(!this._targetData.hasProperty(surfaceNumIndicesProperty)) {
			var geometryNumIndicesProperty = minko_data_Store.getActualPropertyName(this._variables,"geometry[@{geometryUuid}].numIndices");
			if(this._targetData.hasProperty(geometryNumIndicesProperty)) {
				this._numIndices = this._targetData.get(geometryNumIndicesProperty);
			}
		} else {
			this._numIndices = this._targetData.get(surfaceNumIndicesProperty);
		}
	}
	,getEyeSpacePosition: function() {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var modelView = this1;
		if(this._modelToWorldMatrix != null) {
			modelView = this._modelToWorldMatrix;
		}
		if(this._worldToScreenMatrix != null) {
			var a = this._worldToScreenMatrix;
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest = this2;
			var _a;
			var _b;
			if(dest == a) {
				var this3 = new glm_Mat4Base();
				this3._00 = 0;
				this3._01 = 0;
				this3._02 = 0;
				this3._03 = 0;
				this3._10 = 0;
				this3._11 = 0;
				this3._12 = 0;
				this3._13 = 0;
				this3._20 = 0;
				this3._21 = 0;
				this3._22 = 0;
				this3._23 = 0;
				this3._30 = 0;
				this3._31 = 0;
				this3._32 = 0;
				this3._33 = 0;
				var dest1 = this3;
				dest1._00 = a._00;
				dest1._10 = a._10;
				dest1._20 = a._20;
				dest1._30 = a._30;
				dest1._01 = a._01;
				dest1._11 = a._11;
				dest1._21 = a._21;
				dest1._31 = a._31;
				dest1._02 = a._02;
				dest1._12 = a._12;
				dest1._22 = a._22;
				dest1._32 = a._32;
				dest1._03 = a._03;
				dest1._13 = a._13;
				dest1._23 = a._23;
				dest1._33 = a._33;
				_a = dest1;
				_b = modelView;
			} else if(dest == modelView) {
				_a = a;
				var this4 = new glm_Mat4Base();
				this4._00 = 0;
				this4._01 = 0;
				this4._02 = 0;
				this4._03 = 0;
				this4._10 = 0;
				this4._11 = 0;
				this4._12 = 0;
				this4._13 = 0;
				this4._20 = 0;
				this4._21 = 0;
				this4._22 = 0;
				this4._23 = 0;
				this4._30 = 0;
				this4._31 = 0;
				this4._32 = 0;
				this4._33 = 0;
				var dest2 = this4;
				dest2._00 = modelView._00;
				dest2._10 = modelView._10;
				dest2._20 = modelView._20;
				dest2._30 = modelView._30;
				dest2._01 = modelView._01;
				dest2._11 = modelView._11;
				dest2._21 = modelView._21;
				dest2._31 = modelView._31;
				dest2._02 = modelView._02;
				dest2._12 = modelView._12;
				dest2._22 = modelView._22;
				dest2._32 = modelView._32;
				dest2._03 = modelView._03;
				dest2._13 = modelView._13;
				dest2._23 = modelView._23;
				dest2._33 = modelView._33;
				_b = dest2;
			} else {
				_a = a;
				_b = modelView;
			}
			dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			modelView = dest;
		}
		var x = this._centerPosition.x;
		var y = this._centerPosition.y;
		var z = this._centerPosition.z;
		var this5 = new glm_Vec4Base();
		this5.x = x;
		this5.y = y;
		this5.z = z;
		this5.w = 1;
		var v = this5;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var dest3 = this6;
		var x1 = v.x;
		var y1 = v.y;
		var z1 = v.z;
		var w = v.w;
		dest3.x = modelView._00 * x1 + modelView._10 * y1 + modelView._20 * z1 + modelView._30 * w;
		dest3.y = modelView._01 * x1 + modelView._11 * y1 + modelView._21 * z1 + modelView._31 * w;
		dest3.z = modelView._02 * x1 + modelView._12 * y1 + modelView._22 * z1 + modelView._32 * w;
		dest3.w = modelView._03 * x1 + modelView._13 * y1 + modelView._23 * z1 + modelView._33 * w;
		var tmp = dest3;
		var x2 = tmp.x;
		var y2 = tmp.y;
		var z2 = tmp.z;
		var this7 = new glm_Vec3Base();
		this7.x = x2;
		this7.y = y2;
		this7.z = z2;
		return this7;
	}
	,initializeOnContext: function(context) {
	}
	,reset: function() {
		this._program = null;
		this._indexBuffer = null;
		this._firstIndex = null;
		this._numIndices = null;
		this._uniformFloat = [];
		this._uniformInt = [];
		this._uniformBool = [];
		this._samplers = [];
		this._attributes = [];
		this._vertexAttribArray = 0;
	}
	,getStore: function(source) {
		switch(source) {
		case 0:
			return this._targetData;
		case 1:
			return this._rendererData;
		case 2:
			return this._rootData;
		}
	}
	,resolveBinding: function(inputName,bindings) {
		var isCollection = false;
		var bindingName = inputName;
		var isArray = inputName.charAt(inputName.length - 1) == "]";
		var pos = bindingName.indexOf("[");
		if(!isArray && pos != -1) {
			bindingName = HxOverrides.substr(bindingName,0,pos);
			isCollection = true;
		}
		var binding = null;
		var bindingPropertyName = "";
		var tmp;
		if(!(__map_reserved[bindingName] != null ? bindings.existsReserved(bindingName) : bindings.h.hasOwnProperty(bindingName))) {
			if(!isArray) {
				var key = bindingName + "[0]";
				if(__map_reserved[key] != null) {
					tmp = bindings.existsReserved(key);
				} else {
					tmp = bindings.h.hasOwnProperty(key);
				}
			} else {
				tmp = false;
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			binding = __map_reserved[bindingName] != null ? bindings.getReserved(bindingName) : bindings.h[bindingName];
			bindingPropertyName = binding.propertyName;
		}
		if(binding == null) {
			return null;
		}
		var store = this.getStore(binding.source);
		var propertyName = minko_data_Store.getActualPropertyName(this._variables,bindingPropertyName);
		if(isCollection && !isArray) {
			propertyName += HxOverrides.substr(inputName,pos,null);
		}
		return new minko_data_ResolvedBinding(binding,propertyName,store);
	}
	,setUniformValueFromStore: function(input,propertyName,store) {
		var isArray = input.name.charAt(input.name.length - 1) == "]";
		var data = store.get(propertyName);
		if(isArray == false) {
			var _g = input.type;
			switch(_g) {
			case 1:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,1,input.size,minko_render_UniformValue.vecInts1(data),data);
				break;
			case 2:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,2,input.size,minko_render_UniformValue.vecInts2(data),data);
				break;
			case 3:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,3,input.size,minko_render_UniformValue.vecInts3(data),data);
				break;
			case 4:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,4,input.size,minko_render_UniformValue.vecInts4(data),data);
				break;
			case 5:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,1,input.size,minko_render_UniformValue.vecInts1(data),data);
				break;
			case 6:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,2,input.size,minko_render_UniformValue.vecInts2(data),data);
				break;
			case 7:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,3,input.size,minko_render_UniformValue.vecInts3(data),data);
				break;
			case 8:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,4,input.size,minko_render_UniformValue.vecInts4(data),data);
				break;
			case 9:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,1,input.size,minko_render_UniformValue.vecFloats1(data),data);
				break;
			case 10:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,2,input.size,minko_render_UniformValue.vecFloats2(data),data);
				break;
			case 11:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,3,input.size,minko_render_UniformValue.vecFloats3(data),data);
				break;
			case 12:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,4,input.size,minko_render_UniformValue.vecFloats4(data),data);
				break;
			case 0:case 13:
				console.log("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				throw new js__$Boot_HaxeError("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				break;
			case 14:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,16,input.size,minko_render_UniformValue.matFloats(data),data);
				break;
			case 15:case 16:
				var samplerIt = Lambda.find(this._samplers,function(samplerValue) {
					return samplerValue.location == input.location;
				});
				var texture = store.get(propertyName);
				if(samplerIt == null) {
					this._samplers.push(new minko_render_SamplerValue(this._program.get_setTextureNames().length + this._samplers.length,texture.get_sampler(),input.location));
				} else {
					samplerIt.sampler = texture.get_sampler();
				}
				break;
			}
		} else {
			var _g1 = input.type;
			switch(_g1) {
			case 1:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,1,input.size,minko_render_UniformValue.vecsInts1(data),data);
				break;
			case 2:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,2,input.size,minko_render_UniformValue.vecsInts2(data),data);
				break;
			case 3:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,3,input.size,minko_render_UniformValue.vecsInts3(data),data);
				break;
			case 4:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,4,input.size,minko_render_UniformValue.vecsInts4(data),data);
				break;
			case 5:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,1,input.size,minko_render_UniformValue.vecsInts1(data),data);
				break;
			case 6:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,2,input.size,minko_render_UniformValue.vecsInts2(data),data);
				break;
			case 7:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,3,input.size,minko_render_UniformValue.vecsInts3(data),data);
				break;
			case 8:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,4,input.size,minko_render_UniformValue.vecsInts4(data),data);
				break;
			case 9:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,1,input.size,minko_render_UniformValue.vecsFloats1(data),data);
				break;
			case 10:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,2,input.size,minko_render_UniformValue.vecsFloats2(data),data);
				break;
			case 11:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,3,input.size,minko_render_UniformValue.vecsFloats3(data),data);
				break;
			case 12:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,4,input.size,minko_render_UniformValue.vecsFloats4(data),data);
				break;
			case 0:case 13:
				console.log("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				throw new js__$Boot_HaxeError("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				break;
			case 14:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,16,input.size,minko_render_UniformValue.matsFloats(data),data);
				break;
			case 15:case 16:
				console.log("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				throw new js__$Boot_HaxeError("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				break;
			}
		}
	}
	,setSamplerStateValueFromStore: function(input,propertyName,store,samplerStateProperty) {
		var it = Lambda.find(this._samplers,function(sampler) {
			return sampler.location == input.location;
		});
		if(it != null) {
			var sampler1 = it;
			if(samplerStateProperty == "wrapMode") {
				if(store.hasProperty(propertyName)) {
					sampler1.wrapMode = store.get(propertyName);
				} else {
					sampler1.wrapMode = 0;
				}
			} else if(samplerStateProperty == "textureFilter") {
				if(store.hasProperty(propertyName)) {
					sampler1.textureFilter = store.get(propertyName);
				} else {
					sampler1.textureFilter = 0;
				}
			} else if(samplerStateProperty == "mipFilter") {
				if(store.hasProperty(propertyName)) {
					sampler1.mipFilter = store.get(propertyName);
				} else {
					sampler1.mipFilter = 0;
				}
			}
		}
	}
	,setStateValueFromStore: function(stateName,store) {
		if(stateName == "priority") {
			if(store.hasProperty(stateName)) {
				this._priority = store.get(stateName);
			} else {
				this._priority = minko_render_States.DEFAULT_PRIORITY;
			}
		} else if(stateName == "zSorted") {
			if(store.hasProperty(stateName)) {
				this._zSorted = store.get(stateName);
			} else {
				this._zSorted = false;
			}
		} else if(stateName == "blendingSource") {
			if(store.hasProperty(stateName)) {
				this._blendingSourceFactor = store.get(stateName);
			} else {
				this._blendingSourceFactor = 2;
			}
		} else if(stateName == "blendingDestination") {
			if(store.hasProperty(stateName)) {
				this._blendingDestinationFactor = store.get(stateName);
			} else {
				this._blendingDestinationFactor = 256;
			}
		} else if(stateName == "colorMask") {
			if(store.hasProperty(stateName)) {
				this._colorMask = store.get(stateName);
			} else {
				this._colorMask = true;
			}
		} else if(stateName == "depthMask") {
			if(store.hasProperty(stateName)) {
				this._depthMask = store.get(stateName);
			} else {
				this._depthMask = true;
			}
		} else if(stateName == "depthFunction") {
			if(store.hasProperty(stateName)) {
				this._depthFunc = store.get(stateName);
			} else {
				this._depthFunc = 4;
			}
		} else if(stateName == "triangleCulling") {
			if(store.hasProperty(stateName)) {
				this._triangleCulling = store.get(stateName);
			} else {
				this._triangleCulling = 2;
			}
		} else if(stateName == "stencilFunction") {
			if(store.hasProperty(stateName)) {
				this._stencilFunction = store.get(stateName);
			} else {
				this._stencilFunction = 0;
			}
		} else if(stateName == "stencilReference") {
			if(store.hasProperty(stateName)) {
				this._stencilReference = store.get(stateName);
			} else {
				this._stencilReference = 0;
			}
		} else if(stateName == "stencilMask") {
			if(store.hasProperty(stateName)) {
				this._stencilMask = store.get(stateName);
			} else {
				this._stencilMask = 1;
			}
		} else if(stateName == "stencilFailOperation") {
			if(store.hasProperty(stateName)) {
				this._stencilFailOp = store.get(stateName);
			} else {
				this._stencilFailOp = 0;
			}
		} else if(stateName == "stencilZFailOperation") {
			if(store.hasProperty(stateName)) {
				this._stencilZFailOp = store.get(stateName);
			} else {
				this._stencilZFailOp = 0;
			}
		} else if(stateName == "stencilZPassOperation") {
			if(store.hasProperty(stateName)) {
				this._stencilZPassOp = store.get(stateName);
			} else {
				this._stencilZPassOp = 0;
			}
		} else if(stateName == "scissorTest") {
			if(store.hasProperty(stateName)) {
				this._scissorTest = store.get(stateName);
			} else {
				this._scissorTest = false;
			}
		} else if(stateName == "scissorBox") {
			if(store.hasProperty(stateName)) {
				this._scissorBox = store.get(stateName);
			} else {
				this._scissorBox = minko_render_States.DEFAULT_SCISSOR_BOX;
			}
		} else if(stateName == "target") {
			if(store.hasProperty(stateName)) {
				this._target = store.get(stateName);
			} else {
				this._target = minko_render_States.DEFAULT_TARGET;
			}
		}
	}
	,setAttributeValueFromStore: function(input,propertyName,store) {
		var attr = store.get(propertyName);
		this._attributes.push(new minko_render_AttributeValue(input.location,attr.resourceId,attr.size,attr.vertexSize,attr.offset));
	}
	,__class__: minko_render_DrawCall
});
var minko_render_DrawCallPool = $hx_exports["minko"]["render"]["DrawCallPool"] = function() {
	this._zSortUsefulPropertyNames = [];
	this._sortUsefulPropertyNames = [];
	this._batchId = 0;
	this._drawCalls = new haxe_ds_StringMap();
	this._drawCallsKeys = [];
	this._macroToDrawCalls = new haxe_ds_StringMap();
	this._invalidDrawCalls = new haxe_ds_ObjectMap();
	this._macroChangedSlot = new haxe_ds_StringMap();
	this._drawCallToPropRebindFuncs = new haxe_ds_ObjectMap();
	this._drawCallsToBeSorted = [];
	this._propChangedSlot = new haxe_ds_StringMap();
	this._sortUsefulPropertyChangedSlot = new haxe_ds_StringMap();
	this._zSortUsefulPropertyChangedSlot = new haxe_ds_StringMap();
	this._mustZSort = false;
};
minko_render_DrawCallPool.__name__ = true;
minko_render_DrawCallPool.macroBindingKey = function(propertyName,m,s) {
	return propertyName + "+" + m.get_uuid() + "_" + s.get_uuid();
};
minko_render_DrawCallPool.drawCallKey = function(m,s) {
	return m.get_uuid() + "_" + s.get_uuid();
};
minko_render_DrawCallPool.sortPropertyTuple = function(m,s) {
	return m + "_" + s;
};
minko_render_DrawCallPool.compareZSortedDrawCalls = function(a,b) {
	var aPosition = a.getEyeSpacePosition();
	var bPosition = b.getEyeSpacePosition();
	if(aPosition.z > bPosition.z) {
		return -1;
	} else if(aPosition.z < bPosition.z) {
		return 1;
	} else {
		return 0;
	}
};
minko_render_DrawCallPool.compareDrawCalls = function(a,b) {
	a = a.toUpperCase();
	b = b.toUpperCase();
	if(a > b) {
		return -1;
	} else if(a < b) {
		return 1;
	} else {
		return 0;
	}
};
minko_render_DrawCallPool.prototype = {
	dispose: function() {
		if(this._macroToDrawCalls != null) {
			this._macroToDrawCalls = null;
		}
		if(this._macroChangedSlot != null) {
			this._macroChangedSlot = null;
		}
		if(this._propChangedSlot != null) {
			this._propChangedSlot = null;
		}
		if(this._drawCallToPropRebindFuncs != null) {
			this._drawCallToPropRebindFuncs = null;
		}
	}
	,get_drawCallsKeys: function() {
		return this._drawCallsKeys;
	}
	,get_drawCalls: function() {
		return this._drawCalls;
	}
	,addDrawCalls: function(effect,techniqueName,variables,rootData,rendererData,targetData) {
		var technique = effect.technique(techniqueName);
		this._batchId++;
		var _g = 0;
		while(_g < technique.length) {
			var pass = technique[_g];
			++_g;
			var drawCall = [new minko_render_DrawCall(this._batchId,pass,variables,rootData,rendererData,targetData)];
			this.initializeDrawCall(drawCall[0]);
			if(!pass.get_isForward()) {
				var seekedDrawCall = this.findDrawCall((function(drawCall1) {
					return function(d) {
						return d.get_program() == drawCall1[0].get_program();
					};
				})(drawCall));
				if(seekedDrawCall != null) {
					seekedDrawCall.get_batchIDs().push(this._batchId);
					drawCall[0] = null;
					continue;
				}
			}
			this.addDrawCallToSortedBucket(drawCall[0]);
		}
		return this._batchId;
	}
	,_removeDrawCalls: function(drawCalls,batchId) {
		var _gthis = this;
		return drawCalls.filter(function(drawCall) {
			var batchIDs = drawCall.get_batchIDs();
			var it = Lambda.has(batchIDs,batchId);
			if(it != false) {
				HxOverrides.remove(batchIDs,batchId);
				if(batchIDs.length != 0) {
					return true;
				}
				var tmp = drawCall.get_pass().get_macroBindings();
				var tmp1 = drawCall.get_rootData();
				var tmp2 = drawCall.get_rendererData();
				var tmp3 = drawCall.get_targetData();
				_gthis.unwatchProgramSignature(drawCall,tmp,tmp1,tmp2,tmp3);
				_gthis.unbindDrawCall(drawCall);
				_gthis._invalidDrawCalls.remove(drawCall);
				HxOverrides.remove(_gthis._drawCallsToBeSorted,drawCall);
				drawCall.dispose();
				drawCall = null;
				return false;
			}
			return true;
		});
	}
	,removeDrawCalls: function(batchId) {
		var _this = this._drawCalls;
		var priorityAndTargetIdToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(priorityAndTargetIdToDrawCalls.hasNext()) {
			var priorityAndTargetIdToDrawCalls1 = priorityAndTargetIdToDrawCalls.next();
			var batchId1 = [batchId];
			var _gthis = [this];
			priorityAndTargetIdToDrawCalls1.first = priorityAndTargetIdToDrawCalls1.first.filter((function(_gthis1,batchId2) {
				return function(drawCall) {
					var batchIDs = drawCall.get_batchIDs();
					var it = Lambda.has(batchIDs,batchId2[0]);
					if(it != false) {
						HxOverrides.remove(batchIDs,batchId2[0]);
						if(batchIDs.length != 0) {
							return true;
						}
						var tmp = drawCall.get_pass().get_macroBindings();
						var tmp1 = drawCall.get_rootData();
						var tmp2 = drawCall.get_rendererData();
						var tmp3 = drawCall.get_targetData();
						_gthis1[0].unwatchProgramSignature(drawCall,tmp,tmp1,tmp2,tmp3);
						_gthis1[0].unbindDrawCall(drawCall);
						_gthis1[0]._invalidDrawCalls.remove(drawCall);
						HxOverrides.remove(_gthis1[0]._drawCallsToBeSorted,drawCall);
						drawCall.dispose();
						drawCall = null;
						return false;
					}
					return true;
				};
			})(_gthis,batchId1));
			var batchId3 = [batchId];
			var _gthis2 = [this];
			priorityAndTargetIdToDrawCalls1.second = priorityAndTargetIdToDrawCalls1.second.filter((function(_gthis3,batchId4) {
				return function(drawCall1) {
					var batchIDs1 = drawCall1.get_batchIDs();
					var it1 = Lambda.has(batchIDs1,batchId4[0]);
					if(it1 != false) {
						HxOverrides.remove(batchIDs1,batchId4[0]);
						if(batchIDs1.length != 0) {
							return true;
						}
						var tmp4 = drawCall1.get_pass().get_macroBindings();
						var tmp5 = drawCall1.get_rootData();
						var tmp6 = drawCall1.get_rendererData();
						var tmp7 = drawCall1.get_targetData();
						_gthis3[0].unwatchProgramSignature(drawCall1,tmp4,tmp5,tmp6,tmp7);
						_gthis3[0].unbindDrawCall(drawCall1);
						_gthis3[0]._invalidDrawCalls.remove(drawCall1);
						HxOverrides.remove(_gthis3[0]._drawCallsToBeSorted,drawCall1);
						drawCall1.dispose();
						drawCall1 = null;
						return false;
					}
					return true;
				};
			})(_gthis2,batchId3));
		}
	}
	,invalidateDrawCalls: function(batchId,variables) {
		var _gthis = this;
		this.foreachDrawCall(function(drawCall) {
			var batchIDs = drawCall.get_batchIDs();
			var it = Lambda.has(batchIDs,batchId);
			if(it != false) {
				_gthis._invalidDrawCalls.set(drawCall,new minko_Tuple(true,variables));
			}
		});
	}
	,update: function(forceSort,mustZSort) {
		if(mustZSort == null) {
			mustZSort = false;
		}
		if(forceSort == null) {
			forceSort = false;
		}
		var invalidDrawCall = this._invalidDrawCalls.keys();
		while(invalidDrawCall.hasNext()) {
			var invalidDrawCall1 = invalidDrawCall.next();
			var drawCallPtr = invalidDrawCall1;
			this.initializeDrawCall(drawCallPtr,true);
		}
		this._invalidDrawCalls = new haxe_ds_ObjectMap();
		var drawCallPtrAndFuncList = this._drawCallToPropRebindFuncs.iterator();
		while(drawCallPtrAndFuncList.hasNext()) {
			var drawCallPtrAndFuncList1 = drawCallPtrAndFuncList.next();
			var _g = 0;
			while(_g < drawCallPtrAndFuncList1.length) {
				var func = drawCallPtrAndFuncList1[_g];
				++_g;
				func();
			}
		}
		this._drawCallToPropRebindFuncs = new haxe_ds_ObjectMap();
		var _g1 = 0;
		var _g11 = this._drawCallsToBeSorted;
		while(_g1 < _g11.length) {
			var drawCall = _g11[_g1];
			++_g1;
			this.removeDrawCallFromSortedBucket(drawCall);
			this.addDrawCallToSortedBucket(drawCall);
		}
		this._drawCallsToBeSorted = [];
		var finalMustZSort = forceSort || this._mustZSort || mustZSort;
		if(finalMustZSort) {
			this._mustZSort = false;
			this.zSortDrawCalls();
		}
	}
	,clear: function() {
		this._drawCalls = new haxe_ds_StringMap();
		this._drawCallsKeys = [];
		this._macroToDrawCalls = new haxe_ds_StringMap();
		this._invalidDrawCalls = new haxe_ds_ObjectMap();
		this._macroChangedSlot = new haxe_ds_StringMap();
		this._propChangedSlot = new haxe_ds_StringMap();
		this._drawCallToPropRebindFuncs = new haxe_ds_ObjectMap();
		this._sortUsefulPropertyChangedSlot = new haxe_ds_StringMap();
		this._zSortUsefulPropertyChangedSlot = new haxe_ds_StringMap();
	}
	,get_numDrawCalls: function() {
		var numDrawCalls = 0;
		var _this = this._drawCalls;
		var drawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(drawCalls.hasNext()) {
			var drawCalls1 = drawCalls.next();
			numDrawCalls += drawCalls1.first.length;
			numDrawCalls += drawCalls1.second.length;
		}
		return numDrawCalls;
	}
	,watchProgramSignature: function(drawCall,macroBindings,rootData,rendererData,targetData) {
		var _gthis = this;
		var macroNameAndBinding = macroBindings.bindings.keys();
		while(macroNameAndBinding.hasNext()) {
			var macroNameAndBinding1 = macroNameAndBinding.next();
			var macroName = macroNameAndBinding1;
			var _this = macroBindings.bindings;
			var macroBinding = [__map_reserved[macroNameAndBinding1] != null ? _this.getReserved(macroNameAndBinding1) : _this.h[macroNameAndBinding1]];
			var store = macroBinding[0].source == 2 ? rootData : macroBinding[0].source == 1 ? rendererData : targetData;
			var propertyName = [minko_data_Store.getActualPropertyName(drawCall.get_variables(),macroBinding[0].propertyName)];
			var _bindingKey = minko_render_DrawCallPool.macroBindingKey(propertyName[0],macroBinding[0],store);
			var _this1 = this._macroToDrawCalls;
			if(!(__map_reserved[_bindingKey] != null ? _this1.existsReserved(_bindingKey) : _this1.h.hasOwnProperty(_bindingKey))) {
				var _this2 = this._macroToDrawCalls;
				var value = [];
				if(__map_reserved[_bindingKey] != null) {
					_this2.setReserved(_bindingKey,value);
				} else {
					_this2.h[_bindingKey] = value;
				}
			}
			var _this3 = this._macroToDrawCalls;
			var drawCalls = [__map_reserved[_bindingKey] != null ? _this3.getReserved(_bindingKey) : _this3.h[_bindingKey]];
			drawCalls[0].push(drawCall);
			var _this4 = macroBindings.types;
			if((__map_reserved[macroName] != null ? _this4.getReserved(macroName) : _this4.h[macroName]) != 0) {
				this.addMacroCallback(_bindingKey,store.getPropertyChanged(propertyName[0]),(function(drawCalls1,macroBinding1) {
					return function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
						_gthis.macroPropertyChangedHandler(macroBinding1[0],drawCalls1[0]);
					};
				})(drawCalls,macroBinding));
			} else {
				var hasProperty = [store.hasProperty(propertyName[0])];
				this.addMacroCallback(_bindingKey,hasProperty[0] ? store.getPropertyRemoved(propertyName[0]) : store.getPropertyAdded(propertyName[0]),(function(hasProperty1,drawCalls2,propertyName1,macroBinding2) {
					return function(s,UnnamedParameter11,p) {
						if(hasProperty1[0]) {
							_gthis.macroPropertyRemovedHandler(macroBinding2[0],propertyName1[0],s,drawCalls2[0]);
						} else {
							_gthis.macroPropertyAddedHandler(macroBinding2[0],propertyName1[0],s,drawCalls2[0]);
						}
					};
				})(hasProperty,drawCalls,propertyName,macroBinding));
			}
		}
	}
	,unwatchProgramSignature: function(drawCall,macroBindings,rootData,rendererData,targetData) {
		var macroNameAndBinding = macroBindings.bindings.keys();
		while(macroNameAndBinding.hasNext()) {
			var macroNameAndBinding1 = macroNameAndBinding.next();
			var _this = macroBindings.bindings;
			var macroBinding = __map_reserved[macroNameAndBinding1] != null ? _this.getReserved(macroNameAndBinding1) : _this.h[macroNameAndBinding1];
			var store = macroBinding.source == 2 ? rootData : macroBinding.source == 1 ? rendererData : targetData;
			var propertyName = minko_data_Store.getActualPropertyName(drawCall.get_variables(),macroBinding.propertyName);
			var bindingKey = minko_render_DrawCallPool.macroBindingKey(propertyName,macroBinding,store);
			var _this1 = this._macroToDrawCalls;
			if(__map_reserved[bindingKey] != null ? _this1.existsReserved(bindingKey) : _this1.h.hasOwnProperty(bindingKey)) {
				var _this2 = this._macroToDrawCalls;
				var drawCalls = __map_reserved[bindingKey] != null ? _this2.getReserved(bindingKey) : _this2.h[bindingKey];
				HxOverrides.remove(drawCalls,drawCall);
				if(drawCalls.length == 0) {
					drawCalls = null;
					this._macroToDrawCalls.remove(bindingKey);
				}
			}
			this.removeMacroCallback(bindingKey);
		}
	}
	,macroPropertyAddedHandler: function(macroBinding,propertyName,store,drawCalls) {
		var _gthis = this;
		var key = minko_render_DrawCallPool.macroBindingKey(propertyName,macroBinding,store);
		this.removeMacroCallback(key);
		this.addMacroCallback(key,store.getPropertyRemoved(propertyName),function(s,UnnamedParameter1,p) {
			_gthis.macroPropertyRemovedHandler(macroBinding,propertyName,s,drawCalls);
		});
		this.macroPropertyChangedHandler(macroBinding,drawCalls);
	}
	,macroPropertyRemovedHandler: function(macroBinding,propertyName,store,drawCalls) {
		var _gthis = this;
		if(store.hasProperty(propertyName)) {
			return;
		}
		var key = minko_render_DrawCallPool.macroBindingKey(propertyName,macroBinding,store);
		this.removeMacroCallback(key);
		this.addMacroCallback(key,store.getPropertyAdded(propertyName),function(s,UnnamedParameter1,p) {
			_gthis.macroPropertyAddedHandler(macroBinding,propertyName,s,drawCalls);
		});
		this.macroPropertyChangedHandler(macroBinding,drawCalls);
	}
	,macroPropertyChangedHandler: function(macroBinding,drawCalls) {
		var _g = 0;
		while(_g < drawCalls.length) {
			var drawCall = drawCalls[_g];
			++_g;
			this._invalidDrawCalls.set(drawCall,new minko_Tuple(false,[]));
		}
	}
	,initializeDrawCall: function(drawCall,forceRebind) {
		if(forceRebind == null) {
			forceRebind = false;
		}
		var invalidDrawCallIt = this._invalidDrawCalls.h[drawCall.__id__];
		var variablesChanged = false;
		if(invalidDrawCallIt != null) {
			variablesChanged = invalidDrawCallIt.first;
		}
		var newVariables = [];
		if(variablesChanged) {
			newVariables = invalidDrawCallIt.second;
		}
		var variables = variablesChanged ? newVariables : drawCall.get_variables();
		var pass = drawCall.get_pass();
		var programAndSignature = pass.selectProgram(variables,drawCall.get_targetData(),drawCall.get_rendererData(),drawCall.get_rootData());
		var program = programAndSignature.first;
		if(program == drawCall.get_program()) {
			if(variablesChanged) {
				drawCall.set_variables(variables);
			}
			return;
		}
		if(drawCall.get_program() != null) {
			this.unwatchProgramSignature(drawCall,drawCall.get_pass().get_macroBindings(),drawCall.get_rootData(),drawCall.get_rendererData(),drawCall.get_targetData());
			this.unbindDrawCall(drawCall);
		}
		if(variablesChanged) {
			drawCall.set_variables(variables);
		}
		this.bindDrawCall(drawCall,pass,program,forceRebind);
		if(programAndSignature.second != null) {
			this.watchProgramSignature(drawCall,drawCall.get_pass().get_macroBindings(),drawCall.get_rootData(),drawCall.get_rendererData(),drawCall.get_targetData());
		}
	}
	,addMacroCallback: function(key,signal,callback) {
		var _this = this._macroChangedSlot;
		var value = new minko_Tuple(signal.connect(callback),1);
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,removeMacroCallback: function(key) {
		var _this = this._macroChangedSlot;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			return;
		}
		var _this1 = this._macroChangedSlot;
		var tmp = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
		tmp.second--;
		var _this2 = this._macroChangedSlot;
		if((__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]).second == 0) {
			var _this3 = this._macroChangedSlot;
			var signalSlot3 = (__map_reserved[key] != null ? _this3.getReserved(key) : _this3.h[key]).first;
			signalSlot3.disconnect();
			this._macroChangedSlot.remove(key);
		}
	}
	,hasMacroCallback: function(key) {
		var _this = this._macroChangedSlot;
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,uniformBindingPropertyAddedHandler: function(drawCall,input,uniformBindingMap,forceRebind) {
		if(forceRebind == null) {
			forceRebind = false;
		}
		var _gthis = this;
		if(!forceRebind && this._invalidDrawCalls.h.__keys__[drawCall.__id__] != null) {
			return;
		}
		var resolvedBinding = drawCall.bindUniform(input,uniformBindingMap.bindings,uniformBindingMap.defaultValues);
		if(resolvedBinding != null) {
			var propertyName = resolvedBinding.propertyName;
			var bindingPtr = resolvedBinding.binding;
			var propertyExist = resolvedBinding.store.hasProperty(propertyName);
			var signal = resolvedBinding.store.getPropertyChanged(propertyName);
			var _drawCallKey = minko_render_DrawCallPool.drawCallKey(bindingPtr,drawCall);
			var _this = this._propChangedSlot;
			if(__map_reserved[_drawCallKey] != null ? _this.existsReserved(_drawCallKey) : _this.h.hasOwnProperty(_drawCallKey)) {
				var _this1 = this._propChangedSlot;
				(__map_reserved[_drawCallKey] != null ? _this1.getReserved(_drawCallKey) : _this1.h[_drawCallKey]).second.disconnect();
			}
			var changedSlot = signal.connect(function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
				_gthis._propChangedSlot.remove(_drawCallKey);
				if(_gthis._drawCallToPropRebindFuncs.h.__keys__[drawCall.__id__] != null == false) {
					_gthis._drawCallToPropRebindFuncs.set(drawCall,[]);
				}
				_gthis._drawCallToPropRebindFuncs.h[drawCall.__id__].push(function() {
					_gthis.uniformBindingPropertyAddedHandler(drawCall,input,uniformBindingMap,forceRebind);
				});
			},0,true);
			var _this2 = this._propChangedSlot;
			var value = new minko_Tuple(drawCall,changedSlot);
			if(__map_reserved[_drawCallKey] != null) {
				_this2.setReserved(_drawCallKey,value);
			} else {
				_this2.h[_drawCallKey] = value;
			}
			if(propertyExist && drawCall.get_zSorted()) {
				var propertyRelatedToZSortIt = Lambda.find(this._zSortUsefulPropertyNames,function(zSortUsefulPropertyName) {
					return minko_data_Store.getActualPropertyName(drawCall.get_variables(),zSortUsefulPropertyName) == propertyName;
				});
				if(propertyRelatedToZSortIt != null) {
					var _this3 = this._zSortUsefulPropertyChangedSlot;
					if(__map_reserved[_drawCallKey] != null ? _this3.existsReserved(_drawCallKey) : _this3.h.hasOwnProperty(_drawCallKey)) {
						var _this4 = this._zSortUsefulPropertyChangedSlot;
						(__map_reserved[_drawCallKey] != null ? _this4.getReserved(_drawCallKey) : _this4.h[_drawCallKey]).second.disconnect();
					}
					var _this5 = this._zSortUsefulPropertyChangedSlot;
					var value1 = resolvedBinding.store.getPropertyChanged(propertyName).connect(function(UnnamedParameter11,UnnamedParameter21,UnnamedParameter31) {
						_gthis._mustZSort = true;
					});
					var value2 = new minko_Tuple(drawCall,value1);
					if(__map_reserved[_drawCallKey] != null) {
						_this5.setReserved(_drawCallKey,value2);
					} else {
						_this5.h[_drawCallKey] = value2;
					}
				}
			}
			resolvedBinding = null;
		}
		if(input.type == 15 || input.type == 16) {
			this.samplerStatesBindingPropertyAddedHandler(drawCall,input,uniformBindingMap);
		}
	}
	,stateBindingPropertyAddedHandler: function(stateName,drawCall,stateBindingMap,forceRebind) {
		var _gthis = this;
		if(!forceRebind && this._invalidDrawCalls.h.__keys__[drawCall.__id__] != null) {
			return;
		}
		var resolvedBinding = drawCall.bindState(stateName,stateBindingMap.bindings,stateBindingMap.defaultValues);
		if(resolvedBinding != null) {
			var bindingPtr = resolvedBinding.binding;
			var propertyName = resolvedBinding.propertyName;
			var propertyExist = resolvedBinding.store.hasProperty(propertyName);
			var signal = resolvedBinding.store.getPropertyChanged(propertyName);
			var _drawCallKey = minko_render_DrawCallPool.drawCallKey(resolvedBinding.binding,drawCall);
			var _this = this._propChangedSlot;
			if(__map_reserved[_drawCallKey] != null ? _this.existsReserved(_drawCallKey) : _this.h.hasOwnProperty(_drawCallKey)) {
				var _this1 = this._propChangedSlot;
				(__map_reserved[_drawCallKey] != null ? _this1.getReserved(_drawCallKey) : _this1.h[_drawCallKey]).second.disconnect();
			}
			var changedSlot = signal.connect(function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
				_gthis._propChangedSlot.remove(_drawCallKey);
				if(_gthis._drawCallToPropRebindFuncs.h.__keys__[drawCall.__id__] != null == false) {
					_gthis._drawCallToPropRebindFuncs.set(drawCall,[]);
				}
				_gthis._drawCallToPropRebindFuncs.h[drawCall.__id__].push(function() {
					_gthis.stateBindingPropertyAddedHandler(stateName,drawCall,stateBindingMap,forceRebind);
				});
			},0,true);
			var _this2 = this._propChangedSlot;
			var value = new minko_Tuple(drawCall,changedSlot);
			if(__map_reserved[_drawCallKey] != null) {
				_this2.setReserved(_drawCallKey,value);
			} else {
				_this2.h[_drawCallKey] = value;
			}
			var propertyRelatedToSortIt = Lambda.find(this._sortUsefulPropertyNames,function(sortUsefulPropertyName) {
				return minko_data_Store.getActualPropertyName(drawCall.get_variables(),sortUsefulPropertyName) == propertyName;
			});
			if(propertyRelatedToSortIt != null) {
				var _this3 = this._sortUsefulPropertyChangedSlot;
				if(__map_reserved[_drawCallKey] != null ? _this3.existsReserved(_drawCallKey) : _this3.h.hasOwnProperty(_drawCallKey)) {
					var _this4 = this._sortUsefulPropertyChangedSlot;
					(__map_reserved[_drawCallKey] != null ? _this4.getReserved(_drawCallKey) : _this4.h[_drawCallKey]).second.disconnect();
				}
				var _this5 = this._sortUsefulPropertyChangedSlot;
				var value1 = resolvedBinding.store.getPropertyChanged(propertyName).connect(function(UnnamedParameter11,UnnamedParameter21,UnnamedParameter31) {
					_gthis._drawCallsToBeSorted.push(drawCall);
				});
				var value2 = new minko_Tuple(drawCall,value1);
				if(__map_reserved[_drawCallKey] != null) {
					_this5.setReserved(_drawCallKey,value2);
				} else {
					_this5.h[_drawCallKey] = value2;
				}
			}
			resolvedBinding = null;
		}
	}
	,samplerStatesBindingPropertyAddedHandler: function(drawCall,input,uniformBindingMap) {
		var _gthis = this;
		var resolvedBindings = drawCall.bindSamplerStates(input,uniformBindingMap.bindings,uniformBindingMap.defaultValues);
		var _g = 0;
		while(_g < resolvedBindings.length) {
			var resolvedBinding = resolvedBindings[_g];
			++_g;
			if(resolvedBinding != null) {
				var propertyName = resolvedBinding.propertyName;
				var propertyExist = resolvedBinding.store.hasProperty(propertyName);
				var signal = resolvedBinding.store.getPropertyChanged(propertyName);
				var _drawCallKey = [minko_render_DrawCallPool.drawCallKey(resolvedBinding.binding,drawCall)];
				var _this = this._propChangedSlot;
				if(__map_reserved[_drawCallKey[0]] != null ? _this.existsReserved(_drawCallKey[0]) : _this.h.hasOwnProperty(_drawCallKey[0])) {
					var _this1 = this._propChangedSlot;
					(__map_reserved[_drawCallKey[0]] != null ? _this1.getReserved(_drawCallKey[0]) : _this1.h[_drawCallKey[0]]).second.disconnect();
				}
				var changedSlot = signal.connect((function(_drawCallKey1) {
					return function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
						_gthis._propChangedSlot.remove(_drawCallKey1[0]);
						if(_gthis._drawCallToPropRebindFuncs.h.__keys__[drawCall.__id__] != null == false) {
							_gthis._drawCallToPropRebindFuncs.set(drawCall,[]);
						}
						_gthis._drawCallToPropRebindFuncs.h[drawCall.__id__].push((function() {
							return function() {
								_gthis.samplerStatesBindingPropertyAddedHandler(drawCall,input,uniformBindingMap);
							};
						})());
					};
				})(_drawCallKey),0,true);
				var _this2 = this._propChangedSlot;
				var value = new minko_Tuple(drawCall,changedSlot);
				if(__map_reserved[_drawCallKey[0]] != null) {
					_this2.setReserved(_drawCallKey[0],value);
				} else {
					_this2.h[_drawCallKey[0]] = value;
				}
				resolvedBinding = null;
			}
		}
	}
	,addDrawCallToSortedBucket: function(drawCall) {
		var priority = drawCall.get_priority();
		var targetId = drawCall.get_target() != null ? drawCall.get_target().get_id() : 0;
		var zSortedIndex = drawCall.get_zSorted() ? 1 : 0;
		var _sortPropertyTuple = minko_render_DrawCallPool.sortPropertyTuple(priority,targetId);
		var _this = this._drawCalls;
		if(!(__map_reserved[_sortPropertyTuple] != null ? _this.existsReserved(_sortPropertyTuple) : _this.h.hasOwnProperty(_sortPropertyTuple))) {
			this._drawCallsKeys.push(_sortPropertyTuple);
			this._drawCallsKeys.sort(minko_render_DrawCallPool.compareDrawCalls);
			var _this1 = this._drawCalls;
			var value = new minko_Tuple([],[]);
			if(__map_reserved[_sortPropertyTuple] != null) {
				_this1.setReserved(_sortPropertyTuple,value);
			} else {
				_this1.h[_sortPropertyTuple] = value;
			}
		}
		var _this2 = this._drawCalls;
		var _drawCallList = __map_reserved[_sortPropertyTuple] != null ? _this2.getReserved(_sortPropertyTuple) : _this2.h[_sortPropertyTuple];
		if(zSortedIndex == 1) {
			_drawCallList.second.push(drawCall);
		} else {
			_drawCallList.first.push(drawCall);
		}
	}
	,removeDrawCallFromSortedBucket: function(drawCall) {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			HxOverrides.remove(sortPropertiesToDrawCalls1.first,drawCall);
			HxOverrides.remove(sortPropertiesToDrawCalls1.second,drawCall);
		}
	}
	,findDrawCall: function(predicate) {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				if(predicate(drawCall)) {
					return drawCall;
				}
			}
			drawCalls = sortPropertiesToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls.length) {
				var drawCall1 = drawCalls[_g1];
				++_g1;
				if(predicate(drawCall1)) {
					return drawCall1;
				}
			}
		}
		return null;
	}
	,foreachDrawCall: function(func) {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				func(drawCall);
			}
			var drawCalls1 = sortPropertiesToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls1.length) {
				var drawCall1 = drawCalls1[_g1];
				++_g1;
				func(drawCall1);
			}
		}
	}
	,bindDrawCall: function(drawCall,pass,program,forceRebind) {
		drawCall.bind(program);
		var _g = 0;
		var _g1 = program.get_inputs().get_attributes();
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			drawCall.bindAttribute(input,pass.get_attributeBindings().bindings,pass.get_attributeBindings().defaultValues);
		}
		var _g2 = 0;
		var _g11 = minko_render_States.PROPERTY_NAMES;
		while(_g2 < _g11.length) {
			var stateName = _g11[_g2];
			++_g2;
			this.stateBindingPropertyAddedHandler(stateName,drawCall,pass.get_stateBindings(),forceRebind);
		}
		var _g3 = 0;
		var _g12 = program.get_inputs().get_uniforms();
		while(_g3 < _g12.length) {
			var input1 = _g12[_g3];
			++_g3;
			this.uniformBindingPropertyAddedHandler(drawCall,input1,pass.get_uniformBindings(),forceRebind);
		}
		if(!(!pass.get_isForward())) {
			drawCall.bindIndexBuffer();
		}
	}
	,unbindDrawCall: function(drawCall) {
		var _gthis = this;
		var keys = this._propChangedSlot.keys();
		var tmp = [];
		while(keys.hasNext()) {
			var value = keys.next();
			var _this = _gthis._propChangedSlot;
			if((__map_reserved[value] != null ? _this.getReserved(value) : _this.h[value]).first == drawCall) {
				tmp.push(value);
			}
		}
		var __propChangedSlot_keys = tmp;
		var _g = 0;
		while(_g < __propChangedSlot_keys.length) {
			var it = __propChangedSlot_keys[_g];
			++_g;
			var _this1 = this._propChangedSlot;
			(__map_reserved[it] != null ? _this1.getReserved(it) : _this1.h[it]).second.disconnect();
			this._propChangedSlot.remove(it);
		}
		var keys1 = this._sortUsefulPropertyChangedSlot.keys();
		var tmp1 = [];
		while(keys1.hasNext()) {
			var value1 = keys1.next();
			var _this2 = _gthis._sortUsefulPropertyChangedSlot;
			if((__map_reserved[value1] != null ? _this2.getReserved(value1) : _this2.h[value1]).first == drawCall) {
				tmp1.push(value1);
			}
		}
		var _sortUsefulPropertyChangedSlot_keys = tmp1;
		var _g1 = 0;
		while(_g1 < _sortUsefulPropertyChangedSlot_keys.length) {
			var it1 = _sortUsefulPropertyChangedSlot_keys[_g1];
			++_g1;
			var _this3 = this._sortUsefulPropertyChangedSlot;
			(__map_reserved[it1] != null ? _this3.getReserved(it1) : _this3.h[it1]).second.disconnect();
			this._sortUsefulPropertyChangedSlot.remove(it1);
		}
		var keys2 = this._zSortUsefulPropertyChangedSlot.keys();
		var tmp2 = [];
		while(keys2.hasNext()) {
			var value2 = keys2.next();
			var _this4 = _gthis._zSortUsefulPropertyChangedSlot;
			if((__map_reserved[value2] != null ? _this4.getReserved(value2) : _this4.h[value2]).first == drawCall) {
				tmp2.push(value2);
			}
		}
		var _zSortUsefulPropertyChangedSlot_keys = tmp2;
		var _g2 = 0;
		while(_g2 < _zSortUsefulPropertyChangedSlot_keys.length) {
			var it2 = _zSortUsefulPropertyChangedSlot_keys[_g2];
			++_g2;
			var _this5 = this._zSortUsefulPropertyChangedSlot;
			(__map_reserved[it2] != null ? _this5.getReserved(it2) : _this5.h[it2]).second.disconnect();
			this._zSortUsefulPropertyChangedSlot.remove(it2);
		}
		this._drawCallToPropRebindFuncs.remove(drawCall);
	}
	,zSortDrawCalls: function() {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.second;
			drawCalls.sort(minko_render_DrawCallPool.compareZSortedDrawCalls);
		}
	}
	,__class__: minko_render_DrawCallPool
};
var minko_render_Effect = $hx_exports["minko"]["render"]["Effect"] = function(name) {
	if(name == null) {
		name = "";
	}
	minko_Has_$uuid.call(this);
	this._data = minko_data_Provider.create();
	this._name = name;
	this._techniques = new haxe_ds_StringMap();
	this._fallback = new haxe_ds_StringMap();
	this._uniformFunctions = [];
	this._attributeFunctions = [];
	this._macroFunctions = [];
};
minko_render_Effect.__name__ = true;
minko_render_Effect.create = function(name) {
	if(name == null) {
		name = "";
	}
	return new minko_render_Effect(name);
};
minko_render_Effect.createbyTechnique = function(name,passes) {
	var effect = minko_render_Effect.create(name);
	var _this = effect._techniques;
	if(__map_reserved["default"] != null) {
		_this.setReserved("default",passes);
	} else {
		_this.h["default"] = passes;
	}
	return effect;
};
minko_render_Effect.setUniformOnPass = function(pass,name,values) {
	pass.setUniform(name,values);
};
minko_render_Effect.setVertexAttributeOnPass = function(pass,name,attribute) {
	pass.setAttribute(name,attribute);
};
minko_render_Effect.defineOnPass = function(pass,macroName) {
	pass.define(macroName);
};
minko_render_Effect.defineOnPassWithValue = function(pass,macroName,macroValue) {
	pass.setDefine(macroName,macroValue);
};
minko_render_Effect.__super__ = minko_Has_$uuid;
minko_render_Effect.prototype = $extend(minko_Has_$uuid.prototype,{
	get_uuid: function() {
		return this._data.get_uuid();
	}
	,get_name: function() {
		return this._name;
	}
	,get_techniques: function() {
		return this._techniques;
	}
	,get_data: function() {
		return this._data;
	}
	,technique: function(techniqueName) {
		if(!this.hasTechnique(techniqueName)) {
			throw new js__$Boot_HaxeError("techniqueName = " + techniqueName);
		}
		var _this = this._techniques;
		if(__map_reserved[techniqueName] != null) {
			return _this.getReserved(techniqueName);
		} else {
			return _this.h[techniqueName];
		}
	}
	,fallback: function(techniqueName) {
		var _this = this._fallback;
		var foundFallbackIt = __map_reserved[techniqueName] != null ? _this.existsReserved(techniqueName) : _this.h.hasOwnProperty(techniqueName);
		if(foundFallbackIt == false) {
			throw new js__$Boot_HaxeError("techniqueName = " + techniqueName);
		}
		var _this1 = this._fallback;
		if(__map_reserved[techniqueName] != null) {
			return _this1.getReserved(techniqueName);
		} else {
			return _this1.h[techniqueName];
		}
	}
	,hasTechnique: function(techniqueName) {
		var _this = this._techniques;
		return (__map_reserved[techniqueName] != null ? _this.existsReserved(techniqueName) : _this.h.hasOwnProperty(techniqueName)) != false;
	}
	,hasFallback: function(techniqueName) {
		var _this = this._fallback;
		return (__map_reserved[techniqueName] != null ? _this.existsReserved(techniqueName) : _this.h.hasOwnProperty(techniqueName)) != false;
	}
	,setUniform: function(name,values) {
		this._uniformFunctions.push(function(pass) {
			minko_render_Effect.setUniformOnPass(pass,name,values);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.setUniform(name,values);
			}
		}
	}
	,setAttribute: function(name,attribute) {
		this._attributeFunctions.push(function(pass) {
			minko_render_Effect.setVertexAttributeOnPass(pass,name,attribute);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.setAttribute(name,attribute);
			}
		}
	}
	,define: function(macroName) {
		this._macroFunctions.push(function(pass) {
			minko_render_Effect.defineOnPass(pass,macroName);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.define(macroName);
			}
		}
	}
	,setDefine: function(macroName,macroValue) {
		this._macroFunctions.push(function(pass) {
			minko_render_Effect.defineOnPassWithValue(pass,macroName,macroValue);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.setDefine(macroName,macroValue);
			}
		}
	}
	,addTechnique: function(name,passes) {
		if(this.hasTechnique(name)) {
			throw new js__$Boot_HaxeError("A technique named '" + name + "' already exists.");
		}
		var _g = 0;
		while(_g < passes.length) {
			var pass = passes[_g];
			++_g;
			var _g1 = 0;
			var _g2 = this._uniformFunctions;
			while(_g1 < _g2.length) {
				var func = _g2[_g1];
				++_g1;
				func(pass);
			}
			var _g11 = 0;
			var _g21 = this._attributeFunctions;
			while(_g11 < _g21.length) {
				var func1 = _g21[_g11];
				++_g11;
				func1(pass);
			}
			var _g12 = 0;
			var _g22 = this._macroFunctions;
			while(_g12 < _g22.length) {
				var func2 = _g22[_g12];
				++_g12;
				func2(pass);
			}
		}
		var _this = this._techniques;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,passes);
		} else {
			_this.h[name] = passes;
		}
	}
	,addTechniqueFallback: function(name,passes,fallback) {
		var _this = this._fallback;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,fallback);
		} else {
			_this.h[name] = fallback;
		}
		this.addTechnique(name,passes);
	}
	,removeTechnique: function(name) {
		if(!this.hasTechnique(name)) {
			throw new js__$Boot_HaxeError("The technique named '" + name + "' does not exist.");
		}
		this._techniques.remove(name);
		this._fallback.remove(name);
	}
	,initializeMaterial: function(material,technique) {
		if(technique == null) {
			technique = "default";
		}
		this.fillMaterial(material,technique);
		return material;
	}
	,fillMaterial: function(material,technique) {
		var _this = this._techniques;
		var passes = __map_reserved[technique] != null ? _this.getReserved(technique) : _this.h[technique];
		var _g = 0;
		while(_g < passes.length) {
			var pass = passes[_g];
			++_g;
			var defaultValues = pass.get_uniformBindings().defaultValues.get_providers()[0];
			var nameAndBinding = pass.get_uniformBindings().bindings.keys();
			while(nameAndBinding.hasNext()) {
				var nameAndBinding1 = nameAndBinding.next();
				var uniformName = nameAndBinding1;
				var _this1 = pass.get_uniformBindings().bindings;
				var nameAndBinding_second = __map_reserved[nameAndBinding1] != null ? _this1.getReserved(nameAndBinding1) : _this1.h[nameAndBinding1];
				if(defaultValues.hasProperty(uniformName)) {
					var pos = nameAndBinding_second.propertyName.indexOf("material[@{materialUuid}].");
					if(pos == 0) {
						var tmp = material.get_data();
						var tmp1 = HxOverrides.substr(nameAndBinding_second.propertyName,pos + 26,null);
						var _this2 = defaultValues.get_values();
						tmp.set(tmp1,__map_reserved[uniformName] != null ? _this2.getReserved(uniformName) : _this2.h[uniformName]);
					}
				}
			}
		}
	}
	,__class__: minko_render_Effect
});
var minko_render_GlContext = $hx_exports["minko"]["render"]["GlContext"] = function() {
	minko_render_AbstractContext.call(this);
};
minko_render_GlContext.__name__ = true;
minko_render_GlContext.bytesToUint8Array = function(b) {
	return new Uint8Array(b.b.bufferValue);
};
minko_render_GlContext.initializeBlendFactorsMap = function() {
	var m = new haxe_ds_IntMap();
	m.h[1] = 0;
	m.h[2] = 1;
	m.h[4] = 768;
	m.h[8] = 769;
	m.h[16] = 770;
	m.h[32] = 771;
	m.h[64] = 772;
	m.h[128] = 773;
	m.h[256] = 0;
	m.h[512] = 1;
	m.h[1024] = 774;
	m.h[2048] = 775;
	m.h[32768] = 773;
	m.h[8192] = 771;
	m.h[16384] = 772;
	m.h[32768] = 773;
	return m;
};
minko_render_GlContext.initializeDepthFuncsMap = function() {
	var m = new haxe_ds_IntMap();
	m.h[0] = 519;
	m.h[1] = 514;
	m.h[2] = 516;
	m.h[3] = 518;
	m.h[4] = 513;
	m.h[5] = 515;
	m.h[6] = 512;
	m.h[7] = 517;
	return m;
};
minko_render_GlContext.initializeStencilOperationsMap = function() {
	var m = new haxe_ds_IntMap();
	m.h[0] = 7680;
	m.h[1] = 0;
	m.h[2] = 7681;
	m.h[3] = 7682;
	m.h[4] = 34055;
	m.h[5] = 7683;
	m.h[6] = 34056;
	m.h[7] = 5386;
	return m;
};
minko_render_GlContext.create = function() {
	return new minko_render_GlContext();
};
minko_render_GlContext.__super__ = minko_render_AbstractContext;
minko_render_GlContext.prototype = $extend(minko_render_AbstractContext.prototype,{
	initialize: function() {
		this._textureTypes = new haxe_ds_IntMap();
		this._uniformInputLocations = new haxe_ds_IntMap();
		this._uniformInputLocationKeys = new haxe_ds_ObjectMap();
		this._errorsEnabled = false;
		this._textures = new haxe_ds_IntMap();
		this._textureSizes = new haxe_ds_IntMap();
		this._textureHasMipmaps = new haxe_ds_IntMap();
		this._oldViewportX = this._viewportX = 0;
		this._oldViewportY = this._viewportY = 0;
		this._oldViewportWidth = this._viewportWidth = 0;
		this._oldViewportHeight = this._viewportHeight = 0;
		this._currentTarget = 0;
		this._currentIndexBuffer = 0;
		this._currentVertexBuffer = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			this._currentVertexBuffer.h[i] = 0;
		}
		this._currentVertexSize = new haxe_ds_IntMap();
		var _g1 = 0;
		while(_g1 < 8) {
			var i1 = _g1++;
			this._currentVertexSize.h[i1] = -1;
		}
		this._currentVertexStride = new haxe_ds_IntMap();
		var _g2 = 0;
		while(_g2 < 8) {
			var i2 = _g2++;
			this._currentVertexStride.h[i2] = -1;
		}
		this._currentVertexOffset = new haxe_ds_IntMap();
		var _g3 = 0;
		while(_g3 < 8) {
			var i3 = _g3++;
			this._currentVertexOffset.h[i3] = -1;
		}
		this._currentBoundTexture = 0;
		this._currentTexture = new haxe_ds_IntMap();
		var _g4 = 0;
		while(_g4 < 8) {
			var i4 = _g4++;
			this._currentTexture.h[i4] = 0;
		}
		this._currentProgram = 0;
		this._currentTriangleCulling = 2;
		this._currentWrapMode = new haxe_ds_IntMap();
		this._currentTextureFilter = new haxe_ds_IntMap();
		this._currentMipFilter = new haxe_ds_IntMap();
		this._currentBlendingMode = 2 | 256;
		this._currentColorMask = true;
		this._currentDepthMask = true;
		this._currentDepthFunc = 8;
		this._currentStencilFunc = 8;
		this._currentStencilRef = 0;
		this._currentStencilMask = 1;
		this._currentStencilFailOp = 8;
		this._currentStencilZFailOp = 8;
		this._currentStencilZPassOp = 8;
		this._vertexAttributeEnabled = new haxe_ds_IntMap();
		var _g5 = 0;
		while(_g5 < 32) {
			var i5 = _g5++;
			this._vertexAttributeEnabled.h[i5] = false;
		}
		this._stencilBits = 0;
		this._vertexBuffers = new haxe_ds_IntMap();
		this._indexBuffers = new haxe_ds_IntMap();
		this._programs = new haxe_ds_IntMap();
		this._vertexShaders = new haxe_ds_IntMap();
		this._fragmentShaders = new haxe_ds_IntMap();
		this._shaders = new haxe_ds_IntMap();
		this._frameBuffers = new haxe_ds_IntMap();
		this._renderBuffers = new haxe_ds_IntMap();
		this.gl.enable(2929);
		this.gl.enable(3042);
		this.gl.enable(2884);
		this.gl.cullFace(1029);
		this.gl.frontFace(2305);
		this._driverInfo = "";
		this._oglMajorVersion = 2;
		this._oglMinorVersion = 0;
		var viewportSettings = this.gl.getParameter(2978);
		this._viewportX = viewportSettings[0];
		this._viewportY = viewportSettings[1];
		this._viewportWidth = viewportSettings[2];
		this._viewportHeight = viewportSettings[3];
		this.setColorMask(true);
		this.setDepthTest(true,4);
		this._stencilBits = this.gl.getParameter(3415);
		if(this._stencilBits != -1) {
			this.gl.enable(2960);
			this.setStencilTest(0,0,1,0,0,0);
		}
		this.initializeExtFunctions();
	}
	,initializeExtFunctions: function() {
	}
	,dispose: function() {
		var vertexBuffer = this._vertexBuffers.iterator();
		while(vertexBuffer.hasNext()) {
			var vertexBuffer1 = vertexBuffer.next();
			this.gl.deleteBuffer(vertexBuffer1);
		}
		var indexBuffer = this._indexBuffers.iterator();
		while(indexBuffer.hasNext()) {
			var indexBuffer1 = indexBuffer.next();
			this.gl.deleteBuffer(indexBuffer1);
		}
		var texture = this._textures.iterator();
		while(texture.hasNext()) {
			var texture1 = texture.next();
			this.gl.deleteTexture(texture1);
		}
		var program = this._programs.iterator();
		while(program.hasNext()) {
			var program1 = program.next();
			this.gl.deleteProgram(program1);
		}
		var vertexShader = this._vertexShaders.iterator();
		while(vertexShader.hasNext()) {
			var vertexShader1 = vertexShader.next();
			this.gl.deleteShader(vertexShader1);
		}
		var fragmentShader = this._fragmentShaders.iterator();
		while(fragmentShader.hasNext()) {
			var fragmentShader1 = fragmentShader.next();
			this.gl.deleteShader(fragmentShader1);
		}
		minko_render_AbstractContext.prototype.dispose.call(this);
	}
	,get_errorsEnabled: function() {
		return this._errorsEnabled;
	}
	,set_errorsEnabled: function(errors) {
		this._errorsEnabled = errors;
		return errors;
	}
	,get_driverInfo: function() {
		return this._driverInfo;
	}
	,get_renderTarget: function() {
		return this._currentTarget;
	}
	,get_viewportWidth: function() {
		return this._viewportWidth;
	}
	,get_viewportHeight: function() {
		return this._viewportHeight;
	}
	,get_currentProgram: function() {
		return this._currentProgram;
	}
	,configureViewport: function(x,y,width,height) {
		if(x != this._viewportX || y != this._viewportY || width != this._viewportWidth || height != this._viewportHeight) {
			this._viewportX = x;
			this._viewportY = y;
			this._viewportWidth = width;
			this._viewportHeight = height;
			this.gl.viewport(x,y,width,height);
		}
	}
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = -1;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 0.0;
		}
		if(blue == null) {
			blue = 0.0;
		}
		if(green == null) {
			green = 0.0;
		}
		if(red == null) {
			red = 0.0;
		}
		this.gl.clearColor(red,green,blue,alpha);
		this.gl.clearDepth(depth);
		if(this._stencilBits != 0) {
			this.gl.clearStencil(stencil);
		}
		mask = 17664 & mask;
		if((mask & 256) != null) {
			this.gl.depthMask(this._currentDepthMask = true);
		}
		this.gl.clear(mask);
	}
	,present: function() {
		this.setRenderToBackBuffer();
	}
	,drawTriangles: function(firstIndex,numTriangles) {
		this.gl.bindBuffer(34963,null);
		this._currentIndexBuffer = 0;
		this.gl.drawArrays(4,firstIndex,numTriangles * 3);
		this.checkForErrors();
	}
	,drawIndexBufferTriangles: function(indexBuffer,firstIndex,numTriangles) {
		this.gl.bindBuffer(34963,this._indexBuffers.h[indexBuffer]);
		this.checkForErrors();
		this.gl.drawElements(4,numTriangles * 3,5123,firstIndex);
		this.checkForErrors();
	}
	,checkForErrors: function() {
		if(this._errorsEnabled && this.getError() != 0) {
			console.log("error: OpenGLES2Context::checkForErrors()");
			console.log("\n");
			throw new js__$Boot_HaxeError("");
		}
	}
	,createVertexBuffer: function(size) {
		var vertexBuffer = this.gl.createBuffer();
		this.gl.bindBuffer(34962,vertexBuffer);
		this.gl.bufferData(34962,size * 4,35044);
		minko_render_GlContext.vertexBufferCount += 1;
		this._vertexBuffers.h[minko_render_GlContext.vertexBufferCount] = vertexBuffer;
		this.checkForErrors();
		return minko_render_GlContext.vertexBufferCount;
	}
	,createVertexAttributeArray: function() {
		return -1;
	}
	,setVertexAttributeArray: function(vertexArray) {
	}
	,setVertexBufferAt: function(position,vertexBuffer,size,stride,offset) {
		var vertexAttributeEnabled = vertexBuffer > 0;
		var vertexBufferChanged = this._currentVertexBuffer.h[position] != vertexBuffer || vertexAttributeEnabled;
		if(vertexBufferChanged) {
			this.gl.bindBuffer(34962,this._vertexBuffers.h[vertexBuffer]);
			this.checkForErrors();
			this._currentVertexBuffer.h[position] = vertexBuffer;
		}
		if(vertexBufferChanged || this._currentVertexSize.h[position] != size || this._currentVertexStride.h[position] != stride || this._currentVertexOffset.h[position] != offset) {
			this.gl.vertexAttribPointer(position,size,5126,false,4 * stride,4 * offset);
			this.checkForErrors();
			this._currentVertexSize.h[position] = size;
			this._currentVertexStride.h[position] = stride;
			this._currentVertexOffset.h[position] = offset;
		}
		if(vertexBufferChanged || this._vertexAttributeEnabled.h[position] != vertexAttributeEnabled) {
			if(vertexAttributeEnabled) {
				this.gl.enableVertexAttribArray(position);
				this.checkForErrors();
				this._vertexAttributeEnabled.h[position] = true;
			} else {
				this.gl.disableVertexAttribArray(position);
				this.checkForErrors();
				this._vertexAttributeEnabled.h[position] = false;
			}
		}
	}
	,uploadVertexBufferData: function(vertexBuffer,offset,size,data) {
		this.gl.bindBuffer(34962,this._vertexBuffers.h[vertexBuffer]);
		this.gl.bufferSubData(34962,offset * 4,new Float32Array(data));
		this.checkForErrors();
	}
	,deleteVertexBuffer: function(vertexBuffer) {
		var currentVertexBuffer = this._currentVertexBuffer.keys();
		while(currentVertexBuffer.hasNext()) {
			var currentVertexBuffer1 = currentVertexBuffer.next();
			if(this._currentVertexBuffer.h[currentVertexBuffer1] == vertexBuffer) {
				this._currentVertexBuffer.h[currentVertexBuffer1] = 0;
			}
		}
		this.gl.deleteBuffer(this._vertexBuffers.h[vertexBuffer]);
		this._vertexBuffers.remove(vertexBuffer);
		this.checkForErrors();
	}
	,createIndexBuffer: function(size) {
		var indexBuffer = this.gl.createBuffer();
		this.gl.bindBuffer(34963,indexBuffer);
		this.gl.bufferData(34963,size * 2,35044);
		minko_render_GlContext.indexBufferCount += 1;
		this._currentIndexBuffer = minko_render_GlContext.indexBufferCount;
		this._indexBuffers.h[minko_render_GlContext.indexBufferCount] = indexBuffer;
		this.checkForErrors();
		return minko_render_GlContext.indexBufferCount;
	}
	,uploaderIndexBufferData: function(indexBuffer,offset,size,data) {
		if(this._currentIndexBuffer != indexBuffer) {
			this.gl.bindBuffer(34963,this._indexBuffers.h[indexBuffer]);
			this._currentIndexBuffer = indexBuffer;
		}
		this.gl.bufferSubData(34963,offset * 2,new Uint16Array(data));
		this.checkForErrors();
	}
	,deleteIndexBuffer: function(indexBuffer) {
		if(this._currentIndexBuffer == indexBuffer) {
			this._currentIndexBuffer = 0;
		}
		this.gl.deleteBuffer(this._indexBuffers.h[indexBuffer]);
		this._indexBuffers.remove(indexBuffer);
		this.checkForErrors();
	}
	,createTexture: function(type,width,height,mipMapping,optimizeForRenderToTexture,assertPowerOfTwoSized) {
		if(assertPowerOfTwoSized == null) {
			assertPowerOfTwoSized = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		if(assertPowerOfTwoSized) {
			if(!(width != 0 && (width & width - 1) == 0)) {
				throw new js__$Boot_HaxeError("width");
			}
			if(!(height != 0 && (height & height - 1) == 0)) {
				throw new js__$Boot_HaxeError("height");
			}
		} else if(mipMapping) {
			throw new js__$Boot_HaxeError("assertPowerOfTwoSized must be true when mipMapping is true");
		}
		var texture = this.gl.createTexture();
		var glTarget = type == 0 ? 3553 : 34067;
		this.gl.bindTexture(glTarget,texture);
		minko_render_GlContext.textureCount++;
		this._currentBoundTexture = minko_render_GlContext.textureCount;
		this.gl.texParameteri(glTarget,10242,33071);
		this.gl.texParameteri(glTarget,10243,33071);
		this.gl.texParameteri(glTarget,10241,9728);
		this.gl.texParameteri(glTarget,10240,9728);
		this._textures.h[minko_render_GlContext.textureCount] = texture;
		var _this = this._textureSizes;
		var key = minko_render_GlContext.textureCount;
		var value = new minko_Tuple(width,height);
		_this.h[key] = value;
		this._textureHasMipmaps.h[minko_render_GlContext.textureCount] = mipMapping;
		this._textureTypes.h[minko_render_GlContext.textureCount] = type;
		this._currentWrapMode.h[minko_render_GlContext.textureCount] = 0;
		this._currentTextureFilter.h[minko_render_GlContext.textureCount] = 0;
		this._currentMipFilter.h[minko_render_GlContext.textureCount] = 0;
		if(mipMapping) {
			var level = 0;
			var h = height;
			var w = width;
			var size = width > height ? width : height;
			while(size > 0) {
				if(type == 0) {
					this.gl.texImage2D(3553,level,6408,w,h,0,6408,5121,null);
				} else {
					this.gl.texImage2D(34069,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34070,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34071,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34072,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34073,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34074,level,6408,w,h,0,6408,5121,null);
				}
				++level;
				size >>= 1;
				w >>= 1;
				h >>= 1;
			}
		} else if(type == 0) {
			this.gl.texImage2D(3553,0,6408,width,height,0,6408,5121,null);
		} else {
			this.gl.texImage2D(34069,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34070,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34071,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34072,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34073,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34074,0,6408,width,height,0,6408,5121,null);
		}
		if(optimizeForRenderToTexture) {
			this.createRTTBuffers(type,minko_render_GlContext.textureCount,width,height);
		}
		this.checkForErrors();
		return minko_render_GlContext.textureCount;
	}
	,createRectangleTexture: function(type,width,height) {
		return this.createTexture(type,width,height,false,false,false);
	}
	,createCompressedTexture: function(type,format,width,height,mipMapping) {
		if(!(width != 0 && (width & width - 1) == 0)) {
			throw new js__$Boot_HaxeError("width");
		}
		if(!(height != 0 && (height & height - 1) == 0)) {
			throw new js__$Boot_HaxeError("height");
		}
		var texture = this.gl.createTexture();
		var glTarget = type == 0 ? 3553 : 34067;
		this.gl.bindTexture(glTarget,texture);
		minko_render_GlContext.textureCount++;
		this._currentBoundTexture = minko_render_GlContext.textureCount;
		this.gl.texParameteri(glTarget,10242,33071);
		this.gl.texParameteri(glTarget,10243,33071);
		this.gl.texParameteri(glTarget,10241,9728);
		this.gl.texParameteri(glTarget,10240,9728);
		this._textures.h[minko_render_GlContext.textureCount] = texture;
		var _this = this._textureSizes;
		var key = minko_render_GlContext.textureCount;
		var value = new minko_Tuple(width,height);
		_this.h[key] = value;
		this._textureHasMipmaps.h[minko_render_GlContext.textureCount] = mipMapping;
		this._textureTypes.h[minko_render_GlContext.textureCount] = type;
		this._currentWrapMode.h[minko_render_GlContext.textureCount] = 0;
		this._currentTextureFilter.h[minko_render_GlContext.textureCount] = 0;
		this._currentMipFilter.h[minko_render_GlContext.textureCount] = 0;
		var oglFormat = this.availableTextureFormats().h[format];
		var level = 0;
		var h = height;
		var w = width;
		if(mipMapping) {
			var size = width > height ? width : height;
			while(size > 0) {
				var dataSize = minko_render_TextureFormatInfo.textureSize(format,w,h);
				var data = new haxe_io_Bytes(new ArrayBuffer(dataSize));
				if(type == 0) {
					this.gl.compressedTexImage2D(3553,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
				} else {
					this.gl.compressedTexImage2D(34069,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34070,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34071,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34072,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34073,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34074,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
				}
				++level;
				size >>= 1;
				w >>= 1;
				h >>= 1;
			}
		} else {
			var dataSize1 = minko_render_TextureFormatInfo.textureSize(format,width,height);
			var data1 = new haxe_io_Bytes(new ArrayBuffer(dataSize1));
			if(type == 0) {
				this.gl.compressedTexImage2D(3553,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
			} else {
				this.gl.compressedTexImage2D(34069,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34070,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34071,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34072,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34073,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34074,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
			}
		}
		this.checkForErrors();
		return minko_render_GlContext.textureCount;
	}
	,getTextureType: function(textureId) {
		var foundTypeIt = this._textureTypes.h[textureId];
		return foundTypeIt;
	}
	,uploadTexture2dData: function(texture,width,height,mipLevel,data) {
		this.gl.bindTexture(3553,this._textures.h[texture]);
		this.gl.texImage2D(3553,mipLevel,6408,width,height,0,6408,5121,new Uint8Array(data.b.bufferValue));
		this._currentBoundTexture = texture;
		this.checkForErrors();
	}
	,uploadCubeTextureData: function(texture,face,width,height,mipLevel,data) {
		this.gl.bindTexture(34067,this._textures.h[texture]);
		var cubeFace = 0;
		switch(face) {
		case 0:
			cubeFace = 34069;
			break;
		case 1:
			cubeFace = 34070;
			break;
		case 2:
			cubeFace = 34071;
			break;
		case 3:
			cubeFace = 34072;
			break;
		case 4:
			cubeFace = 34073;
			break;
		case 5:
			cubeFace = 34074;
			break;
		default:
			throw new js__$Boot_HaxeError("");
		}
		this.gl.texImage2D(cubeFace,mipLevel,6408,width,height,0,6408,5121,new Uint8Array(data.b.bufferValue));
		this._currentBoundTexture = texture;
		this.checkForErrors();
	}
	,uploadCompressedTexture2dData: function(texture,format,width,height,size,mipLevel,data) {
		var formats = this.availableTextureFormats();
		this.gl.bindTexture(3553,this._textures.h[texture]);
		this.gl.compressedTexSubImage2D(3553,mipLevel,0,0,width,height,formats.h[format],new Uint8Array(data.b.bufferValue));
		this._currentBoundTexture = texture;
		this.checkForErrors();
	}
	,uploadCompressedCubeTextureData: function(texture,face,format,width,height,mipLevel,data) {
		throw new js__$Boot_HaxeError("");
	}
	,activateMipMapping: function(texture) {
		this._textureHasMipmaps.h[texture] = true;
	}
	,deleteTexture: function(texture) {
		this.gl.deleteTexture(this._textures.h[texture]);
		this._textures.remove(texture);
		if(this._frameBuffers.h.hasOwnProperty(texture)) {
			this.gl.deleteFramebuffer(this._frameBuffers.h[texture]);
			this._frameBuffers.remove(texture);
			this.gl.deleteRenderbuffer(this._renderBuffers.h[texture]);
			this._renderBuffers.remove(texture);
		}
		this._textureSizes.remove(texture);
		this._textureHasMipmaps.remove(texture);
		this._textureTypes.remove(texture);
		this._currentWrapMode.remove(texture);
		this._currentTextureFilter.remove(texture);
		this._currentMipFilter.remove(texture);
		this._currentTexture.h[texture] = 0;
		this._currentBoundTexture = this._currentBoundTexture == texture ? 0 : this._currentBoundTexture;
		this.checkForErrors();
	}
	,setTextureAt: function(position,texture,location) {
		if(location == null) {
			location = -1;
		}
		var textureIsValid = texture > 0;
		if(!textureIsValid) {
			return;
		}
		if(position >= Lambda.count(this._currentTexture)) {
			return;
		}
		var glTarget = this.getTextureType(texture) == 0 ? 3553 : 34067;
		if(this._currentTexture.h[position] != texture || this._currentBoundTexture != texture) {
			this.gl.activeTexture(33984 + position);
			this.gl.bindTexture(glTarget,this._textures.h[texture]);
			this._currentTexture.h[position] = texture;
			this._currentBoundTexture = texture;
		}
		if(textureIsValid && location >= 0) {
			this.gl.uniform1i(this._uniformInputLocations.h[location],position);
		}
		this.checkForErrors();
	}
	,setSamplerStateAt: function(position,wrapping,filtering,mipFiltering) {
		var texture = this._currentTexture.h[position];
		var glTarget = this.getTextureType(texture) == 0 ? 3553 : 34067;
		var active = false;
		if(!this._textureHasMipmaps.h[texture]) {
			mipFiltering = 0;
		}
		if(this._currentWrapMode.h[texture] != wrapping) {
			this._currentWrapMode.h[texture] = wrapping;
			this.gl.activeTexture(33984 + position);
			active = true;
			switch(wrapping) {
			case 0:
				this.gl.texParameteri(glTarget,10242,33071);
				this.gl.texParameteri(glTarget,10243,33071);
				break;
			case 1:
				this.gl.texParameteri(glTarget,10242,10497);
				this.gl.texParameteri(glTarget,10243,10497);
				break;
			}
		}
		if(this._currentTextureFilter.h[texture] != filtering || this._currentMipFilter.h[texture] != mipFiltering) {
			this._currentTextureFilter.h[texture] = filtering;
			this._currentMipFilter.h[texture] = mipFiltering;
			if(!active) {
				this.gl.activeTexture(33984 + position);
			}
			switch(filtering) {
			case 0:
				switch(mipFiltering) {
				case 0:
					this.gl.texParameteri(glTarget,10241,9728);
					break;
				case 1:
					this.gl.texParameteri(glTarget,10241,9984);
					break;
				case 2:
					this.gl.texParameteri(glTarget,10241,9986);
					break;
				}
				this.gl.texParameteri(glTarget,10240,9728);
				break;
			case 1:
				switch(mipFiltering) {
				case 0:
					this.gl.texParameteri(glTarget,10241,9729);
					break;
				case 1:
					this.gl.texParameteri(glTarget,10241,9985);
					break;
				case 2:
					this.gl.texParameteri(glTarget,10241,9987);
					break;
				}
				this.gl.texParameteri(glTarget,10240,9729);
				break;
			}
		}
		this.checkForErrors();
	}
	,createProgram: function() {
		var handle = this.gl.createProgram();
		this.checkForErrors();
		minko_render_GlContext.programCount++;
		this._programs.h[minko_render_GlContext.programCount] = handle;
		return minko_render_GlContext.programCount;
	}
	,attachShader: function(program,shader) {
		this.gl.attachShader(this._programs.h[program],this._shaders.h[shader]);
		this.checkForErrors();
	}
	,linkProgram: function(program) {
		this.gl.linkProgram(this._programs.h[program]);
		this.checkForErrors();
	}
	,deleteProgram: function(program) {
		this.gl.deleteProgram(this._programs.h[program]);
		this._programs.remove(program);
		this.checkForErrors();
	}
	,compileShader: function(shader) {
		this.gl.compileShader(this._shaders.h[shader]);
		this.checkForErrors();
	}
	,setProgram: function(program) {
		if(this._currentProgram == program) {
			return;
		}
		this._currentProgram = program;
		this.gl.useProgram(this._programs.h[program]);
		this.checkForErrors();
	}
	,setShaderSource: function(shader,source) {
		var sourceString = source;
		this.gl.shaderSource(this._shaders.h[shader],sourceString);
		this.checkForErrors();
	}
	,getShaderSource: function(shader) {
		var source = this.gl.getShaderSource(this._shaders.h[shader]);
		this.checkForErrors();
		return source;
	}
	,createVertexShader: function() {
		var vertexShader = this.gl.createShader(35633);
		minko_render_GlContext.shaderCount++;
		this._vertexShaders.h[minko_render_GlContext.shaderCount] = vertexShader;
		this._shaders.h[minko_render_GlContext.shaderCount] = vertexShader;
		this.checkForErrors();
		return minko_render_GlContext.shaderCount;
	}
	,deleteVertexShader: function(vertexShader) {
		this.gl.deleteShader(this._vertexShaders.h[vertexShader]);
		this._vertexShaders.remove(vertexShader);
		this._shaders.remove(vertexShader);
		this.checkForErrors();
	}
	,createFragmentShader: function() {
		var fragmentShader = this.gl.createShader(35632);
		minko_render_GlContext.shaderCount++;
		this._fragmentShaders.h[minko_render_GlContext.shaderCount] = fragmentShader;
		this._shaders.h[minko_render_GlContext.shaderCount] = fragmentShader;
		this.checkForErrors();
		return minko_render_GlContext.shaderCount;
	}
	,deleteFragmentShader: function(fragmentShader) {
		this.gl.deleteShader(this._fragmentShaders.h[fragmentShader]);
		this._fragmentShaders.remove(fragmentShader);
		this._shaders.remove(fragmentShader);
		this.checkForErrors();
	}
	,getProgramInputs: function(program) {
		this.setProgram(program);
		var ip = new minko_render_ProgramInputs();
		var program1 = this._programs.h[program];
		var inputs = [];
		var total = -1;
		var maxUniformNameLength = -1;
		total = this.gl.getProgramParameter(program1,35718);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveUniform(program1,i);
			this.checkForErrors();
			var name = activeInfo.name;
			var size = activeInfo.size;
			var type = activeInfo.type;
			var inputType = this.convertInputType(type);
			var location = this.gl.getUniformLocation(program1,name);
			if(location != null && inputType != 0) {
				if(this._uniformInputLocationKeys.h.__keys__[location.__id__] != null == false) {
					minko_render_GlContext.locationCount++;
					this._uniformInputLocationKeys.set(location,minko_render_GlContext.locationCount);
					this._uniformInputLocations.h[minko_render_GlContext.locationCount] = location;
				}
				var location_index = this._uniformInputLocationKeys.h[location.__id__];
				inputs.push(new minko_render_UniformInput(name,location_index,size,inputType));
			}
		}
		var tmp = inputs;
		var program2 = this._programs.h[program];
		var inputs1 = [];
		var total1 = -1;
		var maxAttributeNameLength = -1;
		total1 = this.gl.getProgramParameter(program2,35721);
		var _g11 = 0;
		var _g2 = total1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var activeInfo1 = this.gl.getActiveAttrib(program2,i1);
			var size1 = activeInfo1.size;
			var type1 = activeInfo1.type;
			var name1 = activeInfo1.name;
			this.checkForErrors();
			var location1 = this.gl.getAttribLocation(program2,name1);
			if(location1 >= 0) {
				inputs1.push(new minko_render_AttributeInput(name1,location1));
			}
		}
		ip.setProgramInputs(tmp,inputs1);
		return ip;
	}
	,convertInputType: function(type) {
		switch(type) {
		case 5124:
			return 1;
		case 5126:
			return 9;
		case 35664:
			return 10;
		case 35665:
			return 11;
		case 35666:
			return 12;
		case 35667:
			return 2;
		case 35668:
			return 3;
		case 35669:
			return 4;
		case 35670:
			return 5;
		case 35671:
			return 6;
		case 35672:
			return 7;
		case 35673:
			return 8;
		case 35675:
			return 13;
		case 35676:
			return 14;
		case 35678:
			return 15;
		case 35680:
			return 16;
		default:
			throw new js__$Boot_HaxeError("unsupported type");
		}
	}
	,getUniformInput: function(program,name) {
		var program1 = this._programs.h[program];
		var inputs = [];
		var total = -1;
		var maxUniformNameLength = -1;
		total = this.gl.getProgramParameter(program1,35718);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveUniform(program1,i);
			this.checkForErrors();
			var name1 = activeInfo.name;
			var size = activeInfo.size;
			var type = activeInfo.type;
			var inputType = this.convertInputType(type);
			var location = this.gl.getUniformLocation(program1,name1);
			if(location != null && inputType != 0) {
				if(this._uniformInputLocationKeys.h.__keys__[location.__id__] != null == false) {
					minko_render_GlContext.locationCount++;
					this._uniformInputLocationKeys.set(location,minko_render_GlContext.locationCount);
					this._uniformInputLocations.h[minko_render_GlContext.locationCount] = location;
				}
				var location_index = this._uniformInputLocationKeys.h[location.__id__];
				inputs.push(new minko_render_UniformInput(name1,location_index,size,inputType));
			}
		}
		var inputs1 = inputs;
		inputs1 = inputs1.filter(function(i1) {
			return i1.name == name;
		});
		if(inputs1.length > 0) {
			return inputs1[0];
		} else {
			return null;
		}
	}
	,getUniformInputs: function(program) {
		var inputs = [];
		var total = -1;
		var maxUniformNameLength = -1;
		total = this.gl.getProgramParameter(program,35718);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveUniform(program,i);
			this.checkForErrors();
			var name = activeInfo.name;
			var size = activeInfo.size;
			var type = activeInfo.type;
			var inputType = this.convertInputType(type);
			var location = this.gl.getUniformLocation(program,name);
			if(location != null && inputType != 0) {
				if(this._uniformInputLocationKeys.h.__keys__[location.__id__] != null == false) {
					minko_render_GlContext.locationCount++;
					this._uniformInputLocationKeys.set(location,minko_render_GlContext.locationCount);
					this._uniformInputLocations.h[minko_render_GlContext.locationCount] = location;
				}
				var location_index = this._uniformInputLocationKeys.h[location.__id__];
				inputs.push(new minko_render_UniformInput(name,location_index,size,inputType));
			}
		}
		return inputs;
	}
	,getAttributeInput: function(program,name) {
		var program1 = this._programs.h[program];
		var inputs = [];
		var total = -1;
		var maxAttributeNameLength = -1;
		total = this.gl.getProgramParameter(program1,35721);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveAttrib(program1,i);
			var size = activeInfo.size;
			var type = activeInfo.type;
			var name1 = activeInfo.name;
			this.checkForErrors();
			var location = this.gl.getAttribLocation(program1,name1);
			if(location >= 0) {
				inputs.push(new minko_render_AttributeInput(name1,location));
			}
		}
		var inputs1 = inputs;
		inputs1 = inputs1.filter(function(i1) {
			return i1.name == name;
		});
		if(inputs1.length > 0) {
			return inputs1[0];
		} else {
			return null;
		}
	}
	,getAttributeInputs: function(program) {
		var inputs = [];
		var total = -1;
		var maxAttributeNameLength = -1;
		total = this.gl.getProgramParameter(program,35721);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveAttrib(program,i);
			var size = activeInfo.size;
			var type = activeInfo.type;
			var name = activeInfo.name;
			this.checkForErrors();
			var location = this.gl.getAttribLocation(program,name);
			if(location >= 0) {
				inputs.push(new minko_render_AttributeInput(name,location));
			}
		}
		return inputs;
	}
	,getShaderCompilationLogs: function(shader) {
		var compileStatus = this.gl.getShaderParameter(this._shaders.h[shader],35713);
		if(compileStatus == false) {
			var logs = this.gl.getShaderInfoLog(this._shaders.h[shader]);
			return logs;
		}
		return "";
	}
	,getProgramInfoLogs: function(program) {
		var programInfo = this.gl.getProgramInfoLog(this._programs.h[program]);
		return programInfo;
	}
	,setBlendingModeSD: function(source,destination) {
		if((source | destination) != this._currentBlendingMode) {
			this._currentBlendingMode = source | destination;
			this.gl.blendFunc(minko_render_GlContext._blendingFactors.h[source & 255],minko_render_GlContext._blendingFactors.h[destination & 65280]);
			this.checkForErrors();
		}
	}
	,setBlendingMode: function(blendingMode) {
		if(blendingMode != this._currentBlendingMode) {
			this._currentBlendingMode = blendingMode;
			this.gl.blendFunc(minko_render_GlContext._blendingFactors.h[blendingMode & 255],minko_render_GlContext._blendingFactors.h[blendingMode & 65280]);
			this.checkForErrors();
		}
	}
	,setDepthTest: function(depthMask,depthFunc) {
		if(depthMask != this._currentDepthMask || depthFunc != this._currentDepthFunc) {
			this._currentDepthMask = depthMask;
			this._currentDepthFunc = depthFunc;
			this.gl.depthMask(depthMask);
			this.gl.depthFunc(minko_render_GlContext._compareFuncs.h[depthFunc]);
			this.checkForErrors();
		}
	}
	,setColorMask: function(colorMask) {
		if(this._currentColorMask != colorMask) {
			this._currentColorMask = colorMask;
			this.gl.colorMask(colorMask,colorMask,colorMask,colorMask);
			this.checkForErrors();
		}
	}
	,setStencilTest: function(stencilFunc,stencilRef,stencilMask,stencilFailOp,stencilZFailOp,stencilZPassOp) {
		if(stencilFunc != this._currentStencilFunc || stencilRef != this._currentStencilRef || stencilMask != this._currentStencilMask) {
			this._currentStencilFunc = stencilFunc;
			this._currentStencilRef = stencilRef;
			this._currentStencilMask = stencilMask;
			this.gl.stencilFunc(minko_render_GlContext._compareFuncs.h[stencilFunc],stencilRef,stencilMask);
			this.checkForErrors();
		}
		if(stencilFailOp != this._currentStencilFailOp || stencilZFailOp != this._currentStencilZFailOp || stencilZPassOp != this._currentStencilZPassOp) {
			this._currentStencilFailOp = stencilFailOp;
			this._currentStencilZFailOp = stencilZFailOp;
			this._currentStencilZPassOp = stencilZPassOp;
			this.gl.stencilOp(minko_render_GlContext._stencilOps.h[stencilFailOp],minko_render_GlContext._stencilOps.h[stencilZFailOp],minko_render_GlContext._stencilOps.h[stencilZPassOp]);
			this.checkForErrors();
		}
	}
	,readRectPixels: function(x,y,width,height,pixels) {
		this.gl.readPixels(x,y,width,height,6408,5121,pixels.b);
		this.checkForErrors();
	}
	,setScissorTest: function(scissorTest,scissorBox) {
		if(scissorTest == this._scissorTest && scissorBox == this._scissorBox) {
			return;
		}
		if(scissorTest) {
			this.gl.enable(3089);
			var x = 0;
			var y = 0;
			var width = 0;
			var height = 0;
			if(scissorBox.z < 0 || scissorBox.w < 0) {
				x = this._viewportX;
				y = this._viewportY;
				width = this._viewportWidth;
				height = this._viewportHeight;
			} else {
				x = scissorBox.x | 0;
				y = scissorBox.y | 0;
				width = scissorBox.z | 0;
				height = scissorBox.w | 0;
			}
			this.gl.scissor(x,y,width,height);
		} else {
			this.gl.disable(3089);
		}
		this._scissorTest = scissorTest;
		this._scissorBox = scissorBox;
		this.checkForErrors();
	}
	,readPixels: function(pixels) {
		this.gl.readPixels(this._viewportX,this._viewportY,this._viewportWidth,this._viewportHeight,6408,5121,pixels.b);
		this.checkForErrors();
	}
	,setTriangleCulling: function(triangleCulling) {
		if(triangleCulling == this._currentTriangleCulling) {
			return;
		}
		if(this._currentTriangleCulling == 0) {
			this.gl.enable(2884);
		}
		this._currentTriangleCulling = triangleCulling;
		switch(triangleCulling) {
		case 0:
			this.gl.disable(2884);
			break;
		case 1:
			this.gl.cullFace(1028);
			break;
		case 2:
			this.gl.cullFace(1029);
			break;
		case 3:
			this.gl.cullFace(1032);
			break;
		}
		this.checkForErrors();
	}
	,createRTTBuffers: function(type,textureKey,width,height) {
		var texture = this._textures.h[textureKey];
		var frameBuffer = this.gl.createFramebuffer();
		this.gl.bindFramebuffer(36160,frameBuffer);
		if(type == 0) {
			this.gl.framebufferTexture2D(36160,36064,3553,texture,0);
		} else {
			this.gl.framebufferTexture2D(36160,36064,34069,texture,0);
			this.gl.framebufferTexture2D(36160,36065,34070,texture,0);
			this.gl.framebufferTexture2D(36160,36066,34071,texture,0);
			this.gl.framebufferTexture2D(36160,36067,34072,texture,0);
			this.gl.framebufferTexture2D(36160,36068,34073,texture,0);
			this.gl.framebufferTexture2D(36160,36069,34074,texture,0);
		}
		var renderBuffer = this.gl.createRenderbuffer();
		this.gl.bindRenderbuffer(36161,renderBuffer);
		this.gl.renderbufferStorage(36161,33189,width,height);
		this.gl.framebufferRenderbuffer(36160,36096,36161,renderBuffer);
		var status = this.gl.checkFramebufferStatus(36160);
		if(status != 36053) {
			throw new js__$Boot_HaxeError("");
		}
		this._frameBuffers.h[textureKey] = frameBuffer;
		this._renderBuffers.h[textureKey] = renderBuffer;
		this.gl.bindFramebuffer(36160,null);
		this.gl.bindRenderbuffer(36161,null);
		this.checkForErrors();
	}
	,setRenderToBackBuffer: function() {
		if(this._currentTarget == 0) {
			return;
		}
		this.gl.bindFramebuffer(36160,null);
		this.gl.bindRenderbuffer(36161,null);
		this.configureViewport(this._oldViewportX,this._oldViewportY,this._oldViewportWidth,this._oldViewportHeight);
		this._currentTarget = 0;
		this.checkForErrors();
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		if(texture == this._currentTarget) {
			return;
		}
		if(this._frameBuffers.h.hasOwnProperty(texture) == false) {
			throw new js__$Boot_HaxeError("this texture cannot be used for RTT");
		}
		if(this._renderBuffers.h.hasOwnProperty(texture) == false) {
			throw new js__$Boot_HaxeError("this texture cannot be used for RTT");
		}
		if(this._currentTarget == 0) {
			this._oldViewportX = this._viewportX;
			this._oldViewportY = this._viewportY;
			this._oldViewportWidth = this._viewportWidth;
			this._oldViewportHeight = this._viewportHeight;
		}
		this._currentTarget = texture;
		this.gl.bindFramebuffer(36160,this._frameBuffers.h[texture]);
		this.checkForErrors();
		if(enableDepthAndStencil) {
			this.gl.bindRenderbuffer(36161,this._renderBuffers.h[texture]);
			this.checkForErrors();
		}
		var textureSize = this._textureSizes.h[texture];
		this.configureViewport(0,0,textureSize.first,textureSize.second);
		this.checkForErrors();
	}
	,getError: function() {
		return 0;
	}
	,generateMipmaps: function(texture) {
		this.gl.bindTexture(3553,this._textures.h[texture]);
		if(this._oglMajorVersion < 3) {
			this.gl.generateMipmap(3553);
		} else {
			this.gl.generateMipmap(3553);
		}
		this.checkForErrors();
		this._currentBoundTexture = texture;
	}
	,setUniformFloat: function(location,count,v) {
		this.gl.uniform1fv(this._uniformInputLocations.h[location],v);
	}
	,setUniformFloat2: function(location,count,v) {
		this.gl.uniform2fv(this._uniformInputLocations.h[location],v);
	}
	,setUniformFloat3: function(location,count,v) {
		this.gl.uniform3fv(this._uniformInputLocations.h[location],v);
	}
	,setUniformFloat4: function(location,count,v) {
		this.gl.uniform4fv(this._uniformInputLocations.h[location],v);
	}
	,setUniformMatrix4x4: function(location,count,v) {
		this.gl.uniformMatrix4fv(this._uniformInputLocations.h[location],false,v);
	}
	,setUniformInt: function(location,count,v) {
		this.gl.uniform1iv(this._uniformInputLocations.h[location],v);
	}
	,setUniformInt2: function(location,count,v) {
		this.gl.uniform2iv(this._uniformInputLocations.h[location],v);
	}
	,setUniformInt3: function(location,count,v) {
		this.gl.uniform3iv(this._uniformInputLocations.h[location],v);
	}
	,setUniformInt4: function(location,count,v) {
		this.gl.uniform4iv(this._uniformInputLocations.h[location],v);
	}
	,supportsExtension: function(extensionNameString) {
		return this.gl.getExtension(extensionNameString) != null;
	}
	,availableTextureFormats: function() {
		if(Lambda.count(minko_render_GlContext._availableTextureFormats) > 0) {
			return minko_render_GlContext._availableTextureFormats;
		}
		var formats = minko_render_GlContext._availableTextureFormats;
		formats.h[0] = 6407;
		formats.h[1] = 6408;
		var rawFormats = this.gl.getParameter(34467);
		var _g = 0;
		try {
			while(_g < rawFormats.length) {
				var rawFormat = rawFormats[_g];
				++_g;
				switch(rawFormat) {
				case 33776:
					formats.h[2] = 33776;
					throw "__break__";
					break;
				case 33777:
					formats.h[3] = 33777;
					throw "__break__";
					break;
				case 33778:
					formats.h[4] = 33778;
					throw "__break__";
					break;
				case 33779:
					formats.h[5] = 33779;
					throw "__break__";
					break;
				case 35840:
					formats.h[9] = 35840;
					throw "__break__";
					break;
				case 35841:
					formats.h[8] = 35841;
					throw "__break__";
					break;
				case 35842:
					formats.h[11] = 35842;
					throw "__break__";
					break;
				case 35843:
					formats.h[10] = 35843;
					throw "__break__";
					break;
				case 35986:
					formats.h[14] = 35986;
					throw "__break__";
					break;
				case 35987:
					formats.h[15] = 35987;
					throw "__break__";
					break;
				case 36196:
					formats.h[6] = 36196;
					formats.h[7] = 36196;
					throw "__break__";
					break;
				case 37175:
					formats.h[12] = 37175;
					throw "__break__";
					break;
				case 37176:
					formats.h[13] = 37176;
					throw "__break__";
					break;
				default:
					throw "__break__";
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return formats;
	}
	,__class__: minko_render_GlContext
});
var minko_render_IndexBuffer = $hx_exports["minko"]["render"]["IndexBuffer"] = function(context) {
	minko_render_AbstractResource.call(this,context);
	this._data = [];
	this._numIndices = 0;
	this._changed = new minko_signal_Signal();
};
minko_render_IndexBuffer.__name__ = true;
minko_render_IndexBuffer.create = function(context) {
	return new minko_render_IndexBuffer(context);
};
minko_render_IndexBuffer.createbyData = function(context,data) {
	var ptr = new minko_render_IndexBuffer(context);
	ptr.set_data(data);
	ptr.upload();
	return ptr;
};
minko_render_IndexBuffer.__super__ = minko_render_AbstractResource;
minko_render_IndexBuffer.prototype = $extend(minko_render_AbstractResource.prototype,{
	get_data: function() {
		return this._data;
	}
	,set_data: function(v) {
		this._data = v;
		return this._data;
	}
	,get_dataPointer: function() {
		return this._data;
	}
	,get_numIndices: function() {
		return this._numIndices;
	}
	,upload: function() {
		this.uploadOffset();
	}
	,uploadOffset: function(offset,count) {
		if(count == null) {
			count = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		if(this.get_data().length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createIndexBuffer(this.get_data().length);
		}
		var oldNumIndices = this._numIndices;
		this._numIndices = count > 0 ? count : this.get_data().length;
		this._context.uploaderIndexBufferData(this._id,offset,this._numIndices,this.get_data());
		if(this._numIndices != oldNumIndices) {
			this._changed.execute(this);
		}
	}
	,uploadOffsetData: function(offset,count,data) {
		if(data.length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createIndexBuffer(data.length);
		}
		var numIndices = count > 0 ? count : data.length;
		this._numIndices = numIndices;
		this._context.uploaderIndexBufferData(this._id,offset,numIndices,data);
		this._changed.execute(this);
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteIndexBuffer(this._id);
		}
		this._id = -1;
		this._numIndices = 0;
		this.disposeData();
		this._changed.execute(null);
	}
	,disposeData: function() {
		if(this._data != null) {
			this._data = null;
		}
	}
	,equals: function(indexBuffer) {
		return this.get_dataPointer() == indexBuffer.get_dataPointer();
	}
	,get_changed: function() {
		return this._changed;
	}
	,__class__: minko_render_IndexBuffer
});
var minko_render_Pass = $hx_exports["minko"]["render"]["Pass"] = function(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings) {
	this._name = name;
	this._isForward = isForward;
	this._programTemplate = program;
	this._attributeBindings = minko_data_BindingMapBase.copyFrom(new minko_data_BindingMapBase(),attributeBindings);
	this._uniformBindings = minko_data_BindingMapBase.copyFrom(new minko_data_BindingMapBase(),uniformBindings);
	this._stateBindings = minko_data_BindingMapBase.copyFrom(new minko_data_BindingMapBase(),stateBindings);
	this._macroBindings = minko_data_MacroBindingMap.copyFrom2(new minko_data_MacroBindingMap(),macroBindings);
	this._states = minko_render_States.createbyProvider(this._stateBindings.defaultValues.get_providers()[0]);
	this._signatureToProgram = new haxe_ds_ObjectMap();
	this._uniformFunctions = new haxe_ds_StringMap();
	this._attributeFunctions = new haxe_ds_StringMap();
	this._macroFunctions = new haxe_ds_StringMap();
	this._signature = new haxe_ds_StringMap();
};
minko_render_Pass.__name__ = true;
minko_render_Pass.create = function(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings) {
	return new minko_render_Pass(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings);
};
minko_render_Pass.createbyPass = function(pass,deepCopy) {
	if(deepCopy == null) {
		deepCopy = false;
	}
	var p = minko_render_Pass.create(pass._name,pass._isForward,deepCopy ? minko_render_Program.createbyProgram(pass._programTemplate,deepCopy) : pass._programTemplate,pass._attributeBindings,pass._uniformBindings,pass._stateBindings,pass._macroBindings);
	var signatureProgram = pass._signatureToProgram.keys();
	while(signatureProgram.hasNext()) {
		var signatureProgram1 = signatureProgram.next();
		var programSignature = new minko_render_ProgramSignature().copyFrom(signatureProgram1);
		p._signatureToProgram.set(programSignature,pass._signatureToProgram.h[signatureProgram1.__id__]);
		var _this = p._signature;
		var key = programSignature.get_key();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,programSignature);
		} else {
			_this.h[key] = programSignature;
		}
	}
	p._uniformFunctions = pass._uniformFunctions;
	p._attributeFunctions = pass._attributeFunctions;
	p._macroFunctions = pass._macroFunctions;
	if(pass._programTemplate.get_isReady()) {
		var _this1 = p._uniformFunctions;
		var nameAndFunc = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(nameAndFunc.hasNext()) {
			var nameAndFunc1 = nameAndFunc.next();
			nameAndFunc1(pass._programTemplate);
		}
		var _this2 = p._attributeFunctions;
		var nameAndFunc2 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(nameAndFunc2.hasNext()) {
			var nameAndFunc3 = nameAndFunc2.next();
			nameAndFunc3(pass._programTemplate);
		}
		var _this3 = p._macroFunctions;
		var nameAndFunc4 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
		while(nameAndFunc4.hasNext()) {
			var nameAndFunc5 = nameAndFunc4.next();
			nameAndFunc5(pass._programTemplate);
		}
	}
	return p;
};
minko_render_Pass.setUniformOnProgram = function(program,name,values) {
	program.setUniform(name,values);
};
minko_render_Pass.setVertexAttributeOnProgram = function(program,name,attribute) {
	program.setAttributebyName(name,attribute);
};
minko_render_Pass.defineOnProgram = function(program,macroName) {
	program.define(macroName);
};
minko_render_Pass.defineOnProgramWithValue = function(program,macroName,value) {
};
minko_render_Pass.prototype = {
	dispose: function() {
		var signatureAndProgram = this._signatureToProgram.iterator();
		while(signatureAndProgram.hasNext()) {
			var signatureAndProgram1 = signatureAndProgram.next();
			if(signatureAndProgram1 != null) {
				signatureAndProgram1.dispose();
			}
		}
	}
	,get_name: function() {
		return this._name;
	}
	,get_isForward: function() {
		return this._isForward;
	}
	,get_program: function() {
		return this._programTemplate;
	}
	,get_attributeBindings: function() {
		return this._attributeBindings;
	}
	,get_uniformBindings: function() {
		return this._uniformBindings;
	}
	,get_stateBindings: function() {
		return this._stateBindings;
	}
	,get_macroBindings: function() {
		return this._macroBindings;
	}
	,get_states: function() {
		return this._states;
	}
	,setUniform: function(name,values) {
		var _this = this._uniformFunctions;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,function(program1) {
				minko_render_Pass.setUniformOnProgram(program1,name,values);
			});
		} else {
			_this.h[name] = function(program1) {
				minko_render_Pass.setUniformOnProgram(program1,name,values);
			};
		}
		if(this._programTemplate.get_isReady()) {
			this._programTemplate.setUniform(name,values);
		}
		var signatureAndProgram = this._signatureToProgram.iterator();
		while(signatureAndProgram.hasNext()) {
			var signatureAndProgram1 = signatureAndProgram.next();
			signatureAndProgram1.setUniform(name,values);
		}
	}
	,setAttribute: function(name,attribute) {
		var _this = this._attributeFunctions;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,function(program1) {
				minko_render_Pass.setVertexAttributeOnProgram(program1,name,attribute);
			});
		} else {
			_this.h[name] = function(program1) {
				minko_render_Pass.setVertexAttributeOnProgram(program1,name,attribute);
			};
		}
		if(this._programTemplate.get_isReady()) {
			this._programTemplate.setAttributebyName(name,attribute);
		}
		var signatureAndProgram = this._signatureToProgram.iterator();
		while(signatureAndProgram.hasNext()) {
			var signatureAndProgram1 = signatureAndProgram.next();
			signatureAndProgram1.setAttributebyName(name,attribute);
		}
	}
	,define: function(macroName) {
		var _this = this._macroFunctions;
		if(__map_reserved[macroName] != null) {
			_this.setReserved(macroName,function(program1) {
				minko_render_Pass.defineOnProgram(program1,macroName);
			});
		} else {
			_this.h[macroName] = function(program1) {
				minko_render_Pass.defineOnProgram(program1,macroName);
			};
		}
		this._programTemplate.define(macroName);
	}
	,setDefine: function(macroName,macroValue) {
		var _this = this._macroFunctions;
		if(__map_reserved[macroName] != null) {
			_this.setReserved(macroName,function(program1) {
				minko_render_Pass.defineOnProgramWithValue(program1,macroName,macroValue);
			});
		} else {
			_this.h[macroName] = function(program1) {
				minko_render_Pass.defineOnProgramWithValue(program1,macroName,macroValue);
			};
		}
		this._programTemplate.setDefine(macroName,macroValue);
	}
	,selectProgram: function(vars,targetData,rendererData,rootData) {
		var program = null;
		var signature = new minko_render_ProgramSignature();
		if(Lambda.count(this._macroBindings.bindings) == 0) {
			program = this._programTemplate;
		} else {
			signature.bind(this._macroBindings,vars,targetData,rendererData,rootData);
			var signatureKey = signature.get_key();
			var _this = this._signature;
			var foundProgramIt = __map_reserved[signatureKey] != null ? _this.existsReserved(signatureKey) : _this.h.hasOwnProperty(signatureKey);
			if(foundProgramIt) {
				signature.dispose();
				var _this1 = this._signature;
				if(__map_reserved[signatureKey] != null) {
					signature = _this1.getReserved(signatureKey);
				} else {
					signature = _this1.h[signatureKey];
				}
				program = this._signatureToProgram.h[signature.__id__];
				return new minko_Tuple(program,signature);
			} else {
				var _this2 = this._signature;
				if(__map_reserved[signatureKey] != null) {
					_this2.setReserved(signatureKey,signature);
				} else {
					_this2.h[signatureKey] = signature;
				}
				program = minko_render_Program.createbyProgram(this._programTemplate,true);
				this._signatureToProgram.set(signature,program);
				signature.updateProgram(program);
			}
		}
		return new minko_Tuple(this.finalizeProgram(program),signature);
	}
	,finalizeProgram: function(program) {
		if(!program.get_vertexShader().get_isReady()) {
			program.get_vertexShader().upload();
		}
		if(!program.get_fragmentShader().get_isReady()) {
			program.get_fragmentShader().upload();
		}
		if(!program.get_isReady()) {
			try {
				program.upload();
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,haxe_io_Error) ) {
					throw new js__$Boot_HaxeError(e);
				} else throw(e);
			}
			var _this = this._uniformFunctions;
			var nameAndFunc = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(nameAndFunc.hasNext()) {
				var nameAndFunc1 = nameAndFunc.next();
				nameAndFunc1(program);
			}
			var _this1 = this._attributeFunctions;
			var nameAndFunc2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(nameAndFunc2.hasNext()) {
				var nameAndFunc3 = nameAndFunc2.next();
				nameAndFunc3(program);
			}
			var _this2 = this._macroFunctions;
			var nameAndFunc4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(nameAndFunc4.hasNext()) {
				var nameAndFunc5 = nameAndFunc4.next();
				nameAndFunc5(program);
			}
		}
		return program;
	}
	,__class__: minko_render_Pass
};
var minko_render_Program = $hx_exports["minko"]["render"]["Program"] = function(_name,context) {
	minko_render_AbstractResource.call(this,context);
	this._name = _name;
	this._inputs = new minko_render_ProgramInputs();
	this._setUniforms = [];
	this._setTextures = [];
	this._setAttributes = [];
	this._definedMacros = [];
};
minko_render_Program.__name__ = true;
minko_render_Program.create = function(name,context) {
	return new minko_render_Program(name,context);
};
minko_render_Program.createbyProgram = function(program,deepCopy) {
	if(deepCopy == null) {
		deepCopy = false;
	}
	var p = minko_render_Program.create(program._name,program._context);
	p._vertexShader = deepCopy ? minko_render_Shader.createbyShader(program._vertexShader) : program._vertexShader;
	p._fragmentShader = deepCopy ? minko_render_Shader.createbyShader(program._fragmentShader) : program._fragmentShader;
	p._inputs = new minko_render_ProgramInputs();
	p._setTextures = [];
	p._setAttributes = [];
	return p;
};
minko_render_Program.createbyShader = function(name,context,vertexShader,fragmentShader) {
	var p = minko_render_Program.create(name,context);
	p._vertexShader = vertexShader;
	p._fragmentShader = fragmentShader;
	return p;
};
minko_render_Program.__super__ = minko_render_AbstractResource;
minko_render_Program.prototype = $extend(minko_render_AbstractResource.prototype,{
	clearDefinedMacros: function() {
		this._definedMacros = [];
		this._vertexShader.clearDefinedMacros();
		this._fragmentShader.clearDefinedMacros();
	}
	,get_name: function() {
		return this._name;
	}
	,get_vertexShader: function() {
		return this._vertexShader;
	}
	,get_fragmentShader: function() {
		return this._fragmentShader;
	}
	,get_setTextureNames: function() {
		return this._setTextures;
	}
	,get_setAttributeNames: function() {
		return this._setAttributes;
	}
	,get_setUniformNames: function() {
		return this._setUniforms;
	}
	,get_definedMacroNames: function() {
		return this._definedMacros;
	}
	,get_inputs: function() {
		return this._inputs;
	}
	,upload: function() {
		this._id = this.get_context().createProgram();
		this._context.attachShader(this._id,this._vertexShader.get_id());
		this._context.attachShader(this._id,this._fragmentShader.get_id());
		this._context.linkProgram(this._id);
		this._inputs.copyFrom(this._context.getProgramInputs(this._id));
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteProgram(this._id);
			this._id = -1;
		}
		this._vertexShader = null;
		this._fragmentShader = null;
	}
	,setUniform: function(name,v) {
	}
	,setUniformFloat: function(size,name,count,v) {
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			switch(size) {
			case 1:
				this._context.setUniformFloat(it.location,count,v);
				break;
			case 2:
				this._context.setUniformFloat2(it.location,count,v);
				break;
			case 3:
				this._context.setUniformFloat3(it.location,count,v);
				break;
			case 4:
				this._context.setUniformFloat4(it.location,count,v);
				break;
			case 16:
				this._context.setUniformMatrix4x4(it.location,count,v);
				break;
			}
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name);
		}
		return this;
	}
	,setUniformInt: function(size,name,count,v) {
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			switch(size) {
			case 1:
				this._context.setUniformInt(it.location,count,v);
				break;
			case 2:
				this._context.setUniformInt2(it.location,count,v);
				break;
			case 3:
				this._context.setUniformInt3(it.location,count,v);
				break;
			case 4:
				this._context.setUniformInt4(it.location,count,v);
				break;
			}
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name);
		}
		return this;
	}
	,setUniformFloat1: function(name,v) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat(it.location,1,v);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformFloat2: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat2(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformFloat3: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat3(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformFloat4: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat4(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformMatrix4x4: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformMatrix4x4(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformInt1: function(name,v) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt(it.location,1,v);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformInt2: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt2(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformInt3: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt3(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformInt4: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt4(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformAbstractTexture: function(name,texture) {
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setTextureAt(this._setTextures.length,texture.get_id(),it.location);
			this._context.setProgram(oldProgram);
			this._setTextures.push(name);
			this._setUniforms.push(name);
		}
		return this;
	}
	,define: function(macroName) {
		this._vertexShader.define(macroName);
		this._fragmentShader.define(macroName);
		this._definedMacros.push(macroName);
		return this;
	}
	,setDefine: function(macroName,value) {
		this._vertexShader.setDefine(macroName,value);
		this._fragmentShader.setDefine(macroName,value);
		this._definedMacros.push(macroName);
		return this;
	}
	,setAttributebyName: function(name,attribute) {
		return this.setAttribute(name,attribute,name);
	}
	,setAttribute: function(name,attribute,attributeName) {
		var it = Lambda.find(this._inputs.get_attributes(),function(a) {
			return a.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setVertexBufferAt(it.location,attribute.resourceId,attribute.size,attribute.vertexSize,attribute.offset);
			this._context.setProgram(oldProgram);
			this._setAttributes.push(name);
		}
		return this;
	}
	,__class__: minko_render_Program
});
var minko_render_AbstractInput = $hx_exports["minko"]["render"]["AbstractInput"] = function(name,location) {
	this.name = name;
	this.location = location;
};
minko_render_AbstractInput.__name__ = true;
minko_render_AbstractInput.prototype = {
	dispose: function() {
	}
	,__class__: minko_render_AbstractInput
};
var minko_render_UniformInput = $hx_exports["minko"]["render"]["UniformInput"] = function(name,location,size,type) {
	minko_render_AbstractInput.call(this,name,location);
	this.size = size;
	this.type = type;
};
minko_render_UniformInput.__name__ = true;
minko_render_UniformInput.__super__ = minko_render_AbstractInput;
minko_render_UniformInput.prototype = $extend(minko_render_AbstractInput.prototype,{
	__class__: minko_render_UniformInput
});
var minko_render_AttributeInput = $hx_exports["minko"]["render"]["AttributeInput"] = function(name,location) {
	minko_render_AbstractInput.call(this,name,location);
};
minko_render_AttributeInput.__name__ = true;
minko_render_AttributeInput.__super__ = minko_render_AbstractInput;
minko_render_AttributeInput.prototype = $extend(minko_render_AbstractInput.prototype,{
	__class__: minko_render_AttributeInput
});
var minko_render_ProgramInputs = $hx_exports["minko"]["render"]["ProgramInputs"] = function() {
	this._uniforms = [];
	this._attributes = [];
};
minko_render_ProgramInputs.__name__ = true;
minko_render_ProgramInputs.typeToString = function(type) {
	switch(type) {
	case 0:
		return "unknown";
	case 1:
		return "int1";
	case 2:
		return "int2";
	case 3:
		return "int3";
	case 4:
		return "int4";
	case 5:
		return "bool1";
	case 6:
		return "bool2";
	case 7:
		return "bool3";
	case 8:
		return "bool4";
	case 9:
		return "float1";
	case 10:
		return "float2";
	case 11:
		return "float3";
	case 12:
		return "float4";
	case 13:
		return "float9";
	case 14:
		return "float16";
	case 15:
		return "sampler2d";
	case 16:
		return "samplerCube";
	default:
		throw new js__$Boot_HaxeError("type");
	}
};
minko_render_ProgramInputs.prototype = {
	get_uniforms: function() {
		return this._uniforms;
	}
	,get_attributes: function() {
		return this._attributes;
	}
	,copyFrom: function(inputs) {
		this._uniforms = inputs._uniforms.concat([]);
		this._attributes = inputs._attributes.concat([]);
		return this;
	}
	,setProgramInputs: function(uniforms,attributes) {
		this._uniforms = uniforms.concat([]);
		this._attributes = attributes.concat([]);
	}
	,__class__: minko_render_ProgramInputs
};
var minko_render_ProgramSignature = $hx_exports["minko"]["render"]["ProgramSignature"] = function() {
	this._mask = [];
	this._values = [];
	this._types = [];
	this._macros = [];
};
minko_render_ProgramSignature.__name__ = true;
minko_render_ProgramSignature.prototype = {
	get_key: function() {
		return this._macros.toString() + this._values.toString();
	}
	,bind: function(macroBindings,variables,targetData,rendererData,rootData) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 64) {
			var i = _g1++;
			_g.push(0);
		}
		this._mask = _g;
		this._values = [];
		this._macros = [];
		this._types = [];
		var macroId = 0;
		var _g11 = 0;
		var _g2 = macroBindings.defaultValues.get_providers();
		while(_g11 < _g2.length) {
			var provider = _g2[_g11];
			++_g11;
			var propertyNameAndValue = provider.get_values().keys();
			while(propertyNameAndValue.hasNext()) {
				var propertyNameAndValue1 = propertyNameAndValue.next();
				var _this = macroBindings.bindings;
				if(!(__map_reserved[propertyNameAndValue1] != null ? _this.existsReserved(propertyNameAndValue1) : _this.h.hasOwnProperty(propertyNameAndValue1))) {
					this._mask[macroId] = 1;
					this._macros.push(propertyNameAndValue1);
					var _this1 = macroBindings.types;
					this._types.push(__map_reserved[propertyNameAndValue1] != null ? _this1.getReserved(propertyNameAndValue1) : _this1.h[propertyNameAndValue1]);
					var tmp = this._values;
					var _this2 = provider.get_values();
					tmp.push(__map_reserved[propertyNameAndValue1] != null ? _this2.getReserved(propertyNameAndValue1) : _this2.h[propertyNameAndValue1]);
					++macroId;
				}
			}
		}
		var macroNameAndBinding = macroBindings.bindings.keys();
		while(macroNameAndBinding.hasNext()) {
			var macroNameAndBinding1 = macroNameAndBinding.next();
			var macroName = macroNameAndBinding1;
			var _this3 = macroBindings.bindings;
			var macroBinding = __map_reserved[macroNameAndBinding1] != null ? _this3.getReserved(macroNameAndBinding1) : _this3.h[macroNameAndBinding1];
			var propertyName = minko_data_Store.getActualPropertyName(variables,macroBinding.propertyName);
			var store = targetData;
			if(macroBinding.source != 0) {
				if(macroBinding.source == 1) {
					store = rendererData;
				} else {
					store = rootData;
				}
			}
			var macroIsDefined = store.hasProperty(propertyName);
			var hasDefaultValue = macroBindings.defaultValues.hasProperty(propertyName);
			if(macroIsDefined || hasDefaultValue) {
				var _this4 = macroBindings.types;
				var type = __map_reserved[macroName] != null ? _this4.getReserved(macroName) : _this4.h[macroName];
				if(macroId == 64) {
					throw new js__$Boot_HaxeError("");
				}
				this._mask[macroId] = 1;
				this._macros.push(macroName);
				this._types.push(type);
				if(type != 0) {
					var value = this.getValueFromStore(macroIsDefined ? store : macroBindings.defaultValues,propertyName,type);
					if(type == 1) {
						value = Math.max(macroBinding.minValue,Math.min(macroBinding.maxValue,value));
					}
					this._values.push(value);
				}
			}
			++macroId;
		}
	}
	,copyFrom: function(signature) {
		this._mask = signature._mask.concat([]);
		this._values = signature._values;
		this.key = signature.get_key();
		return this;
	}
	,updateProgram: function(program) {
		var typeIndex = 0;
		var macroIndex = 0;
		var valueIndex = 0;
		var _g = 0;
		while(_g < 64) {
			var j = _g++;
			if(this._mask[j] != 0) {
				var _g1 = this._types[typeIndex];
				switch(_g1) {
				case 0:
					program.define(this._macros[macroIndex]);
					break;
				case 1:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 2:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 3:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 4:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 5:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 6:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 7:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 8:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 9:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 10:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 11:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 12:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 13:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 14:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				}
				++typeIndex;
				++macroIndex;
			}
		}
	}
	,getValueFromStore: function(store,propertyName,type) {
		switch(type) {
		case 0:
			throw new js__$Boot_HaxeError("");
			break;
		case 1:
			return store.get(propertyName);
		case 2:
			return store.get(propertyName);
		case 3:
			return store.get(propertyName);
		case 4:
			return store.get(propertyName);
		case 5:
			return store.get(propertyName);
		case 6:
			return store.get(propertyName);
		case 7:
			return store.get(propertyName);
		case 8:
			return store.get(propertyName);
		case 9:
			return store.get(propertyName);
		case 10:
			return store.get(propertyName);
		case 11:
			return store.get(propertyName);
		case 12:
			return store.get(propertyName);
		case 13:
			return store.get(propertyName);
		case 14:
			return store.get(propertyName);
		}
	}
	,dispose: function() {
	}
	,__class__: minko_render_ProgramSignature
};
var minko_render_RectangleTexture = $hx_exports["minko"]["render"]["RectangleTexture"] = function(context,width,height,format,filename) {
	if(filename == null) {
		filename = "";
	}
	minko_render_AbstractTexture.call(this,0,context,width,height,format,false,false,false,filename);
};
minko_render_RectangleTexture.__name__ = true;
minko_render_RectangleTexture.create = function(context,width,height,format,filename) {
	if(filename == null) {
		filename = "";
	}
	return new minko_render_RectangleTexture(context,width,height,format,filename);
};
minko_render_RectangleTexture.__super__ = minko_render_AbstractTexture;
minko_render_RectangleTexture.prototype = $extend(minko_render_AbstractTexture.prototype,{
	get_data: function() {
		return this._data;
	}
	,setData: function(data,widthGPU,heightGPU) {
		if(heightGPU == null) {
			heightGPU = -1;
		}
		if(widthGPU == null) {
			widthGPU = -1;
		}
		if(widthGPU >= 0) {
			if(widthGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("widthGPU");
			}
			this._width = widthGPU;
			this._widthGPU = widthGPU;
		}
		if(heightGPU >= 0) {
			if(heightGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("heightGPU");
			}
			this._height = heightGPU;
			this._heightGPU = heightGPU;
		}
		var size = this._width * this._height * 4;
		this._data = new haxe_io_Bytes(new ArrayBuffer(size));
		if(this._format == 1) {
			this._data.blit(0,data,0,size);
		} else if(this._format == 0) {
			var i = 0;
			var j = 0;
			while(j < size) {
				this._data.b[j] = data.b[i] & 255;
				this._data.b[j + 1] = data.b[i + 1] & 255;
				this._data.b[j + 2] = data.b[i + 2] & 255;
				this._data.b[j + 3] = 255;
				i += 3;
				j += 4;
			}
		}
	}
	,resize: function(width,height,resizeSmoothly) {
		var previousWidth = this.get_width();
		var previousHeight = this.get_height();
		var previousData = this._data;
		this._data = this.resizeData(previousWidth,previousHeight,previousData,width,height,resizeSmoothly);
		this._width = width;
		this._widthGPU = width;
		this._height = height;
		this._heightGPU = height;
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteTexture(this._id);
			this._id = -1;
		}
		this.disposeData();
	}
	,disposeData: function() {
		this._data = null;
	}
	,upload: function() {
		if(this._id == -1) {
			this._id = this._context.createRectangleTexture(this._type,this._widthGPU,this._heightGPU);
		}
		if(this._data.length > 0) {
			this._context.uploadTexture2dData(this._id,this._widthGPU,this._heightGPU,0,this._data);
		}
	}
	,__class__: minko_render_RectangleTexture
});
var minko_render_SamplerStates = $hx_exports["minko"]["render"]["SamplerStates"] = function(wm,tf,mf) {
	this.wrapMode = wm;
	this.textureFilter = tf;
	this.mipFilter = mf;
};
minko_render_SamplerStates.__name__ = true;
minko_render_SamplerStates.uniformNameToSamplerStateName = function(uniformName,sampleState) {
	return uniformName + "/" + sampleState;
};
minko_render_SamplerStates.uniformNameToSamplerStateBindingName = function(uniformName,samplerState) {
	var samplerStateCapitalized = samplerState.charAt(0).toUpperCase() + HxOverrides.substr(samplerState,1,null);
	return uniformName + samplerStateCapitalized;
};
minko_render_SamplerStates.stringToWrapMode = function(value) {
	if(value == "repeat") {
		return 1;
	} else {
		return 0;
	}
};
minko_render_SamplerStates.stringToTextureFilter = function(value) {
	if(value == "linear") {
		return 1;
	} else {
		return 0;
	}
};
minko_render_SamplerStates.stringToMipFilter = function(value) {
	if(value == "linear") {
		return 2;
	} else if(value == "nearest") {
		return 1;
	} else {
		return 0;
	}
};
minko_render_SamplerStates.prototype = {
	__class__: minko_render_SamplerStates
};
var minko_render_Shader = $hx_exports["minko"]["render"]["Shader"] = function(context,type) {
	minko_render_AbstractResource.call(this,context);
	this._type = type;
	this._definedMacros = new haxe_ds_StringMap();
};
minko_render_Shader.__name__ = true;
minko_render_Shader.create = function(context,type) {
	return new minko_render_Shader(context,type);
};
minko_render_Shader.createbySource = function(context,type,source) {
	var s = minko_render_Shader.create(context,type);
	s._source = source;
	return s;
};
minko_render_Shader.createbyShader = function(shader) {
	var s = minko_render_Shader.create(shader.get_context(),shader._type);
	s._source = shader._source;
	var k = shader._definedMacros.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		var _this = s._definedMacros;
		var _this1 = shader._definedMacros;
		var value = __map_reserved[k1] != null ? _this1.getReserved(k1) : _this1.h[k1];
		if(__map_reserved[k1] != null) {
			_this.setReserved(k1,value);
		} else {
			_this.h[k1] = value;
		}
	}
	return s;
};
minko_render_Shader.__super__ = minko_render_AbstractResource;
minko_render_Shader.prototype = $extend(minko_render_AbstractResource.prototype,{
	clearDefinedMacros: function() {
		this._definedMacros = new haxe_ds_StringMap();
	}
	,get_type: function() {
		return this._type;
	}
	,get_source: function() {
		return this._source;
	}
	,set_source: function(v) {
		this._source = v;
		return v;
	}
	,define: function(macroName) {
		if(!Lambda.has(this._definedMacros,macroName)) {
			var _this = this._definedMacros;
			var value = "#define " + macroName + "\n";
			if(__map_reserved[macroName] != null) {
				_this.setReserved(macroName,value);
			} else {
				_this.h[macroName] = value;
			}
		}
	}
	,setDefine: function(macroName,value) {
		if(!Lambda.has(this._definedMacros,macroName)) {
			var _this = this._definedMacros;
			var value1 = "#define " + macroName + " " + value + "\n";
			if(__map_reserved[macroName] != null) {
				_this.setReserved(macroName,value1);
			} else {
				_this.h[macroName] = value1;
			}
		}
	}
	,dispose: function() {
		if(this._type == 0) {
			this._context.deleteVertexShader(this._id);
		} else if(this._type == 1) {
			this._context.deleteFragmentShader(this._id);
		}
		this._id = -1;
	}
	,upload: function() {
		if(this._type == 0) {
			this._id = this._context.createVertexShader();
		} else {
			this._id = this._context.createFragmentShader();
		}
		var source = "#version 100\n  ";
		var _this = this._definedMacros;
		var s = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(s.hasNext()) {
			var s1 = s.next();
			source += s1;
		}
		source += this._source;
		this._context.setShaderSource(this._id,source);
		this._context.compileShader(this._id);
	}
	,__class__: minko_render_Shader
});
var minko_render_States = $hx_exports["minko"]["render"]["States"] = function(priority,zSorted,blendingSourceFactor,blendingDestinationFactor,colorMask,depthMask,depthFunction,triangleCulling,stencilFunction,stencilRef,stencilMask,stencilFailOp,stencilZFailOp,stencilZPassOp,scissorTest,scissorBox,target) {
	if(scissorTest == null) {
		scissorTest = false;
	}
	if(stencilZPassOp == null) {
		stencilZPassOp = 0;
	}
	if(stencilZFailOp == null) {
		stencilZFailOp = 0;
	}
	if(stencilFailOp == null) {
		stencilFailOp = 0;
	}
	if(stencilMask == null) {
		stencilMask = 1;
	}
	if(stencilRef == null) {
		stencilRef = 0;
	}
	if(stencilFunction == null) {
		stencilFunction = 0;
	}
	if(triangleCulling == null) {
		triangleCulling = 2;
	}
	if(depthFunction == null) {
		depthFunction = 4;
	}
	if(depthMask == null) {
		depthMask = true;
	}
	if(colorMask == null) {
		colorMask = true;
	}
	if(blendingDestinationFactor == null) {
		blendingDestinationFactor = 256;
	}
	if(blendingSourceFactor == null) {
		blendingSourceFactor = 2;
	}
	if(zSorted == null) {
		zSorted = false;
	}
	this._data = minko_data_Provider.create();
	this.set_priority(priority == null ? minko_render_States.DEFAULT_PRIORITY : priority);
	this.set_zSorted(zSorted);
	this.set_blendingSourceFactor(blendingSourceFactor);
	this.set_blendingDestinationFactor(blendingDestinationFactor);
	this.set_colorMask(colorMask);
	this.set_depthMask(depthMask);
	this.set_depthFunction(depthFunction);
	this.set_triangleCulling(triangleCulling);
	this.set_stencilFunction(stencilFunction);
	this.set_stencilReference(stencilRef);
	this.set_stencilMask(stencilMask);
	this.set_stencilFailOperation(stencilFailOp);
	this.set_stencilZFailOperation(stencilZFailOp);
	this.set_stencilZPassOperation(stencilZPassOp);
	this.set_scissorTest(scissorTest);
	this.set_scissorBox(scissorBox == null ? minko_render_States.DEFAULT_SCISSOR_BOX : scissorBox);
	this.set_target(target == null ? minko_render_States.DEFAULT_TARGET : target);
};
minko_render_States.__name__ = true;
minko_render_States.createbyProvider = function(a) {
	var s = new minko_render_States();
	s.set_data(a);
	return s;
};
minko_render_States.prototype = {
	copyFrom: function(states) {
		this._data = minko_data_Provider.createbyProvider(states._data);
		return this;
	}
	,resetDefaultValues: function() {
		this._data.set("priority",minko_render_States.DEFAULT_PRIORITY);
		this._data.set("zSorted",false);
		this._data.set("blendingSource",2);
		this._data.set("blendingDestination",256);
		this._data.set("colorMask",true);
		this._data.set("depthMask",true);
		this._data.set("depthFunction",4);
		this._data.set("triangleCulling",2);
		this._data.set("stencilFunction",0);
		this._data.set("stencilReference",0);
		this._data.set("stencilMask",1);
		this._data.set("stencilFailOperation",0);
		this._data.set("stencilZFailOperation",0);
		this._data.set("stencilZPassOperation",0);
		this._data.set("scissorTest",false);
		this._data.set("scissorBox",minko_render_States.DEFAULT_SCISSOR_BOX);
		this._data.set("target",minko_render_States.DEFAULT_TARGET);
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(v) {
		this._data = v;
		return v;
	}
	,get_priority: function() {
		return this._data.get("priority");
	}
	,set_priority: function(priority) {
		this._data.set("priority",priority);
		return priority;
	}
	,get_zSorted: function() {
		return this._data.get("zSorted");
	}
	,set_zSorted: function(zSorted) {
		this._data.set("zSorted",zSorted);
		return zSorted;
	}
	,get_blendingSourceFactor: function() {
		return this._data.get("blendingSource");
	}
	,set_blendingSourceFactor: function(value) {
		this._data.set("blendingSource",value);
		return value;
	}
	,get_blendingDestinationFactor: function() {
		return this._data.get("blendingDestination");
	}
	,set_blendingDestinationFactor: function(value) {
		this._data.set("blendingDestination",value);
		return value;
	}
	,get_colorMask: function() {
		return this._data.get("colorMask");
	}
	,set_colorMask: function(value) {
		this._data.set("colorMask",value);
		return value;
	}
	,get_depthMask: function() {
		return this._data.get("depthMask");
	}
	,set_depthMask: function(value) {
		this._data.set("depthMask",value);
		return value;
	}
	,get_depthFunction: function() {
		return this._data.get("depthFunction");
	}
	,set_depthFunction: function(value) {
		this._data.set("depthFunction",value);
		return value;
	}
	,get_triangleCulling: function() {
		return this._data.get("triangleCulling");
	}
	,set_triangleCulling: function(value) {
		this._data.set("triangleCulling",value);
		return value;
	}
	,get_stencilFunction: function() {
		return this._data.get("stencilFunction");
	}
	,set_stencilFunction: function(value) {
		this._data.set("stencilFunction",value);
		return value;
	}
	,get_stencilReference: function() {
		return this._data.get("stencilReference");
	}
	,set_stencilReference: function(value) {
		this._data.set("stencilReference",value);
		return value;
	}
	,get_stencilMask: function() {
		return this._data.get("stencilMask");
	}
	,set_stencilMask: function(value) {
		this._data.set("stencilMask",value);
		return value;
	}
	,get_stencilFailOperation: function() {
		return this._data.get("stencilFailOperation");
	}
	,set_stencilFailOperation: function(value) {
		this._data.set("stencilFailOperation",value);
		return value;
	}
	,get_stencilZFailOperation: function() {
		return this._data.get("stencilZFailOperation");
	}
	,set_stencilZFailOperation: function(value) {
		this._data.set("stencilZFailOperation",value);
		return value;
	}
	,get_stencilZPassOperation: function() {
		return this._data.get("stencilZPassOperation");
	}
	,set_stencilZPassOperation: function(value) {
		this._data.set("stencilZPassOperation",value);
		return value;
	}
	,get_scissorTest: function() {
		return this._data.get("scissorTest");
	}
	,set_scissorTest: function(value) {
		this._data.set("scissorTest",value);
		return value;
	}
	,get_scissorBox: function() {
		return this._data.get("scissorBox");
	}
	,set_scissorBox: function(value) {
		this._data.set("scissorBox",value);
		return value;
	}
	,get_target: function() {
		return this._data.get("target");
	}
	,set_target: function(value) {
		this._data.set("target",value);
		return value;
	}
	,__class__: minko_render_States
};
var minko_render_Texture = $hx_exports["minko"]["render"]["Texture"] = function(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename) {
	if(filename == null) {
		filename = "";
	}
	if(format == null) {
		format = 1;
	}
	if(resizeSmoothly == null) {
		resizeSmoothly = true;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	minko_render_AbstractTexture.call(this,0,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
	this._data = [];
};
minko_render_Texture.__name__ = true;
minko_render_Texture.create = function(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename) {
	if(filename == null) {
		filename = "";
	}
	if(format == null) {
		format = 1;
	}
	if(resizeSmoothly == null) {
		resizeSmoothly = true;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	return new minko_render_Texture(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename);
};
minko_render_Texture.__super__ = minko_render_AbstractTexture;
minko_render_Texture.prototype = $extend(minko_render_AbstractTexture.prototype,{
	get_data: function() {
		return this._data;
	}
	,setData: function(data,widthGPU,heightGPU) {
		if(widthGPU >= 0) {
			if(widthGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("widthGPU");
			}
			this._width = widthGPU;
			this._widthGPU = widthGPU;
		}
		if(heightGPU >= 0) {
			if(heightGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("heightGPU");
			}
			this._height = heightGPU;
			this._heightGPU = heightGPU;
		}
		if(!minko_render_TextureFormatInfo.isCompressed(this._format)) {
			var size = this._width * this._height * 4;
			var rgba = new haxe_io_Bytes(new ArrayBuffer(size));
			if(this._format == 1) {
				rgba.blit(0,data,0,size);
			} else if(this._format == 0) {
				this._format = 1;
				var i = 0;
				var j = 0;
				while(j < size) {
					rgba.b[j] = data.b[i] & 255;
					rgba.b[j + 1] = data.b[i + 1] & 255;
					rgba.b[j + 2] = data.b[i + 2] & 255;
					rgba.b[j + 3] = 255;
					i += 3;
					j += 4;
				}
			}
			rgba = this.resizeData(this._width,this._height,rgba,this._widthGPU,this._heightGPU,this._resizeSmoothly);
			this._data.push(rgba);
		} else {
			var size1 = minko_render_TextureFormatInfo.textureSize(this._format,this._width,this._height);
			var rgb = new haxe_io_Bytes(new ArrayBuffer(size1));
			rgb.blit(0,data,0,size1);
			this._data.push(rgb);
		}
	}
	,resize: function(width,height,resizeSmoothly) {
		var previousWidth = this.get_width();
		var previousHeight = this.get_height();
		var previousNumMipMaps;
		if(this.get_data().length > minko_render_TextureFormatInfo.textureSize(this._format,previousWidth,previousHeight)) {
			var tmp = previousWidth;
			var p = 0;
			while(tmp >= 1) {
				++p;
				tmp >>= 1;
			}
			previousNumMipMaps = p + 1;
		} else {
			previousNumMipMaps = 1;
		}
		var numMipMaps;
		if(previousNumMipMaps > 1) {
			var tmp1 = width;
			var p1 = 0;
			while(tmp1 >= 1) {
				++p1;
				tmp1 >>= 1;
			}
			numMipMaps = p1 + 1;
		} else {
			numMipMaps = 1;
		}
		var newData = [];
		var _g1 = 0;
		var _g = numMipMaps;
		while(_g1 < _g) {
			var i = _g1++;
			var mipMapPreviousWidth = Math.floor(Math.max(previousWidth >> i,1));
			var mipMapPreviousHeight = Math.floor(Math.max(previousHeight >> i,1));
			var mipMapWidth = width >> i;
			var mipMapHeight = height >> i;
			var mipMapData = new haxe_io_Bytes(new ArrayBuffer(minko_render_TextureFormatInfo.textureSize(this._format,mipMapPreviousWidth,mipMapPreviousHeight)));
			var newMipMapData = this.resizeData(mipMapPreviousWidth,mipMapPreviousHeight,mipMapData,mipMapWidth,mipMapHeight,resizeSmoothly);
			newData.push(newMipMapData);
		}
		this._data = newData;
		this._width = width;
		this._widthGPU = width;
		this._height = height;
		this._heightGPU = height;
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteTexture(this._id);
			this.set_id(-1);
		}
		this.disposeData();
	}
	,disposeData: function() {
		this._data = null;
	}
	,upload: function() {
		if(this._id == -1) {
			if(minko_render_TextureFormatInfo.isCompressed(this._format)) {
				this.set_id(this._context.createCompressedTexture(this._type,this._format,this._widthGPU,this._heightGPU,this._mipMapping));
			} else {
				this.set_id(this._context.createTexture(this._type,this._widthGPU,this._heightGPU,this._mipMapping,this._optimizeForRenderToTexture));
			}
		}
		if(this._data.length > 0) {
			if(minko_render_TextureFormatInfo.isCompressed(this._format)) {
				this._context.uploadCompressedTexture2dData(this._id,this._format,this._widthGPU,this._heightGPU,this._data.length,0,this._data[0]);
			} else {
				this._context.uploadTexture2dData(this._id,this._widthGPU,this._heightGPU,0,this._data[0]);
				if(this._mipMapping) {
					this._context.generateMipmaps(this._id);
				}
			}
		}
	}
	,uploadMipLevel: function(level,data) {
		var width = this._widthGPU >> level;
		var height = this._heightGPU >> level;
		if(minko_render_TextureFormatInfo.isCompressed(this._format)) {
			var size = minko_render_TextureFormatInfo.textureSize(this._format,width,height);
			this._context.uploadCompressedTexture2dData(this._id,this._format,width,height,size,level,data);
		} else {
			this._context.uploadTexture2dData(this._id,width,height,level,data);
		}
	}
	,__class__: minko_render_Texture
});
var minko_render_Entry = $hx_exports["minko"]["render"]["Entry"] = function(name,isCompressed,numBitsPerPixel,minimumSize,hasAlphaChannel,hasSeparateAlphaChannel) {
	this._name = name;
	this._isCompressed = isCompressed;
	this._numBitsPerPixel = numBitsPerPixel;
	this._minimumSize = minimumSize;
	this._hasAlphaChannel = hasAlphaChannel;
	this._hasSeparateAlphaChannel = hasSeparateAlphaChannel;
};
minko_render_Entry.__name__ = true;
minko_render_Entry.prototype = {
	__class__: minko_render_Entry
};
var minko_render_TextureFormatInfo = $hx_exports["minko"]["render"]["TextureFormatInfo"] = function() { };
minko_render_TextureFormatInfo.__name__ = true;
minko_render_TextureFormatInfo.initializeFormatsMap = function() {
	var m = new haxe_ds_IntMap();
	var value = new minko_render_Entry("RGB",false,24,3,false,false);
	m.h[0] = value;
	var value1 = new minko_render_Entry("RGBA",false,32,4,true,false);
	m.h[1] = value1;
	var value2 = new minko_render_Entry("RGB_DXT1",true,4,8,false,false);
	m.h[2] = value2;
	var value3 = new minko_render_Entry("RGBA_DXT1",true,4,8,true,false);
	m.h[3] = value3;
	var value4 = new minko_render_Entry("RGBA_DXT3",true,8,16,true,false);
	m.h[4] = value4;
	var value5 = new minko_render_Entry("RGBA_DXT5",true,8,16,true,false);
	m.h[5] = value5;
	var value6 = new minko_render_Entry("RGB_ETC1",true,4,8,false,false);
	m.h[6] = value6;
	var value7 = new minko_render_Entry("RGBA_ETC1",true,4,8,true,true);
	m.h[7] = value7;
	var value8 = new minko_render_Entry("RGB_PVRTC1_2BPP",true,2,32,false,false);
	m.h[8] = value8;
	var value9 = new minko_render_Entry("RGB_PVRTC1_4BPP",true,4,32,false,false);
	m.h[9] = value9;
	var value10 = new minko_render_Entry("RGBA_PVRTC1_2BPP",true,2,32,true,false);
	m.h[10] = value10;
	var value11 = new minko_render_Entry("RGBA_PVRTC1_4BPP",true,4,32,true,false);
	m.h[11] = value11;
	var value12 = new minko_render_Entry("RGBA_PVRTC2_2BPP",true,2,32,true,false);
	m.h[12] = value12;
	var value13 = new minko_render_Entry("RGBA_PVRTC2_4BPP",true,4,32,true,false);
	m.h[13] = value13;
	var value14 = new minko_render_Entry("RGB_ATITC",true,8,16,false,false);
	m.h[14] = value14;
	var value15 = new minko_render_Entry("RGBA_ATITC",true,8,16,true,false);
	m.h[15] = value15;
	return m;
};
minko_render_TextureFormatInfo.isSupported = function(format) {
	return false;
};
minko_render_TextureFormatInfo.textureSize = function(format,width,height) {
	return Math.floor(Math.max(minko_render_TextureFormatInfo.minimumSize(format),minko_render_TextureFormatInfo.numBitsPerPixel(format) / 8.0 * width * height));
};
minko_render_TextureFormatInfo.$name = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._name;
};
minko_render_TextureFormatInfo.isCompressed = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._isCompressed;
};
minko_render_TextureFormatInfo.numBitsPerPixel = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._numBitsPerPixel;
};
minko_render_TextureFormatInfo.minimumSize = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._minimumSize;
};
minko_render_TextureFormatInfo.hasAlphaChannel = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._hasAlphaChannel;
};
minko_render_TextureFormatInfo.hasSeparateAlphaChannel = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._hasSeparateAlphaChannel;
};
minko_render_TextureFormatInfo.get_textureFormats = function() {
	var formats = [];
	var textureFormat = minko_render_TextureFormatInfo._formats.keys();
	while(textureFormat.hasNext()) {
		var textureFormat1 = textureFormat.next();
		formats.push(textureFormat1);
	}
	return formats;
};
var minko_render_TextureSampler = $hx_exports["minko"]["render"]["TextureSampler"] = function(uuid,id) {
	this.uuid = uuid;
	this.id = id;
	this.mipFilter = 0;
	this.textureFilter = 0;
	this.wrapMode = 0;
};
minko_render_TextureSampler.__name__ = true;
minko_render_TextureSampler.prototype = {
	copyFrom: function(rhs) {
		this.uuid = rhs.uuid;
		this.id = rhs.id;
		this.mipFilter = rhs.mipFilter;
		this.textureFilter = rhs.textureFilter;
		this.wrapMode = rhs.wrapMode;
	}
	,equals: function(rhs) {
		if(this.uuid == rhs.uuid && this.id == rhs.id && this.mipFilter == rhs.mipFilter && this.textureFilter == rhs.textureFilter) {
			return this.wrapMode == rhs.wrapMode;
		} else {
			return false;
		}
	}
	,__class__: minko_render_TextureSampler
};
var minko_render_VertexAttribute = $hx_exports["minko"]["render"]["VertexAttribute"] = function(_id,_vertexSize,name,size,actualOffset) {
	this.resourceId = _id;
	this.vertexSize = _vertexSize;
	this.name = name;
	this.size = size;
	this.offset = actualOffset;
};
minko_render_VertexAttribute.__name__ = true;
minko_render_VertexAttribute.prototype = {
	equals: function(rhs) {
		if(this.resourceId == rhs.resourceId && this.vertexSize == rhs.vertexSize && this.name == rhs.name && this.size == rhs.size) {
			return this.offset == rhs.offset;
		} else {
			return false;
		}
	}
	,__class__: minko_render_VertexAttribute
};
var minko_render_VertexBuffer = $hx_exports["minko"]["render"]["VertexBuffer"] = function(context) {
	minko_render_AbstractResource.call(this,context);
	this._data = [];
	this._attributes = [];
	this._vertexSize = 0;
	this._vertexSizeChanged = new minko_signal_Signal2();
};
minko_render_VertexBuffer.__name__ = true;
minko_render_VertexBuffer.create = function(context) {
	return new minko_render_VertexBuffer(context);
};
minko_render_VertexBuffer.createbyVec3Data = function(context,data,len) {
	var ptr = new minko_render_VertexBuffer(context);
	ptr.set_data([]);
	var _g = 0;
	while(_g < data.length) {
		var d = data[_g];
		++_g;
		ptr.get_data().push(d.x);
		ptr.get_data().push(d.y);
		ptr.get_data().push(d.z);
	}
	ptr.upload();
	return ptr;
};
minko_render_VertexBuffer.createbyData = function(context,data) {
	var ptr = new minko_render_VertexBuffer(context);
	ptr.set_data(data);
	ptr.upload();
	return ptr;
};
minko_render_VertexBuffer.__super__ = minko_render_AbstractResource;
minko_render_VertexBuffer.prototype = $extend(minko_render_AbstractResource.prototype,{
	set_data: function(v) {
		this._data = v;
		return v;
	}
	,get_data: function() {
		return this._data;
	}
	,get_attributes: function() {
		return this._attributes;
	}
	,get_vertexSize: function() {
		return this._vertexSize;
	}
	,set_vertexSize: function(value) {
		var offset = value - this._vertexSize;
		this._vertexSize = value;
		this._vertexSizeChanged.execute(this,offset);
		return value;
	}
	,get_vertexSizeChanged: function() {
		return this._vertexSizeChanged;
	}
	,get_numVertices: function() {
		if(this._vertexSize > 0) {
			return Math.floor(this._data.length / this._vertexSize);
		} else {
			return 0;
		}
	}
	,upload: function() {
		this.uploadOffset(0,0);
	}
	,uploadOffset: function(offset,numVertices) {
		if(numVertices == null) {
			numVertices = 0;
		}
		if(this._data.length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createVertexBuffer(this._data.length);
		}
		this._context.uploadVertexBufferData(this._id,offset * this._vertexSize,numVertices == 0 ? this._data.length : numVertices * this._vertexSize,this._data);
	}
	,uploadData: function(offset,numVertices,data) {
		if(data.length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createVertexBuffer(data.length);
		}
		this._context.uploadVertexBufferData(this._id,offset * this._vertexSize,numVertices == 0 ? data.length : numVertices * this._vertexSize,data);
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteVertexBuffer(this._id);
			this._id = -1;
		}
		this.disposeData();
	}
	,disposeData: function() {
		this._data = null;
	}
	,addAttribute: function(name,size,offset) {
		if(offset == null) {
			offset = 0;
		}
		var _gthis = this;
		if(this.hasAttribute(name)) {
			throw new js__$Boot_HaxeError("name");
		}
		var actualOffset = offset;
		if(actualOffset == 0) {
			actualOffset = this._vertexSize;
		}
		this._attributes.push(new minko_render_VertexAttribute(this._id,this._vertexSize,name,size,actualOffset));
		this.set_vertexSize(this._vertexSize + size);
		this._attributes = this._attributes.map(function(a) {
			a.vertexSize = _gthis.get_vertexSize();
			return a;
		});
	}
	,removeAttribute: function(attributeName) {
		var _gthis = this;
		var it = Lambda.find(this._attributes,function(attr) {
			return attr.name == attributeName;
		});
		if(it == null) {
			throw new js__$Boot_HaxeError("attributeName = " + attributeName);
		}
		this.set_vertexSize(this._vertexSize - it.size);
		HxOverrides.remove(this._attributes,it);
		this._attributes = this._attributes.map(function(a) {
			a.vertexSize = _gthis.get_vertexSize();
			return a;
		});
	}
	,hasAttribute: function(attributeName) {
		var it = Lambda.exists(this._attributes,function(attr) {
			return attr.name == attributeName;
		});
		return it;
	}
	,attribute: function(attributeName) {
		var it = Lambda.find(this._attributes,function(attr) {
			return attr.name == attributeName;
		});
		if(it == null) {
			throw new js__$Boot_HaxeError("attributeName = " + attributeName);
		}
		return it;
	}
	,equals: function(vertexBuffer) {
		return this._data == vertexBuffer._data;
	}
	,__class__: minko_render_VertexBuffer
});
var minko_scene_Node = $hx_exports["minko"]["scene"]["Node"] = function(n) {
	if(n == null) {
		n = "";
	}
	minko_Enable_$uuid.call(this);
	this._name = n;
	this._layout = 1;
	this._children = [];
	this._container = new minko_data_Store();
	this._components = [];
	this._added = new minko_signal_Signal3();
	this._removed = new minko_signal_Signal3();
	this._layoutChanged = new minko_signal_Signal2();
	this._componentAdded = new minko_signal_Signal3();
	this._componentRemoved = new minko_signal_Signal3();
};
minko_scene_Node.__name__ = true;
minko_scene_Node.create = function(n) {
	if(n == null) {
		n = "";
	}
	var node = new minko_scene_Node(n);
	node._root = node;
	return node;
};
minko_scene_Node.createbyLayout = function(n,l) {
	var node = new minko_scene_Node(n);
	node._root = node;
	node.set_layout(l);
	return node;
};
minko_scene_Node.__super__ = minko_Enable_$uuid;
minko_scene_Node.prototype = $extend(minko_Enable_$uuid.prototype,{
	clone: function(option) {
		var clone = this.cloneNode();
		var nodeMap = new haxe_ds_ObjectMap();
		var componentsMap = new haxe_ds_ObjectMap();
		this.listItems(clone,nodeMap,componentsMap);
		this.rebindComponentsDependencies(componentsMap,nodeMap,option);
		var itn = nodeMap.keys();
		while(itn.hasNext()) {
			var itn1 = itn.next();
			var node = itn1;
			var originComponents = node.getComponents(minko_component_AbstractComponent);
			var itc = componentsMap.keys();
			while(itc.hasNext()) {
				var itc1 = itc.next();
				var component = itc1;
				if(Lambda.has(originComponents,component)) {
					nodeMap.h[node.__id__].addComponent(componentsMap.h[component.__id__]);
				}
			}
		}
		return nodeMap.h[this.__id__];
	}
	,cloneNode: function() {
		var clone = minko_scene_Node.create();
		clone._name = this.get_name() + "_clone";
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			clone.addChild(child.cloneNode());
		}
		return clone;
	}
	,listItems: function(clonedRoot,nodeMap,components) {
		var _g = 0;
		var _g1 = this._components;
		while(_g < _g1.length) {
			var component = _g1[_g];
			++_g;
			components.set(component,component.clone(1));
		}
		nodeMap.set(this,clonedRoot);
		var _g11 = 0;
		var _g2 = this.get_children().length;
		while(_g11 < _g2) {
			var childId = _g11++;
			var child = this.get_children()[childId];
			var clonedChild = clonedRoot.get_children()[childId];
			child.listItems(clonedChild,nodeMap,components);
		}
	}
	,rebindComponentsDependencies: function(componentsMap,nodeMap,option) {
		var comp = componentsMap.keys();
		while(comp.hasNext()) {
			var comp1 = comp.next();
			var compClone = js_Boot.__cast(componentsMap.h[comp1.__id__] , minko_component_AbstractComponent);
			if(compClone != null) {
				compClone.rebindDependencies(componentsMap,nodeMap,option);
			}
		}
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(v) {
		this._name = v;
		return v;
	}
	,get_layout: function() {
		return this._layout;
	}
	,set_layout: function(v) {
		if(v != this._layout) {
			this._layout = v;
			var descendants = minko_scene_NodeSet.createbyNode(this).descendants(true);
			var _g = 0;
			var _g1 = descendants.get_nodes();
			while(_g < _g1.length) {
				var descendant = _g1[_g];
				++_g;
				descendant._layoutChanged.execute(descendant,this);
			}
			var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors();
			var _g2 = 0;
			var _g11 = ancestors.get_nodes();
			while(_g2 < _g11.length) {
				var ancestor = _g11[_g2];
				++_g2;
				ancestor._layoutChanged.execute(ancestor,this);
			}
		}
		return v;
	}
	,get_parent: function() {
		return this._parent;
	}
	,get_root: function() {
		return this._root;
	}
	,get_children: function() {
		return this._children;
	}
	,get_data: function() {
		return this._container;
	}
	,get_added: function() {
		return this._added;
	}
	,get_removed: function() {
		return this._removed;
	}
	,get_layoutChanged: function() {
		return this._layoutChanged;
	}
	,get_componentAdded: function() {
		return this._componentAdded;
	}
	,get_componentRemoved: function() {
		return this._componentRemoved;
	}
	,addChild: function(child) {
		if(child.get_parent() != null) {
			child.get_parent().removeChild(child);
		}
		this._children.push(child);
		child._parent = this;
		child.updateRoot();
		var descendants = minko_scene_NodeSet.createbyNode(child).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._added.execute(descendant,child,this);
		}
		var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors(true);
		var _g2 = 0;
		var _g11 = ancestors.get_nodes();
		while(_g2 < _g11.length) {
			var ancestor = _g11[_g2];
			++_g2;
			ancestor._added.execute(ancestor,child,this);
		}
		return this;
	}
	,removeChild: function(child) {
		var it = Lambda.has(this._children,child);
		if(it == false) {
			throw new js__$Boot_HaxeError("child");
		}
		HxOverrides.remove(this._children,child);
		child._parent = null;
		child.updateRoot();
		var descendants = minko_scene_NodeSet.createbyNode(child).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._removed.execute(descendant,child,this);
		}
		var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors(true);
		var _g2 = 0;
		var _g11 = ancestors.get_nodes();
		while(_g2 < _g11.length) {
			var ancestor = _g11[_g2];
			++_g2;
			ancestor._removed.execute(ancestor,child,this);
		}
		return this;
	}
	,removeChildren: function() {
		var numChildren = this._children.length;
		var i = numChildren - 1;
		while(i >= 0) {
			this.removeChild(this._children[i]);
			--i;
		}
		return this;
	}
	,contains: function(node) {
		return Lambda.has(this._children,node);
	}
	,addComponent: function(component) {
		if(component == null) {
			throw new js__$Boot_HaxeError("component");
		}
		var it = Lambda.has(this._components,component);
		if(it) {
			throw new js__$Boot_HaxeError("The same component cannot be added twice.");
		}
		if(component.get_target() != null) {
			component.get_target().removeComponent(component);
		}
		this._components.push(component);
		component.set_target(this);
		var descendants = minko_scene_NodeSet.createbyNode(this).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._componentAdded.execute(descendant,this,component);
		}
		var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors();
		var _g2 = 0;
		var _g11 = ancestors.get_nodes();
		while(_g2 < _g11.length) {
			var ancestor = _g11[_g2];
			++_g2;
			ancestor._componentAdded.execute(ancestor,this,component);
		}
		return this;
	}
	,removeComponent: function(component) {
		if(component == null) {
			throw new js__$Boot_HaxeError("component");
		}
		var it = Lambda.has(this._components,component);
		if(it == false) {
			throw new js__$Boot_HaxeError("component");
		}
		HxOverrides.remove(this._components,component);
		component.set_target(null);
		var descendants = minko_scene_NodeSet.createbyNode(this).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._componentRemoved.execute(descendant,this,component);
		}
		var ancestor = this.get_parent();
		while(ancestor != null) {
			ancestor._componentRemoved.execute(ancestor,this,component);
			ancestor = ancestor.get_parent();
		}
		return this;
	}
	,existsComponent: function(c) {
		return Lambda.has(this._components,c);
	}
	,hasComponent: function(cClass) {
		return Lambda.exists(this._components,function(c) {
			return js_Boot.__instanceof(c,cClass);
		});
	}
	,getComponent: function(cClass) {
		return Lambda.find(this._components,function(c) {
			return js_Boot.__instanceof(c,cClass);
		});
	}
	,getComponents: function(cClass) {
		return this._components.filter(function(c) {
			return js_Boot.__instanceof(c,cClass);
		});
	}
	,get_components: function() {
		return this._components;
	}
	,setNode: function(uuid,name) {
		this.set_uuid(uuid);
		this._name = name;
		this._layout = 1;
	}
	,updateRoot: function() {
		this._root = this.get_parent() != null ? this.get_parent().get_root() != null ? this.get_parent()._root : this._parent : this;
		var _g = 0;
		var _g1 = this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.updateRoot();
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dispose();
		}
		this._container.dispose();
		this._added.dispose();
		this._removed.dispose();
		this._layoutChanged.dispose();
		this._componentAdded.dispose();
		this._componentRemoved.dispose();
		this._children = null;
		this._components = null;
		this._container = null;
		this._added = null;
		this._removed = null;
		this._layoutChanged = null;
		this._componentAdded = null;
		this._componentRemoved = null;
	}
	,__class__: minko_scene_Node
});
var minko_scene_NodeSet = $hx_exports["minko"]["scene"]["NodeSet"] = function() {
	minko_scene_Node.call(this);
	this._nodes = [];
};
minko_scene_NodeSet.__name__ = true;
minko_scene_NodeSet.createbyArray = function(nodes) {
	var set = new minko_scene_NodeSet();
	set.nodes = nodes.concat([]);
	return set;
};
minko_scene_NodeSet.create = function() {
	var set = new minko_scene_NodeSet();
	return set;
};
minko_scene_NodeSet.createbyNode = function(node) {
	var set = new minko_scene_NodeSet();
	set.get_nodes().push(node);
	return set;
};
minko_scene_NodeSet.__super__ = minko_scene_Node;
minko_scene_NodeSet.prototype = $extend(minko_scene_Node.prototype,{
	get_nodes: function() {
		return this._nodes;
	}
	,dispose: function() {
		minko_scene_Node.prototype.dispose.call(this);
		this._nodes = null;
	}
	,size: function() {
		return this._nodes.length;
	}
	,descendants: function(andSelf,depthFirst,result) {
		if(depthFirst == null) {
			depthFirst = false;
		}
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var nodesStack = [];
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			nodesStack.push(node);
			while(nodesStack.length != 0) {
				var descendant = nodesStack.shift();
				if(descendant != node || andSelf) {
					result._nodes.push(descendant);
				}
				if(depthFirst) {
					nodesStack = descendant.get_children().concat(nodesStack);
				} else {
					nodesStack = nodesStack.concat(descendant.get_children());
				}
			}
		}
		return result;
	}
	,ancestors: function(andSelf,result) {
		if(andSelf == null) {
			andSelf = false;
		}
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(andSelf) {
				result._nodes.push(node);
			}
			while(node != null) {
				if(node.get_parent() != null) {
					result._nodes.push(node.get_parent());
				}
				node = node.get_parent();
			}
		}
		return result;
	}
	,childrens: function(andSelf,result) {
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(andSelf) {
				result._nodes.push(node);
			}
			result._nodes = result._nodes.concat(node.get_children());
		}
		return result;
	}
	,where: function(filter,result) {
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(filter(node)) {
				result._nodes.push(node);
			}
		}
		return result;
	}
	,roots: function(result) {
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(result._nodes.indexOf(node.get_root()) == -1) {
				result._nodes.push(node.get_root());
			}
		}
		return result;
	}
	,__class__: minko_scene_NodeSet
});
var minko_signal_SignalSlot = $hx_exports["minko"]["signal"]["SignalSlot"] = function(_s) {
	this.expired = false;
	this._signal = _s;
};
minko_signal_SignalSlot.__name__ = true;
minko_signal_SignalSlot.prototype = {
	disconnect: function() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	,dispose: function() {
		this.disconnect();
	}
	,__class__: minko_signal_SignalSlot
};
var minko_signal_Signal = $hx_exports["minko"]["signal"]["Signal"] = function() {
	this._callbacks = [];
};
minko_signal_Signal.__name__ = true;
minko_signal_Signal.create = function() {
	return new minko_signal_Signal();
};
minko_signal_Signal.prototype = {
	copyFrom: function(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	,get_numCallbacks: function() {
		return this._callbacks.length;
	}
	,connect: function(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	,execute: function(a) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	,remove: function(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	,__class__: minko_signal_Signal
};
var minko_signal_SignalSlot2 = $hx_exports["minko"]["signal"]["SignalSlot2"] = function(_s) {
	this.expired = false;
	this._signal = _s;
};
minko_signal_SignalSlot2.__name__ = true;
minko_signal_SignalSlot2.prototype = {
	disconnect: function() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	,dispose: function() {
		this.disconnect();
	}
	,__class__: minko_signal_SignalSlot2
};
var minko_signal_Signal2 = $hx_exports["minko"]["signal"]["Signal2"] = function() {
	this._callbacks = [];
};
minko_signal_Signal2.__name__ = true;
minko_signal_Signal2.create = function() {
	return new minko_signal_Signal2();
};
minko_signal_Signal2.prototype = {
	copyFrom: function(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	,get_numCallbacks: function() {
		return this._callbacks.length;
	}
	,connect: function(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot2(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	,remove: function(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	,execute: function(a,b) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	,__class__: minko_signal_Signal2
};
var minko_signal_SignalSlot3 = $hx_exports["minko"]["signal"]["SignalSlot3"] = function(_s) {
	this.expired = false;
	this._signal = _s;
};
minko_signal_SignalSlot3.__name__ = true;
minko_signal_SignalSlot3.prototype = {
	disconnect: function() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	,dispose: function() {
		this.disconnect();
	}
	,__class__: minko_signal_SignalSlot3
};
var minko_signal_Signal3 = $hx_exports["minko"]["signal"]["Signal3"] = function() {
	this._callbacks = [];
};
minko_signal_Signal3.__name__ = true;
minko_signal_Signal3.create = function() {
	return new minko_signal_Signal3();
};
minko_signal_Signal3.prototype = {
	copyFrom: function(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	,get_numCallbacks: function() {
		return this._callbacks.length;
	}
	,connect: function(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot3(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	,execute: function(a,b,c) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b,c);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	,remove: function(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	,__class__: minko_signal_Signal3
};
var minko_signal_SignalSlot4 = $hx_exports["minko"]["signal"]["SignalSlot4"] = function(_s) {
	this.expired = false;
	this._signal = _s;
};
minko_signal_SignalSlot4.__name__ = true;
minko_signal_SignalSlot4.prototype = {
	disconnect: function() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	,dispose: function() {
		this.disconnect();
	}
	,__class__: minko_signal_SignalSlot4
};
var minko_signal_Signal4 = $hx_exports["minko"]["signal"]["Signal4"] = function() {
	this._callbacks = [];
};
minko_signal_Signal4.__name__ = true;
minko_signal_Signal4.create = function() {
	return new minko_signal_Signal4();
};
minko_signal_Signal4.prototype = {
	copyFrom: function(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	,get_numCallbacks: function() {
		return this._callbacks.length;
	}
	,connect: function(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot4(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	,execute: function(a,b,c,d) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b,c,d);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	,remove: function(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	,__class__: minko_signal_Signal4
};
var minko_signal_SignalSlot5 = $hx_exports["minko"]["signal"]["SignalSlot5"] = function(_s) {
	this.expired = false;
	this._signal = _s;
};
minko_signal_SignalSlot5.__name__ = true;
minko_signal_SignalSlot5.prototype = {
	disconnect: function() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	,dispose: function() {
		this.disconnect();
	}
	,__class__: minko_signal_SignalSlot5
};
var minko_signal_Signal5 = $hx_exports["minko"]["signal"]["Signal5"] = function() {
	this._callbacks = [];
};
minko_signal_Signal5.__name__ = true;
minko_signal_Signal5.create = function() {
	return new minko_signal_Signal5();
};
minko_signal_Signal5.prototype = {
	copyFrom: function(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	,get_numCallbacks: function() {
		return this._callbacks.length;
	}
	,connect: function(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot5(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	,execute: function(a,b,c,d,e) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b,c,d,e);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	,remove: function(it2) {
		this._callbacks = this._callbacks.filter(function(it) {
			return it.second != it2;
		});
	}
	,__class__: minko_signal_Signal5
};
var minko_system_Platform = function() { };
minko_system_Platform.__name__ = true;
minko_system_Platform.isMobile = function() {
	return false;
};
var minko_utils_BytesTool = function() { };
minko_utils_BytesTool.__name__ = true;
minko_utils_BytesTool.readUTF = function(b) {
	var len = b.readInt32();
	return b.readString(len);
};
minko_utils_BytesTool.readOneBytes = function(b) {
	var len = b.readInt32();
	return b.read(len);
};
minko_utils_BytesTool.writeUTF = function(b,bt) {
	b.writeInt32(bt.length);
	b.writeString(bt);
};
minko_utils_BytesTool.writeOneBytes = function(b,bt) {
	b.writeInt32(bt.length);
	b.writeFullBytes(bt,0,bt.length);
};
var minko_utils_MathUtil = function() { };
minko_utils_MathUtil.__name__ = true;
minko_utils_MathUtil.lerp = function(from,to,t) {
	return from + (to - from) * Math.min(Math.max(t,0),1);
};
minko_utils_MathUtil.fract = function(x) {
	return x - Math.floor(x);
};
minko_utils_MathUtil.std_copy = function(s,begin,size,d,index) {
	var g = 0;
	var _g1 = begin;
	var _g = size;
	while(_g1 < _g) {
		var k = _g1++;
		d[index + g] = s[k];
		++g;
	}
};
minko_utils_MathUtil.make_vec2 = function(a,b) {
	var this1 = new glm_Vec2Base();
	this1.x = a[b];
	this1.y = a[b + 1];
	return this1;
};
minko_utils_MathUtil.make_vec3 = function(a,b) {
	var this1 = new glm_Vec3Base();
	this1.x = a[b];
	this1.y = a[b + 1];
	this1.z = a[b + 2];
	return this1;
};
minko_utils_MathUtil.make_vec4 = function(a,b) {
	var this1 = new glm_Vec4Base();
	this1.x = a[b];
	this1.y = a[b + 1];
	this1.z = a[b + 2];
	this1.w = a[b + 3];
	return this1;
};
minko_utils_MathUtil.isEpsilonEqual = function(a,b,EPSILON) {
	if(EPSILON == null) {
		EPSILON = 1.19209290e-007;
	}
	return Math.abs(a - b) < EPSILON;
};
minko_utils_MathUtil.isEpsilonEqualVec3 = function(a,b,EPSILON) {
	if(EPSILON == null) {
		EPSILON = 1.19209290e-007;
	}
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	var this2 = dest;
	return Math.abs(this2.x * this2.x + this2.y * this2.y + this2.z * this2.z) < EPSILON;
};
minko_utils_MathUtil.linearRand = function(from,to) {
	return from + (to - from) * (minko_math_Random.makeRandomSeed() / 2147483647.0);
};
minko_utils_MathUtil.sphericalRand = function(Radius) {
	var z = -1 + 2 * (minko_math_Random.makeRandomSeed() / 2147483647.0);
	var a = 6.283185307179586476925286766559 * (minko_math_Random.makeRandomSeed() / 2147483647.0);
	var r = Math.sqrt(1 - z * z);
	var x = r * Math.cos(a);
	var y = r * Math.sin(a);
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	var a1 = this1;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	var dest = this2;
	dest.x = a1.x * Radius;
	dest.y = a1.y * Radius;
	dest.z = a1.z * Radius;
	return dest;
};
minko_utils_MathUtil.diskRand = function(Radius) {
	var Result = null;
	var LenRadius = 0;
	while(true) {
		var from = -Radius;
		var x = from + (Radius - from) * (minko_math_Random.makeRandomSeed() / 2147483647.0);
		var from1 = -Radius;
		var y = from1 + (Radius - from1) * (minko_math_Random.makeRandomSeed() / 2147483647.0);
		var this1 = new glm_Vec2Base();
		this1.x = x;
		this1.y = y;
		Result = this1;
		LenRadius = Math.sqrt(Result.x * Result.x + Result.y * Result.y);
		if(!(LenRadius > Radius)) {
			break;
		}
	}
	return Result;
};
minko_utils_MathUtil.rand01 = function() {
	return Math.random();
};
minko_utils_MathUtil.clamp = function(x,minVal,maxVal) {
	return Math.min(Math.max(x,minVal),maxVal);
};
minko_utils_MathUtil.mat4_mat3 = function(a) {
	var _r0c0 = a._00;
	var _r0c1 = a._10;
	var _r0c2 = a._20;
	var _r1c0 = a._01;
	var _r1c1 = a._11;
	var _r1c2 = a._21;
	var _r2c0 = a._02;
	var _r2c1 = a._22;
	var _r2c2 = a._22;
	var this1 = new glm_Mat3Base();
	this1._00 = _r0c0;
	this1._01 = _r1c0;
	this1._02 = _r2c0;
	this1._10 = _r0c1;
	this1._11 = _r1c1;
	this1._12 = _r2c1;
	this1._20 = _r0c2;
	this1._21 = _r1c2;
	this1._22 = _r2c2;
	return this1;
};
minko_utils_MathUtil.vec4_vec3 = function(v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	return this1;
};
minko_utils_MathUtil.vec3_vec4 = function(v,z) {
	var x = v.x;
	var y = v.y;
	var z1 = v.z;
	var this1 = new glm_Vec4Base();
	this1.x = x;
	this1.y = y;
	this1.z = z1;
	this1.w = z;
	return this1;
};
minko_utils_MathUtil.mat4_copyFrom = function(a,b) {
	a._00 = b._00;
	a._10 = b._10;
	a._20 = b._20;
	a._30 = b._30;
	a._01 = b._01;
	a._11 = b._11;
	a._21 = b._21;
	a._31 = b._31;
	a._02 = b._02;
	a._12 = b._12;
	a._22 = b._22;
	a._32 = b._32;
	a._03 = b._03;
	a._13 = b._13;
	a._23 = b._23;
	a._33 = b._33;
};
minko_utils_MathUtil.getp2 = function(x) {
	var tmp = x;
	var p = 0;
	while(tmp >= 1) {
		++p;
		tmp >>= 1;
	}
	return p;
};
minko_utils_MathUtil.mix = function(v,n,rt) {
	return n * rt + v * (1 - rt);
};
minko_utils_MathUtil.clp2 = function(x) {
	--x;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	return x + 1;
};
minko_utils_MathUtil.rgba = function(x) {
	var this1 = new glm_Vec4Base();
	this1.x = (x >> 24 & 255) / 255;
	this1.y = (x >> 16 & 255) / 255;
	this1.z = (x >> 8 & 255) / 255;
	this1.w = (x & 255) / 255;
	return this1;
};
minko_utils_MathUtil.vec2_equals = function(a,b) {
	return !(Math.abs(a.x - b.x) >= glm_GLM.EPSILON || Math.abs(a.y - b.y) >= glm_GLM.EPSILON);
};
minko_utils_MathUtil.vec3_equals = function(a,b) {
	return !(Math.abs(a.x - b.x) >= glm_GLM.EPSILON || Math.abs(a.y - b.y) >= glm_GLM.EPSILON || Math.abs(a.z - b.z) >= glm_GLM.EPSILON);
};
minko_utils_MathUtil.vec4_equals = function(a,b) {
	return !(Math.abs(a.x - b.x) >= glm_GLM.EPSILON || Math.abs(a.y - b.y) >= glm_GLM.EPSILON || Math.abs(a.z - b.z) >= glm_GLM.EPSILON || Math.abs(a.w - b.w) >= glm_GLM.EPSILON);
};
var minko_utils_RandomNumbers = function() { };
minko_utils_RandomNumbers.__name__ = true;
minko_utils_RandomNumbers.nextNumber = function() {
	return Math.random();
};
minko_utils_RandomNumbers.nextNumberCeiling = function(ceiling) {
	return Math.floor(minko_utils_RandomNumbers.nextNumber() * ceiling);
};
var minko_utils_StringFunctions = function() { };
minko_utils_StringFunctions.__name__ = true;
minko_utils_StringFunctions.changeCharacter = function(sourceString,charIndex,changeChar) {
	return (charIndex > 0 ? sourceString.substring(0,charIndex) : "") + changeChar + (charIndex < sourceString.length - 1 ? sourceString.substring(charIndex + 1) : "");
};
minko_utils_StringFunctions.isDigit = function(character) {
	return false;
};
minko_utils_StringFunctions.isXDigit = function(character) {
	if(minko_utils_StringFunctions.isDigit(character)) {
		return true;
	} else if("ABCDEFabcdef".indexOf(character) > -1) {
		return true;
	} else {
		return false;
	}
};
minko_utils_StringFunctions.strChr = function(stringToSearch,charToFind) {
	var index = stringToSearch.indexOf(charToFind);
	if(index > -1) {
		return stringToSearch.substring(index);
	} else {
		return null;
	}
};
minko_utils_StringFunctions.strRChr = function(stringToSearch,charToFind) {
	var index = stringToSearch.lastIndexOf(charToFind);
	if(index > -1) {
		return stringToSearch.substring(index);
	} else {
		return null;
	}
};
minko_utils_StringFunctions.strStr = function(stringToSearch,stringToFind) {
	var index = stringToSearch.indexOf(stringToFind);
	if(index > -1) {
		return stringToSearch.substring(index);
	} else {
		return null;
	}
};
minko_utils_StringFunctions.strTok = function(stringToTokenize,delimiters) {
	if(stringToTokenize != null) {
		minko_utils_StringFunctions.activeString = stringToTokenize;
		minko_utils_StringFunctions.activePosition = -1;
	}
	if(minko_utils_StringFunctions.activeString == null) {
		return null;
	}
	if(minko_utils_StringFunctions.activePosition == minko_utils_StringFunctions.activeString.length) {
		return null;
	}
	minko_utils_StringFunctions.activePosition++;
	while(minko_utils_StringFunctions.activePosition < minko_utils_StringFunctions.activeString.length && delimiters.indexOf(minko_utils_StringFunctions.activeString.charAt(minko_utils_StringFunctions.activePosition)) > -1) minko_utils_StringFunctions.activePosition++;
	if(minko_utils_StringFunctions.activePosition == minko_utils_StringFunctions.activeString.length) {
		return null;
	}
	var startingPosition = minko_utils_StringFunctions.activePosition;
	while(true) {
		minko_utils_StringFunctions.activePosition++;
		if(!(minko_utils_StringFunctions.activePosition < minko_utils_StringFunctions.activeString.length && delimiters.indexOf(minko_utils_StringFunctions.activeString.charAt(minko_utils_StringFunctions.activePosition)) == -1)) {
			break;
		}
	}
	return minko_utils_StringFunctions.activeString.substring(startingPosition,minko_utils_StringFunctions.activePosition - startingPosition);
};
var minko_utils_VectorHelper = function() { };
minko_utils_VectorHelper.__name__ = true;
minko_utils_VectorHelper.resize = function(list,newSize,value) {
	if(list.length > newSize) {
		while(list.length > newSize) list.pop();
	} else if(list.length < newSize) {
		var _g1 = list.length;
		var _g = newSize;
		while(_g1 < _g) {
			var i = _g1++;
			list.push(value);
		}
	}
};
minko_utils_VectorHelper.equals = function(list1,list2) {
	if(list1.length != list2.length) {
		return false;
	}
	var _g1 = 0;
	var _g = list2.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(list1[i] != list2[i]) {
			return false;
		}
	}
	return true;
};
minko_utils_VectorHelper.swap = function(list1,list2) {
	var temp = list1.slice();
	minko_utils_VectorHelper.resize(list1,list2.length,null);
	var _g1 = 0;
	var _g = list2.length;
	while(_g1 < _g) {
		var i = _g1++;
		list1[i] = list2[i];
	}
	minko_utils_VectorHelper.resize(list2,temp.length,null);
	var _g11 = 0;
	var _g2 = temp.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		list2[i1] = temp[i1];
	}
};
minko_utils_VectorHelper.initializedList = function(size,value) {
	var temp = [];
	var _g1 = 0;
	var _g = size;
	while(_g1 < _g) {
		var count = _g1++;
		temp.push(value);
	}
	return temp;
};
minko_utils_VectorHelper.nestedList = function(outerSize,innerSize,value) {
	var temp = [];
	var _g1 = 0;
	var _g = outerSize;
	while(_g1 < _g) {
		var count = _g1++;
		temp.push(minko_utils_VectorHelper.initializedList(innerSize,value));
	}
	return temp;
};
var minko_utils_WebNodeTools = function() { };
minko_utils_WebNodeTools.__name__ = true;
minko_utils_WebNodeTools.createCanvasElement = function() {
	var r = window.document.createElement("canvas");
	var r_style = r.style;
	r_style.position = "absolute";
	r_style.setProperty("-webkit-touch-callout","none");
	r_style.setProperty("user-select","none");
	return r;
};
minko_utils_WebNodeTools.loadFromBytes = function(t,c,h) {
	var component = minko_utils_WebNodeTools.createCanvasElement();
	var o = window.document.createElement("img");
	var n = component;
	var q;
	var f = null;
	var i;
	var l;
	var p;
	f = function(_) {
		o.removeEventListener("load",f);
		var x = o.width;
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		n.width = Math.floor(Math.min(x + 1,minko_utils_WebNodeTools.MAX_SIZE));
		var x1 = o.height;
		--x1;
		x1 |= x1 >> 1;
		x1 |= x1 >> 2;
		x1 |= x1 >> 4;
		x1 |= x1 >> 8;
		x1 |= x1 >> 16;
		n.height = Math.floor(Math.min(x1 + 1,minko_utils_WebNodeTools.MAX_SIZE));
		q = n.getContext("2d");
		q.drawImage(o,0,0,o.width,o.height,0,0,n.width,n.height);
		p = q.getImageData(0,0,n.width,n.height);
		if(h != null) {
			var n1 = n.width;
			var n2 = n.height;
			var f1 = haxe_io_Bytes.ofData(p.data.buffer);
			h(new minko_data_PixelData(n1,n2,f1));
		}
		component.remove();
		o.remove();
		o = null;
		p = null;
	};
	o.addEventListener("load",f);
	var tmp = haxe_crypto_Base64.encode(c);
	o.src = "data:image/" + t + ";base64," + tmp;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
glm_GLM.EPSILON = 0.0000001;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
minko_Timer.wantedFPS = 60.;
minko_Timer.maxDeltaTime = 0.5;
minko_Timer.smoothFactor = 0.95;
minko_Timer.lastTimeStamp = new Date().getTime() / 1000;
minko_Timer.startTimeStamp = new Date().getTime() / 1000;
minko_Timer.elapsedTime = 0.;
minko_Timer.frameCount = 0;
minko_Timer.dt = 1 / minko_Timer.wantedFPS;
minko_Timer.currentDT = 1 / minko_Timer.wantedFPS;
minko_Timer.remainingTime = 1 / minko_Timer.wantedFPS;
minko_Uuid.CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
minko_WebBackend.loopInit = false;
minko_component_DirectionalLight.MAX_NUM_SHADOW_CASCADES = 4;
minko_component_DirectionalLight.DEFAULT_NUM_SHADOW_CASCADES = 4;
minko_component_DirectionalLight.MIN_SHADOWMAP_SIZE = 32;
minko_component_DirectionalLight.MAX_SHADOWMAP_SIZE = 1024;
minko_component_DirectionalLight.DEFAULT_SHADOWMAP_SIZE = 512;
minko_component_JobManager._defaultMinimumNumStepsPerFrame = 1;
minko_component_JobManager.CLOCKS_PER_SEC = 1000;
minko_component_Skinning.PNAME_NUM_BONES = "numBones";
minko_component_Skinning.PNAME_BONE_MATRICES = "boneMatrices";
minko_component_Skinning.ATTRNAME_BONE_IDS_A = "boneIdsA";
minko_component_Skinning.ATTRNAME_BONE_IDS_B = "boneIdsB";
minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_A = "boneWeightsA";
minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_B = "boneWeightsB";
minko_component_Skinning.MAX_NUM_BONES_PER_VERTEX = 8;
minko_component_Skinning.ATTRNAME_POSITION = "position";
minko_component_Skinning.ATTRNAME_NORMAL = "normal";
minko_component_SpotLight.PI = 3.141592653589793;
minko_component_Surface.SURFACE_COLLECTION_NAME = "surface";
minko_component_Surface.GEOMETRY_COLLECTION_NAME = "geometry";
minko_component_Surface.MATERIAL_COLLECTION_NAME = "material";
minko_component_Surface.EFFECT_COLLECTION_NAME = "effect";
minko_render__$Priority_Priority_$Impl_$.FIRST = 4000.0;
minko_render__$Priority_Priority_$Impl_$.BACKGROUND = 3000.0;
minko_render__$Priority_Priority_$Impl_$.OPAQUE = 2000.0;
minko_render__$Priority_Priority_$Impl_$.TRANSPARENT = 1000.0;
minko_render__$Priority_Priority_$Impl_$.LAST = 0.0;
minko_file_EffectParser.EXTRA_PROPERTY_BLENDING_MODE = "blendingMode";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_TEST = "stencilTest";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_OPS = "stencilOps";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_FAIL_OP = "fail";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_Z_FAIL_OP = "zfail";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_Z_PASS_OP = "zpass";
minko_file_EffectParser._blendingSourceMap = minko_file_EffectParser.initialize_blendingSourceMap();
minko_file_EffectParser._blendingDestinationMap = minko_file_EffectParser.initialize_blendingDestinationMap();
minko_file_EffectParser._blendingModeMap = minko_file_EffectParser.initialize_blendingModeMap();
minko_file_EffectParser._compareFuncMap = minko_file_EffectParser.initialize_compareFuncMap();
minko_file_EffectParser._triangleCullingMap = minko_file_EffectParser.initialize_triangleCullingMap();
minko_file_EffectParser._stencilOpMap = minko_file_EffectParser.initialize_stencilOpMap();
minko_file_EffectParser._priorityMap = minko_file_EffectParser.initialize_priorityMap();
minko_file_EffectParser._extraStateNames = ["blendingMode","stencilTest"];
minko_file_FileProtocol._runningLoaders = [];
minko_file_Options._defaultProtocols = new haxe_ds_StringMap();
minko_geometry_LineGeometry.MAX_NUM_LINES = 16000;
minko_geometry_LineGeometry.ATTRNAME_START_POS = "startPosition";
minko_geometry_LineGeometry.ATTRNAME_STOP_POS = "stopPosition";
minko_geometry_LineGeometry.ATTRNAME_WEIGHTS = "weights";
minko_geometry_TeapotGeometry._patches = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[4,17,18,19,8,20,21,22,12,23,24,25,16,26,27,28],[19,29,30,31,22,32,33,34,25,35,36,37,28,38,39,40],[31,41,42,1,34,43,44,5,37,45,46,9,40,47,48,13],[13,14,15,16,49,50,51,52,53,54,55,56,57,58,59,60],[16,26,27,28,52,61,62,63,56,64,65,66,60,67,68,69],[28,38,39,40,63,70,71,72,66,73,74,75,69,76,77,78],[40,47,48,13,72,79,80,49,75,81,82,53,78,83,84,57],[57,58,59,60,85,86,87,88,89,90,91,92,93,94,95,96],[60,67,68,69,88,97,98,99,92,100,101,102,96,103,104,105],[69,76,77,78,99,106,107,108,102,109,110,111,105,112,113,114],[78,83,84,57,108,115,116,85,111,117,118,89,114,119,120,93],[121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],[124,137,138,121,128,139,140,125,132,141,142,129,136,143,144,133],[133,134,135,136,145,146,147,148,149,150,151,152,69,153,154,155],[136,143,144,133,148,156,157,145,152,158,159,149,155,160,161,69],[162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177],[165,178,179,162,169,180,181,166,173,182,183,170,177,184,185,174],[174,175,176,177,186,187,188,189,190,191,192,193,194,195,196,197],[177,184,185,174,189,198,199,186,193,200,201,190,197,202,203,194],[204,204,204,204,207,208,209,210,211,211,211,211,212,213,214,215],[204,204,204,204,210,217,218,219,211,211,211,211,215,220,221,222],[204,204,204,204,219,224,225,226,211,211,211,211,222,227,228,229],[204,204,204,204,226,230,231,207,211,211,211,211,229,232,233,212],[212,213,214,215,234,235,236,237,238,239,240,241,242,243,244,245],[215,220,221,222,237,246,247,248,241,249,250,251,245,252,253,254],[222,227,228,229,248,255,256,257,251,258,259,260,254,261,262,263],[229,232,233,212,257,264,265,234,260,266,267,238,263,268,269,242],[270,270,270,270,279,280,281,282,275,276,277,278,271,272,273,274],[270,270,270,270,282,289,290,291,278,286,287,288,274,283,284,285],[270,270,270,270,291,298,299,300,288,295,296,297,285,292,293,294],[270,270,270,270,300,305,306,279,297,303,304,275,294,301,302,271]];
minko_geometry_TeapotGeometry._points = [[1.4,0.0,2.4],[1.4,-0.784,2.4],[0.784,-1.4,2.4],[0.0,-1.4,2.4],[1.3375,0.0,2.53125],[1.3375,-0.749,2.53125],[0.749,-1.3375,2.53125],[0.0,-1.3375,2.53125],[1.4375,0.0,2.53125],[1.4375,-0.805,2.53125],[0.805,-1.4375,2.53125],[0.0,-1.4375,2.53125],[1.5,0.0,2.4],[1.5,-0.84,2.4],[0.84,-1.5,2.4],[0.0,-1.5,2.4],[-0.784,-1.4,2.4],[-1.4,-0.784,2.4],[-1.4,0.0,2.4],[-0.749,-1.3375,2.53125],[-1.3375,-0.749,2.53125],[-1.3375,0.0,2.53125],[-0.805,-1.4375,2.53125],[-1.4375,-0.805,2.53125],[-1.4375,0.0,2.53125],[-0.84,-1.5,2.4],[-1.5,-0.84,2.4],[-1.5,0.0,2.4],[-1.4,0.784,2.4],[-0.784,1.4,2.4],[0.0,1.4,2.4],[-1.3375,0.749,2.53125],[-0.749,1.3375,2.53125],[0.0,1.3375,2.53125],[-1.4375,0.805,2.53125],[-0.805,1.4375,2.53125],[0.0,1.4375,2.53125],[-1.5,0.84,2.4],[-0.84,1.5,2.4],[0.0,1.5,2.4],[0.784,1.4,2.4],[1.4,0.784,2.4],[0.749,1.3375,2.53125],[1.3375,0.749,2.53125],[0.805,1.4375,2.53125],[1.4375,0.805,2.53125],[0.84,1.5,2.4],[1.5,0.84,2.4],[1.75,0.0,1.875],[1.75,-0.98,1.875],[0.98,-1.75,1.875],[0.0,-1.75,1.875],[2.0,0.0,1.35],[2.0,-1.12,1.35],[1.12,-2.0,1.35],[0.0,-2.0,1.35],[2.0,0.0,0.9],[2.0,-1.12,0.9],[1.12,-2.0,0.9],[0.0,-2.0,0.9],[-0.98,-1.75,1.875],[-1.75,-0.98,1.875],[-1.75,0.0,1.875],[-1.12,-2.0,1.35],[-2.0,-1.12,1.35],[-2.0,0.0,1.35],[-1.12,-2.0,0.9],[-2.0,-1.12,0.9],[-2.0,0.0,0.9],[-1.75,0.98,1.875],[-0.98,1.75,1.875],[0.0,1.75,1.875],[-2.0,1.12,1.35],[-1.12,2.0,1.35],[0.0,2.0,1.35],[-2.0,1.12,0.9],[-1.12,2.0,0.9],[0.0,2.0,0.9],[0.98,1.75,1.875],[1.75,0.98,1.875],[1.12,2.0,1.35],[2.0,1.12,1.35],[1.12,2.0,0.9],[2.0,1.12,0.9],[2.0,0.0,0.45],[2.0,-1.12,0.45],[1.12,-2.0,0.45],[0.0,-2.0,0.45],[1.5,0.0,0.225],[1.5,-0.84,0.225],[0.84,-1.5,0.225],[0.0,-1.5,0.225],[1.5,0.0,0.15],[1.5,-0.84,0.15],[0.84,-1.5,0.15],[0.0,-1.5,0.15],[-1.12,-2.0,0.45],[-2.0,-1.12,0.45],[-2.0,0.0,0.45],[-0.84,-1.5,0.225],[-1.5,-0.84,0.225],[-1.5,0.0,0.225],[-0.84,-1.5,0.15],[-1.5,-0.84,0.15],[-1.5,0.0,0.15],[-2.0,1.12,0.45],[-1.12,2.0,0.45],[0.0,2.0,0.45],[-1.5,0.84,0.225],[-0.84,1.5,0.225],[0.0,1.5,0.225],[-1.5,0.84,0.15],[-0.84,1.5,0.15],[0.0,1.5,0.15],[1.12,2.0,0.45],[2.0,1.12,0.45],[0.84,1.5,0.225],[1.5,0.84,0.225],[0.84,1.5,0.15],[1.5,0.84,0.15],[-1.6,0.0,2.025],[-1.6,-0.3,2.025],[-1.5,-0.3,2.25],[-1.5,0.0,2.25],[-2.3,0.0,2.025],[-2.3,-0.3,2.025],[-2.5,-0.3,2.25],[-2.5,0.0,2.25],[-2.7,0.0,2.025],[-2.7,-0.3,2.025],[-3.0,-0.3,2.25],[-3.0,0.0,2.25],[-2.7,0.0,1.8],[-2.7,-0.3,1.8],[-3.0,-0.3,1.8],[-3.0,0.0,1.8],[-1.5,0.3,2.25],[-1.6,0.3,2.025],[-2.5,0.3,2.25],[-2.3,0.3,2.025],[-3.0,0.3,2.25],[-2.7,0.3,2.025],[-3.0,0.3,1.8],[-2.7,0.3,1.8],[-2.7,0.0,1.575],[-2.7,-0.3,1.575],[-3.0,-0.3,1.35],[-3.0,0.0,1.35],[-2.5,0.0,1.125],[-2.5,-0.3,1.125],[-2.65,-0.3,0.9375],[-2.65,0.0,0.9375],[-2.0,-0.3,0.9],[-1.9,-0.3,0.6],[-1.9,0.0,0.6],[-3.0,0.3,1.35],[-2.7,0.3,1.575],[-2.65,0.3,0.9375],[-2.5,0.3,1.125],[-1.9,0.3,0.6],[-2.0,0.3,0.9],[1.7,0.0,1.425],[1.7,-0.66,1.425],[1.7,-0.66,0.6],[1.7,0.0,0.6],[2.6,0.0,1.425],[2.6,-0.66,1.425],[3.1,-0.66,0.825],[3.1,0.0,0.825],[2.3,0.0,2.1],[2.3,-0.25,2.1],[2.4,-0.25,2.025],[2.4,0.0,2.025],[2.7,0.0,2.4],[2.7,-0.25,2.4],[3.3,-0.25,2.4],[3.3,0.0,2.4],[1.7,0.66,0.6],[1.7,0.66,1.425],[3.1,0.66,0.825],[2.6,0.66,1.425],[2.4,0.25,2.025],[2.3,0.25,2.1],[3.3,0.25,2.4],[2.7,0.25,2.4],[2.8,0.0,2.475],[2.8,-0.25,2.475],[3.525,-0.25,2.49375],[3.525,0.0,2.49375],[2.9,0.0,2.475],[2.9,-0.15,2.475],[3.45,-0.15,2.5125],[3.45,0.0,2.5125],[2.8,0.0,2.4],[2.8,-0.15,2.4],[3.2,-0.15,2.4],[3.2,0.0,2.4],[3.525,0.25,2.49375],[2.8,0.25,2.475],[3.45,0.15,2.5125],[2.9,0.15,2.475],[3.2,0.15,2.4],[2.8,0.15,2.4],[0.0,0.0,3.15],[0.0,-0.002,3.15],[0.002,0.0,3.15],[0.8,0.0,3.15],[0.8,-0.45,3.15],[0.45,-0.8,3.15],[0.0,-0.8,3.15],[0.0,0.0,2.85],[0.2,0.0,2.7],[0.2,-0.112,2.7],[0.112,-0.2,2.7],[0.0,-0.2,2.7],[-0.002,0.0,3.15],[-0.45,-0.8,3.15],[-0.8,-0.45,3.15],[-0.8,0.0,3.15],[-0.112,-0.2,2.7],[-0.2,-0.112,2.7],[-0.2,0.0,2.7],[0.0,0.002,3.15],[-0.8,0.45,3.15],[-0.45,0.8,3.15],[0.0,0.8,3.15],[-0.2,0.112,2.7],[-0.112,0.2,2.7],[0.0,0.2,2.7],[0.45,0.8,3.15],[0.8,0.45,3.15],[0.112,0.2,2.7],[0.2,0.112,2.7],[0.4,0.0,2.55],[0.4,-0.224,2.55],[0.224,-0.4,2.55],[0.0,-0.4,2.55],[1.3,0.0,2.55],[1.3,-0.728,2.55],[0.728,-1.3,2.55],[0.0,-1.3,2.55],[1.3,0.0,2.4],[1.3,-0.728,2.4],[0.728,-1.3,2.4],[0.0,-1.3,2.4],[-0.224,-0.4,2.55],[-0.4,-0.224,2.55],[-0.4,0.0,2.55],[-0.728,-1.3,2.55],[-1.3,-0.728,2.55],[-1.3,0.0,2.55],[-0.728,-1.3,2.4],[-1.3,-0.728,2.4],[-1.3,0.0,2.4],[-0.4,0.224,2.55],[-0.224,0.4,2.55],[0.0,0.4,2.55],[-1.3,0.728,2.55],[-0.728,1.3,2.55],[0.0,1.3,2.55],[-1.3,0.728,2.4],[-0.728,1.3,2.4],[0.0,1.3,2.4],[0.224,0.4,2.55],[0.4,0.224,2.55],[0.728,1.3,2.55],[1.3,0.728,2.55],[0.728,1.3,2.4],[1.3,0.728,2.4],[0.0,0.0,0.0],[1.5,0.0,0.15],[1.5,0.84,0.15],[0.84,1.5,0.15],[0.0,1.5,0.15],[1.5,0.0,0.075],[1.5,0.84,0.075],[0.84,1.5,0.075],[0.0,1.5,0.075],[1.425,0.0,0.0],[1.425,0.798,0.0],[0.798,1.425,0.0],[0.0,1.425,0.0],[-0.84,1.5,0.15],[-1.5,0.84,0.15],[-1.5,0.0,0.15],[-0.84,1.5,0.075],[-1.5,0.84,0.075],[-1.5,0.0,0.075],[-0.798,1.425,0.0],[-1.425,0.798,0.0],[-1.425,0.0,0.0],[-1.5,-0.84,0.15],[-0.84,-1.5,0.15],[0.0,-1.5,0.15],[-1.5,-0.84,0.075],[-0.84,-1.5,0.075],[0.0,-1.5,0.075],[-1.425,-0.798,0.0],[-0.798,-1.425,0.0],[0.0,-1.425,0.0],[0.84,-1.5,0.15],[1.5,-0.84,0.15],[0.84,-1.5,0.075],[1.5,-0.84,0.075],[0.798,-1.425,0.0],[1.425,-0.798,0.0]];
minko_input_KeyMap.keyToKeyCodeMap = minko_input_KeyMap.initializeKeyToKeyCodeMap();
minko_input_KeyMap.keyToScanCodeMap = minko_input_KeyMap.initializeKeyToScanCodeMap();
minko_input_Keyboard.NUM_KEYS = 350;
minko_input_Keyboard._keyToName = minko_input_Keyboard.initializeKeyNames();
minko_input_Mouse.CLICK_MOVE_THRESHOLD = 5;
minko_math_OctTree._k = 2;
minko_math_Random.MPM = 2147483647.0;
minko_math_Random.MINSTD = 16807.0;
minko_net_WebHTTPProtocol._httpProtocolReferences = [];
minko_net_EmscriptenAsync.nextWgetRequestHandle = 0;
minko_net_EmscriptenAsync.wgetRequests = new haxe_ds_IntMap();
minko_render_DrawCall.MAX_NUM_TEXTURES = 8;
minko_render_DrawCall.MAX_NUM_VERTEXBUFFERS = 8;
minko_render_GlContext.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
minko_render_GlContext.GL_STENCIL = 6146;
minko_render_GlContext.GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
minko_render_GlContext.GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
minko_render_GlContext.GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
minko_render_GlContext.GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
minko_render_GlContext.GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
minko_render_GlContext.GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 37175;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 37176;
minko_render_GlContext.GL_ETC1_RGB8_OES = 36196;
minko_render_GlContext.GL_ATC_RGB_AMD = 35986;
minko_render_GlContext.GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987;
minko_render_GlContext._blendingFactors = minko_render_GlContext.initializeBlendFactorsMap();
minko_render_GlContext._compareFuncs = minko_render_GlContext.initializeDepthFuncsMap();
minko_render_GlContext._stencilOps = minko_render_GlContext.initializeStencilOperationsMap();
minko_render_GlContext._availableTextureFormats = new haxe_ds_IntMap();
minko_render_GlContext.locationCount = 0;
minko_render_GlContext.vertexBufferCount = 0;
minko_render_GlContext.indexBufferCount = 0;
minko_render_GlContext.textureCount = 0;
minko_render_GlContext.programCount = 0;
minko_render_GlContext.shaderCount = 0;
minko_render_ProgramSignature._maxNumMacros = 64;
minko_render_SamplerStates.PROPERTY_WRAP_MODE = "wrapMode";
minko_render_SamplerStates.PROPERTY_TEXTURE_FILTER = "textureFilter";
minko_render_SamplerStates.PROPERTY_MIP_FILTER = "mipFilter";
minko_render_SamplerStates.PROPERTY_NAMES = ["wrapMode","textureFilter","mipFilter"];
minko_render_SamplerStates.DEFAULT_WRAP_MODE = 0;
minko_render_SamplerStates.DEFAULT_TEXTURE_FILTER = 0;
minko_render_SamplerStates.DEFAULT_MIP_FILTER = 0;
minko_render_States.PROPERTY_PRIORITY = "priority";
minko_render_States.PROPERTY_ZSORTED = "zSorted";
minko_render_States.PROPERTY_BLENDING_SOURCE = "blendingSource";
minko_render_States.PROPERTY_BLENDING_DESTINATION = "blendingDestination";
minko_render_States.PROPERTY_COLOR_MASK = "colorMask";
minko_render_States.PROPERTY_DEPTH_MASK = "depthMask";
minko_render_States.PROPERTY_DEPTH_FUNCTION = "depthFunction";
minko_render_States.PROPERTY_TRIANGLE_CULLING = "triangleCulling";
minko_render_States.PROPERTY_STENCIL_FUNCTION = "stencilFunction";
minko_render_States.PROPERTY_STENCIL_REFERENCE = "stencilReference";
minko_render_States.PROPERTY_STENCIL_MASK = "stencilMask";
minko_render_States.PROPERTY_STENCIL_FAIL_OPERATION = "stencilFailOperation";
minko_render_States.PROPERTY_STENCIL_ZFAIL_OPERATION = "stencilZFailOperation";
minko_render_States.PROPERTY_STENCIL_ZPASS_OPERATION = "stencilZPassOperation";
minko_render_States.PROPERTY_SCISSOR_TEST = "scissorTest";
minko_render_States.PROPERTY_SCISSOR_BOX = "scissorBox";
minko_render_States.PROPERTY_TARGET = "target";
minko_render_States.PROPERTY_NAMES = ["priority","zSorted","blendingSource","blendingDestination","colorMask","depthMask","depthFunction","triangleCulling","stencilFunction","stencilReference","stencilMask","stencilFailOperation","stencilZFailOperation","stencilZPassOperation","scissorTest","scissorBox","target"];
minko_render_States.DEFAULT_PRIORITY = minko_render__$Priority_Priority_$Impl_$.OPAQUE;
minko_render_States.DEFAULT_ZSORTED = false;
minko_render_States.DEFAULT_BLENDING_SOURCE = 2;
minko_render_States.DEFAULT_BLENDING_DESTINATION = 256;
minko_render_States.DEFAULT_COLOR_MASK = true;
minko_render_States.DEFAULT_DEPTH_MASK = true;
minko_render_States.DEFAULT_DEPTH_FUNCTION = 4;
minko_render_States.DEFAULT_TRIANGLE_CULLING = 2;
minko_render_States.DEFAULT_STENCIL_FUNCTION = 0;
minko_render_States.DEFAULT_STENCIL_REFERENCE = 0;
minko_render_States.DEFAULT_STENCIL_MASK = 1;
minko_render_States.DEFAULT_STENCIL_FAIL_OPERATION = 0;
minko_render_States.DEFAULT_STENCIL_ZFAIL_OPERATION = 0;
minko_render_States.DEFAULT_STENCIL_ZPASS_OPERATION = 0;
minko_render_States.DEFAULT_SCISSOR_TEST = false;
minko_render_States.DEFAULT_SCISSOR_BOX = (function($this) {
	var $r;
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	$r = this1;
	return $r;
}(this));
minko_render_States.UNSET_PRIORITY_VALUE = -Infinity;
minko_render_TextureFormatInfo._formats = minko_render_TextureFormatInfo.initializeFormatsMap();
minko_utils_MathUtil.pi = 3.14159265;
minko_utils_MathUtil.half_pi = 1.57079637;
minko_utils_RandomNumbers.RAND_MAX = 10;
minko_utils_WebNodeTools.MAX_SIZE = 4096;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
