// Generated by Haxe 4.0.0-rc.2+77068e10c
(function ($hx_exports, $global) { "use strict";
$hx_exports["glm"] = $hx_exports["glm"] || {};
$hx_exports["minko"] = $hx_exports["minko"] || {};
$hx_exports["minko"]["scene"] = $hx_exports["minko"]["scene"] || {};
;$hx_exports["minko"]["net"] = $hx_exports["minko"]["net"] || {};
;$hx_exports["minko"]["math"] = $hx_exports["minko"]["math"] || {};
;$hx_exports["minko"]["input"] = $hx_exports["minko"]["input"] || {};
;$hx_exports["minko"]["signal"] = $hx_exports["minko"]["signal"] || {};
;$hx_exports["minko"]["material"] = $hx_exports["minko"]["material"] || {};
;$hx_exports["minko"]["render"] = $hx_exports["minko"]["render"] || {};
;$hx_exports["minko"]["file"] = $hx_exports["minko"]["file"] || {};
;$hx_exports["minko"]["data"] = $hx_exports["minko"]["data"] || {};
;$hx_exports["minko"]["audio"] = $hx_exports["minko"]["audio"] || {};
;$hx_exports["minko"]["async"] = $hx_exports["minko"]["async"] || {};
;$hx_exports["minko"]["animation"] = $hx_exports["minko"]["animation"] || {};
;$hx_exports["minko"]["component"] = $hx_exports["minko"]["component"] || {};
;$hx_exports["minko"]["geometry"] = $hx_exports["minko"]["geometry"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	split(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
}
EReg.__name__ = true;
Object.assign(EReg.prototype, {
	__class__: EReg
});
class HxOverrides {
	static cca(s,index) {
		var x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		var i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
}
HxOverrides.__name__ = true;
class Lambda {
	static array(it) {
		var a = [];
		var i = $getIterator(it);
		while(i.hasNext()) {
			var i1 = i.next();
			a.push(i1);
		}
		return a;
	}
	static has(it,elt) {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(x1 == elt) {
				return true;
			}
		}
		return false;
	}
	static exists(it,f) {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(f(x1)) {
				return true;
			}
		}
		return false;
	}
	static iter(it,f) {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			f(x1);
		}
	}
	static fold(it,f,first) {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			first = f(x1,first);
		}
		return first;
	}
	static count(it,pred) {
		var n = 0;
		if(pred == null) {
			var _ = $getIterator(it);
			while(_.hasNext()) {
				var _1 = _.next();
				++n;
			}
		} else {
			var x = $getIterator(it);
			while(x.hasNext()) {
				var x1 = x.next();
				if(pred(x1)) {
					++n;
				}
			}
		}
		return n;
	}
	static empty(it) {
		return !$getIterator(it).hasNext();
	}
	static indexOf(it,v) {
		var i = 0;
		var v2 = $getIterator(it);
		while(v2.hasNext()) {
			var v21 = v2.next();
			if(v == v21) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static find(it,f) {
		var v = $getIterator(it);
		while(v.hasNext()) {
			var v1 = v.next();
			if(f(v1)) {
				return v1;
			}
		}
		return null;
	}
}
Lambda.__name__ = true;
class Main {
	static main() {
		new ExampleAssimp();
	}
}
Main.__name__ = true;
class ExampleAssimp {
	constructor() {
		var canvas = minko_CanvasManager.create("Minko Example - Assimp",ExampleAssimp.WINDOW_WIDTH,ExampleAssimp.WINDOW_HEIGHT);
		var _gthis = this;
		var sceneManager = minko_component_SceneManager.create(canvas);
		var defaultOptions = sceneManager.get_assets().get_loader().get_options();
		defaultOptions.set_generateMipmaps(true);
		defaultOptions.set_skinningFramerate(60);
		defaultOptions.set_skinningMethod(1);
		defaultOptions.set_startAnimation(true);
		defaultOptions.registerParser("assbin",function() {
			return new minko_file_ASSIMPParser();
		});
		defaultOptions.registerParser("gltf",function() {
			return new minko_file_Gltf2Parser();
		});
		defaultOptions.registerParser("png",function() {
			return new minko_file_PNGParser();
		});
		defaultOptions.registerParser("jpg",function() {
			return new minko_file_JPEGParser();
		});
		var fxLoader = minko_file_Loader.createbyLoader(sceneManager.get_assets().get_loader());
		fxLoader.queue("effect/Basic.effect").queue("effect/PBR.effect").queue("effect/Phong.effect");
		var fxComplete = fxLoader.get_complete().connect(function(l) {
			sceneManager.get_assets().get_loader().get_options().set_effect(sceneManager.get_assets().effect("effect/Phong.effect"));
			sceneManager.get_assets().get_loader().queue(ExampleAssimp.MODEL_FILENAME);
			sceneManager.get_assets().get_loader().load();
		});
		var beIdle = true;
		var doPunch = false;
		var doKick = false;
		var doWalk = false;
		var doRun = false;
		var beStun = false;
		var reverseAnim = false;
		var speedId = 0;
		var root = minko_scene_Node.create("root");
		root.addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera");
		var tmp = minko_component_Renderer.create(2139062271);
		camera.addComponent(tmp);
		var this1 = new glm_Vec3Base();
		this1.x = 0.25;
		this1.y = 0.75;
		this1.z = 2.5;
		var this2 = new glm_Vec3Base();
		this2.x = 0.0;
		this2.y = 0.75;
		this2.z = 0.0;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 1;
		this3.z = 0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var mat4 = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = mat4._00;
		var a01 = mat4._10;
		var a02 = mat4._20;
		var a03 = mat4._30;
		var a10 = mat4._01;
		var a11 = mat4._11;
		var a12 = mat4._21;
		var a13 = mat4._31;
		var a20 = mat4._02;
		var a21 = mat4._12;
		var a22 = mat4._22;
		var a23 = mat4._32;
		var a30 = mat4._03;
		var a31 = mat4._13;
		var a32 = mat4._23;
		var a33 = mat4._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var tmp1 = minko_component_Transform.createbyMatrix4(dest);
		camera.addComponent(tmp1);
		var tmp2 = minko_component_PerspectiveCamera.create(canvas.get_aspectRatio());
		camera.addComponent(tmp2);
		root.addChild(camera);
		var error = sceneManager.get_assets().get_loader().get_error().connect(function(loader,e) {
			haxe_Log.trace("error",{ fileName : "Main.hx", lineNumber : 245, className : "ExampleAssimp", methodName : "new"});
			haxe_Log.trace(e,{ fileName : "Main.hx", lineNumber : 246, className : "ExampleAssimp", methodName : "new"});
			haxe_Log.trace("\n",{ fileName : "Main.hx", lineNumber : 247, className : "ExampleAssimp", methodName : "new"});
		});
		var _ = sceneManager.get_assets().get_loader().get_complete().connect(function(loader1) {
			var model = sceneManager.get_assets().symbol(ExampleAssimp.MODEL_FILENAME);
			var surfaceNodeSet = minko_scene_NodeSet.createbyNode(model).descendants(true).where(function(n) {
				return n.hasComponent(minko_component_Surface);
			});
			var _1 = minko_component_AmbientLight.create();
			root.addComponent(_1);
			var _2 = minko_component_DirectionalLight.create();
			root.addComponent(_2);
			root.addChild(model);
			var skinnedNodes = minko_scene_NodeSet.createbyNode(model).descendants(true).where(function(n1) {
				return n1.hasComponent(minko_component_MasterAnimation);
			});
			var skinnedNode = HxOverrides.iter(skinnedNodes.get_nodes()).hasNext() ? HxOverrides.iter(skinnedNodes.get_nodes()).next() : null;
		});
		var resized = canvas.get_resized().connect(function(canvas1,w,h) {
			var perspectiveCamera = camera.getComponent(minko_component_PerspectiveCamera);
			perspectiveCamera.set_aspectRatio(w / h);
		});
		var keyDown = canvas.get_keyboard().get_keyDown().connect(function(k) {
			if(_gthis.anim == null) {
				return;
			}
			if(k.keyIsDown(38)) {
				reverseAnim = false;
				beStun = reverseAnim;
				doWalk = beStun;
				doKick = doWalk;
				doPunch = doKick;
				beIdle = doPunch;
				speedId = 0;
				doRun = true;
			} else if(k.keyIsDown(40)) {
				reverseAnim = false;
				beStun = reverseAnim;
				doKick = beStun;
				doRun = doKick;
				doPunch = doRun;
				beIdle = doPunch;
				speedId = 0;
				doWalk = true;
			} else if(k.keyIsDown(37)) {
				reverseAnim = false;
				beStun = reverseAnim;
				doWalk = beStun;
				doKick = doWalk;
				doRun = doKick;
				beIdle = doRun;
				speedId = 0;
				doPunch = true;
			} else if(k.keyIsDown(39)) {
				reverseAnim = false;
				beStun = reverseAnim;
				doWalk = beStun;
				doRun = doWalk;
				doPunch = doRun;
				beIdle = doPunch;
				speedId = 0;
				doKick = true;
			} else if(k.keyIsDown(32)) {
				reverseAnim = false;
				doWalk = reverseAnim;
				doKick = doWalk;
				doRun = doKick;
				doPunch = doRun;
				beIdle = doPunch;
				speedId = 0;
				beStun = true;
			} else if(k.keyIsDown(35)) {
				reverseAnim = false;
				beStun = reverseAnim;
				doWalk = beStun;
				doKick = doWalk;
				doRun = doKick;
				doPunch = doRun;
				speedId = 0;
				beIdle = true;
			} else if(k.keyIsDown(49)) {
				reverseAnim = false;
				beIdle = reverseAnim;
				beStun = beIdle;
				doWalk = beStun;
				doKick = doWalk;
				doRun = doKick;
				doPunch = doRun;
				speedId = 1;
			} else if(k.keyIsDown(50)) {
				reverseAnim = false;
				beIdle = reverseAnim;
				beStun = beIdle;
				doWalk = beStun;
				doKick = doWalk;
				doRun = doKick;
				doPunch = doRun;
				speedId = 2;
			} else if(k.keyIsDown(51)) {
				reverseAnim = false;
				beIdle = reverseAnim;
				beStun = beIdle;
				doWalk = beStun;
				doKick = doWalk;
				doRun = doKick;
				doPunch = doRun;
				speedId = 3;
			} else if(k.keyIsDown(82)) {
				beIdle = false;
				beStun = beIdle;
				doWalk = beStun;
				doKick = doWalk;
				doRun = doKick;
				doPunch = doRun;
				reverseAnim = true;
				speedId = 0;
			}
		});
		var keyUp = canvas.get_keyboard().get_keyUp().connect(function(k1) {
			if(_gthis.anim == null) {
				return;
			}
			if(doWalk) {
				_gthis.walk(_gthis.anim);
			} else if(doRun) {
				_gthis.run(_gthis.anim);
			} else if(doKick) {
				_gthis.kick(_gthis.anim);
			} else if(doPunch) {
				_gthis.punch(_gthis.anim);
			} else if(beIdle) {
				_gthis.idle(_gthis.anim);
			} else if(beStun) {
				_gthis.stun(_gthis.anim);
			} else if(reverseAnim) {
				_gthis.anim.set_isReversed(!_gthis.anim.get_isReversed());
				haxe_Log.trace("animation is ",{ fileName : "Main.hx", lineNumber : 398, className : "ExampleAssimp", methodName : "new"});
				haxe_Log.trace(!_gthis.anim.get_isReversed() ? "not " : "",{ fileName : "Main.hx", lineNumber : 399, className : "ExampleAssimp", methodName : "new"});
				haxe_Log.trace("reversed",{ fileName : "Main.hx", lineNumber : 400, className : "ExampleAssimp", methodName : "new"});
				haxe_Log.trace("\n",{ fileName : "Main.hx", lineNumber : 401, className : "ExampleAssimp", methodName : "new"});
			} else if(speedId > 0) {
				if(speedId == 1) {
					_gthis.anim.set_timeFunction(function(t) {
						return Math.floor(t / 2);
					});
					haxe_Log.trace("animation's speed is decreased",{ fileName : "Main.hx", lineNumber : 408, className : "ExampleAssimp", methodName : "new"});
					haxe_Log.trace("\n",{ fileName : "Main.hx", lineNumber : 409, className : "ExampleAssimp", methodName : "new"});
				} else if(speedId == 2) {
					_gthis.anim.set_timeFunction(function(t1) {
						return t1;
					});
					haxe_Log.trace("animation is back to normal speed",{ fileName : "Main.hx", lineNumber : 415, className : "ExampleAssimp", methodName : "new"});
					haxe_Log.trace("\n",{ fileName : "Main.hx", lineNumber : 416, className : "ExampleAssimp", methodName : "new"});
				} else if(speedId == 3) {
					_gthis.anim.set_timeFunction(function(t2) {
						return t2 * 2;
					});
					haxe_Log.trace("animation's speed is increased",{ fileName : "Main.hx", lineNumber : 422, className : "ExampleAssimp", methodName : "new"});
					haxe_Log.trace("\n",{ fileName : "Main.hx", lineNumber : 423, className : "ExampleAssimp", methodName : "new"});
				}
				speedId = 0;
			}
		});
		var yaw = 0.3;
		var pitch = Math.PI * .5;
		var minPitch = 0.1;
		var maxPitch = Math.PI - .1;
		var this6 = new glm_Vec3Base();
		this6.x = 0.0;
		this6.y = 2.0;
		this6.z = 0.0;
		var lookAt = this6;
		var distance = 3.0;
		var minDistance = 1.0;
		var zoomSpeed = 0.0;
		var mouseWheel = canvas.get_mouse().get_wheel().connect(function(m,h1,v) {
			zoomSpeed -= v * .1;
		});
		var mouseMove = null;
		var cameraRotationXSpeed = 0.0;
		var cameraRotationYSpeed = 0.0;
		var mouseDown = canvas.get_mouse().get_leftButtonDown().connect(function(m1) {
			mouseMove = canvas.get_mouse().get_move().connect(function(UnnamedParameter1,dx,dy) {
				cameraRotationYSpeed = dx * .01;
				cameraRotationXSpeed = dy * -.01;
			});
		});
		var mouseUp = canvas.get_mouse().get_leftButtonUp().connect(function(m2) {
			mouseMove.disconnect();
		});
		var enterFrame = canvas.get_enterFrame().connect(function(canvas2,time,deltaTime) {
			distance += zoomSpeed;
			zoomSpeed *= 0.9;
			if(distance < minDistance) {
				distance = minDistance;
			}
			yaw += cameraRotationYSpeed;
			cameraRotationYSpeed *= 0.9;
			pitch += cameraRotationXSpeed;
			cameraRotationXSpeed *= 0.9;
			if(pitch > maxPitch) {
				pitch = maxPitch;
			} else if(pitch < minPitch) {
				pitch = minPitch;
			}
			var cameraTransform = camera.getComponent(minko_component_Transform);
			var x = lookAt.x + distance * Math.cos(yaw) * Math.sin(pitch);
			var y = lookAt.y + distance * Math.cos(pitch);
			var z = lookAt.z + distance * Math.sin(yaw) * Math.sin(pitch);
			var this7 = new glm_Vec3Base();
			this7.x = x;
			this7.y = y;
			this7.z = z;
			var this8 = new glm_Vec3Base();
			this8.x = 0.0;
			this8.y = 1.0;
			this8.z = 0.0;
			var this9 = new glm_Mat4Base();
			this9._00 = 0;
			this9._01 = 0;
			this9._02 = 0;
			this9._03 = 0;
			this9._10 = 0;
			this9._11 = 0;
			this9._12 = 0;
			this9._13 = 0;
			this9._20 = 0;
			this9._21 = 0;
			this9._22 = 0;
			this9._23 = 0;
			this9._30 = 0;
			this9._31 = 0;
			this9._32 = 0;
			this9._33 = 0;
			var src = glm_GLM.lookAt(this7,lookAt,this8,this9);
			var this10 = new glm_Mat4Base();
			this10._00 = 0;
			this10._01 = 0;
			this10._02 = 0;
			this10._03 = 0;
			this10._10 = 0;
			this10._11 = 0;
			this10._12 = 0;
			this10._13 = 0;
			this10._20 = 0;
			this10._21 = 0;
			this10._22 = 0;
			this10._23 = 0;
			this10._30 = 0;
			this10._31 = 0;
			this10._32 = 0;
			this10._33 = 0;
			var dest1 = this10;
			var a001 = src._00;
			var a011 = src._10;
			var a021 = src._20;
			var a031 = src._30;
			var a101 = src._01;
			var a111 = src._11;
			var a121 = src._21;
			var a131 = src._31;
			var a201 = src._02;
			var a211 = src._12;
			var a221 = src._22;
			var a231 = src._32;
			var a301 = src._03;
			var a311 = src._13;
			var a321 = src._23;
			var a331 = src._33;
			var t001 = a121 * a231 * a311 - a131 * a221 * a311 + a131 * a211 * a321 - a111 * a231 * a321 - a121 * a211 * a331 + a111 * a221 * a331;
			var t011 = a031 * a221 * a311 - a021 * a231 * a311 - a031 * a211 * a321 + a011 * a231 * a321 + a021 * a211 * a331 - a011 * a221 * a331;
			var t021 = a021 * a131 * a311 - a031 * a121 * a311 + a031 * a111 * a321 - a011 * a131 * a321 - a021 * a111 * a331 + a011 * a121 * a331;
			var t031 = a031 * a121 * a211 - a021 * a131 * a211 - a031 * a111 * a221 + a011 * a131 * a221 + a021 * a111 * a231 - a011 * a121 * a231;
			var det1 = a001 * t001 + a101 * t011 + a201 * t021 + a301 * t031;
			if(Math.abs(det1) <= glm_GLM.EPSILON) {
				throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det1 + ") is too small!");
			}
			var idet1 = 1 / det1;
			dest1._00 = t001 * idet1;
			dest1._01 = (a131 * a221 * a301 - a121 * a231 * a301 - a131 * a201 * a321 + a101 * a231 * a321 + a121 * a201 * a331 - a101 * a221 * a331) * idet1;
			dest1._02 = (a111 * a231 * a301 - a131 * a211 * a301 + a131 * a201 * a311 - a101 * a231 * a311 - a111 * a201 * a331 + a101 * a211 * a331) * idet1;
			dest1._03 = (a121 * a211 * a301 - a111 * a221 * a301 - a121 * a201 * a311 + a101 * a221 * a311 + a111 * a201 * a321 - a101 * a211 * a321) * idet1;
			dest1._10 = t011 * idet1;
			dest1._11 = (a021 * a231 * a301 - a031 * a221 * a301 + a031 * a201 * a321 - a001 * a231 * a321 - a021 * a201 * a331 + a001 * a221 * a331) * idet1;
			dest1._12 = (a031 * a211 * a301 - a011 * a231 * a301 - a031 * a201 * a311 + a001 * a231 * a311 + a011 * a201 * a331 - a001 * a211 * a331) * idet1;
			dest1._13 = (a011 * a221 * a301 - a021 * a211 * a301 + a021 * a201 * a311 - a001 * a221 * a311 - a011 * a201 * a321 + a001 * a211 * a321) * idet1;
			dest1._20 = t021 * idet1;
			dest1._21 = (a031 * a121 * a301 - a021 * a131 * a301 - a031 * a101 * a321 + a001 * a131 * a321 + a021 * a101 * a331 - a001 * a121 * a331) * idet1;
			dest1._22 = (a011 * a131 * a301 - a031 * a111 * a301 + a031 * a101 * a311 - a001 * a131 * a311 - a011 * a101 * a331 + a001 * a111 * a331) * idet1;
			dest1._23 = (a021 * a111 * a301 - a011 * a121 * a301 - a021 * a101 * a311 + a001 * a121 * a311 + a011 * a101 * a321 - a001 * a111 * a321) * idet1;
			dest1._30 = t031 * idet1;
			dest1._31 = (a021 * a131 * a201 - a031 * a121 * a201 + a031 * a101 * a221 - a001 * a131 * a221 - a021 * a101 * a231 + a001 * a121 * a231) * idet1;
			dest1._32 = (a031 * a111 * a201 - a011 * a131 * a201 - a031 * a101 * a211 + a001 * a131 * a211 + a011 * a101 * a231 - a001 * a111 * a231) * idet1;
			dest1._33 = (a011 * a121 * a201 - a021 * a111 * a201 + a021 * a101 * a211 - a001 * a121 * a211 - a011 * a101 * a221 + a001 * a111 * a221) * idet1;
			cameraTransform.set_matrix(dest1);
			sceneManager.nextFrame(time,deltaTime);
		});
		fxLoader.load();
		canvas.run();
	}
	run(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(true);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_RUN_START,ExampleAssimp.LABEL_RUN_STOP);
		anim.play();
	}
	walk(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(true);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_WALK_START,ExampleAssimp.LABEL_WALK_STOP);
		anim.play();
	}
	kick(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(false);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_KICK_START,ExampleAssimp.LABEL_KICK_STOP,true);
		anim.play();
	}
	punch(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(false);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_PUNCH_START,ExampleAssimp.LABEL_PUNCH_STOP,true);
		anim.play();
	}
	idle(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(false);
		anim.resetPlaybackWindow();
		anim.seekLabel(ExampleAssimp.LABEL_IDLE);
		anim.stop();
	}
	stun(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(true);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_STUN_START,ExampleAssimp.LABEL_STUN_STOP);
		anim.play();
	}
	printAnimationInfo(anim) {
		if(anim == null) {
			return;
		}
		haxe_Log.trace("Animation labels\n--------------",{ fileName : "Main.hx", lineNumber : 176, className : "ExampleAssimp", methodName : "printAnimationInfo"});
		haxe_Log.trace("\n",{ fileName : "Main.hx", lineNumber : 177, className : "ExampleAssimp", methodName : "printAnimationInfo"});
		var _g = 0;
		var _g1 = anim.get_numLabels();
		while(_g < _g1) {
			var labelId = _g++;
			haxe_Log.trace("\t'",{ fileName : "Main.hx", lineNumber : 180, className : "ExampleAssimp", methodName : "printAnimationInfo"});
			haxe_Log.trace(anim.labelName(labelId),{ fileName : "Main.hx", lineNumber : 181, className : "ExampleAssimp", methodName : "printAnimationInfo", customParams : ["'\tat t = ",anim.labelTime(labelId)]});
			haxe_Log.trace("\n",{ fileName : "Main.hx", lineNumber : 182, className : "ExampleAssimp", methodName : "printAnimationInfo"});
		}
		haxe_Log.trace("Animation controls\n--------------\n\t[up]\trun\n\t[down]\twalk\n\t[left]\tpunch\n\t[right]\tkick\n\t[space]\tstun\n\t[end]\tidle",{ fileName : "Main.hx", lineNumber : 185, className : "ExampleAssimp", methodName : "printAnimationInfo"});
		haxe_Log.trace("\n",{ fileName : "Main.hx", lineNumber : 186, className : "ExampleAssimp", methodName : "printAnimationInfo"});
		haxe_Log.trace("\t[r]\treverse animation\n\t[1]\tlow speed\n\t[2]\tnormal speed\n\t[3]\thigh speed\n",{ fileName : "Main.hx", lineNumber : 187, className : "ExampleAssimp", methodName : "printAnimationInfo"});
		haxe_Log.trace("\n",{ fileName : "Main.hx", lineNumber : 188, className : "ExampleAssimp", methodName : "printAnimationInfo"});
	}
}
ExampleAssimp.__name__ = true;
Object.assign(ExampleAssimp.prototype, {
	__class__: ExampleAssimp
});
Math.__name__ = true;
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	static fields(o) {
		var a = [];
		if(o != null) {
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compareMethods(f1,f2) {
		if(f1 == f2) {
			return true;
		}
		if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
			return false;
		}
		if(f1.scope == f2.scope && f1.method == f2.method) {
			return f1.method != null;
		} else {
			return false;
		}
	}
}
Reflect.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
		if(isNaN(v)) {
			return null;
		}
		return v;
	}
}
Std.__name__ = true;
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = true;
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
});
class StringTools {
	static isSpace(s,pos) {
		var c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
StringTools.__name__ = true;
class assimp_No {
	constructor() {
		this.VALIDATEDS_PROCESS = true;
	}
}
assimp_No.__name__ = true;
Object.assign(assimp_No.prototype, {
	__class__: assimp_No
});
class assimp_Process {
	constructor() {
	}
}
assimp_Process.__name__ = true;
Object.assign(assimp_Process.prototype, {
	__class__: assimp_Process
});
class assimp_Assimp {
	constructor() {
	}
	static aiCreateAnimMesh(mesh) {
		var animesh = new assimp_format_AiAnimMesh();
		animesh.mVertices = mesh.vertices;
		animesh.mNormals = mesh.normals;
		animesh.mTangents = mesh.tangents;
		animesh.mBitangents = mesh.bitangents;
		animesh.mNumVertices = mesh.numVertices;
		animesh.mColors = mesh.colors.slice();
		animesh.mTextureCoords = mesh.textureCoords.slice();
		return animesh;
	}
}
assimp_Assimp.__name__ = true;
Object.assign(assimp_Assimp.prototype, {
	__class__: assimp_Assimp
});
class assimp_BaseImporter {
	constructor() {
		if(assimp_BaseImporter._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
	}
	canRead(file,ioStream,checkSig) {
		return false;
	}
	readFile(imp,ioStream,filePath,buffers) {
		this.progress = imp.progressHandler;
		this.setupProperties(imp);
		var sc = new assimp_format_AiScene();
		this.internReadFile(filePath,ioStream,sc,buffers);
		return sc;
	}
	setupProperties(imp) {
	}
	extensionList() {
		return this.info.fileExtensions;
	}
	internReadFile(file,ioStream,pScene,buffers) {
	}
	getExtension(file) {
		var pos = file.lastIndexOf(".");
		if(pos == -1) {
			return "";
		}
		return file.substring(pos + 1).toLowerCase();
	}
	static AI_MAKE_MAGIC(string) {
		return (HxOverrides.cca(string,0) << 24) + (HxOverrides.cca(string,1) << 16) + (HxOverrides.cca(string,2) << 8) + HxOverrides.cca(string,3);
	}
}
assimp_BaseImporter.__name__ = true;
Object.assign(assimp_BaseImporter.prototype, {
	__class__: assimp_BaseImporter
});
class assimp_SharedPostProcessInfo {
	addProperty(name,data) {
	}
	getProperty(name) {
	}
	removeProperty(name) {
	}
}
assimp_SharedPostProcessInfo.__name__ = true;
Object.assign(assimp_SharedPostProcessInfo.prototype, {
	__class__: assimp_SharedPostProcessInfo
});
class assimp_BaseProcess {
	constructor() {
	}
	isActive(flags) {
		return false;
	}
	executeOnScene(imp) {
		this.progress = imp.progressHandler;
		this.setupProperties(imp);
		this.execute(imp.scene);
	}
	setupProperties(imp) {
	}
	execute(scene) {
	}
}
assimp_BaseProcess.__name__ = true;
Object.assign(assimp_BaseProcess.prototype, {
	__class__: assimp_BaseProcess
});
class assimp_Config {
	static COLORSn(n) {
		return 1 << n + 20;
	}
	static TEXCOORDSn(n) {
		return 1 << n + 25;
	}
}
assimp_Config.__name__ = true;
class assimp_AiConfig {
}
assimp_AiConfig.__name__ = true;
class assimp_IOStream {
	constructor() {
	}
	get_length() {
		return this.bytesInput.totlen;
	}
	get_position() {
		return this.bytesInput.pos;
	}
	set_position(p) {
		return this.bytesInput.set_position(p);
	}
	seek(n) {
		var _g = this.bytesInput;
		_g.set_position(_g.pos + n);
	}
	readByte() {
		return this.bytesInput.readByte();
	}
	readBytes(buf,pos,len) {
		return this.bytesInput.readBytes(buf,pos,len);
	}
	readFloat() {
		return this.bytesInput.readFloat();
	}
	readDouble() {
		return this.bytesInput.readDouble();
	}
	readInt8() {
		return this.bytesInput.readInt8();
	}
	readInt16() {
		return this.bytesInput.readInt16();
	}
	readUInt16() {
		return this.bytesInput.readUInt16();
	}
	readInt32() {
		return this.bytesInput.readInt32();
	}
	readString(len) {
		return this.bytesInput.readString(len);
	}
}
assimp_IOStream.__name__ = true;
Object.assign(assimp_IOStream.prototype, {
	__class__: assimp_IOStream
});
class assimp_DefaultIOSystem extends assimp_IOStream {
	constructor() {
		super();
	}
}
assimp_DefaultIOSystem.__name__ = true;
assimp_DefaultIOSystem.__super__ = assimp_IOStream;
Object.assign(assimp_DefaultIOSystem.prototype, {
	__class__: assimp_DefaultIOSystem
});
class assimp_ProgressHandler {
	constructor() {
		this._progressFunction = function(v) {
		};
	}
	progressFunction(f) {
		this._progressFunction = f;
	}
	update(percentage) {
		if(percentage == null) {
			percentage = -1;
		}
		this._progressFunction(percentage);
		return false;
	}
	updateFileRead(currentStep,numberOfSteps) {
		var f = numberOfSteps != 0 ? currentStep / numberOfSteps : 1;
		this.update(f * 0.5);
	}
	updatePostProcess(currentStep,numberOfSteps) {
		var f = numberOfSteps != 0 ? currentStep / numberOfSteps : 1;
		this.update(f * 0.5 + 0.5);
	}
}
assimp_ProgressHandler.__name__ = true;
Object.assign(assimp_ProgressHandler.prototype, {
	__class__: assimp_ProgressHandler
});
class assimp_DefaultProgressHandler extends assimp_ProgressHandler {
	constructor() {
		super();
	}
}
assimp_DefaultProgressHandler.__name__ = true;
assimp_DefaultProgressHandler.__super__ = assimp_ProgressHandler;
Object.assign(assimp_DefaultProgressHandler.prototype, {
	__class__: assimp_DefaultProgressHandler
});
class assimp_Hash {
	static superFastHash(key,len,hash) {
		if(hash == null) {
			hash = 0;
		}
		if(len == null) {
			len = 0;
		}
		if(len == 0) {
			len = key.length;
		}
		var length = len;
		var hash1 = length;
		var tmp = 0;
		var rem = 0;
		rem = length & 3;
		length >>= 2;
		var i = 0;
		while(i < length) {
			hash1 += HxOverrides.cca(key,i) | HxOverrides.cca(key,i + 1) << 8;
			var index = i + 2;
			tmp = (HxOverrides.cca(key,index) | HxOverrides.cca(key,index + 1) << 8) << 11 ^ hash1;
			hash1 = hash1 << 16 ^ tmp;
			hash1 += hash1 >> 11;
			i += 4;
		}
		switch(rem) {
		case 1:
			hash1 += HxOverrides.cca(key,i);
			hash1 ^= hash1 << 10;
			hash1 += hash1 >> 1;
			break;
		case 2:
			hash1 += HxOverrides.cca(key,i) | HxOverrides.cca(key,i + 1) << 8;
			hash1 ^= hash1 << 11;
			hash1 += hash1 >> 17;
			break;
		case 3:
			hash1 += HxOverrides.cca(key,i) | HxOverrides.cca(key,i + 1) << 8;
			hash1 ^= hash1 << 16;
			hash1 ^= HxOverrides.cca(key,i + 1);
			hash1 += hash1 >> 11;
			break;
		}
		hash1 ^= hash1 << 3;
		hash1 += hash1 >> 5;
		hash1 ^= hash1 << 4;
		hash1 += hash1 >> 17;
		hash1 ^= hash1 << 25;
		hash1 += hash1 >> 6;
		return hash1;
	}
}
assimp_Hash.__name__ = true;
class assimp_IOStreamUtil {
	static readT(stream,r) {
		var t = r(stream);
		return t;
	}
	static readAiVector3D(stream) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var v = this1;
		v.x = stream.bytesInput.readFloat();
		v.y = stream.bytesInput.readFloat();
		v.z = stream.bytesInput.readFloat();
		return v;
	}
	static readAiColor3D(stream) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var c = this1;
		c.x = stream.bytesInput.readFloat();
		c.y = stream.bytesInput.readFloat();
		c.z = stream.bytesInput.readFloat();
		return c;
	}
	static readAiColor4D(stream) {
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var c = this1;
		c.x = stream.bytesInput.readFloat();
		c.y = stream.bytesInput.readFloat();
		c.z = stream.bytesInput.readFloat();
		c.w = stream.bytesInput.readFloat();
		return c;
	}
	static writeAiColor4D(stream,c) {
		stream.writeFloat(c.x);
		stream.writeFloat(c.y);
		stream.writeFloat(c.z);
		stream.writeFloat(c.w);
		return stream;
	}
	static readAiQuaternion(stream) {
		var this1 = new glm_QuatBase();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 1;
		var v = this1;
		v.w = stream.bytesInput.readFloat();
		v.x = stream.bytesInput.readFloat();
		v.y = stream.bytesInput.readFloat();
		v.z = stream.bytesInput.readFloat();
		return v;
	}
	static readAiString(stream) {
		var len = stream.bytesInput.readInt32();
		if(len > 0) {
			var s = stream.bytesInput.readString(len);
			return s;
		}
		return null;
	}
	static writeAiString(stream,s) {
		if(s == null) {
			throw new js__$Boot_HaxeError("error null writeAiString str");
		}
		var tmp = new haxe_io_BytesOutput();
		tmp.writeString(s);
		var len = tmp.b.pos;
		stream.writeInt32(len);
		stream.writeString(s);
		return stream;
	}
	static readAiVertexWeight(stream) {
		var w = new assimp_format_AiVertexWeight();
		w.vertexId = stream.bytesInput.readInt32();
		w.weight = stream.bytesInput.readFloat();
		return w;
	}
	static readAiMatrix4x4(stream) {
		var _g = [];
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		_g.push(stream.bytesInput.readFloat());
		var arr = _g;
		var this1 = new glm_Mat4Base();
		this1._00 = arr[0];
		this1._01 = arr[1];
		this1._02 = arr[2];
		this1._03 = arr[3];
		this1._10 = arr[4];
		this1._11 = arr[5];
		this1._12 = arr[6];
		this1._13 = arr[7];
		this1._20 = arr[8];
		this1._21 = arr[9];
		this1._22 = arr[10];
		this1._23 = arr[11];
		this1._30 = arr[12];
		this1._31 = arr[13];
		this1._32 = arr[14];
		this1._33 = arr[15];
		var m = this1;
		return m;
	}
	static readAiVectorKey(stream) {
		var v = new assimp_format_AiVectorKey();
		v.time = stream.bytesInput.readDouble();
		v.value = assimp_IOStreamUtil.readAiVector3D(stream);
		return v;
	}
	static readAiQuatKey(stream) {
		var v = new assimp_format_AiQuatKey();
		v.time = stream.bytesInput.readDouble();
		v.value = assimp_IOStreamUtil.readAiQuaternion(stream);
		return v;
	}
	static readArray(stream,r,out,size) {
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			var t = r(stream);
			out[i] = t;
		}
		return out;
	}
	static readBounds(stream,size,n) {
	}
}
assimp_IOStreamUtil.__name__ = true;
class assimp_IOSystem {
	constructor() {
	}
	exists(file) {
		return false;
	}
	open(file) {
		return null;
	}
	close(stream) {
	}
}
assimp_IOSystem.__name__ = true;
Object.assign(assimp_IOSystem.prototype, {
	__class__: assimp_IOSystem
});
class assimp_MemoryIOSystem extends assimp_IOSystem {
	constructor(filename,bytes) {
		super();
		this.filename = filename;
		this.bytes = bytes;
	}
}
assimp_MemoryIOSystem.__name__ = true;
assimp_MemoryIOSystem.__super__ = assimp_IOSystem;
Object.assign(assimp_MemoryIOSystem.prototype, {
	__class__: assimp_MemoryIOSystem
});
class assimp_MemoryIOStream extends assimp_IOStream {
	constructor(b,pos,len) {
		super();
		this.bytes = b;
		this.bytesInput = new haxe_io_BytesInput(b,pos,len);
	}
}
assimp_MemoryIOStream.__name__ = true;
assimp_MemoryIOStream.__super__ = assimp_IOStream;
Object.assign(assimp_MemoryIOStream.prototype, {
	__class__: assimp_MemoryIOStream
});
class assimp_ImporterPimpl {
	constructor() {
		this.properties = new haxe_ds_IntMap();
		this.ppShared = [];
		this.importer = this.importerInstanceList();
		this.postProcessingSteps = this.postProcessingStepInstanceList();
	}
	isDefaultHandler() {
		return ((this.ioSystem) instanceof assimp_DefaultIOSystem);
	}
	importerInstanceList() {
		return [new assimp_format_assbin_AssbinLoader(),new assimp_format_gltf2_GlTF2Importer()];
	}
	postProcessingStepInstanceList() {
		return [];
	}
}
assimp_ImporterPimpl.__name__ = true;
Object.assign(assimp_ImporterPimpl.prototype, {
	__class__: assimp_ImporterPimpl
});
class haxe_IMap {
}
haxe_IMap.__name__ = true;
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return HxOverrides.iter(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
}
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
});
class assimp_Importer {
	constructor() {
	}
	getErrorString() {
		return "";
	}
	registerLoader(imp) {
		var st = imp.extensionList();
		var baked = "";
		var _g = 0;
		while(_g < st.length) {
			var it = st[_g];
			++_g;
			if(assimp_Assimp.DEBUG && this.isExtensionSupported(it)) {
				haxe_Log.trace("The file extension $it is already in use",{ fileName : "assimp/Importer.hx", lineNumber : 40, className : "assimp.Importer", methodName : "registerLoader"});
			}
			baked += "$it ";
		}
		assimp_Importer.impl.importer.push(imp);
		haxe_Log.trace("Registering custom importer for these file extensions: $baked",{ fileName : "assimp/Importer.hx", lineNumber : 45, className : "assimp.Importer", methodName : "registerLoader"});
		return 0;
	}
	unregisterLoader(imp) {
		if(HxOverrides.remove(assimp_Importer.impl.importer,imp)) {
			haxe_Log.trace("Unregistering custom importer: ",{ fileName : "assimp/Importer.hx", lineNumber : 57, className : "assimp.Importer", methodName : "unregisterLoader"});
			return 0;
		} else {
			haxe_Log.trace("Unable to remove custom importer: I can't find you ...",{ fileName : "assimp/Importer.hx", lineNumber : 60, className : "assimp.Importer", methodName : "unregisterLoader"});
			return -1;
		}
	}
	registerPPStep(imp) {
		assimp_Importer.impl.postProcessingSteps.push(imp);
		haxe_Log.trace("Registering custom post-processing step",{ fileName : "assimp/Importer.hx", lineNumber : 75, className : "assimp.Importer", methodName : "registerPPStep"});
		return 0;
	}
	unregisterPPStep(imp) {
		if(HxOverrides.remove(assimp_Importer.impl.postProcessingSteps,imp)) {
			haxe_Log.trace("Unregistering custom post-processing step",{ fileName : "assimp/Importer.hx", lineNumber : 88, className : "assimp.Importer", methodName : "unregisterPPStep"});
			return 0;
		} else {
			haxe_Log.trace("Unable to remove custom post-processing step: I can't find you ..",{ fileName : "assimp/Importer.hx", lineNumber : 92, className : "assimp.Importer", methodName : "unregisterPPStep"});
			return -1;
		}
	}
	set(szName,value) {
		var _this = assimp_Importer.impl.properties;
		var key = assimp_Hash.superFastHash(szName);
		_this.h[key] = value;
	}
	get(szName) {
		var _this = assimp_Importer.impl.properties;
		var key = assimp_Hash.superFastHash(szName);
		return _this.h[key];
	}
	writeLogOpening(file) {
	}
	get_progressHandler() {
		return assimp_Importer.impl.progressHandler;
	}
	set_progressHandler(value) {
		assimp_Importer.impl.progressHandler = value;
		return value;
	}
	get_ioHandler() {
		return assimp_Importer.impl.ioSystem;
	}
	set_ioHandler(value) {
		assimp_Importer.impl.ioSystem = value;
		return value;
	}
	readFile(file,ioSystem,flags) {
		this.writeLogOpening(file);
		if(assimp_Importer.impl.scene != null) {
			haxe_Log.trace("(Deleting previous scene)",{ fileName : "assimp/Importer.hx", lineNumber : 132, className : "assimp.Importer", methodName : "readFile"});
			this.freeScene();
		}
		var stream = this.get_ioHandler().open(file);
		this.readFileFromStream(file,stream,flags,[]);
		this.get_ioHandler().close(stream);
		return assimp_Importer.impl.scene;
	}
	readFileFromMemory(buffer,flags,hint,buffers) {
		var MaxLenHint = 200;
		if(buffer.length == 0 || hint != null && hint.length > MaxLenHint) {
			assimp_Importer.impl.errorString = "Invalid parameters passed to ReadFileFromMemory()";
			return null;
		}
		var AI_MEMORYIO_MAGIC_FILENAME = "___magic___";
		var fileName = AI_MEMORYIO_MAGIC_FILENAME + "." + hint;
		var stream = new assimp_MemoryIOStream(buffer);
		if(assimp_Importer.impl.scene != null) {
			haxe_Log.trace("(Deleting previous scene)",{ fileName : "assimp/Importer.hx", lineNumber : 166, className : "assimp.Importer", methodName : "readFileFromMemory"});
			this.freeScene();
		}
		var buffs = buffers.map(function(b) {
			return new assimp_MemoryIOStream(b);
		});
		return this.readFileFromStream(fileName,stream,flags,buffs);
	}
	readFileFromStream(file,stream,flags,buffers) {
		var imp = Lambda.find(assimp_Importer.impl.importer,function(it) {
			return it.canRead(file,stream,false);
		});
		if(imp == null) {
			haxe_Log.trace("Assimp could not find an importer for the file!",{ fileName : "assimp/Importer.hx", lineNumber : 177, className : "assimp.Importer", methodName : "readFileFromStream"});
			return null;
		}
		var fileSize = stream.bytesInput.totlen;
		var desc = imp.info;
		var ext = desc.name;
		haxe_Log.trace("Found a matching importer for this file format: $ext.",{ fileName : "assimp/Importer.hx", lineNumber : 206, className : "assimp.Importer", methodName : "readFileFromStream"});
		assimp_Importer.impl.progressHandler.updateFileRead(0,fileSize);
		assimp_Importer.impl.scene = imp.readFile(assimp_Importer.impl,stream,file,buffers);
		assimp_Importer.impl.progressHandler.updateFileRead(fileSize,fileSize);
		if(assimp_Importer.impl.scene != null) {
			if(!assimp_Assimp.NO.VALIDATEDS_PROCESS) {
				if((flags & 1024) != 0) {
					new assimp_postProcess_ValidateDSProcess().executeOnScene(assimp_Importer.impl);
					if(assimp_Importer.impl.scene == null) {
						return null;
					}
				}
			}
			new assimp_ScenePreprocessor().processScene(assimp_Importer.impl.scene);
			this.applyPostProcessing(flags & ~1024);
		} else if(assimp_Importer.impl.scene == null) {
			assimp_Importer.impl.errorString = imp.errorText;
		}
		return assimp_Importer.impl.scene;
	}
	applyPostProcessing(flags_) {
		if(assimp_Importer.impl.scene == null) {
			return null;
		}
		if(flags_ == 0) {
			return assimp_Importer.impl.scene;
		}
		return assimp_Importer.impl.scene;
	}
	applyCustomizedPostProcessing(rootProcess,requestValidation) {
		if(null == assimp_Importer.impl.scene) {
			return null;
		}
		if(null == rootProcess) {
			return assimp_Importer.impl.scene;
		}
		haxe_Log.trace("Entering customized post processing pipeline",{ fileName : "assimp/Importer.hx", lineNumber : 274, className : "assimp.Importer", methodName : "applyCustomizedPostProcessing"});
		if(!assimp_Assimp.NO.VALIDATEDS_PROCESS) {
			if(requestValidation) {
				new assimp_postProcess_ValidateDSProcess().executeOnScene(assimp_Importer.impl);
				if(assimp_Importer.impl.scene == null) {
					return null;
				}
			}
		}
		if(assimp_Assimp.DEBUG && assimp_Importer.impl.extraVerbose && assimp_Assimp.NO.VALIDATEDS_PROCESS) {
			haxe_Log.trace("Verbose Import is not available due to build settings",{ fileName : "assimp/Importer.hx", lineNumber : 284, className : "assimp.Importer", methodName : "applyCustomizedPostProcessing"});
		} else if(assimp_Importer.impl.extraVerbose) {
			haxe_Log.trace("Not a debug build, ignoring extra verbose setting",{ fileName : "assimp/Importer.hx", lineNumber : 286, className : "assimp.Importer", methodName : "applyCustomizedPostProcessing"});
		}
		rootProcess.executeOnScene(assimp_Importer.impl);
		if(assimp_Importer.impl.extraVerbose || requestValidation) {
			haxe_Log.trace("Verbose Import: revalidating data structures",{ fileName : "assimp/Importer.hx", lineNumber : 298, className : "assimp.Importer", methodName : "applyCustomizedPostProcessing"});
			new assimp_postProcess_ValidateDSProcess().executeOnScene(assimp_Importer.impl);
			if(assimp_Importer.impl.scene == null) {
				haxe_Log.trace("Verbose Import: failed to revalidate data structures",{ fileName : "assimp/Importer.hx", lineNumber : 301, className : "assimp.Importer", methodName : "applyCustomizedPostProcessing"});
			}
		}
		haxe_Log.trace("Leaving customized post processing pipeline",{ fileName : "assimp/Importer.hx", lineNumber : 303, className : "assimp.Importer", methodName : "applyCustomizedPostProcessing"});
		return assimp_Importer.impl.scene;
	}
	freeScene() {
		assimp_Importer.impl.scene = null;
		assimp_Importer.impl.errorString = "";
	}
	errorString() {
		return assimp_Importer.impl.errorString;
	}
	scene() {
		return assimp_Importer.impl.scene;
	}
	isExtensionSupported(szExtension) {
		return null != this.getImporterExtension(szExtension);
	}
	extensionList() {
		var _g = [];
		var e = $getIterator(assimp_Importer.impl.importer.map(function(e1) {
			return e1.extensionList();
		}));
		while(e.hasNext()) {
			var e2 = e.next();
			var x = $getIterator(e2);
			while(x.hasNext()) {
				var x1 = x.next();
				_g.push(x1);
			}
		}
		return _g;
	}
	importerCount() {
		return assimp_Importer.impl.importer.length;
	}
	getImporterInfo(index) {
		return assimp_Importer.impl.importer[index].info;
	}
	getImporter(index) {
		if(assimp_Importer.impl.importer.length > index) {
			return assimp_Importer.impl.importer[index];
		} else {
			return null;
		}
	}
	getImporterExtension(szExtension) {
		return this.getImporter(this.getImporterIndex(szExtension));
	}
	getImporterIndex(szExtension) {
		var p = 0;
		while(szExtension.charAt(p) == "*" || szExtension.charAt(p) == ".") ++p;
		var ext = szExtension.substring(p);
		if(ext == "") {
			return -1;
		}
		ext = ext.toLowerCase();
		return Lambda.indexOf(assimp_Importer.impl.importer,Lambda.find(assimp_Importer.impl.importer,function(i) {
			return Lambda.has(i.extensionList(),ext);
		}));
	}
	_validateFlags(flags) {
		if((flags & 64) != 0 && (flags & 32) != 0) {
			haxe_Log.trace("AiProcess_GenSmoothNormals and AiProcess_GenNormals are incompatible",{ fileName : "assimp/Importer.hx", lineNumber : 392, className : "assimp.Importer", methodName : "_validateFlags"});
			return false;
		}
		if((flags & 4194304) != 0 && (flags & 256) != 0) {
			haxe_Log.trace("AiProcess_OptimizeGraph and AiProcess_PreTransformVertices are incompatible",{ fileName : "assimp/Importer.hx", lineNumber : 396, className : "assimp.Importer", methodName : "_validateFlags"});
			return false;
		}
		return true;
	}
}
assimp_Importer.__name__ = true;
Object.assign(assimp_Importer.prototype, {
	__class__: assimp_Importer
});
class assimp_AiImporterDesc {
	constructor() {
	}
}
assimp_AiImporterDesc.__name__ = true;
Object.assign(assimp_AiImporterDesc.prototype, {
	__class__: assimp_AiImporterDesc
});
class assimp_ProcessHelper {
	static getMeshVFormatUnique(pcMesh) {
		var iRet = 1;
		if(pcMesh.hasNormals()) {
			iRet |= 2;
		}
		if(pcMesh.hasTangentsAndBitangents()) {
			iRet |= 4;
		}
		var p = 0;
		while(pcMesh.hasTextureCoords(p)) {
			iRet |= 256 << p;
			++p;
		}
		p = 0;
		while(pcMesh.hasVertexColors(p)) iRet |= 16777216 << p++;
		return iRet;
	}
}
assimp_ProcessHelper.__name__ = true;
class assimp_ScenePreprocessor {
	constructor() {
	}
	processScene(scene) {
		this.scene = scene;
		var _g = 0;
		var _g1 = scene.meshes;
		while(_g < _g1.length) {
			var it = _g1[_g];
			++_g;
			this.AiMesh_process(it);
		}
		var _g2 = 0;
		var _g3 = scene.animations;
		while(_g2 < _g3.length) {
			var it1 = _g3[_g2];
			++_g2;
			this.AiAnimation_process(it1);
		}
		if(scene.numMaterials == 0 && scene.numMeshes > 0) {
			var tmp = new assimp_format_AiMaterial();
			tmp.color = new assimp_format_Color();
			var this1 = new glm_Vec3Base();
			this1.x = 0.6;
			this1.y = 0;
			this1.z = 0;
			tmp.color.diffuse = this1;
			tmp.name = assimp_format_AiDefines.AI_DEFAULT_MATERIAL_NAME;
			scene.materials.push(tmp);
			haxe_Log.trace("ScenePreprocessor: Adding default material '$ Material.AI_DEFAULT_MATERIAL_NAME'",{ fileName : "assimp/ScenePreprocessor.hx", lineNumber : 55, className : "assimp.ScenePreprocessor", methodName : "processScene"});
			var _g4 = 0;
			var _g5 = scene.meshes;
			while(_g4 < _g5.length) {
				var it2 = _g5[_g4];
				++_g4;
				it2.materialIndex = scene.numMaterials;
			}
			scene.numMaterials++;
		}
	}
	AiMesh_process(this1) {
		var _g = 0;
		var _g1 = this1.textureCoords;
		while(_g < _g1.length) {
			var it = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = it.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var this2 = it[i];
				if(Lambda.empty([this2.x,this2.y,this2.z])) {
					var this3 = new glm_Vec3Base();
					this3.x = 0;
					this3.y = 0;
					this3.z = 0;
					it[i] = this3;
				}
			}
		}
		if(this1.primitiveTypes == 0) {
			var _g21 = 0;
			var _g3 = this1.faces;
			while(_g21 < _g3.length) {
				var it1 = _g3[_g21];
				++_g21;
				var tmp;
				switch(it1.numIndices) {
				case 1:
					tmp = this1.primitiveTypes | 1;
					break;
				case 2:
					tmp = this1.primitiveTypes | 2;
					break;
				case 3:
					tmp = this1.primitiveTypes | 4;
					break;
				default:
					tmp = this1.primitiveTypes | 8;
				}
				this1.primitiveTypes = tmp;
			}
		}
		if(!Lambda.empty(this1.tangents) && !Lambda.empty(this1.normals) && Lambda.empty(this1.bitangents)) {
			var _g22 = [];
			var _g31 = 0;
			var _g4 = this1.numVertices;
			while(_g31 < _g4) {
				var i1 = _g31++;
				var this4 = new glm_Vec3Base();
				this4.x = 0;
				this4.y = 0;
				this4.z = 0;
				_g22.push(this4);
			}
			this1.bitangents = _g22;
			var _g5 = 0;
			var _g6 = this1.numVertices;
			while(_g5 < _g6) {
				var i2 = _g5++;
				var a = this1.normals[i2];
				var b = this1.tangents[i2];
				var dest = this1.bitangents[i2];
				var x = a.y * b.z - a.z * b.y;
				var y = a.z * b.x - a.x * b.z;
				var z = a.x * b.y - a.y * b.x;
				var this5 = new glm_Vec3Base();
				this5.x = x;
				this5.y = y;
				this5.z = z;
				dest = this5;
			}
		}
	}
	AiAnimation_process(this1) {
		var first = 10e10;
		var last = -10e10;
		var _g = 0;
		var _g1 = this1.channels;
		while(_g < _g1.length) {
			var channel = _g1[_g];
			++_g;
			if(this1.duration == -1.0) {
				var _g2 = 0;
				var _g11 = channel.positionKeys;
				while(_g2 < _g11.length) {
					var it = _g11[_g2];
					++_g2;
					first = Math.min(first,it.time);
					last = Math.max(last,it.time);
				}
				var _g21 = 0;
				var _g3 = channel.scalingKeys;
				while(_g21 < _g3.length) {
					var it1 = _g3[_g21];
					++_g21;
					first = Math.min(first,it1.time);
					last = Math.max(last,it1.time);
				}
				var _g4 = 0;
				var _g5 = channel.rotationKeys;
				while(_g4 < _g5.length) {
					var it2 = _g5[_g4];
					++_g4;
					first = Math.min(first,it2.time);
					last = Math.max(last,it2.time);
				}
			}
			if(channel.numRotationKeys == 0 || channel.numPositionKeys == 0 || channel.numScalingKeys == 0) {
				var it3 = this.scene.rootNode.findNode(channel.nodeName);
				if(it3 != null) {
					var this2 = new glm_Vec3Base();
					this2.x = 0;
					this2.y = 0;
					this2.z = 0;
					var scaling = this2;
					var this3 = new glm_Vec3Base();
					this3.x = 0;
					this3.y = 0;
					this3.z = 0;
					var position = this3;
					var this4 = new glm_QuatBase();
					this4.x = 0;
					this4.y = 0;
					this4.z = 0;
					this4.w = 1;
					var rotation = this4;
					assimp_format_Defs.decompose(it3.transformation,scaling,rotation,position);
					if(channel.numRotationKeys == 0) {
						channel.numRotationKeys = 1;
						channel.rotationKeys = [new assimp_format_AiQuatKey(0.0,rotation)];
						haxe_Log.trace("ScenePreprocessor: Dummy rotation track has been generated",{ fileName : "assimp/ScenePreprocessor.hx", lineNumber : 158, className : "assimp.ScenePreprocessor", methodName : "AiAnimation_process"});
					}
					if(channel.numScalingKeys == 0) {
						channel.numScalingKeys = 1;
						channel.scalingKeys = [new assimp_format_AiVectorKey(0.0,scaling)];
						haxe_Log.trace("ScenePreprocessor: Dummy scaling track has been generated",{ fileName : "assimp/ScenePreprocessor.hx", lineNumber : 163, className : "assimp.ScenePreprocessor", methodName : "AiAnimation_process"});
					}
					if(channel.numPositionKeys == 0) {
						channel.numPositionKeys = 1;
						channel.positionKeys = [new assimp_format_AiVectorKey(0.0,position)];
						haxe_Log.trace("ScenePreprocessor: Dummy position track has been generated",{ fileName : "assimp/ScenePreprocessor.hx", lineNumber : 168, className : "assimp.ScenePreprocessor", methodName : "AiAnimation_process"});
					}
				}
			}
		}
		if(this1.duration == -1.0) {
			haxe_Log.trace("ScenePreprocessor: Setting animation duration",{ fileName : "assimp/ScenePreprocessor.hx", lineNumber : 174, className : "assimp.ScenePreprocessor", methodName : "AiAnimation_process"});
			this1.duration = last - Math.min(first,0.0);
		}
	}
}
assimp_ScenePreprocessor.__name__ = true;
Object.assign(assimp_ScenePreprocessor.prototype, {
	__class__: assimp_ScenePreprocessor
});
class assimp_StringUtil {
	static formatString(s,d) {
		return StringTools.replace(s,"%",Std.string(d) + "");
	}
}
assimp_StringUtil.__name__ = true;
class assimp_Types {
}
assimp_Types.__name__ = true;
class assimp_AiMemoryInfo {
}
assimp_AiMemoryInfo.__name__ = true;
class assimp_format_AiMatKeys {
	constructor() {
	}
	static getFullTextureName(baseName,texType,texIndex) {
		return "{$baseName},{$texType},{$texIndex}";
	}
	static getBaseName(fullyQualifiedName) {
		if(fullyQualifiedName == null) {
			return "";
		}
		var substrings = fullyQualifiedName.split(",");
		if(substrings != null && substrings.length == 3) {
			return substrings[0];
		}
		return "";
	}
}
assimp_format_AiMatKeys.__name__ = true;
Object.assign(assimp_format_AiMatKeys.prototype, {
	__class__: assimp_format_AiMatKeys
});
class assimp_format_AiPbrmaterial {
}
assimp_format_AiPbrmaterial.__name__ = true;
class assimp_format_AiVectorKey {
	constructor(t,v) {
		this.time = t;
		var tmp;
		if(v != null) {
			tmp = v;
		} else {
			var this1 = new glm_Vec3Base();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			tmp = this1;
		}
		this.value = tmp;
	}
}
assimp_format_AiVectorKey.__name__ = true;
Object.assign(assimp_format_AiVectorKey.prototype, {
	__class__: assimp_format_AiVectorKey
});
class assimp_format_AiQuatKey {
	constructor(t,v) {
		if(t == null) {
			t = 0;
		}
		this.time = t;
		var tmp;
		if(v != null) {
			tmp = v;
		} else {
			var this1 = new glm_QuatBase();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this1.w = 1;
			tmp = this1;
		}
		this.value = tmp;
	}
}
assimp_format_AiQuatKey.__name__ = true;
Object.assign(assimp_format_AiQuatKey.prototype, {
	__class__: assimp_format_AiQuatKey
});
class assimp_format_AiMeshKey {
	constructor() {
		this.time = 0;
		this.value = 0;
	}
}
assimp_format_AiMeshKey.__name__ = true;
Object.assign(assimp_format_AiMeshKey.prototype, {
	__class__: assimp_format_AiMeshKey
});
class assimp_format_AiMeshMorphKey {
	constructor() {
	}
}
assimp_format_AiMeshMorphKey.__name__ = true;
Object.assign(assimp_format_AiMeshMorphKey.prototype, {
	__class__: assimp_format_AiMeshMorphKey
});
class assimp_format_AiNodeAnim {
	constructor() {
		this.nodeName = "";
		this.numPositionKeys = 0;
		this.numRotationKeys = 0;
		this.numScalingKeys = 0;
		this.scalingKeys = [];
		this.positionKeys = [];
		this.rotationKeys = [];
		this.preState = 0;
		this.postState = 0;
	}
}
assimp_format_AiNodeAnim.__name__ = true;
Object.assign(assimp_format_AiNodeAnim.prototype, {
	__class__: assimp_format_AiNodeAnim
});
class assimp_format_AiMeshAnim {
	constructor() {
		this.mKeys = [];
		this.mName = "";
		this.mNumKeys = 0;
	}
}
assimp_format_AiMeshAnim.__name__ = true;
Object.assign(assimp_format_AiMeshAnim.prototype, {
	__class__: assimp_format_AiMeshAnim
});
class assimp_format_AiMeshMorphAnim {
	constructor() {
		this.name = "";
		this.numKeys = 0;
		this.keys = [];
	}
}
assimp_format_AiMeshMorphAnim.__name__ = true;
Object.assign(assimp_format_AiMeshMorphAnim.prototype, {
	__class__: assimp_format_AiMeshMorphAnim
});
class assimp_format_AiAnimation {
	constructor() {
		this.name = "";
		this.duration = -1.0;
		this.ticksPerSecond = 0;
		this.numChannels = 0;
		this.mNumMeshChannels = 0;
		this.numMorphMeshChannels = 0;
		this.channels = [];
		this.mMeshChannels = [];
		this.morphMeshChannels = [];
	}
}
assimp_format_AiAnimation.__name__ = true;
Object.assign(assimp_format_AiAnimation.prototype, {
	__class__: assimp_format_AiAnimation
});
class assimp_format_AiCamera {
	constructor() {
		this.name = "";
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 1;
		this1.z = 0;
		this.up = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this.position = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 1;
		this.lookAt = this3;
		this.horizontalFOV = .25 * assimp_format_Defs.AI_MATH_HALF_PI;
		this.clipPlaneNear = 0.1;
		this.clipPlaneFar = 1000.0;
	}
}
assimp_format_AiCamera.__name__ = true;
Object.assign(assimp_format_AiCamera.prototype, {
	__class__: assimp_format_AiCamera
});
class assimp_format_AiDefines {
}
assimp_format_AiDefines.__name__ = true;
class assimp_format_Defs {
	static AI_MAX_ALLOC(size) {
		return 268435456 / size;
	}
	static AI_DEG_TO_RAD(x) {
		return x * 0.0174532925;
	}
	static AI_RAD_TO_DEG(x) {
		return x * 57.2957795;
	}
	static is_special_float(f) {
		return f == 255;
	}
	static distance(this1,other) {
		return Math.sqrt(Math.pow(this1.x + other.x,2.0) + Math.pow(this1.y + other.y,2.0) + Math.pow(this1.z + other.z,2.0));
	}
	static squareLength(this1) {
		return Math.sqrt(Math.pow(this1.x,2.0) + Math.pow(this1.y,2.0) + Math.pow(this1.z,2.0));
	}
	static toQuaternion(matrix) {
	}
	static decompose(this1,pScaling,pRotation,pPosition) {
	}
	static mat4_cast(q) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var result = this1;
		var qxx = q.x * q.x;
		var qyy = q.y * q.y;
		var qzz = q.z * q.z;
		var qxz = q.x * q.z;
		var qxy = q.x * q.y;
		var qyz = q.y * q.z;
		var qwx = q.w * q.x;
		var qwy = q.w * q.y;
		var qwz = q.w * q.z;
		result._00 = 1 - 2 * (qyy + qzz);
		result._01 = 2 * (qxy + qwz);
		result._02 = 2 * (qxz - qwy);
		result._10 = 2 * (qxy - qwz);
		result._11 = 1 - 2 * (qxx + qzz);
		result._12 = 2 * (qyz + qwx);
		result._20 = 2 * (qxz + qwy);
		result._21 = 2 * (qyz - qwx);
		result._22 = 1 - 2 * (qxx + qyy);
		return result;
	}
	static mat3_cast(q) {
		var this1 = new glm_Mat3Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		var result = this1;
		var qxx = q.x * q.x;
		var qyy = q.y * q.y;
		var qzz = q.z * q.z;
		var qxz = q.x * q.z;
		var qxy = q.x * q.y;
		var qyz = q.y * q.z;
		var qwx = q.w * q.x;
		var qwy = q.w * q.y;
		var qwz = q.w * q.z;
		result._00 = 1 - 2 * (qyy + qzz);
		result._01 = 2 * (qxy + qwz);
		result._02 = 2 * (qxz - qwy);
		result._10 = 2 * (qxy - qwz);
		result._11 = 1 - 2 * (qxx + qzz);
		result._12 = 2 * (qyz + qwx);
		result._20 = 2 * (qxz + qwy);
		result._21 = 2 * (qyz - qwx);
		result._22 = 1 - 2 * (qxx + qyy);
		return result;
	}
	static slerp(x,y,a) {
		var z = y;
		var cosTheta = x.x * y.x + x.y * y.y + x.z * y.z + x.w * y.w;
		if(cosTheta < 0) {
			z.x = -y.x;
			z.y = -y.y;
			z.z = -y.z;
			z.w = -y.w;
			cosTheta = -cosTheta;
		}
		if(cosTheta > 1 - assimp_format_Defs.epsilon) {
			var this1 = new glm_QuatBase();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this1.w = 1;
			var dest = this1;
			var a1 = x.x;
			dest.x = a1 + a * (z.x - a1);
			var a2 = x.y;
			dest.y = a2 + a * (z.y - a2);
			var a3 = x.z;
			dest.z = a3 + a * (z.z - a3);
			var a4 = x.w;
			dest.w = a4 + a * (z.w - a4);
			return dest;
		} else {
			var angle = Math.acos(cosTheta);
			var sclp = Math.sin((1.0 - a) * angle) / Math.sin(angle);
			var sclq = Math.sin(a * angle) / Math.sin(angle);
			var this2 = new glm_QuatBase();
			this2.x = 0;
			this2.y = 0;
			this2.z = 0;
			this2.w = 1;
			var o = this2;
			o.x = sclp * x.x + sclq * z.x;
			o.y = sclp * x.y + sclq * z.y;
			o.z = sclp * x.z + sclq * z.z;
			o.w = sclp * x.w + sclq * z.w;
			return o;
		}
	}
	static isBlack(this1) {
		if(Math.abs(this1.x) < assimp_format_Defs.epsilon && Math.abs(this1.y) < assimp_format_Defs.epsilon) {
			return Math.abs(this1.z) < assimp_format_Defs.epsilon;
		} else {
			return false;
		}
	}
}
assimp_format_Defs.__name__ = true;
class assimp_format_AiLight {
	constructor() {
		this.name = "";
		this.type = 0;
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this.position = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this.direction = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this.up = this3;
		this.attenuationConstant = 0;
		this.attenuationLinear = 1;
		this.attenuationQuadratic = 0;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		this.colorDiffuse = this4;
		var this5 = new glm_Vec3Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		this.colorSpecular = this5;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this.colorAmbient = this6;
		this.angleInnerCone = assimp_format_Defs.AI_MATH_TWO_PIf;
		this.angleOuterCone = assimp_format_Defs.AI_MATH_TWO_PIf;
		var this7 = new glm_Vec2Base();
		this7.x = 0;
		this7.y = 0;
		this.size = this7;
	}
}
assimp_format_AiLight.__name__ = true;
Object.assign(assimp_format_AiLight.prototype, {
	__class__: assimp_format_AiLight
});
class assimp_format_AiMaterialProperty {
	constructor() {
	}
	get_fullyQualifiedName() {
		return assimp_format_AiMaterial.createFullyQualifiedName(this.mKey,this.mSemantic,this.mIndex);
	}
	getFloatValue() {
		if(this.mType == 1 || this.mType == 4) {
			return new haxe_io_BytesInput(this.mData).readFloat();
		}
		return 0;
	}
	setProperty(baseName,texType,textureIndex) {
		this.mKey = baseName;
		this.mSemantic = texType;
		this.mIndex = textureIndex;
		return this;
	}
	setStringValue(s) {
		this.mType = 3;
		var tmp = new haxe_io_BytesOutput();
		assimp_IOStreamUtil.writeAiString(tmp,s);
		this.mData = tmp.getBytes();
		return this;
	}
	setIntegerValue(s) {
		this.mType = 4;
		var tmp = new haxe_io_BytesOutput();
		tmp.writeInt32(s);
		this.mData = tmp.getBytes();
		return this;
	}
	setFloatValue(s) {
		this.mType = 1;
		var tmp = new haxe_io_BytesOutput();
		tmp.writeFloat(s);
		this.mData = tmp.getBytes();
		return this;
	}
	setColor4DValue(s) {
		this.mType = 1;
		var tmp = new haxe_io_BytesOutput();
		assimp_IOStreamUtil.writeAiColor4D(tmp,s);
		this.mData = tmp.getBytes();
		return this;
	}
	getStringValue() {
		if(this.mType != 3) {
			return null;
		}
		var stream = new assimp_MemoryIOStream(this.mData);
		return assimp_IOStreamUtil.readAiString(stream);
	}
	getIntegerValue() {
		if(this.mType == 1 || this.mType == 4) {
			return new haxe_io_BytesInput(this.mData).readInt32();
		}
		return 0;
	}
	getColor4DValue() {
		if(this.mType != 1 || this.mData == null) {
			var this1 = new glm_Vec4Base();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this1.w = 0;
			return this1;
		}
		if(this.mData.length >= 16) {
			var stream = new assimp_MemoryIOStream(this.mData);
			return assimp_IOStreamUtil.readAiColor4D(stream);
		} else if(this.mData.length >= 12) {
			var stream1 = new assimp_MemoryIOStream(this.mData);
			var color3D = assimp_IOStreamUtil.readAiColor3D(stream1);
			var x = color3D.x;
			var y = color3D.y;
			var z = color3D.z;
			var this2 = new glm_Vec4Base();
			this2.x = x;
			this2.y = y;
			this2.z = z;
			this2.w = 1.0;
			return this2;
		}
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 0;
		return this3;
	}
}
assimp_format_AiMaterialProperty.__name__ = true;
Object.assign(assimp_format_AiMaterialProperty.prototype, {
	__class__: assimp_format_AiMaterialProperty
});
class assimp_format_AiTexture {
	constructor() {
	}
}
assimp_format_AiTexture.__name__ = true;
Object.assign(assimp_format_AiTexture.prototype, {
	__class__: assimp_format_AiTexture
});
class assimp_format_AiUVTransform {
	constructor() {
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		this.translation = this1;
		var this2 = new glm_Vec2Base();
		this2.x = 0;
		this2.y = 0;
		this.scaling = this2;
		this.rotation = 0;
	}
}
assimp_format_AiUVTransform.__name__ = true;
Object.assign(assimp_format_AiUVTransform.prototype, {
	__class__: assimp_format_AiUVTransform
});
class assimp_format_AiString {
	constructor(d) {
		this.data = d;
	}
}
assimp_format_AiString.__name__ = true;
Object.assign(assimp_format_AiString.prototype, {
	__class__: assimp_format_AiString
});
class assimp_format_Color {
	constructor() {
	}
}
assimp_format_Color.__name__ = true;
Object.assign(assimp_format_Color.prototype, {
	__class__: assimp_format_Color
});
class assimp_format_AiMaterialTexture {
	constructor() {
	}
}
assimp_format_AiMaterialTexture.__name__ = true;
Object.assign(assimp_format_AiMaterialTexture.prototype, {
	__class__: assimp_format_AiMaterialTexture
});
class assimp_format_AiMaterial {
	constructor() {
		this.properties = [];
		this.textures = [];
		this.numAllocated = 0;
		this.numProperties = 0;
	}
	getNonTextureProperty(baseName) {
		if(null == baseName) {
			return null;
		}
		var fullyQualifiedName = assimp_format_AiMaterial.createFullyQualifiedName(baseName,0,0);
		return this.getProperty(fullyQualifiedName);
	}
	getMaterialProperty(baseName,texType,texIndex) {
		if(null == baseName) {
			return null;
		}
		var fullyQualifiedName = assimp_format_AiMaterial.createFullyQualifiedName(baseName,texType,texIndex);
		return this.getProperty(fullyQualifiedName);
	}
	getProperty(fullyQualifiedName) {
		if(null == fullyQualifiedName) {
			return null;
		}
		return Lambda.find(this.properties,function(p) {
			return p.get_fullyQualifiedName() == fullyQualifiedName;
		});
	}
	hasNonTextureProperty(baseName) {
		if(null == baseName) {
			return false;
		}
		var fullyQualifiedName = assimp_format_AiMaterial.createFullyQualifiedName(baseName,0,0);
		return this.hasProperty(fullyQualifiedName);
	}
	hasMaterialProperty(baseName,texType,texIndex) {
		if(null == baseName) {
			return false;
		}
		var fullyQualifiedName = assimp_format_AiMaterial.createFullyQualifiedName(baseName,texType,texIndex);
		return this.hasProperty(fullyQualifiedName);
	}
	hasProperty(fullyQualifiedName) {
		if(null == fullyQualifiedName) {
			return false;
		}
		return Lambda.exists(this.properties,function(p) {
			return p.get_fullyQualifiedName() == fullyQualifiedName;
		});
	}
	addProperty(matProp) {
		if(matProp == null) {
			return false;
		}
		if(this.hasProperty(matProp.get_fullyQualifiedName())) {
			return false;
		}
		this.properties.push(matProp);
		return true;
	}
	removeNonTextureProperty(baseName) {
		if(null == baseName) {
			return false;
		}
		return this.removeProperty(assimp_format_AiMaterial.createFullyQualifiedName(baseName,0,0));
	}
	removeMaterialProperty(baseName,texType,texIndex) {
		if(null == baseName) {
			return false;
		}
		return this.removeProperty(assimp_format_AiMaterial.createFullyQualifiedName(baseName,texType,texIndex));
	}
	removeProperty(fullyQualifiedName) {
		if(null == fullyQualifiedName) {
			return false;
		}
		this.properties = this.properties.filter(function(p) {
			return p.get_fullyQualifiedName() != fullyQualifiedName;
		});
		return true;
	}
	clear() {
		this.properties = [];
	}
	getAllProperties() {
		return this.properties.slice();
	}
	getMaterialTextureCount(texType) {
		var count = 0;
		var _g = 0;
		var _g1 = this.properties;
		while(_g < _g1.length) {
			var matProp = _g1[_g];
			++_g;
			if(matProp.mKey == assimp_format_AiMatKeys.TEXTURE_BASE && matProp.mSemantic == texType) {
				count = Math.floor(Math.max(count,matProp.mIndex + 1));
			}
		}
		return count;
	}
	getMaterialTexture(texType,texIndex,texture) {
		var texName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.TEXTURE_BASE,texType,texIndex);
		var texNameProp = this.getProperty(texName);
		if(texNameProp == null) {
			return false;
		}
		var mappingName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.MAPPING_BASE,texType,texIndex);
		var uvIndexName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.UVWSRC_BASE,texType,texIndex);
		var blendFactorName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.TEXBLEND_BASE,texType,texIndex);
		var texOpName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.TEXOP_BASE,texType,texIndex);
		var uMapModeName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.MAPPINGMODE_U_BASE,texType,texIndex);
		var vMapModeName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.MAPPINGMODE_V_BASE,texType,texIndex);
		var texFlagsName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.TEXFLAGS_BASE,texType,texIndex);
		var mappingNameProp = this.getProperty(mappingName);
		var uvIndexNameProp = this.getProperty(uvIndexName);
		var blendFactorNameProp = this.getProperty(blendFactorName);
		var texOpNameProp = this.getProperty(texOpName);
		var uMapModeNameProp = this.getProperty(uMapModeName);
		var vMapModeNameProp = this.getProperty(vMapModeName);
		var texFlagsNameProp = this.getProperty(texFlagsName);
		texture.file = texNameProp.getStringValue();
		texture.type = texType;
		texture.textureIndex = texIndex;
		texture.mapping = mappingNameProp != null ? mappingNameProp.getIntegerValue() : 0;
		texture.uvwsrc = uvIndexNameProp != null ? uvIndexNameProp.getIntegerValue() : 0;
		texture.blend = blendFactorNameProp != null ? blendFactorNameProp.getFloatValue() : 0.0;
		texture.op = texOpNameProp != null ? texOpNameProp.getIntegerValue() : 0;
		texture.mapModeU = uMapModeNameProp != null ? uMapModeNameProp.getIntegerValue() : 0;
		texture.mapModeV = vMapModeNameProp != null ? vMapModeNameProp.getIntegerValue() : 0;
		texture.flags = texFlagsNameProp != null ? texFlagsNameProp.getIntegerValue() : 0;
		return true;
	}
	static createFullyQualifiedName(baseName,texType,texIndex) {
		if(null == baseName) {
			return null;
		}
		return baseName + "," + texType + "," + texIndex;
	}
}
assimp_format_AiMaterial.__name__ = true;
Object.assign(assimp_format_AiMaterial.prototype, {
	__class__: assimp_format_AiMaterial
});
class assimp_format_AiFace {
	constructor() {
	}
}
assimp_format_AiFace.__name__ = true;
Object.assign(assimp_format_AiFace.prototype, {
	__class__: assimp_format_AiFace
});
class assimp_format_Mesh {
	constructor() {
	}
	static AI_PRIMITIVE_TYPE_FOR_N_INDICES(n) {
		if(n > 3) {
			return 8;
		} else {
			return 1 << n - 1;
		}
	}
}
assimp_format_Mesh.__name__ = true;
Object.assign(assimp_format_Mesh.prototype, {
	__class__: assimp_format_Mesh
});
class assimp_format_AiVertexWeight {
	constructor() {
		this.vertexId = 0;
		this.weight = 0;
	}
}
assimp_format_AiVertexWeight.__name__ = true;
Object.assign(assimp_format_AiVertexWeight.prototype, {
	__class__: assimp_format_AiVertexWeight
});
class assimp_format_AiBone {
	constructor() {
		this.name = "";
		this.numWeights = 0;
		this.weights = [];
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		this.offsetMatrix = this1;
	}
}
assimp_format_AiBone.__name__ = true;
Object.assign(assimp_format_AiBone.prototype, {
	__class__: assimp_format_AiBone
});
class assimp_format_AiAnimMesh {
	constructor() {
	}
}
assimp_format_AiAnimMesh.__name__ = true;
Object.assign(assimp_format_AiAnimMesh.prototype, {
	__class__: assimp_format_AiAnimMesh
});
class assimp_format_AiMesh {
	constructor() {
		this.primitiveTypes = 0;
		this.numVertices = 0;
		this.numFaces = 0;
		this.vertices = [];
		this.normals = [];
		this.tangents = [];
		this.bitangents = [];
		this.colors = [];
		this.textureCoords = [];
		this.faces = [];
		this.numBones = 0;
		this.bones = [];
		this.materialIndex = 0;
		this.name = "";
		this.numAnimMeshes = 0;
		this.animMeshes = [];
		this.mMethod = 0;
		this.numUVComponents = [];
	}
	hasPositions() {
		return this.numVertices > 0;
	}
	hasFaces() {
		return this.numFaces > 0;
	}
	hasNormals() {
		if(!Lambda.empty(this.normals)) {
			return this.numVertices > 0;
		} else {
			return false;
		}
	}
	hasTangentsAndBitangents() {
		if(!Lambda.empty(this.tangents) && !Lambda.empty(this.bitangents)) {
			return this.numVertices > 0;
		} else {
			return false;
		}
	}
	hasVertexColors(index) {
		if(index >= assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {
			return false;
		} else if(index < this.colors.length) {
			return this.numVertices > 0;
		} else {
			return false;
		}
	}
	hasTextureCoords(index) {
		if(index >= assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS || index >= this.textureCoords.length) {
			return false;
		} else if(!Lambda.empty(this.textureCoords[index])) {
			return this.numVertices > 0;
		} else {
			return false;
		}
	}
	getNumUVChannels() {
		var n = 0;
		while(n < assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS && n < this.textureCoords.length && !Lambda.empty(this.textureCoords[n])) ++n;
		return n;
	}
	getNumColorChannels() {
		var n = 0;
		while(n < assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS && n < this.colors.length) ++n;
		return n;
	}
	hasBones() {
		if(!Lambda.empty(this.bones)) {
			return this.numBones > 0;
		} else {
			return false;
		}
	}
}
assimp_format_AiMesh.__name__ = true;
Object.assign(assimp_format_AiMesh.prototype, {
	__class__: assimp_format_AiMesh
});
class assimp_format_AiMetadataEntry {
	constructor(t,value) {
		this.data = value;
		this.type = t;
	}
}
assimp_format_AiMetadataEntry.__name__ = true;
Object.assign(assimp_format_AiMetadataEntry.prototype, {
	__class__: assimp_format_AiMetadataEntry
});
class assimp_format_AiMetadata {
	constructor() {
		this.map = new haxe_ds_StringMap();
	}
	numProperties() {
		return Lambda.count(this.map);
	}
	keys() {
		return this.map.keys();
	}
	set(key,value) {
		if(key == null) {
			return false;
		} else {
			var _this = this.map;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
			return true;
		}
	}
	clear() {
		this.map = new haxe_ds_StringMap();
	}
	isEmpty() {
		return Lambda.empty(this.map);
	}
	isNotEmpty() {
		return !Lambda.empty(this.map);
	}
	get(key) {
		var _this = this.map;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.map;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		} else {
			return null;
		}
	}
}
assimp_format_AiMetadata.__name__ = true;
Object.assign(assimp_format_AiMetadata.prototype, {
	__class__: assimp_format_AiMetadata
});
class assimp_format_Scene {
}
assimp_format_Scene.__name__ = true;
class assimp_format_AiNode {
	constructor() {
		this.name = "";
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.transformation = dest;
		this.parent = null;
		this.numChildren = 0;
		this.children = [];
		this.numMeshes = 0;
		this.meshes = [];
		this.metaData = new assimp_format_AiMetadata();
	}
	findNode(name) {
		if(this.name == name) {
			return this;
		}
		var tmp = this.children.filter(function(it) {
			return it.findNode(name) != null;
		});
		if(tmp.length > 0) {
			return tmp[0];
		}
		return null;
	}
}
assimp_format_AiNode.__name__ = true;
Object.assign(assimp_format_AiNode.prototype, {
	__class__: assimp_format_AiNode
});
class assimp_format_AiScene {
	constructor() {
		this.flags = 0;
		this.rootNode = new assimp_format_AiNode();
		this.numMeshes = 0;
		this.meshes = [];
		this.numMaterials = 0;
		this.materials = [];
		this.numAnimations = 0;
		this.animations = [];
		this.numTextures = 0;
		this.textures = [];
		this.numLights = 0;
		this.lights = [];
		this.numCameras = 0;
		this.cameras = [];
		this.metaData = new assimp_format_AiMetadata();
	}
	hasMeshes() {
		return !Lambda.empty(this.meshes);
	}
	hasMaterials() {
		return !Lambda.empty(this.materials);
	}
	hasLights() {
		return !Lambda.empty(this.lights);
	}
	hasTextures() {
		return !Lambda.empty(this.textures);
	}
	hasCameras() {
		return !Lambda.empty(this.cameras);
	}
	hasAnimations() {
		return !Lambda.empty(this.animations);
	}
}
assimp_format_AiScene.__name__ = true;
Object.assign(assimp_format_AiScene.prototype, {
	__class__: assimp_format_AiScene
});
class assimp_format_Version {
	constructor() {
	}
}
assimp_format_Version.__name__ = true;
Object.assign(assimp_format_Version.prototype, {
	__class__: assimp_format_Version
});
class assimp_format_assbin_AssbinLoader extends assimp_BaseImporter {
	constructor() {
		super();
		this.info = new assimp_AiImporterDesc();
		this.info.name = ".assbin Importer";
		this.info.comments = "Gargaj / Conspiracy";
		this.info.flags = 2 | 4;
		this.info.fileExtensions = ["assbin"];
		this.shortened = false;
		this.compressed = false;
	}
	canRead(file,ioStream,checkSig) {
		var s = ioStream.bytesInput.readString(32);
		s = HxOverrides.substr(s,0,19);
		return s == "ASSIMP.binary-dump.";
	}
	internReadFile(file,ioStream,pScene,buffers) {
		ioStream.bytesInput.set_position(0);
		var stream = ioStream;
		if(null == stream) {
			return;
		}
		var _g = stream.bytesInput;
		_g.set_position(_g.pos + 44);
		var versionMajor = stream.bytesInput.readInt32();
		var versionMinor = stream.bytesInput.readInt32();
		if(versionMinor != assimp_format_assbin_AssbinLoader.ASSBIN_VERSION_MINOR || versionMajor != assimp_format_assbin_AssbinLoader.ASSBIN_VERSION_MAJOR) {
			throw new js__$Boot_HaxeError("Invalid version, data format not compatible!");
		}
		var versionRevision = stream.bytesInput.readInt32();
		var compileFlags = stream.bytesInput.readInt32();
		this.shortened = stream.bytesInput.readUInt16() > 0;
		this.compressed = stream.bytesInput.readUInt16() > 0;
		if(this.shortened) {
			throw new js__$Boot_HaxeError("Shortened binaries are not supported!");
		}
		var _g1 = stream.bytesInput;
		_g1.set_position(_g1.pos + 256);
		var _g2 = stream.bytesInput;
		_g2.set_position(_g2.pos + 128);
		var _g3 = stream.bytesInput;
		_g3.set_position(_g3.pos + 64);
		if(this.compressed) {
			var uncompressedSize = stream.bytesInput.readInt32();
			var compressedSize = stream.bytesInput.totlen;
			var compressedData = new haxe_io_Bytes(new ArrayBuffer(compressedSize));
			stream.bytesInput.readBytes(compressedData,stream.bytesInput.totlen,compressedSize);
			var io = new assimp_MemoryIOStream(haxe_zip_Uncompress.run(compressedData));
			this.readBinaryScene(io,pScene);
		} else {
			this.readBinaryScene(stream,pScene);
		}
	}
	readBinaryNode(stream,onode,parent) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AINODE) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		var node = onode;
		node.name = assimp_IOStreamUtil.readAiString(stream);
		node.transformation = assimp_IOStreamUtil.readAiMatrix4x4(stream);
		var numChildren = stream.bytesInput.readInt32();
		var numMeshes = stream.bytesInput.readInt32();
		var nb_metadata = stream.bytesInput.readInt32();
		if(parent != null) {
			node.parent = parent;
		}
		if(numMeshes > 0) {
			var _g = [];
			var _g1 = 0;
			var _g2 = numMeshes;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(0);
			}
			node.meshes = _g;
			var _g3 = 0;
			var _g4 = numMeshes;
			while(_g3 < _g4) {
				var i1 = _g3++;
				node.meshes[i1] = stream.bytesInput.readInt32();
				node.numMeshes++;
			}
		}
		if(numChildren > 0) {
			var _g5 = [];
			var _g11 = 0;
			var _g21 = numChildren;
			while(_g11 < _g21) {
				var i2 = _g11++;
				_g5.push(new assimp_format_AiNode());
			}
			node.children = _g5;
			var _g31 = 0;
			var _g41 = numChildren;
			while(_g31 < _g41) {
				var i3 = _g31++;
				this.readBinaryNode(stream,node.children[i3],node);
				node.numChildren++;
			}
		}
		if(nb_metadata > 0) {
			node.metaData = new assimp_format_AiMetadata();
			var _g6 = 0;
			var _g12 = nb_metadata;
			while(_g6 < _g12) {
				var i4 = _g6++;
				var mKeys = assimp_IOStreamUtil.readAiString(stream);
				var mType = stream.bytesInput.readUInt16();
				var data = null;
				switch(mType) {
				case 0:
					data = stream.bytesInput.readByte() == 1;
					break;
				case 1:
					data = stream.bytesInput.readInt32();
					break;
				case 2:
					data = stream.bytesInput.readDouble();
					break;
				case 3:
					data = stream.bytesInput.readFloat();
					break;
				case 4:
					data = stream.bytesInput.readDouble();
					break;
				case 5:
					data = assimp_IOStreamUtil.readAiString(stream);
					break;
				case 6:
					data = assimp_IOStreamUtil.readAiVector3D(stream);
					break;
				default:
				}
				node.metaData.set(mKeys,new assimp_format_AiMetadataEntry(mType,data));
			}
		}
	}
	readBinaryBone(stream,b) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIBONE) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		b.name = assimp_IOStreamUtil.readAiString(stream);
		b.numWeights = stream.bytesInput.readInt32();
		b.offsetMatrix = assimp_IOStreamUtil.readAiMatrix4x4(stream);
		if(this.shortened) {
			assimp_IOStreamUtil.readBounds(stream,b.weights,b.numWeights);
		} else {
			var _g = [];
			var _g1 = 0;
			var _g2 = b.numWeights;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(new assimp_format_AiVertexWeight());
			}
			b.weights = _g;
			assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVertexWeight,b.weights,b.numWeights);
		}
	}
	readBinaryMesh(stream,mesh) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMESH) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		mesh.primitiveTypes = stream.bytesInput.readInt32();
		mesh.numVertices = stream.bytesInput.readInt32();
		mesh.numFaces = stream.bytesInput.readInt32();
		mesh.numBones = stream.bytesInput.readInt32();
		mesh.materialIndex = stream.bytesInput.readInt32();
		var c = stream.bytesInput.readInt32();
		if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_POSITIONS) != 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.vertices,mesh.numVertices);
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = mesh.numVertices;
				while(_g1 < _g2) {
					var i = _g1++;
					var this1 = new glm_Vec3Base();
					this1.x = 0;
					this1.y = 0;
					this1.z = 0;
					_g.push(this1);
				}
				mesh.vertices = _g;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.vertices,mesh.numVertices);
			}
		}
		if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_NORMALS) != 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.normals,mesh.numVertices);
			} else {
				var _g3 = [];
				var _g11 = 0;
				var _g21 = mesh.numVertices;
				while(_g11 < _g21) {
					var i1 = _g11++;
					var this2 = new glm_Vec3Base();
					this2.x = 0;
					this2.y = 0;
					this2.z = 0;
					_g3.push(this2);
				}
				mesh.normals = _g3;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.normals,mesh.numVertices);
			}
		}
		if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) != 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.tangents,mesh.numVertices);
				assimp_IOStreamUtil.readBounds(stream,mesh.bitangents,mesh.numVertices);
			} else {
				var _g4 = [];
				var _g12 = 0;
				var _g22 = mesh.numVertices;
				while(_g12 < _g22) {
					var i2 = _g12++;
					var this3 = new glm_Vec3Base();
					this3.x = 0;
					this3.y = 0;
					this3.z = 0;
					_g4.push(this3);
				}
				mesh.tangents = _g4;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.tangents,mesh.numVertices);
				var _g31 = [];
				var _g41 = 0;
				var _g5 = mesh.numVertices;
				while(_g41 < _g5) {
					var i3 = _g41++;
					var this4 = new glm_Vec3Base();
					this4.x = 0;
					this4.y = 0;
					this4.z = 0;
					_g31.push(this4);
				}
				mesh.bitangents = _g31;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.bitangents,mesh.numVertices);
			}
		}
		var _g6 = 0;
		var _g13 = assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS;
		while(_g6 < _g13) {
			var n = _g6++;
			if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_COLOR(n)) == 0) {
				break;
			}
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.colors[n],mesh.numVertices);
			} else {
				var mesh1 = mesh.colors;
				var _g7 = [];
				var _g14 = 0;
				var _g23 = mesh.numVertices;
				while(_g14 < _g23) {
					var i4 = _g14++;
					var this5 = new glm_Vec4Base();
					this5.x = 0;
					this5.y = 0;
					this5.z = 0;
					this5.w = 0;
					_g7.push(this5);
				}
				mesh1[n] = _g7;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiColor4D,mesh.colors[n],mesh.numVertices);
			}
		}
		var _g24 = 0;
		var _g32 = assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS;
		while(_g24 < _g32) {
			var n1 = _g24++;
			if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TEXCOORD(n1)) == 0) {
				break;
			}
			mesh.numUVComponents[n1] = stream.bytesInput.readInt32();
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.textureCoords[n1],mesh.numVertices);
			} else {
				var mesh2 = mesh.textureCoords;
				var _g25 = [];
				var _g33 = 0;
				var _g42 = mesh.numVertices;
				while(_g33 < _g42) {
					var i5 = _g33++;
					var this6 = new glm_Vec3Base();
					this6.x = 0;
					this6.y = 0;
					this6.z = 0;
					_g25.push(this6);
				}
				mesh2[n1] = _g25;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.textureCoords[n1],mesh.numVertices);
			}
		}
		if(this.shortened) {
			stream.bytesInput.readInt32();
		} else {
			var _g43 = [];
			var _g51 = 0;
			var _g61 = mesh.numFaces;
			while(_g51 < _g61) {
				var i6 = _g51++;
				_g43.push(new assimp_format_AiFace());
			}
			mesh.faces = _g43;
			var _g71 = 0;
			var _g8 = mesh.numFaces;
			while(_g71 < _g8) {
				var i7 = _g71++;
				var f = mesh.faces[i7];
				f.numIndices = stream.bytesInput.readUInt16();
				var _g72 = [];
				var _g81 = 0;
				var _g9 = f.numIndices;
				while(_g81 < _g9) {
					var i8 = _g81++;
					_g72.push(0);
				}
				f.indices = _g72;
				var _g10 = 0;
				var _g111 = f.numIndices;
				while(_g10 < _g111) {
					var a = _g10++;
					if(assimp_format_assbin_AssbinLoader.fitsIntoUI16(mesh.numVertices)) {
						f.indices[a] = stream.bytesInput.readUInt16();
					} else {
						f.indices[a] = stream.bytesInput.readInt32();
					}
				}
			}
		}
		if(mesh.numBones > 0) {
			var _g44 = [];
			var _g52 = 0;
			var _g62 = mesh.numBones;
			while(_g52 < _g62) {
				var i9 = _g52++;
				_g44.push(new assimp_format_AiBone());
			}
			mesh.bones = _g44;
			var _g73 = 0;
			var _g82 = mesh.numBones;
			while(_g73 < _g82) {
				var a1 = _g73++;
				mesh.bones[a1] = new assimp_format_AiBone();
				this.readBinaryBone(stream,mesh.bones[a1]);
			}
		}
	}
	readBinaryMaterialProperty(stream,prop) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMATERIALPROPERTY) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		prop.mKey = assimp_IOStreamUtil.readAiString(stream);
		prop.mSemantic = stream.bytesInput.readInt32();
		prop.mIndex = stream.bytesInput.readInt32();
		prop.mDataLength = stream.bytesInput.readInt32();
		prop.mType = stream.bytesInput.readInt32();
		prop.mData = new haxe_io_Bytes(new ArrayBuffer(prop.mDataLength));
		stream.bytesInput.readBytes(prop.mData,0,prop.mDataLength);
	}
	readBinaryMaterial(stream,mat) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMATERIAL) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		mat.numAllocated = mat.numProperties = stream.bytesInput.readInt32();
		if(mat.numProperties > 0) {
			if(mat.properties != null) {
				mat.properties = [];
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = mat.numProperties;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(new assimp_format_AiMaterialProperty());
			}
			mat.properties = _g;
			var _g3 = 0;
			var _g4 = mat.numProperties;
			while(_g3 < _g4) {
				var i1 = _g3++;
				this.readBinaryMaterialProperty(stream,mat.properties[i1]);
			}
		}
	}
	readBinaryNodeAnim(stream,nd) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AINODEANIM) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		nd.nodeName = assimp_IOStreamUtil.readAiString(stream);
		nd.numPositionKeys = stream.bytesInput.readInt32();
		nd.numRotationKeys = stream.bytesInput.readInt32();
		nd.numScalingKeys = stream.bytesInput.readInt32();
		nd.preState = stream.bytesInput.readInt32();
		nd.postState = stream.bytesInput.readInt32();
		if(nd.numPositionKeys > 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,nd.positionKeys,nd.numPositionKeys);
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = nd.numPositionKeys;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(new assimp_format_AiVectorKey());
				}
				nd.positionKeys = _g;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVectorKey,nd.positionKeys,nd.numPositionKeys);
			}
		}
		if(nd.numRotationKeys > 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,nd.rotationKeys,nd.numRotationKeys);
			} else {
				var _g3 = [];
				var _g11 = 0;
				var _g21 = nd.numRotationKeys;
				while(_g11 < _g21) {
					var i1 = _g11++;
					_g3.push(new assimp_format_AiQuatKey());
				}
				nd.rotationKeys = _g3;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiQuatKey,nd.rotationKeys,nd.numRotationKeys);
			}
		}
		if(nd.numScalingKeys > 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,nd.scalingKeys,nd.numScalingKeys);
			} else {
				var _g4 = [];
				var _g12 = 0;
				var _g22 = nd.numScalingKeys;
				while(_g12 < _g22) {
					var i2 = _g12++;
					_g4.push(new assimp_format_AiVectorKey());
				}
				nd.scalingKeys = _g4;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVectorKey,nd.scalingKeys,nd.numScalingKeys);
			}
		}
	}
	readBinaryAnim(stream,anim) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIANIMATION) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		anim.name = assimp_IOStreamUtil.readAiString(stream);
		anim.duration = stream.bytesInput.readDouble();
		anim.ticksPerSecond = stream.bytesInput.readDouble();
		anim.numChannels = stream.bytesInput.readInt32();
		if(anim.numChannels > 0) {
			var _g = [];
			var _g1 = 0;
			var _g2 = anim.numChannels;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(new assimp_format_AiNodeAnim());
			}
			anim.channels = _g;
			var _g3 = 0;
			var _g4 = anim.numChannels;
			while(_g3 < _g4) {
				var a = _g3++;
				anim.channels[a] = new assimp_format_AiNodeAnim();
				this.readBinaryNodeAnim(stream,anim.channels[a]);
			}
		}
	}
	readBinaryTexture(stream,tex) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AITEXTURE) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		tex.width = stream.bytesInput.readInt32();
		tex.height = stream.bytesInput.readInt32();
		tex.achFormatHint = stream.bytesInput.readString(4);
		if(!this.shortened) {
			if(tex.height > 0) {
				tex.pcData = new haxe_io_Bytes(new ArrayBuffer(tex.width * 4));
				stream.bytesInput.readBytes(tex.pcData,0,tex.width * 4);
			} else {
				tex.pcData = new haxe_io_Bytes(new ArrayBuffer(tex.width * tex.height * 4));
				stream.bytesInput.readBytes(tex.pcData,0,tex.width * tex.height * 4);
			}
		}
	}
	readBinaryLight(stream,l) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AILIGHT) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		l.name = assimp_IOStreamUtil.readAiString(stream);
		l.type = stream.bytesInput.readInt32();
		if(l.type != 1) {
			l.attenuationConstant = stream.bytesInput.readFloat();
			l.attenuationLinear = stream.bytesInput.readFloat();
			l.attenuationQuadratic = stream.bytesInput.readFloat();
		}
		l.colorDiffuse = assimp_IOStreamUtil.readAiColor3D(stream);
		l.colorSpecular = assimp_IOStreamUtil.readAiColor3D(stream);
		l.colorAmbient = assimp_IOStreamUtil.readAiColor3D(stream);
		if(l.type == 3) {
			l.angleInnerCone = stream.bytesInput.readFloat();
			l.angleOuterCone = stream.bytesInput.readFloat();
		}
	}
	readBinaryCamera(stream,cam) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AICAMERA) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		cam.name = assimp_IOStreamUtil.readAiString(stream);
		cam.position = assimp_IOStreamUtil.readAiVector3D(stream);
		cam.lookAt = assimp_IOStreamUtil.readAiVector3D(stream);
		cam.up = assimp_IOStreamUtil.readAiVector3D(stream);
		cam.horizontalFOV = stream.bytesInput.readFloat();
		cam.clipPlaneNear = stream.bytesInput.readFloat();
		cam.clipPlaneFar = stream.bytesInput.readFloat();
		cam.aspect = stream.bytesInput.readFloat();
	}
	readBinaryScene(stream,scene) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AISCENE) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		scene.flags = stream.bytesInput.readInt32();
		scene.numMeshes = stream.bytesInput.readInt32();
		scene.numMaterials = stream.bytesInput.readInt32();
		scene.numAnimations = stream.bytesInput.readInt32();
		scene.numTextures = stream.bytesInput.readInt32();
		scene.numLights = stream.bytesInput.readInt32();
		scene.numCameras = stream.bytesInput.readInt32();
		this.readBinaryNode(stream,scene.rootNode,null);
		if(scene.numMeshes > 0) {
			var _g = [];
			var _g1 = 0;
			var _g2 = scene.numMeshes;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(new assimp_format_AiMesh());
			}
			scene.meshes = _g;
			var _g3 = 0;
			var _g4 = scene.numMeshes;
			while(_g3 < _g4) {
				var i1 = _g3++;
				this.readBinaryMesh(stream,scene.meshes[i1]);
			}
		}
		if(scene.numMaterials > 0) {
			var _g5 = [];
			var _g11 = 0;
			var _g21 = scene.numMaterials;
			while(_g11 < _g21) {
				var i2 = _g11++;
				_g5.push(new assimp_format_AiMaterial());
			}
			scene.materials = _g5;
			var _g31 = 0;
			var _g41 = scene.numMaterials;
			while(_g31 < _g41) {
				var i3 = _g31++;
				this.readBinaryMaterial(stream,scene.materials[i3]);
			}
		}
		if(scene.numAnimations > 0) {
			var _g6 = [];
			var _g12 = 0;
			var _g22 = scene.numAnimations;
			while(_g12 < _g22) {
				var i4 = _g12++;
				_g6.push(new assimp_format_AiAnimation());
			}
			scene.animations = _g6;
			var _g32 = 0;
			var _g42 = scene.numAnimations;
			while(_g32 < _g42) {
				var i5 = _g32++;
				this.readBinaryAnim(stream,scene.animations[i5]);
			}
		}
		if(scene.numTextures > 0) {
			var _g7 = [];
			var _g13 = 0;
			var _g23 = scene.numTextures;
			while(_g13 < _g23) {
				var i6 = _g13++;
				_g7.push(new assimp_format_AiTexture());
			}
			scene.textures = _g7;
			var _g33 = 0;
			var _g43 = scene.numTextures;
			while(_g33 < _g43) {
				var i7 = _g33++;
				this.readBinaryTexture(stream,scene.textures[i7]);
			}
		}
		if(scene.numLights > 0) {
			var _g8 = [];
			var _g14 = 0;
			var _g24 = scene.numLights;
			while(_g14 < _g24) {
				var i8 = _g14++;
				_g8.push(new assimp_format_AiLight());
			}
			scene.lights = _g8;
			var _g34 = 0;
			var _g44 = scene.numLights;
			while(_g34 < _g44) {
				var i9 = _g34++;
				this.readBinaryLight(stream,scene.lights[i9]);
			}
		}
		if(scene.numCameras > 0) {
			var _g9 = [];
			var _g15 = 0;
			var _g25 = scene.numCameras;
			while(_g15 < _g25) {
				var i10 = _g15++;
				_g9.push(new assimp_format_AiCamera());
			}
			scene.cameras = _g9;
			var _g35 = 0;
			var _g45 = scene.numCameras;
			while(_g35 < _g45) {
				var i11 = _g35++;
				this.readBinaryCamera(stream,scene.cameras[i11]);
			}
		}
	}
	static ASSBIN_MESH_HAS_TEXCOORD(n) {
		return assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TEXCOORD_BASE << n;
	}
	static ASSBIN_MESH_HAS_COLOR(n) {
		return assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_COLOR_BASE << n;
	}
	static fitsIntoUI16(mNumVertices) {
		return mNumVertices < 65536;
	}
}
assimp_format_assbin_AssbinLoader.__name__ = true;
assimp_format_assbin_AssbinLoader.__super__ = assimp_BaseImporter;
Object.assign(assimp_format_assbin_AssbinLoader.prototype, {
	__class__: assimp_format_assbin_AssbinLoader
});
class assimp_format_gltf2_GLTF2 {
	constructor() {
		this.scenes = new Array(0);
		this.defaultScene = null;
		this.nodes = new Array(0);
		this.textures = new Array(0);
		this.skins = new Array(0);
		this.samplers = new Array(0);
		this.meshes = new Array(0);
		this.materials = new Array(0);
		this.images = new Array(0);
		this.cameras = new Array(0);
		this.bufferViews = new Array(0);
		this.buffers = new Array(0);
		this.animations = new Array(0);
		this.accessors = new Array(0);
	}
	static parseAndLoad(src,buffers) {
		return assimp_format_gltf2_GLTF2.load(assimp_format_gltf2_GLTF2.parse(src),buffers);
	}
	static load(raw,buffers) {
		var gltf = new assimp_format_gltf2_GLTF2();
		gltf.nodes = assimp_format_gltf2_types_Node.preloadFromRaw(gltf,raw);
		gltf.buffers = assimp_format_gltf2_types_Buffer.loadFromRaw(gltf,raw,buffers);
		gltf.bufferViews = assimp_format_gltf2_types_BufferView.loadFromRaw(gltf,raw);
		gltf.accessors = assimp_format_gltf2_types_Accessor.loadFromRaw(gltf,raw);
		gltf.animations = assimp_format_gltf2_types_Animation.loadFromRaw(gltf,raw);
		gltf.cameras = assimp_format_gltf2_types_Camera.loadFromRaw(gltf,raw);
		gltf.images = assimp_format_gltf2_types_Image.loadFromRaw(gltf,raw);
		gltf.samplers = assimp_format_gltf2_types_Sampler.loadFromRaw(gltf,raw);
		gltf.textures = assimp_format_gltf2_types_Texture.loadFromRaw(gltf,raw);
		gltf.materials = assimp_format_gltf2_types_Material.loadFromRaw(gltf,raw);
		gltf.meshes = assimp_format_gltf2_types_Mesh.loadFromRaw(gltf,raw);
		gltf.skins = assimp_format_gltf2_types_Skin.loadFromRaw(gltf,raw);
		gltf.nodes = assimp_format_gltf2_types_Node.loadFromRaw(gltf,raw);
		gltf.scenes = assimp_format_gltf2_types_Scene.loadFromRaw(gltf,raw);
		gltf.defaultScene = gltf.scenes[raw.scene];
		return gltf;
	}
	static parse(src) {
		var gltf = JSON.parse(src);
		if(gltf.accessors == null) {
			gltf.accessors = [];
		}
		var _g = 0;
		var _g1 = gltf.accessors;
		while(_g < _g1.length) {
			var accessor = _g1[_g];
			++_g;
			var tmp = accessor.bufferView == null;
			if(accessor.byteOffset == null) {
				accessor.byteOffset = 0;
			}
			if(accessor.normalized == null) {
				accessor.normalized = false;
			}
			if(accessor.max == null) {
				accessor.max = [];
			}
			if(accessor.min == null) {
				accessor.min = [];
			}
			if(accessor.sparse != null) {
				if(accessor.sparse.indices.byteOffset == null) {
					accessor.sparse.indices.byteOffset = 0;
				}
				if(accessor.sparse.values.byteOffset == null) {
					accessor.sparse.values.byteOffset = 0;
				}
			}
		}
		if(gltf.animations == null) {
			gltf.animations = [];
		}
		var _g2 = 0;
		var _g3 = gltf.animations;
		while(_g2 < _g3.length) {
			var animation = _g3[_g2];
			++_g2;
			var _g21 = 0;
			var _g31 = animation.samplers;
			while(_g21 < _g31.length) {
				var sampler = _g31[_g21];
				++_g21;
				if(sampler.interpolation == null) {
					sampler.interpolation = "LINEAR";
				}
			}
		}
		if(gltf.buffers == null) {
			gltf.buffers = [];
		}
		if(gltf.bufferViews == null) {
			gltf.bufferViews = [];
		}
		var _g4 = 0;
		var _g5 = gltf.bufferViews;
		while(_g4 < _g5.length) {
			var bufferView = _g5[_g4];
			++_g4;
			if(bufferView.byteOffset == null) {
				bufferView.byteOffset = 0;
			}
		}
		if(gltf.cameras == null) {
			gltf.cameras = [];
		}
		if(gltf.images == null) {
			gltf.images = [];
		}
		if(gltf.materials == null) {
			gltf.materials = [];
		}
		var _g6 = 0;
		var _g7 = gltf.materials;
		while(_g6 < _g7.length) {
			var material = _g7[_g6];
			++_g6;
			if(material.normalTexture != null) {
				if(material.normalTexture.texCoord == null) {
					material.normalTexture.texCoord = 0;
				}
				if(material.normalTexture.scale == null) {
					material.normalTexture.scale = 1.0;
				}
			}
			if(material.occlusionTexture != null) {
				if(material.occlusionTexture.texCoord == null) {
					material.occlusionTexture.texCoord = 0;
				}
				if(material.occlusionTexture.strength == null) {
					material.occlusionTexture.strength = 1.0;
				}
			}
			if(material.pbrMetallicRoughness != null) {
				if(material.pbrMetallicRoughness.baseColorFactor == null) {
					material.pbrMetallicRoughness.baseColorFactor = [1.0,1.0,1.0,1.0];
				}
				if(material.pbrMetallicRoughness.baseColorTexture != null) {
					if(material.pbrMetallicRoughness.baseColorTexture.texCoord == null) {
						material.pbrMetallicRoughness.baseColorTexture.texCoord = 0;
					}
				}
				if(material.pbrMetallicRoughness.metallicFactor == null) {
					material.pbrMetallicRoughness.metallicFactor = 1.0;
				}
				if(material.pbrMetallicRoughness.roughnessFactor == null) {
					material.pbrMetallicRoughness.roughnessFactor = 1.0;
				}
				if(material.pbrMetallicRoughness.metallicRoughnessTexture != null) {
					if(material.pbrMetallicRoughness.metallicRoughnessTexture.texCoord == null) {
						material.pbrMetallicRoughness.metallicRoughnessTexture.texCoord = 0;
					}
				}
			}
			if(material.emissiveTexture != null) {
				if(material.emissiveTexture.texCoord == null) {
					material.emissiveTexture.texCoord = 0;
				}
			}
			if(material.emissiveFactor == null) {
				material.emissiveFactor = [0.0,0.0,0.0];
			}
			if(material.alphaCutoff == null) {
				material.alphaCutoff = 0.5;
			}
			if(material.doubleSided == null) {
				material.doubleSided = false;
			}
		}
		if(gltf.meshes == null) {
			gltf.meshes = [];
		}
		var _g8 = 0;
		var _g9 = gltf.meshes;
		while(_g8 < _g9.length) {
			var mesh = _g9[_g8];
			++_g8;
			if(mesh.primitives == null) {
				mesh.primitives = [];
			}
			var _g81 = 0;
			var _g91 = mesh.primitives;
			while(_g81 < _g91.length) {
				var primitive = _g91[_g81];
				++_g81;
				if(primitive.mode == null) {
					primitive.mode = 4;
				}
			}
		}
		if(gltf.nodes == null) {
			gltf.nodes = [];
		}
		if(gltf.samplers == null) {
			gltf.samplers = [];
		}
		var _g10 = 0;
		var _g11 = gltf.samplers;
		while(_g10 < _g11.length) {
			var sampler1 = _g11[_g10];
			++_g10;
			if(sampler1.magFilter == null) {
				sampler1.magFilter = 9729;
			}
			if(sampler1.minFilter == null) {
				sampler1.minFilter = 9729;
			}
			if(sampler1.wrapS == null) {
				sampler1.wrapS = 10497;
			}
			if(sampler1.wrapT == null) {
				sampler1.wrapT = 10497;
			}
		}
		if(gltf.scene == null) {
			gltf.scene = 0;
		}
		if(gltf.scenes == null) {
			gltf.scenes = [];
		}
		if(gltf.skins == null) {
			gltf.skins = [];
		}
		if(gltf.textures == null) {
			gltf.textures = [];
		}
		var _g12 = 0;
		var _g13 = gltf.textures;
		while(_g12 < _g13.length) {
			var texture = _g13[_g12];
			++_g12;
			if(texture.sampler == null) {
				texture.sampler = -1;
			}
		}
		return gltf;
	}
}
assimp_format_gltf2_GLTF2.__name__ = true;
Object.assign(assimp_format_gltf2_GLTF2.prototype, {
	__class__: assimp_format_gltf2_GLTF2
});
class assimp_format_gltf2_AnimationSamplers {
	constructor() {
		this.translation = null;
		this.rotation = null;
		this.scale = null;
	}
}
assimp_format_gltf2_AnimationSamplers.__name__ = true;
Object.assign(assimp_format_gltf2_AnimationSamplers.prototype, {
	__class__: assimp_format_gltf2_AnimationSamplers
});
class assimp_format_gltf2_GlTF2Importer extends assimp_BaseImporter {
	constructor() {
		assimp_BaseImporter._hx_skip_constructor = true;
		super();
		assimp_BaseImporter._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.mScene = null;
		this.meshOffsets = [];
		this.embeddedTexIdxs = [];
		this.mScene = null;
		var desc = new assimp_AiImporterDesc();
		desc.name = "glTF2 Importer";
		desc.flags = 1 | 2 | 8 | 16;
		desc.fileExtensions = ["gltf","glb"];
		this.info = desc;
		super._hx_constructor();
	}
	ConvertWrappingMode(gltfWrapMode) {
		switch(gltfWrapMode) {
		case 10497:
			return 0;
		case 33071:
			return 1;
		case 33648:
			return 2;
		default:
			return 0;
		}
	}
	SetMaterialColorProperty(UnnamedParameter1,prop,mat,pKey,type,idx) {
		if(idx == null) {
			idx = 0;
		}
		if(type == null) {
			type = 0;
		}
		var this1 = new glm_Vec4Base();
		this1.x = prop[0];
		this1.y = prop[1];
		this1.z = prop[2];
		this1.w = prop[3];
		var col = this1;
		var property = new assimp_format_AiMaterialProperty().setProperty(pKey,type,idx).setColor4DValue(col);
		mat.addProperty(property);
	}
	SetMaterialColorPropertyTVec3(UnnamedParameter1,prop,mat,pKey,type,idx) {
		if(idx == null) {
			idx = 0;
		}
		if(type == null) {
			type = 0;
		}
		var tmp = prop.concat([1]);
		this.SetMaterialColorProperty(UnnamedParameter1,tmp,mat,pKey,type,idx);
	}
	SetMaterialTextureProperty(embeddedTexIdxs,UnnamedParameter1,prop,mat,texType,texSlot) {
		if(texSlot == null) {
			texSlot = 0;
		}
		if(prop.texture != null && prop.texture.image != null) {
			var uri = prop.texture.image.uri;
			mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiMatKeys.TEXTURE_BASE,texType,texSlot).setStringValue(uri));
			mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_TEXTURE_TEXCOORD_BASE,texType,texSlot).setIntegerValue(prop.texCoord));
			if(prop.texture.sampler != null) {
				var sampler = prop.texture.sampler;
				var name = sampler.name != null ? sampler.name : sampler.id + "";
				var id = sampler.id + "";
				mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_MAPPINGNAME_BASE,texType,texSlot).setStringValue(name));
				mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_MAPPINGID_BASE,texType,texSlot).setStringValue(id));
				var wrapS = this.ConvertWrappingMode(sampler.wrapS);
				var wrapT = this.ConvertWrappingMode(sampler.wrapT);
				mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiMatKeys.MAPPINGMODE_U_BASE,texType,texSlot).setIntegerValue(wrapS));
				mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiMatKeys.MAPPINGMODE_V_BASE,texType,texSlot).setIntegerValue(wrapT));
				if(sampler.magFilter != 0) {
					mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_MAPPINGFILTER_MAG_BASE,texType,texSlot).setIntegerValue(sampler.magFilter));
				}
				if(sampler.minFilter != 0) {
					mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_MAPPINGFILTER_MIN_BASE,texType,texSlot).setIntegerValue(sampler.minFilter));
				}
			}
		}
	}
	SetMaterialTexturePropertyScale(embeddedTexIdxs,r,prop,mat,texType,texSlot) {
		if(texSlot == null) {
			texSlot = 0;
		}
		this.SetMaterialTextureProperty(embeddedTexIdxs,r,prop,mat,texType,texSlot);
		if(prop.texture != null && prop.texture.image != null) {
			mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_TEXTURE_SCALE_BASE,texType,texSlot).setFloatValue(prop.scale));
		}
	}
	SetMaterialTexturePropertyStrength(embeddedTexIdxs,r,prop,mat,texType,texSlot) {
		if(texSlot == null) {
			texSlot = 0;
		}
		this.SetMaterialTextureProperty(embeddedTexIdxs,r,prop,mat,texType,texSlot);
		if(prop.texture != null && prop.texture.image != null) {
			mat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_TEXTURE_STRENGTH_BASE,texType,texSlot).setFloatValue(prop.strength));
		}
	}
	ImportMaterial(embeddedTexIdxs,r,mat) {
		var aimat = new assimp_format_AiMaterial();
		if(mat.name != null) {
			var str = mat.name;
			aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiMatKeys.NAME_BASE,0,0).setStringValue(str));
		}
		this.SetMaterialColorProperty(r,mat.pbrMetallicRoughness.baseColorFactor,aimat,assimp_format_AiMatKeys.COLOR_DIFFUSE_BASE);
		this.SetMaterialColorProperty(r,mat.pbrMetallicRoughness.baseColorFactor,aimat,assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_FACTOR_BASE);
		this.SetMaterialTextureProperty(embeddedTexIdxs,r,mat.pbrMetallicRoughness.baseColorTexture,aimat,1);
		this.SetMaterialTextureProperty(embeddedTexIdxs,r,mat.pbrMetallicRoughness.baseColorTexture,aimat,assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_TEXTURE,1);
		this.SetMaterialTextureProperty(embeddedTexIdxs,r,mat.pbrMetallicRoughness.metallicRoughnessTexture,aimat,assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_METALLICROUGHNESS_TEXTURE,0);
		aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR_BASE,0,0).setFloatValue(mat.pbrMetallicRoughness.metallicFactor));
		aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR_BASE,0,0).setFloatValue(mat.pbrMetallicRoughness.roughnessFactor));
		var roughnessAsShininess = 1 - mat.pbrMetallicRoughness.roughnessFactor;
		roughnessAsShininess *= roughnessAsShininess * 1000;
		aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiMatKeys.SHININESS_BASE,0,0).setFloatValue(roughnessAsShininess));
		this.SetMaterialTexturePropertyScale(embeddedTexIdxs,r,mat.normalTexture,aimat,6);
		this.SetMaterialTexturePropertyStrength(embeddedTexIdxs,r,mat.occlusionTexture,aimat,10);
		this.SetMaterialTextureProperty(embeddedTexIdxs,r,mat.emissiveTexture,aimat,4);
		this.SetMaterialColorProperty(r,mat.emissiveFactor,aimat,assimp_format_AiMatKeys.COLOR_EMISSIVE_BASE);
		var tmp = mat.doubleSided ? 1 : 0;
		aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiMatKeys.TWOSIDED_BASE,0,0).setIntegerValue(tmp));
		aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_ALPHAMODE_BASE,0,0).setStringValue(mat.alphaMode));
		aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_ALPHACUTOFF_BASE,0,0).setFloatValue(mat.alphaCutoff));
		if(mat.pbrSpecularGlossiness != null) {
			var pbrSG = mat.pbrSpecularGlossiness;
			aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_PBRSPECULARGLOSSINESS_BASE,0,0).setIntegerValue(1));
			this.SetMaterialColorProperty(r,pbrSG.diffuseFactor,aimat,assimp_format_AiMatKeys.COLOR_DIFFUSE_BASE);
			this.SetMaterialColorProperty(r,pbrSG.specularFactor,aimat,assimp_format_AiMatKeys.COLOR_SPECULAR_BASE);
			var glossinessAsShininess = pbrSG.glossinessFactor * 1000.0;
			aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiMatKeys.SHININESS_BASE,0,0).setFloatValue(glossinessAsShininess));
			aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_PBRSPECULARGLOSSINESS_GLOSSINESS_FACTOR_BASE,0,0).setFloatValue(pbrSG.glossinessFactor));
			this.SetMaterialTextureProperty(embeddedTexIdxs,r,pbrSG.diffuseTexture,aimat,1);
			this.SetMaterialTextureProperty(embeddedTexIdxs,r,pbrSG.specularGlossinessTexture,aimat,2);
		}
		if(mat.unlit) {
			var tmp1 = mat.unlit ? 1 : 0;
			aimat.addProperty(new assimp_format_AiMaterialProperty().setProperty(assimp_format_AiPbrmaterial.GLTF_UNLIT_BASE,0,0).setFloatValue(tmp1));
		}
		return aimat;
	}
	SetFace(face,a) {
		face.numIndices = 1;
		face.indices = [a];
	}
	SetFace2(face,a,b) {
		face.numIndices = 2;
		face.indices = [a,b];
	}
	SetFace3(face,a,b,c) {
		face.numIndices = 3;
		face.indices = [a,b,c];
	}
	CheckValidFacesIndices(faces,nFaces,nVerts) {
		var _g = 0;
		var _g1 = nFaces;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g11 = faces[i].numIndices;
			while(_g2 < _g11) {
				var j = _g2++;
				var idx = faces[i].indices[j];
				if(idx >= nVerts) {
					return false;
				}
			}
		}
		return true;
	}
	GetNodeTransform(node) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		var matrix = dest;
		if(node.matrix != null) {
			var arr = node.matrix.slice(0);
			var this2 = new glm_Mat4Base();
			this2._00 = arr[0];
			this2._01 = arr[1];
			this2._02 = arr[2];
			this2._03 = arr[3];
			this2._10 = arr[4];
			this2._11 = arr[5];
			this2._12 = arr[6];
			this2._13 = arr[7];
			this2._20 = arr[8];
			this2._21 = arr[9];
			this2._22 = arr[10];
			this2._23 = arr[11];
			this2._30 = arr[12];
			this2._31 = arr[13];
			this2._32 = arr[14];
			this2._33 = arr[15];
			matrix = this2;
		} else {
			var rotation = node.rotation;
			var translation = node.translation;
			var scale = node.scale;
			if(node.rotation == null) {
				rotation = [0.0,0.0,0.0,1.0].slice(0);
			}
			if(node.scale == null) {
				scale = [1.0,1.0,1.0].slice(0);
			}
			if(node.translation == null) {
				translation = [0.0,0.0,0.0].slice(0);
			}
			var x2 = rotation[0] + rotation[0];
			var y2 = rotation[1] + rotation[1];
			var z2 = rotation[2] + rotation[2];
			var xx = rotation[0] * x2;
			var xy = rotation[0] * y2;
			var xz = rotation[0] * z2;
			var yy = rotation[1] * y2;
			var yz = rotation[1] * z2;
			var zz = rotation[2] * z2;
			var wx = rotation[3] * x2;
			var wy = rotation[3] * y2;
			var wz = rotation[3] * z2;
			var arr_0 = (1 - (yy + zz)) * scale[0];
			var arr_1 = (xy + wz) * scale[0];
			var arr_2 = (xz - wy) * scale[0];
			var arr_3 = 0;
			var arr_4 = (xy - wz) * scale[1];
			var arr_5 = (1 - (xx + zz)) * scale[1];
			var arr_6 = (yz + wx) * scale[1];
			var arr_7 = 0;
			var arr_8 = (xz + wy) * scale[2];
			var arr_9 = (yz - wx) * scale[2];
			var arr_10 = (1 - (xx + yy)) * scale[2];
			var arr_11 = 0;
			var arr_12 = translation[0];
			var arr_13 = translation[1];
			var arr_14 = translation[2];
			var arr_15 = 1;
			var this3 = new glm_Mat4Base();
			this3._00 = arr_0;
			this3._01 = arr_1;
			this3._02 = arr_2;
			this3._03 = arr_3;
			this3._10 = arr_4;
			this3._11 = arr_5;
			this3._12 = arr_6;
			this3._13 = arr_7;
			this3._20 = arr_8;
			this3._21 = arr_9;
			this3._22 = arr_10;
			this3._23 = arr_11;
			this3._30 = arr_12;
			this3._31 = arr_13;
			this3._32 = arr_14;
			this3._33 = arr_15;
			matrix = this3;
		}
		return this.convertMat4(matrix);
	}
	convertMat4(matrix) {
		var arr_0 = matrix._00;
		var arr_1 = matrix._01;
		var arr_2 = matrix._02;
		var arr_3 = matrix._03;
		var arr_4 = matrix._10;
		var arr_5 = matrix._11;
		var arr_6 = matrix._12;
		var arr_7 = matrix._13;
		var arr_8 = matrix._20;
		var arr_9 = matrix._21;
		var arr_10 = matrix._22;
		var arr_11 = matrix._23;
		var arr_12 = matrix._30;
		var arr_13 = matrix._31;
		var arr_14 = matrix._32;
		var arr_15 = matrix._33;
		var this1 = new glm_Mat4Base();
		this1._00 = arr_0;
		this1._01 = arr_4;
		this1._02 = arr_8;
		this1._03 = arr_12;
		this1._10 = arr_1;
		this1._11 = arr_5;
		this1._12 = arr_9;
		this1._13 = arr_13;
		this1._20 = arr_2;
		this1._21 = arr_6;
		this1._22 = arr_10;
		this1._23 = arr_14;
		this1._30 = arr_3;
		this1._31 = arr_7;
		this1._32 = arr_11;
		this1._33 = arr_15;
		var m = this1;
		return m;
	}
	BuildVertexWeightMapping(primitive,map) {
		var attr = primitive.attributes;
		if(attr.weight == null || attr.joint == null) {
			return;
		}
		if(attr.weight[0].accessor.count != attr.joint[0].accessor.count) {
			return;
		}
		var weight = attr.weight[0];
		var joint = attr.joint[0];
		var num_vertices = weight.accessor.count;
		var weights = weight.accessor.getFloats().slice(0);
		var indices = joint.accessor.getInts().slice(0);
		var _g = 0;
		var _g1 = num_vertices;
		while(_g < _g1) {
			var i = _g++;
			var index = i * 4;
			var bone = indices[index];
			var weight1 = weights[index];
			if(weight1 > 0.0) {
				var tmp = new assimp_format_AiVertexWeight();
				tmp.vertexId = i;
				tmp.weight = weight1;
				map[bone].push(tmp);
			}
			var index1 = i * 4 + 1;
			var bone1 = indices[index1];
			var weight2 = weights[index1];
			if(weight2 > 0.0) {
				var tmp1 = new assimp_format_AiVertexWeight();
				tmp1.vertexId = i;
				tmp1.weight = weight2;
				map[bone1].push(tmp1);
			}
			var index2 = i * 4 + 2;
			var bone2 = indices[index2];
			var weight3 = weights[index2];
			if(weight3 > 0.0) {
				var tmp2 = new assimp_format_AiVertexWeight();
				tmp2.vertexId = i;
				tmp2.weight = weight3;
				map[bone2].push(tmp2);
			}
			var index3 = i * 4 + 3;
			var bone3 = indices[index3];
			var weight4 = weights[index3];
			if(weight4 > 0.0) {
				var tmp3 = new assimp_format_AiVertexWeight();
				tmp3.vertexId = i;
				tmp3.weight = weight4;
				map[bone3].push(tmp3);
			}
		}
	}
	ImportNode(pScene,r,meshOffsets,ptr) {
		var node = ptr;
		var nameOrId = node.name == null ? node.id + "" : node.name;
		var ainode = new assimp_format_AiNode();
		ainode.name = nameOrId;
		if(node.children != null) {
			ainode.numChildren = node.children.length;
			ainode.children = [];
			var _g = 0;
			var _g1 = ainode.numChildren;
			while(_g < _g1) {
				var i = _g++;
				var child = this.ImportNode(pScene,r,meshOffsets,node.children[i]);
				child.parent = ainode;
				ainode.children[i] = child;
			}
		}
		ainode.transformation = this.GetNodeTransform(node);
		if(node.mesh != null) {
			var mesh_idx = node.mesh.index;
			var count = meshOffsets[mesh_idx + 1] - meshOffsets[mesh_idx];
			ainode.numMeshes = count;
			ainode.meshes = [];
			if(node.skin != null) {
				var _g2 = 0;
				var _g11 = count;
				while(_g2 < _g11) {
					var primitiveNo = _g2++;
					var mesh = pScene.meshes[meshOffsets[mesh_idx] + primitiveNo];
					mesh.numBones = node.skin.joints.length;
					mesh.bones = [];
					var _g3 = [];
					var _g12 = 0;
					var _g21 = mesh.numBones;
					while(_g12 < _g21) {
						var i1 = _g12++;
						_g3.push([]);
					}
					var weighting = _g3;
					this.BuildVertexWeightMapping(node.mesh.primitives[primitiveNo],weighting);
					var _g31 = 0;
					var _g4 = mesh.numBones;
					while(_g31 < _g4) {
						var i2 = _g31++;
						var bone = new assimp_format_AiBone();
						var joint = node.skin.joints[i2];
						if(joint.name != null) {
							bone.name = joint.name;
						} else {
							var kDefaultName = "bone_" + i2;
							bone.name = kDefaultName;
						}
						var arr = node.skin.inverseBindMatrices[i2].slice(0);
						var this1 = new glm_Mat4Base();
						this1._00 = arr[0];
						this1._01 = arr[4];
						this1._02 = arr[8];
						this1._03 = arr[12];
						this1._10 = arr[1];
						this1._11 = arr[5];
						this1._12 = arr[9];
						this1._13 = arr[13];
						this1._20 = arr[2];
						this1._21 = arr[6];
						this1._22 = arr[10];
						this1._23 = arr[14];
						this1._30 = arr[3];
						this1._31 = arr[7];
						this1._32 = arr[11];
						this1._33 = arr[15];
						bone.offsetMatrix = this1;
						var weights = weighting[i2];
						if(weights != null && weights.length > 0) {
							bone.numWeights = weights.length;
							bone.weights = weights;
						} else {
							bone.weights = [new assimp_format_AiVertexWeight()];
							bone.numWeights = 1;
						}
						mesh.bones[i2] = bone;
					}
				}
			}
			var k = 0;
			var j = meshOffsets[mesh_idx];
			while(j < meshOffsets[mesh_idx + 1]) {
				ainode.meshes[k] = j;
				++j;
				++k;
			}
		}
		if(node.camera != null) {
			pScene.cameras[node.camera.index].name = ainode.name;
		}
		return ainode;
	}
	GatherSamplers(anim) {
		var samplers = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = anim.channels.length;
		while(_g < _g1) {
			var c = _g++;
			var channel = anim.channels[c];
			var node_index = channel.node.index;
			var sampler = null;
			if(samplers.h.hasOwnProperty(node_index)) {
				sampler = samplers.h[node_index];
			} else {
				sampler = new assimp_format_gltf2_AnimationSamplers();
				samplers.h[node_index] = sampler;
			}
			if(channel.path == "translation") {
				sampler.translation = channel.samples;
			} else if(channel.path == "rotation") {
				sampler.rotation = channel.samples;
			} else if(channel.path == "scale") {
				sampler.scale = channel.samples;
			}
		}
		return samplers;
	}
	CreateNodeAnim(r,node,samplers) {
		var anim = new assimp_format_AiNodeAnim();
		anim.nodeName = node.name;
		var kMillisecondsFromSeconds = 1;
		if(samplers.translation != null) {
			anim.numPositionKeys = samplers.translation.length;
			var _g = [];
			var _g1 = 0;
			var _g2 = anim.numPositionKeys;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(new assimp_format_AiVectorKey());
			}
			anim.positionKeys = _g;
			var _g3 = 0;
			var _g4 = anim.numPositionKeys;
			while(_g3 < _g4) {
				var i1 = _g3++;
				var sampler = samplers.translation[i1];
				anim.positionKeys[i1].time = sampler.input * kMillisecondsFromSeconds;
				anim.positionKeys[i1].value.x = sampler.output[0];
				anim.positionKeys[i1].value.y = sampler.output[1];
				anim.positionKeys[i1].value.z = sampler.output[2];
			}
		} else if(node.translation != null) {
			anim.numPositionKeys = 1;
			var positionKeys = new assimp_format_AiVectorKey();
			positionKeys.time = 0.0;
			positionKeys.value.x = node.translation[0];
			positionKeys.value.y = node.translation[1];
			positionKeys.value.z = node.translation[2];
			anim.positionKeys = [positionKeys];
		}
		if(samplers.rotation != null) {
			anim.numRotationKeys = samplers.rotation.length;
			var _g5 = [];
			var _g11 = 0;
			var _g21 = anim.numRotationKeys;
			while(_g11 < _g21) {
				var i2 = _g11++;
				_g5.push(new assimp_format_AiQuatKey());
			}
			anim.rotationKeys = _g5;
			var _g31 = 0;
			var _g41 = anim.numRotationKeys;
			while(_g31 < _g41) {
				var i3 = _g31++;
				var sampler1 = samplers.rotation[i3];
				anim.rotationKeys[i3].time = sampler1.input * kMillisecondsFromSeconds;
				anim.rotationKeys[i3].value.x = sampler1.output[0];
				anim.rotationKeys[i3].value.y = sampler1.output[1];
				anim.rotationKeys[i3].value.z = sampler1.output[2];
				anim.rotationKeys[i3].value.w = sampler1.output[3];
			}
		} else if(node.rotation != null) {
			anim.numRotationKeys = 1;
			var rotationKeys = new assimp_format_AiQuatKey();
			rotationKeys.time = 0.0;
			rotationKeys.value.x = node.rotation[0];
			rotationKeys.value.y = node.rotation[1];
			rotationKeys.value.z = node.rotation[2];
			rotationKeys.value.w = node.rotation[3];
			anim.rotationKeys = [rotationKeys];
		}
		if(samplers.scale != null) {
			anim.numScalingKeys = samplers.scale.length;
			var _g6 = [];
			var _g12 = 0;
			var _g22 = anim.numScalingKeys;
			while(_g12 < _g22) {
				var i4 = _g12++;
				_g6.push(new assimp_format_AiVectorKey());
			}
			anim.scalingKeys = _g6;
			var _g32 = 0;
			var _g42 = anim.numScalingKeys;
			while(_g32 < _g42) {
				var i5 = _g32++;
				var sampler2 = samplers.scale[i5];
				anim.scalingKeys[i5].time = sampler2.input * kMillisecondsFromSeconds;
				anim.scalingKeys[i5].value.x = sampler2.output[0];
				anim.scalingKeys[i5].value.y = sampler2.output[1];
				anim.scalingKeys[i5].value.z = sampler2.output[2];
			}
		} else if(node.scale != null) {
			anim.numScalingKeys = 1;
			var scalingKeys = new assimp_format_AiVectorKey();
			scalingKeys.time = 0.0;
			scalingKeys.value.x = node.scale[0];
			scalingKeys.value.y = node.scale[1];
			scalingKeys.value.z = node.scale[2];
			anim.scalingKeys = [scalingKeys];
		}
		return anim;
	}
	dispose() {
	}
	canRead(file,ioStream,checkSig) {
		var extension = this.getExtension(file);
		if(extension != "gltf" && extension != "glb") {
			return false;
		}
		if(ioStream != null) {
			return true;
		}
		return false;
	}
	ImportMaterials(r) {
		var numImportedMaterials = r.materials.length;
		var defaultMaterial = new assimp_format_gltf2_types_Material();
		this.mScene.numMaterials = numImportedMaterials + 1;
		this.mScene.materials = [];
		this.mScene.materials[numImportedMaterials] = this.ImportMaterial(this.embeddedTexIdxs,r,defaultMaterial);
		var _g = 0;
		var _g1 = numImportedMaterials;
		while(_g < _g1) {
			var i = _g++;
			this.mScene.materials[i] = this.ImportMaterial(this.embeddedTexIdxs,r,r.materials[i]);
		}
	}
	ExtractData2(acc) {
		var t = acc.accessor.getFloats();
		var tmp = [];
		var i = 0;
		while(i < t.length) {
			var this1 = new glm_Vec3Base();
			this1.x = t[i];
			this1.y = t[i + 1];
			this1.z = 0;
			tmp.push(this1);
			i += 2;
		}
		return tmp;
	}
	ExtractData3(acc) {
		var t = acc.accessor.getFloats();
		var tmp = [];
		var i = 0;
		while(i < t.length) {
			var this1 = new glm_Vec3Base();
			this1.x = t[i];
			this1.y = t[i + 1];
			this1.z = t[i + 2];
			tmp.push(this1);
			i += 3;
		}
		return tmp;
	}
	ExtractData4(acc) {
		var t = acc.accessor.getFloats();
		var tmp = [];
		var i = 0;
		while(i < t.length) {
			var this1 = new glm_Vec4Base();
			this1.x = t[i];
			this1.y = t[i + 1];
			this1.z = t[i + 2];
			this1.w = t[i + 3];
			tmp.push(this1);
			i += 4;
		}
		return tmp;
	}
	ImportMeshes(r) {
		var meshes = [];
		var k = 0;
		var _g = 0;
		var _g1 = r.meshes.length;
		while(_g < _g1) {
			var m = _g++;
			var mesh = r.meshes[m];
			this.meshOffsets.push(k);
			k += mesh.primitives.length;
			var _g2 = 0;
			var _g11 = mesh.primitives.length;
			while(_g2 < _g11) {
				var p = _g2++;
				var prim = mesh.primitives[p];
				var aim = new assimp_format_AiMesh();
				meshes.push(aim);
				aim.name = mesh.name == null ? mesh.id + "" : mesh.name;
				var _g3 = prim.mode;
				if(_g3 == null) {
					haxe_Log.trace("",{ fileName : "assimp/format/gltf2/GlTF2Importer.hx", lineNumber : 717, className : "assimp.format.gltf2.GlTF2Importer", methodName : "ImportMeshes"});
				} else {
					switch(_g3) {
					case 0:
						aim.primitiveTypes |= 1;
						break;
					case 1:
						break;
					case 2:
						break;
					case 3:
						aim.primitiveTypes |= 2;
						break;
					case 4:
						break;
					case 5:
						break;
					case 6:
						aim.primitiveTypes |= 4;
						break;
					default:
						haxe_Log.trace("",{ fileName : "assimp/format/gltf2/GlTF2Importer.hx", lineNumber : 717, className : "assimp.format.gltf2.GlTF2Importer", methodName : "ImportMeshes"});
					}
				}
				var attr = prim.attributes;
				if(attr.position.length > 0 && attr.position[0].accessor.count > 0) {
					aim.vertices = this.ExtractData3(attr.position[0]);
					aim.numVertices = aim.vertices.length;
				}
				if(attr.normal.length > 0 && attr.normal[0].accessor.count > 0) {
					aim.normals = this.ExtractData3(attr.normal[0]);
					if(attr.tangent.length > 0 && attr.tangent[0].accessor.count > 0) {
						var tangents = this.ExtractData4(attr.tangent[0]);
						aim.tangents = [];
						aim.bitangents = [];
						var _g12 = 0;
						var _g21 = aim.numVertices;
						while(_g12 < _g21) {
							var i = _g12++;
							var aim1 = aim.tangents;
							var v = tangents[i];
							var x = v.x;
							var y = v.y;
							var z = v.z;
							var this1 = new glm_Vec3Base();
							this1.x = x;
							this1.y = y;
							this1.z = z;
							aim1[i] = this1;
							var aim2 = aim.bitangents;
							var v1 = aim.normals[i];
							var v2 = aim.tangents[i];
							var this2 = new glm_Vec3Base();
							this2.x = 0;
							this2.y = 0;
							this2.z = 0;
							var dest = this2;
							var x1 = v1.y * v2.z - v1.z * v2.y;
							var y1 = v1.z * v2.x - v1.x * v2.z;
							var z1 = v1.x * v2.y - v1.y * v2.x;
							var this3 = new glm_Vec3Base();
							this3.x = x1;
							this3.y = y1;
							this3.z = z1;
							dest = this3;
							var a = dest;
							var s = tangents[i].w;
							var this4 = new glm_Vec3Base();
							this4.x = 0;
							this4.y = 0;
							this4.z = 0;
							var dest1 = this4;
							dest1.x = a.x * s;
							dest1.y = a.y * s;
							dest1.z = a.z * s;
							aim2[i] = dest1;
						}
						tangents = null;
					}
				}
				var c_num = Math.floor(Math.min(attr.color.length,assimp_format_AiDefines.AI_MAX_NUMBER_OF_COLOR_SETS));
				var _g13 = 0;
				var _g22 = c_num;
				while(_g13 < _g22) {
					var c = _g13++;
					if(attr.color[c].accessor.count != aim.numVertices) {
						haxe_Log.trace("Color stream size in mesh \"" + mesh.name + "\" does not match the vertex count",{ fileName : "assimp/format/gltf2/GlTF2Importer.hx", lineNumber : 746, className : "assimp.format.gltf2.GlTF2Importer", methodName : "ImportMeshes"});
						continue;
					}
					aim.colors[c] = this.ExtractData4(attr.color[c]);
				}
				var tc_num = Math.floor(Math.min(attr.texcoord.length,assimp_format_AiDefines.AI_MAX_NUMBER_OF_TEXTURECOORDS));
				var _g31 = 0;
				var _g4 = tc_num;
				while(_g31 < _g4) {
					var tc = _g31++;
					if(attr.texcoord[tc].accessor.count != aim.numVertices) {
						haxe_Log.trace("Texcoord stream size in mesh \"" + mesh.name + "\" does not match the vertex count",{ fileName : "assimp/format/gltf2/GlTF2Importer.hx", lineNumber : 755, className : "assimp.format.gltf2.GlTF2Importer", methodName : "ImportMeshes"});
						continue;
					}
					var numUVCount = attr.texcoord[tc].accessor.getComponentSize();
					if(numUVCount == 3) {
						aim.textureCoords[tc] = this.ExtractData3(attr.texcoord[tc]);
					} else {
						aim.textureCoords[tc] = this.ExtractData2(attr.texcoord[tc]);
					}
					aim.numUVComponents[tc] = numUVCount;
				}
				var targets = prim.targets;
				if(targets != null && targets.length > 0) {
					aim.numAnimMeshes = targets.length;
					aim.animMeshes = [];
					var _g5 = 0;
					var _g6 = targets.length;
					while(_g5 < _g6) {
						var i1 = _g5++;
						aim.animMeshes[i1] = assimp_Assimp.aiCreateAnimMesh(aim);
						var aiAnimMesh = aim.animMeshes[i1];
						var target = targets[i1];
						if(target.position.length > 0) {
							var positionDiff = this.ExtractData3(target.position[0]);
							var _g51 = 0;
							var _g61 = aim.numVertices;
							while(_g51 < _g61) {
								var vertexId = _g51++;
								var aiAnimMesh1 = aiAnimMesh.mVertices;
								var a1 = aiAnimMesh.mVertices[vertexId];
								var b = positionDiff[vertexId];
								var this5 = new glm_Vec3Base();
								this5.x = 0;
								this5.y = 0;
								this5.z = 0;
								var dest2 = this5;
								dest2.x = a1.x + b.x;
								dest2.y = a1.y + b.y;
								dest2.z = a1.z + b.z;
								aiAnimMesh1[vertexId] = dest2;
							}
							positionDiff = null;
						}
						if(target.normal.length > 0) {
							var normalDiff = this.ExtractData3(target.normal[0]);
							var _g52 = 0;
							var _g62 = aim.numVertices;
							while(_g52 < _g62) {
								var vertexId1 = _g52++;
								var aiAnimMesh2 = aiAnimMesh.mNormals;
								var a2 = aiAnimMesh.mNormals[vertexId1];
								var b1 = normalDiff[vertexId1];
								var this6 = new glm_Vec3Base();
								this6.x = 0;
								this6.y = 0;
								this6.z = 0;
								var dest3 = this6;
								dest3.x = a2.x + b1.x;
								dest3.y = a2.y + b1.y;
								dest3.z = a2.z + b1.z;
								aiAnimMesh2[vertexId1] = dest3;
							}
							normalDiff = null;
						}
						if(target.tangent.length > 0) {
							var tangent = this.ExtractData4(attr.tangent[0]);
							var tangentDiff = this.ExtractData4(target.tangent[0]);
							var _g53 = 0;
							var _g63 = aim.numVertices;
							while(_g53 < _g63) {
								var vertexId2 = _g53++;
								tangent[vertexId2].x += tangentDiff[vertexId2].x;
								tangent[vertexId2].y += tangentDiff[vertexId2].y;
								tangent[vertexId2].z += tangentDiff[vertexId2].z;
								var aiAnimMesh3 = aiAnimMesh.mTangents;
								var x2 = tangent[vertexId2].x;
								var y2 = tangent[vertexId2].y;
								var z2 = tangent[vertexId2].z;
								var this7 = new glm_Vec3Base();
								this7.x = x2;
								this7.y = y2;
								this7.z = z2;
								aiAnimMesh3[vertexId2] = this7;
								var aiAnimMesh4 = aiAnimMesh.mBitangents;
								var v11 = aiAnimMesh.mNormals[vertexId2];
								var v21 = aiAnimMesh.mTangents[vertexId2];
								var this8 = new glm_Vec3Base();
								this8.x = 0;
								this8.y = 0;
								this8.z = 0;
								var dest4 = this8;
								var x3 = v11.y * v21.z - v11.z * v21.y;
								var y3 = v11.z * v21.x - v11.x * v21.z;
								var z3 = v11.x * v21.y - v11.y * v21.x;
								var this9 = new glm_Vec3Base();
								this9.x = x3;
								this9.y = y3;
								this9.z = z3;
								dest4 = this9;
								var a3 = dest4;
								var s1 = tangent[vertexId2].w;
								var this10 = new glm_Vec3Base();
								this10.x = 0;
								this10.y = 0;
								this10.z = 0;
								var dest5 = this10;
								dest5.x = a3.x * s1;
								dest5.y = a3.y * s1;
								dest5.z = a3.z * s1;
								aiAnimMesh4[vertexId2] = dest5;
							}
							tangent = null;
							tangentDiff = null;
						}
						if(mesh.weights.length > i1) {
							aiAnimMesh.mWeight = mesh.weights[i1];
						}
					}
				}
				var faces = [];
				var nFaces = 0;
				if(prim.indices != null) {
					var count = prim.indices.count;
					var data = prim.indices.getInts();
					switch(prim.mode) {
					case 0:
						nFaces = count;
						var _g54 = [];
						var _g64 = 0;
						var _g7 = nFaces;
						while(_g64 < _g7) {
							var i2 = _g64++;
							_g54.push(new assimp_format_AiFace());
						}
						faces = _g54;
						var _g8 = 0;
						var _g9 = count;
						while(_g8 < _g9) {
							var i3 = _g8++;
							this.SetFace(faces[i3],data[i3]);
						}
						break;
					case 1:
						nFaces = Math.floor(count / 2);
						var _g55 = [];
						var _g65 = 0;
						var _g71 = nFaces;
						while(_g65 < _g71) {
							var i4 = _g65++;
							_g55.push(new assimp_format_AiFace());
						}
						faces = _g55;
						var i5 = 0;
						while(i5 < count) {
							this.SetFace2(faces[Math.floor(i5 / 2)],data[i5],data[i5 + 1]);
							i5 += 2;
						}
						break;
					case 2:
						break;
					case 3:
						nFaces = count - (prim.mode == 3 ? 1 : 0);
						var _g56 = [];
						var _g66 = 0;
						var _g72 = nFaces;
						while(_g66 < _g72) {
							var i6 = _g66++;
							_g56.push(new assimp_format_AiFace());
						}
						faces = _g56;
						this.SetFace2(faces[0],data[0],data[1]);
						var _g81 = 2;
						var _g91 = count;
						while(_g81 < _g91) {
							var i7 = _g81++;
							this.SetFace2(faces[i7 - 1],faces[i7 - 2].indices[1],data[i7]);
						}
						if(prim.mode == 2) {
							this.SetFace2(faces[count - 1],faces[count - 2].indices[1],faces[0].indices[0]);
						}
						break;
					case 4:
						nFaces = Math.floor(count / 3);
						var _g57 = [];
						var _g67 = 0;
						var _g73 = nFaces;
						while(_g67 < _g73) {
							var i8 = _g67++;
							_g57.push(new assimp_format_AiFace());
						}
						faces = _g57;
						var i9 = 0;
						while(i9 < count) {
							this.SetFace3(faces[Math.floor(i9 / 3)],data[i9],data[i9 + 1],data[i9 + 2]);
							i9 += 3;
						}
						break;
					case 5:
						nFaces = count - 2;
						var _g58 = [];
						var _g68 = 0;
						var _g74 = nFaces;
						while(_g68 < _g74) {
							var i10 = _g68++;
							_g58.push(new assimp_format_AiFace());
						}
						faces = _g58;
						var _g82 = 0;
						var _g92 = nFaces;
						while(_g82 < _g92) {
							var i11 = _g82++;
							if((i11 + 1) % 2 == 0) {
								this.SetFace3(faces[i11],data[i11 + 1],data[i11],data[i11 + 2]);
							} else {
								this.SetFace3(faces[i11],data[i11],data[i11 + 1],data[i11 + 2]);
							}
						}
						break;
					case 6:
						nFaces = count - 2;
						var _g59 = [];
						var _g69 = 0;
						var _g75 = nFaces;
						while(_g69 < _g75) {
							var i12 = _g69++;
							_g59.push(new assimp_format_AiFace());
						}
						faces = _g59;
						this.SetFace3(faces[0],data[0],data[1],data[2]);
						var _g83 = 1;
						var _g93 = nFaces;
						while(_g83 < _g93) {
							var i13 = _g83++;
							this.SetFace3(faces[i13],faces[0].indices[0],faces[i13 - 1].indices[2],data[i13 + 2]);
						}
						break;
					}
				} else {
					var count1 = aim.numVertices;
					switch(prim.mode) {
					case 0:
						nFaces = count1;
						var _g510 = [];
						var _g610 = 0;
						var _g76 = nFaces;
						while(_g610 < _g76) {
							var i14 = _g610++;
							_g510.push(new assimp_format_AiFace());
						}
						faces = _g510;
						var _g84 = 0;
						var _g94 = count1;
						while(_g84 < _g94) {
							var i15 = _g84++;
							this.SetFace(faces[i15],i15);
						}
						break;
					case 1:
						nFaces = Math.floor(count1 / 2);
						var _g511 = [];
						var _g611 = 0;
						var _g77 = nFaces;
						while(_g611 < _g77) {
							var i16 = _g611++;
							_g511.push(new assimp_format_AiFace());
						}
						faces = _g511;
						var i17 = 0;
						while(i17 < count1) {
							this.SetFace2(faces[Math.floor(i17 / 2)],i17,i17 + 1);
							i17 += 2;
						}
						break;
					case 2:
						break;
					case 3:
						nFaces = count1 - (prim.mode == 3 ? 1 : 0);
						var _g512 = [];
						var _g612 = 0;
						var _g78 = nFaces;
						while(_g612 < _g78) {
							var i18 = _g612++;
							_g512.push(new assimp_format_AiFace());
						}
						faces = _g512;
						this.SetFace2(faces[0],0,1);
						var _g85 = 2;
						var _g95 = count1;
						while(_g85 < _g95) {
							var i19 = _g85++;
							this.SetFace2(faces[i19 - 1],faces[i19 - 2].indices[1],i19);
						}
						if(prim.mode == 2) {
							this.SetFace2(faces[count1 - 1],faces[count1 - 2].indices[1],faces[0].indices[0]);
						}
						break;
					case 4:
						nFaces = Math.floor(count1 / 3);
						var _g513 = [];
						var _g613 = 0;
						var _g79 = nFaces;
						while(_g613 < _g79) {
							var i20 = _g613++;
							_g513.push(new assimp_format_AiFace());
						}
						faces = _g513;
						var i21 = 0;
						while(i21 < count1) {
							this.SetFace3(faces[Math.floor(i21 / 3)],i21,i21 + 1,i21 + 2);
							i21 += 3;
						}
						break;
					case 5:
						nFaces = count1 - 2;
						var _g514 = [];
						var _g614 = 0;
						var _g710 = nFaces;
						while(_g614 < _g710) {
							var i22 = _g614++;
							_g514.push(new assimp_format_AiFace());
						}
						faces = _g514;
						var _g86 = 0;
						var _g96 = nFaces;
						while(_g86 < _g96) {
							var i23 = _g86++;
							if((i23 + 1) % 2 == 0) {
								this.SetFace3(faces[i23],i23 + 1,i23,i23 + 2);
							} else {
								this.SetFace3(faces[i23],i23,i23 + 1,i23 + 2);
							}
						}
						break;
					case 6:
						nFaces = count1 - 2;
						var _g515 = [];
						var _g615 = 0;
						var _g711 = nFaces;
						while(_g615 < _g711) {
							var i24 = _g615++;
							_g515.push(new assimp_format_AiFace());
						}
						faces = _g515;
						this.SetFace3(faces[0],0,1,2);
						var _g87 = 1;
						var _g97 = nFaces;
						while(_g87 < _g97) {
							var i25 = _g87++;
							this.SetFace3(faces[i25],faces[0].indices[0],faces[i25 - 1].indices[2],i25 + 2);
						}
						break;
					}
				}
				if(faces != null) {
					aim.faces = faces;
					aim.numFaces = nFaces;
				}
				if(prim.material != null) {
					aim.materialIndex = prim.material.index;
				} else {
					aim.materialIndex = this.mScene.numMaterials - 1;
				}
			}
		}
		this.meshOffsets.push(k);
		this.mScene.meshes = meshes;
		this.mScene.numMeshes = meshes.length;
	}
	ImportCameras(r) {
		if(r.cameras.length == 0) {
			return;
		}
		this.mScene.numCameras = r.cameras.length;
		this.mScene.cameras = [];
		var _g = 0;
		var _g1 = r.cameras.length;
		while(_g < _g1) {
			var i = _g++;
			var cam = r.cameras[i];
			var aicam = this.mScene.cameras[i] = new assimp_format_AiCamera();
			var this1 = new glm_Vec3Base();
			this1.x = 0.0;
			this1.y = 0.0;
			this1.z = -1.0;
			aicam.lookAt = this1;
			var _g2 = cam.type;
			switch(_g2._hx_index) {
			case 0:
				var ymag = _g2.ymag;
				var xmag = _g2.xmag;
				break;
			case 1:
				var yFov = _g2.yFov;
				var aspectRatio = _g2.aspectRatio;
				aicam.aspect = aspectRatio;
				aicam.horizontalFOV = yFov * aicam.aspect;
				aicam.clipPlaneFar = cam.zfar;
				aicam.clipPlaneNear = cam.znear;
				break;
			}
		}
	}
	ImportNodes(r) {
		if(r.defaultScene == null) {
			return;
		}
		var rootNodes = r.defaultScene.nodes;
		var numRootNodes = rootNodes.length;
		if(numRootNodes == 1) {
			this.mScene.rootNode = this.ImportNode(this.mScene,r,this.meshOffsets,rootNodes[0]);
		} else if(numRootNodes > 1) {
			var root = new assimp_format_AiNode();
			root.name = "ROOT";
			root.children = [];
			var _g = 0;
			var _g1 = numRootNodes;
			while(_g < _g1) {
				var i = _g++;
				var node = this.ImportNode(this.mScene,r,this.meshOffsets,rootNodes[i]);
				node.parent = root;
				root.children[root.numChildren++] = node;
			}
			this.mScene.rootNode = root;
		}
	}
	ImportAnimations(r) {
		if(r.defaultScene == null) {
			return;
		}
		this.mScene.numAnimations = r.animations.length;
		if(this.mScene.numAnimations == 0) {
			return;
		}
		this.mScene.animations = [];
		var _g = 0;
		var _g1 = r.animations.length;
		while(_g < _g1) {
			var i = _g++;
			var anim = r.animations[i];
			var ai_anim = new assimp_format_AiAnimation();
			ai_anim.name = anim.name;
			ai_anim.duration = 0;
			ai_anim.ticksPerSecond = 0;
			var samplers = this.GatherSamplers(anim);
			ai_anim.numChannels = Lambda.count(samplers);
			if(ai_anim.numChannels > 0) {
				ai_anim.channels = [];
				var j = 0;
				var iter = samplers.keys();
				while(iter.hasNext()) {
					var iter1 = iter.next();
					ai_anim.channels[j] = this.CreateNodeAnim(r,r.nodes[iter1],samplers.h[iter1]);
					++j;
				}
			}
			var maxDuration = 0;
			var _g2 = 0;
			var _g11 = ai_anim.numChannels;
			while(_g2 < _g11) {
				var j1 = _g2++;
				var chan = ai_anim.channels[j1];
				if(chan.numPositionKeys > 0) {
					var lastPosKey = chan.positionKeys[chan.numPositionKeys - 1];
					if(lastPosKey.time > maxDuration) {
						maxDuration = lastPosKey.time;
					}
				}
				if(chan.numRotationKeys > 0) {
					var lastRotKey = chan.rotationKeys[chan.numRotationKeys - 1];
					if(lastRotKey.time > maxDuration) {
						maxDuration = lastRotKey.time;
					}
				}
				if(chan.numScalingKeys > 0) {
					var lastScaleKey = chan.scalingKeys[chan.numScalingKeys - 1];
					if(lastScaleKey.time > maxDuration) {
						maxDuration = lastScaleKey.time;
					}
				}
			}
			ai_anim.duration = maxDuration;
			ai_anim.ticksPerSecond = 1;
			this.mScene.animations[i] = ai_anim;
		}
	}
	ImportEmbeddedTextures(r) {
		this.embeddedTexIdxs = [];
		var numEmbeddedTexs = 0;
		var _g = 0;
		var _g1 = r.images.length;
		while(_g < _g1) {
			var i = _g++;
			var img = r.images[i];
			if(img.bufferView != null) {
				++numEmbeddedTexs;
			}
		}
		if(numEmbeddedTexs == 0) {
			return;
		}
		this.mScene.textures = [];
		var _g2 = 0;
		var _g3 = r.images.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var img1 = r.images[i1];
			if(img1.bufferView == null) {
				continue;
			}
			var idx = this.mScene.numTextures++;
			this.embeddedTexIdxs[i1] = idx;
			var tex = this.mScene.textures[idx] = new assimp_format_AiTexture();
			var length = img1.bufferView.byteLength;
			var data = img1.bufferView.get_data();
			tex.width = length;
			tex.height = 0;
			tex.pcData = data;
			if(img1.mimeType != null) {
				var ext = img1.mimeType;
				ext = HxOverrides.substr(ext,ext.indexOf("/") + 1,null);
				if(ext != null) {
					if(ext == "jpeg") {
						ext = "jpg";
					}
					tex.achFormatHint = ext;
				}
			}
		}
	}
	internReadFile(file,ioStream,pScene,buffers) {
		this.mScene = pScene;
		var src = ioStream.bytes.toString();
		var buffers1 = buffers.map(function(b) {
			return b.bytes;
		});
		var asset = assimp_format_gltf2_GLTF2.load(assimp_format_gltf2_GLTF2.parse(src),buffers1);
		return;
	}
}
assimp_format_gltf2_GlTF2Importer.__name__ = true;
assimp_format_gltf2_GlTF2Importer.__super__ = assimp_BaseImporter;
Object.assign(assimp_format_gltf2_GlTF2Importer.prototype, {
	__class__: assimp_format_gltf2_GlTF2Importer
});
class assimp_format_gltf2_types_Accessor {
	constructor() {
		this.type = "SCALAR";
		this.componentType = 5120;
		this.count = 0;
		this.byteOffset = 0;
		this.bufferView = null;
	}
	load(gltf,accessor) {
		this.bufferView = gltf.bufferViews[accessor.bufferView];
		this.byteOffset = accessor.byteOffset;
		this.count = accessor.count;
		this.componentType = accessor.componentType;
		this.type = accessor.type;
	}
	getComponentSize() {
		var componentSize;
		switch(this.type) {
		case "MAT2":
			componentSize = 4;
			break;
		case "MAT3":
			componentSize = 9;
			break;
		case "MAT4":
			componentSize = 16;
			break;
		case "SCALAR":
			componentSize = 1;
			break;
		case "VEC2":
			componentSize = 2;
			break;
		case "VEC3":
			componentSize = 3;
			break;
		case "VEC4":
			componentSize = 4;
			break;
		}
		return componentSize;
	}
	getInts() {
		if(this.componentType == 5126) {
			throw new js__$Boot_HaxeError("This accessor points to `float` data, use `getFloats()` instead of `getInts()`!");
		}
		var componentSize = this.getComponentSize();
		var _gthis = this;
		var this1 = new Array(this.count * componentSize);
		var data = this1;
		var pos = this.byteOffset;
		var accessor;
		switch(this.componentType) {
		case 5120:case 5121:
			accessor = function(i) {
				var val = _gthis.bufferView.get_data().b[pos];
				data[i] = val;
				pos += 1;
			};
			break;
		case 5122:case 5123:
			accessor = function(i1) {
				var val1 = _gthis.bufferView.get_data().getUInt16(pos);
				data[i1] = val1;
				pos += 2;
			};
			break;
		case 5125:
			accessor = function(i2) {
				var val2 = _gthis.bufferView.get_data().getInt32(pos);
				data[i2] = val2;
				pos += 4;
			};
			break;
		default:
			throw new js__$Boot_HaxeError("Floats aren't supported with this function!");
		}
		var _g1 = 0;
		var _g2 = this.count * componentSize;
		while(_g1 < _g2) {
			var i3 = _g1++;
			accessor(i3);
		}
		return data;
	}
	getFloats() {
		if(this.componentType != 5126) {
			throw new js__$Boot_HaxeError("This accessor points to `int` data, use `getInts()` instead of `getFloats()`!");
		}
		var size = this.getComponentSize();
		var this1 = new Array(this.count * size);
		var data = this1;
		var pos = this.byteOffset;
		var _g = 0;
		var _g1 = this.count * size;
		while(_g < _g1) {
			var i = _g++;
			data[i] = this.bufferView.get_data().getFloat(pos);
			pos += 4;
		}
		return data;
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.accessors.length);
		var accessors = this1;
		var _g = 0;
		var _g1 = raw.accessors.length;
		while(_g < _g1) {
			var i = _g++;
			accessors[i] = new assimp_format_gltf2_types_Accessor();
		}
		var _g2 = 0;
		var _g3 = raw.accessors.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			accessors[i1].load(gltf,raw.accessors[i1]);
		}
		return accessors;
	}
}
assimp_format_gltf2_types_Accessor.__name__ = true;
Object.assign(assimp_format_gltf2_types_Accessor.prototype, {
	__class__: assimp_format_gltf2_types_Accessor
});
class assimp_format_gltf2_types_Animation {
	constructor() {
		this.channels = null;
		this.name = null;
	}
	load(gltf,animation) {
		this.name = animation.name;
		var this1 = new Array(animation.channels.length);
		this.channels = this1;
		var _g = 0;
		var _g1 = animation.channels.length;
		while(_g < _g1) {
			var i = _g++;
			var channel = new assimp_format_gltf2_types_AnimationChannel();
			channel.node = gltf.nodes[animation.channels[i].target.node];
			channel.loadSampler(gltf,animation.samplers[animation.channels[i].sampler]);
			channel.path = animation.channels[i].target.path;
			this.channels[i] = channel;
		}
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.animations.length);
		var animations = this1;
		var _g = 0;
		var _g1 = raw.animations.length;
		while(_g < _g1) {
			var i = _g++;
			animations[i] = new assimp_format_gltf2_types_Animation();
		}
		var _g2 = 0;
		var _g3 = raw.animations.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			animations[i1].load(gltf,raw.animations[i1]);
		}
		return animations;
	}
}
assimp_format_gltf2_types_Animation.__name__ = true;
Object.assign(assimp_format_gltf2_types_Animation.prototype, {
	__class__: assimp_format_gltf2_types_Animation
});
class assimp_format_gltf2_types_AnimationSample {
	constructor(input,output) {
		this.output = null;
		this.input = 0;
		this.input = input;
		this.output = output;
	}
}
assimp_format_gltf2_types_AnimationSample.__name__ = true;
Object.assign(assimp_format_gltf2_types_AnimationSample.prototype, {
	__class__: assimp_format_gltf2_types_AnimationSample
});
class assimp_format_gltf2_types_AnimationChannel {
	constructor() {
		this.path = null;
		this.samples = null;
		this.node = null;
	}
	loadSampler(gltf,sampler) {
		var inputSampler = gltf.accessors[sampler.input];
		var outputSampler = gltf.accessors[sampler.output];
		var inputs = inputSampler.getFloats();
		var outputs = outputSampler.getFloats();
		var this1 = new Array(inputs.length);
		this.samples = this1;
		var _g = 0;
		var _g1 = inputs.length;
		while(_g < _g1) {
			var i = _g++;
			var this2 = this.samples;
			var val;
			switch(outputSampler.type) {
			case "SCALAR":
				var this3 = new Array(1);
				var o = this3;
				o[0] = outputs[i];
				val = o;
				break;
			case "VEC2":
				var this4 = new Array(2);
				var o1 = this4;
				o1[0] = outputs[i * 2];
				o1[1] = outputs[i * 2 + 1];
				val = o1;
				break;
			case "VEC3":
				var this5 = new Array(3);
				var o2 = this5;
				o2[0] = outputs[i * 3];
				o2[1] = outputs[i * 3 + 1];
				o2[2] = outputs[i * 3 + 2];
				val = o2;
				break;
			case "VEC4":
				var this6 = new Array(4);
				var o3 = this6;
				o3[0] = outputs[i * 4];
				o3[1] = outputs[i * 4 + 1];
				o3[2] = outputs[i * 4 + 2];
				o3[3] = outputs[i * 4 + 3];
				val = o3;
				break;
			default:
				throw new js__$Boot_HaxeError("Unhandled animation sampler accessor type: '" + outputSampler.type + "'!");
			}
			this2[i] = new assimp_format_gltf2_types_AnimationSample(inputs[i],val);
		}
	}
}
assimp_format_gltf2_types_AnimationChannel.__name__ = true;
Object.assign(assimp_format_gltf2_types_AnimationChannel.prototype, {
	__class__: assimp_format_gltf2_types_AnimationChannel
});
class assimp_format_gltf2_types_Buffer {
	constructor() {
		this.data = null;
		this.name = "";
		this.uri = "";
	}
	load(gltf,buffer,data) {
		this.uri = buffer.uri;
		this.name = buffer.name;
		this.data = data;
	}
	static loadFromRaw(gltf,raw,loadedBuffers) {
		var this1 = new Array(raw.buffers.length);
		var buffers = this1;
		var _g = 0;
		var _g1 = raw.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			buffers[i] = new assimp_format_gltf2_types_Buffer();
		}
		var _g2 = 0;
		var _g3 = raw.buffers.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			buffers[i1].load(gltf,raw.buffers[i1],loadedBuffers[i1]);
		}
		return buffers;
	}
}
assimp_format_gltf2_types_Buffer.__name__ = true;
Object.assign(assimp_format_gltf2_types_Buffer.prototype, {
	__class__: assimp_format_gltf2_types_Buffer
});
class assimp_format_gltf2_types_BufferView {
	constructor() {
		this._data = null;
		this.target = 34962;
		this.byteStride = 0;
		this.byteLength = 0;
		this.byteOffset = 0;
		this.buffer = null;
	}
	get_data() {
		if(this._data == null) {
			this._data = this.buffer.data.sub(this.byteOffset,this.byteLength);
		}
		return this._data;
	}
	load(gltf,bufferView) {
		this.buffer = gltf.buffers[bufferView.buffer];
		this.byteOffset = bufferView.byteOffset;
		this.byteLength = bufferView.byteLength;
		this.byteStride = bufferView.byteStride;
		this.target = bufferView.target;
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.bufferViews.length);
		var views = this1;
		var _g = 0;
		var _g1 = raw.bufferViews.length;
		while(_g < _g1) {
			var i = _g++;
			views[i] = new assimp_format_gltf2_types_BufferView();
		}
		var _g2 = 0;
		var _g3 = raw.bufferViews.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			views[i1].load(gltf,raw.bufferViews[i1]);
		}
		return views;
	}
}
assimp_format_gltf2_types_BufferView.__name__ = true;
Object.assign(assimp_format_gltf2_types_BufferView.prototype, {
	__class__: assimp_format_gltf2_types_BufferView
});
class assimp_format_gltf2_types_Ref {
	constructor() {
		if(assimp_format_gltf2_types_Ref._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.id = assimp_format_gltf2_types_Ref.idCount++;
	}
}
assimp_format_gltf2_types_Ref.__name__ = true;
Object.assign(assimp_format_gltf2_types_Ref.prototype, {
	__class__: assimp_format_gltf2_types_Ref
});
class assimp_format_gltf2_types_Camera extends assimp_format_gltf2_types_Ref {
	constructor() {
		super();
	}
	load(gltf,camera) {
		if(camera.perspective != null) {
			this.type = assimp_format_gltf2_types_CameraType.Perspective(camera.perspective.aspectRatio,camera.perspective.yfov);
			this.znear = camera.perspective.znear;
			this.zfar = camera.perspective.zfar;
		} else {
			this.type = assimp_format_gltf2_types_CameraType.Orthographic(camera.orthographic.xmag,camera.orthographic.ymag);
			this.znear = camera.orthographic.znear;
			this.zfar = camera.orthographic.zfar;
		}
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.cameras.length);
		var cameras = this1;
		var _g = 0;
		var _g1 = raw.cameras.length;
		while(_g < _g1) {
			var i = _g++;
			cameras[i] = new assimp_format_gltf2_types_Camera();
			cameras[i].index = i;
		}
		var _g2 = 0;
		var _g3 = raw.cameras.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			cameras[i1].load(gltf,raw.cameras[i1]);
		}
		return cameras;
	}
}
assimp_format_gltf2_types_Camera.__name__ = true;
assimp_format_gltf2_types_Camera.__super__ = assimp_format_gltf2_types_Ref;
Object.assign(assimp_format_gltf2_types_Camera.prototype, {
	__class__: assimp_format_gltf2_types_Camera
});
var assimp_format_gltf2_types_CameraType = $hxEnums["assimp.format.gltf2.types.CameraType"] = { __ename__ : true, __constructs__ : ["Orthographic","Perspective"]
	,Orthographic: ($_=function(xmag,ymag) { return {_hx_index:0,xmag:xmag,ymag:ymag,__enum__:"assimp.format.gltf2.types.CameraType",toString:$estr}; },$_.__params__ = ["xmag","ymag"],$_)
	,Perspective: ($_=function(aspectRatio,yFov) { return {_hx_index:1,aspectRatio:aspectRatio,yFov:yFov,__enum__:"assimp.format.gltf2.types.CameraType",toString:$estr}; },$_.__params__ = ["aspectRatio","yFov"],$_)
};
class assimp_format_gltf2_types_Image extends assimp_format_gltf2_types_Ref {
	constructor() {
		assimp_format_gltf2_types_Ref._hx_skip_constructor = true;
		super();
		assimp_format_gltf2_types_Ref._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.bufferView = null;
		this.mimeType = "image/png";
		this.uri = null;
		this.name = null;
		super._hx_constructor();
	}
	load(gltf,image) {
		this.name = image.name;
		this.uri = image.uri;
		this.mimeType = image.mimeType;
		if(image.bufferView != null) {
			this.bufferView = gltf.bufferViews[image.bufferView];
		}
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.images.length);
		var images = this1;
		var _g = 0;
		var _g1 = raw.images.length;
		while(_g < _g1) {
			var i = _g++;
			images[i] = new assimp_format_gltf2_types_Image();
			images[i].index = i;
		}
		var _g2 = 0;
		var _g3 = raw.images.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			images[i1].load(gltf,raw.images[i1]);
		}
		return images;
	}
}
assimp_format_gltf2_types_Image.__name__ = true;
assimp_format_gltf2_types_Image.__super__ = assimp_format_gltf2_types_Ref;
Object.assign(assimp_format_gltf2_types_Image.prototype, {
	__class__: assimp_format_gltf2_types_Image
});
class assimp_format_gltf2_types_TextureInfo {
	constructor() {
		this.texCoord = 0;
	}
}
assimp_format_gltf2_types_TextureInfo.__name__ = true;
Object.assign(assimp_format_gltf2_types_TextureInfo.prototype, {
	__class__: assimp_format_gltf2_types_TextureInfo
});
class assimp_format_gltf2_types_NormalTextureInfo extends assimp_format_gltf2_types_TextureInfo {
	constructor() {
		super();
		this.scale = 1;
	}
}
assimp_format_gltf2_types_NormalTextureInfo.__name__ = true;
assimp_format_gltf2_types_NormalTextureInfo.__super__ = assimp_format_gltf2_types_TextureInfo;
Object.assign(assimp_format_gltf2_types_NormalTextureInfo.prototype, {
	__class__: assimp_format_gltf2_types_NormalTextureInfo
});
class assimp_format_gltf2_types_OcclusionTextureInfo extends assimp_format_gltf2_types_TextureInfo {
	constructor() {
		super();
		this.strength = 1;
	}
}
assimp_format_gltf2_types_OcclusionTextureInfo.__name__ = true;
assimp_format_gltf2_types_OcclusionTextureInfo.__super__ = assimp_format_gltf2_types_TextureInfo;
Object.assign(assimp_format_gltf2_types_OcclusionTextureInfo.prototype, {
	__class__: assimp_format_gltf2_types_OcclusionTextureInfo
});
class assimp_format_gltf2_types_PbrMetallicRoughness {
	constructor() {
		this.baseColorTexture = new assimp_format_gltf2_types_TextureInfo();
		this.metallicRoughnessTexture = new assimp_format_gltf2_types_TextureInfo();
	}
}
assimp_format_gltf2_types_PbrMetallicRoughness.__name__ = true;
Object.assign(assimp_format_gltf2_types_PbrMetallicRoughness.prototype, {
	__class__: assimp_format_gltf2_types_PbrMetallicRoughness
});
class assimp_format_gltf2_types_PbrSpecularGlossiness {
	constructor() {
		this.diffuseTexture = new assimp_format_gltf2_types_TextureInfo();
		this.specularGlossinessTexture = new assimp_format_gltf2_types_TextureInfo();
		this.SetDefaults();
	}
	SetDefaults() {
	}
}
assimp_format_gltf2_types_PbrSpecularGlossiness.__name__ = true;
Object.assign(assimp_format_gltf2_types_PbrSpecularGlossiness.prototype, {
	__class__: assimp_format_gltf2_types_PbrSpecularGlossiness
});
class assimp_format_gltf2_types_Material extends assimp_format_gltf2_types_Ref {
	constructor() {
		super();
		this.normalTexture = new assimp_format_gltf2_types_NormalTextureInfo();
		this.occlusionTexture = new assimp_format_gltf2_types_OcclusionTextureInfo();
		this.emissiveTexture = new assimp_format_gltf2_types_TextureInfo();
		this.SetDefaults();
	}
	load(gltf,material) {
		if(material.pbrMetallicRoughness != null) {
			this.pbrMetallicRoughness.baseColorFactor = material.pbrMetallicRoughness.baseColorFactor;
			if(material.pbrMetallicRoughness.baseColorTexture != null) {
				this.pbrMetallicRoughness.baseColorTexture.texture = gltf.textures[material.pbrMetallicRoughness.baseColorTexture.index];
				this.pbrMetallicRoughness.baseColorTexture.texCoord = material.pbrMetallicRoughness.baseColorTexture.texCoord;
			}
			if(material.pbrMetallicRoughness.metallicRoughnessTexture != null) {
				this.pbrMetallicRoughness.metallicRoughnessTexture.texture = gltf.textures[material.pbrMetallicRoughness.metallicRoughnessTexture.index];
				this.pbrMetallicRoughness.metallicRoughnessTexture.texCoord = material.pbrMetallicRoughness.metallicRoughnessTexture.texCoord;
			}
			this.pbrMetallicRoughness.metallicFactor = material.pbrMetallicRoughness.metallicFactor;
			this.pbrMetallicRoughness.roughnessFactor = material.pbrMetallicRoughness.roughnessFactor;
		}
		if(material.normalTexture != null) {
			this.normalTexture.texture = gltf.textures[material.normalTexture.index];
			this.normalTexture.texCoord = material.normalTexture.texCoord;
		}
		if(material.occlusionTexture != null) {
			this.occlusionTexture.texture = gltf.textures[material.occlusionTexture.index];
			this.occlusionTexture.texCoord = material.occlusionTexture.texCoord;
		}
		if(material.emissiveTexture != null) {
			this.emissiveTexture.texture = gltf.textures[material.emissiveTexture.index];
			this.emissiveTexture.texCoord = material.emissiveTexture.texCoord;
		}
		this.emissiveFactor = material.emissiveFactor;
		this.doubleSided = material.doubleSided;
		this.alphaCutoff = material.alphaCutoff;
		if(material.alphaMode != null) {
			this.alphaMode = material.alphaMode;
		}
		var tmp = material.extensions != null;
	}
	SetDefaults() {
		this.pbrMetallicRoughness = new assimp_format_gltf2_types_PbrMetallicRoughness();
		var tmp = assimp_format_gltf2_types_Material.defaultBaseColor.slice();
		this.pbrMetallicRoughness.baseColorFactor = tmp;
		this.pbrMetallicRoughness.metallicFactor = 1.0;
		this.pbrMetallicRoughness.roughnessFactor = 1.0;
		this.emissiveFactor = assimp_format_gltf2_types_Material.defaultEmissiveFactor.slice();
		this.alphaMode = "OPAQUE";
		this.alphaCutoff = 0.5;
		this.doubleSided = false;
		this.unlit = false;
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.materials.length);
		var materials = this1;
		var _g = 0;
		var _g1 = raw.materials.length;
		while(_g < _g1) {
			var i = _g++;
			materials[i] = new assimp_format_gltf2_types_Material();
			materials[i].index = i;
		}
		var _g2 = 0;
		var _g3 = raw.materials.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			materials[i1].load(gltf,raw.materials[i1]);
		}
		return materials;
	}
}
assimp_format_gltf2_types_Material.__name__ = true;
assimp_format_gltf2_types_Material.__super__ = assimp_format_gltf2_types_Ref;
Object.assign(assimp_format_gltf2_types_Material.prototype, {
	__class__: assimp_format_gltf2_types_Material
});
class assimp_format_gltf2_types_Mesh extends assimp_format_gltf2_types_Ref {
	constructor() {
		assimp_format_gltf2_types_Ref._hx_skip_constructor = true;
		super();
		assimp_format_gltf2_types_Ref._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.weights = new Array(0);
		this.primitives = new Array(0);
		this.name = null;
		super._hx_constructor();
	}
	load(gltf,mesh) {
		this.name = mesh.name;
		var this1 = new Array(mesh.primitives.length);
		this.primitives = this1;
		var _g = 0;
		var _g1 = mesh.primitives.length;
		while(_g < _g1) {
			var i = _g++;
			this.primitives[i] = new assimp_format_gltf2_types_MeshPrimitive();
			this.primitives[i].load(gltf,mesh.primitives[i]);
		}
		if(mesh.weights != null) {
			this.weights = mesh.weights.slice(0);
		}
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.meshes.length);
		var meshes = this1;
		var _g = 0;
		var _g1 = raw.meshes.length;
		while(_g < _g1) {
			var i = _g++;
			meshes[i] = new assimp_format_gltf2_types_Mesh();
			meshes[i].index = i;
		}
		var _g2 = 0;
		var _g3 = raw.meshes.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			meshes[i1].load(gltf,raw.meshes[i1]);
		}
		return meshes;
	}
}
assimp_format_gltf2_types_Mesh.__name__ = true;
assimp_format_gltf2_types_Mesh.__super__ = assimp_format_gltf2_types_Ref;
Object.assign(assimp_format_gltf2_types_Mesh.prototype, {
	__class__: assimp_format_gltf2_types_Mesh
});
class assimp_format_gltf2_types_TAttributes {
	constructor() {
		this.position = [];
		this.normal = [];
		this.tangent = [];
		this.texcoord = [];
		this.color = [];
		this.joint = [];
		this.jointmatrix = [];
		this.weight = [];
	}
}
assimp_format_gltf2_types_TAttributes.__name__ = true;
Object.assign(assimp_format_gltf2_types_TAttributes.prototype, {
	__class__: assimp_format_gltf2_types_TAttributes
});
class assimp_format_gltf2_types_TTarget {
	constructor() {
		this.position = [];
		this.normal = [];
		this.tangent = [];
	}
}
assimp_format_gltf2_types_TTarget.__name__ = true;
Object.assign(assimp_format_gltf2_types_TTarget.prototype, {
	__class__: assimp_format_gltf2_types_TTarget
});
class assimp_format_gltf2_types_MeshPrimitive {
	constructor() {
		this.mode = null;
		this.material = null;
		this.indices = null;
		this.targets = null;
		this.attributes = null;
	}
	getAttribVector(attr) {
		var name = attr;
		var idx = 0;
		if(attr.indexOf("_") != -1) {
			name = HxOverrides.substr(attr,0,attr.indexOf("_"));
			idx = Std.parseInt(HxOverrides.substr(attr,attr.indexOf("_") + 1,null));
		}
		var aList;
		switch(name) {
		case "COLOR":
			aList = this.attributes.color;
			break;
		case "JOINT":case "JOINTS":
			aList = this.attributes.joint;
			break;
		case "JOINTMATRIX":
			aList = this.attributes.jointmatrix;
			break;
		case "NORMAL":
			aList = this.attributes.normal;
			break;
		case "POSITION":
			aList = this.attributes.position;
			break;
		case "TANGENT":
			aList = this.attributes.tangent;
			break;
		case "TEXCOORD":
			aList = this.attributes.texcoord;
			break;
		case "WEIGHT":case "WEIGHTS":
			aList = this.attributes.weight;
			break;
		default:
			aList = null;
		}
		return { index : idx, list : aList};
	}
	getAttribTargetVector(targetIndex,attr) {
		var target = this.targets[targetIndex];
		var name = attr;
		var idx = 0;
		if(attr.indexOf("_") != -1) {
			name = HxOverrides.substr(attr,0,attr.indexOf("_"));
			idx = Std.parseInt(HxOverrides.substr(attr,attr.indexOf("_") + 1,null));
		}
		var aList;
		switch(name) {
		case "NORMAL":
			aList = target.normal;
			break;
		case "POSITION":
			aList = target.position;
			break;
		case "TANGENT":
			aList = target.tangent;
			break;
		default:
			aList = null;
		}
		return { index : idx, list : aList};
	}
	load(gltf,primitive) {
		var names = Reflect.fields(primitive.attributes);
		this.attributes = new assimp_format_gltf2_types_TAttributes();
		var _g = 0;
		var _g1 = names.length;
		while(_g < _g1) {
			var i = _g++;
			var aid = Reflect.field(primitive.attributes,names[i]);
			var vec = this.getAttribVector(names[i]);
			vec.list[vec.index] = { name : names[i], accessor : gltf.accessors[aid]};
		}
		if(primitive.targets != null) {
			var this1 = new Array(primitive.targets.length);
			this.targets = this1;
			var _g2 = 0;
			var _g3 = primitive.targets.length;
			while(_g2 < _g3) {
				var targetIndex = _g2++;
				var target = primitive.targets[targetIndex];
				var targets_names = Reflect.fields(target);
				var _g21 = 0;
				var _g31 = targets_names.length;
				while(_g21 < _g31) {
					var i1 = _g21++;
					var aid1 = Reflect.field(target,targets_names[i1]);
					var vec1 = this.getAttribTargetVector(targetIndex,targets_names[i1]);
					vec1.list[vec1.index] = { name : targets_names[i1], accessor : gltf.accessors[aid1]};
				}
			}
		}
		this.mode = primitive.mode != null ? primitive.mode : 4;
		if(primitive.indices != null) {
			this.indices = gltf.accessors[primitive.indices];
		}
		if(primitive.material != null) {
			this.material = gltf.materials[primitive.material];
		}
	}
}
assimp_format_gltf2_types_MeshPrimitive.__name__ = true;
Object.assign(assimp_format_gltf2_types_MeshPrimitive.prototype, {
	__class__: assimp_format_gltf2_types_MeshPrimitive
});
class assimp_format_gltf2_types_Node extends assimp_format_gltf2_types_Ref {
	constructor() {
		assimp_format_gltf2_types_Ref._hx_skip_constructor = true;
		super();
		assimp_format_gltf2_types_Ref._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.weights = null;
		this.translation = null;
		this.scale = null;
		this.rotation = null;
		this.mesh = null;
		this.matrix = null;
		this.skin = null;
		this.children = new Array(0);
		this.camera = null;
		this.name = null;
		super._hx_constructor();
	}
	load(gltf,node,existingNodes) {
		this.name = node.name;
		if(node.camera != null) {
			this.camera = gltf.cameras[node.camera];
		}
		if(node.children != null) {
			var this1 = new Array(node.children.length);
			this.children = this1;
			var _g = 0;
			var _g1 = node.children.length;
			while(_g < _g1) {
				var i = _g++;
				this.children[i] = existingNodes[node.children[i]];
			}
		}
		if(node.skin != null) {
			this.skin = gltf.skins[node.skin];
		}
		if(node.matrix != null) {
			this.matrix = node.matrix.slice(0);
		}
		if(node.mesh != null) {
			this.mesh = gltf.meshes[node.mesh];
		}
		if(node.rotation != null) {
			this.rotation = node.rotation.slice(0);
		}
		if(node.scale != null) {
			this.scale = node.scale.slice(0);
		}
		if(node.translation != null) {
			this.translation = node.translation.slice(0);
		}
		if(node.weights != null) {
			this.weights = node.weights.slice(0);
		}
	}
	static preloadFromRaw(gltf,raw) {
		var this1 = new Array(raw.nodes.length);
		var existingNodes = this1;
		var _g = 0;
		var _g1 = raw.nodes.length;
		while(_g < _g1) {
			var i = _g++;
			existingNodes[i] = new assimp_format_gltf2_types_Node();
			existingNodes[i].index = i;
		}
		return existingNodes;
	}
	static loadFromRaw(gltf,raw) {
		var _g = 0;
		var _g1 = raw.nodes.length;
		while(_g < _g1) {
			var i = _g++;
			gltf.nodes[i].load(gltf,raw.nodes[i],gltf.nodes);
			gltf.nodes[i].index = i;
		}
		return gltf.nodes;
	}
}
assimp_format_gltf2_types_Node.__name__ = true;
assimp_format_gltf2_types_Node.__super__ = assimp_format_gltf2_types_Ref;
Object.assign(assimp_format_gltf2_types_Node.prototype, {
	__class__: assimp_format_gltf2_types_Node
});
class assimp_format_gltf2_types_Sampler extends assimp_format_gltf2_types_Ref {
	constructor() {
		super();
	}
	load(gltf,sampler) {
		this.name = sampler.name;
		this.magFilter = sampler.magFilter;
		this.minFilter = sampler.minFilter;
		this.wrapS = sampler.wrapS;
		this.wrapT = sampler.wrapT;
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.samplers.length);
		var samplers = this1;
		var _g = 0;
		var _g1 = raw.samplers.length;
		while(_g < _g1) {
			var i = _g++;
			samplers[i] = new assimp_format_gltf2_types_Sampler();
			samplers[i].index = i;
		}
		var _g2 = 0;
		var _g3 = raw.samplers.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			samplers[i1].load(gltf,raw.samplers[i1]);
		}
		return samplers;
	}
}
assimp_format_gltf2_types_Sampler.__name__ = true;
assimp_format_gltf2_types_Sampler.__super__ = assimp_format_gltf2_types_Ref;
Object.assign(assimp_format_gltf2_types_Sampler.prototype, {
	__class__: assimp_format_gltf2_types_Sampler
});
class assimp_format_gltf2_types_Scene {
	constructor() {
		this.nodes = new Array(0);
		this.name = null;
	}
	load(gltf,scene) {
		this.name = scene.name;
		var this1 = new Array(scene.nodes.length);
		this.nodes = this1;
		var _g = 0;
		var _g1 = scene.nodes.length;
		while(_g < _g1) {
			var i = _g++;
			this.nodes[i] = gltf.nodes[scene.nodes[i]];
		}
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.scenes.length);
		var scenes = this1;
		var _g = 0;
		var _g1 = raw.scenes.length;
		while(_g < _g1) {
			var i = _g++;
			scenes[i] = new assimp_format_gltf2_types_Scene();
		}
		var _g2 = 0;
		var _g3 = raw.scenes.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			scenes[i1].load(gltf,raw.scenes[i1]);
		}
		return scenes;
	}
}
assimp_format_gltf2_types_Scene.__name__ = true;
Object.assign(assimp_format_gltf2_types_Scene.prototype, {
	__class__: assimp_format_gltf2_types_Scene
});
class assimp_format_gltf2_types_Skin {
	constructor() {
	}
	load(gltf,skin) {
		this.skeleton = gltf.nodes[skin.skeleton];
		var this1 = new Array(skin.joints.length);
		this.joints = this1;
		var _g = 0;
		var _g1 = skin.joints.length;
		while(_g < _g1) {
			var i = _g++;
			this.joints[i] = gltf.nodes[skin.joints[i]];
		}
		var this2 = new Array(skin.joints.length);
		this.inverseBindMatrices = this2;
		var accessor = gltf.accessors[skin.inverseBindMatrices];
		var matrices = accessor.getFloats();
		var _g2 = 0;
		var _g3 = skin.joints.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var this3 = this.inverseBindMatrices;
			var this4 = new Array(16);
			this3[i1] = this4;
			this.inverseBindMatrices[i1][0] = matrices[i1 * 16];
			this.inverseBindMatrices[i1][1] = matrices[i1 * 16 + 1];
			this.inverseBindMatrices[i1][2] = matrices[i1 * 16 + 2];
			this.inverseBindMatrices[i1][3] = matrices[i1 * 16 + 3];
			this.inverseBindMatrices[i1][4] = matrices[i1 * 16 + 4];
			this.inverseBindMatrices[i1][5] = matrices[i1 * 16 + 5];
			this.inverseBindMatrices[i1][6] = matrices[i1 * 16 + 6];
			this.inverseBindMatrices[i1][7] = matrices[i1 * 16 + 7];
			this.inverseBindMatrices[i1][8] = matrices[i1 * 16 + 8];
			this.inverseBindMatrices[i1][9] = matrices[i1 * 16 + 9];
			this.inverseBindMatrices[i1][10] = matrices[i1 * 16 + 10];
			this.inverseBindMatrices[i1][11] = matrices[i1 * 16 + 11];
			this.inverseBindMatrices[i1][12] = matrices[i1 * 16 + 12];
			this.inverseBindMatrices[i1][13] = matrices[i1 * 16 + 13];
			this.inverseBindMatrices[i1][14] = matrices[i1 * 16 + 14];
			this.inverseBindMatrices[i1][15] = matrices[i1 * 16 + 15];
		}
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.skins.length);
		var skins = this1;
		var _g = 0;
		var _g1 = raw.skins.length;
		while(_g < _g1) {
			var i = _g++;
			var skin = new assimp_format_gltf2_types_Skin();
			skin.load(gltf,raw.skins[i]);
			skins[i] = skin;
		}
		return skins;
	}
}
assimp_format_gltf2_types_Skin.__name__ = true;
Object.assign(assimp_format_gltf2_types_Skin.prototype, {
	__class__: assimp_format_gltf2_types_Skin
});
class assimp_format_gltf2_types_Texture {
	constructor() {
		this.sampler = null;
		this.image = null;
		this.name = null;
	}
	load(gltf,texture) {
		this.name = texture.name;
		if(texture.source != null) {
			this.image = gltf.images[texture.source];
		}
		if(texture.sampler != null) {
			this.sampler = gltf.samplers[texture.sampler];
		}
	}
	static loadFromRaw(gltf,raw) {
		var this1 = new Array(raw.textures.length);
		var textures = this1;
		var _g = 0;
		var _g1 = raw.textures.length;
		while(_g < _g1) {
			var i = _g++;
			textures[i] = new assimp_format_gltf2_types_Texture();
		}
		var _g2 = 0;
		var _g3 = raw.textures.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			textures[i1].load(gltf,raw.textures[i1]);
		}
		return textures;
	}
}
assimp_format_gltf2_types_Texture.__name__ = true;
Object.assign(assimp_format_gltf2_types_Texture.prototype, {
	__class__: assimp_format_gltf2_types_Texture
});
class assimp_postProcess_ValidateDSProcess extends assimp_BaseProcess {
	constructor() {
		super();
	}
	reportError(msg,args) {
		throw new js__$Boot_HaxeError("Validation failed: $msg $args");
	}
	reportWarning(msg,args) {
		haxe_Log.trace("Validation warning: $msg $args",{ fileName : "assimp/postProcess/ValidateDSProcess.hx", lineNumber : 39, className : "assimp.postProcess.ValidateDSProcess", methodName : "reportWarning"});
	}
	isActive(flags) {
		return (flags & 1024) != 0;
	}
	execute(scene) {
		this.scene = scene;
		haxe_Log.trace("ValidateDataStructureProcess begin",{ fileName : "assimp/postProcess/ValidateDSProcess.hx", lineNumber : 48, className : "assimp.postProcess.ValidateDSProcess", methodName : "execute"});
		this.validateAiNode(scene.rootNode);
		if(scene.numMeshes != 0) {
			this.doValidation(scene.meshes,scene.numMeshes,"meshes","numMeshes");
		} else if((scene.flags & assimp_format_Scene.AI_SCENE_FLAGS_INCOMPLETE) == 0) {
			this.reportError("AiScene.numMeshes is 0. At least one mesh must be there");
		} else if(!Lambda.empty(scene.meshes)) {
			this.reportError("AiScene.meshes is not empty although there are no meshes");
		}
		if(scene.numAnimations != 0) {
			this.doValidation(scene.animations,scene.numAnimations,"animations","numAnimations");
		} else if(!Lambda.empty(scene.animations)) {
			this.reportError("AiScene.animations is not empty although there are no animations");
		}
		if(scene.numCameras != 0) {
			this.doValidationWithNameCheck(scene.cameras,scene.numCameras,"cameras","numCameras");
		} else if(!Lambda.empty(scene.cameras)) {
			this.reportError("AiScene.cameras is not empty although there are no cameras");
		}
		if(scene.numLights > 0) {
			this.doValidationWithNameCheck(scene.lights,scene.numLights,"lights","numLights");
		} else if(!Lambda.empty(scene.lights)) {
			this.reportError("AiScene.lights is not empty although there are no lights");
		}
		if(scene.numTextures > 0) {
			this.doValidation(Lambda.array(scene.textures),scene.numTextures,"textures","numTextures");
		} else if(!Lambda.empty(scene.textures)) {
			this.reportError("AiScene.textures is not empty although there are no textures");
		}
		if(scene.numMaterials > 0) {
			this.doValidation(scene.materials,scene.numMaterials,"materials","numMaterials");
		} else if(!Lambda.empty(scene.materials)) {
			this.reportError("AiScene.materials is not empty although there are no materials");
		}
		haxe_Log.trace("ValidateDataStructureProcess end",{ fileName : "assimp/postProcess/ValidateDSProcess.hx", lineNumber : 91, className : "assimp.postProcess.ValidateDSProcess", methodName : "execute"});
	}
	validateAiMesh(mesh) {
		if(this.scene.numMaterials != 0 && mesh.materialIndex >= this.scene.numMaterials) {
			this.reportError("AiMesh.materialIndex is invalid (value: ${mesh.materialIndex} maximum: ${scene.numMaterials - 1})");
		}
		this.validateString(mesh.name);
		var _g = 0;
		var _g1 = mesh.numFaces;
		while(_g < _g1) {
			var i = _g++;
			var face = mesh.faces[i];
			if(mesh.primitiveTypes != 0) {
				switch(face.numIndices) {
				case 0:
					this.reportError("AiMesh.faces[$i].numIndices is 0");
					break;
				case 1:
					if((mesh.primitiveTypes & 1) == 0) {
						this.reportError("AiMesh.faces[$i] is a POINT but AiMesh.primitiveTypes does not report the POINT flag");
					}
					break;
				case 2:
					if((mesh.primitiveTypes & 2) == 0) {
						this.reportError("AiMesh.faces[$i] is a LINE but AiMesh.primitiveTypes does not report the LINE flag");
					}
					break;
				case 3:
					if((mesh.primitiveTypes & 4) == 0) {
						this.reportError("AiMesh.faces[$i] is a TRIANGLE but AiMesh.primitiveTypes does not report the TRIANGLE flag");
					}
					break;
				default:
					if((mesh.primitiveTypes & 8) == 0) {
						this.reportError("AiMesh.faces[$i] is a POLYGON but AiMesh.primitiveTypes does not report the POLYGON flag");
					}
				}
			}
			if(face.numIndices == 0) {
				this.reportError("AiMesh.faces[$i] is empty");
			}
		}
		if(mesh.numVertices == 0 || Lambda.empty(mesh.vertices) && this.scene.flags == 0) {
			this.reportError("The mesh contains no vertices");
		}
		if(mesh.numVertices > assimp_format_Mesh.AI_MAX_VERTICES) {
			this.reportError("Mesh has too many vertices: ${mesh.numVertices}, but the limit is $AI_MAX_VERTICES");
		}
		if(mesh.numFaces > assimp_format_Mesh.AI_MAX_FACES) {
			this.reportError("Mesh has too many faces: ${mesh.numFaces}, but the limit is $AI_MAX_FACES");
		}
		if(!Lambda.empty(mesh.tangents) != !Lambda.empty(mesh.bitangents)) {
			this.reportError("If there are tangents, bitangent vectors must be present as well");
		}
		if(mesh.numFaces == 0 || Lambda.empty(mesh.faces) && this.scene.flags == 0) {
			this.reportError("Mesh contains no faces");
		}
		var _g2 = [];
		var _g3 = 0;
		var _g4 = mesh.numVertices;
		while(_g3 < _g4) {
			var i1 = _g3++;
			_g2.push(false);
		}
		var abRefList = _g2;
		var _g5 = 0;
		var _g6 = mesh.numFaces;
		while(_g5 < _g6) {
			var i2 = _g5++;
			var face1 = mesh.faces[i2];
			if(face1.numIndices > assimp_format_Mesh.AI_MAX_FACE_INDICES) {
				this.reportError("Face $i has too many faces: ${face.size}, but the limit is $AI_MAX_FACE_INDICES");
			}
			var _g51 = 0;
			var _g61 = face1.numIndices;
			while(_g51 < _g61) {
				var a = _g51++;
				if(face1.indices[a] >= mesh.numVertices) {
					this.reportError("AiMesh.faces[$i][$a] is out of range");
				}
				abRefList[face1.indices[a]] = true;
			}
		}
		var _g7 = 0;
		var _g8 = mesh.numVertices;
		while(_g7 < _g8) {
			var i3 = _g7++;
			if(!abRefList[i3]) {
				this.reportWarning("There are unreferenced vertices");
			}
		}
		var i4 = 0;
		while(i4 < assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS) {
			if(!mesh.hasTextureCoords(i4)) {
				break;
			}
			++i4;
		}
		while(i4 < assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS) {
			if(mesh.hasTextureCoords(i4)) {
				this.reportError("Texture coordinate channel $i exists although the previous channel didn't exist.");
			}
			++i4;
		}
		var i5 = 0;
		while(i5 < assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {
			if(!mesh.hasVertexColors(i5)) {
				break;
			}
			++i5;
		}
		while(i5 < assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {
			if(mesh.hasVertexColors(i5)) {
				this.reportError("Vertex color channel $i is exists although the previous channel didn't exist.");
			}
			++i5;
		}
		if(mesh.numBones > 0) {
			if(Lambda.empty(mesh.bones)) {
				this.reportError("AiMesh.bones is empty (AiMesh.numBones is ${mesh.numBones})");
			}
			var _g9 = [];
			var _g10 = 0;
			var _g11 = mesh.numVertices;
			while(_g10 < _g11) {
				var i6 = _g10++;
				_g9.push(0.0);
			}
			var afSum = _g9;
			var _g12 = 0;
			var _g13 = mesh.numBones;
			while(_g12 < _g13) {
				var i7 = _g12++;
				var bone = mesh.bones[i7];
				if(bone.numWeights > assimp_format_Mesh.AI_MAX_BONE_WEIGHTS) {
					this.reportError("Bone $i has too many weights: ${bone.numWeights}, but the limit is $Mesh.AI_MAX_BONE_WEIGHTS");
				}
				if(i7 >= mesh.bones.length) {
					this.reportError("AiMesh.bones[$i] doesn't exist (AiMesh.numBones is ${mesh.numBones})");
				}
				this.validateAiBone(mesh,mesh.bones[i7],afSum);
				var _g121 = i7 + 1;
				var _g131 = mesh.numBones;
				while(_g121 < _g131) {
					var a1 = _g121++;
					if(mesh.bones[i7].name == mesh.bones[a1].name) {
						this.reportError("AiMesh.bones[$i] has the same name as AiMesh.bones[$a]");
					}
				}
			}
			var _g14 = 0;
			var _g15 = mesh.numVertices;
			while(_g14 < _g15) {
				var i8 = _g14++;
				if(afSum[i8] != 0 && (afSum[i8] <= 0.94 || afSum[i8] >= 1.05)) {
					this.reportWarning("AiMesh.vertices[$i]: bone weight sum != 1f (sum is ${afSum[i]})");
				}
			}
		} else if(!Lambda.empty(mesh.bones)) {
			this.reportError("AiMesh.bones is no empty although there are no bones");
		}
	}
	validateAiBone(mesh,bone,afSum) {
		this.validateString(bone.name);
		if(bone.numWeights == 0) {
			this.reportError("aiBone::mNumWeights is zero");
		}
		var _g = 0;
		var _g1 = bone.numWeights;
		while(_g < _g1) {
			var i = _g++;
			if(bone.weights[i].vertexId >= mesh.numVertices) {
				this.reportError("AiBone.weights[$i].vertexId is out of range");
			} else if(bone.weights[i].weight == 0 || bone.weights[i].weight > 1) {
				this.reportWarning("AiBone.weights[$i].weight has an invalid value");
			}
			afSum[bone.weights[i].vertexId] += bone.weights[i].weight;
		}
	}
	validateAiAnimation(animation) {
		this.validateString(animation.name);
		if(animation.numChannels > 0) {
			if(Lambda.empty(animation.channels)) {
				this.reportError("AiAnimation.channels is empty (AiAnimation.numChannels is ${animation.numChannels})");
			}
			var _g = 0;
			var _g1 = animation.numChannels;
			while(_g < _g1) {
				var i = _g++;
				if(i >= animation.channels.length) {
					this.reportError("AiAnimation.channels[$i] doesn't exist (AiAnimation.numChannels is ${animation.numChannels})");
				}
				this.validateChannels(animation,animation.channels[i]);
			}
		} else {
			this.reportError("aiAnimation::mNumChannels is 0. At least one node animation channel must be there.");
		}
	}
	validateAiMaterial(material) {
		var temp = 0;
		if(material.shadingModel != null) {
			var _g = material.shadingModel;
			if(_g != null) {
				switch(_g) {
				case 3:case 4:case 8:
					if(material.shininess == null) {
						this.reportWarning("A specular shading model is specified but there is no Shininess key");
					}
					if(material.shininessStrength != null) {
						if(material.shininessStrength == 0) {
							this.reportWarning("A specular shading model is specified but the value of the Shininess Strenght key is 0");
						}
					}
					break;
				default:
				}
			}
		}
		if(material.opacity != null) {
			if(material.opacity == 0 || material.opacity > 1.01) {
				this.reportWarning("Invalid opacity value (must be 0 < opacity < 1f)");
			}
		}
		this.searchForInvalidTextures(material);
	}
	searchForInvalidTextures(material) {
		var index = 0;
		var noSpecified = true;
		var _g = 0;
		var _g1 = material.textures;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			if(texture.uvwsrc != null) {
				var it = texture.uvwsrc;
				noSpecified = false;
				index = it;
				var _g2 = 0;
				var _g11 = this.scene.numMeshes;
				while(_g2 < _g11) {
					var a = _g2++;
					var mesh = this.scene.meshes[a];
					if(mesh.materialIndex == this.scene.materials.indexOf(material)) {
						var channels = 0;
						while(mesh.hasTextureCoords(channels)) ++channels;
						if(it >= channels) {
							this.reportWarning("Invalid UV index: $it (key uvwsrc). Mesh $a has only $channels UV channels");
						}
					}
				}
			}
		}
		if(noSpecified) {
			var _g21 = 0;
			var _g3 = this.scene.numMeshes;
			while(_g21 < _g3) {
				var a1 = _g21++;
				var mesh1 = this.scene.meshes[a1];
				if(mesh1.materialIndex == index && Lambda.empty(mesh1.textureCoords[0])) {
					this.reportWarning("UV-mapped texture, but there are no UV coords");
				}
			}
		}
	}
	validateAiTexture(texture) {
		if(null == texture.pcData) {
			this.reportError("AiTexture.pcData is empty");
		}
		if(texture.height > 0 && texture.width == 0) {
			this.reportError("AiTexture.width is zero (AiTexture.height is ${texture.height}, uncompressed texture)");
		} else if(texture.width == 0) {
			this.reportError("AiTexture.width is zero (compressed texture)");
		} else if("." == texture.achFormatHint.charAt(0)) {
			this.reportWarning("AiTexture.achFormatHint should contain a file extension  without a leading dot (format hint: ${texture.achFormatHint}).");
		}
		if(texture.achFormatHint.toLowerCase() != texture.achFormatHint) {
			this.reportError("AiTexture.achFormatHint contains non-lowercase letters");
		}
	}
	validateAiLight(light) {
		if(light.type == 0) {
			this.reportWarning("AiLight.type is undefined");
		}
		if(light.attenuationConstant == 0 && light.attenuationLinear == 0 && light.attenuationQuadratic == 0) {
			this.reportWarning("AiLight.attenuation* - all are zero");
		}
		if(light.angleInnerCone > light.angleOuterCone) {
			this.reportError("AiLight.angleInnerCone is larger than AiLight.angleOuterCone");
		}
		if(assimp_format_Defs.isBlack(light.colorDiffuse) && assimp_format_Defs.isBlack(light.colorAmbient) && assimp_format_Defs.isBlack(light.colorSpecular)) {
			this.reportWarning("AiLight.color* - all are black and won't have any influence");
		}
	}
	validateAiCamera(camera) {
		if(camera.clipPlaneFar <= camera.clipPlaneNear) {
			this.reportError("AiCamera.clipPlaneFar must be >= AiCamera.clipPlaneNear");
		}
		if(camera.horizontalFOV == 0 || camera.horizontalFOV >= Math.PI) {
			this.reportWarning("${camera.horizontalFOV} is not a valid value for AiCamera.horizontalFOV");
		}
	}
	validateChannels(animation,boneAnim) {
		this.validateString(boneAnim.nodeName);
		if(boneAnim.numPositionKeys == 0 && Lambda.empty(boneAnim.scalingKeys) && boneAnim.numRotationKeys == 0) {
			this.reportError("Empty node animation channel");
		}
		if(boneAnim.numPositionKeys > 0) {
			if(Lambda.empty(boneAnim.positionKeys)) {
				this.reportError("AiNodeAnim.positionKeys is empty (AiNodeAnim.numPositionKeys is ${boneAnim.numPositionKeys})");
			}
			var last = -10e10;
			var _g = 0;
			var _g1 = boneAnim.numPositionKeys;
			while(_g < _g1) {
				var i = _g++;
				if(animation.duration > 0 && boneAnim.positionKeys[i].time > animation.duration + assimp_format_Defs.epsilon) {
					var t = boneAnim.positionKeys[i].time;
					var d = assimp_StringUtil.formatString("%.5f",animation.duration);
					this.reportError("AiNodeAnim.positionKeys[$i].time ($t) is larger than AiAnimation.duration (which is $d)");
				}
				if(i > 0 && boneAnim.positionKeys[i].time <= last) {
					var t1 = assimp_StringUtil.formatString("%.5f",boneAnim.positionKeys[i].time);
					var l = assimp_StringUtil.formatString("%.5f",last);
					this.reportWarning("AiNodeAnim.positionKeys[$i].time ($t) is smaller than AiAnimation.positionKeys[${i - 1}] (which is $l)");
				}
				last = boneAnim.positionKeys[i].time;
			}
		}
		if(boneAnim.numRotationKeys > 0) {
			if(Lambda.empty(boneAnim.rotationKeys)) {
				this.reportError("AiNodeAnim.rotationKeys is empty (AiNodeAnim.numRotationKeys is ${boneAnim.numRotationKeys})");
			}
			var last1 = -10e10;
			var _g2 = 0;
			var _g11 = boneAnim.numRotationKeys;
			while(_g2 < _g11) {
				var i1 = _g2++;
				if(animation.duration > 0 && boneAnim.rotationKeys[i1].time > animation.duration + assimp_format_Defs.epsilon) {
					var t2 = assimp_StringUtil.formatString("%.5f",boneAnim.rotationKeys[i1].time);
					var d1 = assimp_StringUtil.formatString("%.5f",animation.duration);
					this.reportError("aiNodeAnim::mRotationKeys[$i].time ($t) is larger than AiAnimation.duration (which is $d)");
				}
				if(i1 > 0 && boneAnim.rotationKeys[i1].time <= last1) {
					var t3 = assimp_StringUtil.formatString("%.5f",boneAnim.rotationKeys[i1].time);
					var l1 = assimp_StringUtil.formatString("%.5f",last1);
					this.reportWarning("AiNodeAnim.rotationKeys[$i].time ($t) is smaller than AiAnimation.rotationKeys[${i - 1}] (which is $l)");
				}
				last1 = boneAnim.rotationKeys[i1].time;
			}
		}
		if(boneAnim.numScalingKeys > 0) {
			if(Lambda.empty(boneAnim.scalingKeys)) {
				this.reportError("AiNodeAnim.scalingKeys is empty (AiNodeAnim.numScalingKeys is ${boneAnim.numScalingKeys})");
			}
			var last2 = -10e10;
			var _g3 = 0;
			var _g12 = boneAnim.numScalingKeys;
			while(_g3 < _g12) {
				var i2 = _g3++;
				if(animation.duration > 0 && boneAnim.scalingKeys[i2].time > animation.duration + assimp_format_Defs.epsilon) {
					var t4 = boneAnim.scalingKeys[i2].time;
					var d2 = animation.duration;
					this.reportError("AiNodeAnim.scalingKeys[$i].time ($t) is larger than AiAnimation.duration (which is $d)");
				}
				if(i2 > 0 && boneAnim.scalingKeys[i2].time <= last2) {
					var t5 = assimp_StringUtil.formatString("%.5f",boneAnim.scalingKeys[i2].time);
					var l2 = assimp_StringUtil.formatString("%.5f",last2);
					this.reportWarning("AiNodeAnim.scalingKeys[$i].time ($t) is smaller than AiAnimation.scalingKeys[${i - 1}] (which is $l)");
				}
				last2 = boneAnim.scalingKeys[i2].time;
			}
		}
		if(boneAnim.numScalingKeys == 0 && boneAnim.numRotationKeys == 0 && boneAnim.numPositionKeys == 0) {
			this.reportError("A node animation channel must have at least one subtrack");
		}
	}
	validateAiNode(node) {
		if(node != this.scene.rootNode && node.parent == null) {
			this.reportError("A node has no valid parent (AiNode.parent is null)");
		}
		this.validateString(node.name);
		if(node.numMeshes > 0) {
			if(Lambda.empty(node.meshes)) {
				this.reportError("AiNode.meshes is empty (AiNode.numMeshes is ${node.numMeshes})");
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = this.scene.numMeshes;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(false);
			}
			var abHadMesh = _g;
			var _g3 = 0;
			var _g4 = node.numMeshes;
			while(_g3 < _g4) {
				var i1 = _g3++;
				if(node.meshes[i1] >= this.scene.numMeshes) {
					this.reportError("AiNode.meshes[${node.meshes[i]}] is out of range (maximum is ${scene.numMeshes - 1})");
				}
				if(abHadMesh[node.meshes[i1]]) {
					this.reportError("AiNode.meshes[$i] is already referenced by this node (value: ${node.meshes[i]})");
				}
				abHadMesh[node.meshes[i1]] = true;
			}
		}
		if(node.numChildren > 0) {
			if(Lambda.empty(node.children)) {
				this.reportError("AiNode.children is empty (AiNode.numChildren is ${node.numChildren})");
			}
			var _g5 = 0;
			var _g11 = node.numChildren;
			while(_g5 < _g11) {
				var i2 = _g5++;
				this.validateAiNode(node.children[i2]);
			}
		}
	}
	validateString(string) {
		if(string.length > assimp_Types.MAXLEN) {
			this.reportError("String.length is too large (${string.length}, maximum is $MAXLEN)");
		}
		if(string.indexOf("\x00") != -1) {
			this.reportError("String data is invalid: it contains the terminal zero");
		}
	}
	doValidation(array,size,firstName,secondName) {
		if(size > 0) {
			if(Lambda.empty(array)) {
				this.reportError("AiScene.$firstName is empty (AiScene.$secondName is $size)");
			}
			var _g = 0;
			var _g1 = size;
			while(_g < _g1) {
				var i = _g++;
				var element = array[i];
				if(((element) instanceof assimp_format_AiMesh)) {
					this.validateAiMesh(element);
				}
				if(((element) instanceof assimp_format_AiAnimation)) {
					this.validateAiAnimation(element);
				}
				if(((element) instanceof assimp_format_AiCamera)) {
					this.validateAiCamera(element);
				}
				if(((element) instanceof assimp_format_AiLight)) {
					this.validateAiLight(element);
				}
				if(((element) instanceof assimp_format_AiTexture)) {
					this.validateAiTexture(element);
				}
				if(((element) instanceof assimp_format_AiMaterial)) {
					this.validateAiMesh(element);
				}
			}
		}
	}
	doValidationEx(array,size,firstName,secondName) {
		if(size > 0) {
			if(Lambda.empty(array)) {
				this.reportError("AiScene.$firstName is empty (AiScene.$secondName is $size)");
			}
			var _g = 0;
			var _g1 = size;
			while(_g < _g1) {
				var i = _g++;
				var element = array[i];
				if(((element) instanceof assimp_format_AiMesh)) {
					this.validateAiMesh(element);
				}
				if(((element) instanceof assimp_format_AiAnimation)) {
					this.validateAiAnimation(element);
				}
				if(((element) instanceof assimp_format_AiCamera)) {
					this.validateAiCamera(element);
				}
				if(((element) instanceof assimp_format_AiLight)) {
					this.validateAiLight(element);
				}
				if(((element) instanceof assimp_format_AiTexture)) {
					this.validateAiTexture(element);
				}
				if(((element) instanceof assimp_format_AiMaterial)) {
					this.validateAiMesh(element);
				}
				var _g2 = i + 1;
				var _g11 = size;
				while(_g2 < _g11) {
					var a = _g2++;
					var nameI = Reflect.field(element,"name");
					var elementA = array[a];
					var nameA = Reflect.field(elementA,"name");
					if(nameI == nameA) {
						this.reportError("AiScene.$firstName[$i] has the same name as AiScene.$secondName[$a]");
					}
				}
			}
		}
	}
	doValidationWithNameCheck(array,size,firstName,secondName) {
		this.doValidationEx(array,size,firstName,secondName);
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			var element = array[i];
			var name = Reflect.field(element,"name");
			var res = this.hasNameMatch(name,this.scene.rootNode);
			if(res == 0) {
				this.reportError("AiScene$firstName[$i] has no corresponding node in the scene graph ($name)");
			} else if(1 != res) {
				this.reportError("AiScene.$firstName[$i]: there are more than one nodes with $name as name");
			}
		}
	}
	hasNameMatch(sIn,node) {
		var _gthis = this;
		return (node.name == sIn ? 1 : 0) + Lambda.fold(node.children,function(it,sum) {
			return _gthis.hasNameMatch(sIn,it) + sum;
		},0);
	}
}
assimp_postProcess_ValidateDSProcess.__name__ = true;
assimp_postProcess_ValidateDSProcess.__super__ = assimp_BaseProcess;
Object.assign(assimp_postProcess_ValidateDSProcess.prototype, {
	__class__: assimp_postProcess_ValidateDSProcess
});
class example_ExampleLightScattering {
	constructor() {
		this.init();
	}
	createRandomCube(geom,effect) {
		var r = minko_utils_MathUtil.sphericalRand(1.0);
		var material = minko_material_BasicMaterial.create();
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest = this1;
		dest.x = r.x + 1.0;
		dest.y = r.y + 1.0;
		dest.z = r.z + 1.0;
		var a = dest;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var dest1 = this2;
		dest1.x = a.x * .5;
		dest1.y = a.y * .5;
		dest1.z = a.z * .5;
		var v = dest1;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var this3 = new glm_Vec4Base();
		this3.x = x;
		this3.y = y;
		this3.z = z;
		this3.w = 1.0;
		material.set_diffuseColor(this3);
		var node = minko_scene_Node.create();
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest2 = this4;
		dest2.x = r.x * 50.0;
		dest2.y = r.y * 50.0;
		dest2.z = r.z * 50.0;
		var translation = dest2;
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest3 = this5;
		dest3._00 = 1;
		dest3._10 = 0;
		dest3._20 = 0;
		dest3._30 = 0;
		dest3._01 = 0;
		dest3._11 = 1;
		dest3._21 = 0;
		dest3._31 = 0;
		dest3._02 = 0;
		dest3._12 = 0;
		dest3._22 = 1;
		dest3._32 = 0;
		dest3._03 = 0;
		dest3._13 = 0;
		dest3._23 = 0;
		dest3._33 = 1;
		dest3._30 = translation.x;
		dest3._31 = translation.y;
		dest3._32 = translation.z;
		var a1 = dest3;
		var this6 = new glm_Vec3Base();
		this6.x = 10.0;
		this6.y = 10;
		this6.z = 10;
		var amount = this6;
		var this7 = new glm_Mat4Base();
		this7._00 = 0;
		this7._01 = 0;
		this7._02 = 0;
		this7._03 = 0;
		this7._10 = 0;
		this7._11 = 0;
		this7._12 = 0;
		this7._13 = 0;
		this7._20 = 0;
		this7._21 = 0;
		this7._22 = 0;
		this7._23 = 0;
		this7._30 = 0;
		this7._31 = 0;
		this7._32 = 0;
		this7._33 = 0;
		var dest4 = this7;
		dest4._00 = 1;
		dest4._10 = 0;
		dest4._20 = 0;
		dest4._30 = 0;
		dest4._01 = 0;
		dest4._11 = 1;
		dest4._21 = 0;
		dest4._31 = 0;
		dest4._02 = 0;
		dest4._12 = 0;
		dest4._22 = 1;
		dest4._32 = 0;
		dest4._03 = 0;
		dest4._13 = 0;
		dest4._23 = 0;
		dest4._33 = 1;
		dest4._00 = amount.x;
		dest4._11 = amount.y;
		dest4._22 = amount.z;
		var b = dest4;
		var this8 = new glm_Mat4Base();
		this8._00 = 0;
		this8._01 = 0;
		this8._02 = 0;
		this8._03 = 0;
		this8._10 = 0;
		this8._11 = 0;
		this8._12 = 0;
		this8._13 = 0;
		this8._20 = 0;
		this8._21 = 0;
		this8._22 = 0;
		this8._23 = 0;
		this8._30 = 0;
		this8._31 = 0;
		this8._32 = 0;
		this8._33 = 0;
		var dest5 = this8;
		var _a;
		var _b;
		if(dest5 == a1) {
			var this9 = new glm_Mat4Base();
			this9._00 = 0;
			this9._01 = 0;
			this9._02 = 0;
			this9._03 = 0;
			this9._10 = 0;
			this9._11 = 0;
			this9._12 = 0;
			this9._13 = 0;
			this9._20 = 0;
			this9._21 = 0;
			this9._22 = 0;
			this9._23 = 0;
			this9._30 = 0;
			this9._31 = 0;
			this9._32 = 0;
			this9._33 = 0;
			var dest6 = this9;
			dest6._00 = a1._00;
			dest6._10 = a1._10;
			dest6._20 = a1._20;
			dest6._30 = a1._30;
			dest6._01 = a1._01;
			dest6._11 = a1._11;
			dest6._21 = a1._21;
			dest6._31 = a1._31;
			dest6._02 = a1._02;
			dest6._12 = a1._12;
			dest6._22 = a1._22;
			dest6._32 = a1._32;
			dest6._03 = a1._03;
			dest6._13 = a1._13;
			dest6._23 = a1._23;
			dest6._33 = a1._33;
			_a = dest6;
			_b = b;
		} else if(dest5 == b) {
			_a = a1;
			var this10 = new glm_Mat4Base();
			this10._00 = 0;
			this10._01 = 0;
			this10._02 = 0;
			this10._03 = 0;
			this10._10 = 0;
			this10._11 = 0;
			this10._12 = 0;
			this10._13 = 0;
			this10._20 = 0;
			this10._21 = 0;
			this10._22 = 0;
			this10._23 = 0;
			this10._30 = 0;
			this10._31 = 0;
			this10._32 = 0;
			this10._33 = 0;
			var dest7 = this10;
			dest7._00 = b._00;
			dest7._10 = b._10;
			dest7._20 = b._20;
			dest7._30 = b._30;
			dest7._01 = b._01;
			dest7._11 = b._11;
			dest7._21 = b._21;
			dest7._31 = b._31;
			dest7._02 = b._02;
			dest7._12 = b._12;
			dest7._22 = b._22;
			dest7._32 = b._32;
			dest7._03 = b._03;
			dest7._13 = b._13;
			dest7._23 = b._23;
			dest7._33 = b._33;
			_b = dest7;
		} else {
			_a = a1;
			_b = b;
		}
		dest5._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest5._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest5._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest5._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest5._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest5._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest5._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest5._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest5._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest5._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest5._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest5._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest5._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest5._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest5._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest5._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		var node1 = node.addComponent(minko_component_Transform.createbyMatrix4(dest5)).addComponent(minko_component_Surface.create(geom,material,effect));
		return node1;
	}
	init() {
		var canvas = minko_WebCanvas.create("Minko Example - Light Scattering",1024,768);
		var _gthis = this;
		var sceneManager = minko_component_SceneManager.create(canvas);
		var root = minko_scene_Node.create("root");
		var assets = sceneManager.get_assets();
		var context = canvas.get_context();
		root.addComponent(sceneManager);
		context.set_errorsEnabled(true);
		assets.get_loader().queue("effect/LightScattering/EmissionMap.effect").queue("effect/LightScattering/LightScattering.effect").queue("effect/Basic.effect");
		var tmp = minko_geometry_CubeGeometry.create(context);
		assets.setGeometry("cube",tmp);
		var renderer = minko_component_Renderer.create();
		renderer.set_layoutMask(renderer.get_layoutMask() & ~2);
		renderer.set_backgroundColor(587823871);
		var fwdRenderer = minko_component_Renderer.create();
		var x = canvas.get_width();
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		var x1 = canvas.get_height();
		--x1;
		x1 |= x1 >> 1;
		x1 |= x1 >> 2;
		x1 |= x1 >> 4;
		x1 |= x1 >> 8;
		x1 |= x1 >> 16;
		var fwdTarget = minko_render_Texture.create(context,x + 1,x1 + 1,false,true);
		fwdTarget.upload();
		var ppRenderer = minko_component_Renderer.create();
		var ppScene = minko_scene_Node.create().addComponent(ppRenderer);
		var x2 = canvas.get_width();
		--x2;
		x2 |= x2 >> 1;
		x2 |= x2 >> 2;
		x2 |= x2 >> 4;
		x2 |= x2 >> 8;
		x2 |= x2 >> 16;
		var x3 = canvas.get_height();
		--x3;
		x3 |= x3 >> 1;
		x3 |= x3 >> 2;
		x3 |= x3 >> 4;
		x3 |= x3 >> 8;
		x3 |= x3 >> 16;
		var ppTarget = minko_render_Texture.create(context,x2 + 1,x3 + 1,false,true);
		ppTarget.upload();
		var ppMaterial = minko_material_BasicMaterial.create().setbyKeyObject({ "emissionMap" : fwdTarget, "backbuffer" : ppTarget, "decay" : 0.96815, "weight" : 0.58767, "exposure" : 0.2, "density" : 0.926, "numSamples" : 128});
		var debugNode1 = minko_scene_Node.createbyLayout("debug1",2);
		var debugNode2 = minko_scene_Node.createbyLayout("debug2",2);
		var camera = minko_scene_Node.create("camera");
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 0;
		this1.z = 0;
		var this2 = new glm_Vec3Base();
		this2.x = 0.0;
		this2.y = 0.0;
		this2.z = 1.0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest)).addComponent(minko_component_PerspectiveCamera.create(1.3333333333333333,Math.PI * 0.25,.1,1000.0)).addComponent(renderer);
		root.addChild(camera1);
		var helio = minko_scene_Node.create("helio").addComponent(minko_component_Transform.create());
		root.addChild(helio);
		var sun = minko_scene_Node.create("sun");
		var _ = assets.get_loader().get_complete().connect(function(loader) {
			var _g = 0;
			while(_g < 100) {
				var i = _g++;
				var _1 = assets.geometry("cube");
				var _2 = assets.effect("effect/Basic.effect");
				var _3 = _gthis.createRandomCube(_1,_2);
				root.addChild(_3);
			}
			var sunMaterial = minko_material_BasicMaterial.create();
			var this6 = new glm_Vec4Base();
			this6.x = 1.0;
			this6.y = 0.32;
			this6.z = 0.05;
			this6.w = 1.0;
			var sunMaterial1 = sunMaterial.setbyKeyObject({ "diffuseColor" : this6, "isLightSource" : 1.0});
			var _4 = minko_scene_Node.create();
			var this7 = new glm_Vec3Base();
			this7.x = 0.0;
			this7.y = 0.0;
			this7.z = 100.0;
			var translation = this7;
			var this8 = new glm_Mat4Base();
			this8._00 = 0;
			this8._01 = 0;
			this8._02 = 0;
			this8._03 = 0;
			this8._10 = 0;
			this8._11 = 0;
			this8._12 = 0;
			this8._13 = 0;
			this8._20 = 0;
			this8._21 = 0;
			this8._22 = 0;
			this8._23 = 0;
			this8._30 = 0;
			this8._31 = 0;
			this8._32 = 0;
			this8._33 = 0;
			var dest1 = this8;
			dest1._00 = 1;
			dest1._10 = 0;
			dest1._20 = 0;
			dest1._30 = 0;
			dest1._01 = 0;
			dest1._11 = 1;
			dest1._21 = 0;
			dest1._31 = 0;
			dest1._02 = 0;
			dest1._12 = 0;
			dest1._22 = 1;
			dest1._32 = 0;
			dest1._03 = 0;
			dest1._13 = 0;
			dest1._23 = 0;
			dest1._33 = 1;
			var dest2 = dest1;
			dest2._00 = 1;
			dest2._10 = 0;
			dest2._20 = 0;
			dest2._30 = 0;
			dest2._01 = 0;
			dest2._11 = 1;
			dest2._21 = 0;
			dest2._31 = 0;
			dest2._02 = 0;
			dest2._12 = 0;
			dest2._22 = 1;
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			dest2._30 = translation.x;
			dest2._31 = translation.y;
			dest2._32 = translation.z;
			var _5 = _4.addComponent(minko_component_Transform.createbyMatrix4(dest2));
			var this9 = new glm_Vec3Base();
			this9.x = 10.0;
			this9.y = 10;
			this9.z = 10;
			var amount = this9;
			var this10 = new glm_Mat4Base();
			this10._00 = 0;
			this10._01 = 0;
			this10._02 = 0;
			this10._03 = 0;
			this10._10 = 0;
			this10._11 = 0;
			this10._12 = 0;
			this10._13 = 0;
			this10._20 = 0;
			this10._21 = 0;
			this10._22 = 0;
			this10._23 = 0;
			this10._30 = 0;
			this10._31 = 0;
			this10._32 = 0;
			this10._33 = 0;
			var dest3 = this10;
			dest3._00 = 1;
			dest3._10 = 0;
			dest3._20 = 0;
			dest3._30 = 0;
			dest3._01 = 0;
			dest3._11 = 1;
			dest3._21 = 0;
			dest3._31 = 0;
			dest3._02 = 0;
			dest3._12 = 0;
			dest3._22 = 1;
			dest3._32 = 0;
			dest3._03 = 0;
			dest3._13 = 0;
			dest3._23 = 0;
			dest3._33 = 1;
			var dest4 = dest3;
			dest4._00 = 1;
			dest4._10 = 0;
			dest4._20 = 0;
			dest4._30 = 0;
			dest4._01 = 0;
			dest4._11 = 1;
			dest4._21 = 0;
			dest4._31 = 0;
			dest4._02 = 0;
			dest4._12 = 0;
			dest4._22 = 1;
			dest4._32 = 0;
			dest4._03 = 0;
			dest4._13 = 0;
			dest4._23 = 0;
			dest4._33 = 1;
			dest4._00 = amount.x;
			dest4._11 = amount.y;
			dest4._22 = amount.z;
			var _6 = minko_component_Transform.createbyMatrix4(dest4);
			var _7 = _5.addChild(sun.addComponent(_6).addComponent(minko_component_Surface.create(minko_geometry_SphereGeometry.create(context),sunMaterial1,assets.effect("effect/Basic.effect"))));
			helio.addChild(_7);
			var _8 = minko_geometry_QuadGeometry.create(context);
			var _9 = assets.effect("effect/LightScattering/LightScattering.effect");
			var _10 = minko_component_Surface.create(_8,ppMaterial,_9);
			ppScene.addComponent(_10);
			var fwdRenderer1 = assets.effect("effect/LightScattering/EmissionMap.effect");
			fwdRenderer = minko_component_Renderer.create(255,fwdTarget,fwdRenderer1);
			var _11 = fwdRenderer.get_layoutMask() & ~2;
			fwdRenderer.set_layoutMask(_11);
			camera1.addComponent(fwdRenderer);
			var debugDisplay1 = example_TextureDebugDisplay.create();
			debugDisplay1.initialize(assets,fwdTarget);
			debugNode1.addComponent(debugDisplay1);
			ppScene.addChild(debugNode1);
			var debugDisplay2 = example_TextureDebugDisplay.create();
			debugDisplay2.initialize(assets,ppTarget);
			var _12 = debugDisplay2.get_material().get_data();
			var this11 = new glm_Vec2Base();
			this11.x = 10;
			this11.y = 440;
			_12.set("spritePosition",this11);
			debugNode2.addComponent(debugDisplay2);
			ppScene.addChild(debugNode2);
		});
		var resized = canvas.get_resized().connect(function(canvas1,w,h) {
			var perspectiveCamera = camera1.getComponent(minko_component_PerspectiveCamera);
			perspectiveCamera.set_aspectRatio(w / h);
		});
		var enterFrame = canvas.get_enterFrame().connect(function(canvas2,time,deltaTime) {
			var cameraTransform = camera1.getComponent(minko_component_Transform);
			var this12 = new glm_Vec3Base();
			this12.x = 0.0;
			this12.y = 1.0;
			this12.z = 0.0;
			var axis = this12;
			var angle = 0.001;
			var this13 = new glm_QuatBase();
			this13.x = 0;
			this13.y = 0;
			this13.z = 0;
			this13.w = 1;
			var dest5 = this13;
			angle *= 0.5;
			var s = Math.sin(angle);
			dest5.x = s * axis.x;
			dest5.y = s * axis.y;
			dest5.z = s * axis.z;
			dest5.w = Math.cos(angle);
			var rotation = dest5;
			var this14 = new glm_Mat4Base();
			this14._00 = 0;
			this14._01 = 0;
			this14._02 = 0;
			this14._03 = 0;
			this14._10 = 0;
			this14._11 = 0;
			this14._12 = 0;
			this14._13 = 0;
			this14._20 = 0;
			this14._21 = 0;
			this14._22 = 0;
			this14._23 = 0;
			this14._30 = 0;
			this14._31 = 0;
			this14._32 = 0;
			this14._33 = 0;
			var dest6 = this14;
			var x21 = rotation.x + rotation.x;
			var y2 = rotation.y + rotation.y;
			var z2 = rotation.z + rotation.z;
			var xx = rotation.x * x21;
			var xy = rotation.x * y2;
			var xz = rotation.x * z2;
			var yy = rotation.y * y2;
			var yz = rotation.y * z2;
			var zz = rotation.z * z2;
			var wx = rotation.w * x21;
			var wy = rotation.w * y2;
			var wz = rotation.w * z2;
			dest6._00 = 1 - (yy + zz);
			dest6._10 = xy - wz;
			dest6._20 = xz + wy;
			dest6._30 = 0;
			dest6._01 = xy + wz;
			dest6._11 = 1 - (xx + zz);
			dest6._21 = yz - wx;
			dest6._31 = 0;
			dest6._02 = xz - wy;
			dest6._12 = yz + wx;
			dest6._22 = 1 - (xx + yy);
			dest6._32 = 0;
			dest6._03 = 0;
			dest6._13 = 0;
			dest6._23 = 0;
			dest6._33 = 1;
			var a = dest6;
			var b = cameraTransform.get_matrix();
			var this15 = new glm_Mat4Base();
			this15._00 = 0;
			this15._01 = 0;
			this15._02 = 0;
			this15._03 = 0;
			this15._10 = 0;
			this15._11 = 0;
			this15._12 = 0;
			this15._13 = 0;
			this15._20 = 0;
			this15._21 = 0;
			this15._22 = 0;
			this15._23 = 0;
			this15._30 = 0;
			this15._31 = 0;
			this15._32 = 0;
			this15._33 = 0;
			var dest7 = this15;
			var _a;
			var _b;
			if(dest7 == a) {
				var this16 = new glm_Mat4Base();
				this16._00 = 0;
				this16._01 = 0;
				this16._02 = 0;
				this16._03 = 0;
				this16._10 = 0;
				this16._11 = 0;
				this16._12 = 0;
				this16._13 = 0;
				this16._20 = 0;
				this16._21 = 0;
				this16._22 = 0;
				this16._23 = 0;
				this16._30 = 0;
				this16._31 = 0;
				this16._32 = 0;
				this16._33 = 0;
				var dest8 = this16;
				dest8._00 = a._00;
				dest8._10 = a._10;
				dest8._20 = a._20;
				dest8._30 = a._30;
				dest8._01 = a._01;
				dest8._11 = a._11;
				dest8._21 = a._21;
				dest8._31 = a._31;
				dest8._02 = a._02;
				dest8._12 = a._12;
				dest8._22 = a._22;
				dest8._32 = a._32;
				dest8._03 = a._03;
				dest8._13 = a._13;
				dest8._23 = a._23;
				dest8._33 = a._33;
				_a = dest8;
				_b = b;
			} else if(dest7 == b) {
				_a = a;
				var this17 = new glm_Mat4Base();
				this17._00 = 0;
				this17._01 = 0;
				this17._02 = 0;
				this17._03 = 0;
				this17._10 = 0;
				this17._11 = 0;
				this17._12 = 0;
				this17._13 = 0;
				this17._20 = 0;
				this17._21 = 0;
				this17._22 = 0;
				this17._23 = 0;
				this17._30 = 0;
				this17._31 = 0;
				this17._32 = 0;
				this17._33 = 0;
				var dest9 = this17;
				dest9._00 = b._00;
				dest9._10 = b._10;
				dest9._20 = b._20;
				dest9._30 = b._30;
				dest9._01 = b._01;
				dest9._11 = b._11;
				dest9._21 = b._21;
				dest9._31 = b._31;
				dest9._02 = b._02;
				dest9._12 = b._12;
				dest9._22 = b._22;
				dest9._32 = b._32;
				dest9._03 = b._03;
				dest9._13 = b._13;
				dest9._23 = b._23;
				dest9._33 = b._33;
				_b = dest9;
			} else {
				_a = a;
				_b = b;
			}
			dest7._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest7._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest7._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest7._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest7._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest7._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest7._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest7._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest7._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest7._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest7._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest7._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest7._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest7._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest7._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest7._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			cameraTransform.set_matrix(dest7);
			var helioTransform = helio.getComponent(minko_component_Transform);
			var this18 = new glm_Vec3Base();
			this18.x = 0.0;
			this18.y = 1.0;
			this18.z = 0.0;
			var axis1 = this18;
			var angle1 = 0.001;
			var this19 = new glm_QuatBase();
			this19.x = 0;
			this19.y = 0;
			this19.z = 0;
			this19.w = 1;
			var dest10 = this19;
			angle1 *= 0.5;
			var s1 = Math.sin(angle1);
			dest10.x = s1 * axis1.x;
			dest10.y = s1 * axis1.y;
			dest10.z = s1 * axis1.z;
			dest10.w = Math.cos(angle1);
			var rotation1 = dest10;
			var this20 = new glm_Mat4Base();
			this20._00 = 0;
			this20._01 = 0;
			this20._02 = 0;
			this20._03 = 0;
			this20._10 = 0;
			this20._11 = 0;
			this20._12 = 0;
			this20._13 = 0;
			this20._20 = 0;
			this20._21 = 0;
			this20._22 = 0;
			this20._23 = 0;
			this20._30 = 0;
			this20._31 = 0;
			this20._32 = 0;
			this20._33 = 0;
			var dest11 = this20;
			var x22 = rotation1.x + rotation1.x;
			var y21 = rotation1.y + rotation1.y;
			var z21 = rotation1.z + rotation1.z;
			var xx1 = rotation1.x * x22;
			var xy1 = rotation1.x * y21;
			var xz1 = rotation1.x * z21;
			var yy1 = rotation1.y * y21;
			var yz1 = rotation1.y * z21;
			var zz1 = rotation1.z * z21;
			var wx1 = rotation1.w * x22;
			var wy1 = rotation1.w * y21;
			var wz1 = rotation1.w * z21;
			dest11._00 = 1 - (yy1 + zz1);
			dest11._10 = xy1 - wz1;
			dest11._20 = xz1 + wy1;
			dest11._30 = 0;
			dest11._01 = xy1 + wz1;
			dest11._11 = 1 - (xx1 + zz1);
			dest11._21 = yz1 - wx1;
			dest11._31 = 0;
			dest11._02 = xz1 - wy1;
			dest11._12 = yz1 + wx1;
			dest11._22 = 1 - (xx1 + yy1);
			dest11._32 = 0;
			dest11._03 = 0;
			dest11._13 = 0;
			dest11._23 = 0;
			dest11._33 = 1;
			var a1 = dest11;
			var b1 = helioTransform.get_matrix();
			var this21 = new glm_Mat4Base();
			this21._00 = 0;
			this21._01 = 0;
			this21._02 = 0;
			this21._03 = 0;
			this21._10 = 0;
			this21._11 = 0;
			this21._12 = 0;
			this21._13 = 0;
			this21._20 = 0;
			this21._21 = 0;
			this21._22 = 0;
			this21._23 = 0;
			this21._30 = 0;
			this21._31 = 0;
			this21._32 = 0;
			this21._33 = 0;
			var dest12 = this21;
			var _a1;
			var _b1;
			if(dest12 == a1) {
				var this22 = new glm_Mat4Base();
				this22._00 = 0;
				this22._01 = 0;
				this22._02 = 0;
				this22._03 = 0;
				this22._10 = 0;
				this22._11 = 0;
				this22._12 = 0;
				this22._13 = 0;
				this22._20 = 0;
				this22._21 = 0;
				this22._22 = 0;
				this22._23 = 0;
				this22._30 = 0;
				this22._31 = 0;
				this22._32 = 0;
				this22._33 = 0;
				var dest13 = this22;
				dest13._00 = a1._00;
				dest13._10 = a1._10;
				dest13._20 = a1._20;
				dest13._30 = a1._30;
				dest13._01 = a1._01;
				dest13._11 = a1._11;
				dest13._21 = a1._21;
				dest13._31 = a1._31;
				dest13._02 = a1._02;
				dest13._12 = a1._12;
				dest13._22 = a1._22;
				dest13._32 = a1._32;
				dest13._03 = a1._03;
				dest13._13 = a1._13;
				dest13._23 = a1._23;
				dest13._33 = a1._33;
				_a1 = dest13;
				_b1 = b1;
			} else if(dest12 == b1) {
				_a1 = a1;
				var this23 = new glm_Mat4Base();
				this23._00 = 0;
				this23._01 = 0;
				this23._02 = 0;
				this23._03 = 0;
				this23._10 = 0;
				this23._11 = 0;
				this23._12 = 0;
				this23._13 = 0;
				this23._20 = 0;
				this23._21 = 0;
				this23._22 = 0;
				this23._23 = 0;
				this23._30 = 0;
				this23._31 = 0;
				this23._32 = 0;
				this23._33 = 0;
				var dest14 = this23;
				dest14._00 = b1._00;
				dest14._10 = b1._10;
				dest14._20 = b1._20;
				dest14._30 = b1._30;
				dest14._01 = b1._01;
				dest14._11 = b1._11;
				dest14._21 = b1._21;
				dest14._31 = b1._31;
				dest14._02 = b1._02;
				dest14._12 = b1._12;
				dest14._22 = b1._22;
				dest14._32 = b1._32;
				dest14._03 = b1._03;
				dest14._13 = b1._13;
				dest14._23 = b1._23;
				dest14._33 = b1._33;
				_b1 = dest14;
			} else {
				_a1 = a1;
				_b1 = b1;
			}
			dest12._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
			dest12._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
			dest12._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
			dest12._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
			dest12._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
			dest12._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
			dest12._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
			dest12._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
			dest12._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
			dest12._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
			dest12._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
			dest12._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
			dest12._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
			dest12._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
			dest12._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
			dest12._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
			helioTransform.set_matrix(dest12);
			var sunTransform = sun.getComponent(minko_component_Transform);
			var perspectiveCamera1 = camera1.getComponent(minko_component_PerspectiveCamera);
			var x4 = sunTransform.get_modelToWorldMatrix()._30;
			var y = sunTransform.get_modelToWorldMatrix()._31;
			var z = sunTransform.get_modelToWorldMatrix()._32;
			var this24 = new glm_Vec3Base();
			this24.x = x4;
			this24.y = y;
			this24.z = z;
			var worldSpaceLightPosition = this24;
			var screenSpaceLightPosition = perspectiveCamera1.project(worldSpaceLightPosition);
			var x5 = screenSpaceLightPosition.x / canvas2.get_width();
			var y1 = screenSpaceLightPosition.y / canvas2.get_height();
			var this25 = new glm_Vec3Base();
			this25.x = x5;
			this25.y = y1;
			this25.z = 1.0;
			screenSpaceLightPosition = this25;
			var enterFrame1 = ppMaterial.get_data();
			var x6 = screenSpaceLightPosition.x;
			var y3 = screenSpaceLightPosition.y;
			var this26 = new glm_Vec2Base();
			this26.x = x6;
			this26.y = y3;
			enterFrame1.set("screenSpaceLightPosition",this26);
			fwdRenderer.render(context);
			sceneManager.nextFrame(time,deltaTime,ppTarget);
			ppRenderer.render(context);
		});
		assets.get_loader().load();
		canvas.run();
	}
}
example_ExampleLightScattering.__name__ = true;
Object.assign(example_ExampleLightScattering.prototype, {
	__class__: example_ExampleLightScattering
});
class example_ExamplePbr {
	constructor() {
		var canvas = minko_WebCanvas.create("Minko Example - PBR",800,600);
		var sceneManager = minko_component_SceneManager.create(canvas);
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var assets = sceneManager.get_assets();
		var context = canvas.get_context();
		context.set_errorsEnabled(true);
		var options = assets.get_loader().get_options();
		options.set_loadAsynchronously(false);
		options.set_resizeSmoothly(true);
		options.registerParser("jpg",function() {
			return new minko_file_JPEGParser();
		});
		var tmp = options.clone();
		tmp.set_fixMipMaps(true);
		assets.get_loader().queue(example_ExamplePbr.MAP_DIFFUSE).queue(example_ExamplePbr.MAP_IRRADIANCE).setQueue(example_ExamplePbr.MAP_RADIANCE,tmp).queue("texture/ground.jpg").queue("effect/Basic.effect").queue("effect/Skybox/Skybox.effect").queue("effect/PBR.effect");
		var this1 = new glm_Vec3Base();
		this1.x = 1.0;
		this1.y = 1.0;
		this1.z = 0.0;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 1;
		this3.z = 0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var mat4 = glm_GLM.lookAt(this1,this2,this3,this4);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(791621631));
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = mat4._00;
		var a01 = mat4._10;
		var a02 = mat4._20;
		var a03 = mat4._30;
		var a10 = mat4._01;
		var a11 = mat4._11;
		var a12 = mat4._21;
		var a13 = mat4._31;
		var a20 = mat4._02;
		var a21 = mat4._12;
		var a22 = mat4._22;
		var a23 = mat4._32;
		var a30 = mat4._03;
		var a31 = mat4._13;
		var a32 = mat4._23;
		var a33 = mat4._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest)).addComponent(minko_component_PerspectiveCamera.create(1.3333333333333333,0.785,0.1,50.0));
		root.addChild(camera1);
		var this6 = new glm_Vec3Base();
		this6.x = 1.0;
		this6.y = 10.0;
		this6.z = 0.0;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var this8 = new glm_Vec3Base();
		this8.x = 0;
		this8.y = 1;
		this8.z = 0;
		var this9 = new glm_Mat4Base();
		this9._00 = 0;
		this9._01 = 0;
		this9._02 = 0;
		this9._03 = 0;
		this9._10 = 0;
		this9._11 = 0;
		this9._12 = 0;
		this9._13 = 0;
		this9._20 = 0;
		this9._21 = 0;
		this9._22 = 0;
		this9._23 = 0;
		this9._30 = 0;
		this9._31 = 0;
		this9._32 = 0;
		this9._33 = 0;
		var mat4_2 = glm_GLM.lookAt(this6,this7,this8,this9);
		var light = minko_scene_Node.create("light").addComponent(minko_component_AmbientLight.create(1)).addComponent(minko_component_DirectionalLight.create(.5,.5));
		var this10 = new glm_Mat4Base();
		this10._00 = 0;
		this10._01 = 0;
		this10._02 = 0;
		this10._03 = 0;
		this10._10 = 0;
		this10._11 = 0;
		this10._12 = 0;
		this10._13 = 0;
		this10._20 = 0;
		this10._21 = 0;
		this10._22 = 0;
		this10._23 = 0;
		this10._30 = 0;
		this10._31 = 0;
		this10._32 = 0;
		this10._33 = 0;
		var dest1 = this10;
		var a001 = mat4_2._00;
		var a011 = mat4_2._10;
		var a021 = mat4_2._20;
		var a031 = mat4_2._30;
		var a101 = mat4_2._01;
		var a111 = mat4_2._11;
		var a121 = mat4_2._21;
		var a131 = mat4_2._31;
		var a201 = mat4_2._02;
		var a211 = mat4_2._12;
		var a221 = mat4_2._22;
		var a231 = mat4_2._32;
		var a301 = mat4_2._03;
		var a311 = mat4_2._13;
		var a321 = mat4_2._23;
		var a331 = mat4_2._33;
		var t001 = a121 * a231 * a311 - a131 * a221 * a311 + a131 * a211 * a321 - a111 * a231 * a321 - a121 * a211 * a331 + a111 * a221 * a331;
		var t011 = a031 * a221 * a311 - a021 * a231 * a311 - a031 * a211 * a321 + a011 * a231 * a321 + a021 * a211 * a331 - a011 * a221 * a331;
		var t021 = a021 * a131 * a311 - a031 * a121 * a311 + a031 * a111 * a321 - a011 * a131 * a321 - a021 * a111 * a331 + a011 * a121 * a331;
		var t031 = a031 * a121 * a211 - a021 * a131 * a211 - a031 * a111 * a221 + a011 * a131 * a221 + a021 * a111 * a231 - a011 * a121 * a231;
		var det1 = a001 * t001 + a101 * t011 + a201 * t021 + a301 * t031;
		if(Math.abs(det1) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det1 + ") is too small!");
		}
		var idet1 = 1 / det1;
		dest1._00 = t001 * idet1;
		dest1._01 = (a131 * a221 * a301 - a121 * a231 * a301 - a131 * a201 * a321 + a101 * a231 * a321 + a121 * a201 * a331 - a101 * a221 * a331) * idet1;
		dest1._02 = (a111 * a231 * a301 - a131 * a211 * a301 + a131 * a201 * a311 - a101 * a231 * a311 - a111 * a201 * a331 + a101 * a211 * a331) * idet1;
		dest1._03 = (a121 * a211 * a301 - a111 * a221 * a301 - a121 * a201 * a311 + a101 * a221 * a311 + a111 * a201 * a321 - a101 * a211 * a321) * idet1;
		dest1._10 = t011 * idet1;
		dest1._11 = (a021 * a231 * a301 - a031 * a221 * a301 + a031 * a201 * a321 - a001 * a231 * a321 - a021 * a201 * a331 + a001 * a221 * a331) * idet1;
		dest1._12 = (a031 * a211 * a301 - a011 * a231 * a301 - a031 * a201 * a311 + a001 * a231 * a311 + a011 * a201 * a331 - a001 * a211 * a331) * idet1;
		dest1._13 = (a011 * a221 * a301 - a021 * a211 * a301 + a021 * a201 * a311 - a001 * a221 * a311 - a011 * a201 * a321 + a001 * a211 * a321) * idet1;
		dest1._20 = t021 * idet1;
		dest1._21 = (a031 * a121 * a301 - a021 * a131 * a301 - a031 * a101 * a321 + a001 * a131 * a321 + a021 * a101 * a331 - a001 * a121 * a331) * idet1;
		dest1._22 = (a011 * a131 * a301 - a031 * a111 * a301 + a031 * a101 * a311 - a001 * a131 * a311 - a011 * a101 * a331 + a001 * a111 * a331) * idet1;
		dest1._23 = (a021 * a111 * a301 - a011 * a121 * a301 - a021 * a101 * a311 + a001 * a121 * a311 + a011 * a101 * a321 - a001 * a111 * a321) * idet1;
		dest1._30 = t031 * idet1;
		dest1._31 = (a021 * a131 * a201 - a031 * a121 * a201 + a031 * a101 * a221 - a001 * a131 * a221 - a021 * a101 * a231 + a001 * a121 * a231) * idet1;
		dest1._32 = (a031 * a111 * a201 - a011 * a131 * a201 - a031 * a101 * a211 + a001 * a131 * a211 + a011 * a101 * a231 - a001 * a111 * a231) * idet1;
		dest1._33 = (a011 * a121 * a201 - a021 * a111 * a201 + a021 * a101 * a211 - a001 * a121 * a211 - a011 * a101 * a221 + a001 * a111 * a221) * idet1;
		var light1 = light.addComponent(minko_component_Transform.createbyMatrix4(dest1));
		var directionalLight = light1.getComponent(minko_component_DirectionalLight);
		root.addChild(light1);
		var _ = assets.get_loader().get_complete().connect(function(loader) {
			var skyboxMaterial = minko_material_Material.create().setbyKeyObject({ "diffuseLatLongMap" : assets.texture(example_ExamplePbr.MAP_DIFFUSE), "gammaCorrection" : 2.2});
			var skybox = minko_scene_Node.create("skybox").addComponent(minko_component_Surface.create(minko_geometry_CubeGeometry.create(context),skyboxMaterial,assets.effect("effect/Skybox/Skybox.effect")));
			root.addChild(skybox);
			var groundMaterial = minko_material_Material.create();
			var this11 = new glm_Vec4Base();
			this11.x = 0.0;
			this11.y = 0.0;
			this11.z = 0.0;
			this11.w = 1.0;
			var _1 = assets.texture("texture/ground.jpg");
			var this12 = new glm_Vec4Base();
			this12.x = .8;
			this12.y = .8;
			this12.z = .8;
			this12.w = 1.0;
			groundMaterial.setbyKeyObject({ "roughness" : 1.0, "metalness" : 0.0, "specularColor" : this11, "albedoMap" : _1, "albedoColor" : this12, "irradianceMap" : assets.texture(example_ExamplePbr.MAP_IRRADIANCE), "radianceMap" : assets.texture(example_ExamplePbr.MAP_RADIANCE), "gammaCorrection" : 2.2});
			groundMaterial.set("radianceMap.maxAvailableLod",11.0);
			var ground = minko_scene_Node.create("ground");
			ground.set_layout(1 | 256);
			ground.addComponent(minko_component_Surface.create(minko_geometry_QuadGeometry.create(sceneManager.get_canvas().get_context()),groundMaterial,assets.effect("effect/PBR.effect")));
			var this13 = new glm_Vec3Base();
			this13.x = 0.0;
			this13.y = -0.5;
			this13.z = 0.0;
			var translation = this13;
			var this14 = new glm_Mat4Base();
			this14._00 = 0;
			this14._01 = 0;
			this14._02 = 0;
			this14._03 = 0;
			this14._10 = 0;
			this14._11 = 0;
			this14._12 = 0;
			this14._13 = 0;
			this14._20 = 0;
			this14._21 = 0;
			this14._22 = 0;
			this14._23 = 0;
			this14._30 = 0;
			this14._31 = 0;
			this14._32 = 0;
			this14._33 = 0;
			var dest2 = this14;
			dest2._00 = 1;
			dest2._10 = 0;
			dest2._20 = 0;
			dest2._30 = 0;
			dest2._01 = 0;
			dest2._11 = 1;
			dest2._21 = 0;
			dest2._31 = 0;
			dest2._02 = 0;
			dest2._12 = 0;
			dest2._22 = 1;
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			dest2._30 = translation.x;
			dest2._31 = translation.y;
			dest2._32 = translation.z;
			var a = dest2;
			var this15 = new glm_Vec3Base();
			this15.x = 1.0;
			this15.y = 0.0;
			this15.z = 0.0;
			var axis = this15;
			var angle = -Math.PI / 2;
			var this16 = new glm_QuatBase();
			this16.x = 0;
			this16.y = 0;
			this16.z = 0;
			this16.w = 1;
			var dest3 = this16;
			angle *= 0.5;
			var s = Math.sin(angle);
			dest3.x = s * axis.x;
			dest3.y = s * axis.y;
			dest3.z = s * axis.z;
			dest3.w = Math.cos(angle);
			var rotation = dest3;
			var this17 = new glm_Mat4Base();
			this17._00 = 0;
			this17._01 = 0;
			this17._02 = 0;
			this17._03 = 0;
			this17._10 = 0;
			this17._11 = 0;
			this17._12 = 0;
			this17._13 = 0;
			this17._20 = 0;
			this17._21 = 0;
			this17._22 = 0;
			this17._23 = 0;
			this17._30 = 0;
			this17._31 = 0;
			this17._32 = 0;
			this17._33 = 0;
			var dest4 = this17;
			var x2 = rotation.x + rotation.x;
			var y2 = rotation.y + rotation.y;
			var z2 = rotation.z + rotation.z;
			var xx = rotation.x * x2;
			var xy = rotation.x * y2;
			var xz = rotation.x * z2;
			var yy = rotation.y * y2;
			var yz = rotation.y * z2;
			var zz = rotation.z * z2;
			var wx = rotation.w * x2;
			var wy = rotation.w * y2;
			var wz = rotation.w * z2;
			dest4._00 = 1 - (yy + zz);
			dest4._10 = xy - wz;
			dest4._20 = xz + wy;
			dest4._30 = 0;
			dest4._01 = xy + wz;
			dest4._11 = 1 - (xx + zz);
			dest4._21 = yz - wx;
			dest4._31 = 0;
			dest4._02 = xz - wy;
			dest4._12 = yz + wx;
			dest4._22 = 1 - (xx + yy);
			dest4._32 = 0;
			dest4._03 = 0;
			dest4._13 = 0;
			dest4._23 = 0;
			dest4._33 = 1;
			var b = dest4;
			var this18 = new glm_Mat4Base();
			this18._00 = 0;
			this18._01 = 0;
			this18._02 = 0;
			this18._03 = 0;
			this18._10 = 0;
			this18._11 = 0;
			this18._12 = 0;
			this18._13 = 0;
			this18._20 = 0;
			this18._21 = 0;
			this18._22 = 0;
			this18._23 = 0;
			this18._30 = 0;
			this18._31 = 0;
			this18._32 = 0;
			this18._33 = 0;
			var dest5 = this18;
			var _a;
			var _b;
			if(dest5 == a) {
				var this19 = new glm_Mat4Base();
				this19._00 = 0;
				this19._01 = 0;
				this19._02 = 0;
				this19._03 = 0;
				this19._10 = 0;
				this19._11 = 0;
				this19._12 = 0;
				this19._13 = 0;
				this19._20 = 0;
				this19._21 = 0;
				this19._22 = 0;
				this19._23 = 0;
				this19._30 = 0;
				this19._31 = 0;
				this19._32 = 0;
				this19._33 = 0;
				var dest6 = this19;
				dest6._00 = a._00;
				dest6._10 = a._10;
				dest6._20 = a._20;
				dest6._30 = a._30;
				dest6._01 = a._01;
				dest6._11 = a._11;
				dest6._21 = a._21;
				dest6._31 = a._31;
				dest6._02 = a._02;
				dest6._12 = a._12;
				dest6._22 = a._22;
				dest6._32 = a._32;
				dest6._03 = a._03;
				dest6._13 = a._13;
				dest6._23 = a._23;
				dest6._33 = a._33;
				_a = dest6;
				_b = b;
			} else if(dest5 == b) {
				_a = a;
				var this20 = new glm_Mat4Base();
				this20._00 = 0;
				this20._01 = 0;
				this20._02 = 0;
				this20._03 = 0;
				this20._10 = 0;
				this20._11 = 0;
				this20._12 = 0;
				this20._13 = 0;
				this20._20 = 0;
				this20._21 = 0;
				this20._22 = 0;
				this20._23 = 0;
				this20._30 = 0;
				this20._31 = 0;
				this20._32 = 0;
				this20._33 = 0;
				var dest7 = this20;
				dest7._00 = b._00;
				dest7._10 = b._10;
				dest7._20 = b._20;
				dest7._30 = b._30;
				dest7._01 = b._01;
				dest7._11 = b._11;
				dest7._21 = b._21;
				dest7._31 = b._31;
				dest7._02 = b._02;
				dest7._12 = b._12;
				dest7._22 = b._22;
				dest7._32 = b._32;
				dest7._03 = b._03;
				dest7._13 = b._13;
				dest7._23 = b._23;
				dest7._33 = b._33;
				_b = dest7;
			} else {
				_a = a;
				_b = b;
			}
			dest5._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest5._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest5._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest5._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest5._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest5._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest5._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest5._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest5._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest5._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest5._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest5._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest5._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest5._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest5._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest5._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			var a1 = dest5;
			var this21 = new glm_Vec3Base();
			this21.x = 20.0;
			this21.y = 20.0;
			this21.z = 20.0;
			var amount = this21;
			var this22 = new glm_Mat4Base();
			this22._00 = 0;
			this22._01 = 0;
			this22._02 = 0;
			this22._03 = 0;
			this22._10 = 0;
			this22._11 = 0;
			this22._12 = 0;
			this22._13 = 0;
			this22._20 = 0;
			this22._21 = 0;
			this22._22 = 0;
			this22._23 = 0;
			this22._30 = 0;
			this22._31 = 0;
			this22._32 = 0;
			this22._33 = 0;
			var dest8 = this22;
			dest8._00 = 1;
			dest8._10 = 0;
			dest8._20 = 0;
			dest8._30 = 0;
			dest8._01 = 0;
			dest8._11 = 1;
			dest8._21 = 0;
			dest8._31 = 0;
			dest8._02 = 0;
			dest8._12 = 0;
			dest8._22 = 1;
			dest8._32 = 0;
			dest8._03 = 0;
			dest8._13 = 0;
			dest8._23 = 0;
			dest8._33 = 1;
			dest8._00 = amount.x;
			dest8._11 = amount.y;
			dest8._22 = amount.z;
			var b1 = dest8;
			var this23 = new glm_Mat4Base();
			this23._00 = 0;
			this23._01 = 0;
			this23._02 = 0;
			this23._03 = 0;
			this23._10 = 0;
			this23._11 = 0;
			this23._12 = 0;
			this23._13 = 0;
			this23._20 = 0;
			this23._21 = 0;
			this23._22 = 0;
			this23._23 = 0;
			this23._30 = 0;
			this23._31 = 0;
			this23._32 = 0;
			this23._33 = 0;
			var dest9 = this23;
			var _a1;
			var _b1;
			if(dest9 == a1) {
				var this24 = new glm_Mat4Base();
				this24._00 = 0;
				this24._01 = 0;
				this24._02 = 0;
				this24._03 = 0;
				this24._10 = 0;
				this24._11 = 0;
				this24._12 = 0;
				this24._13 = 0;
				this24._20 = 0;
				this24._21 = 0;
				this24._22 = 0;
				this24._23 = 0;
				this24._30 = 0;
				this24._31 = 0;
				this24._32 = 0;
				this24._33 = 0;
				var dest10 = this24;
				dest10._00 = a1._00;
				dest10._10 = a1._10;
				dest10._20 = a1._20;
				dest10._30 = a1._30;
				dest10._01 = a1._01;
				dest10._11 = a1._11;
				dest10._21 = a1._21;
				dest10._31 = a1._31;
				dest10._02 = a1._02;
				dest10._12 = a1._12;
				dest10._22 = a1._22;
				dest10._32 = a1._32;
				dest10._03 = a1._03;
				dest10._13 = a1._13;
				dest10._23 = a1._23;
				dest10._33 = a1._33;
				_a1 = dest10;
				_b1 = b1;
			} else if(dest9 == b1) {
				_a1 = a1;
				var this25 = new glm_Mat4Base();
				this25._00 = 0;
				this25._01 = 0;
				this25._02 = 0;
				this25._03 = 0;
				this25._10 = 0;
				this25._11 = 0;
				this25._12 = 0;
				this25._13 = 0;
				this25._20 = 0;
				this25._21 = 0;
				this25._22 = 0;
				this25._23 = 0;
				this25._30 = 0;
				this25._31 = 0;
				this25._32 = 0;
				this25._33 = 0;
				var dest11 = this25;
				dest11._00 = b1._00;
				dest11._10 = b1._10;
				dest11._20 = b1._20;
				dest11._30 = b1._30;
				dest11._01 = b1._01;
				dest11._11 = b1._11;
				dest11._21 = b1._21;
				dest11._31 = b1._31;
				dest11._02 = b1._02;
				dest11._12 = b1._12;
				dest11._22 = b1._22;
				dest11._32 = b1._32;
				dest11._03 = b1._03;
				dest11._13 = b1._13;
				dest11._23 = b1._23;
				dest11._33 = b1._33;
				_b1 = dest11;
			} else {
				_a1 = a1;
				_b1 = b1;
			}
			dest9._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
			dest9._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
			dest9._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
			dest9._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
			dest9._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
			dest9._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
			dest9._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
			dest9._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
			dest9._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
			dest9._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
			dest9._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
			dest9._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
			dest9._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
			dest9._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
			dest9._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
			dest9._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
			ground.addComponent(minko_component_Transform.createbyMatrix4(dest9));
			root.addChild(ground);
			var sphereGeom = minko_geometry_SphereGeometry.create(sceneManager.get_canvas().get_context(),40,40);
			sphereGeom.computeTangentSpace(false);
			var meshes = minko_scene_Node.create("meshes");
			var numSpheres = 10;
			var _g = 0;
			var _g1 = numSpheres;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = 0;
				var _g11 = numSpheres;
				while(_g2 < _g11) {
					var j = _g2++;
					var mesh = minko_scene_Node.create("mesh");
					mesh.set_layout(1 | 1024);
					var mat = minko_material_Material.create();
					var this26 = new glm_Vec4Base();
					this26.x = 1.0;
					this26.y = 1.0;
					this26.z = 1.0;
					this26.w = 1.0;
					var this27 = new glm_Vec4Base();
					this27.x = 1.0;
					this27.y = 1.0;
					this27.z = 1.0;
					this27.w = 1.0;
					var mat1 = mat.setbyKeyObject({ "gammaCorrection" : 2.2, "albedoColor" : this26, "specularColor" : this27, "metalness" : j / (numSpheres - 1), "roughness" : i / (numSpheres - 1), "irradianceMap" : assets.texture(example_ExamplePbr.MAP_IRRADIANCE), "radianceMap.maxAvailableLod" : 11.0, "radianceMap" : assets.texture(example_ExamplePbr.MAP_RADIANCE)});
					mesh.addComponent(minko_component_Surface.create(sphereGeom,mat1,assets.effect("effect/PBR.effect")));
					var this28 = new glm_Vec3Base();
					this28.x = (-(numSpheres - 1) * .5 + i) * 1.25;
					this28.y = 0.0;
					this28.z = (-(numSpheres - 1) * .5 + j) * 1.25;
					var translation1 = this28;
					var this29 = new glm_Mat4Base();
					this29._00 = 0;
					this29._01 = 0;
					this29._02 = 0;
					this29._03 = 0;
					this29._10 = 0;
					this29._11 = 0;
					this29._12 = 0;
					this29._13 = 0;
					this29._20 = 0;
					this29._21 = 0;
					this29._22 = 0;
					this29._23 = 0;
					this29._30 = 0;
					this29._31 = 0;
					this29._32 = 0;
					this29._33 = 0;
					var dest12 = this29;
					dest12._00 = 1;
					dest12._10 = 0;
					dest12._20 = 0;
					dest12._30 = 0;
					dest12._01 = 0;
					dest12._11 = 1;
					dest12._21 = 0;
					dest12._31 = 0;
					dest12._02 = 0;
					dest12._12 = 0;
					dest12._22 = 1;
					dest12._32 = 0;
					dest12._03 = 0;
					dest12._13 = 0;
					dest12._23 = 0;
					dest12._33 = 1;
					dest12._30 = translation1.x;
					dest12._31 = translation1.y;
					dest12._32 = translation1.z;
					var mat41 = dest12;
					mesh.addComponent(minko_component_Transform.createbyMatrix4(mat41));
					meshes.addChild(mesh);
				}
			}
			root.addChild(meshes);
			var yaw = 0.0;
			var pitch = Math.PI * .5;
			var minPitch = 0.1;
			var maxPitch = Math.PI - .1;
			var this30 = new glm_Vec3Base();
			this30.x = 0.0;
			this30.y = 0.0;
			this30.z = 0.0;
			var lookAt = this30;
			var distance = 10.0;
			var mouseWheel = canvas.get_mouse().get_wheel().connect(function(m,h,v) {
				distance += v / 10.0;
			});
			var mouseMove = null;
			var cameraRotationXSpeed = 0.000;
			var cameraRotationYSpeed = 0.000;
			var mouseDown = canvas.get_mouse().get_leftButtonDown().connect(function(m1) {
				mouseMove = canvas.get_mouse().get_move().connect(function(UnnamedParameter1,dx,dy) {
					cameraRotationYSpeed = dx * .01;
					cameraRotationXSpeed = dy * -.01;
				});
			});
			var mouseUp = canvas.get_mouse().get_leftButtonUp().connect(function(m2) {
				mouseMove.disconnect();
				mouseMove = null;
			});
			var enterFrame = canvas.get_enterFrame().connect(function(canvas1,time,deltaTime) {
				yaw += cameraRotationYSpeed;
				cameraRotationYSpeed *= 0.9;
				pitch += cameraRotationXSpeed;
				cameraRotationXSpeed *= 0.9;
				if(pitch > maxPitch) {
					pitch = maxPitch;
				} else if(pitch < minPitch) {
					pitch = minPitch;
				}
				var x = lookAt.x + distance * Math.cos(yaw) * Math.sin(pitch);
				var y = lookAt.y + distance * Math.cos(pitch);
				var z = lookAt.z + distance * Math.sin(yaw) * Math.sin(pitch);
				var this31 = new glm_Vec3Base();
				this31.x = x;
				this31.y = y;
				this31.z = z;
				var vec3 = this31;
				var transform = camera1.getComponent(minko_component_Transform);
				var this32 = new glm_Vec3Base();
				this32.x = 0.0;
				this32.y = 1.0;
				this32.z = 0.0;
				var this33 = new glm_Mat4Base();
				this33._00 = 0;
				this33._01 = 0;
				this33._02 = 0;
				this33._03 = 0;
				this33._10 = 0;
				this33._11 = 0;
				this33._12 = 0;
				this33._13 = 0;
				this33._20 = 0;
				this33._21 = 0;
				this33._22 = 0;
				this33._23 = 0;
				this33._30 = 0;
				this33._31 = 0;
				this33._32 = 0;
				this33._33 = 0;
				var src = glm_GLM.lookAt(vec3,lookAt,this32,this33);
				var this34 = new glm_Mat4Base();
				this34._00 = 0;
				this34._01 = 0;
				this34._02 = 0;
				this34._03 = 0;
				this34._10 = 0;
				this34._11 = 0;
				this34._12 = 0;
				this34._13 = 0;
				this34._20 = 0;
				this34._21 = 0;
				this34._22 = 0;
				this34._23 = 0;
				this34._30 = 0;
				this34._31 = 0;
				this34._32 = 0;
				this34._33 = 0;
				var dest13 = this34;
				var a002 = src._00;
				var a012 = src._10;
				var a022 = src._20;
				var a032 = src._30;
				var a102 = src._01;
				var a112 = src._11;
				var a122 = src._21;
				var a132 = src._31;
				var a202 = src._02;
				var a212 = src._12;
				var a222 = src._22;
				var a232 = src._32;
				var a302 = src._03;
				var a312 = src._13;
				var a322 = src._23;
				var a332 = src._33;
				var t002 = a122 * a232 * a312 - a132 * a222 * a312 + a132 * a212 * a322 - a112 * a232 * a322 - a122 * a212 * a332 + a112 * a222 * a332;
				var t012 = a032 * a222 * a312 - a022 * a232 * a312 - a032 * a212 * a322 + a012 * a232 * a322 + a022 * a212 * a332 - a012 * a222 * a332;
				var t022 = a022 * a132 * a312 - a032 * a122 * a312 + a032 * a112 * a322 - a012 * a132 * a322 - a022 * a112 * a332 + a012 * a122 * a332;
				var t032 = a032 * a122 * a212 - a022 * a132 * a212 - a032 * a112 * a222 + a012 * a132 * a222 + a022 * a112 * a232 - a012 * a122 * a232;
				var det2 = a002 * t002 + a102 * t012 + a202 * t022 + a302 * t032;
				if(Math.abs(det2) <= glm_GLM.EPSILON) {
					throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det2 + ") is too small!");
				}
				var idet2 = 1 / det2;
				dest13._00 = t002 * idet2;
				dest13._01 = (a132 * a222 * a302 - a122 * a232 * a302 - a132 * a202 * a322 + a102 * a232 * a322 + a122 * a202 * a332 - a102 * a222 * a332) * idet2;
				dest13._02 = (a112 * a232 * a302 - a132 * a212 * a302 + a132 * a202 * a312 - a102 * a232 * a312 - a112 * a202 * a332 + a102 * a212 * a332) * idet2;
				dest13._03 = (a122 * a212 * a302 - a112 * a222 * a302 - a122 * a202 * a312 + a102 * a222 * a312 + a112 * a202 * a322 - a102 * a212 * a322) * idet2;
				dest13._10 = t012 * idet2;
				dest13._11 = (a022 * a232 * a302 - a032 * a222 * a302 + a032 * a202 * a322 - a002 * a232 * a322 - a022 * a202 * a332 + a002 * a222 * a332) * idet2;
				dest13._12 = (a032 * a212 * a302 - a012 * a232 * a302 - a032 * a202 * a312 + a002 * a232 * a312 + a012 * a202 * a332 - a002 * a212 * a332) * idet2;
				dest13._13 = (a012 * a222 * a302 - a022 * a212 * a302 + a022 * a202 * a312 - a002 * a222 * a312 - a012 * a202 * a322 + a002 * a212 * a322) * idet2;
				dest13._20 = t022 * idet2;
				dest13._21 = (a032 * a122 * a302 - a022 * a132 * a302 - a032 * a102 * a322 + a002 * a132 * a322 + a022 * a102 * a332 - a002 * a122 * a332) * idet2;
				dest13._22 = (a012 * a132 * a302 - a032 * a112 * a302 + a032 * a102 * a312 - a002 * a132 * a312 - a012 * a102 * a332 + a002 * a112 * a332) * idet2;
				dest13._23 = (a022 * a112 * a302 - a012 * a122 * a302 - a022 * a102 * a312 + a002 * a122 * a312 + a012 * a102 * a322 - a002 * a112 * a322) * idet2;
				dest13._30 = t032 * idet2;
				dest13._31 = (a022 * a132 * a202 - a032 * a122 * a202 + a032 * a102 * a222 - a002 * a132 * a222 - a022 * a102 * a232 + a002 * a122 * a232) * idet2;
				dest13._32 = (a032 * a112 * a202 - a012 * a132 * a202 - a032 * a102 * a212 + a002 * a132 * a212 + a012 * a102 * a232 - a002 * a112 * a232) * idet2;
				dest13._33 = (a012 * a122 * a202 - a022 * a112 * a202 + a022 * a102 * a212 - a002 * a122 * a212 - a012 * a102 * a222 + a002 * a112 * a222) * idet2;
				transform.set_matrix(dest13);
				var directionalLight1 = light1.getComponent(minko_component_DirectionalLight);
				var perspectiveCamera = camera1.getComponent(minko_component_PerspectiveCamera);
				directionalLight1.computeShadowProjection(perspectiveCamera.get_viewMatrix(),perspectiveCamera.get_projectionMatrix());
				sceneManager.nextFrame(time,deltaTime);
			});
			canvas.run();
		});
		var resized = canvas.get_resized().connect(function(canvas2,w,h1) {
			var perspectiveCamera1 = camera1.getComponent(minko_component_PerspectiveCamera);
			perspectiveCamera1.set_aspectRatio(w / h1);
		});
		sceneManager.get_assets().get_loader().load();
	}
}
example_ExamplePbr.__name__ = true;
Object.assign(example_ExamplePbr.prototype, {
	__class__: example_ExamplePbr
});
class example_ExamplePicking {
	constructor() {
		this.init();
	}
	init() {
		var canvas = minko_WebCanvas.create("Minko Example - Picking",800,600);
		var _gthis = this;
		var sceneManager = minko_component_SceneManager.create(canvas);
		sceneManager.get_assets().get_loader().get_options().set_resizeSmoothly(true);
		sceneManager.get_assets().get_loader().get_options().set_generateMipmaps(true);
		sceneManager.get_assets().get_loader().get_options().registerParser("png",function() {
			return new minko_file_PNGParser();
		});
		sceneManager.get_assets().get_loader().queue("effect/Basic.effect").queue("effect/Picking.effect");
		var redMaterial = minko_material_BasicMaterial.create();
		redMaterial.diffuseColorRGBA(-16776961);
		var greenMaterial = minko_material_BasicMaterial.create();
		greenMaterial.diffuseColorRGBA(-251723521);
		var blueMaterial = minko_material_BasicMaterial.create();
		blueMaterial.diffuseColorRGBA(65535);
		sceneManager.get_assets().setMaterial("redMaterial",redMaterial).setMaterial("greenMaterial",greenMaterial).setMaterial("blueMaterial",blueMaterial).setGeometry("cube",minko_geometry_CubeGeometry.create(sceneManager.get_assets().get_context())).setGeometry("sphere",minko_geometry_SphereGeometry.create(sceneManager.get_assets().get_context())).setGeometry("quad",minko_geometry_QuadGeometry.create(sceneManager.get_assets().get_context()));
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera");
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 4.0;
		var this2 = new glm_Vec3Base();
		this2.x = 0.0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest)).addComponent(minko_component_PerspectiveCamera.create(canvas.get_aspectRatio()));
		root.addChild(camera1);
		var _ = sceneManager.get_assets().get_loader().get_complete().connect(function(loader) {
			var cube = minko_scene_Node.createbyLayout("cubeNode",1 | 64).addComponent(minko_component_Surface.create(sceneManager.get_assets().geometry("cube"),sceneManager.get_assets().material("redMaterial"),sceneManager.get_assets().effect("effect/Basic.effect")));
			var this6 = new glm_Vec3Base();
			this6.x = -1.4;
			this6.y = 0.0;
			this6.z = 0.0;
			var translation = this6;
			var this7 = new glm_Mat4Base();
			this7._00 = 0;
			this7._01 = 0;
			this7._02 = 0;
			this7._03 = 0;
			this7._10 = 0;
			this7._11 = 0;
			this7._12 = 0;
			this7._13 = 0;
			this7._20 = 0;
			this7._21 = 0;
			this7._22 = 0;
			this7._23 = 0;
			this7._30 = 0;
			this7._31 = 0;
			this7._32 = 0;
			this7._33 = 0;
			var dest1 = this7;
			dest1._00 = 1;
			dest1._10 = 0;
			dest1._20 = 0;
			dest1._30 = 0;
			dest1._01 = 0;
			dest1._11 = 1;
			dest1._21 = 0;
			dest1._31 = 0;
			dest1._02 = 0;
			dest1._12 = 0;
			dest1._22 = 1;
			dest1._32 = 0;
			dest1._03 = 0;
			dest1._13 = 0;
			dest1._23 = 0;
			dest1._33 = 1;
			dest1._30 = translation.x;
			dest1._31 = translation.y;
			dest1._32 = translation.z;
			var cube1 = cube.addComponent(minko_component_Transform.createbyMatrix4(dest1));
			var sphere = minko_scene_Node.createbyLayout("sphereNode",1 | 64).addComponent(minko_component_Surface.create(sceneManager.get_assets().geometry("sphere"),sceneManager.get_assets().material("greenMaterial"),sceneManager.get_assets().effect("effect/Basic.effect"))).addComponent(minko_component_Transform.create());
			var quad = minko_scene_Node.createbyLayout("quadNode",1 | 64).addComponent(minko_component_Surface.create(sceneManager.get_assets().geometry("quad"),sceneManager.get_assets().material("blueMaterial"),sceneManager.get_assets().effect("effect/Basic.effect")));
			var this8 = new glm_Vec3Base();
			this8.x = 1.4;
			this8.y = 0.0;
			this8.z = 0.0;
			var translation1 = this8;
			var this9 = new glm_Mat4Base();
			this9._00 = 0;
			this9._01 = 0;
			this9._02 = 0;
			this9._03 = 0;
			this9._10 = 0;
			this9._11 = 0;
			this9._12 = 0;
			this9._13 = 0;
			this9._20 = 0;
			this9._21 = 0;
			this9._22 = 0;
			this9._23 = 0;
			this9._30 = 0;
			this9._31 = 0;
			this9._32 = 0;
			this9._33 = 0;
			var dest2 = this9;
			dest2._00 = 1;
			dest2._10 = 0;
			dest2._20 = 0;
			dest2._30 = 0;
			dest2._01 = 0;
			dest2._11 = 1;
			dest2._21 = 0;
			dest2._31 = 0;
			dest2._02 = 0;
			dest2._12 = 0;
			dest2._22 = 1;
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			dest2._30 = translation1.x;
			dest2._31 = translation1.y;
			dest2._32 = translation1.z;
			var quad1 = quad.addComponent(minko_component_Transform.createbyMatrix4(dest2));
			root.addChild(cube1).addChild(sphere).addChild(quad1);
			var _1 = minko_component_Picking.create(camera1,false,true);
			root.addComponent(_1);
			var picking = root.getComponent(minko_component_Picking);
			_gthis.pickingMouseClick = picking.get_mouseClick().connect(function(node) {
				haxe_Log.trace("Click: ",{ fileName : "example/ExamplePicking.hx", lineNumber : 88, className : "example.ExamplePicking", methodName : "init"});
				haxe_Log.trace(node.get_name(),{ fileName : "example/ExamplePicking.hx", lineNumber : 89, className : "example.ExamplePicking", methodName : "init"});
				haxe_Log.trace("\n",{ fileName : "example/ExamplePicking.hx", lineNumber : 90, className : "example.ExamplePicking", methodName : "init"});
			});
			_gthis.pickingMouseRightClick = picking.get_mouseRightClick().connect(function(node1) {
				haxe_Log.trace("Right Click: ",{ fileName : "example/ExamplePicking.hx", lineNumber : 94, className : "example.ExamplePicking", methodName : "init"});
				haxe_Log.trace(node1.get_name(),{ fileName : "example/ExamplePicking.hx", lineNumber : 95, className : "example.ExamplePicking", methodName : "init"});
				haxe_Log.trace("\n",{ fileName : "example/ExamplePicking.hx", lineNumber : 96, className : "example.ExamplePicking", methodName : "init"});
			});
			_gthis.pickingMouseOver = picking.get_mouseOver().connect(function(node2) {
				haxe_Log.trace("Mouse In: ",{ fileName : "example/ExamplePicking.hx", lineNumber : 100, className : "example.ExamplePicking", methodName : "init"});
				haxe_Log.trace(node2.get_name(),{ fileName : "example/ExamplePicking.hx", lineNumber : 101, className : "example.ExamplePicking", methodName : "init"});
				haxe_Log.trace("\n",{ fileName : "example/ExamplePicking.hx", lineNumber : 102, className : "example.ExamplePicking", methodName : "init"});
			});
			_gthis.pickingMouseOut = picking.get_mouseOut().connect(function(node3) {
				haxe_Log.trace("Mouse Out: ",{ fileName : "example/ExamplePicking.hx", lineNumber : 106, className : "example.ExamplePicking", methodName : "init"});
				haxe_Log.trace(node3.get_name(),{ fileName : "example/ExamplePicking.hx", lineNumber : 107, className : "example.ExamplePicking", methodName : "init"});
				haxe_Log.trace("\n",{ fileName : "example/ExamplePicking.hx", lineNumber : 108, className : "example.ExamplePicking", methodName : "init"});
			});
		});
		var tmp = minko_component_Renderer.create(2139062271);
		camera1.addComponent(tmp);
		var resized = canvas.get_resized().connect(function(canvas1,w,h) {
			var perspectiveCamera = camera1.getComponent(minko_component_PerspectiveCamera);
			perspectiveCamera.set_aspectRatio(w / h);
		});
		var enterFrame = canvas.get_enterFrame().connect(function(canvas2,time,deltaTime) {
			sceneManager.nextFrame(time,deltaTime);
		});
		sceneManager.get_assets().get_loader().load();
		canvas.run();
	}
}
example_ExamplePicking.__name__ = true;
Object.assign(example_ExamplePicking.prototype, {
	__class__: example_ExamplePicking
});
class example_ExampleSkybox {
	constructor() {
		this.init();
	}
	createTransparentObject(scale,rotationY,geom,fx) {
		var x = minko_utils_RandomNumbers.nextNumber();
		var y = minko_utils_RandomNumbers.nextNumber();
		var z = minko_utils_RandomNumbers.nextNumber();
		var this1 = new glm_Vec3Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		var v = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var dest = this2;
		var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest.x = v.x * mult;
		dest.y = v.y * mult;
		dest.z = v.z * mult;
		var randomAxis = dest;
		var randomAng = 2.0 * Math.PI * minko_utils_RandomNumbers.nextNumber();
		var angle = randomAng;
		var this3 = new glm_QuatBase();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 1;
		var dest1 = this3;
		angle *= 0.5;
		var s = Math.sin(angle);
		dest1.x = s * randomAxis.x;
		dest1.y = s * randomAxis.y;
		dest1.z = s * randomAxis.z;
		dest1.w = Math.cos(angle);
		var rotateQuat = dest1;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var dest2 = this4;
		dest2._00 = 1;
		dest2._10 = 0;
		dest2._20 = 0;
		dest2._30 = 0;
		dest2._01 = 0;
		dest2._11 = 1;
		dest2._21 = 0;
		dest2._31 = 0;
		dest2._02 = 0;
		dest2._12 = 0;
		dest2._22 = 1;
		dest2._32 = 0;
		dest2._03 = 0;
		dest2._13 = 0;
		dest2._23 = 0;
		dest2._33 = 1;
		var m = dest2;
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest3 = this5;
		var x2 = rotateQuat.x + rotateQuat.x;
		var y2 = rotateQuat.y + rotateQuat.y;
		var z2 = rotateQuat.z + rotateQuat.z;
		var xx = rotateQuat.x * x2;
		var xy = rotateQuat.x * y2;
		var xz = rotateQuat.x * z2;
		var yy = rotateQuat.y * y2;
		var yz = rotateQuat.y * z2;
		var zz = rotateQuat.z * z2;
		var wx = rotateQuat.w * x2;
		var wy = rotateQuat.w * y2;
		var wz = rotateQuat.w * z2;
		dest3._00 = 1 - (yy + zz);
		dest3._10 = xy - wz;
		dest3._20 = xz + wy;
		dest3._30 = 0;
		dest3._01 = xy + wz;
		dest3._11 = 1 - (xx + zz);
		dest3._21 = yz - wx;
		dest3._31 = 0;
		dest3._02 = xz - wy;
		dest3._12 = yz + wx;
		dest3._22 = 1 - (xx + yy);
		dest3._32 = 0;
		dest3._03 = 0;
		dest3._13 = 0;
		dest3._23 = 0;
		dest3._33 = 1;
		var a = dest3;
		var this6 = new glm_Mat4Base();
		this6._00 = 0;
		this6._01 = 0;
		this6._02 = 0;
		this6._03 = 0;
		this6._10 = 0;
		this6._11 = 0;
		this6._12 = 0;
		this6._13 = 0;
		this6._20 = 0;
		this6._21 = 0;
		this6._22 = 0;
		this6._23 = 0;
		this6._30 = 0;
		this6._31 = 0;
		this6._32 = 0;
		this6._33 = 0;
		var dest4 = this6;
		var _a;
		var _b;
		if(dest4 == a) {
			var this7 = new glm_Mat4Base();
			this7._00 = 0;
			this7._01 = 0;
			this7._02 = 0;
			this7._03 = 0;
			this7._10 = 0;
			this7._11 = 0;
			this7._12 = 0;
			this7._13 = 0;
			this7._20 = 0;
			this7._21 = 0;
			this7._22 = 0;
			this7._23 = 0;
			this7._30 = 0;
			this7._31 = 0;
			this7._32 = 0;
			this7._33 = 0;
			var dest5 = this7;
			dest5._00 = a._00;
			dest5._10 = a._10;
			dest5._20 = a._20;
			dest5._30 = a._30;
			dest5._01 = a._01;
			dest5._11 = a._11;
			dest5._21 = a._21;
			dest5._31 = a._31;
			dest5._02 = a._02;
			dest5._12 = a._12;
			dest5._22 = a._22;
			dest5._32 = a._32;
			dest5._03 = a._03;
			dest5._13 = a._13;
			dest5._23 = a._23;
			dest5._33 = a._33;
			_a = dest5;
			_b = m;
		} else if(dest4 == m) {
			_a = a;
			var this8 = new glm_Mat4Base();
			this8._00 = 0;
			this8._01 = 0;
			this8._02 = 0;
			this8._03 = 0;
			this8._10 = 0;
			this8._11 = 0;
			this8._12 = 0;
			this8._13 = 0;
			this8._20 = 0;
			this8._21 = 0;
			this8._22 = 0;
			this8._23 = 0;
			this8._30 = 0;
			this8._31 = 0;
			this8._32 = 0;
			this8._33 = 0;
			var dest6 = this8;
			dest6._00 = m._00;
			dest6._10 = m._10;
			dest6._20 = m._20;
			dest6._30 = m._30;
			dest6._01 = m._01;
			dest6._11 = m._11;
			dest6._21 = m._21;
			dest6._31 = m._31;
			dest6._02 = m._02;
			dest6._12 = m._12;
			dest6._22 = m._22;
			dest6._32 = m._32;
			dest6._03 = m._03;
			dest6._13 = m._13;
			dest6._23 = m._23;
			dest6._33 = m._33;
			_b = dest6;
		} else {
			_a = a;
			_b = m;
		}
		dest4._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest4._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest4._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest4._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest4._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest4._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest4._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest4._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest4._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest4._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest4._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest4._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest4._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest4._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest4._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest4._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		m = dest4;
		var this9 = new glm_Vec3Base();
		this9.x = 1.0;
		this9.y = 0.0;
		this9.z = 0.0;
		var translation = this9;
		var this10 = new glm_Mat4Base();
		this10._00 = 0;
		this10._01 = 0;
		this10._02 = 0;
		this10._03 = 0;
		this10._10 = 0;
		this10._11 = 0;
		this10._12 = 0;
		this10._13 = 0;
		this10._20 = 0;
		this10._21 = 0;
		this10._22 = 0;
		this10._23 = 0;
		this10._30 = 0;
		this10._31 = 0;
		this10._32 = 0;
		this10._33 = 0;
		var dest7 = this10;
		dest7._00 = 1;
		dest7._10 = 0;
		dest7._20 = 0;
		dest7._30 = 0;
		dest7._01 = 0;
		dest7._11 = 1;
		dest7._21 = 0;
		dest7._31 = 0;
		dest7._02 = 0;
		dest7._12 = 0;
		dest7._22 = 1;
		dest7._32 = 0;
		dest7._03 = 0;
		dest7._13 = 0;
		dest7._23 = 0;
		dest7._33 = 1;
		var dest8 = dest7;
		dest8._00 = 1;
		dest8._10 = 0;
		dest8._20 = 0;
		dest8._30 = 0;
		dest8._01 = 0;
		dest8._11 = 1;
		dest8._21 = 0;
		dest8._31 = 0;
		dest8._02 = 0;
		dest8._12 = 0;
		dest8._22 = 1;
		dest8._32 = 0;
		dest8._03 = 0;
		dest8._13 = 0;
		dest8._23 = 0;
		dest8._33 = 1;
		dest8._30 = translation.x;
		dest8._31 = translation.y;
		dest8._32 = translation.z;
		var a1 = dest8;
		var this11 = new glm_Mat4Base();
		this11._00 = 0;
		this11._01 = 0;
		this11._02 = 0;
		this11._03 = 0;
		this11._10 = 0;
		this11._11 = 0;
		this11._12 = 0;
		this11._13 = 0;
		this11._20 = 0;
		this11._21 = 0;
		this11._22 = 0;
		this11._23 = 0;
		this11._30 = 0;
		this11._31 = 0;
		this11._32 = 0;
		this11._33 = 0;
		var dest9 = this11;
		var _a1;
		var _b1;
		if(dest9 == a1) {
			var this12 = new glm_Mat4Base();
			this12._00 = 0;
			this12._01 = 0;
			this12._02 = 0;
			this12._03 = 0;
			this12._10 = 0;
			this12._11 = 0;
			this12._12 = 0;
			this12._13 = 0;
			this12._20 = 0;
			this12._21 = 0;
			this12._22 = 0;
			this12._23 = 0;
			this12._30 = 0;
			this12._31 = 0;
			this12._32 = 0;
			this12._33 = 0;
			var dest10 = this12;
			dest10._00 = a1._00;
			dest10._10 = a1._10;
			dest10._20 = a1._20;
			dest10._30 = a1._30;
			dest10._01 = a1._01;
			dest10._11 = a1._11;
			dest10._21 = a1._21;
			dest10._31 = a1._31;
			dest10._02 = a1._02;
			dest10._12 = a1._12;
			dest10._22 = a1._22;
			dest10._32 = a1._32;
			dest10._03 = a1._03;
			dest10._13 = a1._13;
			dest10._23 = a1._23;
			dest10._33 = a1._33;
			_a1 = dest10;
			_b1 = m;
		} else if(dest9 == m) {
			_a1 = a1;
			var this13 = new glm_Mat4Base();
			this13._00 = 0;
			this13._01 = 0;
			this13._02 = 0;
			this13._03 = 0;
			this13._10 = 0;
			this13._11 = 0;
			this13._12 = 0;
			this13._13 = 0;
			this13._20 = 0;
			this13._21 = 0;
			this13._22 = 0;
			this13._23 = 0;
			this13._30 = 0;
			this13._31 = 0;
			this13._32 = 0;
			this13._33 = 0;
			var dest11 = this13;
			dest11._00 = m._00;
			dest11._10 = m._10;
			dest11._20 = m._20;
			dest11._30 = m._30;
			dest11._01 = m._01;
			dest11._11 = m._11;
			dest11._21 = m._21;
			dest11._31 = m._31;
			dest11._02 = m._02;
			dest11._12 = m._12;
			dest11._22 = m._22;
			dest11._32 = m._32;
			dest11._03 = m._03;
			dest11._13 = m._13;
			dest11._23 = m._23;
			dest11._33 = m._33;
			_b1 = dest11;
		} else {
			_a1 = a1;
			_b1 = m;
		}
		dest9._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
		dest9._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
		dest9._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
		dest9._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
		dest9._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
		dest9._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
		dest9._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
		dest9._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
		dest9._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
		dest9._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
		dest9._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
		dest9._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
		dest9._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
		dest9._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
		dest9._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
		dest9._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
		m = dest9;
		var this14 = new glm_Vec3Base();
		this14.x = scale;
		this14.y = scale;
		this14.z = scale;
		var amount = this14;
		var this15 = new glm_Mat4Base();
		this15._00 = 0;
		this15._01 = 0;
		this15._02 = 0;
		this15._03 = 0;
		this15._10 = 0;
		this15._11 = 0;
		this15._12 = 0;
		this15._13 = 0;
		this15._20 = 0;
		this15._21 = 0;
		this15._22 = 0;
		this15._23 = 0;
		this15._30 = 0;
		this15._31 = 0;
		this15._32 = 0;
		this15._33 = 0;
		var dest12 = this15;
		dest12._00 = 1;
		dest12._10 = 0;
		dest12._20 = 0;
		dest12._30 = 0;
		dest12._01 = 0;
		dest12._11 = 1;
		dest12._21 = 0;
		dest12._31 = 0;
		dest12._02 = 0;
		dest12._12 = 0;
		dest12._22 = 1;
		dest12._32 = 0;
		dest12._03 = 0;
		dest12._13 = 0;
		dest12._23 = 0;
		dest12._33 = 1;
		var dest13 = dest12;
		dest13._00 = 1;
		dest13._10 = 0;
		dest13._20 = 0;
		dest13._30 = 0;
		dest13._01 = 0;
		dest13._11 = 1;
		dest13._21 = 0;
		dest13._31 = 0;
		dest13._02 = 0;
		dest13._12 = 0;
		dest13._22 = 1;
		dest13._32 = 0;
		dest13._03 = 0;
		dest13._13 = 0;
		dest13._23 = 0;
		dest13._33 = 1;
		dest13._00 = amount.x;
		dest13._11 = amount.y;
		dest13._22 = amount.z;
		var a2 = dest13;
		var this16 = new glm_Mat4Base();
		this16._00 = 0;
		this16._01 = 0;
		this16._02 = 0;
		this16._03 = 0;
		this16._10 = 0;
		this16._11 = 0;
		this16._12 = 0;
		this16._13 = 0;
		this16._20 = 0;
		this16._21 = 0;
		this16._22 = 0;
		this16._23 = 0;
		this16._30 = 0;
		this16._31 = 0;
		this16._32 = 0;
		this16._33 = 0;
		var dest14 = this16;
		var _a2;
		var _b2;
		if(dest14 == a2) {
			var this17 = new glm_Mat4Base();
			this17._00 = 0;
			this17._01 = 0;
			this17._02 = 0;
			this17._03 = 0;
			this17._10 = 0;
			this17._11 = 0;
			this17._12 = 0;
			this17._13 = 0;
			this17._20 = 0;
			this17._21 = 0;
			this17._22 = 0;
			this17._23 = 0;
			this17._30 = 0;
			this17._31 = 0;
			this17._32 = 0;
			this17._33 = 0;
			var dest15 = this17;
			dest15._00 = a2._00;
			dest15._10 = a2._10;
			dest15._20 = a2._20;
			dest15._30 = a2._30;
			dest15._01 = a2._01;
			dest15._11 = a2._11;
			dest15._21 = a2._21;
			dest15._31 = a2._31;
			dest15._02 = a2._02;
			dest15._12 = a2._12;
			dest15._22 = a2._22;
			dest15._32 = a2._32;
			dest15._03 = a2._03;
			dest15._13 = a2._13;
			dest15._23 = a2._23;
			dest15._33 = a2._33;
			_a2 = dest15;
			_b2 = m;
		} else if(dest14 == m) {
			_a2 = a2;
			var this18 = new glm_Mat4Base();
			this18._00 = 0;
			this18._01 = 0;
			this18._02 = 0;
			this18._03 = 0;
			this18._10 = 0;
			this18._11 = 0;
			this18._12 = 0;
			this18._13 = 0;
			this18._20 = 0;
			this18._21 = 0;
			this18._22 = 0;
			this18._23 = 0;
			this18._30 = 0;
			this18._31 = 0;
			this18._32 = 0;
			this18._33 = 0;
			var dest16 = this18;
			dest16._00 = m._00;
			dest16._10 = m._10;
			dest16._20 = m._20;
			dest16._30 = m._30;
			dest16._01 = m._01;
			dest16._11 = m._11;
			dest16._21 = m._21;
			dest16._31 = m._31;
			dest16._02 = m._02;
			dest16._12 = m._12;
			dest16._22 = m._22;
			dest16._32 = m._32;
			dest16._03 = m._03;
			dest16._13 = m._13;
			dest16._23 = m._23;
			dest16._33 = m._33;
			_b2 = dest16;
		} else {
			_a2 = a2;
			_b2 = m;
		}
		dest14._00 = _a2._00 * _b2._00 + _a2._10 * _b2._01 + _a2._20 * _b2._02 + _a2._30 * _b2._03;
		dest14._10 = _a2._00 * _b2._10 + _a2._10 * _b2._11 + _a2._20 * _b2._12 + _a2._30 * _b2._13;
		dest14._20 = _a2._00 * _b2._20 + _a2._10 * _b2._21 + _a2._20 * _b2._22 + _a2._30 * _b2._23;
		dest14._30 = _a2._00 * _b2._30 + _a2._10 * _b2._31 + _a2._20 * _b2._32 + _a2._30 * _b2._33;
		dest14._01 = _a2._01 * _b2._00 + _a2._11 * _b2._01 + _a2._21 * _b2._02 + _a2._31 * _b2._03;
		dest14._11 = _a2._01 * _b2._10 + _a2._11 * _b2._11 + _a2._21 * _b2._12 + _a2._31 * _b2._13;
		dest14._21 = _a2._01 * _b2._20 + _a2._11 * _b2._21 + _a2._21 * _b2._22 + _a2._31 * _b2._23;
		dest14._31 = _a2._01 * _b2._30 + _a2._11 * _b2._31 + _a2._21 * _b2._32 + _a2._31 * _b2._33;
		dest14._02 = _a2._02 * _b2._00 + _a2._12 * _b2._01 + _a2._22 * _b2._02 + _a2._32 * _b2._03;
		dest14._12 = _a2._02 * _b2._10 + _a2._12 * _b2._11 + _a2._22 * _b2._12 + _a2._32 * _b2._13;
		dest14._22 = _a2._02 * _b2._20 + _a2._12 * _b2._21 + _a2._22 * _b2._22 + _a2._32 * _b2._23;
		dest14._32 = _a2._02 * _b2._30 + _a2._12 * _b2._31 + _a2._22 * _b2._32 + _a2._32 * _b2._33;
		dest14._03 = _a2._03 * _b2._00 + _a2._13 * _b2._01 + _a2._23 * _b2._02 + _a2._33 * _b2._03;
		dest14._13 = _a2._03 * _b2._10 + _a2._13 * _b2._11 + _a2._23 * _b2._12 + _a2._33 * _b2._13;
		dest14._23 = _a2._03 * _b2._20 + _a2._13 * _b2._21 + _a2._23 * _b2._22 + _a2._33 * _b2._23;
		dest14._33 = _a2._03 * _b2._30 + _a2._13 * _b2._31 + _a2._23 * _b2._32 + _a2._33 * _b2._33;
		m = dest14;
		var this19 = new glm_Vec3Base();
		this19.x = 0.0;
		this19.y = 1.0;
		this19.z = 0.0;
		var axis = this19;
		var angle1 = rotationY;
		var this20 = new glm_QuatBase();
		this20.x = 0;
		this20.y = 0;
		this20.z = 0;
		this20.w = 1;
		var dest17 = this20;
		angle1 *= 0.5;
		var s1 = Math.sin(angle1);
		dest17.x = s1 * axis.x;
		dest17.y = s1 * axis.y;
		dest17.z = s1 * axis.z;
		dest17.w = Math.cos(angle1);
		var rotateYQuat = dest17;
		var this21 = new glm_Mat4Base();
		this21._00 = 0;
		this21._01 = 0;
		this21._02 = 0;
		this21._03 = 0;
		this21._10 = 0;
		this21._11 = 0;
		this21._12 = 0;
		this21._13 = 0;
		this21._20 = 0;
		this21._21 = 0;
		this21._22 = 0;
		this21._23 = 0;
		this21._30 = 0;
		this21._31 = 0;
		this21._32 = 0;
		this21._33 = 0;
		var dest18 = this21;
		var x21 = rotateYQuat.x + rotateYQuat.x;
		var y21 = rotateYQuat.y + rotateYQuat.y;
		var z21 = rotateYQuat.z + rotateYQuat.z;
		var xx1 = rotateYQuat.x * x21;
		var xy1 = rotateYQuat.x * y21;
		var xz1 = rotateYQuat.x * z21;
		var yy1 = rotateYQuat.y * y21;
		var yz1 = rotateYQuat.y * z21;
		var zz1 = rotateYQuat.z * z21;
		var wx1 = rotateYQuat.w * x21;
		var wy1 = rotateYQuat.w * y21;
		var wz1 = rotateYQuat.w * z21;
		dest18._00 = 1 - (yy1 + zz1);
		dest18._10 = xy1 - wz1;
		dest18._20 = xz1 + wy1;
		dest18._30 = 0;
		dest18._01 = xy1 + wz1;
		dest18._11 = 1 - (xx1 + zz1);
		dest18._21 = yz1 - wx1;
		dest18._31 = 0;
		dest18._02 = xz1 - wy1;
		dest18._12 = yz1 + wx1;
		dest18._22 = 1 - (xx1 + yy1);
		dest18._32 = 0;
		dest18._03 = 0;
		dest18._13 = 0;
		dest18._23 = 0;
		dest18._33 = 1;
		var a3 = dest18;
		var this22 = new glm_Mat4Base();
		this22._00 = 0;
		this22._01 = 0;
		this22._02 = 0;
		this22._03 = 0;
		this22._10 = 0;
		this22._11 = 0;
		this22._12 = 0;
		this22._13 = 0;
		this22._20 = 0;
		this22._21 = 0;
		this22._22 = 0;
		this22._23 = 0;
		this22._30 = 0;
		this22._31 = 0;
		this22._32 = 0;
		this22._33 = 0;
		var dest19 = this22;
		var _a3;
		var _b3;
		if(dest19 == a3) {
			var this23 = new glm_Mat4Base();
			this23._00 = 0;
			this23._01 = 0;
			this23._02 = 0;
			this23._03 = 0;
			this23._10 = 0;
			this23._11 = 0;
			this23._12 = 0;
			this23._13 = 0;
			this23._20 = 0;
			this23._21 = 0;
			this23._22 = 0;
			this23._23 = 0;
			this23._30 = 0;
			this23._31 = 0;
			this23._32 = 0;
			this23._33 = 0;
			var dest20 = this23;
			dest20._00 = a3._00;
			dest20._10 = a3._10;
			dest20._20 = a3._20;
			dest20._30 = a3._30;
			dest20._01 = a3._01;
			dest20._11 = a3._11;
			dest20._21 = a3._21;
			dest20._31 = a3._31;
			dest20._02 = a3._02;
			dest20._12 = a3._12;
			dest20._22 = a3._22;
			dest20._32 = a3._32;
			dest20._03 = a3._03;
			dest20._13 = a3._13;
			dest20._23 = a3._23;
			dest20._33 = a3._33;
			_a3 = dest20;
			_b3 = m;
		} else if(dest19 == m) {
			_a3 = a3;
			var this24 = new glm_Mat4Base();
			this24._00 = 0;
			this24._01 = 0;
			this24._02 = 0;
			this24._03 = 0;
			this24._10 = 0;
			this24._11 = 0;
			this24._12 = 0;
			this24._13 = 0;
			this24._20 = 0;
			this24._21 = 0;
			this24._22 = 0;
			this24._23 = 0;
			this24._30 = 0;
			this24._31 = 0;
			this24._32 = 0;
			this24._33 = 0;
			var dest21 = this24;
			dest21._00 = m._00;
			dest21._10 = m._10;
			dest21._20 = m._20;
			dest21._30 = m._30;
			dest21._01 = m._01;
			dest21._11 = m._11;
			dest21._21 = m._21;
			dest21._31 = m._31;
			dest21._02 = m._02;
			dest21._12 = m._12;
			dest21._22 = m._22;
			dest21._32 = m._32;
			dest21._03 = m._03;
			dest21._13 = m._13;
			dest21._23 = m._23;
			dest21._33 = m._33;
			_b3 = dest21;
		} else {
			_a3 = a3;
			_b3 = m;
		}
		dest19._00 = _a3._00 * _b3._00 + _a3._10 * _b3._01 + _a3._20 * _b3._02 + _a3._30 * _b3._03;
		dest19._10 = _a3._00 * _b3._10 + _a3._10 * _b3._11 + _a3._20 * _b3._12 + _a3._30 * _b3._13;
		dest19._20 = _a3._00 * _b3._20 + _a3._10 * _b3._21 + _a3._20 * _b3._22 + _a3._30 * _b3._23;
		dest19._30 = _a3._00 * _b3._30 + _a3._10 * _b3._31 + _a3._20 * _b3._32 + _a3._30 * _b3._33;
		dest19._01 = _a3._01 * _b3._00 + _a3._11 * _b3._01 + _a3._21 * _b3._02 + _a3._31 * _b3._03;
		dest19._11 = _a3._01 * _b3._10 + _a3._11 * _b3._11 + _a3._21 * _b3._12 + _a3._31 * _b3._13;
		dest19._21 = _a3._01 * _b3._20 + _a3._11 * _b3._21 + _a3._21 * _b3._22 + _a3._31 * _b3._23;
		dest19._31 = _a3._01 * _b3._30 + _a3._11 * _b3._31 + _a3._21 * _b3._32 + _a3._31 * _b3._33;
		dest19._02 = _a3._02 * _b3._00 + _a3._12 * _b3._01 + _a3._22 * _b3._02 + _a3._32 * _b3._03;
		dest19._12 = _a3._02 * _b3._10 + _a3._12 * _b3._11 + _a3._22 * _b3._12 + _a3._32 * _b3._13;
		dest19._22 = _a3._02 * _b3._20 + _a3._12 * _b3._21 + _a3._22 * _b3._22 + _a3._32 * _b3._23;
		dest19._32 = _a3._02 * _b3._30 + _a3._12 * _b3._31 + _a3._22 * _b3._32 + _a3._32 * _b3._33;
		dest19._03 = _a3._03 * _b3._00 + _a3._13 * _b3._01 + _a3._23 * _b3._02 + _a3._33 * _b3._03;
		dest19._13 = _a3._03 * _b3._10 + _a3._13 * _b3._11 + _a3._23 * _b3._12 + _a3._33 * _b3._13;
		dest19._23 = _a3._03 * _b3._20 + _a3._13 * _b3._21 + _a3._23 * _b3._22 + _a3._33 * _b3._23;
		dest19._33 = _a3._03 * _b3._30 + _a3._13 * _b3._31 + _a3._23 * _b3._32 + _a3._33 * _b3._33;
		m = dest19;
		var basicMaterial = minko_material_BasicMaterial.create();
		var x1 = rotationY / (2.0 * Math.PI) * 360;
		var this25 = new glm_Vec4Base();
		this25.x = x1;
		this25.y = 1.0;
		this25.z = 0.5;
		this25.w = 0.5;
		basicMaterial.set_diffuseColor(this25);
		basicMaterial.set_triangleCulling(2);
		return minko_scene_Node.create().addComponent(minko_component_Transform.createbyMatrix4(m)).addComponent(minko_component_Surface.create(geom,basicMaterial,fx));
	}
	init() {
		var canvas = minko_WebCanvas.create("Minko Example - Skybox");
		var _gthis = this;
		var sceneManager = minko_component_SceneManager.create(canvas);
		var loader = sceneManager.get_assets().get_loader();
		loader.get_options().set_loadAsynchronously(false);
		loader.get_options().set_resizeSmoothly(true);
		loader.get_options().set_generateMipmaps(true);
		loader.get_options().registerParser("jpg",function() {
			return new minko_file_JPEGParser();
		});
		loader.queue(example_ExampleSkybox.SKYBOX_TEXTURE).queue("effect/Basic.effect").queue("effect/Skybox/Skybox.effect");
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(2139062271));
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 3;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 1;
		this3.z = 0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var dest = this4;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		var src = glm_GLM.lookAt(this1,this2,this3,dest);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest1 = this5;
		dest1._00 = 1;
		dest1._10 = 0;
		dest1._20 = 0;
		dest1._30 = 0;
		dest1._01 = 0;
		dest1._11 = 1;
		dest1._21 = 0;
		dest1._31 = 0;
		dest1._02 = 0;
		dest1._12 = 0;
		dest1._22 = 1;
		dest1._32 = 0;
		dest1._03 = 0;
		dest1._13 = 0;
		dest1._23 = 0;
		dest1._33 = 1;
		var dest2 = dest1;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest2._00 = t00 * idet;
		dest2._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest2._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest2._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest2._10 = t01 * idet;
		dest2._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest2._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest2._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest2._20 = t02 * idet;
		dest2._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest2._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest2._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest2._30 = t03 * idet;
		dest2._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest2._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest2._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest2)).addComponent(minko_component_PerspectiveCamera.create(canvas.get_aspectRatio()));
		var sky = minko_scene_Node.create("sky");
		var this6 = new glm_Vec3Base();
		this6.x = 100.0;
		this6.y = 100.0;
		this6.z = 100.0;
		var amount = this6;
		var this7 = new glm_Mat4Base();
		this7._00 = 0;
		this7._01 = 0;
		this7._02 = 0;
		this7._03 = 0;
		this7._10 = 0;
		this7._11 = 0;
		this7._12 = 0;
		this7._13 = 0;
		this7._20 = 0;
		this7._21 = 0;
		this7._22 = 0;
		this7._23 = 0;
		this7._30 = 0;
		this7._31 = 0;
		this7._32 = 0;
		this7._33 = 0;
		var dest3 = this7;
		dest3._00 = 1;
		dest3._10 = 0;
		dest3._20 = 0;
		dest3._30 = 0;
		dest3._01 = 0;
		dest3._11 = 1;
		dest3._21 = 0;
		dest3._31 = 0;
		dest3._02 = 0;
		dest3._12 = 0;
		dest3._22 = 1;
		dest3._32 = 0;
		dest3._03 = 0;
		dest3._13 = 0;
		dest3._23 = 0;
		dest3._33 = 1;
		dest3._00 = amount.x;
		dest3._11 = amount.y;
		dest3._22 = amount.z;
		var a = dest3;
		var this8 = new glm_Mat4Base();
		this8._00 = 0;
		this8._01 = 0;
		this8._02 = 0;
		this8._03 = 0;
		this8._10 = 0;
		this8._11 = 0;
		this8._12 = 0;
		this8._13 = 0;
		this8._20 = 0;
		this8._21 = 0;
		this8._22 = 0;
		this8._23 = 0;
		this8._30 = 0;
		this8._31 = 0;
		this8._32 = 0;
		this8._33 = 0;
		var dest4 = this8;
		dest4._00 = 1;
		dest4._10 = 0;
		dest4._20 = 0;
		dest4._30 = 0;
		dest4._01 = 0;
		dest4._11 = 1;
		dest4._21 = 0;
		dest4._31 = 0;
		dest4._02 = 0;
		dest4._12 = 0;
		dest4._22 = 1;
		dest4._32 = 0;
		dest4._03 = 0;
		dest4._13 = 0;
		dest4._23 = 0;
		dest4._33 = 1;
		var b = dest4;
		var this9 = new glm_Mat4Base();
		this9._00 = 0;
		this9._01 = 0;
		this9._02 = 0;
		this9._03 = 0;
		this9._10 = 0;
		this9._11 = 0;
		this9._12 = 0;
		this9._13 = 0;
		this9._20 = 0;
		this9._21 = 0;
		this9._22 = 0;
		this9._23 = 0;
		this9._30 = 0;
		this9._31 = 0;
		this9._32 = 0;
		this9._33 = 0;
		var dest5 = this9;
		var _a;
		var _b;
		if(dest5 == a) {
			var this10 = new glm_Mat4Base();
			this10._00 = 0;
			this10._01 = 0;
			this10._02 = 0;
			this10._03 = 0;
			this10._10 = 0;
			this10._11 = 0;
			this10._12 = 0;
			this10._13 = 0;
			this10._20 = 0;
			this10._21 = 0;
			this10._22 = 0;
			this10._23 = 0;
			this10._30 = 0;
			this10._31 = 0;
			this10._32 = 0;
			this10._33 = 0;
			var dest6 = this10;
			dest6._00 = a._00;
			dest6._10 = a._10;
			dest6._20 = a._20;
			dest6._30 = a._30;
			dest6._01 = a._01;
			dest6._11 = a._11;
			dest6._21 = a._21;
			dest6._31 = a._31;
			dest6._02 = a._02;
			dest6._12 = a._12;
			dest6._22 = a._22;
			dest6._32 = a._32;
			dest6._03 = a._03;
			dest6._13 = a._13;
			dest6._23 = a._23;
			dest6._33 = a._33;
			_a = dest6;
			_b = b;
		} else if(dest5 == b) {
			_a = a;
			var this11 = new glm_Mat4Base();
			this11._00 = 0;
			this11._01 = 0;
			this11._02 = 0;
			this11._03 = 0;
			this11._10 = 0;
			this11._11 = 0;
			this11._12 = 0;
			this11._13 = 0;
			this11._20 = 0;
			this11._21 = 0;
			this11._22 = 0;
			this11._23 = 0;
			this11._30 = 0;
			this11._31 = 0;
			this11._32 = 0;
			this11._33 = 0;
			var dest7 = this11;
			dest7._00 = b._00;
			dest7._10 = b._10;
			dest7._20 = b._20;
			dest7._30 = b._30;
			dest7._01 = b._01;
			dest7._11 = b._11;
			dest7._21 = b._21;
			dest7._31 = b._31;
			dest7._02 = b._02;
			dest7._12 = b._12;
			dest7._22 = b._22;
			dest7._32 = b._32;
			dest7._03 = b._03;
			dest7._13 = b._13;
			dest7._23 = b._23;
			dest7._33 = b._33;
			_b = dest7;
		} else {
			_a = a;
			_b = b;
		}
		dest5._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest5._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest5._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest5._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest5._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest5._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest5._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest5._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest5._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest5._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest5._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest5._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest5._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest5._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest5._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest5._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		var sky1 = sky.addComponent(minko_component_Transform.createbyMatrix4(dest5));
		var objects = minko_scene_Node.create("objects").addComponent(minko_component_Transform.create());
		var _ = sceneManager.get_assets().get_loader().get_complete().connect(function(loader1) {
			var assets = sceneManager.get_assets();
			var _1 = minko_component_Surface.create(minko_geometry_SphereGeometry.create(assets.get_context(),16,16),minko_material_Material.create().setbyKeyObject({ "diffuseLatLongMap" : assets.texture(example_ExampleSkybox.SKYBOX_TEXTURE)}),assets.effect("effect/Skybox/Skybox.effect"));
			sky1.addComponent(_1);
			haxe_Log.trace("NUM_OBJECTS > 0",{ fileName : "example/ExampleSkybox.hx", lineNumber : 86, className : "example.ExampleSkybox", methodName : "init", customParams : [example_ExampleSkybox.NUM_OBJECTS]});
			var scale = 1.25 * Math.PI / example_ExampleSkybox.NUM_OBJECTS;
			var dAngle = 2.0 * Math.PI / example_ExampleSkybox.NUM_OBJECTS;
			var cubeGeom = minko_geometry_CubeGeometry.create(sceneManager.get_assets().get_context());
			var _g = 0;
			var _g1 = example_ExampleSkybox.NUM_OBJECTS;
			while(_g < _g1) {
				var objId = _g++;
				var _2 = assets.effect("effect/Basic.effect");
				var _3 = _gthis.createTransparentObject(scale,objId * dAngle,cubeGeom,_2);
				objects.addChild(_3);
			}
			root.addChild(camera1).addChild(sky1).addChild(objects);
		});
		var resized = canvas.get_resized().connect(function(canvas1,w,h) {
			var perspectiveCamera = camera1.getComponent(minko_component_PerspectiveCamera);
			perspectiveCamera.set_aspectRatio(w / h);
		});
		var yaw = 0.0;
		var pitch = Math.PI * .5;
		var minPitch = 0.1;
		var maxPitch = Math.PI - .1;
		var this12 = new glm_Vec3Base();
		this12.x = 0.0;
		this12.y = 0.0;
		this12.z = 0.0;
		var lookAt = this12;
		var distance = 4.0;
		var mouse_ = canvas.get_mouse();
		var mouse_wheel = canvas.get_mouse().get_wheel();
		var mouseWheel = mouse_wheel.connect(function(m,h1,v) {
			distance += v / 10.0;
		});
		var mouseMove = null;
		var cameraRotationXSpeed = 0.000;
		var cameraRotationYSpeed = 0.000;
		var mouseDown = canvas.get_mouse().get_leftButtonDown().connect(function(m1) {
			mouseMove = canvas.get_mouse().get_move().connect(function(UnnamedParameter1,dx,dy) {
				cameraRotationYSpeed = dx * .01;
				cameraRotationXSpeed = dy * -.01;
			});
		});
		var mouseUp = canvas.get_mouse().get_leftButtonUp().connect(function(m2) {
			mouseMove.disconnect();
			mouseMove = null;
		});
		var this13 = new glm_Vec3Base();
		this13.x = 0;
		this13.y = 1;
		this13.z = 0;
		var axis = this13;
		var angle = 0.01;
		var this14 = new glm_QuatBase();
		this14.x = 0;
		this14.y = 0;
		this14.z = 0;
		this14.w = 1;
		var dest8 = this14;
		angle *= 0.5;
		var s = Math.sin(angle);
		dest8.x = s * axis.x;
		dest8.y = s * axis.y;
		dest8.z = s * axis.z;
		dest8.w = Math.cos(angle);
		var skyRotation = dest8;
		var this15 = new glm_Vec3Base();
		this15.x = 0;
		this15.y = 1;
		this15.z = 0;
		var axis1 = this15;
		var angle1 = -0.02;
		var this16 = new glm_QuatBase();
		this16.x = 0;
		this16.y = 0;
		this16.z = 0;
		this16.w = 1;
		var dest9 = this16;
		angle1 *= 0.5;
		var s1 = Math.sin(angle1);
		dest9.x = s1 * axis1.x;
		dest9.y = s1 * axis1.y;
		dest9.z = s1 * axis1.z;
		dest9.w = Math.cos(angle1);
		var objectsRotation = dest9;
		var enterFrame = canvas.get_enterFrame().connect(function(canvas2,time,deltaTime) {
			yaw += cameraRotationYSpeed;
			cameraRotationYSpeed *= 0.9;
			pitch += cameraRotationXSpeed;
			cameraRotationXSpeed *= 0.9;
			if(pitch > maxPitch) {
				pitch = maxPitch;
			} else if(pitch < minPitch) {
				pitch = minPitch;
			}
			if(distance <= 0.0) {
				distance = 0.1;
			}
			var cameraTransform = camera1.getComponent(minko_component_Transform);
			var x = lookAt.x + distance * Math.cos(yaw) * Math.sin(pitch);
			var y = lookAt.y + distance * Math.cos(pitch);
			var z = lookAt.z + distance * Math.sin(yaw) * Math.sin(pitch);
			var this17 = new glm_Vec3Base();
			this17.x = x;
			this17.y = y;
			this17.z = z;
			var this18 = new glm_Vec3Base();
			this18.x = 0.0;
			this18.y = 1.0;
			this18.z = 0.0;
			var this19 = new glm_Mat4Base();
			this19._00 = 0;
			this19._01 = 0;
			this19._02 = 0;
			this19._03 = 0;
			this19._10 = 0;
			this19._11 = 0;
			this19._12 = 0;
			this19._13 = 0;
			this19._20 = 0;
			this19._21 = 0;
			this19._22 = 0;
			this19._23 = 0;
			this19._30 = 0;
			this19._31 = 0;
			this19._32 = 0;
			this19._33 = 0;
			var src1 = glm_GLM.lookAt(this17,lookAt,this18,this19);
			var this20 = new glm_Mat4Base();
			this20._00 = 0;
			this20._01 = 0;
			this20._02 = 0;
			this20._03 = 0;
			this20._10 = 0;
			this20._11 = 0;
			this20._12 = 0;
			this20._13 = 0;
			this20._20 = 0;
			this20._21 = 0;
			this20._22 = 0;
			this20._23 = 0;
			this20._30 = 0;
			this20._31 = 0;
			this20._32 = 0;
			this20._33 = 0;
			var dest10 = this20;
			var a001 = src1._00;
			var a011 = src1._10;
			var a021 = src1._20;
			var a031 = src1._30;
			var a101 = src1._01;
			var a111 = src1._11;
			var a121 = src1._21;
			var a131 = src1._31;
			var a201 = src1._02;
			var a211 = src1._12;
			var a221 = src1._22;
			var a231 = src1._32;
			var a301 = src1._03;
			var a311 = src1._13;
			var a321 = src1._23;
			var a331 = src1._33;
			var t001 = a121 * a231 * a311 - a131 * a221 * a311 + a131 * a211 * a321 - a111 * a231 * a321 - a121 * a211 * a331 + a111 * a221 * a331;
			var t011 = a031 * a221 * a311 - a021 * a231 * a311 - a031 * a211 * a321 + a011 * a231 * a321 + a021 * a211 * a331 - a011 * a221 * a331;
			var t021 = a021 * a131 * a311 - a031 * a121 * a311 + a031 * a111 * a321 - a011 * a131 * a321 - a021 * a111 * a331 + a011 * a121 * a331;
			var t031 = a031 * a121 * a211 - a021 * a131 * a211 - a031 * a111 * a221 + a011 * a131 * a221 + a021 * a111 * a231 - a011 * a121 * a231;
			var det1 = a001 * t001 + a101 * t011 + a201 * t021 + a301 * t031;
			if(Math.abs(det1) <= glm_GLM.EPSILON) {
				throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det1 + ") is too small!");
			}
			var idet1 = 1 / det1;
			dest10._00 = t001 * idet1;
			dest10._01 = (a131 * a221 * a301 - a121 * a231 * a301 - a131 * a201 * a321 + a101 * a231 * a321 + a121 * a201 * a331 - a101 * a221 * a331) * idet1;
			dest10._02 = (a111 * a231 * a301 - a131 * a211 * a301 + a131 * a201 * a311 - a101 * a231 * a311 - a111 * a201 * a331 + a101 * a211 * a331) * idet1;
			dest10._03 = (a121 * a211 * a301 - a111 * a221 * a301 - a121 * a201 * a311 + a101 * a221 * a311 + a111 * a201 * a321 - a101 * a211 * a321) * idet1;
			dest10._10 = t011 * idet1;
			dest10._11 = (a021 * a231 * a301 - a031 * a221 * a301 + a031 * a201 * a321 - a001 * a231 * a321 - a021 * a201 * a331 + a001 * a221 * a331) * idet1;
			dest10._12 = (a031 * a211 * a301 - a011 * a231 * a301 - a031 * a201 * a311 + a001 * a231 * a311 + a011 * a201 * a331 - a001 * a211 * a331) * idet1;
			dest10._13 = (a011 * a221 * a301 - a021 * a211 * a301 + a021 * a201 * a311 - a001 * a221 * a311 - a011 * a201 * a321 + a001 * a211 * a321) * idet1;
			dest10._20 = t021 * idet1;
			dest10._21 = (a031 * a121 * a301 - a021 * a131 * a301 - a031 * a101 * a321 + a001 * a131 * a321 + a021 * a101 * a331 - a001 * a121 * a331) * idet1;
			dest10._22 = (a011 * a131 * a301 - a031 * a111 * a301 + a031 * a101 * a311 - a001 * a131 * a311 - a011 * a101 * a331 + a001 * a111 * a331) * idet1;
			dest10._23 = (a021 * a111 * a301 - a011 * a121 * a301 - a021 * a101 * a311 + a001 * a121 * a311 + a011 * a101 * a321 - a001 * a111 * a321) * idet1;
			dest10._30 = t031 * idet1;
			dest10._31 = (a021 * a131 * a201 - a031 * a121 * a201 + a031 * a101 * a221 - a001 * a131 * a221 - a021 * a101 * a231 + a001 * a121 * a231) * idet1;
			dest10._32 = (a031 * a111 * a201 - a011 * a131 * a201 - a031 * a101 * a211 + a001 * a131 * a211 + a011 * a101 * a231 - a001 * a111 * a231) * idet1;
			dest10._33 = (a011 * a121 * a201 - a021 * a111 * a201 + a021 * a101 * a211 - a001 * a121 * a211 - a011 * a101 * a221 + a001 * a111 * a221) * idet1;
			var mat4 = dest10;
			cameraTransform.set_matrix(mat4);
			var skyTransform = sky1.getComponent(minko_component_Transform);
			var objectsTransform = objects.getComponent(minko_component_Transform);
			var this21 = new glm_Mat4Base();
			this21._00 = 0;
			this21._01 = 0;
			this21._02 = 0;
			this21._03 = 0;
			this21._10 = 0;
			this21._11 = 0;
			this21._12 = 0;
			this21._13 = 0;
			this21._20 = 0;
			this21._21 = 0;
			this21._22 = 0;
			this21._23 = 0;
			this21._30 = 0;
			this21._31 = 0;
			this21._32 = 0;
			this21._33 = 0;
			var dest11 = this21;
			dest11._00 = 1;
			dest11._10 = 0;
			dest11._20 = 0;
			dest11._30 = 0;
			dest11._01 = 0;
			dest11._11 = 1;
			dest11._21 = 0;
			dest11._31 = 0;
			dest11._02 = 0;
			dest11._12 = 0;
			dest11._22 = 1;
			dest11._32 = 0;
			dest11._03 = 0;
			dest11._13 = 0;
			dest11._23 = 0;
			dest11._33 = 1;
			var dest12 = dest11;
			var x2 = skyRotation.x + skyRotation.x;
			var y2 = skyRotation.y + skyRotation.y;
			var z2 = skyRotation.z + skyRotation.z;
			var xx = skyRotation.x * x2;
			var xy = skyRotation.x * y2;
			var xz = skyRotation.x * z2;
			var yy = skyRotation.y * y2;
			var yz = skyRotation.y * z2;
			var zz = skyRotation.z * z2;
			var wx = skyRotation.w * x2;
			var wy = skyRotation.w * y2;
			var wz = skyRotation.w * z2;
			dest12._00 = 1 - (yy + zz);
			dest12._10 = xy - wz;
			dest12._20 = xz + wy;
			dest12._30 = 0;
			dest12._01 = xy + wz;
			dest12._11 = 1 - (xx + zz);
			dest12._21 = yz - wx;
			dest12._31 = 0;
			dest12._02 = xz - wy;
			dest12._12 = yz + wx;
			dest12._22 = 1 - (xx + yy);
			dest12._32 = 0;
			dest12._03 = 0;
			dest12._13 = 0;
			dest12._23 = 0;
			dest12._33 = 1;
			var a1 = dest12;
			var b1 = skyTransform.get_matrix();
			var this22 = new glm_Mat4Base();
			this22._00 = 0;
			this22._01 = 0;
			this22._02 = 0;
			this22._03 = 0;
			this22._10 = 0;
			this22._11 = 0;
			this22._12 = 0;
			this22._13 = 0;
			this22._20 = 0;
			this22._21 = 0;
			this22._22 = 0;
			this22._23 = 0;
			this22._30 = 0;
			this22._31 = 0;
			this22._32 = 0;
			this22._33 = 0;
			var dest13 = this22;
			var _a1;
			var _b1;
			if(dest13 == a1) {
				var this23 = new glm_Mat4Base();
				this23._00 = 0;
				this23._01 = 0;
				this23._02 = 0;
				this23._03 = 0;
				this23._10 = 0;
				this23._11 = 0;
				this23._12 = 0;
				this23._13 = 0;
				this23._20 = 0;
				this23._21 = 0;
				this23._22 = 0;
				this23._23 = 0;
				this23._30 = 0;
				this23._31 = 0;
				this23._32 = 0;
				this23._33 = 0;
				var dest14 = this23;
				dest14._00 = a1._00;
				dest14._10 = a1._10;
				dest14._20 = a1._20;
				dest14._30 = a1._30;
				dest14._01 = a1._01;
				dest14._11 = a1._11;
				dest14._21 = a1._21;
				dest14._31 = a1._31;
				dest14._02 = a1._02;
				dest14._12 = a1._12;
				dest14._22 = a1._22;
				dest14._32 = a1._32;
				dest14._03 = a1._03;
				dest14._13 = a1._13;
				dest14._23 = a1._23;
				dest14._33 = a1._33;
				_a1 = dest14;
				_b1 = b1;
			} else if(dest13 == b1) {
				_a1 = a1;
				var this24 = new glm_Mat4Base();
				this24._00 = 0;
				this24._01 = 0;
				this24._02 = 0;
				this24._03 = 0;
				this24._10 = 0;
				this24._11 = 0;
				this24._12 = 0;
				this24._13 = 0;
				this24._20 = 0;
				this24._21 = 0;
				this24._22 = 0;
				this24._23 = 0;
				this24._30 = 0;
				this24._31 = 0;
				this24._32 = 0;
				this24._33 = 0;
				var dest15 = this24;
				dest15._00 = b1._00;
				dest15._10 = b1._10;
				dest15._20 = b1._20;
				dest15._30 = b1._30;
				dest15._01 = b1._01;
				dest15._11 = b1._11;
				dest15._21 = b1._21;
				dest15._31 = b1._31;
				dest15._02 = b1._02;
				dest15._12 = b1._12;
				dest15._22 = b1._22;
				dest15._32 = b1._32;
				dest15._03 = b1._03;
				dest15._13 = b1._13;
				dest15._23 = b1._23;
				dest15._33 = b1._33;
				_b1 = dest15;
			} else {
				_a1 = a1;
				_b1 = b1;
			}
			dest13._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
			dest13._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
			dest13._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
			dest13._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
			dest13._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
			dest13._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
			dest13._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
			dest13._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
			dest13._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
			dest13._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
			dest13._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
			dest13._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
			dest13._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
			dest13._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
			dest13._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
			dest13._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
			skyTransform.set_matrix(dest13);
			var this25 = new glm_Mat4Base();
			this25._00 = 0;
			this25._01 = 0;
			this25._02 = 0;
			this25._03 = 0;
			this25._10 = 0;
			this25._11 = 0;
			this25._12 = 0;
			this25._13 = 0;
			this25._20 = 0;
			this25._21 = 0;
			this25._22 = 0;
			this25._23 = 0;
			this25._30 = 0;
			this25._31 = 0;
			this25._32 = 0;
			this25._33 = 0;
			var dest16 = this25;
			dest16._00 = 1;
			dest16._10 = 0;
			dest16._20 = 0;
			dest16._30 = 0;
			dest16._01 = 0;
			dest16._11 = 1;
			dest16._21 = 0;
			dest16._31 = 0;
			dest16._02 = 0;
			dest16._12 = 0;
			dest16._22 = 1;
			dest16._32 = 0;
			dest16._03 = 0;
			dest16._13 = 0;
			dest16._23 = 0;
			dest16._33 = 1;
			var dest17 = dest16;
			var x21 = objectsRotation.x + objectsRotation.x;
			var y21 = objectsRotation.y + objectsRotation.y;
			var z21 = objectsRotation.z + objectsRotation.z;
			var xx1 = objectsRotation.x * x21;
			var xy1 = objectsRotation.x * y21;
			var xz1 = objectsRotation.x * z21;
			var yy1 = objectsRotation.y * y21;
			var yz1 = objectsRotation.y * z21;
			var zz1 = objectsRotation.z * z21;
			var wx1 = objectsRotation.w * x21;
			var wy1 = objectsRotation.w * y21;
			var wz1 = objectsRotation.w * z21;
			dest17._00 = 1 - (yy1 + zz1);
			dest17._10 = xy1 - wz1;
			dest17._20 = xz1 + wy1;
			dest17._30 = 0;
			dest17._01 = xy1 + wz1;
			dest17._11 = 1 - (xx1 + zz1);
			dest17._21 = yz1 - wx1;
			dest17._31 = 0;
			dest17._02 = xz1 - wy1;
			dest17._12 = yz1 + wx1;
			dest17._22 = 1 - (xx1 + yy1);
			dest17._32 = 0;
			dest17._03 = 0;
			dest17._13 = 0;
			dest17._23 = 0;
			dest17._33 = 1;
			var a2 = dest17;
			var b2 = objectsTransform.get_matrix();
			var this26 = new glm_Mat4Base();
			this26._00 = 0;
			this26._01 = 0;
			this26._02 = 0;
			this26._03 = 0;
			this26._10 = 0;
			this26._11 = 0;
			this26._12 = 0;
			this26._13 = 0;
			this26._20 = 0;
			this26._21 = 0;
			this26._22 = 0;
			this26._23 = 0;
			this26._30 = 0;
			this26._31 = 0;
			this26._32 = 0;
			this26._33 = 0;
			var dest18 = this26;
			var _a2;
			var _b2;
			if(dest18 == a2) {
				var this27 = new glm_Mat4Base();
				this27._00 = 0;
				this27._01 = 0;
				this27._02 = 0;
				this27._03 = 0;
				this27._10 = 0;
				this27._11 = 0;
				this27._12 = 0;
				this27._13 = 0;
				this27._20 = 0;
				this27._21 = 0;
				this27._22 = 0;
				this27._23 = 0;
				this27._30 = 0;
				this27._31 = 0;
				this27._32 = 0;
				this27._33 = 0;
				var dest19 = this27;
				dest19._00 = a2._00;
				dest19._10 = a2._10;
				dest19._20 = a2._20;
				dest19._30 = a2._30;
				dest19._01 = a2._01;
				dest19._11 = a2._11;
				dest19._21 = a2._21;
				dest19._31 = a2._31;
				dest19._02 = a2._02;
				dest19._12 = a2._12;
				dest19._22 = a2._22;
				dest19._32 = a2._32;
				dest19._03 = a2._03;
				dest19._13 = a2._13;
				dest19._23 = a2._23;
				dest19._33 = a2._33;
				_a2 = dest19;
				_b2 = b2;
			} else if(dest18 == b2) {
				_a2 = a2;
				var this28 = new glm_Mat4Base();
				this28._00 = 0;
				this28._01 = 0;
				this28._02 = 0;
				this28._03 = 0;
				this28._10 = 0;
				this28._11 = 0;
				this28._12 = 0;
				this28._13 = 0;
				this28._20 = 0;
				this28._21 = 0;
				this28._22 = 0;
				this28._23 = 0;
				this28._30 = 0;
				this28._31 = 0;
				this28._32 = 0;
				this28._33 = 0;
				var dest20 = this28;
				dest20._00 = b2._00;
				dest20._10 = b2._10;
				dest20._20 = b2._20;
				dest20._30 = b2._30;
				dest20._01 = b2._01;
				dest20._11 = b2._11;
				dest20._21 = b2._21;
				dest20._31 = b2._31;
				dest20._02 = b2._02;
				dest20._12 = b2._12;
				dest20._22 = b2._22;
				dest20._32 = b2._32;
				dest20._03 = b2._03;
				dest20._13 = b2._13;
				dest20._23 = b2._23;
				dest20._33 = b2._33;
				_b2 = dest20;
			} else {
				_a2 = a2;
				_b2 = b2;
			}
			dest18._00 = _a2._00 * _b2._00 + _a2._10 * _b2._01 + _a2._20 * _b2._02 + _a2._30 * _b2._03;
			dest18._10 = _a2._00 * _b2._10 + _a2._10 * _b2._11 + _a2._20 * _b2._12 + _a2._30 * _b2._13;
			dest18._20 = _a2._00 * _b2._20 + _a2._10 * _b2._21 + _a2._20 * _b2._22 + _a2._30 * _b2._23;
			dest18._30 = _a2._00 * _b2._30 + _a2._10 * _b2._31 + _a2._20 * _b2._32 + _a2._30 * _b2._33;
			dest18._01 = _a2._01 * _b2._00 + _a2._11 * _b2._01 + _a2._21 * _b2._02 + _a2._31 * _b2._03;
			dest18._11 = _a2._01 * _b2._10 + _a2._11 * _b2._11 + _a2._21 * _b2._12 + _a2._31 * _b2._13;
			dest18._21 = _a2._01 * _b2._20 + _a2._11 * _b2._21 + _a2._21 * _b2._22 + _a2._31 * _b2._23;
			dest18._31 = _a2._01 * _b2._30 + _a2._11 * _b2._31 + _a2._21 * _b2._32 + _a2._31 * _b2._33;
			dest18._02 = _a2._02 * _b2._00 + _a2._12 * _b2._01 + _a2._22 * _b2._02 + _a2._32 * _b2._03;
			dest18._12 = _a2._02 * _b2._10 + _a2._12 * _b2._11 + _a2._22 * _b2._12 + _a2._32 * _b2._13;
			dest18._22 = _a2._02 * _b2._20 + _a2._12 * _b2._21 + _a2._22 * _b2._22 + _a2._32 * _b2._23;
			dest18._32 = _a2._02 * _b2._30 + _a2._12 * _b2._31 + _a2._22 * _b2._32 + _a2._32 * _b2._33;
			dest18._03 = _a2._03 * _b2._00 + _a2._13 * _b2._01 + _a2._23 * _b2._02 + _a2._33 * _b2._03;
			dest18._13 = _a2._03 * _b2._10 + _a2._13 * _b2._11 + _a2._23 * _b2._12 + _a2._33 * _b2._13;
			dest18._23 = _a2._03 * _b2._20 + _a2._13 * _b2._21 + _a2._23 * _b2._22 + _a2._33 * _b2._23;
			dest18._33 = _a2._03 * _b2._30 + _a2._13 * _b2._31 + _a2._23 * _b2._32 + _a2._33 * _b2._33;
			objectsTransform.set_matrix(dest18);
			sceneManager.nextFrame(time,deltaTime);
		});
		loader.load();
		canvas.run();
	}
}
example_ExampleSkybox.__name__ = true;
Object.assign(example_ExampleSkybox.prototype, {
	__class__: example_ExampleSkybox
});
class example_ExampleStencil {
	constructor() {
		this.init();
	}
	generateColor() {
		var x = minko_utils_RandomNumbers.nextNumber();
		var y = minko_utils_RandomNumbers.nextNumber();
		var z = minko_utils_RandomNumbers.nextNumber();
		var this1 = new glm_Vec4Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		this1.w = 0.5;
		return this1;
	}
	generateHexColor() {
		var color = this.generateColor();
		var r = Math.floor(255.0 * color.x);
		var g = Math.floor(255.0 * color.y);
		var b = Math.floor(255.0 * color.z);
		var a = Math.floor(255.0 * color.w);
		return r << 24 | g << 16 | b << 8 | a;
	}
	generateStars(numStars,assets) {
		if(assets == null) {
			throw new js__$Boot_HaxeError("assets");
		}
		var starNodes = [];
		var _g = 0;
		var _g1 = numStars;
		while(_g < _g1) {
			var i = _g++;
			var basicMaterial = minko_material_BasicMaterial.create();
			basicMaterial.set_diffuseColor(this.generateColor());
			basicMaterial.set_colorMask(true);
			basicMaterial.set_depthMask(false);
			basicMaterial.set_depthFunction(0);
			basicMaterial.set_stencilFunction(1);
			basicMaterial.set_stencilReference(1);
			basicMaterial.set_stencilMask(255);
			basicMaterial.set_stencilFailOperation(0);
			starNodes[i] = minko_scene_Node.create("star_" + i).addComponent(minko_component_Transform.create()).addComponent(minko_component_Surface.create(assets.geometry("smallStar"),basicMaterial,assets.effect("effect/Basic.effect")));
			var minX = -1.0;
			var rangeX = 1.0 - minX;
			var minY = -1.0;
			var rangeY = 1.0 - minY;
			var starNodesTransform = starNodes[i].getComponent(minko_component_Transform);
			var x = minX + minko_utils_RandomNumbers.nextNumber() * rangeX;
			var y = minY + minko_utils_RandomNumbers.nextNumber() * rangeY;
			var this1 = new glm_Vec3Base();
			this1.x = x;
			this1.y = y;
			this1.z = 0.0;
			var translation = this1;
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest = this2;
			dest._00 = 1;
			dest._10 = 0;
			dest._20 = 0;
			dest._30 = 0;
			dest._01 = 0;
			dest._11 = 1;
			dest._21 = 0;
			dest._31 = 0;
			dest._02 = 0;
			dest._12 = 0;
			dest._22 = 1;
			dest._32 = 0;
			dest._03 = 0;
			dest._13 = 0;
			dest._23 = 0;
			dest._33 = 1;
			dest._30 = translation.x;
			dest._31 = translation.y;
			dest._32 = translation.z;
			var a = dest;
			var this3 = new glm_Vec3Base();
			this3.x = 0.0;
			this3.y = 0.0;
			this3.z = 1.0;
			var axis = this3;
			var angle = 2.0 * Math.PI * minko_utils_RandomNumbers.nextNumber();
			var this4 = new glm_QuatBase();
			this4.x = 0;
			this4.y = 0;
			this4.z = 0;
			this4.w = 1;
			var dest1 = this4;
			angle *= 0.5;
			var s = Math.sin(angle);
			dest1.x = s * axis.x;
			dest1.y = s * axis.y;
			dest1.z = s * axis.z;
			dest1.w = Math.cos(angle);
			var rotation = dest1;
			var this5 = new glm_Mat4Base();
			this5._00 = 0;
			this5._01 = 0;
			this5._02 = 0;
			this5._03 = 0;
			this5._10 = 0;
			this5._11 = 0;
			this5._12 = 0;
			this5._13 = 0;
			this5._20 = 0;
			this5._21 = 0;
			this5._22 = 0;
			this5._23 = 0;
			this5._30 = 0;
			this5._31 = 0;
			this5._32 = 0;
			this5._33 = 0;
			var dest2 = this5;
			var x2 = rotation.x + rotation.x;
			var y2 = rotation.y + rotation.y;
			var z2 = rotation.z + rotation.z;
			var xx = rotation.x * x2;
			var xy = rotation.x * y2;
			var xz = rotation.x * z2;
			var yy = rotation.y * y2;
			var yz = rotation.y * z2;
			var zz = rotation.z * z2;
			var wx = rotation.w * x2;
			var wy = rotation.w * y2;
			var wz = rotation.w * z2;
			dest2._00 = 1 - (yy + zz);
			dest2._10 = xy - wz;
			dest2._20 = xz + wy;
			dest2._30 = 0;
			dest2._01 = xy + wz;
			dest2._11 = 1 - (xx + zz);
			dest2._21 = yz - wx;
			dest2._31 = 0;
			dest2._02 = xz - wy;
			dest2._12 = yz + wx;
			dest2._22 = 1 - (xx + yy);
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			var b = dest2;
			var this6 = new glm_Mat4Base();
			this6._00 = 0;
			this6._01 = 0;
			this6._02 = 0;
			this6._03 = 0;
			this6._10 = 0;
			this6._11 = 0;
			this6._12 = 0;
			this6._13 = 0;
			this6._20 = 0;
			this6._21 = 0;
			this6._22 = 0;
			this6._23 = 0;
			this6._30 = 0;
			this6._31 = 0;
			this6._32 = 0;
			this6._33 = 0;
			var dest3 = this6;
			var _a;
			var _b;
			if(dest3 == a) {
				var this7 = new glm_Mat4Base();
				this7._00 = 0;
				this7._01 = 0;
				this7._02 = 0;
				this7._03 = 0;
				this7._10 = 0;
				this7._11 = 0;
				this7._12 = 0;
				this7._13 = 0;
				this7._20 = 0;
				this7._21 = 0;
				this7._22 = 0;
				this7._23 = 0;
				this7._30 = 0;
				this7._31 = 0;
				this7._32 = 0;
				this7._33 = 0;
				var dest4 = this7;
				dest4._00 = a._00;
				dest4._10 = a._10;
				dest4._20 = a._20;
				dest4._30 = a._30;
				dest4._01 = a._01;
				dest4._11 = a._11;
				dest4._21 = a._21;
				dest4._31 = a._31;
				dest4._02 = a._02;
				dest4._12 = a._12;
				dest4._22 = a._22;
				dest4._32 = a._32;
				dest4._03 = a._03;
				dest4._13 = a._13;
				dest4._23 = a._23;
				dest4._33 = a._33;
				_a = dest4;
				_b = b;
			} else if(dest3 == b) {
				_a = a;
				var this8 = new glm_Mat4Base();
				this8._00 = 0;
				this8._01 = 0;
				this8._02 = 0;
				this8._03 = 0;
				this8._10 = 0;
				this8._11 = 0;
				this8._12 = 0;
				this8._13 = 0;
				this8._20 = 0;
				this8._21 = 0;
				this8._22 = 0;
				this8._23 = 0;
				this8._30 = 0;
				this8._31 = 0;
				this8._32 = 0;
				this8._33 = 0;
				var dest5 = this8;
				dest5._00 = b._00;
				dest5._10 = b._10;
				dest5._20 = b._20;
				dest5._30 = b._30;
				dest5._01 = b._01;
				dest5._11 = b._11;
				dest5._21 = b._21;
				dest5._31 = b._31;
				dest5._02 = b._02;
				dest5._12 = b._12;
				dest5._22 = b._22;
				dest5._32 = b._32;
				dest5._03 = b._03;
				dest5._13 = b._13;
				dest5._23 = b._23;
				dest5._33 = b._33;
				_b = dest5;
			} else {
				_a = a;
				_b = b;
			}
			dest3._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest3._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest3._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest3._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest3._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest3._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest3._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest3._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest3._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest3._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest3._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest3._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest3._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest3._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest3._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest3._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			var a1 = dest3;
			var b1 = starNodesTransform.get_matrix();
			var this9 = new glm_Mat4Base();
			this9._00 = 0;
			this9._01 = 0;
			this9._02 = 0;
			this9._03 = 0;
			this9._10 = 0;
			this9._11 = 0;
			this9._12 = 0;
			this9._13 = 0;
			this9._20 = 0;
			this9._21 = 0;
			this9._22 = 0;
			this9._23 = 0;
			this9._30 = 0;
			this9._31 = 0;
			this9._32 = 0;
			this9._33 = 0;
			var dest6 = this9;
			var _a1;
			var _b1;
			if(dest6 == a1) {
				var this10 = new glm_Mat4Base();
				this10._00 = 0;
				this10._01 = 0;
				this10._02 = 0;
				this10._03 = 0;
				this10._10 = 0;
				this10._11 = 0;
				this10._12 = 0;
				this10._13 = 0;
				this10._20 = 0;
				this10._21 = 0;
				this10._22 = 0;
				this10._23 = 0;
				this10._30 = 0;
				this10._31 = 0;
				this10._32 = 0;
				this10._33 = 0;
				var dest7 = this10;
				dest7._00 = a1._00;
				dest7._10 = a1._10;
				dest7._20 = a1._20;
				dest7._30 = a1._30;
				dest7._01 = a1._01;
				dest7._11 = a1._11;
				dest7._21 = a1._21;
				dest7._31 = a1._31;
				dest7._02 = a1._02;
				dest7._12 = a1._12;
				dest7._22 = a1._22;
				dest7._32 = a1._32;
				dest7._03 = a1._03;
				dest7._13 = a1._13;
				dest7._23 = a1._23;
				dest7._33 = a1._33;
				_a1 = dest7;
				_b1 = b1;
			} else if(dest6 == b1) {
				_a1 = a1;
				var this11 = new glm_Mat4Base();
				this11._00 = 0;
				this11._01 = 0;
				this11._02 = 0;
				this11._03 = 0;
				this11._10 = 0;
				this11._11 = 0;
				this11._12 = 0;
				this11._13 = 0;
				this11._20 = 0;
				this11._21 = 0;
				this11._22 = 0;
				this11._23 = 0;
				this11._30 = 0;
				this11._31 = 0;
				this11._32 = 0;
				this11._33 = 0;
				var dest8 = this11;
				dest8._00 = b1._00;
				dest8._10 = b1._10;
				dest8._20 = b1._20;
				dest8._30 = b1._30;
				dest8._01 = b1._01;
				dest8._11 = b1._11;
				dest8._21 = b1._21;
				dest8._31 = b1._31;
				dest8._02 = b1._02;
				dest8._12 = b1._12;
				dest8._22 = b1._22;
				dest8._32 = b1._32;
				dest8._03 = b1._03;
				dest8._13 = b1._13;
				dest8._23 = b1._23;
				dest8._33 = b1._33;
				_b1 = dest8;
			} else {
				_a1 = a1;
				_b1 = b1;
			}
			dest6._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
			dest6._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
			dest6._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
			dest6._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
			dest6._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
			dest6._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
			dest6._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
			dest6._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
			dest6._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
			dest6._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
			dest6._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
			dest6._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
			dest6._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
			dest6._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
			dest6._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
			dest6._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
			var a2 = dest6;
			var this12 = new glm_Vec3Base();
			this12.x = 0.25;
			this12.y = 0.25;
			this12.z = 0.25;
			var amount = this12;
			var this13 = new glm_Mat4Base();
			this13._00 = 0;
			this13._01 = 0;
			this13._02 = 0;
			this13._03 = 0;
			this13._10 = 0;
			this13._11 = 0;
			this13._12 = 0;
			this13._13 = 0;
			this13._20 = 0;
			this13._21 = 0;
			this13._22 = 0;
			this13._23 = 0;
			this13._30 = 0;
			this13._31 = 0;
			this13._32 = 0;
			this13._33 = 0;
			var dest9 = this13;
			dest9._00 = 1;
			dest9._10 = 0;
			dest9._20 = 0;
			dest9._30 = 0;
			dest9._01 = 0;
			dest9._11 = 1;
			dest9._21 = 0;
			dest9._31 = 0;
			dest9._02 = 0;
			dest9._12 = 0;
			dest9._22 = 1;
			dest9._32 = 0;
			dest9._03 = 0;
			dest9._13 = 0;
			dest9._23 = 0;
			dest9._33 = 1;
			dest9._00 = amount.x;
			dest9._11 = amount.y;
			dest9._22 = amount.z;
			var b2 = dest9;
			var this14 = new glm_Mat4Base();
			this14._00 = 0;
			this14._01 = 0;
			this14._02 = 0;
			this14._03 = 0;
			this14._10 = 0;
			this14._11 = 0;
			this14._12 = 0;
			this14._13 = 0;
			this14._20 = 0;
			this14._21 = 0;
			this14._22 = 0;
			this14._23 = 0;
			this14._30 = 0;
			this14._31 = 0;
			this14._32 = 0;
			this14._33 = 0;
			var dest10 = this14;
			var _a2;
			var _b2;
			if(dest10 == a2) {
				var this15 = new glm_Mat4Base();
				this15._00 = 0;
				this15._01 = 0;
				this15._02 = 0;
				this15._03 = 0;
				this15._10 = 0;
				this15._11 = 0;
				this15._12 = 0;
				this15._13 = 0;
				this15._20 = 0;
				this15._21 = 0;
				this15._22 = 0;
				this15._23 = 0;
				this15._30 = 0;
				this15._31 = 0;
				this15._32 = 0;
				this15._33 = 0;
				var dest11 = this15;
				dest11._00 = a2._00;
				dest11._10 = a2._10;
				dest11._20 = a2._20;
				dest11._30 = a2._30;
				dest11._01 = a2._01;
				dest11._11 = a2._11;
				dest11._21 = a2._21;
				dest11._31 = a2._31;
				dest11._02 = a2._02;
				dest11._12 = a2._12;
				dest11._22 = a2._22;
				dest11._32 = a2._32;
				dest11._03 = a2._03;
				dest11._13 = a2._13;
				dest11._23 = a2._23;
				dest11._33 = a2._33;
				_a2 = dest11;
				_b2 = b2;
			} else if(dest10 == b2) {
				_a2 = a2;
				var this16 = new glm_Mat4Base();
				this16._00 = 0;
				this16._01 = 0;
				this16._02 = 0;
				this16._03 = 0;
				this16._10 = 0;
				this16._11 = 0;
				this16._12 = 0;
				this16._13 = 0;
				this16._20 = 0;
				this16._21 = 0;
				this16._22 = 0;
				this16._23 = 0;
				this16._30 = 0;
				this16._31 = 0;
				this16._32 = 0;
				this16._33 = 0;
				var dest12 = this16;
				dest12._00 = b2._00;
				dest12._10 = b2._10;
				dest12._20 = b2._20;
				dest12._30 = b2._30;
				dest12._01 = b2._01;
				dest12._11 = b2._11;
				dest12._21 = b2._21;
				dest12._31 = b2._31;
				dest12._02 = b2._02;
				dest12._12 = b2._12;
				dest12._22 = b2._22;
				dest12._32 = b2._32;
				dest12._03 = b2._03;
				dest12._13 = b2._13;
				dest12._23 = b2._23;
				dest12._33 = b2._33;
				_b2 = dest12;
			} else {
				_a2 = a2;
				_b2 = b2;
			}
			dest10._00 = _a2._00 * _b2._00 + _a2._10 * _b2._01 + _a2._20 * _b2._02 + _a2._30 * _b2._03;
			dest10._10 = _a2._00 * _b2._10 + _a2._10 * _b2._11 + _a2._20 * _b2._12 + _a2._30 * _b2._13;
			dest10._20 = _a2._00 * _b2._20 + _a2._10 * _b2._21 + _a2._20 * _b2._22 + _a2._30 * _b2._23;
			dest10._30 = _a2._00 * _b2._30 + _a2._10 * _b2._31 + _a2._20 * _b2._32 + _a2._30 * _b2._33;
			dest10._01 = _a2._01 * _b2._00 + _a2._11 * _b2._01 + _a2._21 * _b2._02 + _a2._31 * _b2._03;
			dest10._11 = _a2._01 * _b2._10 + _a2._11 * _b2._11 + _a2._21 * _b2._12 + _a2._31 * _b2._13;
			dest10._21 = _a2._01 * _b2._20 + _a2._11 * _b2._21 + _a2._21 * _b2._22 + _a2._31 * _b2._23;
			dest10._31 = _a2._01 * _b2._30 + _a2._11 * _b2._31 + _a2._21 * _b2._32 + _a2._31 * _b2._33;
			dest10._02 = _a2._02 * _b2._00 + _a2._12 * _b2._01 + _a2._22 * _b2._02 + _a2._32 * _b2._03;
			dest10._12 = _a2._02 * _b2._10 + _a2._12 * _b2._11 + _a2._22 * _b2._12 + _a2._32 * _b2._13;
			dest10._22 = _a2._02 * _b2._20 + _a2._12 * _b2._21 + _a2._22 * _b2._22 + _a2._32 * _b2._23;
			dest10._32 = _a2._02 * _b2._30 + _a2._12 * _b2._31 + _a2._22 * _b2._32 + _a2._32 * _b2._33;
			dest10._03 = _a2._03 * _b2._00 + _a2._13 * _b2._01 + _a2._23 * _b2._02 + _a2._33 * _b2._03;
			dest10._13 = _a2._03 * _b2._10 + _a2._13 * _b2._11 + _a2._23 * _b2._12 + _a2._33 * _b2._13;
			dest10._23 = _a2._03 * _b2._20 + _a2._13 * _b2._21 + _a2._23 * _b2._22 + _a2._33 * _b2._23;
			dest10._33 = _a2._03 * _b2._30 + _a2._13 * _b2._31 + _a2._23 * _b2._32 + _a2._33 * _b2._33;
			starNodesTransform.set_matrix(dest10);
		}
		return starNodes;
	}
	init() {
		var canvas = minko_WebCanvas.create("Minko Example - Stencil",800,600,2 | 16);
		var _gthis = this;
		var sceneManager = minko_component_SceneManager.create(canvas);
		var assets = sceneManager.get_assets();
		var tmp = sceneManager.get_assets();
		var context = sceneManager.get_assets().get_context();
		var ptr = new example_StarGeometry();
		ptr.initialize(context,5,0.5,0.325);
		var tmp1 = tmp.setGeometry("bigStar",ptr);
		var context1 = sceneManager.get_assets().get_context();
		var ptr1 = new example_StarGeometry();
		ptr1.initialize(context1,5,0.5,0.25);
		tmp1.setGeometry("smallStar",ptr1).setGeometry("quad",minko_geometry_QuadGeometry.create(sceneManager.get_assets().get_context()));
		sceneManager.get_assets().get_loader().queue("effect/Basic.effect");
		var numSmallStars = 30;
		var smallStars = [];
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(this.generateHexColor())).addComponent(minko_component_PerspectiveCamera.create(canvas.get_aspectRatio())).addComponent(minko_component_Transform.create());
		var cameraTransform = camera.getComponent(minko_component_Transform);
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 3.0;
		var this2 = new glm_Vec3Base();
		this2.x = 0.0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		cameraTransform.set_matrix(dest);
		var bigStarNode = minko_scene_Node.create("bigStarNode").addComponent(minko_component_Transform.create());
		var quadNode = minko_scene_Node.create("quadNode").addComponent(minko_component_Transform.create());
		root.addChild(camera);
		var _ = sceneManager.get_assets().get_loader().get_complete().connect(function(loader) {
			var bigStarNodeBasicMaterial = minko_material_BasicMaterial.create();
			var this6 = new glm_Vec4Base();
			this6.x = 1.0;
			this6.y = 1.0;
			this6.z = 1.0;
			this6.w = 1.0;
			bigStarNodeBasicMaterial.set_diffuseColor(this6);
			bigStarNodeBasicMaterial.set_colorMask(false);
			bigStarNodeBasicMaterial.set_depthMask(false);
			bigStarNodeBasicMaterial.set_depthFunction(0);
			bigStarNodeBasicMaterial.set_stencilFunction(6);
			bigStarNodeBasicMaterial.set_stencilReference(1);
			bigStarNodeBasicMaterial.set_stencilMask(255);
			bigStarNodeBasicMaterial.set_stencilFailOperation(2);
			bigStarNodeBasicMaterial.set_triangleCulling(2);
			var _1 = minko_component_Surface.create(assets.geometry("bigStar"),bigStarNodeBasicMaterial,assets.effect("effect/Basic.effect"));
			bigStarNode.addComponent(_1);
			var bigStarNodeTransform = bigStarNode.getComponent(minko_component_Transform);
			var this7 = new glm_Vec3Base();
			this7.x = 2.5;
			this7.y = 2.5;
			this7.z = 2.5;
			var amount = this7;
			var this8 = new glm_Mat4Base();
			this8._00 = 0;
			this8._01 = 0;
			this8._02 = 0;
			this8._03 = 0;
			this8._10 = 0;
			this8._11 = 0;
			this8._12 = 0;
			this8._13 = 0;
			this8._20 = 0;
			this8._21 = 0;
			this8._22 = 0;
			this8._23 = 0;
			this8._30 = 0;
			this8._31 = 0;
			this8._32 = 0;
			this8._33 = 0;
			var dest1 = this8;
			dest1._00 = 1;
			dest1._10 = 0;
			dest1._20 = 0;
			dest1._30 = 0;
			dest1._01 = 0;
			dest1._11 = 1;
			dest1._21 = 0;
			dest1._31 = 0;
			dest1._02 = 0;
			dest1._12 = 0;
			dest1._22 = 1;
			dest1._32 = 0;
			dest1._03 = 0;
			dest1._13 = 0;
			dest1._23 = 0;
			dest1._33 = 1;
			dest1._00 = amount.x;
			dest1._11 = amount.y;
			dest1._22 = amount.z;
			var a = dest1;
			var b = bigStarNodeTransform.get_matrix();
			var this9 = new glm_Mat4Base();
			this9._00 = 0;
			this9._01 = 0;
			this9._02 = 0;
			this9._03 = 0;
			this9._10 = 0;
			this9._11 = 0;
			this9._12 = 0;
			this9._13 = 0;
			this9._20 = 0;
			this9._21 = 0;
			this9._22 = 0;
			this9._23 = 0;
			this9._30 = 0;
			this9._31 = 0;
			this9._32 = 0;
			this9._33 = 0;
			var dest2 = this9;
			var _a;
			var _b;
			if(dest2 == a) {
				var this10 = new glm_Mat4Base();
				this10._00 = 0;
				this10._01 = 0;
				this10._02 = 0;
				this10._03 = 0;
				this10._10 = 0;
				this10._11 = 0;
				this10._12 = 0;
				this10._13 = 0;
				this10._20 = 0;
				this10._21 = 0;
				this10._22 = 0;
				this10._23 = 0;
				this10._30 = 0;
				this10._31 = 0;
				this10._32 = 0;
				this10._33 = 0;
				var dest3 = this10;
				dest3._00 = a._00;
				dest3._10 = a._10;
				dest3._20 = a._20;
				dest3._30 = a._30;
				dest3._01 = a._01;
				dest3._11 = a._11;
				dest3._21 = a._21;
				dest3._31 = a._31;
				dest3._02 = a._02;
				dest3._12 = a._12;
				dest3._22 = a._22;
				dest3._32 = a._32;
				dest3._03 = a._03;
				dest3._13 = a._13;
				dest3._23 = a._23;
				dest3._33 = a._33;
				_a = dest3;
				_b = b;
			} else if(dest2 == b) {
				_a = a;
				var this11 = new glm_Mat4Base();
				this11._00 = 0;
				this11._01 = 0;
				this11._02 = 0;
				this11._03 = 0;
				this11._10 = 0;
				this11._11 = 0;
				this11._12 = 0;
				this11._13 = 0;
				this11._20 = 0;
				this11._21 = 0;
				this11._22 = 0;
				this11._23 = 0;
				this11._30 = 0;
				this11._31 = 0;
				this11._32 = 0;
				this11._33 = 0;
				var dest4 = this11;
				dest4._00 = b._00;
				dest4._10 = b._10;
				dest4._20 = b._20;
				dest4._30 = b._30;
				dest4._01 = b._01;
				dest4._11 = b._11;
				dest4._21 = b._21;
				dest4._31 = b._31;
				dest4._02 = b._02;
				dest4._12 = b._12;
				dest4._22 = b._22;
				dest4._32 = b._32;
				dest4._03 = b._03;
				dest4._13 = b._13;
				dest4._23 = b._23;
				dest4._33 = b._33;
				_b = dest4;
			} else {
				_a = a;
				_b = b;
			}
			dest2._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest2._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest2._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest2._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest2._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest2._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest2._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest2._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest2._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest2._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest2._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest2._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest2._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest2._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest2._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest2._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			bigStarNodeTransform.set_matrix(dest2);
			var quadNodeBasicMaterial = minko_material_BasicMaterial.create();
			quadNodeBasicMaterial.set_diffuseColor(_gthis.generateColor());
			quadNodeBasicMaterial.set_colorMask(true);
			quadNodeBasicMaterial.set_depthMask(false);
			quadNodeBasicMaterial.set_depthFunction(0);
			quadNodeBasicMaterial.set_stencilFunction(1);
			quadNodeBasicMaterial.set_stencilReference(1);
			quadNodeBasicMaterial.set_stencilMask(255);
			quadNodeBasicMaterial.set_stencilFailOperation(0);
			quadNodeBasicMaterial.set_triangleCulling(2);
			var _2 = minko_component_Surface.create(assets.geometry("quad"),quadNodeBasicMaterial,assets.effect("effect/Basic.effect"));
			quadNode.addComponent(_2);
			var quadNodeTransform = quadNode.getComponent(minko_component_Transform);
			var this12 = new glm_Vec3Base();
			this12.x = 4;
			this12.y = 4;
			this12.z = 4;
			var amount1 = this12;
			var this13 = new glm_Mat4Base();
			this13._00 = 0;
			this13._01 = 0;
			this13._02 = 0;
			this13._03 = 0;
			this13._10 = 0;
			this13._11 = 0;
			this13._12 = 0;
			this13._13 = 0;
			this13._20 = 0;
			this13._21 = 0;
			this13._22 = 0;
			this13._23 = 0;
			this13._30 = 0;
			this13._31 = 0;
			this13._32 = 0;
			this13._33 = 0;
			var dest5 = this13;
			dest5._00 = 1;
			dest5._10 = 0;
			dest5._20 = 0;
			dest5._30 = 0;
			dest5._01 = 0;
			dest5._11 = 1;
			dest5._21 = 0;
			dest5._31 = 0;
			dest5._02 = 0;
			dest5._12 = 0;
			dest5._22 = 1;
			dest5._32 = 0;
			dest5._03 = 0;
			dest5._13 = 0;
			dest5._23 = 0;
			dest5._33 = 1;
			dest5._00 = amount1.x;
			dest5._11 = amount1.y;
			dest5._22 = amount1.z;
			var a1 = dest5;
			var b1 = bigStarNodeTransform.get_matrix();
			var this14 = new glm_Mat4Base();
			this14._00 = 0;
			this14._01 = 0;
			this14._02 = 0;
			this14._03 = 0;
			this14._10 = 0;
			this14._11 = 0;
			this14._12 = 0;
			this14._13 = 0;
			this14._20 = 0;
			this14._21 = 0;
			this14._22 = 0;
			this14._23 = 0;
			this14._30 = 0;
			this14._31 = 0;
			this14._32 = 0;
			this14._33 = 0;
			var dest6 = this14;
			var _a1;
			var _b1;
			if(dest6 == a1) {
				var this15 = new glm_Mat4Base();
				this15._00 = 0;
				this15._01 = 0;
				this15._02 = 0;
				this15._03 = 0;
				this15._10 = 0;
				this15._11 = 0;
				this15._12 = 0;
				this15._13 = 0;
				this15._20 = 0;
				this15._21 = 0;
				this15._22 = 0;
				this15._23 = 0;
				this15._30 = 0;
				this15._31 = 0;
				this15._32 = 0;
				this15._33 = 0;
				var dest7 = this15;
				dest7._00 = a1._00;
				dest7._10 = a1._10;
				dest7._20 = a1._20;
				dest7._30 = a1._30;
				dest7._01 = a1._01;
				dest7._11 = a1._11;
				dest7._21 = a1._21;
				dest7._31 = a1._31;
				dest7._02 = a1._02;
				dest7._12 = a1._12;
				dest7._22 = a1._22;
				dest7._32 = a1._32;
				dest7._03 = a1._03;
				dest7._13 = a1._13;
				dest7._23 = a1._23;
				dest7._33 = a1._33;
				_a1 = dest7;
				_b1 = b1;
			} else if(dest6 == b1) {
				_a1 = a1;
				var this16 = new glm_Mat4Base();
				this16._00 = 0;
				this16._01 = 0;
				this16._02 = 0;
				this16._03 = 0;
				this16._10 = 0;
				this16._11 = 0;
				this16._12 = 0;
				this16._13 = 0;
				this16._20 = 0;
				this16._21 = 0;
				this16._22 = 0;
				this16._23 = 0;
				this16._30 = 0;
				this16._31 = 0;
				this16._32 = 0;
				this16._33 = 0;
				var dest8 = this16;
				dest8._00 = b1._00;
				dest8._10 = b1._10;
				dest8._20 = b1._20;
				dest8._30 = b1._30;
				dest8._01 = b1._01;
				dest8._11 = b1._11;
				dest8._21 = b1._21;
				dest8._31 = b1._31;
				dest8._02 = b1._02;
				dest8._12 = b1._12;
				dest8._22 = b1._22;
				dest8._32 = b1._32;
				dest8._03 = b1._03;
				dest8._13 = b1._13;
				dest8._23 = b1._23;
				dest8._33 = b1._33;
				_b1 = dest8;
			} else {
				_a1 = a1;
				_b1 = b1;
			}
			dest6._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
			dest6._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
			dest6._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
			dest6._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
			dest6._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
			dest6._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
			dest6._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
			dest6._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
			dest6._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
			dest6._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
			dest6._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
			dest6._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
			dest6._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
			dest6._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
			dest6._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
			dest6._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
			quadNodeTransform.set_matrix(dest6);
			var smallStars1 = sceneManager.get_assets();
			smallStars = _gthis.generateStars(numSmallStars,smallStars1);
			root.addChild(bigStarNode);
			root.addChild(quadNode);
			var _g = 0;
			while(_g < smallStars.length) {
				var star = smallStars[_g];
				++_g;
				root.addChild(star);
			}
			var enterFrame = canvas.get_enterFrame().connect(function(canvas1,time,deltaTime) {
				var bigStarNodeTransform1 = bigStarNode.getComponent(minko_component_Transform);
				var this17 = new glm_Vec3Base();
				this17.x = 0.0;
				this17.y = 0.0;
				this17.z = 1.0;
				var axis = this17;
				var angle = .001;
				var this18 = new glm_QuatBase();
				this18.x = 0;
				this18.y = 0;
				this18.z = 0;
				this18.w = 1;
				var dest9 = this18;
				angle *= 0.5;
				var s = Math.sin(angle);
				dest9.x = s * axis.x;
				dest9.y = s * axis.y;
				dest9.z = s * axis.z;
				dest9.w = Math.cos(angle);
				var rotation = dest9;
				var this19 = new glm_Mat4Base();
				this19._00 = 0;
				this19._01 = 0;
				this19._02 = 0;
				this19._03 = 0;
				this19._10 = 0;
				this19._11 = 0;
				this19._12 = 0;
				this19._13 = 0;
				this19._20 = 0;
				this19._21 = 0;
				this19._22 = 0;
				this19._23 = 0;
				this19._30 = 0;
				this19._31 = 0;
				this19._32 = 0;
				this19._33 = 0;
				var dest10 = this19;
				var x2 = rotation.x + rotation.x;
				var y2 = rotation.y + rotation.y;
				var z2 = rotation.z + rotation.z;
				var xx = rotation.x * x2;
				var xy = rotation.x * y2;
				var xz = rotation.x * z2;
				var yy = rotation.y * y2;
				var yz = rotation.y * z2;
				var zz = rotation.z * z2;
				var wx = rotation.w * x2;
				var wy = rotation.w * y2;
				var wz = rotation.w * z2;
				dest10._00 = 1 - (yy + zz);
				dest10._10 = xy - wz;
				dest10._20 = xz + wy;
				dest10._30 = 0;
				dest10._01 = xy + wz;
				dest10._11 = 1 - (xx + zz);
				dest10._21 = yz - wx;
				dest10._31 = 0;
				dest10._02 = xz - wy;
				dest10._12 = yz + wx;
				dest10._22 = 1 - (xx + yy);
				dest10._32 = 0;
				dest10._03 = 0;
				dest10._13 = 0;
				dest10._23 = 0;
				dest10._33 = 1;
				var a2 = dest10;
				var b2 = bigStarNodeTransform1.get_matrix();
				var this20 = new glm_Mat4Base();
				this20._00 = 0;
				this20._01 = 0;
				this20._02 = 0;
				this20._03 = 0;
				this20._10 = 0;
				this20._11 = 0;
				this20._12 = 0;
				this20._13 = 0;
				this20._20 = 0;
				this20._21 = 0;
				this20._22 = 0;
				this20._23 = 0;
				this20._30 = 0;
				this20._31 = 0;
				this20._32 = 0;
				this20._33 = 0;
				var dest11 = this20;
				var _a2;
				var _b2;
				if(dest11 == a2) {
					var this21 = new glm_Mat4Base();
					this21._00 = 0;
					this21._01 = 0;
					this21._02 = 0;
					this21._03 = 0;
					this21._10 = 0;
					this21._11 = 0;
					this21._12 = 0;
					this21._13 = 0;
					this21._20 = 0;
					this21._21 = 0;
					this21._22 = 0;
					this21._23 = 0;
					this21._30 = 0;
					this21._31 = 0;
					this21._32 = 0;
					this21._33 = 0;
					var dest12 = this21;
					dest12._00 = a2._00;
					dest12._10 = a2._10;
					dest12._20 = a2._20;
					dest12._30 = a2._30;
					dest12._01 = a2._01;
					dest12._11 = a2._11;
					dest12._21 = a2._21;
					dest12._31 = a2._31;
					dest12._02 = a2._02;
					dest12._12 = a2._12;
					dest12._22 = a2._22;
					dest12._32 = a2._32;
					dest12._03 = a2._03;
					dest12._13 = a2._13;
					dest12._23 = a2._23;
					dest12._33 = a2._33;
					_a2 = dest12;
					_b2 = b2;
				} else if(dest11 == b2) {
					_a2 = a2;
					var this22 = new glm_Mat4Base();
					this22._00 = 0;
					this22._01 = 0;
					this22._02 = 0;
					this22._03 = 0;
					this22._10 = 0;
					this22._11 = 0;
					this22._12 = 0;
					this22._13 = 0;
					this22._20 = 0;
					this22._21 = 0;
					this22._22 = 0;
					this22._23 = 0;
					this22._30 = 0;
					this22._31 = 0;
					this22._32 = 0;
					this22._33 = 0;
					var dest13 = this22;
					dest13._00 = b2._00;
					dest13._10 = b2._10;
					dest13._20 = b2._20;
					dest13._30 = b2._30;
					dest13._01 = b2._01;
					dest13._11 = b2._11;
					dest13._21 = b2._21;
					dest13._31 = b2._31;
					dest13._02 = b2._02;
					dest13._12 = b2._12;
					dest13._22 = b2._22;
					dest13._32 = b2._32;
					dest13._03 = b2._03;
					dest13._13 = b2._13;
					dest13._23 = b2._23;
					dest13._33 = b2._33;
					_b2 = dest13;
				} else {
					_a2 = a2;
					_b2 = b2;
				}
				dest11._00 = _a2._00 * _b2._00 + _a2._10 * _b2._01 + _a2._20 * _b2._02 + _a2._30 * _b2._03;
				dest11._10 = _a2._00 * _b2._10 + _a2._10 * _b2._11 + _a2._20 * _b2._12 + _a2._30 * _b2._13;
				dest11._20 = _a2._00 * _b2._20 + _a2._10 * _b2._21 + _a2._20 * _b2._22 + _a2._30 * _b2._23;
				dest11._30 = _a2._00 * _b2._30 + _a2._10 * _b2._31 + _a2._20 * _b2._32 + _a2._30 * _b2._33;
				dest11._01 = _a2._01 * _b2._00 + _a2._11 * _b2._01 + _a2._21 * _b2._02 + _a2._31 * _b2._03;
				dest11._11 = _a2._01 * _b2._10 + _a2._11 * _b2._11 + _a2._21 * _b2._12 + _a2._31 * _b2._13;
				dest11._21 = _a2._01 * _b2._20 + _a2._11 * _b2._21 + _a2._21 * _b2._22 + _a2._31 * _b2._23;
				dest11._31 = _a2._01 * _b2._30 + _a2._11 * _b2._31 + _a2._21 * _b2._32 + _a2._31 * _b2._33;
				dest11._02 = _a2._02 * _b2._00 + _a2._12 * _b2._01 + _a2._22 * _b2._02 + _a2._32 * _b2._03;
				dest11._12 = _a2._02 * _b2._10 + _a2._12 * _b2._11 + _a2._22 * _b2._12 + _a2._32 * _b2._13;
				dest11._22 = _a2._02 * _b2._20 + _a2._12 * _b2._21 + _a2._22 * _b2._22 + _a2._32 * _b2._23;
				dest11._32 = _a2._02 * _b2._30 + _a2._12 * _b2._31 + _a2._22 * _b2._32 + _a2._32 * _b2._33;
				dest11._03 = _a2._03 * _b2._00 + _a2._13 * _b2._01 + _a2._23 * _b2._02 + _a2._33 * _b2._03;
				dest11._13 = _a2._03 * _b2._10 + _a2._13 * _b2._11 + _a2._23 * _b2._12 + _a2._33 * _b2._13;
				dest11._23 = _a2._03 * _b2._20 + _a2._13 * _b2._21 + _a2._23 * _b2._22 + _a2._33 * _b2._23;
				dest11._33 = _a2._03 * _b2._30 + _a2._13 * _b2._31 + _a2._23 * _b2._32 + _a2._33 * _b2._33;
				bigStarNodeTransform1.set_matrix(dest11);
				var _g1 = 0;
				while(_g1 < smallStars.length) {
					var star1 = smallStars[_g1];
					++_g1;
					var starTransform = star1.getComponent(minko_component_Transform);
					var a3 = starTransform.get_matrix();
					var this23 = new glm_Vec3Base();
					this23.x = 0.0;
					this23.y = 0.0;
					this23.z = 1.0;
					var axis1 = this23;
					var angle1 = -0.025;
					var this24 = new glm_QuatBase();
					this24.x = 0;
					this24.y = 0;
					this24.z = 0;
					this24.w = 1;
					var dest14 = this24;
					angle1 *= 0.5;
					var s1 = Math.sin(angle1);
					dest14.x = s1 * axis1.x;
					dest14.y = s1 * axis1.y;
					dest14.z = s1 * axis1.z;
					dest14.w = Math.cos(angle1);
					var rotation1 = dest14;
					var this25 = new glm_Mat4Base();
					this25._00 = 0;
					this25._01 = 0;
					this25._02 = 0;
					this25._03 = 0;
					this25._10 = 0;
					this25._11 = 0;
					this25._12 = 0;
					this25._13 = 0;
					this25._20 = 0;
					this25._21 = 0;
					this25._22 = 0;
					this25._23 = 0;
					this25._30 = 0;
					this25._31 = 0;
					this25._32 = 0;
					this25._33 = 0;
					var dest15 = this25;
					var x21 = rotation1.x + rotation1.x;
					var y21 = rotation1.y + rotation1.y;
					var z21 = rotation1.z + rotation1.z;
					var xx1 = rotation1.x * x21;
					var xy1 = rotation1.x * y21;
					var xz1 = rotation1.x * z21;
					var yy1 = rotation1.y * y21;
					var yz1 = rotation1.y * z21;
					var zz1 = rotation1.z * z21;
					var wx1 = rotation1.w * x21;
					var wy1 = rotation1.w * y21;
					var wz1 = rotation1.w * z21;
					dest15._00 = 1 - (yy1 + zz1);
					dest15._10 = xy1 - wz1;
					dest15._20 = xz1 + wy1;
					dest15._30 = 0;
					dest15._01 = xy1 + wz1;
					dest15._11 = 1 - (xx1 + zz1);
					dest15._21 = yz1 - wx1;
					dest15._31 = 0;
					dest15._02 = xz1 - wy1;
					dest15._12 = yz1 + wx1;
					dest15._22 = 1 - (xx1 + yy1);
					dest15._32 = 0;
					dest15._03 = 0;
					dest15._13 = 0;
					dest15._23 = 0;
					dest15._33 = 1;
					var b3 = dest15;
					var this26 = new glm_Mat4Base();
					this26._00 = 0;
					this26._01 = 0;
					this26._02 = 0;
					this26._03 = 0;
					this26._10 = 0;
					this26._11 = 0;
					this26._12 = 0;
					this26._13 = 0;
					this26._20 = 0;
					this26._21 = 0;
					this26._22 = 0;
					this26._23 = 0;
					this26._30 = 0;
					this26._31 = 0;
					this26._32 = 0;
					this26._33 = 0;
					var dest16 = this26;
					var _a3;
					var _b3;
					if(dest16 == a3) {
						var this27 = new glm_Mat4Base();
						this27._00 = 0;
						this27._01 = 0;
						this27._02 = 0;
						this27._03 = 0;
						this27._10 = 0;
						this27._11 = 0;
						this27._12 = 0;
						this27._13 = 0;
						this27._20 = 0;
						this27._21 = 0;
						this27._22 = 0;
						this27._23 = 0;
						this27._30 = 0;
						this27._31 = 0;
						this27._32 = 0;
						this27._33 = 0;
						var dest17 = this27;
						dest17._00 = a3._00;
						dest17._10 = a3._10;
						dest17._20 = a3._20;
						dest17._30 = a3._30;
						dest17._01 = a3._01;
						dest17._11 = a3._11;
						dest17._21 = a3._21;
						dest17._31 = a3._31;
						dest17._02 = a3._02;
						dest17._12 = a3._12;
						dest17._22 = a3._22;
						dest17._32 = a3._32;
						dest17._03 = a3._03;
						dest17._13 = a3._13;
						dest17._23 = a3._23;
						dest17._33 = a3._33;
						_a3 = dest17;
						_b3 = b3;
					} else if(dest16 == b3) {
						_a3 = a3;
						var this28 = new glm_Mat4Base();
						this28._00 = 0;
						this28._01 = 0;
						this28._02 = 0;
						this28._03 = 0;
						this28._10 = 0;
						this28._11 = 0;
						this28._12 = 0;
						this28._13 = 0;
						this28._20 = 0;
						this28._21 = 0;
						this28._22 = 0;
						this28._23 = 0;
						this28._30 = 0;
						this28._31 = 0;
						this28._32 = 0;
						this28._33 = 0;
						var dest18 = this28;
						dest18._00 = b3._00;
						dest18._10 = b3._10;
						dest18._20 = b3._20;
						dest18._30 = b3._30;
						dest18._01 = b3._01;
						dest18._11 = b3._11;
						dest18._21 = b3._21;
						dest18._31 = b3._31;
						dest18._02 = b3._02;
						dest18._12 = b3._12;
						dest18._22 = b3._22;
						dest18._32 = b3._32;
						dest18._03 = b3._03;
						dest18._13 = b3._13;
						dest18._23 = b3._23;
						dest18._33 = b3._33;
						_b3 = dest18;
					} else {
						_a3 = a3;
						_b3 = b3;
					}
					dest16._00 = _a3._00 * _b3._00 + _a3._10 * _b3._01 + _a3._20 * _b3._02 + _a3._30 * _b3._03;
					dest16._10 = _a3._00 * _b3._10 + _a3._10 * _b3._11 + _a3._20 * _b3._12 + _a3._30 * _b3._13;
					dest16._20 = _a3._00 * _b3._20 + _a3._10 * _b3._21 + _a3._20 * _b3._22 + _a3._30 * _b3._23;
					dest16._30 = _a3._00 * _b3._30 + _a3._10 * _b3._31 + _a3._20 * _b3._32 + _a3._30 * _b3._33;
					dest16._01 = _a3._01 * _b3._00 + _a3._11 * _b3._01 + _a3._21 * _b3._02 + _a3._31 * _b3._03;
					dest16._11 = _a3._01 * _b3._10 + _a3._11 * _b3._11 + _a3._21 * _b3._12 + _a3._31 * _b3._13;
					dest16._21 = _a3._01 * _b3._20 + _a3._11 * _b3._21 + _a3._21 * _b3._22 + _a3._31 * _b3._23;
					dest16._31 = _a3._01 * _b3._30 + _a3._11 * _b3._31 + _a3._21 * _b3._32 + _a3._31 * _b3._33;
					dest16._02 = _a3._02 * _b3._00 + _a3._12 * _b3._01 + _a3._22 * _b3._02 + _a3._32 * _b3._03;
					dest16._12 = _a3._02 * _b3._10 + _a3._12 * _b3._11 + _a3._22 * _b3._12 + _a3._32 * _b3._13;
					dest16._22 = _a3._02 * _b3._20 + _a3._12 * _b3._21 + _a3._22 * _b3._22 + _a3._32 * _b3._23;
					dest16._32 = _a3._02 * _b3._30 + _a3._12 * _b3._31 + _a3._22 * _b3._32 + _a3._32 * _b3._33;
					dest16._03 = _a3._03 * _b3._00 + _a3._13 * _b3._01 + _a3._23 * _b3._02 + _a3._33 * _b3._03;
					dest16._13 = _a3._03 * _b3._10 + _a3._13 * _b3._11 + _a3._23 * _b3._12 + _a3._33 * _b3._13;
					dest16._23 = _a3._03 * _b3._20 + _a3._13 * _b3._21 + _a3._23 * _b3._22 + _a3._33 * _b3._23;
					dest16._33 = _a3._03 * _b3._30 + _a3._13 * _b3._31 + _a3._23 * _b3._32 + _a3._33 * _b3._33;
					starTransform.set_matrix(dest16);
				}
				sceneManager.nextFrame(time,deltaTime);
			});
		});
		sceneManager.get_assets().get_loader().load();
		canvas.run();
	}
}
example_ExampleStencil.__name__ = true;
Object.assign(example_ExampleStencil.prototype, {
	__class__: example_ExampleStencil
});
class example_ExampleWater {
	constructor() {
		this.init();
	}
	init() {
		var canvas = minko_WebCanvas.create("Minko Example - Water");
		var sceneManager = minko_component_SceneManager.create(canvas);
		var assets = sceneManager.get_assets();
		canvas.get_context().set_errorsEnabled(true);
		assets.get_loader().get_options().set_resizeSmoothly(true);
		assets.get_loader().get_options().set_generateMipmaps(true);
		assets.get_loader().get_options().registerParser("png",function() {
			return new minko_file_PNGParser();
		});
		assets.get_loader().get_options().registerParser("jpg",function() {
			return new minko_file_JPEGParser();
		});
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(2139062271));
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var this2 = new glm_Vec3Base();
		this2.x = 3.0;
		this2.y = 3.0;
		this2.z = 3.0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest)).addComponent(minko_component_PerspectiveCamera.create(canvas.get_aspectRatio()));
		var fxLoader = minko_file_Loader.createbyLoader(sceneManager.get_assets().get_loader()).queue("effect/Phong.effect");
		var fxComplete = fxLoader.get_complete().connect(function(l) {
			assets.get_loader().queue("texture/skybox_texture-diffuse.jpg").queue("effect/Skybox/Skybox.effect").queue("texture/normalmap.png").queue("effect/Water/Water.effect").load();
		});
		var _ = assets.get_loader().get_complete().connect(function(loader) {
			root.addChild(camera1);
			var this6 = new glm_Vec4Base();
			this6.x = .9;
			this6.y = .9;
			this6.z = .9;
			this6.w = 1.0;
			var fogColor = this6;
			var sky = minko_scene_Node.create();
			var sky1 = minko_geometry_SphereGeometry.create(assets.get_context(),16,16);
			var sky2 = minko_material_Material.create();
			var sky3 = assets.texture("texture/skybox_texture-diffuse.jpg");
			var this7 = new glm_Vec3Base();
			this7.x = 1.;
			this7.y = 0.;
			this7.z = 0.;
			var sky4 = sky.addComponent(minko_component_Surface.create(sky1,sky2.setbyKeyObject({ "diffuseLatLongMap" : sky3, "gammaCorrection" : 2.2, "fogColor" : fogColor, "sunDirection" : this7, "reileighCoefficient" : 1., "mieCoefficient" : .053, "mieDirectionalG" : .75, "turbidity" : 1.}),assets.effect("effect/Skybox/Skybox.effect")));
			root.addChild(sky4);
			var waterMaterial = minko_material_WaterMaterial.createWaves(5);
			waterMaterial.set_normalMap(assets.texture("texture/normalmap.png"));
			waterMaterial.diffuseColorRGBA(1061887);
			waterMaterial.set_shininess(64.0);
			waterMaterial.specularColorRGBA(-205);
			waterMaterial.setAmplitude(0,1.43);
			waterMaterial.setAmplitude(1,.373);
			waterMaterial.setAmplitude(2,.112);
			waterMaterial.setAmplitude(3,.187);
			waterMaterial.setAmplitude(4,1.0);
			waterMaterial.setWaveLength(0,50.0);
			waterMaterial.setWaveLength(1,17.7);
			waterMaterial.setWaveLength(2,13.13);
			waterMaterial.setWaveLength(3,40.17);
			waterMaterial.setWaveLength(4,100.0);
			waterMaterial.setSpeed(0,7.4);
			waterMaterial.setSpeed(1,8.8);
			waterMaterial.setSpeed(2,3.2);
			waterMaterial.setSpeed(3,4.6);
			waterMaterial.setSpeed(4,6.0);
			var this8 = new glm_Vec2Base();
			this8.x = 1.0;
			this8.y = 1.0;
			waterMaterial.setDirection(0,this8);
			var this9 = new glm_Vec2Base();
			this9.x = 0.1;
			this9.y = 1.0;
			waterMaterial.setDirection(1,this9);
			var this10 = new glm_Vec2Base();
			this10.x = 1000.0;
			this10.y = -1000.0;
			waterMaterial.setCenter(2,this10);
			var this11 = new glm_Vec2Base();
			this11.x = 1000.0;
			this11.y = 1000.0;
			waterMaterial.setCenter(3,this11);
			var this12 = new glm_Vec2Base();
			this12.x = 1.0;
			this12.y = 0.0;
			waterMaterial.setDirection(4,this12);
			waterMaterial.setSharpness(0,.5);
			waterMaterial.setSharpness(1,.5);
			waterMaterial.setSharpness(2,.3);
			waterMaterial.setSharpness(3,.5);
			waterMaterial.setSharpness(4,.5);
			var waves = minko_scene_Node.create("waves");
			var this13 = new glm_Vec3Base();
			this13.x = 1.0;
			this13.y = 0.0;
			this13.z = 0.0;
			var axis = this13;
			var angle = -Math.PI / 2.0;
			var this14 = new glm_QuatBase();
			this14.x = 0;
			this14.y = 0;
			this14.z = 0;
			this14.w = 1;
			var dest1 = this14;
			angle *= 0.5;
			var s = Math.sin(angle);
			dest1.x = s * axis.x;
			dest1.y = s * axis.y;
			dest1.z = s * axis.z;
			dest1.w = Math.cos(angle);
			var rotation = dest1;
			var this15 = new glm_Mat4Base();
			this15._00 = 0;
			this15._01 = 0;
			this15._02 = 0;
			this15._03 = 0;
			this15._10 = 0;
			this15._11 = 0;
			this15._12 = 0;
			this15._13 = 0;
			this15._20 = 0;
			this15._21 = 0;
			this15._22 = 0;
			this15._23 = 0;
			this15._30 = 0;
			this15._31 = 0;
			this15._32 = 0;
			this15._33 = 0;
			var dest2 = this15;
			var x2 = rotation.x + rotation.x;
			var y2 = rotation.y + rotation.y;
			var z2 = rotation.z + rotation.z;
			var xx = rotation.x * x2;
			var xy = rotation.x * y2;
			var xz = rotation.x * z2;
			var yy = rotation.y * y2;
			var yz = rotation.y * z2;
			var zz = rotation.z * z2;
			var wx = rotation.w * x2;
			var wy = rotation.w * y2;
			var wz = rotation.w * z2;
			dest2._00 = 1 - (yy + zz);
			dest2._10 = xy - wz;
			dest2._20 = xz + wy;
			dest2._30 = 0;
			dest2._01 = xy + wz;
			dest2._11 = 1 - (xx + zz);
			dest2._21 = yz - wx;
			dest2._31 = 0;
			dest2._02 = xz - wy;
			dest2._12 = yz + wx;
			dest2._22 = 1 - (xx + yy);
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			var waves1 = waves.addComponent(minko_component_Transform.createbyMatrix4(dest2));
			var waves2 = minko_geometry_QuadGeometry.create(assets.get_context(),200,200,1000,1000);
			var this16 = new glm_Vec2Base();
			this16.x = 300.0;
			this16.y = 500.0;
			var this17 = new glm_Vec2Base();
			this17.x = 2.0;
			this17.y = 2.0;
			var waves3 = waves1.addComponent(minko_component_Surface.create(waves2,waterMaterial.setbyKeyObject({ "fogTechnique" : 1, "fogBounds" : this16, "fogColor" : fogColor, "uvScale" : this17, "environmentMap2d" : assets.texture("texture/skybox_texture-diffuse.jpg"), "gammaCorrection" : 2.2}),assets.effect("effect/Water/Water.effect")));
			root.addChild(waves3);
			var _1 = minko_scene_Node.create().addComponent(minko_component_DirectionalLight.create(0.8,.8));
			var this18 = new glm_Vec3Base();
			this18.x = -.8;
			this18.y = 1.0;
			this18.z = 0.0;
			var this19 = new glm_Vec3Base();
			this19.x = 0.0;
			this19.y = 0;
			this19.z = 0;
			var this20 = new glm_Vec3Base();
			this20.x = 0.0;
			this20.y = 1.0;
			this20.z = 0.0;
			var this21 = new glm_Mat4Base();
			this21._00 = 0;
			this21._01 = 0;
			this21._02 = 0;
			this21._03 = 0;
			this21._10 = 0;
			this21._11 = 0;
			this21._12 = 0;
			this21._13 = 0;
			this21._20 = 0;
			this21._21 = 0;
			this21._22 = 0;
			this21._23 = 0;
			this21._30 = 0;
			this21._31 = 0;
			this21._32 = 0;
			this21._33 = 0;
			var src1 = glm_GLM.lookAt(this18,this19,this20,this21);
			var this22 = new glm_Mat4Base();
			this22._00 = 0;
			this22._01 = 0;
			this22._02 = 0;
			this22._03 = 0;
			this22._10 = 0;
			this22._11 = 0;
			this22._12 = 0;
			this22._13 = 0;
			this22._20 = 0;
			this22._21 = 0;
			this22._22 = 0;
			this22._23 = 0;
			this22._30 = 0;
			this22._31 = 0;
			this22._32 = 0;
			this22._33 = 0;
			var dest3 = this22;
			var a001 = src1._00;
			var a011 = src1._10;
			var a021 = src1._20;
			var a031 = src1._30;
			var a101 = src1._01;
			var a111 = src1._11;
			var a121 = src1._21;
			var a131 = src1._31;
			var a201 = src1._02;
			var a211 = src1._12;
			var a221 = src1._22;
			var a231 = src1._32;
			var a301 = src1._03;
			var a311 = src1._13;
			var a321 = src1._23;
			var a331 = src1._33;
			var t001 = a121 * a231 * a311 - a131 * a221 * a311 + a131 * a211 * a321 - a111 * a231 * a321 - a121 * a211 * a331 + a111 * a221 * a331;
			var t011 = a031 * a221 * a311 - a021 * a231 * a311 - a031 * a211 * a321 + a011 * a231 * a321 + a021 * a211 * a331 - a011 * a221 * a331;
			var t021 = a021 * a131 * a311 - a031 * a121 * a311 + a031 * a111 * a321 - a011 * a131 * a321 - a021 * a111 * a331 + a011 * a121 * a331;
			var t031 = a031 * a121 * a211 - a021 * a131 * a211 - a031 * a111 * a221 + a011 * a131 * a221 + a021 * a111 * a231 - a011 * a121 * a231;
			var det1 = a001 * t001 + a101 * t011 + a201 * t021 + a301 * t031;
			if(Math.abs(det1) <= glm_GLM.EPSILON) {
				throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det1 + ") is too small!");
			}
			var idet1 = 1 / det1;
			dest3._00 = t001 * idet1;
			dest3._01 = (a131 * a221 * a301 - a121 * a231 * a301 - a131 * a201 * a321 + a101 * a231 * a321 + a121 * a201 * a331 - a101 * a221 * a331) * idet1;
			dest3._02 = (a111 * a231 * a301 - a131 * a211 * a301 + a131 * a201 * a311 - a101 * a231 * a311 - a111 * a201 * a331 + a101 * a211 * a331) * idet1;
			dest3._03 = (a121 * a211 * a301 - a111 * a221 * a301 - a121 * a201 * a311 + a101 * a221 * a311 + a111 * a201 * a321 - a101 * a211 * a321) * idet1;
			dest3._10 = t011 * idet1;
			dest3._11 = (a021 * a231 * a301 - a031 * a221 * a301 + a031 * a201 * a321 - a001 * a231 * a321 - a021 * a201 * a331 + a001 * a221 * a331) * idet1;
			dest3._12 = (a031 * a211 * a301 - a011 * a231 * a301 - a031 * a201 * a311 + a001 * a231 * a311 + a011 * a201 * a331 - a001 * a211 * a331) * idet1;
			dest3._13 = (a011 * a221 * a301 - a021 * a211 * a301 + a021 * a201 * a311 - a001 * a221 * a311 - a011 * a201 * a321 + a001 * a211 * a321) * idet1;
			dest3._20 = t021 * idet1;
			dest3._21 = (a031 * a121 * a301 - a021 * a131 * a301 - a031 * a101 * a321 + a001 * a131 * a321 + a021 * a101 * a331 - a001 * a121 * a331) * idet1;
			dest3._22 = (a011 * a131 * a301 - a031 * a111 * a301 + a031 * a101 * a311 - a001 * a131 * a311 - a011 * a101 * a331 + a001 * a111 * a331) * idet1;
			dest3._23 = (a021 * a111 * a301 - a011 * a121 * a301 - a021 * a101 * a311 + a001 * a121 * a311 + a011 * a101 * a321 - a001 * a111 * a321) * idet1;
			dest3._30 = t031 * idet1;
			dest3._31 = (a021 * a131 * a201 - a031 * a121 * a201 + a031 * a101 * a221 - a001 * a131 * a221 - a021 * a101 * a231 + a001 * a121 * a231) * idet1;
			dest3._32 = (a031 * a111 * a201 - a011 * a131 * a201 - a031 * a101 * a211 + a001 * a131 * a211 + a011 * a101 * a231 - a001 * a111 * a231) * idet1;
			dest3._33 = (a011 * a121 * a201 - a021 * a111 * a201 + a021 * a101 * a211 - a001 * a121 * a211 - a011 * a101 * a221 + a001 * a111 * a221) * idet1;
			var _2 = _1.addComponent(minko_component_Transform.createbyMatrix4(dest3));
			root.addChild(_2);
			var _3 = minko_scene_Node.create().addComponent(minko_component_AmbientLight.create(0.1));
			root.addChild(_3);
		});
		var resized = canvas.get_resized().connect(function(canvas1,w,h) {
			var perspectiveCamera = camera1.getComponent(minko_component_PerspectiveCamera);
			perspectiveCamera.set_aspectRatio(w / h);
		});
		var yaw = 0.3;
		var pitch = Math.PI * .5;
		var minPitch = 0.1;
		var maxPitch = Math.PI - .1;
		var this23 = new glm_Vec3Base();
		this23.x = 0.0;
		this23.y = 2.0;
		this23.z = 0.0;
		var lookAt = this23;
		var distance = 3.0;
		var minDistance = 1.0;
		var zoomSpeed = 0.0;
		var mouseWheel = canvas.get_mouse().get_wheel().connect(function(m,h1,v) {
			zoomSpeed -= v * .1;
		});
		var mouseMove = null;
		var cameraRotationXSpeed = 0.0;
		var cameraRotationYSpeed = 0.0;
		var mouseDown = canvas.get_mouse().get_leftButtonDown().connect(function(m1) {
			mouseMove = canvas.get_mouse().get_move().connect(function(UnnamedParameter1,dx,dy) {
				cameraRotationYSpeed = dx * .01;
				cameraRotationXSpeed = dy * -.01;
			});
		});
		var mouseUp = canvas.get_mouse().get_leftButtonUp().connect(function(m2) {
			mouseMove.disconnect();
			mouseMove = null;
		});
		var enterFrame = canvas.get_enterFrame().connect(function(canvas2,time,deltaTime) {
			distance += zoomSpeed;
			zoomSpeed *= 0.9;
			if(distance < minDistance) {
				distance = minDistance;
			}
			yaw += cameraRotationYSpeed;
			cameraRotationYSpeed *= 0.9;
			pitch += cameraRotationXSpeed;
			cameraRotationXSpeed *= 0.9;
			if(pitch > maxPitch) {
				pitch = maxPitch;
			} else if(pitch < minPitch) {
				pitch = minPitch;
			}
			var cameraTransform = camera1.getComponent(minko_component_Transform);
			var x = lookAt.x + distance * Math.cos(yaw) * Math.sin(pitch);
			var y = lookAt.y + distance * Math.cos(pitch);
			var z = lookAt.z + distance * Math.sin(yaw) * Math.sin(pitch);
			var this24 = new glm_Vec3Base();
			this24.x = x;
			this24.y = y;
			this24.z = z;
			var this25 = new glm_Vec3Base();
			this25.x = 0.0;
			this25.y = 1.0;
			this25.z = 0.0;
			var this26 = new glm_Mat4Base();
			this26._00 = 0;
			this26._01 = 0;
			this26._02 = 0;
			this26._03 = 0;
			this26._10 = 0;
			this26._11 = 0;
			this26._12 = 0;
			this26._13 = 0;
			this26._20 = 0;
			this26._21 = 0;
			this26._22 = 0;
			this26._23 = 0;
			this26._30 = 0;
			this26._31 = 0;
			this26._32 = 0;
			this26._33 = 0;
			var src2 = glm_GLM.lookAt(this24,lookAt,this25,this26);
			var this27 = new glm_Mat4Base();
			this27._00 = 0;
			this27._01 = 0;
			this27._02 = 0;
			this27._03 = 0;
			this27._10 = 0;
			this27._11 = 0;
			this27._12 = 0;
			this27._13 = 0;
			this27._20 = 0;
			this27._21 = 0;
			this27._22 = 0;
			this27._23 = 0;
			this27._30 = 0;
			this27._31 = 0;
			this27._32 = 0;
			this27._33 = 0;
			var dest4 = this27;
			var a002 = src2._00;
			var a012 = src2._10;
			var a022 = src2._20;
			var a032 = src2._30;
			var a102 = src2._01;
			var a112 = src2._11;
			var a122 = src2._21;
			var a132 = src2._31;
			var a202 = src2._02;
			var a212 = src2._12;
			var a222 = src2._22;
			var a232 = src2._32;
			var a302 = src2._03;
			var a312 = src2._13;
			var a322 = src2._23;
			var a332 = src2._33;
			var t002 = a122 * a232 * a312 - a132 * a222 * a312 + a132 * a212 * a322 - a112 * a232 * a322 - a122 * a212 * a332 + a112 * a222 * a332;
			var t012 = a032 * a222 * a312 - a022 * a232 * a312 - a032 * a212 * a322 + a012 * a232 * a322 + a022 * a212 * a332 - a012 * a222 * a332;
			var t022 = a022 * a132 * a312 - a032 * a122 * a312 + a032 * a112 * a322 - a012 * a132 * a322 - a022 * a112 * a332 + a012 * a122 * a332;
			var t032 = a032 * a122 * a212 - a022 * a132 * a212 - a032 * a112 * a222 + a012 * a132 * a222 + a022 * a112 * a232 - a012 * a122 * a232;
			var det2 = a002 * t002 + a102 * t012 + a202 * t022 + a302 * t032;
			if(Math.abs(det2) <= glm_GLM.EPSILON) {
				throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det2 + ") is too small!");
			}
			var idet2 = 1 / det2;
			dest4._00 = t002 * idet2;
			dest4._01 = (a132 * a222 * a302 - a122 * a232 * a302 - a132 * a202 * a322 + a102 * a232 * a322 + a122 * a202 * a332 - a102 * a222 * a332) * idet2;
			dest4._02 = (a112 * a232 * a302 - a132 * a212 * a302 + a132 * a202 * a312 - a102 * a232 * a312 - a112 * a202 * a332 + a102 * a212 * a332) * idet2;
			dest4._03 = (a122 * a212 * a302 - a112 * a222 * a302 - a122 * a202 * a312 + a102 * a222 * a312 + a112 * a202 * a322 - a102 * a212 * a322) * idet2;
			dest4._10 = t012 * idet2;
			dest4._11 = (a022 * a232 * a302 - a032 * a222 * a302 + a032 * a202 * a322 - a002 * a232 * a322 - a022 * a202 * a332 + a002 * a222 * a332) * idet2;
			dest4._12 = (a032 * a212 * a302 - a012 * a232 * a302 - a032 * a202 * a312 + a002 * a232 * a312 + a012 * a202 * a332 - a002 * a212 * a332) * idet2;
			dest4._13 = (a012 * a222 * a302 - a022 * a212 * a302 + a022 * a202 * a312 - a002 * a222 * a312 - a012 * a202 * a322 + a002 * a212 * a322) * idet2;
			dest4._20 = t022 * idet2;
			dest4._21 = (a032 * a122 * a302 - a022 * a132 * a302 - a032 * a102 * a322 + a002 * a132 * a322 + a022 * a102 * a332 - a002 * a122 * a332) * idet2;
			dest4._22 = (a012 * a132 * a302 - a032 * a112 * a302 + a032 * a102 * a312 - a002 * a132 * a312 - a012 * a102 * a332 + a002 * a112 * a332) * idet2;
			dest4._23 = (a022 * a112 * a302 - a012 * a122 * a302 - a022 * a102 * a312 + a002 * a122 * a312 + a012 * a102 * a322 - a002 * a112 * a322) * idet2;
			dest4._30 = t032 * idet2;
			dest4._31 = (a022 * a132 * a202 - a032 * a122 * a202 + a032 * a102 * a222 - a002 * a132 * a222 - a022 * a102 * a232 + a002 * a122 * a232) * idet2;
			dest4._32 = (a032 * a112 * a202 - a012 * a132 * a202 - a032 * a102 * a212 + a002 * a132 * a212 + a012 * a102 * a232 - a002 * a112 * a232) * idet2;
			dest4._33 = (a012 * a122 * a202 - a022 * a112 * a202 + a022 * a102 * a212 - a002 * a122 * a212 - a012 * a102 * a222 + a002 * a112 * a222) * idet2;
			cameraTransform.set_matrix(dest4);
			sceneManager.nextFrame(time,deltaTime);
		});
		fxLoader.load();
		canvas.run();
	}
}
example_ExampleWater.__name__ = true;
Object.assign(example_ExampleWater.prototype, {
	__class__: example_ExampleWater
});
class minko_Has_$uuid {
	constructor() {
		if(minko_Has_$uuid._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
	}
	set_uuid(value) {
		this._uuid = value;
		return value;
	}
	get_uuid() {
		return this._uuid;
	}
}
$hx_exports["minko"]["Has_uuid"] = minko_Has_$uuid;
minko_Has_$uuid.__name__ = true;
Object.assign(minko_Has_$uuid.prototype, {
	__class__: minko_Has_$uuid
});
class minko_geometry_Geometry extends minko_Has_$uuid {
	constructor(name) {
		super();
		this._data = minko_data_Provider.create();
		this._vertexSize = 0;
		this._numVertices = 0;
		this._indexBuffer = null;
		this._vertexBuffers = [];
		this._vbToVertexSizeChangedSlot = new haxe_ds_ObjectMap();
		this._data.set("name",name);
		this._data.set("uuid",this._data.get_uuid());
	}
	dispose() {
		this._data = null;
		this._vertexBuffers = null;
		this._indexBuffer = null;
	}
	get_uuid() {
		return this._data.get_uuid();
	}
	clone() {
		var geometry = new minko_geometry_Geometry("").copyFrom(this);
		return geometry;
	}
	get_data() {
		return this._data;
	}
	get_vertexBuffers() {
		return this._vertexBuffers;
	}
	get_name() {
		return this._data.get("name");
	}
	vertexBuffer(vertexAttributeName) {
		var vertexBufferIt = Lambda.find(this._vertexBuffers,function(vb) {
			return vb.hasAttribute(vertexAttributeName);
		});
		if(vertexBufferIt == null) {
			return null;
		}
		return vertexBufferIt;
	}
	hasVertexBuffer(vertexBuffer) {
		return Lambda.has(this._vertexBuffers,vertexBuffer);
	}
	hasVertexAttribute(vertexAttributeName) {
		return this._data.hasProperty(vertexAttributeName);
	}
	set_indices(__indices) {
		this._indexBuffer = __indices;
		if(__indices.get_isReady()) {
			this._data.set("indices",__indices.get_id());
			this._data.set("firstIndex",0);
			this._data.set("numIndices",__indices.get_numIndices());
		}
		return __indices;
	}
	get_indices() {
		return this._indexBuffer;
	}
	addVertexBuffer(vertexBuffer) {
		if(this.hasVertexBuffer(vertexBuffer)) {
			throw new js__$Boot_HaxeError("vertexBuffer");
		}
		var bufVertexSize = vertexBuffer.get_vertexSize();
		var bufNumVertices = vertexBuffer.get_numVertices();
		var _g = 0;
		var _g1 = vertexBuffer.get_attributes();
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this._data.set(attribute.name,attribute);
		}
		this._vertexSize += bufVertexSize;
		this._data.set("vertex.size",this._vertexSize);
		if(this._vertexBuffers.length > 0 && this._numVertices != bufNumVertices) {
			throw new js__$Boot_HaxeError("inconsistent number of vertices between the geometry's vertex streams.");
		} else if(this._vertexBuffers.length == 0) {
			this._numVertices = bufNumVertices;
		}
		this._vertexBuffers.push(vertexBuffer);
		this._vbToVertexSizeChangedSlot.set(vertexBuffer,vertexBuffer.get_vertexSizeChanged().connect($bind(this,this.vertexSizeChanged)));
		this.computeCenterPosition();
	}
	removeVertexBuffer(vertexBufferIt) {
		if(!this.hasVertexBuffer(vertexBufferIt)) {
			throw new js__$Boot_HaxeError("vertexBuffer");
		}
		var vertexBuffer = vertexBufferIt;
		var _g = 0;
		var _g1 = vertexBuffer.get_attributes();
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this._data.unset(attribute.name);
		}
		this._vertexSize -= vertexBuffer.get_vertexSize();
		this._data.set("vertex.size",this._vertexSize);
		HxOverrides.remove(this._vertexBuffers,vertexBufferIt);
		if(this._vertexBuffers.length == 0) {
			this._numVertices = 0;
		}
		this._vbToVertexSizeChangedSlot.h[vertexBuffer.__id__].dispose();
		this._vbToVertexSizeChangedSlot.remove(vertexBuffer);
		vertexBuffer.dispose();
	}
	removeVertexBufferbyName(attributeName) {
		var vertexBufferIt = Lambda.find(this._vertexBuffers,function(vb) {
			return vb.hasAttribute(attributeName);
		});
		if(vertexBufferIt == null) {
			throw new js__$Boot_HaxeError("attributeName = " + attributeName);
		}
		this.removeVertexBuffer(vertexBufferIt);
	}
	get_numVertices() {
		return this._numVertices;
	}
	get_vertexSize() {
		return this._vertexSize;
	}
	computeNormals() {
		if(this.get_numVertices() == 0) {
			return this;
		}
		var normalBuffer = this.vertexBuffer("normal");
		var xyzBuffer = this.vertexBuffer("position");
		if(xyzBuffer == null) {
			throw new js__$Boot_HaxeError("Computation of normals requires positions.");
		}
		var uintIndices = this.get_indices().get_dataPointer();
		var numFaces = Math.floor(uintIndices.length / 3);
		var vertexIds_0 = 0;
		var vertexIds_1 = 0;
		var vertexIds_2 = 0;
		var xyz = [];
		var xyzAttribute = xyzBuffer.attribute("position");
		var xyzSize = xyzAttribute.vertexSize;
		var xyzOffset = xyzAttribute.offset;
		var xyzData = xyzBuffer.get_data();
		var normalSize;
		var normalOffset;
		var normalsData;
		if(normalBuffer != null) {
			normalsData = normalBuffer.get_data();
			var normalAttribute = normalBuffer.attribute("normal");
			normalSize = normalAttribute.vertexSize;
			normalOffset = normalAttribute.offset;
		} else {
			var _g = [];
			var _g1 = 0;
			var _g2 = 3 * this.get_numVertices();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(0.0);
			}
			normalsData = _g;
			normalSize = 3;
			normalOffset = 0;
		}
		var _g3 = 0;
		var _g11 = this.get_numVertices();
		while(_g3 < _g11) {
			var i1 = _g3++;
			var index = normalOffset + i1 * normalSize;
			normalsData[index] = 0.0;
			normalsData[index + 1] = 0.0;
			normalsData[index + 2] = 0.0;
		}
		var offset = 0;
		var _g21 = 0;
		var _g31 = numFaces;
		while(_g21 < _g31) {
			var i2 = _g21++;
			vertexIds_0 = uintIndices[offset++];
			var index1 = xyzOffset + vertexIds_0 * xyzSize;
			var this1 = new glm_Vec3Base();
			this1.x = xyzData[index1];
			this1.y = xyzData[index1 + 1];
			this1.z = xyzData[index1 + 2];
			xyz[0] = this1;
			vertexIds_1 = uintIndices[offset++];
			var index2 = xyzOffset + vertexIds_1 * xyzSize;
			var this2 = new glm_Vec3Base();
			this2.x = xyzData[index2];
			this2.y = xyzData[index2 + 1];
			this2.z = xyzData[index2 + 2];
			xyz[1] = this2;
			vertexIds_2 = uintIndices[offset++];
			var index3 = xyzOffset + vertexIds_2 * xyzSize;
			var this3 = new glm_Vec3Base();
			this3.x = xyzData[index3];
			this3.y = xyzData[index3 + 1];
			this3.z = xyzData[index3 + 2];
			xyz[2] = this3;
			var a = xyz[0];
			var b = xyz[1];
			var this4 = new glm_Vec3Base();
			this4.x = 0;
			this4.y = 0;
			this4.z = 0;
			var dest = this4;
			dest.x = a.x - b.x;
			dest.y = a.y - b.y;
			dest.z = a.z - b.z;
			var a1 = dest;
			var a2 = xyz[0];
			var b1 = xyz[2];
			var this5 = new glm_Vec3Base();
			this5.x = 0;
			this5.y = 0;
			this5.z = 0;
			var dest1 = this5;
			dest1.x = a2.x - b1.x;
			dest1.y = a2.y - b1.y;
			dest1.z = a2.z - b1.z;
			var b2 = dest1;
			var this6 = new glm_Vec3Base();
			this6.x = 0;
			this6.y = 0;
			this6.z = 0;
			var dest2 = this6;
			var x = a1.y * b2.z - a1.z * b2.y;
			var y = a1.z * b2.x - a1.x * b2.z;
			var z = a1.x * b2.y - a1.y * b2.x;
			var this7 = new glm_Vec3Base();
			this7.x = x;
			this7.y = y;
			this7.z = z;
			dest2 = this7;
			var faceNormal = dest2;
			var index4 = normalOffset + normalSize * vertexIds_0;
			normalsData[index4] += faceNormal.x;
			normalsData[index4 + 1] += faceNormal.y;
			normalsData[index4 + 2] += faceNormal.z;
			var index5 = normalOffset + normalSize * vertexIds_1;
			normalsData[index5] += faceNormal.x;
			normalsData[index5 + 1] += faceNormal.y;
			normalsData[index5 + 2] += faceNormal.z;
			var index6 = normalOffset + normalSize * vertexIds_2;
			normalsData[index6] += faceNormal.x;
			normalsData[index6 + 1] += faceNormal.y;
			normalsData[index6 + 2] += faceNormal.z;
		}
		var _g4 = 0;
		var _g5 = this.get_numVertices();
		while(_g4 < _g5) {
			var i3 = _g4++;
			var indexOffset = normalOffset + i3 * normalSize;
			var x1 = normalsData[indexOffset];
			var y1 = normalsData[indexOffset + 1];
			var z1 = normalsData[indexOffset + 2];
			var lengthSquared = x1 * x1 + y1 * y1 + z1 * z1;
			var invLength = lengthSquared > glm_GLM.EPSILON ? 1.0 / Math.sqrt(lengthSquared) : 1.0;
			normalsData[indexOffset] *= invLength;
			normalsData[indexOffset + 1] *= invLength;
			normalsData[indexOffset + 2] *= invLength;
		}
		if(normalBuffer == null) {
			normalBuffer = minko_render_VertexBuffer.createbyData(xyzBuffer.get_context(),normalsData);
			normalBuffer.addAttribute("normal",normalSize,normalOffset);
			this.addVertexBuffer(normalBuffer);
			normalsData = null;
		}
		return this;
	}
	computeTangentSpace(doNormals) {
		if(this.get_numVertices() == 0) {
			return this;
		}
		var xyzBuffer = this.vertexBuffer("position");
		if(xyzBuffer == null) {
			throw new js__$Boot_HaxeError("Computation of tangent space requires positions.");
		}
		var uvBuffer = this.vertexBuffer("uv");
		if(uvBuffer == null) {
			throw new js__$Boot_HaxeError("Computation of tangent space requires uvs.");
		}
		if(doNormals) {
			this.computeNormals();
		}
		var uintIndices = this.get_indices().get_dataPointer();
		var numFaces = Math.floor(uintIndices.length / 3);
		var vertexIds_0 = 0;
		var vertexIds_1 = 0;
		var vertexIds_2 = 0;
		var xyz = [];
		var uv = [];
		var xyzSize = xyzBuffer.get_vertexSize();
		var xyzOffset = xyzBuffer.attribute("position").offset;
		var xyzData = xyzBuffer.get_data();
		var uvSize = uvBuffer.get_vertexSize();
		var uvOffset = uvBuffer.attribute("uv").offset;
		var uvData = uvBuffer.get_data();
		var _g = [];
		var _g1 = 0;
		var _g2 = 3 * this.get_numVertices();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(0.0);
		}
		var tangentsData = _g;
		var offset = 0;
		var _g3 = 0;
		var _g4 = numFaces;
		while(_g3 < _g4) {
			var i1 = _g3++;
			vertexIds_0 = uintIndices[offset++];
			var index = xyzOffset + vertexIds_0 * xyzSize;
			var this1 = new glm_Vec3Base();
			this1.x = xyzData[index];
			this1.y = xyzData[index + 1];
			this1.z = xyzData[index + 2];
			xyz[0] = this1;
			index = uvOffset + vertexIds_0 * uvSize;
			var this2 = new glm_Vec2Base();
			this2.x = uvData[index];
			this2.y = uvData[index + 1];
			uv[0] = this2;
			vertexIds_1 = uintIndices[offset++];
			var index1 = xyzOffset + vertexIds_1 * xyzSize;
			var this3 = new glm_Vec3Base();
			this3.x = xyzData[index1];
			this3.y = xyzData[index1 + 1];
			this3.z = xyzData[index1 + 2];
			xyz[1] = this3;
			index1 = uvOffset + vertexIds_1 * uvSize;
			var this4 = new glm_Vec2Base();
			this4.x = uvData[index1];
			this4.y = uvData[index1 + 1];
			uv[1] = this4;
			vertexIds_2 = uintIndices[offset++];
			var index2 = xyzOffset + vertexIds_2 * xyzSize;
			var this5 = new glm_Vec3Base();
			this5.x = xyzData[index2];
			this5.y = xyzData[index2 + 1];
			this5.z = xyzData[index2 + 2];
			xyz[2] = this5;
			index2 = uvOffset + vertexIds_2 * uvSize;
			var this6 = new glm_Vec2Base();
			this6.x = uvData[index2];
			this6.y = uvData[index2 + 1];
			uv[2] = this6;
			var a = uv[0];
			var b = uv[2];
			var this7 = new glm_Vec2Base();
			this7.x = 0;
			this7.y = 0;
			var dest = this7;
			dest.x = a.x - b.x;
			dest.y = a.y - b.y;
			var uv02 = dest;
			var a1 = uv[1];
			var b1 = uv[2];
			var this8 = new glm_Vec2Base();
			this8.x = 0;
			this8.y = 0;
			var dest1 = this8;
			dest1.x = a1.x - b1.x;
			dest1.y = a1.y - b1.y;
			var uv12 = dest1;
			var denom = uv02.x * uv12.y - uv12.x * uv02.y;
			var invDenom = Math.abs(denom) > glm_GLM.EPSILON ? 1.0 / denom : 1.0;
			var a2 = xyz[0];
			var b2 = xyz[2];
			var this9 = new glm_Vec3Base();
			this9.x = 0;
			this9.y = 0;
			this9.z = 0;
			var dest2 = this9;
			dest2.x = a2.x - b2.x;
			dest2.y = a2.y - b2.y;
			dest2.z = a2.z - b2.z;
			var a3 = dest2;
			var s = uv12.y;
			var this10 = new glm_Vec3Base();
			this10.x = 0;
			this10.y = 0;
			this10.z = 0;
			var dest3 = this10;
			dest3.x = a3.x * s;
			dest3.y = a3.y * s;
			dest3.z = a3.z * s;
			var a4 = dest3;
			var a5 = xyz[1];
			var b3 = xyz[2];
			var this11 = new glm_Vec3Base();
			this11.x = 0;
			this11.y = 0;
			this11.z = 0;
			var dest4 = this11;
			dest4.x = a5.x - b3.x;
			dest4.y = a5.y - b3.y;
			dest4.z = a5.z - b3.z;
			var a6 = dest4;
			var s1 = uv02.y;
			var this12 = new glm_Vec3Base();
			this12.x = 0;
			this12.y = 0;
			this12.z = 0;
			var dest5 = this12;
			dest5.x = a6.x * s1;
			dest5.y = a6.y * s1;
			dest5.z = a6.z * s1;
			var b4 = dest5;
			var this13 = new glm_Vec3Base();
			this13.x = 0;
			this13.y = 0;
			this13.z = 0;
			var dest6 = this13;
			dest6.x = a4.x - b4.x;
			dest6.y = a4.y - b4.y;
			dest6.z = a4.z - b4.z;
			var a7 = dest6;
			var this14 = new glm_Vec3Base();
			this14.x = 0;
			this14.y = 0;
			this14.z = 0;
			var dest7 = this14;
			dest7.x = a7.x * invDenom;
			dest7.y = a7.y * invDenom;
			dest7.z = a7.z * invDenom;
			var faceTangent = dest7;
			var index3 = 3 * vertexIds_0;
			tangentsData[index3] += faceTangent.x;
			tangentsData[index3 + 1] += faceTangent.y;
			tangentsData[index3 + 2] += faceTangent.z;
			var index4 = 3 * vertexIds_1;
			tangentsData[index4] += faceTangent.x;
			tangentsData[index4 + 1] += faceTangent.y;
			tangentsData[index4 + 2] += faceTangent.z;
			var index5 = 3 * vertexIds_2;
			tangentsData[index5] += faceTangent.x;
			tangentsData[index5 + 1] += faceTangent.y;
			tangentsData[index5 + 2] += faceTangent.z;
		}
		var index6 = 0;
		var _g5 = 0;
		var _g6 = this.get_numVertices();
		while(_g5 < _g6) {
			var i2 = _g5++;
			var x = tangentsData[index6];
			var y = tangentsData[index6 + 1];
			var z = tangentsData[index6 + 2];
			var lengthSquared = x * x + y * y + z * z;
			var invLength = lengthSquared > glm_GLM.EPSILON ? 1.0 / Math.sqrt(lengthSquared) : 1.0;
			tangentsData[index6] *= invLength;
			tangentsData[index6 + 1] *= invLength;
			tangentsData[index6 + 2] *= invLength;
			index6 += 3;
		}
		var tangentsBuffer = minko_render_VertexBuffer.createbyData(xyzBuffer.get_context(),tangentsData);
		tangentsBuffer.addAttribute("tangent",3,0);
		this.addVertexBuffer(tangentsBuffer);
		return this;
	}
	computeCenterPosition() {
		if(this.get_numVertices() == 0) {
			return this;
		}
		var xyzBuffer = this.vertexBuffer("position");
		if(xyzBuffer == null) {
			return this;
		}
		var xyzAttr = xyzBuffer.attribute("position");
		var xyzOffset = xyzAttr.offset;
		var xyzSize = Math.floor(Math.max(0,Math.min(3,xyzAttr.size)));
		var xyzData = xyzBuffer.get_data();
		var minXYZ = [Infinity,Infinity,Infinity];
		var maxXYZ = [-Infinity,-Infinity,-Infinity];
		var vertexIndex = xyzOffset;
		while(vertexIndex < xyzData.length) {
			var _g = 0;
			var _g1 = xyzSize;
			while(_g < _g1) {
				var k = _g++;
				var vk = xyzData[vertexIndex + k];
				minXYZ[k] = Math.min(minXYZ[k],vk);
				maxXYZ[k] = Math.max(maxXYZ[k],vk);
			}
			vertexIndex += xyzBuffer.get_vertexSize();
		}
		var this1 = new glm_Vec3Base();
		this1.x = minXYZ[0];
		this1.y = minXYZ[1];
		this1.z = minXYZ[2];
		var minPosition = this1;
		var this2 = new glm_Vec3Base();
		this2.x = maxXYZ[0];
		this2.y = maxXYZ[1];
		this2.z = maxXYZ[2];
		var maxPosition = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var dest = this3;
		dest.x = minPosition.x - maxPosition.x;
		dest.y = minPosition.y - maxPosition.y;
		dest.z = minPosition.z - maxPosition.z;
		var a = dest;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest1 = this4;
		dest1.x = a.x * .5;
		dest1.y = a.y * .5;
		dest1.z = a.z * .5;
		var centerPosition = dest1;
		this._data.set("centerPosition",centerPosition);
		return this;
	}
	removeDuplicatedVertices() {
		var vertices = [];
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vb = _g1[_g];
			++_g;
			vertices.push(vb.get_data());
		}
		this.removeDuplicateVertices(this._indexBuffer.get_data(),vertices,this.get_numVertices());
	}
	removeDuplicateVertices(indices,vertices,numVertices) {
		var newVertexCount = 0;
		var newLimit = 0;
		var hashToNewVertexId = new haxe_ds_StringMap();
		var oldVertexIdToNewVertexId_h = { };
		var _g = 0;
		var _g1 = numVertices;
		while(_g < _g1) {
			var oldVertexId = _g++;
			var hash = "";
			var _g2 = 0;
			while(_g2 < vertices.length) {
				var vb = vertices[_g2];
				++_g2;
				var vertexSize = Math.floor(vb.length / numVertices);
				var _g3 = 0;
				var _g11 = vertexSize;
				while(_g3 < _g11) {
					var i = _g3++;
					hash += vb[oldVertexId * vertexSize + i] + " ";
				}
			}
			var newVertexId = 0;
			if(!(__map_reserved[hash] != null ? hashToNewVertexId.existsReserved(hash) : hashToNewVertexId.h.hasOwnProperty(hash))) {
				++newVertexCount;
				newVertexId = newVertexCount - 1;
				if(__map_reserved[hash] != null) {
					hashToNewVertexId.setReserved(hash,newVertexId);
				} else {
					hashToNewVertexId.h[hash] = newVertexId;
				}
				newLimit = 1 + newVertexId;
				if(newVertexId != oldVertexId) {
					var _g12 = 0;
					while(_g12 < vertices.length) {
						var vb1 = vertices[_g12];
						++_g12;
						var vertexSize1 = Math.floor(vb1.length / numVertices);
						var _g13 = 0;
						var _g21 = vertexSize1;
						while(_g13 < _g21) {
							var i1 = _g13++;
							vb1[newVertexId * vertexSize1 + i1] = vb1[oldVertexId * vertexSize1 + i1];
						}
					}
				}
			} else {
				newVertexId = __map_reserved[hash] != null ? hashToNewVertexId.getReserved(hash) : hashToNewVertexId.h[hash];
			}
			oldVertexIdToNewVertexId_h[oldVertexId] = newVertexId;
		}
		var _g22 = 0;
		while(_g22 < vertices.length) {
			var vb2 = vertices[_g22];
			++_g22;
			var len = newLimit * vb2.length / numVertices;
			while(vb2.length > len) vb2.pop();
		}
		var _g31 = 0;
		var _g4 = indices.length;
		while(_g31 < _g4) {
			var i2 = _g31++;
			var index = indices[i2];
			indices[i2] = oldVertexIdToNewVertexId_h[index];
		}
	}
	getVertexAttribute(attributeName) {
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			if(vertexBuffer.hasAttribute(attributeName)) {
				return vertexBuffer.attribute(attributeName);
			}
		}
		throw new js__$Boot_HaxeError("attributeName = " + attributeName);
	}
	castRay(ray,distance,triangle,hitXyz,hitUv,hitNormal) {
		var EPSILON = 0.00001;
		var hit = false;
		var indicesData = this._indexBuffer.get_data();
		var numIndices = indicesData.length;
		var xyzBuffer = this.vertexBuffer("position");
		var xyzData = xyzBuffer.get_data();
		var xyzPtr = xyzData;
		var xyzVertexSize = xyzBuffer.get_vertexSize();
		var xyzOffset = xyzBuffer.attribute("position").offset;
		var minDistance = Infinity;
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		var lambda = this1;
		var triangleIndice = -3;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var v0 = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var v1 = this3;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var v2 = this4;
		var this5 = new glm_Vec3Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		var edge1 = this5;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		var edge2 = this6;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var pvec = this7;
		var this8 = new glm_Vec3Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		var tvec = this8;
		var this9 = new glm_Vec3Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		var qvec = this9;
		var dot = 0.0;
		var invDot = 0.0;
		var u = 0.0;
		var v = 0.0;
		var t = 0.0;
		var i = 0;
		while(i < numIndices) {
			var index = indicesData[i] * xyzVertexSize;
			var this10 = new glm_Vec3Base();
			this10.x = xyzPtr[index];
			this10.y = xyzPtr[index + 1];
			this10.z = xyzPtr[index + 2];
			v0 = this10;
			index = indicesData[i + 1] * xyzVertexSize;
			var this11 = new glm_Vec3Base();
			this11.x = xyzPtr[index];
			this11.y = xyzPtr[index + 1];
			this11.z = xyzPtr[index + 2];
			v1 = this11;
			index = indicesData[i + 2] * xyzVertexSize;
			var this12 = new glm_Vec3Base();
			this12.x = xyzPtr[index];
			this12.y = xyzPtr[index + 1];
			this12.z = xyzPtr[index + 2];
			v2 = this12;
			var this13 = new glm_Vec3Base();
			this13.x = 0;
			this13.y = 0;
			this13.z = 0;
			var dest = this13;
			dest.x = v1.x - v0.x;
			dest.y = v1.y - v0.y;
			dest.z = v1.z - v0.z;
			edge1 = dest;
			var this14 = new glm_Vec3Base();
			this14.x = 0;
			this14.y = 0;
			this14.z = 0;
			var dest1 = this14;
			dest1.x = v2.x - v0.x;
			dest1.y = v2.y - v0.y;
			dest1.z = v2.z - v0.z;
			edge2 = dest1;
			var a = ray.get_direction();
			var this15 = new glm_Vec3Base();
			this15.x = 0;
			this15.y = 0;
			this15.z = 0;
			var dest2 = this15;
			var x = a.y * edge2.z - a.z * edge2.y;
			var y = a.z * edge2.x - a.x * edge2.z;
			var z = a.x * edge2.y - a.y * edge2.x;
			var this16 = new glm_Vec3Base();
			this16.x = x;
			this16.y = y;
			this16.z = z;
			dest2 = this16;
			pvec = dest2;
			dot = edge1.x * pvec.x + edge1.y * pvec.y + edge1.z * pvec.z;
			if(dot > -EPSILON && dot < EPSILON) {
				continue;
			}
			invDot = 1.0 / dot;
			var a1 = ray.get_origin();
			var this17 = new glm_Vec3Base();
			this17.x = 0;
			this17.y = 0;
			this17.z = 0;
			var dest3 = this17;
			dest3.x = a1.x - v0.x;
			dest3.y = a1.y - v0.y;
			dest3.z = a1.z - v0.z;
			tvec = dest3;
			u = (tvec.x * pvec.x + tvec.y * pvec.y + tvec.z * pvec.z) * invDot;
			if(u < 0.0 || u > 1.0) {
				continue;
			}
			var this18 = new glm_Vec3Base();
			this18.x = 0;
			this18.y = 0;
			this18.z = 0;
			var dest4 = this18;
			var x1 = tvec.y * edge1.z - tvec.z * edge1.y;
			var y1 = tvec.z * edge1.x - tvec.x * edge1.z;
			var z1 = tvec.x * edge1.y - tvec.y * edge1.x;
			var this19 = new glm_Vec3Base();
			this19.x = x1;
			this19.y = y1;
			this19.z = z1;
			dest4 = this19;
			qvec = dest4;
			var a2 = ray.get_direction();
			v = (a2.x * qvec.x + a2.y * qvec.y + a2.z * qvec.z) * invDot;
			if(v < 0.0 || u + v > 1.0) {
				continue;
			}
			t = (qvec.x * edge2.x + qvec.y * edge2.y + qvec.z * edge2.z) * invDot;
			if(t < minDistance && t > 0) {
				minDistance = t;
				distance = t;
				triangle = i;
				hit = true;
				if(hitUv != null) {
					lambda.x = u;
					lambda.y = v;
				}
				if(hitXyz != null) {
					var x2 = ray.get_origin().x + minDistance * ray.get_direction().x;
					var y2 = ray.get_origin().y + minDistance * ray.get_direction().y;
					var z2 = ray.get_origin().z + minDistance * ray.get_direction().z;
					var this20 = new glm_Vec3Base();
					this20.x = x2;
					this20.y = y2;
					this20.z = z2;
					hitXyz = this20;
				}
			}
			if(hitUv != null) {
				this.getHitUv(triangle,lambda,hitUv);
			}
			if(hitNormal != null) {
				this.getHitNormal(triangle,hitNormal);
			}
			i += 3;
		}
		return hit;
	}
	upload() {
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vb = _g1[_g];
			++_g;
			vb.upload();
		}
		this._indexBuffer.upload();
	}
	disposeIndexBufferData() {
		this._indexBuffer.disposeData();
	}
	disposeVertexBufferData() {
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.disposeData();
		}
	}
	copyFrom(geometry) {
		this._data = minko_data_Provider.createbyProvider(geometry._data);
		this._vertexSize = geometry._vertexSize;
		this._numVertices = geometry._numVertices;
		this._vertexBuffers = geometry._vertexBuffers.concat([]);
		this._indexBuffer = geometry._indexBuffer;
		return this;
	}
	set_vertexSize(value) {
		this._vertexSize = value;
		return value;
	}
	vertexSizeChanged(vertexBuffer,offset) {
		this._vertexSize += offset;
	}
	getHitUv(triangle,lambda,hitUv) {
		var uvBuffer = this.vertexBuffer("uv");
		var uvData = uvBuffer.get_data();
		var uvPtr = uvData[0];
		var uvVertexSize = uvBuffer.get_vertexSize();
		var uvOffset = uvBuffer.attribute("uv").offset;
		var indicesData = this._indexBuffer.get_data();
		var u0 = uvData[indicesData[triangle] * uvVertexSize + uvOffset];
		var v0 = uvData[indicesData[triangle] * uvVertexSize + uvOffset + 1];
		var u1 = uvData[indicesData[triangle + 1] * uvVertexSize + uvOffset];
		var v1 = uvData[indicesData[triangle + 1] * uvVertexSize + uvOffset + 1];
		var u2 = uvData[indicesData[triangle + 2] * uvVertexSize + uvOffset];
		var v2 = uvData[indicesData[triangle + 2] * uvVertexSize + uvOffset + 1];
		var z = 1.0 - lambda.x - lambda.y;
		var x = z * u0 + lambda.x * u1 + lambda.y * u2;
		var y = z * v0 + lambda.x * v1 + lambda.y * v2;
		var this1 = new glm_Vec2Base();
		this1.x = x;
		this1.y = y;
		hitUv = this1;
	}
	getHitNormal(triangle,hitNormal) {
		var normalBuffer = this.vertexBuffer("normal");
		var normalData = normalBuffer.get_data();
		var normalVertexSize = normalBuffer.get_vertexSize();
		var normalOffset = normalBuffer.attribute("normal").offset;
		var indicesData = this._indexBuffer.get_data();
		var index = indicesData[triangle] * normalVertexSize + normalOffset;
		var this1 = new glm_Vec3Base();
		this1.x = normalData[index];
		this1.y = normalData[index + 1];
		this1.z = normalData[index + 2];
		var v0 = this1;
		index = indicesData[triangle + 1] * normalVertexSize + normalOffset;
		var this2 = new glm_Vec3Base();
		this2.x = normalData[index];
		this2.y = normalData[index + 1];
		this2.z = normalData[index + 2];
		var v1 = this2;
		index = indicesData[triangle + 2] * normalVertexSize + normalOffset;
		var this3 = new glm_Vec3Base();
		this3.x = normalData[index];
		this3.y = normalData[index + 1];
		this3.z = normalData[index + 2];
		var v2 = this3;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest = this4;
		dest.x = v1.x - v0.x;
		dest.y = v1.y - v0.y;
		dest.z = v1.z - v0.z;
		var v = dest;
		var this5 = new glm_Vec3Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		var dest1 = this5;
		var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v.x * mult;
		dest1.y = v.y * mult;
		dest1.z = v.z * mult;
		var edge1 = dest1;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		var dest2 = this6;
		dest2.x = v2.x - v0.x;
		dest2.y = v2.y - v0.y;
		dest2.z = v2.z - v0.z;
		var v3 = dest2;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var dest3 = this7;
		var length1 = Math.sqrt(v3.x * v3.x + v3.y * v3.y + v3.z * v3.z);
		var mult1 = 0;
		if(length1 >= glm_GLM.EPSILON) {
			mult1 = 1 / length1;
		}
		dest3.x = v3.x * mult1;
		dest3.y = v3.y * mult1;
		dest3.z = v3.z * mult1;
		var edge2 = dest3;
		var this8 = new glm_Vec3Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		var dest4 = this8;
		var x = edge2.y * edge1.z - edge2.z * edge1.y;
		var y = edge2.z * edge1.x - edge2.x * edge1.z;
		var z = edge2.x * edge1.y - edge2.y * edge1.x;
		var this9 = new glm_Vec3Base();
		this9.x = x;
		this9.y = y;
		this9.z = z;
		dest4 = this9;
		hitNormal = dest4;
	}
	static create() {
		return minko_geometry_Geometry.createbyName("");
	}
	static createbyName(name) {
		if(name == null) {
			name = "geometry";
		}
		return new minko_geometry_Geometry(name);
	}
}
$hx_exports["minko"]["geometry"]["Geometry"] = minko_geometry_Geometry;
minko_geometry_Geometry.__name__ = true;
minko_geometry_Geometry.__super__ = minko_Has_$uuid;
Object.assign(minko_geometry_Geometry.prototype, {
	__class__: minko_geometry_Geometry
});
class example_StarGeometry extends minko_geometry_Geometry {
	constructor() {
		super("star");
	}
	initialize(context,numBranches,outerRadius,innerRadius) {
		if(context == null) {
			throw new js__$Boot_HaxeError("context");
		}
		if(numBranches < 2) {
			throw new js__$Boot_HaxeError("numBranches");
		}
		var outRadius = Math.abs(outerRadius);
		var inRadius = Math.min(outRadius,Math.abs(innerRadius));
		var vertexSize = 3;
		var numVertices = 1 + 2 * numBranches;
		var vertexData = minko_utils_VectorHelper.initializedList(numVertices * vertexSize,0.0);
		var step = Math.PI / numBranches;
		var cStep = Math.cos(step);
		var sStep = Math.sin(step);
		var idx = vertexSize;
		var cAng = 1.0;
		var sAng = 0.0;
		var _g = 0;
		var _g1 = numBranches;
		while(_g < _g1) {
			var i = _g++;
			vertexData[idx] = outRadius * cAng;
			vertexData[idx + 1] = outRadius * sAng;
			idx += vertexSize;
			var c = cAng * cStep - sAng * sStep;
			var s = sAng * cStep + cAng * sStep;
			cAng = c;
			sAng = s;
			vertexData[idx] = inRadius * cAng;
			vertexData[idx + 1] = inRadius * sAng;
			idx += vertexSize;
			c = cAng * cStep - sAng * sStep;
			s = sAng * cStep + cAng * sStep;
			cAng = c;
			sAng = s;
		}
		var vertexBuffer = minko_render_VertexBuffer.createbyData(context,vertexData);
		vertexBuffer.addAttribute("position",3,0);
		this.addVertexBuffer(vertexBuffer);
		var numTriangles = 2 * numBranches;
		var indexData = [];
		idx = 0;
		var _g2 = 0;
		var _g3 = numTriangles;
		while(_g2 < _g3) {
			var i1 = _g2++;
			indexData[idx++] = 0;
			indexData[idx++] = i1 + 1;
			indexData[idx++] = i1 + 2 < numVertices ? i1 + 2 : 1;
		}
		this.set_indices(minko_render_IndexBuffer.createbyData(context,indexData));
	}
	static create(context,numBranches,outerRadius,innerRadius) {
		var ptr = new example_StarGeometry();
		ptr.initialize(context,numBranches,outerRadius,innerRadius);
		return ptr;
	}
}
example_StarGeometry.__name__ = true;
example_StarGeometry.__super__ = minko_geometry_Geometry;
Object.assign(example_StarGeometry.prototype, {
	__class__: example_StarGeometry
});
class minko_Enable_$uuid extends minko_Has_$uuid {
	_hx_constructor() {
		super._hx_constructor();
	}
	enable_uuid() {
		this._uuid = minko_Uuid.getUuid();
	}
}
$hx_exports["minko"]["Enable_uuid"] = minko_Enable_$uuid;
minko_Enable_$uuid.__name__ = true;
minko_Enable_$uuid.__super__ = minko_Has_$uuid;
Object.assign(minko_Enable_$uuid.prototype, {
	__class__: minko_Enable_$uuid
});
class minko_component_AbstractComponent extends minko_Enable_$uuid {
	constructor(layoutMask) {
		if(layoutMask == null) {
			layoutMask = -1;
		}
		if(minko_Has_$uuid._hx_skip_constructor) {
			super();
			return;
		}
		minko_Has_$uuid._hx_skip_constructor = true;
		super();
		minko_Has_$uuid._hx_skip_constructor = false;
		this._hx_constructor(layoutMask);
	}
	_hx_constructor(layoutMask) {
		if(layoutMask == null) {
			layoutMask = -1;
		}
		super._hx_constructor();
		this._layoutMask = layoutMask;
		this._layoutMaskChanged = new minko_signal_Signal();
	}
	dispose() {
		this._target = null;
	}
	clone(option) {
		throw new js__$Boot_HaxeError("Missing clone function for a component.");
	}
	get_target() {
		return this._target;
	}
	get_layoutMask() {
		return this._layoutMask;
	}
	set_layoutMask(value) {
		if(this._layoutMask != value) {
			this._layoutMask = value;
			this._layoutMaskChanged.execute(this);
		}
		return value;
	}
	get_layoutMaskChanged() {
		return this._layoutMaskChanged;
	}
	set_target(v) {
		if(this._target != v) {
			if(v == null) {
				var oldTarget = this._target;
				this.targetRemoved(oldTarget);
				this._target = null;
			} else {
				this._target = v;
				this.targetAdded(this._target);
			}
		}
		return v;
	}
	targetAdded(node) {
	}
	targetRemoved(node) {
	}
	rebindDependencies(componentsMap,nodeMap,option) {
	}
}
$hx_exports["minko"]["component"]["AbstractComponent"] = minko_component_AbstractComponent;
minko_component_AbstractComponent.__name__ = true;
minko_component_AbstractComponent.__super__ = minko_Enable_$uuid;
Object.assign(minko_component_AbstractComponent.prototype, {
	__class__: minko_component_AbstractComponent
});
class example_TextureDebugDisplay extends minko_component_AbstractComponent {
	constructor() {
		super();
	}
	get_surface() {
		return this._surface;
	}
	get_material() {
		return this._material;
	}
	initialize(assets,texture) {
		if(texture == null) {
			throw new js__$Boot_HaxeError("texture");
		}
		var geom = assets.geometry("debug-quad");
		if(geom == null) {
			geom = minko_geometry_QuadGeometry.create(assets.get_context());
			assets.setGeometry("debug-quad",geom);
		}
		var fx = assets.effect("effect/debug/TextureDebugDisplay.effect");
		if(fx == null) {
			var loader = minko_file_Loader.createbyLoader(assets.get_loader());
			loader.get_options().set_loadAsynchronously(false);
			loader.queue("effect/debug/TextureDebugDisplay.effect");
			var _ = loader.get_complete().connect(function(loader1) {
				fx = assets.effect("effect/debug/TextureDebugDisplay.effect");
			});
			loader.load();
		}
		this._material = minko_material_Material.create();
		this._material.get_data().set("texture",texture);
		this._surface = minko_component_Surface.create(geom,this._material,fx);
		this._surface.set_layoutMask(2);
	}
	targetAdded(target) {
		target.addComponent(this._surface);
		target.set_layout(target.get_layout() | 2);
	}
	targetRemoved(target) {
		target.removeComponent(this._surface);
	}
	static create() {
		return new example_TextureDebugDisplay();
	}
}
example_TextureDebugDisplay.__name__ = true;
example_TextureDebugDisplay.__super__ = minko_component_AbstractComponent;
Object.assign(example_TextureDebugDisplay.prototype, {
	__class__: example_TextureDebugDisplay
});
class glm_GLM {
	static lerp(a,b,t) {
		return a + t * (b - a);
	}
	static translate(translation,dest) {
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		dest._30 = translation.x;
		dest._31 = translation.y;
		dest._32 = translation.z;
		return dest;
	}
	static rotate(rotation,dest) {
		var x2 = rotation.x + rotation.x;
		var y2 = rotation.y + rotation.y;
		var z2 = rotation.z + rotation.z;
		var xx = rotation.x * x2;
		var xy = rotation.x * y2;
		var xz = rotation.x * z2;
		var yy = rotation.y * y2;
		var yz = rotation.y * z2;
		var zz = rotation.z * z2;
		var wx = rotation.w * x2;
		var wy = rotation.w * y2;
		var wz = rotation.w * z2;
		dest._00 = 1 - (yy + zz);
		dest._10 = xy - wz;
		dest._20 = xz + wy;
		dest._30 = 0;
		dest._01 = xy + wz;
		dest._11 = 1 - (xx + zz);
		dest._21 = yz - wx;
		dest._31 = 0;
		dest._02 = xz - wy;
		dest._12 = yz + wx;
		dest._22 = 1 - (xx + yy);
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		return dest;
	}
	static scale(amount,dest) {
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		dest._00 = amount.x;
		dest._11 = amount.y;
		dest._22 = amount.z;
		return dest;
	}
	static transform(translation,rotation,scale,dest) {
		var x2 = rotation.x + rotation.x;
		var y2 = rotation.y + rotation.y;
		var z2 = rotation.z + rotation.z;
		var xx = rotation.x * x2;
		var xy = rotation.x * y2;
		var xz = rotation.x * z2;
		var yy = rotation.y * y2;
		var yz = rotation.y * z2;
		var zz = rotation.z * z2;
		var wx = rotation.w * x2;
		var wy = rotation.w * y2;
		var wz = rotation.w * z2;
		dest._00 = (1 - (yy + zz)) * scale.x;
		dest._01 = (xy + wz) * scale.x;
		dest._02 = (xz - wy) * scale.x;
		dest._03 = 0;
		dest._10 = (xy - wz) * scale.y;
		dest._11 = (1 - (xx + zz)) * scale.y;
		dest._12 = (yz + wx) * scale.y;
		dest._13 = 0;
		dest._20 = (xz + wy) * scale.z;
		dest._21 = (yz - wx) * scale.z;
		dest._22 = (1 - (xx + yy)) * scale.z;
		dest._23 = 0;
		dest._30 = translation.x;
		dest._31 = translation.y;
		dest._32 = translation.z;
		dest._33 = 1;
		return dest;
	}
	static lookAt(eye,centre,up,dest) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest1 = this1;
		dest1.x = centre.x - eye.x;
		dest1.y = centre.y - eye.y;
		dest1.z = centre.z - eye.z;
		var f = dest1;
		var length = Math.sqrt(f.x * f.x + f.y * f.y + f.z * f.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		f.x *= mult;
		f.y *= mult;
		f.z *= mult;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var dest2 = this2;
		var x = f.y * up.z - f.z * up.y;
		var y = f.z * up.x - f.x * up.z;
		var z = f.x * up.y - f.y * up.x;
		var this3 = new glm_Vec3Base();
		this3.x = x;
		this3.y = y;
		this3.z = z;
		dest2 = this3;
		var s = dest2;
		var length1 = Math.sqrt(s.x * s.x + s.y * s.y + s.z * s.z);
		var mult1 = 0;
		if(length1 >= glm_GLM.EPSILON) {
			mult1 = 1 / length1;
		}
		s.x *= mult1;
		s.y *= mult1;
		s.z *= mult1;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest3 = this4;
		var x1 = s.y * f.z - s.z * f.y;
		var y1 = s.z * f.x - s.x * f.z;
		var z1 = s.x * f.y - s.y * f.x;
		var this5 = new glm_Vec3Base();
		this5.x = x1;
		this5.y = y1;
		this5.z = z1;
		dest3 = this5;
		var u = dest3;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		dest._00 = s.x;
		dest._10 = s.y;
		dest._20 = s.z;
		dest._01 = u.x;
		dest._11 = u.y;
		dest._21 = u.z;
		dest._02 = -f.x;
		dest._12 = -f.y;
		dest._22 = -f.z;
		dest._30 = -(s.x * eye.x + s.y * eye.y + s.z * eye.z);
		dest._31 = -(u.x * eye.x + u.y * eye.y + u.z * eye.z);
		dest._32 = f.x * eye.x + f.y * eye.y + f.z * eye.z;
		return dest;
	}
	static perspective(fovy,aspectRatio,near,far,dest) {
		var f = 1 / Math.tan(fovy / 2);
		var nf = 1 / (near - far);
		dest._00 = f / aspectRatio;
		dest._01 = 0;
		dest._02 = 0;
		dest._03 = 0;
		dest._10 = 0;
		dest._11 = f;
		dest._12 = 0;
		dest._13 = 0;
		dest._20 = 0;
		dest._21 = 0;
		dest._22 = (far + near) * nf;
		dest._23 = -1;
		dest._30 = 0;
		dest._31 = 0;
		dest._32 = 2 * far * near * nf;
		dest._33 = 0;
		return dest;
	}
	static orthographic(left,right,bottom,top,near,far,dest) {
		if(far == null) {
			far = 1;
		}
		if(near == null) {
			near = -1;
		}
		var rl = 1 / (right - left);
		var tb = 1 / (top - bottom);
		var fn = 1 / (far - near);
		dest._00 = 2 * rl;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = -1 * (left + right) * rl;
		dest._01 = 0;
		dest._11 = 2 * tb;
		dest._21 = 0;
		dest._31 = -1 * (top + bottom) * tb;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = -2 * fn;
		dest._32 = -1 * (far + near) * fn;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		return dest;
	}
	static frustum(left,right,bottom,top,near,far,dest) {
		if(far == null) {
			far = 1;
		}
		if(near == null) {
			near = -1;
		}
		var rl = 1 / (right - left);
		var tb = 1 / (top - bottom);
		var nf = 1 / (near - far);
		dest._00 = near * 2 * rl;
		dest._01 = 0;
		dest._02 = 0;
		dest._03 = 0;
		dest._10 = 0;
		dest._11 = near * 2 * tb;
		dest._12 = 0;
		dest._13 = 0;
		dest._20 = (right + left) * tb;
		dest._21 = (top + bottom) * tb;
		dest._22 = (far + near) * nf;
		dest._23 = -1;
		dest._30 = 0;
		dest._31 = 0;
		dest._32 = far * near * 2 * nf;
		dest._33 = 0;
		return dest;
	}
}
$hx_exports["glm"]["GLM"] = glm_GLM;
glm_GLM.__name__ = true;
class glm_Mat3Base {
	constructor() {
	}
}
$hx_exports["glm"]["Mat3Base"] = glm_Mat3Base;
glm_Mat3Base.__name__ = true;
Object.assign(glm_Mat3Base.prototype, {
	__class__: glm_Mat3Base
});
class glm__$Mat3_Mat3_$Impl_$ {
	static _new(_r0c0,_r0c1,_r0c2,_r1c0,_r1c1,_r1c2,_r2c0,_r2c1,_r2c2) {
		if(_r2c2 == null) {
			_r2c2 = 0;
		}
		if(_r2c1 == null) {
			_r2c1 = 0;
		}
		if(_r2c0 == null) {
			_r2c0 = 0;
		}
		if(_r1c2 == null) {
			_r1c2 = 0;
		}
		if(_r1c1 == null) {
			_r1c1 = 0;
		}
		if(_r1c0 == null) {
			_r1c0 = 0;
		}
		if(_r0c2 == null) {
			_r0c2 = 0;
		}
		if(_r0c1 == null) {
			_r0c1 = 0;
		}
		if(_r0c0 == null) {
			_r0c0 = 0;
		}
		var this1 = new glm_Mat3Base();
		this1._00 = _r0c0;
		this1._01 = _r1c0;
		this1._02 = _r2c0;
		this1._10 = _r0c1;
		this1._11 = _r1c1;
		this1._12 = _r2c1;
		this1._20 = _r0c2;
		this1._21 = _r1c2;
		this1._22 = _r2c2;
		return this1;
	}
	static get_r0c0(this1) {
		return this1._00;
	}
	static set_r0c0(this1,v) {
		return this1._00 = v;
	}
	static get_r1c0(this1) {
		return this1._01;
	}
	static set_r1c0(this1,v) {
		return this1._01 = v;
	}
	static get_r2c0(this1) {
		return this1._02;
	}
	static set_r2c0(this1,v) {
		return this1._02 = v;
	}
	static get_r0c1(this1) {
		return this1._10;
	}
	static set_r0c1(this1,v) {
		return this1._10 = v;
	}
	static get_r1c1(this1) {
		return this1._11;
	}
	static set_r1c1(this1,v) {
		return this1._11 = v;
	}
	static get_r2c1(this1) {
		return this1._12;
	}
	static set_r2c1(this1,v) {
		return this1._12 = v;
	}
	static get_r0c2(this1) {
		return this1._20;
	}
	static set_r0c2(this1,v) {
		return this1._20 = v;
	}
	static get_r1c2(this1) {
		return this1._21;
	}
	static set_r1c2(this1,v) {
		return this1._21 = v;
	}
	static get_r2c2(this1) {
		return this1._22;
	}
	static set_r2c2(this1,v) {
		return this1._22 = v;
	}
	static get(this1,key) {
		switch(key) {
		case 0:
			return this1._00;
		case 1:
			return this1._01;
		case 2:
			return this1._02;
		case 3:
			return this1._10;
		case 4:
			return this1._11;
		case 5:
			return this1._12;
		case 6:
			return this1._20;
		case 7:
			return this1._21;
		case 8:
			return this1._22;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-8)!");
		}
	}
	static set(this1,key,value) {
		switch(key) {
		case 0:
			return this1._00 = value;
		case 1:
			return this1._01 = value;
		case 2:
			return this1._02 = value;
		case 3:
			return this1._10 = value;
		case 4:
			return this1._11 = value;
		case 5:
			return this1._12 = value;
		case 6:
			return this1._20 = value;
		case 7:
			return this1._21 = value;
		case 8:
			return this1._22 = value;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-8)!");
		}
	}
	static equals(this1,b) {
		return !(Math.abs(this1._00 - b._00) >= glm_GLM.EPSILON || Math.abs(this1._10 - b._10) >= glm_GLM.EPSILON || Math.abs(this1._20 - b._20) >= glm_GLM.EPSILON || Math.abs(this1._01 - b._01) >= glm_GLM.EPSILON || Math.abs(this1._11 - b._11) >= glm_GLM.EPSILON || Math.abs(this1._21 - b._21) >= glm_GLM.EPSILON || Math.abs(this1._02 - b._02) >= glm_GLM.EPSILON || Math.abs(this1._12 - b._12) >= glm_GLM.EPSILON || Math.abs(this1._22 - b._22) >= glm_GLM.EPSILON);
	}
	static toString(this1) {
		return "[" + this1._00 + ", " + this1._10 + ", " + this1._20 + "]\n" + ("[" + this1._01 + ", " + this1._11 + ", " + this1._21 + "]\n") + ("[" + this1._02 + ", " + this1._12 + ", " + this1._22 + "]\n");
	}
	static identity(dest) {
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		return dest;
	}
	static copy(src,dest) {
		dest._00 = src._00;
		dest._10 = src._10;
		dest._20 = src._20;
		dest._01 = src._01;
		dest._11 = src._11;
		dest._21 = src._21;
		dest._02 = src._02;
		dest._12 = src._12;
		dest._22 = src._22;
		return dest;
	}
	static transpose(src,dest) {
		var src_r1c0 = src._01;
		var src_r2c0 = src._02;
		var src_r2c1 = src._12;
		dest._00 = src._00;
		dest._01 = src._10;
		dest._02 = src._20;
		dest._10 = src_r1c0;
		dest._11 = src._11;
		dest._12 = src._21;
		dest._20 = src_r2c0;
		dest._21 = src_r2c1;
		dest._22 = src._22;
		return dest;
	}
	static cofactor(a,b,c,d) {
		return a * d - b * c;
	}
	static determinant(src) {
		var c00 = src._11 * src._22 - src._21 * src._12;
		var c01 = src._10 * src._22 - src._20 * src._12;
		var c02 = src._10 * src._21 - src._20 * src._11;
		return src._00 * c00 - src._01 * c01 + src._02 * c02;
	}
	static invert(src,dest) {
		var c00 = src._11 * src._22 - src._21 * src._12;
		var c01 = src._10 * src._22 - src._20 * src._12;
		var c02 = src._10 * src._21 - src._20 * src._11;
		var det = src._00 * c00 - src._01 * c01 + src._02 * c02;
		if(Math.abs(det) < glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("determinant is too small");
		}
		var c10 = src._01 * src._22 - src._21 * src._02;
		var c11 = src._00 * src._22 - src._20 * src._02;
		var c12 = src._00 * src._21 - src._20 * src._01;
		var c20 = src._01 * src._12 - src._11 * src._02;
		var c21 = src._00 * src._12 - src._10 * src._02;
		var c22 = src._00 * src._11 - src._10 * src._01;
		var invdet = 1.0 / det;
		dest._00 = c00 * invdet;
		dest._01 = -c01 * invdet;
		dest._02 = c02 * invdet;
		dest._10 = -c10 * invdet;
		dest._11 = c11 * invdet;
		dest._12 = -c12 * invdet;
		dest._20 = c20 * invdet;
		dest._21 = -c21 * invdet;
		dest._22 = c22 * invdet;
		return dest;
	}
	static multMat(a,b,dest) {
		var _a;
		var _b;
		if(dest == a) {
			var this1 = new glm_Mat3Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			var dest1 = this1;
			dest1._00 = a._00;
			dest1._10 = a._10;
			dest1._20 = a._20;
			dest1._01 = a._01;
			dest1._11 = a._11;
			dest1._21 = a._21;
			dest1._02 = a._02;
			dest1._12 = a._12;
			dest1._22 = a._22;
			_a = dest1;
			_b = b;
		} else if(dest == b) {
			_a = a;
			var this2 = new glm_Mat3Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			var dest2 = this2;
			dest2._00 = b._00;
			dest2._10 = b._10;
			dest2._20 = b._20;
			dest2._01 = b._01;
			dest2._11 = b._11;
			dest2._21 = b._21;
			dest2._02 = b._02;
			dest2._12 = b._12;
			dest2._22 = b._22;
			_b = dest2;
		} else {
			_a = a;
			_b = b;
		}
		dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02;
		dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12;
		dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22;
		dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02;
		dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12;
		dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22;
		dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02;
		dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12;
		dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22;
		return dest;
	}
	static multMatOp(a,b) {
		var this1 = new glm_Mat3Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		var dest = this1;
		var _a;
		var _b;
		if(dest == a) {
			var this2 = new glm_Mat3Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			var dest1 = this2;
			dest1._00 = a._00;
			dest1._10 = a._10;
			dest1._20 = a._20;
			dest1._01 = a._01;
			dest1._11 = a._11;
			dest1._21 = a._21;
			dest1._02 = a._02;
			dest1._12 = a._12;
			dest1._22 = a._22;
			_a = dest1;
			_b = b;
		} else if(dest == b) {
			_a = a;
			var this3 = new glm_Mat3Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			var dest2 = this3;
			dest2._00 = b._00;
			dest2._10 = b._10;
			dest2._20 = b._20;
			dest2._01 = b._01;
			dest2._11 = b._11;
			dest2._21 = b._21;
			dest2._02 = b._02;
			dest2._12 = b._12;
			dest2._22 = b._22;
			_b = dest2;
		} else {
			_a = a;
			_b = b;
		}
		dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02;
		dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12;
		dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22;
		dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02;
		dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12;
		dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22;
		dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02;
		dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12;
		dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22;
		return dest;
	}
	static multVec(m,v,dest) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		dest.x = m._00 * x + m._10 * y + m._20 * z;
		dest.y = m._01 * x + m._11 * y + m._21 * z;
		dest.z = m._02 * x + m._12 * y + m._22 * z;
		return dest;
	}
	static multVecOp(m,v) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest = this1;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		dest.x = m._00 * x + m._10 * y + m._20 * z;
		dest.y = m._01 * x + m._11 * y + m._21 * z;
		dest.z = m._02 * x + m._12 * y + m._22 * z;
		return dest;
	}
	static fromFloatArray(arr) {
		var this1 = new glm_Mat3Base();
		this1._00 = arr[0];
		this1._01 = arr[1];
		this1._02 = arr[2];
		this1._10 = arr[3];
		this1._11 = arr[4];
		this1._12 = arr[5];
		this1._20 = arr[6];
		this1._21 = arr[7];
		this1._22 = arr[8];
		return this1;
	}
	static toFloatArray(this1) {
		return [this1._00,this1._01,this1._02,this1._10,this1._11,this1._12,this1._20,this1._21,this1._22];
	}
}
$hx_exports["glm"]["Mat3Util"] = glm__$Mat3_Mat3_$Impl_$;
glm__$Mat3_Mat3_$Impl_$.__name__ = true;
class glm_Mat4Base {
	constructor() {
	}
}
$hx_exports["glm"]["Mat4Base"] = glm_Mat4Base;
glm_Mat4Base.__name__ = true;
Object.assign(glm_Mat4Base.prototype, {
	__class__: glm_Mat4Base
});
class glm__$Mat4_Mat4_$Impl_$ {
	static _new(_r0c0,_r0c1,_r0c2,_r0c3,_r1c0,_r1c1,_r1c2,_r1c3,_r2c0,_r2c1,_r2c2,_r2c3,_r3c0,_r3c1,_r3c2,_r3c3) {
		if(_r3c3 == null) {
			_r3c3 = 0;
		}
		if(_r3c2 == null) {
			_r3c2 = 0;
		}
		if(_r3c1 == null) {
			_r3c1 = 0;
		}
		if(_r3c0 == null) {
			_r3c0 = 0;
		}
		if(_r2c3 == null) {
			_r2c3 = 0;
		}
		if(_r2c2 == null) {
			_r2c2 = 0;
		}
		if(_r2c1 == null) {
			_r2c1 = 0;
		}
		if(_r2c0 == null) {
			_r2c0 = 0;
		}
		if(_r1c3 == null) {
			_r1c3 = 0;
		}
		if(_r1c2 == null) {
			_r1c2 = 0;
		}
		if(_r1c1 == null) {
			_r1c1 = 0;
		}
		if(_r1c0 == null) {
			_r1c0 = 0;
		}
		if(_r0c3 == null) {
			_r0c3 = 0;
		}
		if(_r0c2 == null) {
			_r0c2 = 0;
		}
		if(_r0c1 == null) {
			_r0c1 = 0;
		}
		if(_r0c0 == null) {
			_r0c0 = 0;
		}
		var this1 = new glm_Mat4Base();
		this1._00 = _r0c0;
		this1._01 = _r1c0;
		this1._02 = _r2c0;
		this1._03 = _r3c0;
		this1._10 = _r0c1;
		this1._11 = _r1c1;
		this1._12 = _r2c1;
		this1._13 = _r3c1;
		this1._20 = _r0c2;
		this1._21 = _r1c2;
		this1._22 = _r2c2;
		this1._23 = _r3c2;
		this1._30 = _r0c3;
		this1._31 = _r1c3;
		this1._32 = _r2c3;
		this1._33 = _r3c3;
		return this1;
	}
	static get_r0c0(this1) {
		return this1._00;
	}
	static set_r0c0(this1,v) {
		return this1._00 = v;
	}
	static get_r1c0(this1) {
		return this1._01;
	}
	static set_r1c0(this1,v) {
		return this1._01 = v;
	}
	static get_r2c0(this1) {
		return this1._02;
	}
	static set_r2c0(this1,v) {
		return this1._02 = v;
	}
	static get_r3c0(this1) {
		return this1._03;
	}
	static set_r3c0(this1,v) {
		return this1._03 = v;
	}
	static get_r0c1(this1) {
		return this1._10;
	}
	static set_r0c1(this1,v) {
		return this1._10 = v;
	}
	static get_r1c1(this1) {
		return this1._11;
	}
	static set_r1c1(this1,v) {
		return this1._11 = v;
	}
	static get_r2c1(this1) {
		return this1._12;
	}
	static set_r2c1(this1,v) {
		return this1._12 = v;
	}
	static get_r3c1(this1) {
		return this1._13;
	}
	static set_r3c1(this1,v) {
		return this1._13 = v;
	}
	static get_r0c2(this1) {
		return this1._20;
	}
	static set_r0c2(this1,v) {
		return this1._20 = v;
	}
	static get_r1c2(this1) {
		return this1._21;
	}
	static set_r1c2(this1,v) {
		return this1._21 = v;
	}
	static get_r2c2(this1) {
		return this1._22;
	}
	static set_r2c2(this1,v) {
		return this1._22 = v;
	}
	static get_r3c2(this1) {
		return this1._23;
	}
	static set_r3c2(this1,v) {
		return this1._23 = v;
	}
	static get_r0c3(this1) {
		return this1._30;
	}
	static set_r0c3(this1,v) {
		return this1._30 = v;
	}
	static get_r1c3(this1) {
		return this1._31;
	}
	static set_r1c3(this1,v) {
		return this1._31 = v;
	}
	static get_r2c3(this1) {
		return this1._32;
	}
	static set_r2c3(this1,v) {
		return this1._32 = v;
	}
	static get_r3c3(this1) {
		return this1._33;
	}
	static set_r3c3(this1,v) {
		return this1._33 = v;
	}
	static get(this1,key) {
		switch(key) {
		case 0:
			return this1._00;
		case 1:
			return this1._01;
		case 2:
			return this1._02;
		case 3:
			return this1._03;
		case 4:
			return this1._10;
		case 5:
			return this1._11;
		case 6:
			return this1._12;
		case 7:
			return this1._13;
		case 8:
			return this1._20;
		case 9:
			return this1._21;
		case 10:
			return this1._22;
		case 11:
			return this1._23;
		case 12:
			return this1._30;
		case 13:
			return this1._31;
		case 14:
			return this1._32;
		case 15:
			return this1._33;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-15)!");
		}
	}
	static set(this1,key,value) {
		switch(key) {
		case 0:
			return this1._00 = value;
		case 1:
			return this1._01 = value;
		case 2:
			return this1._02 = value;
		case 3:
			return this1._03 = value;
		case 4:
			return this1._10 = value;
		case 5:
			return this1._11 = value;
		case 6:
			return this1._12 = value;
		case 7:
			return this1._13 = value;
		case 8:
			return this1._20 = value;
		case 9:
			return this1._21 = value;
		case 10:
			return this1._22 = value;
		case 11:
			return this1._23 = value;
		case 12:
			return this1._30 = value;
		case 13:
			return this1._31 = value;
		case 14:
			return this1._32 = value;
		case 15:
			return this1._33 = value;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-15)!");
		}
	}
	static equals(this1,b) {
		return !(Math.abs(this1._00 - b._00) >= glm_GLM.EPSILON || Math.abs(this1._10 - b._10) >= glm_GLM.EPSILON || Math.abs(this1._20 - b._20) >= glm_GLM.EPSILON || Math.abs(this1._30 - b._30) >= glm_GLM.EPSILON || Math.abs(this1._01 - b._01) >= glm_GLM.EPSILON || Math.abs(this1._11 - b._11) >= glm_GLM.EPSILON || Math.abs(this1._21 - b._21) >= glm_GLM.EPSILON || Math.abs(this1._31 - b._31) >= glm_GLM.EPSILON || Math.abs(this1._02 - b._02) >= glm_GLM.EPSILON || Math.abs(this1._12 - b._12) >= glm_GLM.EPSILON || Math.abs(this1._22 - b._22) >= glm_GLM.EPSILON || Math.abs(this1._32 - b._32) >= glm_GLM.EPSILON || Math.abs(this1._03 - b._03) >= glm_GLM.EPSILON || Math.abs(this1._13 - b._13) >= glm_GLM.EPSILON || Math.abs(this1._23 - b._23) >= glm_GLM.EPSILON || Math.abs(this1._33 - b._33) >= glm_GLM.EPSILON);
	}
	static toString(this1) {
		return "[" + this1._00 + ", " + this1._10 + ", " + this1._20 + ", " + this1._30 + "]\n" + ("[" + this1._01 + ", " + this1._11 + ", " + this1._21 + ", " + this1._31 + "]\n") + ("[" + this1._02 + ", " + this1._12 + ", " + this1._22 + ", " + this1._32 + "]\n") + ("[" + this1._03 + ", " + this1._13 + ", " + this1._23 + ", " + this1._33 + "]\n");
	}
	static identity(dest) {
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		return dest;
	}
	static copy(src,dest) {
		dest._00 = src._00;
		dest._10 = src._10;
		dest._20 = src._20;
		dest._30 = src._30;
		dest._01 = src._01;
		dest._11 = src._11;
		dest._21 = src._21;
		dest._31 = src._31;
		dest._02 = src._02;
		dest._12 = src._12;
		dest._22 = src._22;
		dest._32 = src._32;
		dest._03 = src._03;
		dest._13 = src._13;
		dest._23 = src._23;
		dest._33 = src._33;
		return dest;
	}
	static transpose(src,dest) {
		var src_r1c0 = src._01;
		var src_r2c0 = src._02;
		var src_r2c1 = src._12;
		var src_r3c0 = src._03;
		var src_r3c1 = src._13;
		var src_r3c2 = src._23;
		dest._00 = src._00;
		dest._01 = src._10;
		dest._02 = src._20;
		dest._03 = src._30;
		dest._10 = src_r1c0;
		dest._11 = src._11;
		dest._12 = src._21;
		dest._13 = src._31;
		dest._20 = src_r2c0;
		dest._21 = src_r2c1;
		dest._22 = src._22;
		dest._23 = src._32;
		dest._30 = src_r3c0;
		dest._31 = src_r3c1;
		dest._32 = src_r3c2;
		dest._33 = src._33;
		return dest;
	}
	static determinant(src) {
		var a00 = src._00;
		var a01 = src._01;
		var a02 = src._02;
		var a03 = src._03;
		var a10 = src._10;
		var a11 = src._11;
		var a12 = src._12;
		var a13 = src._13;
		var a20 = src._20;
		var a21 = src._21;
		var a22 = src._22;
		var a23 = src._23;
		var a30 = src._30;
		var a31 = src._31;
		var a32 = src._32;
		var a33 = src._33;
		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	}
	static invert(src,dest) {
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		return dest;
	}
	static multMat(a,b,dest) {
		var _a;
		var _b;
		if(dest == a) {
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest1 = this1;
			dest1._00 = a._00;
			dest1._10 = a._10;
			dest1._20 = a._20;
			dest1._30 = a._30;
			dest1._01 = a._01;
			dest1._11 = a._11;
			dest1._21 = a._21;
			dest1._31 = a._31;
			dest1._02 = a._02;
			dest1._12 = a._12;
			dest1._22 = a._22;
			dest1._32 = a._32;
			dest1._03 = a._03;
			dest1._13 = a._13;
			dest1._23 = a._23;
			dest1._33 = a._33;
			_a = dest1;
			_b = b;
		} else if(dest == b) {
			_a = a;
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest2 = this2;
			dest2._00 = b._00;
			dest2._10 = b._10;
			dest2._20 = b._20;
			dest2._30 = b._30;
			dest2._01 = b._01;
			dest2._11 = b._11;
			dest2._21 = b._21;
			dest2._31 = b._31;
			dest2._02 = b._02;
			dest2._12 = b._12;
			dest2._22 = b._22;
			dest2._32 = b._32;
			dest2._03 = b._03;
			dest2._13 = b._13;
			dest2._23 = b._23;
			dest2._33 = b._33;
			_b = dest2;
		} else {
			_a = a;
			_b = b;
		}
		dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		return dest;
	}
	static multMatOp(a,b) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var _a;
		var _b;
		if(dest == a) {
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest1 = this2;
			dest1._00 = a._00;
			dest1._10 = a._10;
			dest1._20 = a._20;
			dest1._30 = a._30;
			dest1._01 = a._01;
			dest1._11 = a._11;
			dest1._21 = a._21;
			dest1._31 = a._31;
			dest1._02 = a._02;
			dest1._12 = a._12;
			dest1._22 = a._22;
			dest1._32 = a._32;
			dest1._03 = a._03;
			dest1._13 = a._13;
			dest1._23 = a._23;
			dest1._33 = a._33;
			_a = dest1;
			_b = b;
		} else if(dest == b) {
			_a = a;
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = b._00;
			dest2._10 = b._10;
			dest2._20 = b._20;
			dest2._30 = b._30;
			dest2._01 = b._01;
			dest2._11 = b._11;
			dest2._21 = b._21;
			dest2._31 = b._31;
			dest2._02 = b._02;
			dest2._12 = b._12;
			dest2._22 = b._22;
			dest2._32 = b._32;
			dest2._03 = b._03;
			dest2._13 = b._13;
			dest2._23 = b._23;
			dest2._33 = b._33;
			_b = dest2;
		} else {
			_a = a;
			_b = b;
		}
		dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		return dest;
	}
	static multVec(m,v,dest) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = m._00 * x + m._10 * y + m._20 * z + m._30 * w;
		dest.y = m._01 * x + m._11 * y + m._21 * z + m._31 * w;
		dest.z = m._02 * x + m._12 * y + m._22 * z + m._32 * w;
		dest.w = m._03 * x + m._13 * y + m._23 * z + m._33 * w;
		return dest;
	}
	static multVecOp(m,v) {
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var dest = this1;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = m._00 * x + m._10 * y + m._20 * z + m._30 * w;
		dest.y = m._01 * x + m._11 * y + m._21 * z + m._31 * w;
		dest.z = m._02 * x + m._12 * y + m._22 * z + m._32 * w;
		dest.w = m._03 * x + m._13 * y + m._23 * z + m._33 * w;
		return dest;
	}
	static fromFloatArray(arr) {
		var this1 = new glm_Mat4Base();
		this1._00 = arr[0];
		this1._01 = arr[1];
		this1._02 = arr[2];
		this1._03 = arr[3];
		this1._10 = arr[4];
		this1._11 = arr[5];
		this1._12 = arr[6];
		this1._13 = arr[7];
		this1._20 = arr[8];
		this1._21 = arr[9];
		this1._22 = arr[10];
		this1._23 = arr[11];
		this1._30 = arr[12];
		this1._31 = arr[13];
		this1._32 = arr[14];
		this1._33 = arr[15];
		return this1;
	}
	static toFloatArray(this1) {
		return [this1._00,this1._01,this1._02,this1._03,this1._10,this1._11,this1._12,this1._13,this1._20,this1._21,this1._22,this1._23,this1._30,this1._31,this1._32,this1._33];
	}
}
$hx_exports["glm"]["Mat4Util"] = glm__$Mat4_Mat4_$Impl_$;
glm__$Mat4_Mat4_$Impl_$.__name__ = true;
class glm_QuatBase {
	constructor() {
	}
}
$hx_exports["glm"]["QuatBase"] = glm_QuatBase;
glm_QuatBase.__name__ = true;
Object.assign(glm_QuatBase.prototype, {
	__class__: glm_QuatBase
});
class glm__$Quat_Quat_$Impl_$ {
	static get_x(this1) {
		return this1.x;
	}
	static set_x(this1,v) {
		return this1.x = v;
	}
	static get_y(this1) {
		return this1.y;
	}
	static set_y(this1,v) {
		return this1.y = v;
	}
	static get_z(this1) {
		return this1.z;
	}
	static set_z(this1,v) {
		return this1.z = v;
	}
	static get_w(this1) {
		return this1.w;
	}
	static set_w(this1,v) {
		return this1.w = v;
	}
	static get(this1,key) {
		switch(key) {
		case 0:
			return this1.x;
		case 1:
			return this1.y;
		case 2:
			return this1.z;
		case 3:
			return this1.w;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
		}
	}
	static set(this1,key,value) {
		switch(key) {
		case 0:
			return this1.x = value;
		case 1:
			return this1.y = value;
		case 2:
			return this1.z = value;
		case 3:
			return this1.w = value;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
		}
	}
	static _new(x,y,z,w) {
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = new glm_QuatBase();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		this1.w = w;
		return this1;
	}
	static equals(this1,b) {
		return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON || Math.abs(this1.z - b.z) >= glm_GLM.EPSILON || Math.abs(this1.w - b.w) >= glm_GLM.EPSILON);
	}
	static toString(this1) {
		return "{" + this1.x + ", " + this1.y + ", " + this1.z + ", " + this1.w + "}";
	}
	static lengthSquared(this1) {
		return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
	}
	static length(this1) {
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	}
	static normalize(q,dest) {
		var length = Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest.x = q.x * mult;
		dest.y = q.y * mult;
		dest.z = q.z * mult;
		dest.w = q.w * mult;
		return dest;
	}
	static dot(a,b) {
		return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	}
	static identity(dest) {
		dest.x = 0;
		dest.y = 0;
		dest.z = 0;
		dest.w = 1;
		return dest;
	}
	static copy(src,dest) {
		dest.x = src.x;
		dest.y = src.y;
		dest.z = src.z;
		dest.w = src.w;
		return dest;
	}
	static axisAngle(axis,angle,dest) {
		angle *= 0.5;
		var s = Math.sin(angle);
		dest.x = s * axis.x;
		dest.y = s * axis.y;
		dest.z = s * axis.z;
		dest.w = Math.cos(angle);
		return dest;
	}
	static multiplyQuats(a,b,dest) {
		var ax = a.x;
		var ay = a.y;
		var az = a.z;
		var aw = a.w;
		var bx = b.x;
		var by = b.y;
		var bz = b.z;
		var bw = b.w;
		dest.x = ax * bw + aw * bx + ay * bz - az * by;
		dest.y = ay * bw + aw * by + az * bx - ax * bz;
		dest.z = az * bw + aw * bz + ax * by - ay * bx;
		dest.w = aw * bw - ax * bx - ay * by - az * bz;
		return dest;
	}
	static multiplyQuatsOp(a,b) {
		var this1 = new glm_QuatBase();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 1;
		var dest = this1;
		var ax = a.x;
		var ay = a.y;
		var az = a.z;
		var aw = a.w;
		var bx = b.x;
		var by = b.y;
		var bz = b.z;
		var bw = b.w;
		dest.x = ax * bw + aw * bx + ay * bz - az * by;
		dest.y = ay * bw + aw * by + az * bx - ax * bz;
		dest.z = az * bw + aw * bz + ax * by - ay * bx;
		dest.w = aw * bw - ax * bx - ay * by - az * bz;
		return dest;
	}
	static multiplyScalar(a,s,dest) {
		dest.x = a.x * s;
		dest.y = a.y * s;
		dest.z = a.z * s;
		dest.w = a.w * s;
		return dest;
	}
	static multiplyScalarOp(a,s) {
		var this1 = new glm_QuatBase();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 1;
		var dest = this1;
		dest.x = a.x * s;
		dest.y = a.y * s;
		dest.z = a.z * s;
		dest.w = a.w * s;
		return dest;
	}
	static lerp(a,b,t,dest) {
		var a1 = a.x;
		dest.x = a1 + t * (b.x - a1);
		var a2 = a.y;
		dest.y = a2 + t * (b.y - a2);
		var a3 = a.z;
		dest.z = a3 + t * (b.z - a3);
		var a4 = a.w;
		dest.w = a4 + t * (b.w - a4);
		return dest;
	}
	static slerp(a,b,t,dest) {
		var bx = b.x;
		var by = b.y;
		var bz = b.z;
		var bw = b.w;
		var cosTheta = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
		if(cosTheta < 0) {
			cosTheta = -cosTheta;
			bx = -bx;
			by = -by;
			bz = -bz;
			bw = -bw;
		}
		if(cosTheta > 1 - glm_GLM.EPSILON) {
			var a1 = a.x;
			dest.x = a1 + t * (b.x - a1);
			var a2 = a.y;
			dest.y = a2 + t * (b.y - a2);
			var a3 = a.z;
			dest.z = a3 + t * (b.z - a3);
			var a4 = a.w;
			dest.w = a4 + t * (b.w - a4);
			return dest;
		} else {
			var angle = Math.acos(cosTheta);
			var sa = 1 / Math.sin(angle);
			var i = Math.sin((1 - t) * angle);
			var j = Math.sin(t * angle);
			dest.x = (i * a.x + j * bx) * sa;
			dest.y = (i * a.y + j * by) * sa;
			dest.z = (i * a.z + j * bz) * sa;
			dest.w = (i * a.w + j * bw) * sa;
			return dest;
		}
	}
	static invert(q,dest) {
		var x = q.x;
		var y = q.y;
		var z = q.z;
		var w = q.w;
		var d = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;
		var oneOverD = d < glm_GLM.EPSILON ? 0 : 1 / d;
		dest.x = -x * oneOverD;
		dest.y = -y * oneOverD;
		dest.z = -z * oneOverD;
		dest.w = w * oneOverD;
		return dest;
	}
	static conjugate(q,dest) {
		dest.x = -1 * q.x;
		dest.y = -1 * q.y;
		dest.z = -1 * q.z;
		dest.w = q.w;
		return dest;
	}
	static fromEuler(x,y,z,dest) {
		var c1 = Math.cos(x / 2);
		var c2 = Math.cos(y / 2);
		var c3 = Math.cos(z / 2);
		var s1 = Math.sin(x / 2);
		var s2 = Math.sin(y / 2);
		var s3 = Math.sin(z / 2);
		dest.x = s1 * c2 * c3 + c1 * s2 * s3;
		dest.y = c1 * s2 * c3 - s1 * c2 * s3;
		dest.z = c1 * c2 * s3 + s1 * s2 * c3;
		dest.w = c1 * c2 * c3 - s1 * s2 * s3;
		return dest;
	}
	static fromFloatArray(arr) {
		var this1 = new glm_QuatBase();
		this1.x = arr[0];
		this1.y = arr[1];
		this1.z = arr[2];
		this1.w = arr[3];
		return this1;
	}
	static toFloatArray(this1) {
		return [this1.x,this1.y,this1.z,this1.w];
	}
}
$hx_exports["glm"]["QuatUtil"] = glm__$Quat_Quat_$Impl_$;
glm__$Quat_Quat_$Impl_$.__name__ = true;
class glm_Vec2Base {
	constructor() {
	}
}
$hx_exports["glm"]["Vec2Base"] = glm_Vec2Base;
glm_Vec2Base.__name__ = true;
Object.assign(glm_Vec2Base.prototype, {
	__class__: glm_Vec2Base
});
class glm__$Vec2_Vec2_$Impl_$ {
	static get_x(this1) {
		return this1.x;
	}
	static set_x(this1,v) {
		return this1.x = v;
	}
	static get_y(this1) {
		return this1.y;
	}
	static set_y(this1,v) {
		return this1.y = v;
	}
	static get_i(this1) {
		return this1.x;
	}
	static set_i(this1,v) {
		return this1.x = v;
	}
	static get_j(this1) {
		return this1.y;
	}
	static set_j(this1,v) {
		return this1.y = v;
	}
	static get(this1,key) {
		switch(key) {
		case 0:
			return this1.x;
		case 1:
			return this1.y;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-1)!");
		}
	}
	static set(this1,key,value) {
		switch(key) {
		case 0:
			return this1.x = value;
		case 1:
			return this1.y = value;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-1)!");
		}
	}
	static _new(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = new glm_Vec2Base();
		this1.x = x;
		this1.y = y;
		return this1;
	}
	static equals(this1,b) {
		return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON);
	}
	static toString(this1) {
		return "<" + this1.x + ", " + this1.y + ">";
	}
	static lengthSquared(this1) {
		return this1.x * this1.x + this1.y * this1.y;
	}
	static length(this1) {
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	}
	static copy(src,dest) {
		dest.x = src.x;
		dest.y = src.y;
		return dest;
	}
	static setComponents(dest,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		dest.x = x;
		dest.y = y;
		return dest;
	}
	static addVec(a,b,dest) {
		dest.x = a.x + b.x;
		dest.y = a.y + b.y;
		return dest;
	}
	static subtractVec(a,b,dest) {
		dest.x = a.x - b.x;
		dest.y = a.y - b.y;
		return dest;
	}
	static addVecOp(a,b) {
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		var dest = this1;
		dest.x = a.x + b.x;
		dest.y = a.y + b.y;
		return dest;
	}
	static subtractVecOp(a,b) {
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		var dest = this1;
		dest.x = a.x - b.x;
		dest.y = a.y - b.y;
		return dest;
	}
	static addScalar(a,s,dest) {
		dest.x = a.x + s;
		dest.y = a.y + s;
		return dest;
	}
	static multiplyScalar(a,s,dest) {
		dest.x = a.x * s;
		dest.y = a.y * s;
		return dest;
	}
	static addScalarOp(a,s) {
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		var dest = this1;
		dest.x = a.x + s;
		dest.y = a.y + s;
		return dest;
	}
	static subtractScalarOp(a,s) {
		var s1 = -s;
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		var dest = this1;
		dest.x = a.x + s1;
		dest.y = a.y + s1;
		return dest;
	}
	static multiplyScalarOp(a,s) {
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		var dest = this1;
		dest.x = a.x * s;
		dest.y = a.y * s;
		return dest;
	}
	static divideScalarOp(a,s) {
		var s1 = 1 / s;
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		var dest = this1;
		dest.x = a.x * s1;
		dest.y = a.y * s1;
		return dest;
	}
	static distanceSquared(a,b) {
		return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
	}
	static distance(a,b) {
		return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
	}
	static dot(a,b) {
		return a.x * b.x + a.y * b.y;
	}
	static cross(a,b,dest) {
		var z = a.x * b.y - a.y * b.x;
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = z;
		dest = this1;
		return dest;
	}
	static normalize(v,dest) {
		var length = Math.sqrt(v.x * v.x + v.y * v.y);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest.x = v.x * mult;
		dest.y = v.y * mult;
		return dest;
	}
	static lerp(a,b,t,dest) {
		var a1 = a.x;
		dest.x = a1 + t * (b.x - a1);
		var a2 = a.y;
		dest.y = a2 + t * (b.y - a2);
		return dest;
	}
	static fromFloatArray(arr) {
		var this1 = new glm_Vec2Base();
		this1.x = arr[0];
		this1.y = arr[1];
		return this1;
	}
	static toFloatArray(this1) {
		return [this1.x,this1.y];
	}
}
$hx_exports["glm"]["Vec2Util"] = glm__$Vec2_Vec2_$Impl_$;
glm__$Vec2_Vec2_$Impl_$.__name__ = true;
class glm_Vec3Base {
	constructor() {
	}
}
$hx_exports["glm"]["Vec3Base"] = glm_Vec3Base;
glm_Vec3Base.__name__ = true;
Object.assign(glm_Vec3Base.prototype, {
	__class__: glm_Vec3Base
});
class glm__$Vec3_Vec3_$Impl_$ {
	static get_x(this1) {
		return this1.x;
	}
	static set_x(this1,v) {
		return this1.x = v;
	}
	static get_y(this1) {
		return this1.y;
	}
	static set_y(this1,v) {
		return this1.y = v;
	}
	static get_z(this1) {
		return this1.z;
	}
	static set_z(this1,v) {
		return this1.z = v;
	}
	static get_r(this1) {
		return this1.x;
	}
	static set_r(this1,v) {
		return this1.x = v;
	}
	static get_g(this1) {
		return this1.y;
	}
	static set_g(this1,v) {
		return this1.y = v;
	}
	static get_b(this1) {
		return this1.z;
	}
	static set_b(this1,v) {
		return this1.z = v;
	}
	static get(this1,key) {
		switch(key) {
		case 0:
			return this1.x;
		case 1:
			return this1.y;
		case 2:
			return this1.z;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-2)!");
		}
	}
	static set(this1,key,value) {
		switch(key) {
		case 0:
			return this1.x = value;
		case 1:
			return this1.y = value;
		case 2:
			return this1.z = value;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-2)!");
		}
	}
	static _new(x,y,z) {
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = new glm_Vec3Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		return this1;
	}
	static equals(this1,b) {
		return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON || Math.abs(this1.z - b.z) >= glm_GLM.EPSILON);
	}
	static toString(this1) {
		return "<" + this1.x + ", " + this1.y + ", " + this1.z + ">";
	}
	static lengthSquared(this1) {
		return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z;
	}
	static length(this1) {
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
	}
	static copy(src,dest) {
		dest.x = src.x;
		dest.y = src.y;
		dest.z = src.z;
		return dest;
	}
	static setComponents(dest,x,y,z) {
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		dest.x = x;
		dest.y = y;
		dest.z = z;
		return dest;
	}
	static addVec(a,b,dest) {
		dest.x = a.x + b.x;
		dest.y = a.y + b.y;
		dest.z = a.z + b.z;
		return dest;
	}
	static subtractVec(a,b,dest) {
		dest.x = a.x - b.x;
		dest.y = a.y - b.y;
		dest.z = a.z - b.z;
		return dest;
	}
	static addVecOp(a,b) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest = this1;
		dest.x = a.x + b.x;
		dest.y = a.y + b.y;
		dest.z = a.z + b.z;
		return dest;
	}
	static subtractVecOp(a,b) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest = this1;
		dest.x = a.x - b.x;
		dest.y = a.y - b.y;
		dest.z = a.z - b.z;
		return dest;
	}
	static addScalar(a,s,dest) {
		dest.x = a.x + s;
		dest.y = a.y + s;
		dest.z = a.z + s;
		return dest;
	}
	static multiplyScalar(a,s,dest) {
		dest.x = a.x * s;
		dest.y = a.y * s;
		dest.z = a.z * s;
		return dest;
	}
	static addScalarOp(a,s) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest = this1;
		dest.x = a.x + s;
		dest.y = a.y + s;
		dest.z = a.z + s;
		return dest;
	}
	static subtractScalarOp(a,s) {
		var s1 = -s;
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest = this1;
		dest.x = a.x + s1;
		dest.y = a.y + s1;
		dest.z = a.z + s1;
		return dest;
	}
	static multiplyScalarOp(a,s) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest = this1;
		dest.x = a.x * s;
		dest.y = a.y * s;
		dest.z = a.z * s;
		return dest;
	}
	static divideScalarOp(a,s) {
		var s1 = 1 / s;
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest = this1;
		dest.x = a.x * s1;
		dest.y = a.y * s1;
		dest.z = a.z * s1;
		return dest;
	}
	static distanceSquared(a,b) {
		return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z);
	}
	static distance(a,b) {
		return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));
	}
	static dot(a,b) {
		return a.x * b.x + a.y * b.y + a.z * b.z;
	}
	static cross(a,b,dest) {
		var x = a.y * b.z - a.z * b.y;
		var y = a.z * b.x - a.x * b.z;
		var z = a.x * b.y - a.y * b.x;
		var this1 = new glm_Vec3Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		dest = this1;
		return dest;
	}
	static normalize(v,dest) {
		var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest.x = v.x * mult;
		dest.y = v.y * mult;
		dest.z = v.z * mult;
		return dest;
	}
	static lerp(a,b,t,dest) {
		var a1 = a.x;
		dest.x = a1 + t * (b.x - a1);
		var a2 = a.y;
		dest.y = a2 + t * (b.y - a2);
		var a3 = a.z;
		dest.z = a3 + t * (b.z - a3);
		return dest;
	}
	static fromFloatArray(arr) {
		var this1 = new glm_Vec3Base();
		this1.x = arr[0];
		this1.y = arr[1];
		this1.z = arr[2];
		return this1;
	}
	static toFloatArray(this1) {
		return [this1.x,this1.y,this1.z];
	}
}
$hx_exports["glm"]["Vec3Util"] = glm__$Vec3_Vec3_$Impl_$;
glm__$Vec3_Vec3_$Impl_$.__name__ = true;
class glm_Vec4Base {
	constructor() {
	}
}
$hx_exports["glm"]["Vec4Base"] = glm_Vec4Base;
glm_Vec4Base.__name__ = true;
Object.assign(glm_Vec4Base.prototype, {
	__class__: glm_Vec4Base
});
class glm__$Vec4_Vec4_$Impl_$ {
	static get_x(this1) {
		return this1.x;
	}
	static set_x(this1,v) {
		return this1.x = v;
	}
	static get_y(this1) {
		return this1.y;
	}
	static set_y(this1,v) {
		return this1.y = v;
	}
	static get_z(this1) {
		return this1.z;
	}
	static set_z(this1,v) {
		return this1.z = v;
	}
	static get_w(this1) {
		return this1.w;
	}
	static set_w(this1,v) {
		return this1.w = v;
	}
	static get_r(this1) {
		return this1.x;
	}
	static set_r(this1,v) {
		return this1.x = v;
	}
	static get_g(this1) {
		return this1.y;
	}
	static set_g(this1,v) {
		return this1.y = v;
	}
	static get_b(this1) {
		return this1.z;
	}
	static set_b(this1,v) {
		return this1.z = v;
	}
	static get_a(this1) {
		return this1.w;
	}
	static set_a(this1,v) {
		return this1.w = v;
	}
	static get(this1,key) {
		switch(key) {
		case 0:
			return this1.x;
		case 1:
			return this1.y;
		case 2:
			return this1.z;
		case 3:
			return this1.w;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
		}
	}
	static set(this1,key,value) {
		switch(key) {
		case 0:
			return this1.x = value;
		case 1:
			return this1.y = value;
		case 2:
			return this1.z = value;
		case 3:
			return this1.w = value;
		default:
			throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
		}
	}
	static _new(x,y,z,w) {
		if(w == null) {
			w = 0;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = new glm_Vec4Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		this1.w = w;
		return this1;
	}
	static equals(this1,b) {
		return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON || Math.abs(this1.z - b.z) >= glm_GLM.EPSILON || Math.abs(this1.w - b.w) >= glm_GLM.EPSILON);
	}
	static toString(this1) {
		return "<" + this1.x + ", " + this1.y + ", " + this1.z + ", " + this1.w + ">";
	}
	static lengthSquared(this1) {
		return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
	}
	static length(this1) {
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	}
	static copy(src,dest) {
		dest.x = src.x;
		dest.y = src.y;
		dest.z = src.z;
		dest.w = src.w;
		return dest;
	}
	static setComponents(dest,x,y,z,w) {
		if(w == null) {
			w = 0;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		dest.x = x;
		dest.y = y;
		dest.z = z;
		dest.w = w;
		return dest;
	}
	static addVec(a,b,dest) {
		dest.x = a.x + b.x;
		dest.y = a.y + b.y;
		dest.z = a.z + b.z;
		dest.w = a.w + b.w;
		return dest;
	}
	static subtractVec(a,b,dest) {
		dest.x = a.x - b.x;
		dest.y = a.y - b.y;
		dest.z = a.z - b.z;
		dest.w = a.w - b.w;
		return dest;
	}
	static addVecOp(a,b) {
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var dest = this1;
		dest.x = a.x + b.x;
		dest.y = a.y + b.y;
		dest.z = a.z + b.z;
		dest.w = a.w + b.w;
		return dest;
	}
	static subtractVecOp(a,b) {
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var dest = this1;
		dest.x = a.x - b.x;
		dest.y = a.y - b.y;
		dest.z = a.z - b.z;
		dest.w = a.w - b.w;
		return dest;
	}
	static addScalar(a,s,dest) {
		dest.x = a.x + s;
		dest.y = a.y + s;
		dest.z = a.z + s;
		dest.w = a.w + s;
		return dest;
	}
	static multiplyScalar(a,s,dest) {
		dest.x = a.x * s;
		dest.y = a.y * s;
		dest.z = a.z * s;
		dest.w = a.w * s;
		return dest;
	}
	static addScalarOp(a,s) {
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var dest = this1;
		dest.x = a.x + s;
		dest.y = a.y + s;
		dest.z = a.z + s;
		dest.w = a.w + s;
		return dest;
	}
	static subtractScalarOp(a,s) {
		var s1 = -s;
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var dest = this1;
		dest.x = a.x + s1;
		dest.y = a.y + s1;
		dest.z = a.z + s1;
		dest.w = a.w + s1;
		return dest;
	}
	static multiplyScalarOp(a,s) {
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var dest = this1;
		dest.x = a.x * s;
		dest.y = a.y * s;
		dest.z = a.z * s;
		dest.w = a.w * s;
		return dest;
	}
	static divideScalarOp(a,s) {
		var s1 = 1 / s;
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var dest = this1;
		dest.x = a.x * s1;
		dest.y = a.y * s1;
		dest.z = a.z * s1;
		dest.w = a.w * s1;
		return dest;
	}
	static distanceSquared(a,b) {
		return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z) + (a.w - b.w) * (a.w - b.w);
	}
	static distance(a,b) {
		return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z) + (a.w - b.w) * (a.w - b.w));
	}
	static dot(a,b) {
		return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	}
	static normalize(v,dest) {
		var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest.x = v.x * mult;
		dest.y = v.y * mult;
		dest.z = v.z * mult;
		dest.w = v.w * mult;
		return dest;
	}
	static lerp(a,b,t,dest) {
		var a1 = a.x;
		dest.x = a1 + t * (b.x - a1);
		var a2 = a.y;
		dest.y = a2 + t * (b.y - a2);
		var a3 = a.z;
		dest.z = a3 + t * (b.z - a3);
		var a4 = a.w;
		dest.w = a4 + t * (b.w - a4);
		return dest;
	}
	static fromFloatArray(arr) {
		var this1 = new glm_Vec4Base();
		this1.x = arr[0];
		this1.y = arr[1];
		this1.z = arr[2];
		this1.w = arr[3];
		return this1;
	}
	static toFloatArray(this1) {
		return [this1.x,this1.y,this1.z,this1.w];
	}
}
$hx_exports["glm"]["Vec4Util"] = glm__$Vec4_Vec4_$Impl_$;
glm__$Vec4_Vec4_$Impl_$.__name__ = true;
class haxe_Log {
	static formatOutput(v,infos) {
		var str = Std.string(v);
		if(infos == null) {
			return str;
		}
		var pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos != null && infos.customParams != null) {
			var _g = 0;
			var _g1 = infos.customParams;
			while(_g < _g1.length) {
				var v1 = _g1[_g];
				++_g;
				str += ", " + Std.string(v1);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		var str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
haxe_Log.__name__ = true;
class haxe_Timer {
	constructor(time_ms) {
		var me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
}
haxe_Timer.__name__ = true;
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
});
class haxe_crypto_Adler32 {
	constructor() {
		this.a1 = 1;
		this.a2 = 0;
	}
	update(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	equals(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	static read(i) {
		var a = new haxe_crypto_Adler32();
		var a2a = i.readByte();
		var a2b = i.readByte();
		var a1a = i.readByte();
		var a1b = i.readByte();
		a.a1 = a1a << 8 | a1b;
		a.a2 = a2a << 8 | a2b;
		return a;
	}
}
haxe_crypto_Adler32.__name__ = true;
Object.assign(haxe_crypto_Adler32.prototype, {
	__class__: haxe_crypto_Adler32
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	getFloat(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	getUInt16(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	getInt32(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			var buf = new Uint8Array(s.length << 1);
			var _g = 0;
			var _g1 = s.length;
			while(_g < _g1) {
				var i = _g++;
				var c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		var a = [];
		var i1 = 0;
		while(i1 < s.length) {
			var c1 = s.charCodeAt(i1++);
			if(55296 <= c1 && c1 <= 56319) {
				c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
			}
			if(c1 <= 127) {
				a.push(c1);
			} else if(c1 <= 2047) {
				a.push(192 | c1 >> 6);
				a.push(128 | c1 & 63);
			} else if(c1 <= 65535) {
				a.push(224 | c1 >> 12);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			} else {
				a.push(240 | c1 >> 18);
				a.push(128 | c1 >> 12 & 63);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		var hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
}
haxe_io_Bytes.__name__ = true;
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
class haxe_crypto_Base64 {
	static encode(bytes,complement) {
		if(complement == null) {
			complement = true;
		}
		var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
		if(complement) {
			switch(bytes.length % 3) {
			case 1:
				str += "==";
				break;
			case 2:
				str += "=";
				break;
			default:
			}
		}
		return str;
	}
}
haxe_crypto_Base64.__name__ = true;
class haxe_crypto_BaseCode {
	constructor(base) {
		var len = base.length;
		var nbits = 1;
		while(len > 1 << nbits) ++nbits;
		if(nbits > 8 || len != 1 << nbits) {
			throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
		}
		this.base = base;
		this.nbits = nbits;
	}
	encodeBytes(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
}
haxe_crypto_BaseCode.__name__ = true;
Object.assign(haxe_crypto_BaseCode.prototype, {
	__class__: haxe_crypto_BaseCode
});
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	filter(f) {
		var l2 = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
}
haxe_ds_List.__name__ = true;
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
haxe_ds__$List_ListNode.__name__ = true;
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
});
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	remove(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
}
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
});
class haxe_ds__$StringMap_StringMapIterator {
	constructor(map,keys) {
		this.map = map;
		this.keys = keys;
		this.index = 0;
		this.count = keys.length;
	}
	hasNext() {
		return this.index < this.count;
	}
	next() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
}
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
Object.assign(haxe_ds__$StringMap_StringMapIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapIterator
});
class haxe_ds_StringMap {
	constructor() {
		this.h = { };
	}
	setReserved(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	getReserved(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	existsReserved(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	remove(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	keys() {
		return HxOverrides.iter(this.arrayKeys());
	}
	arrayKeys() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	iterator() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
}
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
class haxe_format_JsonParser {
	constructor(str) {
		this.str = str;
		this.pos = 0;
	}
	doParse() {
		var result = this.parseRec();
		var c;
		while(true) {
			c = this.str.charCodeAt(this.pos++);
			var c1 = c;
			if(!(c1 == c1)) {
				break;
			}
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				this.invalidChar();
			}
		}
		return result;
	}
	parseRec() {
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				return this.parseString();
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var c1 = c;
				var start = this.pos - 1;
				var minus = c1 == 45;
				var digit = !minus;
				var zero = c1 == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				while(true) {
					c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point || e) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				var f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
				var i = f | 0;
				if(i == f) {
					return i;
				} else {
					return f;
				}
				break;
			case 91:
				var arr = [];
				var comma = null;
				while(true) {
					var c2 = this.str.charCodeAt(this.pos++);
					switch(c2) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						if(comma == false) {
							this.invalidChar();
						}
						return arr;
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				var save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				var save1 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				var save2 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				var obj = { };
				var field = null;
				var comma1 = null;
				while(true) {
					var c3 = this.str.charCodeAt(this.pos++);
					switch(c3) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(field != null || comma1) {
							this.invalidChar();
						}
						field = this.parseString();
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						obj[field] = this.parseRec();
						field = null;
						comma1 = true;
						break;
					case 125:
						if(field != null || comma1 == false) {
							this.invalidChar();
						}
						return obj;
					default:
						this.invalidChar();
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	parseString() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.str;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.str.charCodeAt(this.pos++);
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCodePoint(uc);
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid escape sequence \\" + String.fromCodePoint(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) {
				throw new js__$Boot_HaxeError("Unclosed string");
			}
		}
		if(buf == null) {
			return HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			var s1 = this.str;
			var len1 = this.pos - start - 1;
			buf.b += len1 == null ? HxOverrides.substr(s1,start,null) : HxOverrides.substr(s1,start,len1);
			return buf.b;
		}
	}
	invalidChar() {
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	invalidNumber(start) {
		throw new js__$Boot_HaxeError("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
}
haxe_format_JsonParser.__name__ = true;
Object.assign(haxe_format_JsonParser.prototype, {
	__class__: haxe_format_JsonParser
});
class haxe_io_BytesBuffer {
	constructor() {
		this.pos = 0;
		this.size = 0;
	}
	addByte(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	addBytes(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	grow(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	getBytes() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
}
haxe_io_BytesBuffer.__name__ = true;
Object.assign(haxe_io_BytesBuffer.prototype, {
	__class__: haxe_io_BytesBuffer
});
class haxe_io_Input {
	readByte() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	readBytes(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	readFullBytes(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	read(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	readFloat() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	readDouble() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	readInt8() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	readInt16() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	readUInt16() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	readInt32() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	readString(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
}
haxe_io_Input.__name__ = true;
Object.assign(haxe_io_Input.prototype, {
	__class__: haxe_io_Input
});
class haxe_io_BytesInput extends haxe_io_Input {
	constructor(b,pos,len) {
		super();
		if(pos == null) {
			pos = 0;
		}
		if(len == null) {
			len = b.length - pos;
		}
		if(pos < 0 || len < 0 || pos + len > b.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		this.b = b.b;
		this.pos = pos;
		this.len = len;
		this.totlen = len;
	}
	set_position(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	readByte() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	readBytes(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
}
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
Object.assign(haxe_io_BytesInput.prototype, {
	__class__: haxe_io_BytesInput
});
class haxe_io_Output {
	writeByte(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	writeBytes(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	writeFullBytes(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	writeFloat(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	writeInt32(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	writeString(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
}
haxe_io_Output.__name__ = true;
Object.assign(haxe_io_Output.prototype, {
	__class__: haxe_io_Output
});
class haxe_io_BytesOutput extends haxe_io_Output {
	constructor() {
		super();
		this.b = new haxe_io_BytesBuffer();
	}
	writeByte(c) {
		this.b.addByte(c);
	}
	writeBytes(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	getBytes() {
		return this.b.getBytes();
	}
}
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
Object.assign(haxe_io_BytesOutput.prototype, {
	__class__: haxe_io_BytesOutput
});
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
haxe_io_Eof.__name__ = true;
Object.assign(haxe_io_Eof.prototype, {
	__class__: haxe_io_Eof
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class haxe_io_FPHelper {
	static i32ToFloat(i) {
		haxe_io_FPHelper.helper.setInt32(0,i,true);
		return haxe_io_FPHelper.helper.getFloat32(0,true);
	}
	static floatToI32(f) {
		haxe_io_FPHelper.helper.setFloat32(0,f,true);
		return haxe_io_FPHelper.helper.getInt32(0,true);
	}
	static i64ToDouble(low,high) {
		haxe_io_FPHelper.helper.setInt32(0,low,true);
		haxe_io_FPHelper.helper.setInt32(4,high,true);
		return haxe_io_FPHelper.helper.getFloat64(0,true);
	}
}
haxe_io_FPHelper.__name__ = true;
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
class haxe_zip_HuffTools {
	constructor() {
	}
	treeDepth(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	treeCompress(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	treeWalk(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	treeMake(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	make(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g2 = 0;
		var _g3 = nlengths;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g4 = 1;
		var _g5 = maxbits - 1;
		while(_g4 < _g5) {
			var i2 = _g4++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g6 = 0;
		var _g7 = nlengths;
		while(_g6 < _g7) {
			var i3 = _g6++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
}
haxe_zip_HuffTools.__name__ = true;
Object.assign(haxe_zip_HuffTools.prototype, {
	__class__: haxe_zip_HuffTools
});
class haxe_zip__$InflateImpl_Window {
	constructor(hasCrc) {
		this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos = 0;
		if(hasCrc) {
			this.crc = new haxe_crypto_Adler32();
		}
	}
	slide() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	addBytes(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	addByte(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	getLastChar() {
		return this.buffer.b[this.pos - 1];
	}
	available() {
		return this.pos;
	}
	checksum() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
}
haxe_zip__$InflateImpl_Window.__name__ = true;
Object.assign(haxe_zip__$InflateImpl_Window.prototype, {
	__class__: haxe_zip__$InflateImpl_Window
});
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
class haxe_zip_InflateImpl {
	constructor(i,header,crc) {
		if(crc == null) {
			crc = true;
		}
		if(header == null) {
			header = true;
		}
		this.isFinal = false;
		this.htools = new haxe_zip_HuffTools();
		this.huffman = this.buildFixedHuffman();
		this.huffdist = null;
		this.len = 0;
		this.dist = 0;
		this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
		this.input = i;
		this.bits = 0;
		this.nbits = 0;
		this.needed = 0;
		this.output = null;
		this.outpos = 0;
		this.lengths = [];
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.window = new haxe_zip__$InflateImpl_Window(crc);
	}
	buildFixedHuffman() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	readBytes(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	getBits(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	getBit() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	getRevBits(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	resetBits() {
		this.bits = 0;
		this.nbits = 0;
	}
	addBytes(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	addByte(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	addDistOne(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	addDist(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	applyHuffman(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n1 = h.n;
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	inflateLengths(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	inflateLoop() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g2 = hclen;
				var _g3 = 19;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g4 = 0;
				var _g5 = hlit + hdist;
				while(_g4 < _g5) {
					var i2 = _g4++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	static run(i,bufsize) {
		if(bufsize == null) {
			bufsize = 65536;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var output = new haxe_io_BytesBuffer();
		var inflate = new haxe_zip_InflateImpl(i);
		while(true) {
			var len = inflate.readBytes(buf,0,bufsize);
			output.addBytes(buf,0,len);
			if(len < bufsize) {
				break;
			}
		}
		return output.getBytes();
	}
}
haxe_zip_InflateImpl.__name__ = true;
Object.assign(haxe_zip_InflateImpl.prototype, {
	__class__: haxe_zip_InflateImpl
});
class haxe_zip_Uncompress {
	static run(src,bufsize) {
		return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
	}
}
haxe_zip_Uncompress.__name__ = true;
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
}
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
Object.assign(js__$Boot_HaxeError.prototype, {
	__class__: js__$Boot_HaxeError
});
class js_Boot {
	static getClass(o) {
		if(((o) instanceof Array) && o.__enum__ == null) {
			return Array;
		} else {
			var cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			var name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				var e = $hxEnums[o.__enum__];
				var n = e.__constructs__[o._hx_index];
				var con = e[n];
				if(con.__params__) {
					s += "\t";
					var tmp = n + "(";
					var _g = [];
					var _g1 = 0;
					var _g2 = con.__params__;
					while(_g1 < _g2.length) {
						var p = _g2[_g1];
						++_g1;
						_g.push(js_Boot.__string_rec(o[p],s));
					}
					return tmp + _g.join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				var l = o.length;
				var i;
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = l;
				while(_g3 < _g11) {
					var i1 = _g3++;
					str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var k = null;
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			for( var k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
			var intf = cc.__interfaces__;
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(((o) instanceof cl)) {
						return true;
					}
					if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			if(o.__enum__ != null) {
				return $hxEnums[o.__enum__] == cl;
			} else {
				return false;
			}
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		var name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
class js_html__$CanvasElement_CanvasUtil {
	static getContextWebGL(canvas,attribs) {
		var name = "webgl";
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
		var name1 = "experimental-webgl";
		var ctx1 = canvas.getContext(name1,attribs);
		if(ctx1 != null) {
			return ctx1;
		}
		return null;
	}
}
js_html__$CanvasElement_CanvasUtil.__name__ = true;
class minko_AbstractBackend {
	constructor() {
	}
	initialize(canvas) {
	}
	swapBuffers(canvas) {
	}
	run(canvas) {
		if(canvas.get_active()) {
			canvas.step();
		}
	}
	wait(canvas,ms) {
	}
	static create() {
		return new minko_AbstractBackend();
	}
}
$hx_exports["minko"]["AbstractBackend"] = minko_AbstractBackend;
minko_AbstractBackend.__name__ = true;
Object.assign(minko_AbstractBackend.prototype, {
	__class__: minko_AbstractBackend
});
class minko_AbstractCanvas {
	constructor(name,width,height,flags) {
		this._workers = new haxe_ds_StringMap();
		this._name = name;
		this._flags = flags;
		this._data = minko_data_Provider.create();
		this._active = false;
		this._swapBuffersAtEnterFrame = true;
		this._enterFrame = new minko_signal_Signal3();
		this._resized = new minko_signal_Signal3();
		this._fileDropped = new minko_signal_Signal();
		this._joystickAdded = new minko_signal_Signal2();
		this._joystickRemoved = new minko_signal_Signal2();
		this._suspended = new minko_signal_Signal();
		this._resumed = new minko_signal_Signal();
		this._width = width;
		this._height = height;
		this._x = 0;
		this._y = 0;
		this._onWindow = false;
		this._enableRendering = true;
		this._activeWorkers = [];
		var tmp = this._data;
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = width;
		this1.w = height;
		tmp.set("viewport",this1);
	}
	get_framerate() {
		return minko_Timer.fps();
	}
	getJoystickAxis(joystick,axis) {
		return 0;
	}
	isWorkerRegistered(name) {
		return false;
	}
	registerWorker(name,cls) {
		var key = name.toString();
		var _this = this._workers;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,cls);
		} else {
			_this.h[key] = cls;
		}
	}
	initialize() {
	}
	get_enterFrame() {
		return this._enterFrame;
	}
	joystick(id) {
		if(id < this.get_numJoysticks()) {
			return this._joysticks.h[id];
		} else {
			return null;
		}
	}
	get_aspectRatio() {
		return this.get_width() / this.get_height();
	}
	get_data() {
		return this._data;
	}
	get_context() {
		return this._context;
	}
	get_mouse() {
		return this._mouse;
	}
	get_keyboard() {
		return this._keyboard;
	}
	get_touch() {
		return this._touch;
	}
	get_numJoysticks() {
		return Lambda.count(this._joysticks);
	}
	get_resized() {
		return this._resized;
	}
	get_joystickAdded() {
		return this._joystickAdded;
	}
	get_joystickRemoved() {
		return this._joystickRemoved;
	}
	get_suspended() {
		return this._suspended;
	}
	get_resumed() {
		return this._resumed;
	}
	get_active() {
		return this._active;
	}
	createScene() {
		var sceneManager = minko_component_SceneManager.create(this);
		var _gthis = this;
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 3.0;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var camera_mat = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = camera_mat._00;
		var a01 = camera_mat._10;
		var a02 = camera_mat._20;
		var a03 = camera_mat._30;
		var a10 = camera_mat._01;
		var a11 = camera_mat._11;
		var a12 = camera_mat._21;
		var a13 = camera_mat._31;
		var a20 = camera_mat._02;
		var a21 = camera_mat._12;
		var a22 = camera_mat._22;
		var a23 = camera_mat._32;
		var a30 = camera_mat._03;
		var a31 = camera_mat._13;
		var a32 = camera_mat._23;
		var a33 = camera_mat._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		camera_mat = dest;
		this._camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(2139062271)).addComponent(minko_component_Transform.createbyMatrix4(camera_mat)).addComponent(minko_component_PerspectiveCamera.create(this.get_aspectRatio()));
		root.addChild(this._camera);
		this._resizedSlot = this._resized.connect(function(canvas,w,h) {
			var perspectiveCamera = _gthis._camera.getComponent(minko_component_PerspectiveCamera);
			perspectiveCamera.set_aspectRatio(w / h);
		});
		return root;
	}
	get_x() {
		return this._x;
	}
	get_y() {
		return this._y;
	}
	get_width() {
		return this._width;
	}
	get_height() {
		return this._height;
	}
	set_x(value) {
		if(value != this._x) {
			var viewport = this._data.get("viewport");
			this._x = value;
			viewport.x = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	set_y(value) {
		if(value != this._y) {
			var viewport = this._data.get("viewport");
			this._y = value;
			viewport.y = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	set_width(value) {
		if(value != this._width) {
			var viewport = this._data.get("viewport");
			this._width = value;
			viewport.z = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	set_height(value) {
		if(value != this._height) {
			var viewport = this._data.get("viewport");
			this._height = value;
			viewport.w = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	step() {
		var that = this;
		minko_Timer.update();
		if(this._enableRendering) {
			this._enterFrame.execute(that,(minko_Timer.lastTimeStamp - minko_Timer.startTimeStamp) * 1000.0,minko_Timer.dt * 1000.0);
			if(this._swapBuffersAtEnterFrame) {
				this.swapBuffers();
			}
		}
		if(minko_Timer.remainingTime > 0) {
			this._backend.wait(that,minko_Timer.remainingTime);
		}
	}
	run() {
		this._active = true;
		this._backend.run(this);
	}
	quit() {
		this._active = false;
	}
	getWorker(name) {
		var _this = this._workers;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			return null;
		}
		var _this1 = this._workers;
		var worker = (__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name])(name);
		this._activeWorkers.push(worker);
		return worker;
	}
	swapBuffers() {
		this._backend.swapBuffers(this);
	}
	resetInputs() {
		while(this._touch.get_numTouches() > 0) {
			var id = this._touch.get_identifiers()[0];
			var touch = this._touch.get_touches().h[id];
			var x = touch.x;
			var y = touch.y;
			this._touch.updateTouch(id,x,y,0,0);
			this._touch.get_touchMove().execute(this._touch,id,0,0);
			this._touch.removeTouch(id);
			this._touch.get_touchUp().execute(this._touch,id,x,y);
		}
		this._mouse.set_dX(0);
		this._mouse.set_dY(0);
		if(this._mouse.get_leftButtonIsDown()) {
			this._mouse.get_leftButtonUp().execute(this._mouse);
		}
		if(this._mouse.get_rightButtonIsDown()) {
			this._mouse.get_rightButtonUp().execute(this._mouse);
		}
		if(this._mouse.get_middleButtonIsDown()) {
			this._mouse.get_middleButtonUp().execute(this._mouse);
		}
	}
	static get_defaultCanvas() {
		return minko_AbstractCanvas._defaultCanvas;
	}
	static set_defaultCanvas(value) {
		minko_AbstractCanvas._defaultCanvas = value;
		return value;
	}
}
$hx_exports["minko"]["AbstractCanvas"] = minko_AbstractCanvas;
minko_AbstractCanvas.__name__ = true;
Object.assign(minko_AbstractCanvas.prototype, {
	__class__: minko_AbstractCanvas
});
var minko_EventKind = $hxEnums["minko.EventKind"] = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"]
	,EPush: {_hx_index:0,__enum__:"minko.EventKind",toString:$estr}
	,ERelease: {_hx_index:1,__enum__:"minko.EventKind",toString:$estr}
	,EMove: {_hx_index:2,__enum__:"minko.EventKind",toString:$estr}
	,EOver: {_hx_index:3,__enum__:"minko.EventKind",toString:$estr}
	,EOut: {_hx_index:4,__enum__:"minko.EventKind",toString:$estr}
	,EWheel: {_hx_index:5,__enum__:"minko.EventKind",toString:$estr}
	,EFocus: {_hx_index:6,__enum__:"minko.EventKind",toString:$estr}
	,EFocusLost: {_hx_index:7,__enum__:"minko.EventKind",toString:$estr}
	,EKeyDown: {_hx_index:8,__enum__:"minko.EventKind",toString:$estr}
	,EKeyUp: {_hx_index:9,__enum__:"minko.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_index:10,__enum__:"minko.EventKind",toString:$estr}
	,ETextInput: {_hx_index:11,__enum__:"minko.EventKind",toString:$estr}
	,ECheck: {_hx_index:12,__enum__:"minko.EventKind",toString:$estr}
};
class minko_Event {
	constructor(k,x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.button = 0;
		this.kind = k;
		this.relX = x;
		this.relY = y;
	}
	toString() {
		var tmp = Std.string(this.kind) + "[" + (this.relX | 0) + "," + (this.relY | 0) + "]";
		var tmp1;
		switch(this.kind._hx_index) {
		case 0:case 1:case 10:
			tmp1 = ",button=" + this.button;
			break;
		case 2:case 3:case 4:case 6:case 7:case 12:
			tmp1 = "";
			break;
		case 5:
			tmp1 = ",wheelDelta=" + this.wheelDelta;
			break;
		case 8:case 9:
			tmp1 = ",keyCode=" + this.keyCode;
			break;
		case 11:
			tmp1 = ",charCode=" + this.charCode;
			break;
		}
		return tmp + tmp1;
	}
}
minko_Event.__name__ = true;
Object.assign(minko_Event.prototype, {
	__class__: minko_Event
});
class minko_CanvasManager {
	static create(name,width,height,flags) {
		if(flags == null) {
			flags = 2;
		}
		if(height == null) {
			height = 600;
		}
		if(width == null) {
			width = 800;
		}
		var canvas = new minko_WebCanvas(name,width,height,flags);
		canvas.initialize();
		if(minko_AbstractCanvas.get_defaultCanvas() == null) {
			minko_AbstractCanvas.set_defaultCanvas(canvas);
		}
		return canvas;
	}
}
minko_CanvasManager.__name__ = true;
class minko_Timer {
	static update() {
		minko_Timer.frameCount++;
		var newTime = Date.now() / 1000;
		minko_Timer.elapsedTime = newTime - minko_Timer.lastTimeStamp;
		minko_Timer.lastTimeStamp = newTime;
		if(minko_Timer.elapsedTime < minko_Timer.maxDeltaTime) {
			var from = minko_Timer.elapsedTime;
			minko_Timer.currentDT = from + (minko_Timer.currentDT - from) * Math.min(Math.max(minko_Timer.smoothFactor,0),1);
			minko_Timer.remainingTime = 1 / minko_Timer.wantedFPS - minko_Timer.currentDT;
		} else {
			minko_Timer.elapsedTime = 1 / minko_Timer.wantedFPS;
			minko_Timer.remainingTime = 0;
		}
		minko_Timer.dt = minko_Timer.currentDT;
	}
	static get_tmod() {
		return minko_Timer.dt * minko_Timer.wantedFPS;
	}
	static set_tmod(v) {
		minko_Timer.dt = v / minko_Timer.wantedFPS;
		return v;
	}
	static fps() {
		return 1. / minko_Timer.currentDT;
	}
	static skip() {
		minko_Timer.lastTimeStamp = Date.now() / 1000;
	}
	static reset() {
		minko_Timer.startTimeStamp = minko_Timer.lastTimeStamp = Date.now() / 1000;
		minko_Timer.dt = minko_Timer.currentDT = 1. / minko_Timer.wantedFPS;
	}
}
minko_Timer.__name__ = true;
class minko_Tuple {
	constructor(f,s) {
		this.first = f;
		this.second = s;
	}
}
$hx_exports["minko"]["Tuple"] = minko_Tuple;
minko_Tuple.__name__ = true;
Object.assign(minko_Tuple.prototype, {
	__class__: minko_Tuple
});
class minko_Tuple3 {
	constructor(f,s,t) {
		this.first = f;
		this.second = s;
		this.thiree = t;
	}
}
$hx_exports["minko"]["Tuple3"] = minko_Tuple3;
minko_Tuple3.__name__ = true;
Object.assign(minko_Tuple3.prototype, {
	__class__: minko_Tuple3
});
class minko_Tuple4 {
	constructor(a,b,c,d) {
		this.first = a;
		this.second = b;
		this.thiree = c;
		this.four = d;
	}
}
$hx_exports["minko"]["Tuple4"] = minko_Tuple4;
minko_Tuple4.__name__ = true;
Object.assign(minko_Tuple4.prototype, {
	__class__: minko_Tuple4
});
class minko_Tuple5 {
	constructor(a,b,c,d,e) {
		this.first = a;
		this.second = b;
		this.thiree = c;
		this.four = d;
		this.five = e;
	}
}
$hx_exports["minko"]["Tuple5"] = minko_Tuple5;
minko_Tuple5.__name__ = true;
Object.assign(minko_Tuple5.prototype, {
	__class__: minko_Tuple5
});
class minko_Tuple6 {
	constructor(a,b,c,d,e,f) {
		this.first = a;
		this.second = b;
		this.thiree = c;
		this.four = d;
		this.five = e;
		this.six = f;
	}
}
$hx_exports["minko"]["Tuple6"] = minko_Tuple6;
minko_Tuple6.__name__ = true;
Object.assign(minko_Tuple6.prototype, {
	__class__: minko_Tuple6
});
class minko_Uuid {
	static getUuid() {
		var seed = minko_math_Random.makeRandomSeed();
		var chars = minko_Uuid.CHARS;
		var uuid = [];
		var rnd = 0;
		var r;
		var _g = 0;
		while(_g < 36) {
			var i = _g++;
			if(i == 8 || i == 13 || i == 18 || i == 23) {
				uuid[i] = "-";
			} else if(i == 14) {
				uuid[i] = "4";
			} else {
				if(rnd <= 2) {
					seed = Math.floor(seed * 16807.0 % 2147483647.0);
					rnd = 33554432 + Math.floor(seed * 16777216) | 0;
				}
				r = rnd & 15;
				rnd >>= 4;
				uuid[i] = chars[i == 19 ? r & 3 | 8 : r];
			}
		}
		return uuid.join("");
	}
}
$hx_exports["minko"]["Uuid"] = minko_Uuid;
minko_Uuid.__name__ = true;
class minko_WebBackend extends minko_AbstractBackend {
	constructor() {
		super();
	}
	initialize(canvas) {
	}
	swapBuffers(canvas) {
	}
	run(canvas) {
		this.currentCanvas = canvas;
		minko_WebBackend.setLoop($bind(this,this.emscriptenMainLoop));
	}
	wait(canvas,ms) {
	}
	emscriptenMainLoop() {
		this.currentCanvas.step();
	}
	static create() {
		return new minko_WebBackend();
	}
	static getCurrentLoop() {
		return minko_WebBackend.loopFunc;
	}
	static setLoop(f) {
		if(!minko_WebBackend.loopInit) {
			minko_WebBackend.loopInit = true;
			minko_WebBackend.browserLoop();
		}
		minko_WebBackend.loopFunc = f;
	}
	static browserLoop() {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		rqf(minko_WebBackend.browserLoop);
		if(minko_WebBackend.loopFunc != null) {
			minko_WebBackend.loopFunc();
		}
	}
}
$hx_exports["minko"]["WebBackend"] = minko_WebBackend;
minko_WebBackend.__name__ = true;
minko_WebBackend.__super__ = minko_AbstractBackend;
Object.assign(minko_WebBackend.prototype, {
	__class__: minko_WebBackend
});
class minko_WebCanvas extends minko_AbstractCanvas {
	constructor(name,width,height,flags) {
		super(name,width,height,flags);
		this.events = [];
	}
	initialize() {
		minko_file_Options.registerDefaultProtocol("file",function() {
			return new minko_net_WebHTTPProtocol();
		});
		this.initializeInputs();
		this.initializeWindow();
		this.initializeContext();
	}
	initializeInputs() {
		minko_Stage.getInstance().addEventTarget($bind(this,this.onEvent));
	}
	initializeWindow() {
		this._keyboard = minko_input_Keyboard.create();
		this._mouse = minko_input_Mouse.create(this);
		this._touch = minko_input_Touch.create(this);
	}
	initializeContext() {
		this._backend = minko_WebBackend.create();
		this._backend.initialize(this);
		var context = minko_render_GlContext.create();
		if(context == null) {
			throw new js__$Boot_HaxeError("Could not create context");
		}
		var antiAlias = 0;
		var canvas = minko_Stage.getInstance().canvas;
		var gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(canvas,{ alpha : false, stencil : true, antialias : false});
		if(gl == null) {
			throw new js__$Boot_HaxeError("Could not acquire GL context");
		}
		context.gl = gl;
		var reg = new EReg("[0-9]+\\.[0-9]+","");
		var version = gl.getParameter(35724);
		if(reg.match(version)) {
			var glES = parseFloat(reg.matched(0));
			var version2 = Math.round(parseFloat(reg.matched(0)) * 100);
			haxe_Log.trace(glES,{ fileName : "minko/WebCanvas.hx", lineNumber : 76, className : "minko.WebCanvas", methodName : "initializeContext", customParams : [version2]});
		}
		context.initialize();
		this._context = context;
	}
	onResize() {
		this.set_width(minko_Stage.getInstance().get_width());
		this.set_height(minko_Stage.getInstance().get_height());
		this._context.configureViewport(this.get_x(),this.get_y(),this.get_width(),this.get_height());
		this._resized.execute(this,this.get_width(),this.get_height());
	}
	onEvent(e) {
		this.events.push(e);
	}
	stepEvent() {
		var ee = this.events.concat([]);
		this.events = [];
		var executeMouseMove = false;
		var mouseDX = 0;
		var mouseDY = 0;
		var _g = 0;
		_hx_loop1: while(_g < ee.length) {
			var e = ee[_g];
			++_g;
			var kind = e.kind;
			switch(kind._hx_index) {
			case 0:
				this._mouse.set_x(Math.floor(e.relX));
				this._mouse.set_y(Math.floor(e.relY));
				switch(e.button) {
				case 0:
					this._mouse.get_leftButtonDown().execute(this._mouse);
					break _hx_loop1;
				case 1:
					this._mouse.get_rightButtonDown().execute(this._mouse);
					break _hx_loop1;
				case 2:
					this._mouse.get_middleButtonDown().execute(this._mouse);
					break _hx_loop1;
				}
				break;
			case 1:
				this._mouse.set_x(Math.floor(e.relX));
				this._mouse.set_y(Math.floor(e.relY));
				switch(e.button) {
				case 0:
					this._mouse.get_leftButtonUp().execute(this._mouse);
					break _hx_loop1;
				case 1:
					this._mouse.get_rightButtonUp().execute(this._mouse);
					break _hx_loop1;
				case 2:
					this._mouse.get_middleButtonUp().execute(this._mouse);
					break _hx_loop1;
				}
				break;
			case 2:
				var dX = Math.floor(e.relX) - this.get_mouse().get_x();
				var dY = Math.floor(e.relY) - this.get_mouse().get_y();
				this.get_mouse().set_x(Math.floor(e.relX));
				this.get_mouse().set_y(Math.floor(e.relY));
				mouseDX += dX;
				mouseDY += dY;
				executeMouseMove = true;
				break;
			case 3:
				break;
			case 4:
				break;
			case 5:
				this._mouse.get_wheel().execute(this._mouse,e.wheelDelta,e.wheelDelta);
				break;
			case 6:
				break;
			case 7:
				break;
			case 8:
				var keyCode = e.keyCode;
				this._keyboard.setKeyboardState(keyCode,1);
				this._keyboard.get_keyDown().execute(this._keyboard);
				var _g1 = 0;
				var _g11 = minko_input_Keyboard.NUM_KEYS;
				while(_g1 < _g11) {
					var i = _g1++;
					var code = i;
					if(!this._keyboard.hasKeyDownSignal(code)) {
						continue;
					}
					if(minko_input_KeyMap.keyToKeyCodeMap.h.hasOwnProperty(code) && minko_input_KeyMap.keyToKeyCodeMap.h[code] == keyCode) {
						this._keyboard.getKeyDown(code).execute(this._keyboard,i);
					}
				}
				break;
			case 9:
				var keyCode1 = e.keyCode;
				this._keyboard.setKeyboardState(keyCode1,0);
				this._keyboard.get_keyUp().execute(this._keyboard);
				var _g2 = 0;
				var _g12 = minko_input_Keyboard.NUM_KEYS;
				while(_g2 < _g12) {
					var i1 = _g2++;
					var code1 = i1;
					if(!this._keyboard.hasKeyUpSignal(code1)) {
						continue;
					}
					if(minko_input_KeyMap.keyToKeyCodeMap.h.hasOwnProperty(code1) && minko_input_KeyMap.keyToKeyCodeMap.h[code1] == keyCode1) {
						this._keyboard.getKeyUp(code1).execute(this._keyboard,i1);
					}
				}
				var _g21 = 0;
				var _g3 = minko_input_Keyboard.NUM_KEYS;
				while(_g21 < _g3) {
					var i2 = _g21++;
					var code2 = i2;
					if(this._keyboard.hasKeyUpSignal(code2)) {
						this._keyboard.getKeyUp(code2).execute(this._keyboard,i2);
					}
				}
				break;
			case 10:
				break;
			case 11:
				var c = e.charCode;
				this._keyboard.get_textInput().execute(this._keyboard,c);
				break;
			case 12:
				break;
			}
			if(executeMouseMove) {
				this._mouse.get_move().execute(this._mouse,mouseDX,mouseDY);
			}
		}
	}
	step() {
		this.stepEvent();
		super.step();
	}
	static create(name,width,height,flags) {
		if(flags == null) {
			flags = 2;
		}
		if(height == null) {
			height = 600;
		}
		if(width == null) {
			width = 800;
		}
		var canvas = new minko_WebCanvas(name,width,height,flags);
		canvas.initialize();
		if(minko_AbstractCanvas.get_defaultCanvas() == null) {
			minko_AbstractCanvas.set_defaultCanvas(canvas);
		}
		return canvas;
	}
}
$hx_exports["minko"]["WebCanvas"] = minko_WebCanvas;
minko_WebCanvas.__name__ = true;
minko_WebCanvas.__super__ = minko_AbstractCanvas;
Object.assign(minko_WebCanvas.prototype, {
	__class__: minko_WebCanvas
});
class minko_Stage {
	constructor(canvas) {
		this.curMouseY = 0.;
		this.curMouseX = 0.;
		this.eventTargets = new haxe_ds_List();
		this.resizeEvents = new haxe_ds_List();
		var _gthis = this;
		this.element = canvas == null ? window : canvas;
		if(canvas == null) {
			canvas = window.document.getElementById("webgl");
			if(canvas == null) {
				throw new js__$Boot_HaxeError("Missing canvas #webgl");
			}
		}
		this.canvas = canvas;
		this.canvasPos = canvas.getBoundingClientRect();
		this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
		this.element.addEventListener("mousemove",$bind(this,this.onMouseMove));
		this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
		this.element.addEventListener("mousewheel",$bind(this,this.onMouseWheel));
		this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
		this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
		this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
		this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
		this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
		this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
		if(this.element == canvas) {
			canvas.setAttribute("tabindex","1");
			canvas.style.outline = "none";
		} else {
			canvas.addEventListener("mousedown",function(e) {
				_gthis.onMouseDown(e);
				e.stopPropagation();
				e.preventDefault();
			});
			canvas.oncontextmenu = function(e1) {
				e1.stopPropagation();
				e1.preventDefault();
				return false;
			};
		}
		this.curW = this.get_width();
		this.curH = this.get_height();
		this.timer = new haxe_Timer(100);
		this.timer.run = $bind(this,this.checkResize);
	}
	checkResize() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	dispose() {
		this.timer.stop();
	}
	onClose() {
		return true;
	}
	event(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	addEventTarget(et) {
		this.eventTargets.add(et);
	}
	removeEventTarget(et) {
		this.eventTargets = this.eventTargets.filter(function(e) {
			return !Reflect.compareMethods(e,et);
		});
	}
	addResizeEvent(f) {
		this.resizeEvents.push(f);
	}
	removeResizeEvent(f) {
		this.resizeEvents = this.resizeEvents.filter(function(e) {
			return !Reflect.compareMethods(e,f);
		});
	}
	onResize(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	resize(width,height) {
	}
	setFullScreen(v) {
	}
	setCurrent() {
		minko_Stage.inst = this;
	}
	get_width() {
		return Math.round(this.canvasPos.width * window.devicePixelRatio);
	}
	get_height() {
		return Math.round(this.canvasPos.height * window.devicePixelRatio);
	}
	get_mouseX() {
		return Math.round((this.curMouseX - this.canvasPos.left) * window.devicePixelRatio);
	}
	get_mouseY() {
		return Math.round((this.curMouseY - this.canvasPos.top) * window.devicePixelRatio);
	}
	get_mouseLock() {
		return false;
	}
	set_mouseLock(v) {
		if(v) {
			throw new js__$Boot_HaxeError("Not implemented");
		}
		return false;
	}
	get_vsync() {
		return true;
	}
	set_vsync(b) {
		if(!b) {
			throw new js__$Boot_HaxeError("Can't disable vsync on this platform");
		}
		return true;
	}
	onMouseDown(e) {
		var ev = new minko_Event(minko_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	onMouseUp(e) {
		var ev = new minko_Event(minko_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	onMouseMove(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new minko_Event(minko_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	onMouseWheel(e) {
		var ev = new minko_Event(minko_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = -e.wheelDelta / 30.0;
		this.event(ev);
	}
	onTouchStart(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new minko_Event(minko_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	onTouchMove(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new minko_Event(minko_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	onTouchEnd(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new minko_Event(minko_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	onKeyUp(e) {
		var ev = new minko_Event(minko_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	onKeyDown(e) {
		var ev = new minko_Event(minko_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	onKeyPress(e) {
		var ev = new minko_Event(minko_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
	}
	static getInstance() {
		if(minko_Stage.inst == null) {
			minko_Stage.inst = new minko_Stage();
		}
		return minko_Stage.inst;
	}
}
minko_Stage.__name__ = true;
Object.assign(minko_Stage.prototype, {
	__class__: minko_Stage
});
class minko_animation_AbstractTimeline {
	constructor(propertyName,duration) {
		this._propertyName = propertyName;
		this._duration = duration;
		this._isLocked = false;
	}
	clone() {
		throw new js__$Boot_HaxeError("Missing clone function for a component.");
	}
	get_propertyName() {
		return this._propertyName;
	}
	set_propertyName(value) {
		this._propertyName = value;
		return value;
	}
	get_duration() {
		return this._duration;
	}
	set_duration(value) {
		this._duration = value;
		return value;
	}
	get_isLocked() {
		return this._isLocked;
	}
	set_isLocked(value) {
		this._isLocked = value;
		return value;
	}
	update(time,data,skipPropertyNameFormatting) {
		if(skipPropertyNameFormatting == null) {
			skipPropertyNameFormatting = true;
		}
	}
	dispose() {
	}
}
$hx_exports["minko"]["animation"]["AbstractTimeline"] = minko_animation_AbstractTimeline;
minko_animation_AbstractTimeline.__name__ = true;
Object.assign(minko_animation_AbstractTimeline.prototype, {
	__class__: minko_animation_AbstractTimeline
});
class minko_animation_TimelineLookup {
	constructor() {
	}
	static interpolate(thisMat,toMat,percent) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var m = this1;
		m._00 = thisMat._00 + (toMat._00 - thisMat._00) * percent;
		m._10 = thisMat._10 + (toMat._10 - thisMat._10) * percent;
		m._20 = thisMat._20 + (toMat._20 - thisMat._20) * percent;
		m._30 = thisMat._30 + (toMat._30 - thisMat._30) * percent;
		m._01 = thisMat._01 + (toMat._01 - thisMat._01) * percent;
		m._11 = thisMat._11 + (toMat._11 - thisMat._11) * percent;
		m._21 = thisMat._21 + (toMat._21 - thisMat._21) * percent;
		m._31 = thisMat._31 + (toMat._31 - thisMat._31) * percent;
		m._02 = thisMat._02 + (toMat._02 - thisMat._02) * percent;
		m._12 = thisMat._12 + (toMat._12 - thisMat._12) * percent;
		m._22 = thisMat._22 + (toMat._22 - thisMat._22) * percent;
		m._32 = thisMat._32 + (toMat._32 - thisMat._32) * percent;
		m._03 = thisMat._03 + (toMat._03 - thisMat._03) * percent;
		m._13 = thisMat._13 + (toMat._13 - thisMat._13) * percent;
		m._23 = thisMat._23 + (toMat._23 - thisMat._23) * percent;
		m._33 = thisMat._33 + (toMat._33 - thisMat._33) * percent;
		return m;
	}
	static getTimeInRange(time,duration) {
		var t = duration > 0 ? time >= 0 ? time % duration : (time % duration + duration) % duration : 0;
		return t;
	}
	static getIndexForTime(time,timetable) {
		var numKeys = timetable.length;
		if(numKeys == 0) {
			return 0;
		}
		var id = 0;
		var lowerId = 0;
		var upperId = numKeys;
		while(upperId - lowerId > 1) {
			id = lowerId + upperId >> 1;
			if(timetable[id].timetable > time) {
				upperId = id;
			} else {
				lowerId = id;
			}
		}
		return lowerId;
	}
}
$hx_exports["minko"]["animation"]["TimelineLookup"] = minko_animation_TimelineLookup;
minko_animation_TimelineLookup.__name__ = true;
Object.assign(minko_animation_TimelineLookup.prototype, {
	__class__: minko_animation_TimelineLookup
});
class minko_animation_Matrix4x4Timeline extends minko_animation_AbstractTimeline {
	constructor(propertyName,duration,timetable,matrices,interpolate) {
		if(interpolate == null) {
			interpolate = false;
		}
		super(propertyName,duration);
		this._matrices = [];
		this._interpolate = interpolate;
		this.initializeMatrixTimetable(timetable,matrices);
	}
	clone() {
		return minko_animation_Matrix4x4Timeline.createbyMatrix4x4Timeline(this);
	}
	get_matrices() {
		return this._matrices;
	}
	get_interpolate() {
		return this._interpolate;
	}
	update(time,data,skipPropertyNameFormatting) {
		if(skipPropertyNameFormatting == null) {
			skipPropertyNameFormatting = true;
		}
		if(this._isLocked || this._duration == 0 || this._matrices.length == 0) {
			return;
		}
		if(this._interpolate) {
			data.set(this._propertyName,this.interpolateTime(time));
		} else {
			var t = minko_animation_TimelineLookup.getTimeInRange(time,this._duration + 1);
			var keyId = minko_animation_TimelineLookup.getIndexForTime(t,this._matrices);
			data.set(this._propertyName,this._matrices[keyId].mat4);
		}
	}
	interpolateTime(time) {
		var t = minko_animation_TimelineLookup.getTimeInRange(time,this._duration + 1);
		var keyId = minko_animation_TimelineLookup.getIndexForTime(t,this._matrices);
		if(t < this._matrices[0].timetable || t >= this._matrices[this._matrices.length - 1].timetable) {
			return this._matrices[keyId].mat4;
		}
		var current = this._matrices[keyId];
		var next = this._matrices[keyId + 1];
		var ratio = current.timetable < next.timetable ? (t - current.timetable) / (next.timetable - current.timetable) : 0.0;
		return minko_animation_TimelineLookup.interpolate(current.mat4,next.mat4,ratio);
	}
	initializeMatrixTimetable(timetable,matrices) {
		if(timetable.length == 0) {
			throw new js__$Boot_HaxeError("timetable");
		}
		if(matrices.length == 0) {
			throw new js__$Boot_HaxeError("matrices");
		}
		if(timetable.length != matrices.length) {
			throw new js__$Boot_HaxeError("The number of keys must match in both the 'timetable' and 'matrices' parameters.");
		}
		var numKeys = timetable.length;
		var _g = [];
		var _g1 = 0;
		var _g2 = numKeys;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(new minko_animation_TimelineLookup());
		}
		this._matrices = _g;
		var _g3 = 0;
		var _g4 = numKeys;
		while(_g3 < _g4) {
			var keyId = _g3++;
			this._matrices[keyId].timetable = timetable[keyId];
			this._matrices[keyId].mat4 = matrices[keyId];
		}
		this._matrices.sort(function(a,b) {
			return a.timetable - b.timetable;
		});
	}
	dispose() {
	}
	static create(propertyName,duration,timetable,matrices,interpolate) {
		if(interpolate == null) {
			interpolate = false;
		}
		var ptr = new minko_animation_Matrix4x4Timeline(propertyName,duration,timetable,matrices,interpolate);
		return ptr;
	}
	static createbyMatrix4x4Timeline(matrix) {
		var ptr = new minko_animation_Matrix4x4Timeline(matrix._propertyName,matrix._duration);
		ptr._matrices = [];
		ptr._interpolate = matrix._interpolate;
		var _g = 0;
		var _g1 = matrix._matrices.length;
		while(_g < _g1) {
			var keyId = _g++;
			ptr._matrices[keyId] = matrix._matrices[keyId];
		}
		return ptr;
	}
}
$hx_exports["minko"]["animation"]["Matrix4x4Timeline"] = minko_animation_Matrix4x4Timeline;
minko_animation_Matrix4x4Timeline.__name__ = true;
minko_animation_Matrix4x4Timeline.__super__ = minko_animation_AbstractTimeline;
Object.assign(minko_animation_Matrix4x4Timeline.prototype, {
	__class__: minko_animation_Matrix4x4Timeline
});
class minko_async_Worker {
	constructor(name) {
		this._impl = new minko_async_WorkerImpl(this,name);
	}
	start(input) {
		this._impl.start(input);
	}
	get_message() {
		return this._impl.get_message();
	}
	post(message) {
		this._impl.post(message);
	}
	run(input) {
	}
	poll() {
		this._impl.poll();
	}
	dispose() {
	}
}
$hx_exports["minko"]["async"]["Worker"] = minko_async_Worker;
minko_async_Worker.__name__ = true;
Object.assign(minko_async_Worker.prototype, {
	__class__: minko_async_Worker
});
class minko_async_Message {
	constructor() {
	}
}
$hx_exports["minko"]["async"]["Message"] = minko_async_Message;
minko_async_Message.__name__ = true;
Object.assign(minko_async_Message.prototype, {
	__class__: minko_async_Message
});
class minko_async_WorkerImpl {
	constructor(that,name) {
	}
	start(input) {
	}
	poll() {
	}
	post(message) {
	}
	get_message() {
		return null;
	}
	dispose() {
	}
}
$hx_exports["minko"]["async"]["WorkerImpl"] = minko_async_WorkerImpl;
minko_async_WorkerImpl.__name__ = true;
Object.assign(minko_async_WorkerImpl.prototype, {
	__class__: minko_async_WorkerImpl
});
class minko_audio_Sound {
	constructor() {
	}
	dispose() {
	}
}
$hx_exports["minko"]["audio"]["Sound"] = minko_audio_Sound;
minko_audio_Sound.__name__ = true;
Object.assign(minko_audio_Sound.prototype, {
	__class__: minko_audio_Sound
});
class minko_component_AnimationLabel {
	constructor(n,t) {
		this.name = n;
		this.time = t;
	}
}
$hx_exports["minko"]["component"]["AnimationLabel"] = minko_component_AnimationLabel;
minko_component_AnimationLabel.__name__ = true;
Object.assign(minko_component_AnimationLabel.prototype, {
	__class__: minko_component_AnimationLabel
});
class minko_component_AbstractAnimation extends minko_component_AbstractComponent {
	constructor(isLooping) {
		super();
		this._maxTime = 0;
		this._loopMinTime = 0;
		this._loopMaxTime = 0;
		this._loopTimeRange = 0;
		this._currentTime = 0;
		this._previousTime = 0;
		this._previousGlobalTime = 0;
		this._isPlaying = false;
		this._isLooping = isLooping;
		this._isReversed = false;
		this._mustUpdateOnce = false;
		this._clockStart = minko_utils_TimeUtil.getTimerMilliseconds();
		this._timeFunction = null;
		this._labels = [];
		this._nextLabelIds = [];
		this._sceneManager = null;
		this._started = new minko_signal_Signal();
		this._looped = new minko_signal_Signal();
		this._stopped = new minko_signal_Signal();
		this._labelHit = new minko_signal_Signal3();
		this._targetAddedSlot = null;
		this._targetRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
		this._frameBeginSlot = null;
		this._timeFunction = function(t) {
			return t;
		};
	}
	play() {
		this._previousGlobalTime = this._timeFunction(this._sceneManager != null ? Math.floor(this._sceneManager.get_time()) : 0);
		this._isPlaying = true;
		this._started.execute(this);
		this.checkLabelHit(this._currentTime,this._currentTime);
	}
	stop() {
		if(this._isPlaying) {
			this.updateNextLabelIds(this._currentTime);
			this.checkLabelHit(this._currentTime,this._currentTime);
		}
		this._isPlaying = false;
		this._stopped.execute(this);
		this._mustUpdateOnce = true;
		this._previousGlobalTime = this._timeFunction(this._sceneManager != null ? this._sceneManager.get_time() | 0 : 0);
	}
	clone(option) {
		return null;
	}
	seekLabel(labelName) {
		this.seek(this.labelTimebyName(labelName));
		return;
	}
	seek(currentTime) {
		if(!this.isInPlaybackWindow(currentTime)) {
			throw new js__$Boot_HaxeError("Provided time value is outside of playback window. In order to reset playback window, call resetPlaybackWindow().");
		}
		this._currentTime = currentTime;
		this.updateNextLabelIds(this._currentTime);
	}
	get_currentTime() {
		return this._currentTime;
	}
	get_loopStartTime() {
		if(!this._isReversed) {
			return this._loopMinTime;
		} else {
			return this._loopMaxTime;
		}
	}
	get_loopEndTime() {
		if(!this._isReversed) {
			return this._loopMaxTime;
		} else {
			return this._loopMinTime;
		}
	}
	hasLabel(name) {
		return Lambda.exists(this._labels,function(l) {
			return l.name == name;
		});
	}
	getLabel(name) {
		return Lambda.find(this._labels,function(l) {
			return l.name == name;
		});
	}
	addLabel(name,time) {
		if(this.hasLabel(name)) {
			throw new js__$Boot_HaxeError("A label called '" + name + "' already exists.");
		}
		this._labels.push(new minko_component_AnimationLabel(name,time));
		this.updateNextLabelIds(this._currentTime);
	}
	changeLabel(name,newName) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		var label = this.getLabel(name);
		label.name = newName;
	}
	setTimeForLabel(name,newTime) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		var label = this.getLabel(name);
		label.time = newTime;
	}
	removeLabel(name) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		this._labels = this._labels.filter(function(l) {
			return l.name != name;
		});
	}
	setPlaybackWindow(beginTime,endTime,forceRestart) {
		if(forceRestart == null) {
			forceRestart = false;
		}
		this._loopMinTime = beginTime;
		this._loopMaxTime = endTime;
		if(this._loopMinTime > this._loopMaxTime) {
			this._loopMinTime = endTime;
			this._loopMaxTime = beginTime;
		}
		this._loopTimeRange = this._loopMaxTime - this._loopMinTime + 1;
		if(!this.isInPlaybackWindow(this._currentTime) || forceRestart) {
			this._currentTime = this.get_loopStartTime();
		}
		this.updateNextLabelIds(this._currentTime);
	}
	setPlaybackWindowbyName(beginLabelName,endLabelName,forceRestart) {
		if(forceRestart == null) {
			forceRestart = false;
		}
		this.setPlaybackWindow(this.getLabel(beginLabelName).time,this.getLabel(endLabelName).time,forceRestart);
	}
	resetPlaybackWindow() {
		this.setPlaybackWindow(0,this._maxTime);
	}
	get_numLabels() {
		return this._labels.length;
	}
	labelTimeLabel(labelId) {
		return this.getLabel(labelId).time;
	}
	labelName(labelId) {
		return this._labels[labelId].name;
	}
	labelTime(labelId) {
		return this._labels[labelId].time;
	}
	labelTimebyName(name) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		return this.getLabel(name).time;
	}
	get_isPlaying() {
		return this._isPlaying;
	}
	set_isPlaying(value) {
		this._isPlaying = value;
		return value;
	}
	get_isLooping() {
		return this._isLooping;
	}
	set_isLooping(value) {
		this._isLooping = value;
		return value;
	}
	get_isReversed() {
		return this._isReversed;
	}
	set_isReversed(value) {
		this._isReversed = value;
		return value;
	}
	get_maxTime() {
		return this._maxTime;
	}
	set_timeFunction(func) {
		this._timeFunction = func;
		return func;
	}
	get_started() {
		return this._started;
	}
	get_looped() {
		return this._looped;
	}
	get_stopped() {
		return this._stopped;
	}
	get_labelHit() {
		return this._labelHit;
	}
	copyFrom(absAnimation,option) {
		this._maxTime = absAnimation._maxTime;
		this._loopMinTime = absAnimation._loopMinTime;
		this._loopMaxTime = absAnimation._loopMaxTime;
		this._loopTimeRange = absAnimation._loopTimeRange;
		this._currentTime = 0;
		this._previousTime = 0;
		this._previousGlobalTime = 0;
		this._isPlaying = false;
		this._isLooping = absAnimation._isLooping;
		this._isReversed = absAnimation._isReversed;
		this._mustUpdateOnce = absAnimation._mustUpdateOnce;
		this._clockStart = minko_utils_TimeUtil.getTimerMilliseconds();
		this._timeFunction = null;
		this._labels = [];
		this._nextLabelIds = [];
		this._sceneManager = null;
		this._started = new minko_signal_Signal();
		this._looped = new minko_signal_Signal();
		this._stopped = new minko_signal_Signal();
		this._labelHit = new minko_signal_Signal3();
		this._targetAddedSlot = null;
		this._targetRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
		this._frameBeginSlot = null;
		if(option == 1) {
			this._currentTime = absAnimation._currentTime;
			this._previousTime = absAnimation._previousTime;
			this._previousGlobalTime = absAnimation._previousGlobalTime;
			this._isPlaying = absAnimation._isPlaying;
		}
		this._timeFunction = function(t) {
			return t;
		};
		return this;
	}
	dispose() {
		this._targetAddedSlot = null;
		this._targetRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
		this._frameBeginSlot = null;
	}
	initialize() {
	}
	targetAdded(node) {
		this._addedSlot = node.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = node.get_removed().connect($bind(this,this.removedHandler));
		this._target = node;
	}
	targetRemoved(node) {
		this._addedSlot = null;
		this._removedSlot = null;
	}
	addedHandler(node,target,parent) {
		this.findSceneManager();
	}
	removedHandler(node,target,parent) {
		this.findSceneManager();
	}
	componentAddedHandler(node,target,component) {
	}
	componentRemovedHandler(node,target,component) {
	}
	findSceneManager() {
		var roots = minko_scene_NodeSet.createbyNode(this.get_target()).roots().where(function(node) {
			return node.hasComponent(minko_component_SceneManager);
		});
		if(roots.get_nodes().length > 1) {
			throw new js__$Boot_HaxeError("Renderer cannot be in two separate scenes.");
		} else if(roots.get_nodes().length == 1) {
			this.setSceneManager(roots.get_nodes()[0].getComponent(minko_component_SceneManager));
		} else {
			this.setSceneManager(null);
		}
	}
	setSceneManager(sceneManager) {
		if(sceneManager != null && sceneManager != this._sceneManager) {
			this._frameBeginSlot = sceneManager.get_frameBegin().connect($bind(this,this.frameBeginHandler));
			if(this._sceneManager == null) {
				this._previousGlobalTime = this._timeFunction(Math.floor(sceneManager.get_time()));
			}
		} else if(this._frameBeginSlot != null && sceneManager == null) {
			this.stop();
			this._frameBeginSlot.dispose();
			this._frameBeginSlot = null;
		}
		this._sceneManager = sceneManager;
	}
	frameBeginHandler(sceneManager,time,UnnamedParameter1) {
		this.updateRaw(Math.floor(time));
	}
	updateNextLabelIds(time) {
		this._nextLabelIds = [];
		if(this._labels.length == 0) {
			return;
		}
		var UINT_MAX = 10000;
		var nextLabelTime = !this._isReversed ? UINT_MAX : 0;
		var _g = 0;
		var _g1 = this._labels.length;
		while(_g < _g1) {
			var labelId = _g++;
			var labelTime = this._labels[labelId].time;
			if(!this.isInPlaybackWindow(labelTime)) {
				continue;
			}
			if(!this._isReversed && time < labelTime) {
				if(labelTime < nextLabelTime) {
					nextLabelTime = labelTime;
					this._nextLabelIds = [];
					this._nextLabelIds.push(labelId);
				} else if(labelTime == nextLabelTime) {
					this._nextLabelIds.push(labelId);
				}
			} else if(this._isReversed && labelTime < time) {
				if(nextLabelTime < labelTime) {
					nextLabelTime = labelTime;
					this._nextLabelIds = [];
					this._nextLabelIds.push(labelId);
				} else if(labelTime == nextLabelTime) {
					this._nextLabelIds.push(labelId);
				}
			}
		}
		if(this._nextLabelIds.length == 0) {
			if(time != this.get_loopStartTime()) {
				this.updateNextLabelIds(this.get_loopStartTime());
			}
		} else if(this._isLooping && nextLabelTime == this.get_loopEndTime()) {
			var _g2 = 0;
			var _g3 = this._labels.length;
			while(_g2 < _g3) {
				var labelId1 = _g2++;
				if(this._labels[labelId1].time == this.get_loopStartTime() && this._nextLabelIds.indexOf(labelId1) == -1) {
					this._nextLabelIds.push(labelId1);
				}
			}
		}
	}
	checkLabelHit(previousTime,newTime) {
		if(!this._isPlaying || this._nextLabelIds.length == 0) {
			return;
		}
		var nextLabel = this._labels[this._nextLabelIds[0]];
		var nextLabelTime = nextLabel.time;
		var trigger = false;
		if(!this._isReversed) {
			if(previousTime <= newTime) {
				if(newTime == nextLabelTime || previousTime < nextLabelTime && nextLabelTime <= newTime) {
					trigger = true;
				}
			} else if(previousTime < nextLabelTime) {
				trigger = true;
			} else if(nextLabelTime < newTime) {
				trigger = true;
			}
		} else if(newTime <= previousTime) {
			if(newTime == nextLabelTime || newTime <= nextLabelTime != null && nextLabelTime < previousTime) {
				trigger = true;
			}
		} else if(nextLabelTime < previousTime) {
			trigger = true;
		} else if(newTime < nextLabelTime) {
			trigger = true;
		}
		if(trigger) {
			var nextLabelIds = this._nextLabelIds;
			var _g = 0;
			while(_g < nextLabelIds.length) {
				var labelId = nextLabelIds[_g];
				++_g;
				var label = this._labels[labelId];
				this._labelHit.execute(this,label.name,label.time);
			}
			this.updateNextLabelIds(this.getNewLoopTime(this._currentTime,!this._isReversed ? 1 : -1));
		}
	}
	isInPlaybackWindow(time) {
		if(this._loopMinTime <= time) {
			return time <= this._loopMaxTime;
		} else {
			return false;
		}
	}
	update() {
	}
	updateRaw(rawGlobalTime) {
		if(rawGlobalTime == null) {
			rawGlobalTime = 0;
		}
		if(!this._isPlaying && !this._mustUpdateOnce) {
			return false;
		}
		this._mustUpdateOnce = false;
		var globalTime = this._timeFunction(rawGlobalTime);
		var globalDeltaTime = globalTime - this._previousGlobalTime;
		var deltaTime = (!this._isReversed ? globalDeltaTime : -globalDeltaTime) | 0;
		this._previousTime = this._currentTime;
		if(this._isPlaying) {
			this._currentTime = this.getNewLoopTime(this._currentTime,deltaTime);
		}
		this._previousGlobalTime = globalTime;
		var looped = !this._isReversed && this._currentTime < this._previousTime || this._isReversed && this._previousTime < this._currentTime;
		if(looped) {
			if(this._isLooping) {
				this._looped.execute(this);
			} else {
				this._currentTime = this.get_loopEndTime();
				this.stop();
			}
		}
		this.update();
		this.checkLabelHit(this._previousTime,this._currentTime);
		if(!this._isPlaying) {
			return this._mustUpdateOnce;
		} else {
			return true;
		}
	}
	getNewLoopTime(time,deltaTime) {
		var relTime = time - this._loopMinTime + deltaTime;
		var timeOffset = (relTime + this._loopTimeRange | 0) % this._loopTimeRange;
		return this._loopMinTime + timeOffset;
	}
}
$hx_exports["minko"]["component"]["AbstractAnimation"] = minko_component_AbstractAnimation;
minko_component_AbstractAnimation.__name__ = true;
minko_component_AbstractAnimation.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_AbstractAnimation.prototype, {
	__class__: minko_component_AbstractAnimation
});
class minko_component_AbstractRootDataComponent extends minko_component_AbstractComponent {
	constructor(collectionName) {
		super();
		this._provider = new minko_data_Provider();
		this._collectionName = collectionName;
		this._enabled = true;
	}
	dispose() {
		this._provider = null;
		this._root = null;
		this._addedSlot = null;
		this._removedSlot = null;
		super.dispose();
	}
	get_provider() {
		return this._provider;
	}
	get_root() {
		return this._root;
	}
	targetAdded(target) {
		this._addedSlot = target.get_added().connect($bind(this,this.addedOrRemovedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.addedOrRemovedHandler));
		this.updateRoot(target.get_root());
	}
	targetRemoved(target) {
		this._addedSlot.dispose();
		this._addedSlot = null;
		this._removedSlot.dispose();
		this._removedSlot = null;
		this.updateRoot(null);
	}
	addedOrRemovedHandler(node,target,ancestor) {
		this.updateRoot(node.get_root());
	}
	updateRoot(root) {
		var _gthis = this;
		if(root == this._root) {
			return;
		}
		if(this._root != null) {
			var collections = this._root.get_data().get_collections();
			var collectionIt = Lambda.find(collections,function(c) {
				return c.get_name() == _gthis._collectionName;
			});
			var collection = collectionIt;
			collection.remove(this._provider);
		}
		this._root = root;
		if(this._root != null) {
			var collections1 = this._root.get_data().get_collections();
			var collectionIt1 = Lambda.find(collections1,function(c1) {
				return c1.get_name() == _gthis._collectionName;
			});
			if(collectionIt1 == null) {
				var collection1 = minko_data_Collection.create(this._collectionName);
				collection1.pushBack(this._provider);
				this._root.get_data().addCollection(collection1);
			} else {
				collectionIt1.pushBack(this._provider);
			}
		}
	}
}
$hx_exports["minko"]["component"]["AbstractRootDataComponent"] = minko_component_AbstractRootDataComponent;
minko_component_AbstractRootDataComponent.__name__ = true;
minko_component_AbstractRootDataComponent.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_AbstractRootDataComponent.prototype, {
	__class__: minko_component_AbstractRootDataComponent
});
class minko_component_AbstractLight extends minko_component_AbstractRootDataComponent {
	constructor(collectionName) {
		super(collectionName);
		var this1 = new glm_Vec3Base();
		this1.x = 1.0;
		this1.y = 1.0;
		this1.z = 1.0;
		this._color = this1;
		this.get_data().set("color",this._color);
	}
	get_data() {
		return this.get_provider();
	}
	dispose() {
		super.dispose();
	}
	get_color() {
		return this._color;
	}
	set_color(value) {
		if(value != this._color) {
			this._color = value;
			this.get_data().set("color",this._color);
		}
		return value;
	}
	get_layoutMask() {
		return super.get_layoutMask();
	}
	set_layoutMask(value) {
		this.get_data().set("layoutMask",value);
		super.set_layoutMask(value);
		return value;
	}
}
$hx_exports["minko"]["component"]["AbstractLight"] = minko_component_AbstractLight;
minko_component_AbstractLight.__name__ = true;
minko_component_AbstractLight.__super__ = minko_component_AbstractRootDataComponent;
Object.assign(minko_component_AbstractLight.prototype, {
	__class__: minko_component_AbstractLight
});
class minko_component_AbstractDiscreteLight extends minko_component_AbstractLight {
	constructor(arrayName,diffuse,specular) {
		if(specular == null) {
			specular = 1.0;
		}
		if(diffuse == null) {
			diffuse = 1.0;
		}
		super(arrayName);
		this.get_data().set("diffuse",diffuse).set("specular",specular);
	}
	get_diffuse() {
		return this.get_data().get("diffuse");
	}
	set_diffuse(diffuse) {
		this.get_data().set("diffuse",diffuse);
		return diffuse;
	}
	get_specular() {
		return this.get_data().get("specular");
	}
	set_specular(specular) {
		this.get_data().set("specular",specular);
		return specular;
	}
	targetAdded(target) {
		var _gthis = this;
		super.targetAdded(target);
		this._modelToWorldChangedSlot = target.get_data().getPropertyChanged("modelToWorldMatrix").connect(function(_1,_2,_3) {
			_gthis.modelToWorldMatrixChangedHandler(_1,_3);
		});
		if(target.get_data().hasProperty("modelToWorldMatrix")) {
			this.updateModelToWorldMatrix(target.get_data().get("modelToWorldMatrix"));
		}
	}
	targetRemoved(target) {
		super.targetRemoved(target);
		this._modelToWorldChangedSlot = null;
	}
	modelToWorldMatrixChangedHandler(container,propertyName) {
		this.updateModelToWorldMatrix(container.get(propertyName));
	}
	updateModelToWorldMatrix(modelToWorld) {
	}
}
$hx_exports["minko"]["component"]["AbstractDiscreteLight"] = minko_component_AbstractDiscreteLight;
minko_component_AbstractDiscreteLight.__name__ = true;
minko_component_AbstractDiscreteLight.__super__ = minko_component_AbstractLight;
Object.assign(minko_component_AbstractDiscreteLight.prototype, {
	__class__: minko_component_AbstractDiscreteLight
});
class minko_component_AbstractScript extends minko_component_AbstractComponent {
	constructor() {
		super();
		this._enabled = true;
		this._started = false;
		this._time = 0.0;
		this._deltaTime = 0.0;
		this._targetAddedSlot = null;
		this._targetRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
		this._componentAddedSlot = null;
		this._componentRemovedSlot = null;
		this._frameBeginSlot = null;
		this._frameEndSlot = null;
	}
	get_enabled() {
		return this._enabled;
	}
	set_enabled(v) {
		if(v != this._enabled) {
			this._enabled = v;
			this._started = !v;
			if(this.get_target() != null) {
				this.setSceneManager(this.get_target().get_root().getComponent(minko_component_SceneManager));
			}
		}
		return v;
	}
	get_time() {
		return this._time;
	}
	get_deltaTime() {
		return this._deltaTime;
	}
	start(target) {
	}
	update(target) {
	}
	end(target) {
	}
	stop(target) {
	}
	get_ready() {
		return true;
	}
	get_priority() {
		return 0.0;
	}
	targetAdded(target) {
		this._componentAddedSlot = target.get_componentAdded().connect($bind(this,this.componentAddedHandler));
		this._componentRemovedSlot = target.get_componentRemoved().connect($bind(this,this.componentRemovedHandler));
		this._addedSlot = target.get_added().connect($bind(this,this.addedOrRemovedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.addedOrRemovedHandler));
		this._started = false;
		if(target.get_root().hasComponent(minko_component_SceneManager)) {
			this.setSceneManager(target.get_root().getComponent(minko_component_SceneManager));
		}
	}
	addedOrRemovedHandler(node,target,parent) {
		if(node.get_root() != target.get_root()) {
			return;
		}
		this.setSceneManager(target.get_root().getComponent(minko_component_SceneManager));
	}
	targetRemoved(target) {
		this._componentAddedSlot = null;
		this._componentRemovedSlot = null;
		this._frameBeginSlot = null;
		this._frameEndSlot = null;
		if(this._started) {
			this._started = false;
			this.stop(target);
		}
	}
	componentAddedHandler(nod,target,component) {
		var sceneManager = js_Boot.__cast(component , minko_component_SceneManager);
		if(sceneManager != null) {
			this.setSceneManager(sceneManager);
		}
	}
	componentRemovedHandler(nod,target,component) {
		var sceneManager = js_Boot.__cast(component , minko_component_SceneManager);
		if(sceneManager != null) {
			this.setSceneManager(null);
		}
	}
	frameBeginHandler(sceneManager,time,deltaTime) {
		var target = this.get_target();
		this._time = time;
		this._deltaTime = deltaTime;
		if(!this._started && this.get_ready() && target != null) {
			this._started = true;
			this.start(target);
		}
		if(this._started) {
			this.update(target);
		}
		if(!this._started) {
			this.stop(target);
		}
	}
	frameEndHandler(sceneManager,time,deltaTime) {
		if(this._started) {
			this.end(this.get_target());
		}
	}
	setSceneManager(sceneManager) {
		if(sceneManager != null && this._enabled) {
			if(this._frameBeginSlot == null) {
				this._frameBeginSlot = sceneManager.get_frameBegin().connect($bind(this,this.frameBeginHandler),this.get_priority());
				if(this._frameEndSlot == null) {
					this._frameEndSlot = sceneManager.get_frameEnd().connect($bind(this,this.frameEndHandler),this.get_priority());
				} else if(this._frameBeginSlot != null) {
					if(this._started) {
						this._started = false;
						this.stop(this.get_target());
					}
					this._frameBeginSlot = null;
					this._frameEndSlot = null;
				}
			}
		}
	}
}
$hx_exports["minko"]["component"]["AbstractScript"] = minko_component_AbstractScript;
minko_component_AbstractScript.__name__ = true;
minko_component_AbstractScript.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_AbstractScript.prototype, {
	__class__: minko_component_AbstractScript
});
class minko_component_AmbientLight extends minko_component_AbstractLight {
	constructor(ambient) {
		if(ambient == null) {
			ambient = .2;
		}
		super("ambientLight");
		this._ambient = ambient;
		this.get_data().set("ambient",ambient);
	}
	clone(option) {
		var al = minko_component_AmbientLight.create().copyFrom(this,option);
		return al;
	}
	get_ambient() {
		return this._ambient;
	}
	set_ambient(ambient) {
		this._ambient = ambient;
		this.get_data().set("ambient",ambient);
		return ambient;
	}
	copyFrom(ambientLight,option) {
		this._ambient = ambientLight._ambient;
		this.get_data().set("ambient",ambientLight._ambient);
		return this;
	}
	static create(ambient) {
		if(ambient == null) {
			ambient = .2;
		}
		return new minko_component_AmbientLight(ambient);
	}
}
$hx_exports["minko"]["component"]["AmbientLight"] = minko_component_AmbientLight;
minko_component_AmbientLight.__name__ = true;
minko_component_AmbientLight.__super__ = minko_component_AbstractLight;
Object.assign(minko_component_AmbientLight.prototype, {
	__class__: minko_component_AmbientLight
});
class minko_component_Animation extends minko_component_AbstractAnimation {
	constructor(timelines,isLooping) {
		super(isLooping);
		this._timelines = timelines;
	}
	clone(option) {
		var anim = new minko_component_Animation(this._timelines,this.get_isLooping());
		anim.copyFromAnimation(this,option);
		anim.initialize();
		return anim;
	}
	rebindDependencies(componentsMap,nodeMap,option) {
	}
	get_numTimelines() {
		return this._timelines.length;
	}
	getTimeline(timelineId) {
		return this._timelines[timelineId];
	}
	get_timelines() {
		return this._timelines;
	}
	initialize() {
		super.initialize();
		this._maxTime = 0;
		var _g = 0;
		var _g1 = this._timelines;
		while(_g < _g1.length) {
			var timeline = _g1[_g];
			++_g;
			this._maxTime = Math.floor(Math.max(this._maxTime,timeline.get_duration()));
		}
		this.setPlaybackWindow(0,this._maxTime);
		this.seek(0);
	}
	copyFromAnimation(anim,option) {
		this.copyFrom(anim,option);
		this._timelines = [];
		var _g = 0;
		var _g1 = anim._timelines.length;
		while(_g < _g1) {
			var i = _g++;
			var clone = anim._timelines[i].clone();
			this._timelines[i] = clone;
		}
		return this;
	}
	update() {
		super.update();
		var _g = 0;
		var _g1 = this._timelines;
		while(_g < _g1.length) {
			var timeline = _g1[_g];
			++_g;
			var currentTime = this._currentTime % (timeline.get_duration() + 1);
			timeline.update(currentTime,this.get_target().get_data());
		}
	}
	frameBeginHandler(manager,time,deltaTime) {
		super.frameBeginHandler(manager,time,deltaTime);
	}
	updateNextLabelIds(time) {
		super.updateNextLabelIds(time);
	}
	checkLabelHit(previousTime,newTime) {
		super.checkLabelHit(previousTime,newTime);
	}
	static create(timelines,isLooping) {
		if(isLooping == null) {
			isLooping = true;
		}
		var ptr = new minko_component_Animation(timelines,isLooping);
		ptr.initialize();
		return ptr;
	}
}
$hx_exports["minko"]["component"]["Animation"] = minko_component_Animation;
minko_component_Animation.__name__ = true;
minko_component_Animation.__super__ = minko_component_AbstractAnimation;
Object.assign(minko_component_Animation.prototype, {
	__class__: minko_component_Animation
});
class minko_component_DirectionalLight extends minko_component_AbstractDiscreteLight {
	constructor(diffuse,specular) {
		super("directionalLight",diffuse,specular);
		this._shadowMappingEnabled = false;
		this._numShadowCascades = 0;
		this._shadowMap = null;
		this._shadowMapSize = 0;
		var _g = [];
		_g.push(null);
		_g.push(null);
		_g.push(null);
		_g.push(null);
		this._shadowRenderers = _g;
		var _g1 = [];
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		_g1.push(dest);
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		dest1._00 = 1;
		dest1._10 = 0;
		dest1._20 = 0;
		dest1._30 = 0;
		dest1._01 = 0;
		dest1._11 = 1;
		dest1._21 = 0;
		dest1._31 = 0;
		dest1._02 = 0;
		dest1._12 = 0;
		dest1._22 = 1;
		dest1._32 = 0;
		dest1._03 = 0;
		dest1._13 = 0;
		dest1._23 = 0;
		dest1._33 = 1;
		_g1.push(dest1);
		var this3 = new glm_Mat4Base();
		this3._00 = 0;
		this3._01 = 0;
		this3._02 = 0;
		this3._03 = 0;
		this3._10 = 0;
		this3._11 = 0;
		this3._12 = 0;
		this3._13 = 0;
		this3._20 = 0;
		this3._21 = 0;
		this3._22 = 0;
		this3._23 = 0;
		this3._30 = 0;
		this3._31 = 0;
		this3._32 = 0;
		this3._33 = 0;
		var dest2 = this3;
		dest2._00 = 1;
		dest2._10 = 0;
		dest2._20 = 0;
		dest2._30 = 0;
		dest2._01 = 0;
		dest2._11 = 1;
		dest2._21 = 0;
		dest2._31 = 0;
		dest2._02 = 0;
		dest2._12 = 0;
		dest2._22 = 1;
		dest2._32 = 0;
		dest2._03 = 0;
		dest2._13 = 0;
		dest2._23 = 0;
		dest2._33 = 1;
		_g1.push(dest2);
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var dest3 = this4;
		dest3._00 = 1;
		dest3._10 = 0;
		dest3._20 = 0;
		dest3._30 = 0;
		dest3._01 = 0;
		dest3._11 = 1;
		dest3._21 = 0;
		dest3._31 = 0;
		dest3._02 = 0;
		dest3._12 = 0;
		dest3._22 = 1;
		dest3._32 = 0;
		dest3._03 = 0;
		dest3._13 = 0;
		dest3._23 = 0;
		dest3._33 = 1;
		_g1.push(dest3);
		this._shadowProjections = _g1;
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest4 = this5;
		dest4._00 = 1;
		dest4._10 = 0;
		dest4._20 = 0;
		dest4._30 = 0;
		dest4._01 = 0;
		dest4._11 = 1;
		dest4._21 = 0;
		dest4._31 = 0;
		dest4._02 = 0;
		dest4._12 = 0;
		dest4._22 = 1;
		dest4._32 = 0;
		dest4._03 = 0;
		dest4._13 = 0;
		dest4._23 = 0;
		dest4._33 = 1;
		this.updateModelToWorldMatrix(dest4);
	}
	clone(option) {
		return minko_component_DirectionalLight.create(this.get_diffuse(),this.get_specular());
	}
	get_shadowMap() {
		return this._shadowMap;
	}
	set_shadowSpread(spread) {
		this.get_data().set("shadowSpread",spread);
		return spread;
	}
	get_shadowProjections() {
		return this._shadowProjections;
	}
	get_shadowMappingEnabled() {
		return this._shadowMappingEnabled;
	}
	get_numShadowCascades() {
		return this._numShadowCascades;
	}
	computeShadowProjection(view,projection,zFar,fitToCascade) {
		if(fitToCascade == null) {
			fitToCascade = false;
		}
		if(zFar == null) {
			zFar = 100000.0;
		}
		if(!this._shadowMappingEnabled) {
			return;
		}
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var a00 = projection._00;
		var a01 = projection._10;
		var a02 = projection._20;
		var a03 = projection._30;
		var a10 = projection._01;
		var a11 = projection._11;
		var a12 = projection._21;
		var a13 = projection._31;
		var a20 = projection._02;
		var a21 = projection._12;
		var a22 = projection._22;
		var a23 = projection._32;
		var a30 = projection._03;
		var a31 = projection._13;
		var a32 = projection._23;
		var a33 = projection._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var invProjection = dest;
		var this2 = new glm_Vec4Base();
		this2.x = -1.0;
		this2.y = 1.0;
		this2.z = -1.0;
		this2.w = 1.0;
		var v = this2;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 0;
		var dest1 = this3;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest1.x = invProjection._00 * x + invProjection._10 * y + invProjection._20 * z + invProjection._30 * w;
		dest1.y = invProjection._01 * x + invProjection._11 * y + invProjection._21 * z + invProjection._31 * w;
		dest1.z = invProjection._02 * x + invProjection._12 * y + invProjection._22 * z + invProjection._32 * w;
		dest1.w = invProjection._03 * x + invProjection._13 * y + invProjection._23 * z + invProjection._33 * w;
		var v_0 = dest1;
		var this4 = new glm_Vec4Base();
		this4.x = 1.0;
		this4.y = 1.0;
		this4.z = -1.0;
		this4.w = 1.0;
		var v1 = this4;
		var this5 = new glm_Vec4Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		this5.w = 0;
		var dest2 = this5;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest2.x = invProjection._00 * x1 + invProjection._10 * y1 + invProjection._20 * z1 + invProjection._30 * w1;
		dest2.y = invProjection._01 * x1 + invProjection._11 * y1 + invProjection._21 * z1 + invProjection._31 * w1;
		dest2.z = invProjection._02 * x1 + invProjection._12 * y1 + invProjection._22 * z1 + invProjection._32 * w1;
		dest2.w = invProjection._03 * x1 + invProjection._13 * y1 + invProjection._23 * z1 + invProjection._33 * w1;
		var v_1 = dest2;
		var this6 = new glm_Vec4Base();
		this6.x = 1.0;
		this6.y = -1.0;
		this6.z = -1.0;
		this6.w = 1.0;
		var v2 = this6;
		var this7 = new glm_Vec4Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		this7.w = 0;
		var dest3 = this7;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest3.x = invProjection._00 * x2 + invProjection._10 * y2 + invProjection._20 * z2 + invProjection._30 * w2;
		dest3.y = invProjection._01 * x2 + invProjection._11 * y2 + invProjection._21 * z2 + invProjection._31 * w2;
		dest3.z = invProjection._02 * x2 + invProjection._12 * y2 + invProjection._22 * z2 + invProjection._32 * w2;
		dest3.w = invProjection._03 * x2 + invProjection._13 * y2 + invProjection._23 * z2 + invProjection._33 * w2;
		var v_2 = dest3;
		var this8 = new glm_Vec4Base();
		this8.x = -1.0;
		this8.y = -1.0;
		this8.z = -1.0;
		this8.w = 1.0;
		var v3 = this8;
		var this9 = new glm_Vec4Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		this9.w = 0;
		var dest4 = this9;
		var x3 = v3.x;
		var y3 = v3.y;
		var z3 = v3.z;
		var w3 = v3.w;
		dest4.x = invProjection._00 * x3 + invProjection._10 * y3 + invProjection._20 * z3 + invProjection._30 * w3;
		dest4.y = invProjection._01 * x3 + invProjection._11 * y3 + invProjection._21 * z3 + invProjection._31 * w3;
		dest4.z = invProjection._02 * x3 + invProjection._12 * y3 + invProjection._22 * z3 + invProjection._32 * w3;
		dest4.w = invProjection._03 * x3 + invProjection._13 * y3 + invProjection._23 * z3 + invProjection._33 * w3;
		var v_3 = dest4;
		var this10 = new glm_Vec4Base();
		this10.x = -1.0;
		this10.y = 1.0;
		this10.z = 1.0;
		this10.w = 1.0;
		var v4 = this10;
		var this11 = new glm_Vec4Base();
		this11.x = 0;
		this11.y = 0;
		this11.z = 0;
		this11.w = 0;
		var dest5 = this11;
		var x4 = v4.x;
		var y4 = v4.y;
		var z4 = v4.z;
		var w4 = v4.w;
		dest5.x = invProjection._00 * x4 + invProjection._10 * y4 + invProjection._20 * z4 + invProjection._30 * w4;
		dest5.y = invProjection._01 * x4 + invProjection._11 * y4 + invProjection._21 * z4 + invProjection._31 * w4;
		dest5.z = invProjection._02 * x4 + invProjection._12 * y4 + invProjection._22 * z4 + invProjection._32 * w4;
		dest5.w = invProjection._03 * x4 + invProjection._13 * y4 + invProjection._23 * z4 + invProjection._33 * w4;
		var v_4 = dest5;
		var this12 = new glm_Vec4Base();
		this12.x = 1.0;
		this12.y = 1.0;
		this12.z = 1.0;
		this12.w = 1.0;
		var v5 = this12;
		var this13 = new glm_Vec4Base();
		this13.x = 0;
		this13.y = 0;
		this13.z = 0;
		this13.w = 0;
		var dest6 = this13;
		var x5 = v5.x;
		var y5 = v5.y;
		var z5 = v5.z;
		var w5 = v5.w;
		dest6.x = invProjection._00 * x5 + invProjection._10 * y5 + invProjection._20 * z5 + invProjection._30 * w5;
		dest6.y = invProjection._01 * x5 + invProjection._11 * y5 + invProjection._21 * z5 + invProjection._31 * w5;
		dest6.z = invProjection._02 * x5 + invProjection._12 * y5 + invProjection._22 * z5 + invProjection._32 * w5;
		dest6.w = invProjection._03 * x5 + invProjection._13 * y5 + invProjection._23 * z5 + invProjection._33 * w5;
		var v_5 = dest6;
		var this14 = new glm_Vec4Base();
		this14.x = 1.0;
		this14.y = -1.0;
		this14.z = 1.0;
		this14.w = 1.0;
		var v6 = this14;
		var this15 = new glm_Vec4Base();
		this15.x = 0;
		this15.y = 0;
		this15.z = 0;
		this15.w = 0;
		var dest7 = this15;
		var x6 = v6.x;
		var y6 = v6.y;
		var z6 = v6.z;
		var w6 = v6.w;
		dest7.x = invProjection._00 * x6 + invProjection._10 * y6 + invProjection._20 * z6 + invProjection._30 * w6;
		dest7.y = invProjection._01 * x6 + invProjection._11 * y6 + invProjection._21 * z6 + invProjection._31 * w6;
		dest7.z = invProjection._02 * x6 + invProjection._12 * y6 + invProjection._22 * z6 + invProjection._32 * w6;
		dest7.w = invProjection._03 * x6 + invProjection._13 * y6 + invProjection._23 * z6 + invProjection._33 * w6;
		var v_6 = dest7;
		var this16 = new glm_Vec4Base();
		this16.x = -1.0;
		this16.y = -1.0;
		this16.z = 1.0;
		this16.w = 1.0;
		var v7 = this16;
		var this17 = new glm_Vec4Base();
		this17.x = 0;
		this17.y = 0;
		this17.z = 0;
		this17.w = 0;
		var dest8 = this17;
		var x7 = v7.x;
		var y7 = v7.y;
		var z7 = v7.z;
		var w7 = v7.w;
		dest8.x = invProjection._00 * x7 + invProjection._10 * y7 + invProjection._20 * z7 + invProjection._30 * w7;
		dest8.y = invProjection._01 * x7 + invProjection._11 * y7 + invProjection._21 * z7 + invProjection._31 * w7;
		dest8.z = invProjection._02 * x7 + invProjection._12 * y7 + invProjection._22 * z7 + invProjection._32 * w7;
		dest8.w = invProjection._03 * x7 + invProjection._13 * y7 + invProjection._23 * z7 + invProjection._33 * w7;
		var v_7 = dest8;
		zFar = Math.floor(Math.min(zFar,-(v_4.z / v_4.w)));
		var a = v_0;
		var s = 1 / v_0.w;
		var this18 = new glm_Vec4Base();
		this18.x = 0;
		this18.y = 0;
		this18.z = 0;
		this18.w = 0;
		var dest9 = this18;
		dest9.x = a.x * s;
		dest9.y = a.y * s;
		dest9.z = a.z * s;
		dest9.w = a.w * s;
		var zNear = -dest9.z;
		var fov = Math.atan(1.0 / projection._11) * 2.0;
		var ratio = projection._11 / projection._00;
		var splitFar = [zFar,zFar,zFar,zFar];
		var splitNear = [zNear,zNear,zNear,zNear];
		var lambda = .5;
		var j = 1.0;
		var _g = 0;
		var _g1 = this._numShadowCascades - 1;
		while(_g < _g1) {
			var i = _g++;
			splitFar[i] = zNear * Math.pow(zFar / zNear,j / this._numShadowCascades) * lambda + (zNear + j / this._numShadowCascades * (zFar - zNear)) * (1 - lambda);
			splitNear[i + 1] = splitFar[i];
			j += 1.0;
		}
		var _g2 = 0;
		var _g3 = this._numShadowCascades;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var far = splitFar[i1];
			var this19 = new glm_Mat4Base();
			this19._00 = 0;
			this19._01 = 0;
			this19._02 = 0;
			this19._03 = 0;
			this19._10 = 0;
			this19._11 = 0;
			this19._12 = 0;
			this19._13 = 0;
			this19._20 = 0;
			this19._21 = 0;
			this19._22 = 0;
			this19._23 = 0;
			this19._30 = 0;
			this19._31 = 0;
			this19._32 = 0;
			this19._33 = 0;
			var dest10 = this19;
			var f = 1 / Math.tan(fov / 2);
			var nf = 1 / (zNear - far);
			dest10._00 = f / ratio;
			dest10._01 = 0;
			dest10._02 = 0;
			dest10._03 = 0;
			dest10._10 = 0;
			dest10._11 = f;
			dest10._12 = 0;
			dest10._13 = 0;
			dest10._20 = 0;
			dest10._21 = 0;
			dest10._22 = (far + zNear) * nf;
			dest10._23 = -1;
			dest10._30 = 0;
			dest10._31 = 0;
			dest10._32 = 2 * far * zNear * nf;
			dest10._33 = 0;
			var a1 = dest10;
			var this20 = new glm_Mat4Base();
			this20._00 = 0;
			this20._01 = 0;
			this20._02 = 0;
			this20._03 = 0;
			this20._10 = 0;
			this20._11 = 0;
			this20._12 = 0;
			this20._13 = 0;
			this20._20 = 0;
			this20._21 = 0;
			this20._22 = 0;
			this20._23 = 0;
			this20._30 = 0;
			this20._31 = 0;
			this20._32 = 0;
			this20._33 = 0;
			var dest11 = this20;
			var _a;
			var _b;
			if(dest11 == a1) {
				var this21 = new glm_Mat4Base();
				this21._00 = 0;
				this21._01 = 0;
				this21._02 = 0;
				this21._03 = 0;
				this21._10 = 0;
				this21._11 = 0;
				this21._12 = 0;
				this21._13 = 0;
				this21._20 = 0;
				this21._21 = 0;
				this21._22 = 0;
				this21._23 = 0;
				this21._30 = 0;
				this21._31 = 0;
				this21._32 = 0;
				this21._33 = 0;
				var dest12 = this21;
				dest12._00 = a1._00;
				dest12._10 = a1._10;
				dest12._20 = a1._20;
				dest12._30 = a1._30;
				dest12._01 = a1._01;
				dest12._11 = a1._11;
				dest12._21 = a1._21;
				dest12._31 = a1._31;
				dest12._02 = a1._02;
				dest12._12 = a1._12;
				dest12._22 = a1._22;
				dest12._32 = a1._32;
				dest12._03 = a1._03;
				dest12._13 = a1._13;
				dest12._23 = a1._23;
				dest12._33 = a1._33;
				_a = dest12;
				_b = view;
			} else if(dest11 == view) {
				_a = a1;
				var this22 = new glm_Mat4Base();
				this22._00 = 0;
				this22._01 = 0;
				this22._02 = 0;
				this22._03 = 0;
				this22._10 = 0;
				this22._11 = 0;
				this22._12 = 0;
				this22._13 = 0;
				this22._20 = 0;
				this22._21 = 0;
				this22._22 = 0;
				this22._23 = 0;
				this22._30 = 0;
				this22._31 = 0;
				this22._32 = 0;
				this22._33 = 0;
				var dest13 = this22;
				dest13._00 = view._00;
				dest13._10 = view._10;
				dest13._20 = view._20;
				dest13._30 = view._30;
				dest13._01 = view._01;
				dest13._11 = view._11;
				dest13._21 = view._21;
				dest13._31 = view._31;
				dest13._02 = view._02;
				dest13._12 = view._12;
				dest13._22 = view._22;
				dest13._32 = view._32;
				dest13._03 = view._03;
				dest13._13 = view._13;
				dest13._23 = view._23;
				dest13._33 = view._33;
				_b = dest13;
			} else {
				_a = a1;
				_b = view;
			}
			dest11._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest11._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest11._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest11._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest11._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest11._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest11._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest11._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest11._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest11._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest11._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest11._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest11._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest11._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest11._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest11._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			var cameraViewProjection = dest11;
			var box = this.computeBox(cameraViewProjection);
			var tmp = this._shadowProjections;
			var left = box.first.x;
			var right = box.second.x;
			var bottom = box.first.y;
			var top = box.second.y;
			var near = -box.second.z;
			var far1 = -box.first.z;
			var this23 = new glm_Mat4Base();
			this23._00 = 0;
			this23._01 = 0;
			this23._02 = 0;
			this23._03 = 0;
			this23._10 = 0;
			this23._11 = 0;
			this23._12 = 0;
			this23._13 = 0;
			this23._20 = 0;
			this23._21 = 0;
			this23._22 = 0;
			this23._23 = 0;
			this23._30 = 0;
			this23._31 = 0;
			this23._32 = 0;
			this23._33 = 0;
			var dest14 = this23;
			var rl = 1 / (right - left);
			var tb = 1 / (top - bottom);
			var fn = 1 / (far1 - near);
			dest14._00 = 2 * rl;
			dest14._10 = 0;
			dest14._20 = 0;
			dest14._30 = -1 * (left + right) * rl;
			dest14._01 = 0;
			dest14._11 = 2 * tb;
			dest14._21 = 0;
			dest14._31 = -1 * (top + bottom) * tb;
			dest14._02 = 0;
			dest14._12 = 0;
			dest14._22 = -2 * fn;
			dest14._32 = -1 * (far1 + near) * fn;
			dest14._03 = 0;
			dest14._13 = 0;
			dest14._23 = 0;
			dest14._33 = 1;
			tmp[i1] = dest14;
			if(fitToCascade) {
				zNear = splitFar[i1];
			}
		}
		var _g4 = this._numShadowCascades;
		var _g5 = 4;
		while(_g4 < _g5) {
			var i2 = _g4++;
			splitFar[i2] = -Infinity;
			splitNear[i2] = Infinity;
		}
		var tmp1 = this.get_data();
		var this24 = new glm_Vec4Base();
		this24.x = splitFar[0];
		this24.y = splitFar[1];
		this24.z = splitFar[2];
		this24.w = splitFar[3];
		tmp1.set("shadowSplitFar",this24);
		var tmp2 = this.get_data();
		var this25 = new glm_Vec4Base();
		this25.x = splitNear[0];
		this25.y = splitNear[1];
		this25.z = splitNear[2];
		this25.w = splitNear[3];
		tmp2.set("shadowSplitNear",this25);
		this.updateWorldToScreenMatrix();
	}
	enableShadowMapping(shadowMapSize,numCascades) {
		if(numCascades == null) {
			numCascades = 4;
		}
		if(shadowMapSize == null) {
			shadowMapSize = 512;
		}
		if(!this._shadowMappingEnabled || shadowMapSize != this._shadowMapSize || numCascades != this._numShadowCascades) {
			if(this._shadowMap == null || shadowMapSize != this._shadowMapSize || numCascades != this._numShadowCascades) {
				this._numShadowCascades = numCascades;
				this._shadowMapSize = shadowMapSize;
				this.initializeShadowMapping();
			} else {
				var _g = 0;
				var _g1 = this._shadowRenderers;
				while(_g < _g1.length) {
					var renderer = _g1[_g];
					++_g;
					if(renderer != null) {
						renderer.set_enabled(true);
					}
				}
				this.get_data().set("shadowMap",this._shadowMap);
			}
			this._shadowMappingEnabled = true;
		}
	}
	disableShadowMapping(disposeResources) {
		if(disposeResources == null) {
			disposeResources = false;
		}
		if(this._shadowMappingEnabled) {
			var _g = 0;
			var _g1 = this._shadowRenderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				if(renderer != null) {
					renderer.set_enabled(false);
				}
			}
			this.get_data().unset("shadowMap");
			if(disposeResources) {
				this._shadowMap = null;
				var _g2 = 0;
				var _g3 = this._shadowRenderers;
				while(_g2 < _g3.length) {
					var renderer1 = _g3[_g2];
					++_g2;
					if(renderer1 != null && this.get_target().existsComponent(renderer1)) {
						this.get_target().removeComponent(renderer1);
						renderer1 = null;
					}
				}
			}
			this._shadowMappingEnabled = false;
		}
	}
	updateModelToWorldMatrix(modelToWorld) {
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = -1.0;
		this1.w = 0;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = modelToWorld._00 * x + modelToWorld._10 * y + modelToWorld._20 * z + modelToWorld._30 * w;
		dest.y = modelToWorld._01 * x + modelToWorld._11 * y + modelToWorld._21 * z + modelToWorld._31 * w;
		dest.z = modelToWorld._02 * x + modelToWorld._12 * y + modelToWorld._22 * z + modelToWorld._32 * w;
		dest.w = modelToWorld._03 * x + modelToWorld._13 * y + modelToWorld._23 * z + modelToWorld._33 * w;
		var tmp = dest;
		var x1 = tmp.x;
		var y1 = tmp.y;
		var z1 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x1;
		this3.y = y1;
		this3.z = z1;
		this._worldDirection = this3;
		var v1 = this._worldDirection;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest1 = this4;
		var length = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v1.x * mult;
		dest1.y = v1.y * mult;
		dest1.z = v1.z * mult;
		this._worldDirection = dest1;
		this.get_data().set("direction",this._worldDirection);
		this.updateWorldToScreenMatrix();
	}
	updateRoot(root) {
		super.updateRoot(root);
		if(root != null && this._shadowMappingEnabled && this._shadowMap == null) {
			this.initializeShadowMapping();
		}
	}
	targetRemoved(target) {
		super.targetRemoved(target);
		var _g = 0;
		var _g1 = this._shadowRenderers;
		while(_g < _g1.length) {
			var renderer = _g1[_g];
			++_g;
			if(renderer != null && target.existsComponent(renderer)) {
				target.removeComponent(renderer);
			}
		}
	}
	copyFrom(directionalLight,option) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
	}
	initializeShadowMapping() {
		if(this.get_target() == null || !this.get_target().get_root().hasComponent(minko_component_SceneManager)) {
			return false;
		}
		var sm = this.get_target().get_root().getComponent(minko_component_SceneManager);
		var assets = sm.get_assets();
		var effectName = "effect/ShadowMap.effect";
		var fx = assets.effect(effectName);
		var smTechnique = this.get_target().get_root().hasComponent(minko_component_ShadowMappingTechnique) ? this.get_target().get_root().get_data().get("shadowMappingTechnique") : 0;
		if(fx == null) {
			var texture = assets.texture("shadow-map-tmp");
			if(texture == null) {
				texture = minko_render_Texture.create(assets.get_context(),this._shadowMapSize,this._shadowMapSize,false,true);
				if(smTechnique == 1) {
					texture.upload();
				}
				assets.setTexture("shadow-map-tmp",texture);
			}
			texture = assets.texture("shadow-map-tmp-2");
			if(texture == null) {
				texture = minko_render_Texture.create(assets.get_context(),this._shadowMapSize,this._shadowMapSize,false,true);
				if(smTechnique == 1) {
					texture.upload();
				}
				assets.setTexture("shadow-map-tmp-2",texture);
			}
			var loader = minko_file_Loader.createbyLoader(assets.get_loader());
			loader.get_options().set_loadAsynchronously(false);
			loader.queue(effectName);
			loader.load();
			fx = assets.effect(effectName);
		}
		this._shadowMap = minko_render_Texture.create(assets.get_context(),this._shadowMapSize * 2,this._shadowMapSize * 2,false,true);
		this._shadowMap.upload();
		this.get_data().set("shadowMap",this._shadowMap).set("shadowMaxDistance",0.9).set("shadowSpread",1.0).set("shadowBias",-0.001).set("shadowMapSize",this._shadowMapSize * 2.0);
		var y = this._shadowMapSize;
		var z = this._shadowMapSize;
		var w = this._shadowMapSize;
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = y;
		this1.z = z;
		this1.w = w;
		var x = this._shadowMapSize;
		var y1 = this._shadowMapSize;
		var z1 = this._shadowMapSize;
		var w1 = this._shadowMapSize;
		var this2 = new glm_Vec4Base();
		this2.x = x;
		this2.y = y1;
		this2.z = z1;
		this2.w = w1;
		var z2 = this._shadowMapSize;
		var w2 = this._shadowMapSize;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = z2;
		this3.w = w2;
		var x1 = this._shadowMapSize;
		var z3 = this._shadowMapSize;
		var w3 = this._shadowMapSize;
		var this4 = new glm_Vec4Base();
		this4.x = x1;
		this4.y = 0;
		this4.z = z3;
		this4.w = w3;
		var viewports = [this1,this2,this3,this4];
		var _g = 0;
		var _g1 = this._numShadowCascades;
		while(_g < _g1) {
			var i = _g++;
			var techniqueName = "shadow-map-cascade" + i;
			if(smTechnique == 1) {
				techniqueName += "-esm";
			}
			var renderer = minko_component_Renderer.create(-1,this._shadowMap,fx,techniqueName,minko_render__$Priority_Priority_$Impl_$.FIRST - i);
			renderer.set_clearBeforeRender(i == 0);
			renderer.set_viewport(viewports[i]);
			renderer.get_effectVariables().push(new minko_Tuple("lightUuid",this.get_data().get_uuid()));
			renderer.set_layoutMask(1024);
			this.get_target().addComponent(renderer);
			this._shadowRenderers[i] = renderer;
		}
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		var this6 = new glm_Mat4Base();
		this6._00 = 0;
		this6._01 = 0;
		this6._02 = 0;
		this6._03 = 0;
		this6._10 = 0;
		this6._11 = 0;
		this6._12 = 0;
		this6._13 = 0;
		this6._20 = 0;
		this6._21 = 0;
		this6._22 = 0;
		this6._23 = 0;
		this6._30 = 0;
		this6._31 = 0;
		this6._32 = 0;
		this6._33 = 0;
		var dest1 = this6;
		var f = 1 / Math.tan(0.3925);
		var nf = -0.001000100010001;
		dest1._00 = f / 1.0;
		dest1._01 = 0;
		dest1._02 = 0;
		dest1._03 = 0;
		dest1._10 = 0;
		dest1._11 = f;
		dest1._12 = 0;
		dest1._13 = 0;
		dest1._20 = 0;
		dest1._21 = 0;
		dest1._22 = 1000.1 * nf;
		dest1._23 = -1;
		dest1._30 = 0;
		dest1._31 = 0;
		dest1._32 = 200. * nf;
		dest1._33 = 0;
		this.computeShadowProjection(dest,dest1);
		return true;
	}
	updateWorldToScreenMatrix() {
		if(this.get_target() != null && this.get_target().get_data().hasProperty("modelToWorldMatrix")) {
			var src = this.get_target().get_data().get("modelToWorldMatrix");
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			var a00 = src._00;
			var a01 = src._10;
			var a02 = src._20;
			var a03 = src._30;
			var a10 = src._01;
			var a11 = src._11;
			var a12 = src._21;
			var a13 = src._31;
			var a20 = src._02;
			var a21 = src._12;
			var a22 = src._22;
			var a23 = src._32;
			var a30 = src._03;
			var a31 = src._13;
			var a32 = src._23;
			var a33 = src._33;
			var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
			var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
			var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
			var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
			var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
			if(Math.abs(det) <= glm_GLM.EPSILON) {
				throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
			}
			var idet = 1 / det;
			dest._00 = t00 * idet;
			dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
			dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
			dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
			dest._10 = t01 * idet;
			dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
			dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
			dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
			dest._20 = t02 * idet;
			dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
			dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
			dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
			dest._30 = t03 * idet;
			dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
			dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
			dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
			this._view = dest;
		} else {
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest1 = this2;
			dest1._00 = 1;
			dest1._10 = 0;
			dest1._20 = 0;
			dest1._30 = 0;
			dest1._01 = 0;
			dest1._11 = 1;
			dest1._21 = 0;
			dest1._31 = 0;
			dest1._02 = 0;
			dest1._12 = 0;
			dest1._22 = 1;
			dest1._32 = 0;
			dest1._03 = 0;
			dest1._13 = 0;
			dest1._23 = 0;
			dest1._33 = 1;
			this._view = dest1;
		}
		var zFar = [0.0,0.0,0.0,0.0];
		var zNear = [0.0,0.0,0.0,0.0];
		var viewProjections = [];
		var _g = 0;
		var _g1 = this._numShadowCascades;
		while(_g < _g1) {
			var i = _g++;
			var projection = this._shadowProjections[i];
			var istr = i == null ? "null" : "" + i;
			var farMinusNear = 2.0 / projection._22;
			var farPlusNear = projection._32 * farMinusNear;
			zNear[i] = (farMinusNear + farPlusNear) / 2.0;
			zFar[i] = farPlusNear - zNear[i];
			var b = this._view;
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			var _a;
			var _b;
			if(dest2 == projection) {
				var this4 = new glm_Mat4Base();
				this4._00 = 0;
				this4._01 = 0;
				this4._02 = 0;
				this4._03 = 0;
				this4._10 = 0;
				this4._11 = 0;
				this4._12 = 0;
				this4._13 = 0;
				this4._20 = 0;
				this4._21 = 0;
				this4._22 = 0;
				this4._23 = 0;
				this4._30 = 0;
				this4._31 = 0;
				this4._32 = 0;
				this4._33 = 0;
				var dest3 = this4;
				dest3._00 = projection._00;
				dest3._10 = projection._10;
				dest3._20 = projection._20;
				dest3._30 = projection._30;
				dest3._01 = projection._01;
				dest3._11 = projection._11;
				dest3._21 = projection._21;
				dest3._31 = projection._31;
				dest3._02 = projection._02;
				dest3._12 = projection._12;
				dest3._22 = projection._22;
				dest3._32 = projection._32;
				dest3._03 = projection._03;
				dest3._13 = projection._13;
				dest3._23 = projection._23;
				dest3._33 = projection._33;
				_a = dest3;
				_b = b;
			} else if(dest2 == b) {
				_a = projection;
				var this5 = new glm_Mat4Base();
				this5._00 = 0;
				this5._01 = 0;
				this5._02 = 0;
				this5._03 = 0;
				this5._10 = 0;
				this5._11 = 0;
				this5._12 = 0;
				this5._13 = 0;
				this5._20 = 0;
				this5._21 = 0;
				this5._22 = 0;
				this5._23 = 0;
				this5._30 = 0;
				this5._31 = 0;
				this5._32 = 0;
				this5._33 = 0;
				var dest4 = this5;
				dest4._00 = b._00;
				dest4._10 = b._10;
				dest4._20 = b._20;
				dest4._30 = b._30;
				dest4._01 = b._01;
				dest4._11 = b._11;
				dest4._21 = b._21;
				dest4._31 = b._31;
				dest4._02 = b._02;
				dest4._12 = b._12;
				dest4._22 = b._22;
				dest4._32 = b._32;
				dest4._03 = b._03;
				dest4._13 = b._13;
				dest4._23 = b._23;
				dest4._33 = b._33;
				_b = dest4;
			} else {
				_a = projection;
				_b = b;
			}
			dest2._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest2._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest2._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest2._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest2._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest2._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest2._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest2._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest2._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest2._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest2._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest2._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest2._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest2._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest2._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest2._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			var mat4 = dest2;
			viewProjections.push(mat4);
		}
		this.get_data().set("viewProjection",viewProjections).set("zNear",zNear).set("zFar",zFar);
	}
	computeBox(viewProjection) {
		var a = this._view;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var a00 = viewProjection._00;
		var a01 = viewProjection._10;
		var a02 = viewProjection._20;
		var a03 = viewProjection._30;
		var a10 = viewProjection._01;
		var a11 = viewProjection._11;
		var a12 = viewProjection._21;
		var a13 = viewProjection._31;
		var a20 = viewProjection._02;
		var a21 = viewProjection._12;
		var a22 = viewProjection._22;
		var a23 = viewProjection._32;
		var a30 = viewProjection._03;
		var a31 = viewProjection._13;
		var a32 = viewProjection._23;
		var a33 = viewProjection._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var b = dest;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		var _a;
		var _b;
		if(dest1 == a) {
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = a._00;
			dest2._10 = a._10;
			dest2._20 = a._20;
			dest2._30 = a._30;
			dest2._01 = a._01;
			dest2._11 = a._11;
			dest2._21 = a._21;
			dest2._31 = a._31;
			dest2._02 = a._02;
			dest2._12 = a._12;
			dest2._22 = a._22;
			dest2._32 = a._32;
			dest2._03 = a._03;
			dest2._13 = a._13;
			dest2._23 = a._23;
			dest2._33 = a._33;
			_a = dest2;
			_b = b;
		} else if(dest1 == b) {
			_a = a;
			var this4 = new glm_Mat4Base();
			this4._00 = 0;
			this4._01 = 0;
			this4._02 = 0;
			this4._03 = 0;
			this4._10 = 0;
			this4._11 = 0;
			this4._12 = 0;
			this4._13 = 0;
			this4._20 = 0;
			this4._21 = 0;
			this4._22 = 0;
			this4._23 = 0;
			this4._30 = 0;
			this4._31 = 0;
			this4._32 = 0;
			this4._33 = 0;
			var dest3 = this4;
			dest3._00 = b._00;
			dest3._10 = b._10;
			dest3._20 = b._20;
			dest3._30 = b._30;
			dest3._01 = b._01;
			dest3._11 = b._11;
			dest3._21 = b._21;
			dest3._31 = b._31;
			dest3._02 = b._02;
			dest3._12 = b._12;
			dest3._22 = b._22;
			dest3._32 = b._32;
			dest3._03 = b._03;
			dest3._13 = b._13;
			dest3._23 = b._23;
			dest3._33 = b._33;
			_b = dest3;
		} else {
			_a = a;
			_b = b;
		}
		dest1._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest1._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest1._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest1._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest1._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest1._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest1._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest1._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest1._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest1._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest1._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest1._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest1._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest1._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest1._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest1._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		var t = dest1;
		var this5 = new glm_Vec4Base();
		this5.x = -1.0;
		this5.y = 1.0;
		this5.z = -1.0;
		this5.w = 1.0;
		var v = this5;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var dest4 = this6;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest4.x = t._00 * x + t._10 * y + t._20 * z + t._30 * w;
		dest4.y = t._01 * x + t._11 * y + t._21 * z + t._31 * w;
		dest4.z = t._02 * x + t._12 * y + t._22 * z + t._32 * w;
		dest4.w = t._03 * x + t._13 * y + t._23 * z + t._33 * w;
		var this7 = new glm_Vec4Base();
		this7.x = 1.0;
		this7.y = 1.0;
		this7.z = -1.0;
		this7.w = 1.0;
		var v1 = this7;
		var this8 = new glm_Vec4Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		this8.w = 0;
		var dest5 = this8;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest5.x = t._00 * x1 + t._10 * y1 + t._20 * z1 + t._30 * w1;
		dest5.y = t._01 * x1 + t._11 * y1 + t._21 * z1 + t._31 * w1;
		dest5.z = t._02 * x1 + t._12 * y1 + t._22 * z1 + t._32 * w1;
		dest5.w = t._03 * x1 + t._13 * y1 + t._23 * z1 + t._33 * w1;
		var this9 = new glm_Vec4Base();
		this9.x = 1.0;
		this9.y = -1.0;
		this9.z = -1.0;
		this9.w = 1.0;
		var v2 = this9;
		var this10 = new glm_Vec4Base();
		this10.x = 0;
		this10.y = 0;
		this10.z = 0;
		this10.w = 0;
		var dest6 = this10;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest6.x = t._00 * x2 + t._10 * y2 + t._20 * z2 + t._30 * w2;
		dest6.y = t._01 * x2 + t._11 * y2 + t._21 * z2 + t._31 * w2;
		dest6.z = t._02 * x2 + t._12 * y2 + t._22 * z2 + t._32 * w2;
		dest6.w = t._03 * x2 + t._13 * y2 + t._23 * z2 + t._33 * w2;
		var this11 = new glm_Vec4Base();
		this11.x = -1.0;
		this11.y = -1.0;
		this11.z = -1.0;
		this11.w = 1.0;
		var v3 = this11;
		var this12 = new glm_Vec4Base();
		this12.x = 0;
		this12.y = 0;
		this12.z = 0;
		this12.w = 0;
		var dest7 = this12;
		var x3 = v3.x;
		var y3 = v3.y;
		var z3 = v3.z;
		var w3 = v3.w;
		dest7.x = t._00 * x3 + t._10 * y3 + t._20 * z3 + t._30 * w3;
		dest7.y = t._01 * x3 + t._11 * y3 + t._21 * z3 + t._31 * w3;
		dest7.z = t._02 * x3 + t._12 * y3 + t._22 * z3 + t._32 * w3;
		dest7.w = t._03 * x3 + t._13 * y3 + t._23 * z3 + t._33 * w3;
		var this13 = new glm_Vec4Base();
		this13.x = -1.0;
		this13.y = 1.0;
		this13.z = 1.0;
		this13.w = 1.0;
		var v4 = this13;
		var this14 = new glm_Vec4Base();
		this14.x = 0;
		this14.y = 0;
		this14.z = 0;
		this14.w = 0;
		var dest8 = this14;
		var x4 = v4.x;
		var y4 = v4.y;
		var z4 = v4.z;
		var w4 = v4.w;
		dest8.x = t._00 * x4 + t._10 * y4 + t._20 * z4 + t._30 * w4;
		dest8.y = t._01 * x4 + t._11 * y4 + t._21 * z4 + t._31 * w4;
		dest8.z = t._02 * x4 + t._12 * y4 + t._22 * z4 + t._32 * w4;
		dest8.w = t._03 * x4 + t._13 * y4 + t._23 * z4 + t._33 * w4;
		var this15 = new glm_Vec4Base();
		this15.x = 1.0;
		this15.y = 1.0;
		this15.z = 1.0;
		this15.w = 1.0;
		var v5 = this15;
		var this16 = new glm_Vec4Base();
		this16.x = 0;
		this16.y = 0;
		this16.z = 0;
		this16.w = 0;
		var dest9 = this16;
		var x5 = v5.x;
		var y5 = v5.y;
		var z5 = v5.z;
		var w5 = v5.w;
		dest9.x = t._00 * x5 + t._10 * y5 + t._20 * z5 + t._30 * w5;
		dest9.y = t._01 * x5 + t._11 * y5 + t._21 * z5 + t._31 * w5;
		dest9.z = t._02 * x5 + t._12 * y5 + t._22 * z5 + t._32 * w5;
		dest9.w = t._03 * x5 + t._13 * y5 + t._23 * z5 + t._33 * w5;
		var this17 = new glm_Vec4Base();
		this17.x = 1.0;
		this17.y = -1.0;
		this17.z = 1.0;
		this17.w = 1.0;
		var v6 = this17;
		var this18 = new glm_Vec4Base();
		this18.x = 0;
		this18.y = 0;
		this18.z = 0;
		this18.w = 0;
		var dest10 = this18;
		var x6 = v6.x;
		var y6 = v6.y;
		var z6 = v6.z;
		var w6 = v6.w;
		dest10.x = t._00 * x6 + t._10 * y6 + t._20 * z6 + t._30 * w6;
		dest10.y = t._01 * x6 + t._11 * y6 + t._21 * z6 + t._31 * w6;
		dest10.z = t._02 * x6 + t._12 * y6 + t._22 * z6 + t._32 * w6;
		dest10.w = t._03 * x6 + t._13 * y6 + t._23 * z6 + t._33 * w6;
		var this19 = new glm_Vec4Base();
		this19.x = -1.0;
		this19.y = -1.0;
		this19.z = 1.0;
		this19.w = 1.0;
		var v7 = this19;
		var this20 = new glm_Vec4Base();
		this20.x = 0;
		this20.y = 0;
		this20.z = 0;
		this20.w = 0;
		var dest11 = this20;
		var x7 = v7.x;
		var y7 = v7.y;
		var z7 = v7.z;
		var w7 = v7.w;
		dest11.x = t._00 * x7 + t._10 * y7 + t._20 * z7 + t._30 * w7;
		dest11.y = t._01 * x7 + t._11 * y7 + t._21 * z7 + t._31 * w7;
		dest11.z = t._02 * x7 + t._12 * y7 + t._22 * z7 + t._32 * w7;
		dest11.w = t._03 * x7 + t._13 * y7 + t._23 * z7 + t._33 * w7;
		var v8 = [dest4,dest5,dest6,dest7,dest8,dest9,dest10,dest11];
		var _g = 0;
		var _g1 = v8.length;
		while(_g < _g1) {
			var i = _g++;
			var p = v8[i];
			var s = 1 / p.w;
			var this21 = new glm_Vec4Base();
			this21.x = 0;
			this21.y = 0;
			this21.z = 0;
			this21.w = 0;
			var dest12 = this21;
			dest12.x = p.x * s;
			dest12.y = p.y * s;
			dest12.z = p.z * s;
			dest12.w = p.w * s;
			v8[i] = dest12;
		}
		var this22 = new glm_Vec3Base();
		this22.x = Infinity;
		this22.y = Infinity;
		this22.z = Infinity;
		var bottomLeft = this22;
		var this23 = new glm_Vec3Base();
		this23.x = -Infinity;
		this23.y = -Infinity;
		this23.z = -Infinity;
		var topRight = this23;
		var _g2 = 0;
		while(_g2 < v8.length) {
			var p1 = v8[_g2];
			++_g2;
			if(p1.x < bottomLeft.x) {
				bottomLeft.x = p1.x;
			}
			if(p1.x > topRight.x) {
				topRight.x = p1.x;
			}
			if(p1.y < bottomLeft.y) {
				bottomLeft.y = p1.y;
			}
			if(p1.y > topRight.y) {
				topRight.y = p1.y;
			}
			if(p1.z < bottomLeft.z) {
				bottomLeft.z = p1.z;
			}
			if(p1.z > topRight.z) {
				topRight.z = p1.z;
			}
		}
		return new minko_Tuple(bottomLeft,topRight);
	}
	computeBoundingSphere(view,projection) {
		var a = this._view;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var _a;
		var _b;
		if(dest == projection) {
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest1 = this2;
			dest1._00 = projection._00;
			dest1._10 = projection._10;
			dest1._20 = projection._20;
			dest1._30 = projection._30;
			dest1._01 = projection._01;
			dest1._11 = projection._11;
			dest1._21 = projection._21;
			dest1._31 = projection._31;
			dest1._02 = projection._02;
			dest1._12 = projection._12;
			dest1._22 = projection._22;
			dest1._32 = projection._32;
			dest1._03 = projection._03;
			dest1._13 = projection._13;
			dest1._23 = projection._23;
			dest1._33 = projection._33;
			_a = dest1;
			_b = view;
		} else if(dest == view) {
			_a = projection;
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = view._00;
			dest2._10 = view._10;
			dest2._20 = view._20;
			dest2._30 = view._30;
			dest2._01 = view._01;
			dest2._11 = view._11;
			dest2._21 = view._21;
			dest2._31 = view._31;
			dest2._02 = view._02;
			dest2._12 = view._12;
			dest2._22 = view._22;
			dest2._32 = view._32;
			dest2._03 = view._03;
			dest2._13 = view._13;
			dest2._23 = view._23;
			dest2._33 = view._33;
			_b = dest2;
		} else {
			_a = projection;
			_b = view;
		}
		dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		var src = dest;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var dest3 = this4;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest3._00 = t00 * idet;
		dest3._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest3._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest3._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest3._10 = t01 * idet;
		dest3._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest3._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest3._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest3._20 = t02 * idet;
		dest3._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest3._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest3._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest3._30 = t03 * idet;
		dest3._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest3._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest3._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var b = dest3;
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest4 = this5;
		var _a1;
		var _b1;
		if(dest4 == a) {
			var this6 = new glm_Mat4Base();
			this6._00 = 0;
			this6._01 = 0;
			this6._02 = 0;
			this6._03 = 0;
			this6._10 = 0;
			this6._11 = 0;
			this6._12 = 0;
			this6._13 = 0;
			this6._20 = 0;
			this6._21 = 0;
			this6._22 = 0;
			this6._23 = 0;
			this6._30 = 0;
			this6._31 = 0;
			this6._32 = 0;
			this6._33 = 0;
			var dest5 = this6;
			dest5._00 = a._00;
			dest5._10 = a._10;
			dest5._20 = a._20;
			dest5._30 = a._30;
			dest5._01 = a._01;
			dest5._11 = a._11;
			dest5._21 = a._21;
			dest5._31 = a._31;
			dest5._02 = a._02;
			dest5._12 = a._12;
			dest5._22 = a._22;
			dest5._32 = a._32;
			dest5._03 = a._03;
			dest5._13 = a._13;
			dest5._23 = a._23;
			dest5._33 = a._33;
			_a1 = dest5;
			_b1 = b;
		} else if(dest4 == b) {
			_a1 = a;
			var this7 = new glm_Mat4Base();
			this7._00 = 0;
			this7._01 = 0;
			this7._02 = 0;
			this7._03 = 0;
			this7._10 = 0;
			this7._11 = 0;
			this7._12 = 0;
			this7._13 = 0;
			this7._20 = 0;
			this7._21 = 0;
			this7._22 = 0;
			this7._23 = 0;
			this7._30 = 0;
			this7._31 = 0;
			this7._32 = 0;
			this7._33 = 0;
			var dest6 = this7;
			dest6._00 = b._00;
			dest6._10 = b._10;
			dest6._20 = b._20;
			dest6._30 = b._30;
			dest6._01 = b._01;
			dest6._11 = b._11;
			dest6._21 = b._21;
			dest6._31 = b._31;
			dest6._02 = b._02;
			dest6._12 = b._12;
			dest6._22 = b._22;
			dest6._32 = b._32;
			dest6._03 = b._03;
			dest6._13 = b._13;
			dest6._23 = b._23;
			dest6._33 = b._33;
			_b1 = dest6;
		} else {
			_a1 = a;
			_b1 = b;
		}
		dest4._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
		dest4._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
		dest4._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
		dest4._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
		dest4._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
		dest4._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
		dest4._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
		dest4._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
		dest4._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
		dest4._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
		dest4._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
		dest4._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
		dest4._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
		dest4._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
		dest4._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
		dest4._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
		var invProj = dest4;
		var this8 = new glm_Vec4Base();
		this8.x = 0.0;
		this8.y = 0.0;
		this8.z = 0.0;
		this8.w = 1.0;
		var v = this8;
		var this9 = new glm_Vec4Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		this9.w = 0;
		var dest7 = this9;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest7.x = invProj._00 * x + invProj._10 * y + invProj._20 * z + invProj._30 * w;
		dest7.y = invProj._01 * x + invProj._11 * y + invProj._21 * z + invProj._31 * w;
		dest7.z = invProj._02 * x + invProj._12 * y + invProj._22 * z + invProj._32 * w;
		dest7.w = invProj._03 * x + invProj._13 * y + invProj._23 * z + invProj._33 * w;
		var center = dest7;
		var s = 1 / center.w;
		var this10 = new glm_Vec4Base();
		this10.x = 0;
		this10.y = 0;
		this10.z = 0;
		this10.w = 0;
		var dest8 = this10;
		dest8.x = center.x * s;
		dest8.y = center.y * s;
		dest8.z = center.z * s;
		dest8.w = center.w * s;
		center = dest8;
		var this11 = new glm_Vec4Base();
		this11.x = 1.0;
		this11.y = 1.0;
		this11.z = 1.0;
		this11.w = 1.0;
		var v1 = this11;
		var this12 = new glm_Vec4Base();
		this12.x = 0;
		this12.y = 0;
		this12.z = 0;
		this12.w = 0;
		var dest9 = this12;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest9.x = invProj._00 * x1 + invProj._10 * y1 + invProj._20 * z1 + invProj._30 * w1;
		dest9.y = invProj._01 * x1 + invProj._11 * y1 + invProj._21 * z1 + invProj._31 * w1;
		dest9.z = invProj._02 * x1 + invProj._12 * y1 + invProj._22 * z1 + invProj._32 * w1;
		dest9.w = invProj._03 * x1 + invProj._13 * y1 + invProj._23 * z1 + invProj._33 * w1;
		var max = dest9;
		var this13 = new glm_Vec4Base();
		this13.x = -1.0;
		this13.y = -1.0;
		this13.z = -1.0;
		this13.w = 1.0;
		var v2 = this13;
		var this14 = new glm_Vec4Base();
		this14.x = 0;
		this14.y = 0;
		this14.z = 0;
		this14.w = 0;
		var dest10 = this14;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest10.x = invProj._00 * x2 + invProj._10 * y2 + invProj._20 * z2 + invProj._30 * w2;
		dest10.y = invProj._01 * x2 + invProj._11 * y2 + invProj._21 * z2 + invProj._31 * w2;
		dest10.z = invProj._02 * x2 + invProj._12 * y2 + invProj._22 * z2 + invProj._32 * w2;
		dest10.w = invProj._03 * x2 + invProj._13 * y2 + invProj._23 * z2 + invProj._33 * w2;
		var min = dest10;
		var s1 = 1 / max.w;
		var this15 = new glm_Vec4Base();
		this15.x = 0;
		this15.y = 0;
		this15.z = 0;
		this15.w = 0;
		var dest11 = this15;
		dest11.x = max.x * s1;
		dest11.y = max.y * s1;
		dest11.z = max.z * s1;
		dest11.w = max.w * s1;
		max = dest11;
		var s2 = 1 / min.w;
		var this16 = new glm_Vec4Base();
		this16.x = 0;
		this16.y = 0;
		this16.z = 0;
		this16.w = 0;
		var dest12 = this16;
		dest12.x = min.x * s2;
		dest12.y = min.y * s2;
		dest12.z = min.z * s2;
		dest12.w = min.w * s2;
		min = dest12;
		var radius = Math.max((max.x - center.x) * (max.x - center.x) + (max.y - center.y) * (max.y - center.y) + (max.z - center.z) * (max.z - center.z) + (max.w - center.w) * (max.w - center.w),(min.x - center.x) * (min.x - center.x) + (min.y - center.y) * (min.y - center.y) + (min.z - center.z) * (min.z - center.z) + (min.w - center.w) * (min.w - center.w));
		var x3 = center.x;
		var y3 = center.y;
		var z3 = center.z;
		var this17 = new glm_Vec3Base();
		this17.x = x3;
		this17.y = y3;
		this17.z = z3;
		return { first : this17, second : radius};
	}
	minSphere(pt,np,bnd,nb) {
	}
	static create(diffuse,specular) {
		if(specular == null) {
			specular = 1.0;
		}
		if(diffuse == null) {
			diffuse = 1.0;
		}
		return new minko_component_DirectionalLight(diffuse,specular);
	}
}
$hx_exports["minko"]["component"]["DirectionalLight"] = minko_component_DirectionalLight;
minko_component_DirectionalLight.__name__ = true;
minko_component_DirectionalLight.__super__ = minko_component_AbstractDiscreteLight;
Object.assign(minko_component_DirectionalLight.prototype, {
	__class__: minko_component_DirectionalLight
});
class minko_component_MasterAnimation extends minko_component_AbstractAnimation {
	constructor(isLooping) {
		super(isLooping);
		this._animations = [];
	}
	play() {
		super.play();
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.play();
		}
	}
	stop() {
		super.stop();
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.stop();
		}
	}
	seek(time) {
		super.seek(time);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.seek(time);
		}
	}
	clone(option) {
		var anim = new minko_component_MasterAnimation(this.get_isLooping());
		anim.copyFrom(this,option);
		return anim;
	}
	addLabel(name,time) {
		super.addLabel(name,time);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.addLabel(name,time);
		}
	}
	changeLabel(name,newName) {
		super.changeLabel(name,newName);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.changeLabel(name,newName);
		}
	}
	setTimeForLabel(name,newTime) {
		super.setTimeForLabel(name,newTime);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.setTimeForLabel(name,newTime);
		}
	}
	removeLabel(name) {
		super.removeLabel(name);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.removeLabel(name);
		}
	}
	setPlaybackWindow(beginLabelName,endLabelName,forceRestart) {
		if(forceRestart == null) {
			forceRestart = false;
		}
		super.setPlaybackWindow(beginLabelName,endLabelName,forceRestart);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.setPlaybackWindow(beginLabelName,endLabelName,forceRestart);
		}
	}
	resetPlaybackWindow() {
		super.resetPlaybackWindow();
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.resetPlaybackWindow();
		}
	}
	initAnimations() {
		var target = this.get_target();
		var targetParent = target.get_parent();
		var rootNode = targetParent != null ? targetParent : target;
		var descendants = minko_scene_NodeSet.createbyNode(rootNode).descendants(true);
		var nodes = descendants.get_nodes();
		var _g = 0;
		while(_g < nodes.length) {
			var descendant = nodes[_g];
			++_g;
			var _g1 = 0;
			var _g11 = descendant.getComponents(minko_component_Skinning);
			while(_g1 < _g11.length) {
				var skinning = _g11[_g1];
				++_g1;
				this._animations.push(skinning);
			}
			var _g2 = 0;
			var _g3 = descendant.getComponents(minko_component_Animation);
			while(_g2 < _g3.length) {
				var animation = _g3[_g2];
				++_g2;
				this._animations.push(animation);
			}
		}
		this._maxTime = 0;
		var _g12 = 0;
		var _g21 = this._animations;
		while(_g12 < _g21.length) {
			var animation1 = _g21[_g12];
			++_g12;
			this._maxTime = Math.floor(Math.max(this._maxTime,animation1.get_maxTime()));
		}
		this.setPlaybackWindow(0,this._maxTime);
		this.seek(0);
		this.play();
	}
	rebindDependencies(componentsMap,nodeMap,option) {
		var newAnimations = [];
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			var it = componentsMap.h[animation.__id__];
			if(it != null) {
				newAnimations.push(animation);
			}
		}
		this._animations = newAnimations;
	}
	set_timeFunction(func) {
		super.set_timeFunction(func);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.set_timeFunction(func);
		}
		return func;
	}
	set_isReversed(value) {
		super.set_isReversed(value);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.set_isReversed(value);
		}
		return value;
	}
	targetAdded(target) {
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.removedHandler));
		this._target = target;
		this.initAnimations();
	}
	targetRemoved(target) {
	}
	update() {
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			var anim = animation;
			if(anim != null) {
				anim._currentTime = this._currentTime;
				anim.update();
			}
		}
	}
	static create(isLooping) {
		if(isLooping == null) {
			isLooping = true;
		}
		var ptr = new minko_component_MasterAnimation(isLooping);
		return ptr;
	}
}
$hx_exports["minko"]["component"]["MasterAnimation"] = minko_component_MasterAnimation;
minko_component_MasterAnimation.__name__ = true;
minko_component_MasterAnimation.__super__ = minko_component_AbstractAnimation;
Object.assign(minko_component_MasterAnimation.prototype, {
	__class__: minko_component_MasterAnimation
});
class minko_component_Metadata extends minko_component_AbstractComponent {
	constructor() {
		super();
		this._data = new haxe_ds_StringMap();
	}
	set_data(__data) {
		this._data = __data;
		return this._data;
	}
	get_data() {
		return this._data;
	}
	keys() {
		return this._data.keys();
	}
	get(propertyName) {
		var _this = this._data;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	set(propertyName,value) {
		var _this = this._data;
		if(__map_reserved[propertyName] != null) {
			_this.setReserved(propertyName,value);
		} else {
			_this.h[propertyName] = value;
		}
		return;
	}
	has(propertyName) {
		var _this = this._data;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	static create(data) {
		var m = new minko_component_Metadata();
		m.set_data(data);
		return m;
	}
}
$hx_exports["minko"]["component"]["Metadata"] = minko_component_Metadata;
minko_component_Metadata.__name__ = true;
minko_component_Metadata.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_Metadata.prototype, {
	__class__: minko_component_Metadata
});
class minko_component_PerspectiveCamera extends minko_component_AbstractComponent {
	constructor(fov,aspectRatio,zNear,zFar,postPerspective) {
		super();
		this._data = minko_data_Provider.create();
		this._fov = fov;
		this._aspectRatio = aspectRatio;
		this._zNear = zNear;
		this._zFar = zFar;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this._view = dest;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		var f = 1 / Math.tan(fov / 2);
		var nf = 1 / (zNear - zFar);
		dest1._00 = f / aspectRatio;
		dest1._01 = 0;
		dest1._02 = 0;
		dest1._03 = 0;
		dest1._10 = 0;
		dest1._11 = f;
		dest1._12 = 0;
		dest1._13 = 0;
		dest1._20 = 0;
		dest1._21 = 0;
		dest1._22 = (zFar + zNear) * nf;
		dest1._23 = -1;
		dest1._30 = 0;
		dest1._31 = 0;
		dest1._32 = 2 * zFar * zNear * nf;
		dest1._33 = 0;
		this._projection = dest1;
		this._viewProjection = this._projection;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this._position = this3;
		var this4 = new glm_Vec3Base();
		this4.x = 0.0;
		this4.y = 0.0;
		this4.z = 1.0;
		this._direction = this4;
		this._postProjection = postPerspective;
		this._data.set("eyeDirection",this._direction).set("eyePosition",this._position).set("viewMatrix",this._view).set("projectionMatrix",this._projection).set("worldToScreenMatrix",this._viewProjection).set("fov",this._fov).set("aspectRatio",this._aspectRatio).set("zNear",this._zNear).set("zFar",this._zFar);
	}
	get_fieldOfView() {
		return this._fov;
	}
	set_fieldOfView(fov) {
		if(fov != this._fov) {
			this._fov = fov;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return fov;
	}
	get_aspectRatio() {
		return this._aspectRatio;
	}
	set_aspectRatio(v) {
		if(v != this._aspectRatio) {
			this._aspectRatio = v;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return v;
	}
	get_zNear() {
		return this._zNear;
	}
	set_zNear(v) {
		if(v != this._zNear) {
			this._zNear = v;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return v;
	}
	get_zFar() {
		return this._zFar;
	}
	set_zFar(v) {
		if(v != this._zFar) {
			this._zFar = v;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return v;
	}
	get_data() {
		return this._data;
	}
	get_viewMatrix() {
		return this._view;
	}
	get_projectionMatrix() {
		return this._projection;
	}
	get_viewProjectionMatrix() {
		return this._viewProjection;
	}
	updateProjection(fov,aspectRatio,zNear,zFar) {
		this._fov = fov;
		this._aspectRatio = aspectRatio;
		this._zNear = zNear;
		this._zFar = zFar;
		var a = this._postProjection;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var f = 1 / Math.tan(fov / 2);
		var nf = 1 / (zNear - zFar);
		dest._00 = f / aspectRatio;
		dest._01 = 0;
		dest._02 = 0;
		dest._03 = 0;
		dest._10 = 0;
		dest._11 = f;
		dest._12 = 0;
		dest._13 = 0;
		dest._20 = 0;
		dest._21 = 0;
		dest._22 = (zFar + zNear) * nf;
		dest._23 = -1;
		dest._30 = 0;
		dest._31 = 0;
		dest._32 = 2 * zFar * zNear * nf;
		dest._33 = 0;
		var b = dest;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		var _a;
		var _b;
		if(dest1 == a) {
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = a._00;
			dest2._10 = a._10;
			dest2._20 = a._20;
			dest2._30 = a._30;
			dest2._01 = a._01;
			dest2._11 = a._11;
			dest2._21 = a._21;
			dest2._31 = a._31;
			dest2._02 = a._02;
			dest2._12 = a._12;
			dest2._22 = a._22;
			dest2._32 = a._32;
			dest2._03 = a._03;
			dest2._13 = a._13;
			dest2._23 = a._23;
			dest2._33 = a._33;
			_a = dest2;
			_b = b;
		} else if(dest1 == b) {
			_a = a;
			var this4 = new glm_Mat4Base();
			this4._00 = 0;
			this4._01 = 0;
			this4._02 = 0;
			this4._03 = 0;
			this4._10 = 0;
			this4._11 = 0;
			this4._12 = 0;
			this4._13 = 0;
			this4._20 = 0;
			this4._21 = 0;
			this4._22 = 0;
			this4._23 = 0;
			this4._30 = 0;
			this4._31 = 0;
			this4._32 = 0;
			this4._33 = 0;
			var dest3 = this4;
			dest3._00 = b._00;
			dest3._10 = b._10;
			dest3._20 = b._20;
			dest3._30 = b._30;
			dest3._01 = b._01;
			dest3._11 = b._11;
			dest3._21 = b._21;
			dest3._31 = b._31;
			dest3._02 = b._02;
			dest3._12 = b._12;
			dest3._22 = b._22;
			dest3._32 = b._32;
			dest3._03 = b._03;
			dest3._13 = b._13;
			dest3._23 = b._23;
			dest3._33 = b._33;
			_b = dest3;
		} else {
			_a = a;
			_b = b;
		}
		dest1._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest1._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest1._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest1._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest1._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest1._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest1._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest1._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest1._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest1._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest1._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest1._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest1._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest1._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest1._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest1._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		this._projection = dest1;
		var a1 = this._projection;
		var b1 = this._view;
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest4 = this5;
		var _a1;
		var _b1;
		if(dest4 == a1) {
			var this6 = new glm_Mat4Base();
			this6._00 = 0;
			this6._01 = 0;
			this6._02 = 0;
			this6._03 = 0;
			this6._10 = 0;
			this6._11 = 0;
			this6._12 = 0;
			this6._13 = 0;
			this6._20 = 0;
			this6._21 = 0;
			this6._22 = 0;
			this6._23 = 0;
			this6._30 = 0;
			this6._31 = 0;
			this6._32 = 0;
			this6._33 = 0;
			var dest5 = this6;
			dest5._00 = a1._00;
			dest5._10 = a1._10;
			dest5._20 = a1._20;
			dest5._30 = a1._30;
			dest5._01 = a1._01;
			dest5._11 = a1._11;
			dest5._21 = a1._21;
			dest5._31 = a1._31;
			dest5._02 = a1._02;
			dest5._12 = a1._12;
			dest5._22 = a1._22;
			dest5._32 = a1._32;
			dest5._03 = a1._03;
			dest5._13 = a1._13;
			dest5._23 = a1._23;
			dest5._33 = a1._33;
			_a1 = dest5;
			_b1 = b1;
		} else if(dest4 == b1) {
			_a1 = a1;
			var this7 = new glm_Mat4Base();
			this7._00 = 0;
			this7._01 = 0;
			this7._02 = 0;
			this7._03 = 0;
			this7._10 = 0;
			this7._11 = 0;
			this7._12 = 0;
			this7._13 = 0;
			this7._20 = 0;
			this7._21 = 0;
			this7._22 = 0;
			this7._23 = 0;
			this7._30 = 0;
			this7._31 = 0;
			this7._32 = 0;
			this7._33 = 0;
			var dest6 = this7;
			dest6._00 = b1._00;
			dest6._10 = b1._10;
			dest6._20 = b1._20;
			dest6._30 = b1._30;
			dest6._01 = b1._01;
			dest6._11 = b1._11;
			dest6._21 = b1._21;
			dest6._31 = b1._31;
			dest6._02 = b1._02;
			dest6._12 = b1._12;
			dest6._22 = b1._22;
			dest6._32 = b1._32;
			dest6._03 = b1._03;
			dest6._13 = b1._13;
			dest6._23 = b1._23;
			dest6._33 = b1._33;
			_b1 = dest6;
		} else {
			_a1 = a1;
			_b1 = b1;
		}
		dest4._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
		dest4._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
		dest4._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
		dest4._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
		dest4._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
		dest4._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
		dest4._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
		dest4._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
		dest4._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
		dest4._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
		dest4._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
		dest4._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
		dest4._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
		dest4._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
		dest4._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
		dest4._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
		this._viewProjection = dest4;
		this._data.set("fov",this._fov).set("aspectRatio",this._aspectRatio).set("zNear",this._zNear).set("zFar",this._zFar).set("projectionMatrix",this._projection).set("worldToScreenMatrix",this._viewProjection);
	}
	unproject(x,y) {
		var fovDiv2 = this._fov * .5;
		var dx = Math.tan(fovDiv2) * x * this._aspectRatio;
		var dy = -Math.tan(fovDiv2) * y;
		var x1 = dx * this._zNear;
		var y1 = dy * this._zNear;
		var z = -this._zNear;
		var this1 = new glm_Vec3Base();
		this1.x = x1;
		this1.y = y1;
		this1.z = z;
		var origin = this1;
		var x2 = dx * this._zNear;
		var y2 = dy * this._zNear;
		var z1 = -this._zNear;
		var this2 = new glm_Vec3Base();
		this2.x = x2;
		this2.y = y2;
		this2.z = z1;
		var direction = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var dest = this3;
		var length = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest.x = direction.x * mult;
		dest.y = direction.y * mult;
		dest.z = direction.z * mult;
		direction = dest;
		var t = this.get_target().getComponent(minko_component_Transform);
		if(t != null) {
			var tModelToWorld = t.get_modelToWorldMatrix();
			var x3 = origin.x;
			var y3 = origin.y;
			var z2 = origin.z;
			var this4 = new glm_Vec4Base();
			this4.x = x3;
			this4.y = y3;
			this4.z = z2;
			this4.w = 1;
			var v = this4;
			var this5 = new glm_Vec4Base();
			this5.x = 0;
			this5.y = 0;
			this5.z = 0;
			this5.w = 0;
			var dest1 = this5;
			var x4 = v.x;
			var y4 = v.y;
			var z3 = v.z;
			var w = v.w;
			dest1.x = tModelToWorld._00 * x4 + tModelToWorld._10 * y4 + tModelToWorld._20 * z3 + tModelToWorld._30 * w;
			dest1.y = tModelToWorld._01 * x4 + tModelToWorld._11 * y4 + tModelToWorld._21 * z3 + tModelToWorld._31 * w;
			dest1.z = tModelToWorld._02 * x4 + tModelToWorld._12 * y4 + tModelToWorld._22 * z3 + tModelToWorld._32 * w;
			dest1.w = tModelToWorld._03 * x4 + tModelToWorld._13 * y4 + tModelToWorld._23 * z3 + tModelToWorld._33 * w;
			var tmp = dest1;
			var x5 = tmp.x;
			var y5 = tmp.y;
			var z4 = tmp.z;
			var this6 = new glm_Vec3Base();
			this6.x = x5;
			this6.y = y5;
			this6.z = z4;
			origin = this6;
			var _r0c0 = tModelToWorld._00;
			var _r0c1 = tModelToWorld._10;
			var _r0c2 = tModelToWorld._20;
			var _r1c0 = tModelToWorld._01;
			var _r1c1 = tModelToWorld._11;
			var _r1c2 = tModelToWorld._21;
			var _r2c0 = tModelToWorld._02;
			var _r2c1 = tModelToWorld._22;
			var _r2c2 = tModelToWorld._22;
			var this7 = new glm_Mat3Base();
			this7._00 = _r0c0;
			this7._01 = _r1c0;
			this7._02 = _r2c0;
			this7._10 = _r0c1;
			this7._11 = _r1c1;
			this7._12 = _r2c1;
			this7._20 = _r0c2;
			this7._21 = _r1c2;
			this7._22 = _r2c2;
			var m = this7;
			var this8 = new glm_Vec3Base();
			this8.x = 0;
			this8.y = 0;
			this8.z = 0;
			var dest2 = this8;
			var x6 = direction.x;
			var y6 = direction.y;
			var z5 = direction.z;
			dest2.x = m._00 * x6 + m._10 * y6 + m._20 * z5;
			dest2.y = m._01 * x6 + m._11 * y6 + m._21 * z5;
			dest2.z = m._02 * x6 + m._12 * y6 + m._22 * z5;
			direction = dest2;
			var this9 = new glm_Vec3Base();
			this9.x = 0;
			this9.y = 0;
			this9.z = 0;
			var dest3 = this9;
			var length1 = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
			var mult1 = 0;
			if(length1 >= glm_GLM.EPSILON) {
				mult1 = 1 / length1;
			}
			dest3.x = direction.x * mult1;
			dest3.y = direction.y * mult1;
			dest3.z = direction.z * mult1;
			direction = dest3;
		}
		return minko_math_Ray.createbyVector3(origin,direction);
	}
	project(worldPosition) {
		var sm = this.get_target().get_root().getComponent(minko_component_SceneManager);
		var context = sm.get_assets().get_context();
		return minko_component_PerspectiveCamera.projectWorldPosition(worldPosition,context.get_viewportWidth(),context.get_viewportHeight(),this._view,this._viewProjection);
	}
	targetAdded(target) {
		var _gthis = this;
		target.get_data().addProvider(this._data);
		this._modelToWorldChangedSlot = target.get_data().getPropertyChanged("modelToWorldMatrix").connect(function(s,p,s1) {
			_gthis.localToWorldChangedHandler(s);
		});
		if(target.get_data().hasProperty("modelToWorldMatrix")) {
			this.updateMatrices(target.get_data().get("modelToWorldMatrix"));
		}
	}
	targetRemoved(target) {
		target.get_data().removeProvider(this._data);
	}
	localToWorldChangedHandler(data) {
		this.updateMatrices(data.get("modelToWorldMatrix"));
	}
	updateMatrices(modelToWorldMatrix) {
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 0.0;
		this1.w = 1.0;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = modelToWorldMatrix._00 * x + modelToWorldMatrix._10 * y + modelToWorldMatrix._20 * z + modelToWorldMatrix._30 * w;
		dest.y = modelToWorldMatrix._01 * x + modelToWorldMatrix._11 * y + modelToWorldMatrix._21 * z + modelToWorldMatrix._31 * w;
		dest.z = modelToWorldMatrix._02 * x + modelToWorldMatrix._12 * y + modelToWorldMatrix._22 * z + modelToWorldMatrix._32 * w;
		dest.w = modelToWorldMatrix._03 * x + modelToWorldMatrix._13 * y + modelToWorldMatrix._23 * z + modelToWorldMatrix._33 * w;
		var tmp = dest;
		var x1 = tmp.x;
		var y1 = tmp.y;
		var z1 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x1;
		this3.y = y1;
		this3.z = z1;
		this._position = this3;
		var _r0c0 = modelToWorldMatrix._00;
		var _r0c1 = modelToWorldMatrix._10;
		var _r0c2 = modelToWorldMatrix._20;
		var _r1c0 = modelToWorldMatrix._01;
		var _r1c1 = modelToWorldMatrix._11;
		var _r1c2 = modelToWorldMatrix._21;
		var _r2c0 = modelToWorldMatrix._02;
		var _r2c1 = modelToWorldMatrix._22;
		var _r2c2 = modelToWorldMatrix._22;
		var this4 = new glm_Mat3Base();
		this4._00 = _r0c0;
		this4._01 = _r1c0;
		this4._02 = _r2c0;
		this4._10 = _r0c1;
		this4._11 = _r1c1;
		this4._12 = _r2c1;
		this4._20 = _r0c2;
		this4._21 = _r1c2;
		this4._22 = _r2c2;
		var m = this4;
		var this5 = new glm_Vec3Base();
		this5.x = 0.0;
		this5.y = 0.0;
		this5.z = 1.0;
		var v1 = this5;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		var dest1 = this6;
		var x2 = v1.x;
		var y2 = v1.y;
		var z2 = v1.z;
		dest1.x = m._00 * x2 + m._10 * y2 + m._20 * z2;
		dest1.y = m._01 * x2 + m._11 * y2 + m._21 * z2;
		dest1.z = m._02 * x2 + m._12 * y2 + m._22 * z2;
		this._direction = dest1;
		var v2 = this._direction;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var dest2 = this7;
		var length = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest2.x = v2.x * mult;
		dest2.y = v2.y * mult;
		dest2.z = v2.z * mult;
		this._direction = dest2;
		var this8 = new glm_Mat4Base();
		this8._00 = 0;
		this8._01 = 0;
		this8._02 = 0;
		this8._03 = 0;
		this8._10 = 0;
		this8._11 = 0;
		this8._12 = 0;
		this8._13 = 0;
		this8._20 = 0;
		this8._21 = 0;
		this8._22 = 0;
		this8._23 = 0;
		this8._30 = 0;
		this8._31 = 0;
		this8._32 = 0;
		this8._33 = 0;
		var dest3 = this8;
		var a00 = modelToWorldMatrix._00;
		var a01 = modelToWorldMatrix._10;
		var a02 = modelToWorldMatrix._20;
		var a03 = modelToWorldMatrix._30;
		var a10 = modelToWorldMatrix._01;
		var a11 = modelToWorldMatrix._11;
		var a12 = modelToWorldMatrix._21;
		var a13 = modelToWorldMatrix._31;
		var a20 = modelToWorldMatrix._02;
		var a21 = modelToWorldMatrix._12;
		var a22 = modelToWorldMatrix._22;
		var a23 = modelToWorldMatrix._32;
		var a30 = modelToWorldMatrix._03;
		var a31 = modelToWorldMatrix._13;
		var a32 = modelToWorldMatrix._23;
		var a33 = modelToWorldMatrix._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest3._00 = t00 * idet;
		dest3._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest3._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest3._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest3._10 = t01 * idet;
		dest3._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest3._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest3._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest3._20 = t02 * idet;
		dest3._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest3._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest3._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest3._30 = t03 * idet;
		dest3._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest3._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest3._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		this._view = dest3;
		this._data.set("eyeDirection",this._direction).set("eyePosition",this._position).set("viewMatrix",this._view);
		this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
	}
	static create(aspectRatio,fov,zNear,zFar,postProjection) {
		if(zFar == null) {
			zFar = 1000.0;
		}
		if(zNear == null) {
			zNear = 0.1;
		}
		if(fov == null) {
			fov = .785;
		}
		var tmp;
		if(postProjection == null) {
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			dest._00 = 1;
			dest._10 = 0;
			dest._20 = 0;
			dest._30 = 0;
			dest._01 = 0;
			dest._11 = 1;
			dest._21 = 0;
			dest._31 = 0;
			dest._02 = 0;
			dest._12 = 0;
			dest._22 = 1;
			dest._32 = 0;
			dest._03 = 0;
			dest._13 = 0;
			dest._23 = 0;
			dest._33 = 1;
			tmp = dest;
		} else {
			tmp = postProjection;
		}
		return new minko_component_PerspectiveCamera(fov,aspectRatio,zNear,zFar,tmp);
	}
	static projectWorldPosition(worldPosition,viewportWidth,viewportHeight,viewMatrix,viewProjectionMatrix) {
		var width = viewportWidth;
		var height = viewportHeight;
		var x = worldPosition.x;
		var y = worldPosition.y;
		var z = worldPosition.z;
		var this1 = new glm_Vec4Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		this1.w = 1.0;
		var pos = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x1 = pos.x;
		var y1 = pos.y;
		var z1 = pos.z;
		var w = pos.w;
		dest.x = viewProjectionMatrix._00 * x1 + viewProjectionMatrix._10 * y1 + viewProjectionMatrix._20 * z1 + viewProjectionMatrix._30 * w;
		dest.y = viewProjectionMatrix._01 * x1 + viewProjectionMatrix._11 * y1 + viewProjectionMatrix._21 * z1 + viewProjectionMatrix._31 * w;
		dest.z = viewProjectionMatrix._02 * x1 + viewProjectionMatrix._12 * y1 + viewProjectionMatrix._22 * z1 + viewProjectionMatrix._32 * w;
		dest.w = viewProjectionMatrix._03 * x1 + viewProjectionMatrix._13 * y1 + viewProjectionMatrix._23 * z1 + viewProjectionMatrix._33 * w;
		var vector = dest;
		var s = 1 / vector.w;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 0;
		var dest1 = this3;
		dest1.x = vector.x * s;
		dest1.y = vector.y * s;
		dest1.z = vector.z * s;
		dest1.w = vector.w * s;
		vector = dest1;
		var this4 = new glm_Vec4Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		this4.w = 0;
		var dest2 = this4;
		var x2 = pos.x;
		var y2 = pos.y;
		var z2 = pos.z;
		var w1 = pos.w;
		dest2.x = viewMatrix._00 * x2 + viewMatrix._10 * y2 + viewMatrix._20 * z2 + viewMatrix._30 * w1;
		dest2.y = viewMatrix._01 * x2 + viewMatrix._11 * y2 + viewMatrix._21 * z2 + viewMatrix._31 * w1;
		dest2.z = viewMatrix._02 * x2 + viewMatrix._12 * y2 + viewMatrix._22 * z2 + viewMatrix._32 * w1;
		dest2.w = viewMatrix._03 * x2 + viewMatrix._13 * y2 + viewMatrix._23 * z2 + viewMatrix._33 * w1;
		pos = dest2;
		var x3 = width * (vector.x + 1.0) * .5;
		var y3 = height * (1.0 - (vector.y + 1.0) * .5);
		var z3 = -pos.z;
		var this5 = new glm_Vec3Base();
		this5.x = x3;
		this5.y = y3;
		this5.z = z3;
		return this5;
	}
}
$hx_exports["minko"]["component"]["PerspectiveCamera"] = minko_component_PerspectiveCamera;
minko_component_PerspectiveCamera.__name__ = true;
minko_component_PerspectiveCamera.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_PerspectiveCamera.prototype, {
	__class__: minko_component_PerspectiveCamera
});
class minko_component_Picking extends minko_component_AbstractComponent {
	constructor() {
		super();
		this._sceneManager = null;
		this._context = null;
		this._mouse = null;
		this._touch = null;
		this._camera = null;
		this._pickingId = 0;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this._pickingProjection = dest;
		this._pickingProvider = minko_data_Provider.create();
		this._pickingEffect = null;
		this._pickingDepthEffect = null;
		this._mouseMove = new minko_signal_Signal();
		this._mouseLeftClick = new minko_signal_Signal();
		this._mouseRightClick = new minko_signal_Signal();
		this._mouseLeftDown = new minko_signal_Signal();
		this._mouseRightDown = new minko_signal_Signal();
		this._mouseLeftUp = new minko_signal_Signal();
		this._mouseRightUp = new minko_signal_Signal();
		this._mouseOut = new minko_signal_Signal();
		this._mouseOver = new minko_signal_Signal();
		this._mouseWheel = new minko_signal_Signal();
		this._touchDown = new minko_signal_Signal();
		this._touchMove = new minko_signal_Signal();
		this._touchUp = new minko_signal_Signal();
		this._tap = new minko_signal_Signal();
		this._doubleTap = new minko_signal_Signal();
		this._longHold = new minko_signal_Signal();
		this._lastDepthValue = 0.0;
		this._lastMergingMask = 0;
		this._addPickingLayout = true;
		this._emulateMouseWithTouch = true;
		this._frameBeginSlot = null;
		this._enabled = false;
		this._renderDepth = true;
		this._debug = false;
		this._lastColor = new haxe_io_Bytes(new ArrayBuffer(4));
		this._lastDepth = new haxe_io_Bytes(new ArrayBuffer(4));
		this._surfaceToPickingId = new haxe_ds_ObjectMap();
		this._pickingIdToSurface = new haxe_ds_IntMap();
	}
	get_mouseOver() {
		return this._mouseOver;
	}
	get_mouseRightDown() {
		return this._mouseRightDown;
	}
	get_mouseRightUp() {
		return this._mouseRightUp;
	}
	get_mouseDown() {
		return this._mouseLeftDown;
	}
	get_mouseUp() {
		return this._mouseLeftUp;
	}
	get_mouseRightClick() {
		return this._mouseRightClick;
	}
	get_mouseClick() {
		return this._mouseLeftClick;
	}
	get_mouseOut() {
		return this._mouseOut;
	}
	get_mouseMove() {
		return this._mouseMove;
	}
	get_mouseWheel() {
		return this._mouseWheel;
	}
	get_touchDown() {
		return this._touchDown;
	}
	get_touchMove() {
		return this._touchMove;
	}
	get_touchUp() {
		return this._touchUp;
	}
	get_touchTap() {
		return this._tap;
	}
	get_touchDoubleTap() {
		return this._doubleTap;
	}
	get_touchLongHold() {
		return this._longHold;
	}
	get_pickedSurface() {
		return this._lastPickedSurface;
	}
	get_renderDepth() {
		return this._renderDepth;
	}
	set_renderDepth(value) {
		this._renderDepth = value;
		return value;
	}
	get_pickedDepth() {
		return this._lastDepthValue;
	}
	get_pickedMergingMask() {
		return this._lastMergingMask;
	}
	set_debug(v) {
		this._debug = v;
		return v;
	}
	targetRemoved(target) {
		this.unbindSignals();
		if(target.existsComponent(this._renderer)) {
			target.removeComponent(this._renderer);
		}
		if(target.existsComponent(this._depthRenderer)) {
			target.removeComponent(this._depthRenderer);
		}
		this._renderer = null;
		this._depthRenderer = null;
		this._sceneManager = null;
		this._enabled = false;
		this.removedHandler(target.get_root(),target,target.get_parent());
	}
	initialize(camera,addPickingLayout,emulateMouseWithTouch,pickingEffect,pickingDepthEffect) {
		this._camera = camera;
		this._addPickingLayout = addPickingLayout;
		this._emulateMouseWithTouch = emulateMouseWithTouch;
		this._pickingEffect = pickingEffect;
		this._pickingDepthEffect = pickingDepthEffect;
		this._pickingProvider.set("pickingProjection",this._pickingProjection);
		var tmp = this._pickingProvider;
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		tmp.set("pickingOrigin",this1);
	}
	bindSignals() {
		this._mouseMoveSlot = this._mouse.get_move().connect($bind(this,this.mouseMoveHandler));
		this._mouseLeftDownSlot = this._mouse.get_leftButtonDown().connect($bind(this,this.mouseLeftDownHandler));
		this._mouseRightDownSlot = this._mouse.get_rightButtonDown().connect($bind(this,this.mouseRightDownHandler));
		this._mouseLeftClickSlot = this._mouse.get_leftButtonClick().connect($bind(this,this.mouseLeftClickHandler));
		this._mouseRightClickSlot = this._mouse.get_rightButtonClick().connect($bind(this,this.mouseRightClickHandler));
		this._mouseLeftUpSlot = this._mouse.get_leftButtonUp().connect($bind(this,this.mouseLeftUpHandler));
		this._mouseRightUpSlot = this._mouse.get_rightButtonUp().connect($bind(this,this.mouseRightUpHandler));
		this._mouseWheelSlot = this._mouse.get_wheel().connect($bind(this,this.mouseWheelHandler));
		this._touchDownSlot = this._touch.get_touchDown().connect($bind(this,this.touchDownHandler));
		this._touchUpSlot = this._touch.get_touchUp().connect($bind(this,this.touchUpHandler));
		this._touchMoveSlot = this._touch.get_touchMove().connect($bind(this,this.touchMoveHandler));
		this._touchTapSlot = this._touch.get_tap().connect($bind(this,this.touchTapHandler));
		this._touchDoubleTapSlot = this._touch.get_doubleTap().connect($bind(this,this.touchDoubleTapHandler));
		this._touchLongHoldSlot = this._touch.get_longHold().connect($bind(this,this.touchLongHoldHandler));
		this._executeMoveHandler = false;
		this._executeRightClickHandler = false;
		this._executeLeftClickHandler = false;
		this._executeRightDownHandler = false;
		this._executeLeftDownHandler = false;
		this._executeRightUpHandler = false;
		this._executeLeftUpHandler = false;
		this._executeTouchDownHandler = false;
		this._executeTouchUpHandler = false;
		this._executeTouchMoveHandler = false;
		this._executeTapHandler = false;
		this._executeDoubleTapHandler = false;
		this._executeLongHoldHandler = false;
	}
	unbindSignals() {
		this._mouseMoveSlot = null;
		this._mouseLeftDownSlot = null;
		this._mouseRightDownSlot = null;
		this._mouseLeftClickSlot = null;
		this._mouseRightClickSlot = null;
		this._mouseLeftUpSlot = null;
		this._mouseRightUpSlot = null;
		this._touchDownSlot = null;
		this._touchUpSlot = null;
		this._touchMoveSlot = null;
		this._touchTapSlot = null;
		this._touchDoubleTapSlot = null;
		this._touchLongHoldSlot = null;
		this._frameBeginSlot = null;
		this._renderingBeginSlot = null;
		this._renderingEndSlot = null;
		this._depthRenderingBeginSlot = null;
		this._depthRenderingEndSlot = null;
		this._componentAddedSlot = null;
		this._componentRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
	}
	targetAdded(target) {
		this._sceneManager = target.get_root().getComponent(minko_component_SceneManager);
		var canvas = this._sceneManager.get_canvas();
		this._mouse = canvas.get_mouse();
		this._touch = canvas.get_touch();
		this._context = canvas.get_context();
		this.bindSignals();
		if(this._pickingEffect == null) {
			this._pickingEffect = this._sceneManager.get_assets().effect("effect/Picking.effect");
		}
		var priority = this._debug ? -1000.0 : 1000.0;
		this._renderer = minko_component_Renderer.create(-65281,null,this._pickingEffect,"default",priority,"Picking Renderer");
		if(!this._debug) {
			this._renderer.scissorBox(0,0,1,1);
		}
		this._renderer.set_layoutMask(64);
		if(!this._debug) {
			this._renderer.set_enabled(false);
		}
		if(this._pickingDepthEffect == null) {
			this._pickingDepthEffect = this._sceneManager.get_assets().effect("effect/PickingDepth.effect");
		}
		this._depthRenderer = minko_component_Renderer.create(-65281,null,this._pickingDepthEffect,"default",999.0,"Depth Picking Renderer");
		this._depthRenderer.scissorBox(0,0,1,1);
		this._depthRenderer.set_layoutMask(512);
		this._depthRenderer.set_enabled(false);
		this.updateDescendants(target);
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.removedHandler));
		if(target.get_parent() != null || target.hasComponent(minko_component_SceneManager)) {
			this.addedHandler(target,target,target.get_parent());
		}
		target.addComponent(this._renderer);
		target.addComponent(this._depthRenderer);
		var perspectiveCamera = this._camera.getComponent(minko_component_PerspectiveCamera);
		target.get_data().addProvider(this._pickingProvider);
		target.get_data().addProvider(perspectiveCamera.get_data());
		this.addSurfacesForNode(target);
	}
	addedHandler(target,child,parent) {
		this.updateDescendants(target);
		if(Lambda.has(this._descendants,child) == false) {
			return;
		}
		if(child == target && this._renderingBeginSlot == null) {
			this._renderingBeginSlot = this._renderer.get_renderingBegin().connect($bind(this,this.renderingBegin));
			this._renderingEndSlot = this._renderer.get_beforePresent().connect($bind(this,this.renderingEnd));
			this._depthRenderingBeginSlot = this._depthRenderer.get_renderingBegin().connect($bind(this,this.depthRenderingBegin));
			this._depthRenderingEndSlot = this._depthRenderer.get_beforePresent().connect($bind(this,this.depthRenderingEnd));
			this._componentAddedSlot = child.get_componentAdded().connect($bind(this,this.componentAddedHandler));
			this._componentRemovedSlot = child.get_componentRemoved().connect($bind(this,this.componentRemovedHandler));
		}
		if(Lambda.has(this._descendants,child)) {
			this.addSurfacesForNode(child);
		}
	}
	componentAddedHandler(target,node,ctrl) {
		if(Lambda.has(this._descendants,node)) {
			return;
		}
		if(((ctrl) instanceof minko_component_Surface)) {
			var surfaceCtrl = js_Boot.__cast(ctrl , minko_component_Surface);
			this.addSurface(surfaceCtrl);
		}
	}
	componentRemovedHandler(target,node,ctrl) {
		if(Lambda.has(this._descendants,node) == false) {
			return;
		}
		if(((ctrl) instanceof minko_component_Surface)) {
			var surfaceCtrl = js_Boot.__cast(ctrl , minko_component_Surface);
			this.removeSurface(surfaceCtrl,node);
		}
		if(!node.hasComponent(minko_component_Surface) && this._addPickingLayout) {
			node.set_layout(node.get_layout() & ~64);
		}
	}
	addSurface(surface) {
		if(this._surfaceToPickingId.h.__keys__[surface.__id__] != null == false) {
			this._pickingId += 2;
			this._surfaceToPickingId.set(surface,this._pickingId);
			this._pickingIdToSurface.h[this._pickingId] = surface;
			var tmp = surface.get_data();
			var x = (this._pickingId >> 16 & 255) / 255.0;
			var y = (this._pickingId >> 8 & 255) / 255.0;
			var z = (this._pickingId & 255) / 255.0;
			var this1 = new glm_Vec4Base();
			this1.x = x;
			this1.y = y;
			this1.z = z;
			this1.w = 1;
			tmp.set("pickingColor",this1);
			if(this._addPickingLayout) {
				surface.get_target().set_layout(this.get_target().get_layout() | 64);
			}
			surface.set_layoutMask(surface.get_layoutMask() & ~512);
		}
	}
	removeSurface(surface,node) {
		if(this._surfaceToPickingId.h.__keys__[surface.__id__] != null == false) {
			return;
		}
		surface.get_data().unset("pickingColor");
		var surfacePickingId = this._surfaceToPickingId.h[surface.__id__];
		this._surfaceToPickingId.remove(surface);
		this._pickingIdToSurface.remove(surfacePickingId);
	}
	removedHandler(target,child,parent) {
		if(Lambda.has(this._descendants,child) == false) {
			return;
		}
		this.removeSurfacesForNode(child);
		this.updateDescendants(target);
	}
	addSurfacesForNode(node) {
		var surfaces = minko_scene_NodeSet.createbyNode(node).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaces.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			var surfaces1 = surfaceNode.getComponents(minko_component_Surface);
			var _g2 = 0;
			while(_g2 < surfaces1.length) {
				var surface = surfaces1[_g2];
				++_g2;
				this.addSurface(surface);
			}
		}
	}
	removeSurfacesForNode(node) {
		var surfaces = minko_scene_NodeSet.createbyNode(node).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaces.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			surfaceNode.set_layout(surfaceNode.get_layout() & ~64);
			var surfaces1 = surfaceNode.getComponents(minko_component_Surface);
			var _g2 = 0;
			while(_g2 < surfaces1.length) {
				var surface = surfaces1[_g2];
				++_g2;
				this.removeSurface(surface,surfaceNode);
			}
		}
	}
	updateDescendants(target) {
		var nodeSet = minko_scene_NodeSet.createbyNode(target).descendants(true);
		this._descendants = nodeSet.get_nodes();
	}
	set_enabled(v) {
		if(v && this._frameBeginSlot == null) {
			v = true;
			this._frameBeginSlot = this._sceneManager.get_frameBegin().connect($bind(this,this.frameBeginHandler),1000.0);
		} else if(!v && this._frameBeginSlot != null) {
			this._frameBeginSlot = null;
		}
		this._enabled = v;
		return v;
	}
	frameBeginHandler(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
		if(this._debug) {
			return;
		}
		this._renderer.set_enabled(true);
		this._renderer.render(this._sceneManager.get_canvas().get_context());
		this._renderer.set_enabled(false);
	}
	renderingBegin(renderer) {
		if(!this._enabled) {
			return;
		}
		this.updatePickingProjection();
	}
	doRenderDepth(renderer,pickedSurface) {
		if(!this._enabled) {
			return;
		}
		var pickedSurfaceTarget = pickedSurface.get_target();
		pickedSurfaceTarget.set_layout(pickedSurfaceTarget.get_layout() | 512);
		pickedSurface.set_layoutMask(pickedSurface.get_layoutMask() | 512);
		renderer.set_enabled(true);
		renderer.render(this._sceneManager.get_canvas().get_context());
		renderer.set_enabled(false);
		pickedSurfaceTarget.set_layout(pickedSurfaceTarget.get_layout() & ~512);
		pickedSurface.set_layoutMask(pickedSurface.get_layoutMask() & ~512);
	}
	renderingEnd(renderer) {
		if(!this._enabled) {
			return;
		}
		this._context.readRectPixels(0,0,1,1,this._lastColor);
		var pickedSurfaceId = (this._lastColor.b[0] << 16) + (this._lastColor.b[1] << 8) + this._lastColor.b[2];
		var surfaceIt = this._pickingIdToSurface.h.hasOwnProperty(pickedSurfaceId);
		if(surfaceIt != false) {
			var pickedSurface = this._pickingIdToSurface.h[pickedSurfaceId];
			if(this._renderDepth) {
				this.doRenderDepth(this._depthRenderer,pickedSurface);
			} else {
				this.dispatchEvents(pickedSurface,this._lastDepthValue);
			}
		} else {
			this.dispatchEvents(null,this._lastDepthValue);
		}
	}
	depthRenderingBegin(renderer) {
		if(!this._enabled) {
			return;
		}
		this.updatePickingOrigin();
	}
	depthRenderingEnd(renderer) {
		if(!this._enabled) {
			return;
		}
		var pickedSurfaceId = (this._lastColor.b[0] << 16) + (this._lastColor.b[1] << 8) + this._lastColor.b[2];
		var surfaceIt = this._pickingIdToSurface.h.hasOwnProperty(pickedSurfaceId);
		if(surfaceIt != false) {
			var pickedSurface = this._pickingIdToSurface.h[pickedSurfaceId];
			this._context.readRectPixels(0,0,1,1,this._lastDepth);
			var zFar = this._camera.get_data().get("zFar");
			var x = this._lastDepth.b[0];
			var y = this._lastDepth.b[1];
			var z = this._lastDepth.b[2];
			var this1 = new glm_Vec3Base();
			this1.x = x;
			this1.y = y;
			this1.z = z;
			var a = this1;
			var s = 0.00392156862745098;
			var this2 = new glm_Vec3Base();
			this2.x = 0;
			this2.y = 0;
			this2.z = 0;
			var dest = this2;
			dest.x = a.x * s;
			dest.y = a.y * s;
			dest.z = a.z * s;
			var depth = dest;
			var this3 = new glm_Vec3Base();
			this3.x = 1.0;
			this3.y = 0.00392156862745098;
			this3.z = 1.5378700499807768e-005;
			var b = this3;
			var normalizedDepth = (depth.x * b.x + depth.y * b.y + depth.z * b.z) * zFar;
			this._lastDepthValue = normalizedDepth;
			this._lastMergingMask = this._lastDepth.b[3];
			this.dispatchEvents(pickedSurface,this._lastDepthValue);
		}
	}
	updatePickingProjection() {
		var mouseX = this._mouse.get_x();
		var mouseY = this._mouse.get_y();
		var perspectiveCamera = this._camera.getComponent(minko_component_PerspectiveCamera);
		var fovy = perspectiveCamera.get_fieldOfView();
		var aspectRatio = perspectiveCamera.get_aspectRatio();
		var near = perspectiveCamera.get_zNear();
		var far = perspectiveCamera.get_zFar();
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var f = 1 / Math.tan(fovy / 2);
		var nf = 1 / (near - far);
		dest._00 = f / aspectRatio;
		dest._01 = 0;
		dest._02 = 0;
		dest._03 = 0;
		dest._10 = 0;
		dest._11 = f;
		dest._12 = 0;
		dest._13 = 0;
		dest._20 = 0;
		dest._21 = 0;
		dest._22 = (far + near) * nf;
		dest._23 = -1;
		dest._30 = 0;
		dest._31 = 0;
		dest._32 = 2 * far * near * nf;
		dest._33 = 0;
		var projection = dest;
		projection._20 = mouseX / this._context.get_viewportWidth() * 2.0;
		projection._21 = (this._context.get_viewportHeight() - mouseY) / this._context.get_viewportHeight() * 2.0;
		this._pickingProvider.set("pickingProjection",projection);
	}
	updatePickingOrigin() {
		var perspectiveCamera = this._camera.getComponent(minko_component_PerspectiveCamera);
		var normalizedMouseX = this._mouse.get_normalizedX();
		var normalizedMouseY = this._mouse.get_normalizedY();
		var pickingRay = perspectiveCamera.unproject(normalizedMouseX,normalizedMouseY);
		this._pickingProvider.set("pickingOrigin",pickingRay.get_origin());
	}
	dispatchEvents(pickedSurface,depth) {
		if(this._lastPickedSurface != pickedSurface) {
			if(this._lastPickedSurface != null && this._mouseOut.get_numCallbacks() > 0) {
				this._mouseOut.execute(this._lastPickedSurface.get_target());
			}
			this._lastPickedSurface = pickedSurface;
			if(this._lastPickedSurface != null && this._mouseOver.get_numCallbacks() > 0) {
				this._mouseOver.execute(this._lastPickedSurface.get_target());
			}
		}
		if(this._executeMoveHandler && this._lastPickedSurface != null) {
			this._mouseMove.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeRightDownHandler && this._lastPickedSurface != null) {
			this._mouseRightDown.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeLeftDownHandler && this._lastPickedSurface != null) {
			this._mouseLeftDown.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeRightClickHandler && this._lastPickedSurface != null) {
			this._mouseRightClick.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeLeftClickHandler && this._lastPickedSurface != null) {
			this._mouseLeftClick.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeRightUpHandler && this._lastPickedSurface != null) {
			this._mouseRightUp.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeLeftUpHandler && this._lastPickedSurface != null) {
			this._mouseLeftUp.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeMouseWheel && this._lastPickedSurface != null) {
			this._mouseWheel.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeTouchDownHandler && this._lastPickedSurface != null) {
			this._touchDown.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeTouchUpHandler && this._lastPickedSurface != null) {
			this._touchUp.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeTouchMoveHandler && this._lastPickedSurface != null) {
			this._touchMove.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeTapHandler && this._lastPickedSurface != null) {
			this._tap.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeDoubleTapHandler && this._lastPickedSurface != null) {
			this._doubleTap.execute(this._lastPickedSurface.get_target());
		}
		if(this._executeLongHoldHandler && this._lastPickedSurface != null) {
			this._longHold.execute(this._lastPickedSurface.get_target());
		}
		if(!(this._mouseOver.get_numCallbacks() > 0 || this._mouseOut.get_numCallbacks() > 0)) {
			this.set_enabled(false);
		}
		this._executeMoveHandler = false;
		this._executeRightDownHandler = false;
		this._executeLeftDownHandler = false;
		this._executeRightClickHandler = false;
		this._executeLeftClickHandler = false;
		this._executeRightUpHandler = false;
		this._executeLeftUpHandler = false;
	}
	mouseMoveHandler(mouse,dx,dy) {
		if(this._mouseOver.get_numCallbacks() > 0 || this._mouseOut.get_numCallbacks() > 0) {
			this._executeMoveHandler = true;
			this.set_enabled(true);
		}
	}
	mouseRightUpHandler(mouse) {
		if(this._mouseRightUp.get_numCallbacks() > 0) {
			this._executeRightUpHandler = true;
			this.set_enabled(true);
		}
	}
	mouseLeftUpHandler(mouse) {
		if(this._mouseLeftUp.get_numCallbacks() > 0) {
			this._executeLeftUpHandler = true;
			this.set_enabled(true);
		}
	}
	mouseRightClickHandler(mouse) {
		if(this._mouseRightClick.get_numCallbacks() > 0) {
			this._executeRightClickHandler = true;
			this.set_enabled(true);
		}
	}
	mouseLeftClickHandler(mouse) {
		if(this._mouseLeftClick.get_numCallbacks() > 0) {
			this._executeLeftClickHandler = true;
			this.set_enabled(true);
		}
	}
	mouseRightDownHandler(mouse) {
		if(this._mouseRightDown.get_numCallbacks() > 0) {
			this._executeRightDownHandler = true;
			this.set_enabled(true);
		}
	}
	mouseLeftDownHandler(mouse) {
		if(this._mouseLeftDown.get_numCallbacks() > 0) {
			this._executeLeftDownHandler = true;
			this.set_enabled(true);
		}
	}
	mouseWheelHandler(mouse,x,y) {
		if(this._mouseWheel.get_numCallbacks() > 0) {
			this._executeMouseWheel = true;
			this.set_enabled(true);
		}
	}
	touchDownHandler(touch,identifier,x,y) {
		if(this._touchDown.get_numCallbacks() > 0) {
			this._executeTouchDownHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._touch.get_numTouches() == 1 && this._mouseLeftDown.get_numCallbacks() > 0) {
			this._executeLeftDownHandler = true;
			this.set_enabled(true);
		}
	}
	touchUpHandler(touch,identifier,x,y) {
		if(this._touchUp.get_numCallbacks() > 0) {
			this._executeTouchUpHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._touch.get_numTouches() == 1 && this._mouseLeftUp.get_numCallbacks() > 0) {
			this._executeLeftUpHandler = true;
			this.set_enabled(true);
		}
	}
	touchMoveHandler(touch,identifier,x,y) {
		if(this._touchMove.get_numCallbacks() > 0) {
			this._executeTouchMoveHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._touch.get_numTouches() == 1 && this._mouseMove.get_numCallbacks() > 0) {
			this._executeMoveHandler = true;
			this.set_enabled(true);
		}
	}
	touchTapHandler(touch,x,y) {
		if(this._tap.get_numCallbacks() > 0) {
			this._executeTapHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._mouseLeftClick.get_numCallbacks() > 0) {
			this._executeLeftClickHandler = true;
			this.set_enabled(true);
		}
	}
	touchDoubleTapHandler(touch,x,y) {
		if(this._doubleTap.get_numCallbacks() > 0) {
			this._executeDoubleTapHandler = true;
			this.set_enabled(true);
		}
	}
	touchLongHoldHandler(touch,x,y) {
		if(this._doubleTap.get_numCallbacks() > 0) {
			this._executeDoubleTapHandler = true;
			this.set_enabled(true);
		}
		if(this._emulateMouseWithTouch && this._mouseRightClick.get_numCallbacks() > 0) {
			this._executeRightClickHandler = true;
			this.set_enabled(true);
		}
	}
	static create(camera,addPickingLayoutToNodes,emulateMouseWithTouch,pickingEffect,pickingDepthEffect) {
		if(emulateMouseWithTouch == null) {
			emulateMouseWithTouch = true;
		}
		if(addPickingLayoutToNodes == null) {
			addPickingLayoutToNodes = true;
		}
		var picking = new minko_component_Picking();
		picking.initialize(camera,addPickingLayoutToNodes,emulateMouseWithTouch,pickingEffect,pickingDepthEffect);
		return picking;
	}
	static unpack(depth) {
		var this1 = new glm_Vec3Base();
		this1.x = 1.0;
		this1.y = 0.00392156862745098;
		this1.z = 1.5378700499807768e-005;
		var b = this1;
		return depth.x * b.x + depth.y * b.y + depth.z * b.z;
	}
}
$hx_exports["minko"]["component"]["Picking"] = minko_component_Picking;
minko_component_Picking.__name__ = true;
minko_component_Picking.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_Picking.prototype, {
	__class__: minko_component_Picking
});
class minko_component_PointLight extends minko_component_AbstractDiscreteLight {
	constructor(diffuse,specular,attenuationConstant,attenuationLinear,attenuationQuadratic) {
		super("pointLight",diffuse,specular);
		var this1 = new glm_Vec3Base();
		this1.x = attenuationConstant;
		this1.y = attenuationLinear;
		this1.z = attenuationQuadratic;
		this._attenuationCoeffs = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this._worldPosition = this2;
		this.get_data().set("attenuationCoeffs",this._attenuationCoeffs);
		var this3 = new glm_Mat4Base();
		this3._00 = 0;
		this3._01 = 0;
		this3._02 = 0;
		this3._03 = 0;
		this3._10 = 0;
		this3._11 = 0;
		this3._12 = 0;
		this3._13 = 0;
		this3._20 = 0;
		this3._21 = 0;
		this3._22 = 0;
		this3._23 = 0;
		this3._30 = 0;
		this3._31 = 0;
		this3._32 = 0;
		this3._33 = 0;
		var dest = this3;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
	}
	clone(option) {
		var light = minko_component_PointLight.create().copyFrom(this,option);
		return light;
	}
	get_attenuationEnabled() {
		return !(this._attenuationCoeffs.x < 0.0 || this._attenuationCoeffs.y < 0.0 || this._attenuationCoeffs.z < 0.0);
	}
	get_attenuationCoefficients() {
		return this._attenuationCoeffs;
	}
	setAttenuationCoefficients(constant,linear,quadratic) {
		var this1 = new glm_Vec3Base();
		this1.x = constant;
		this1.y = linear;
		this1.z = quadratic;
		return this.set_attenuationCoefficients(this1);
	}
	set_attenuationCoefficients(value) {
		this.get_data().set("attenuationCoeffs",this._attenuationCoeffs = value);
		return value;
	}
	get_position() {
		return this.get_data().get("position");
	}
	updateModelToWorldMatrix(modelToWorld) {
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 0.0;
		this1.w = 1.0;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = modelToWorld._00 * x + modelToWorld._10 * y + modelToWorld._20 * z + modelToWorld._30 * w;
		dest.y = modelToWorld._01 * x + modelToWorld._11 * y + modelToWorld._21 * z + modelToWorld._31 * w;
		dest.z = modelToWorld._02 * x + modelToWorld._12 * y + modelToWorld._22 * z + modelToWorld._32 * w;
		dest.w = modelToWorld._03 * x + modelToWorld._13 * y + modelToWorld._23 * z + modelToWorld._33 * w;
		var tmp = dest;
		var tmp1 = this.get_data();
		var x1 = tmp.x;
		var y1 = tmp.y;
		var z1 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x1;
		this3.y = y1;
		this3.z = z1;
		tmp1.set("position",this3);
	}
	copyFrom(pointLight,option) {
		this.get_data().set("diffuse",pointLight.get_diffuse()).set("specular",pointLight.get_specular());
		this._attenuationCoeffs = pointLight.get_attenuationCoefficients();
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
		return this;
	}
	static create(diffuse,specular,attenuationConstant,attenuationLinear,attenuationQuadratic) {
		if(attenuationQuadratic == null) {
			attenuationQuadratic = -1.0;
		}
		if(attenuationLinear == null) {
			attenuationLinear = -1.0;
		}
		if(attenuationConstant == null) {
			attenuationConstant = -1.0;
		}
		if(specular == null) {
			specular = 1.0;
		}
		if(diffuse == null) {
			diffuse = 1.0;
		}
		return new minko_component_PointLight(diffuse,specular,attenuationConstant,attenuationLinear,attenuationQuadratic);
	}
}
$hx_exports["minko"]["component"]["PointLight"] = minko_component_PointLight;
minko_component_PointLight.__name__ = true;
minko_component_PointLight.__super__ = minko_component_AbstractDiscreteLight;
Object.assign(minko_component_PointLight.prototype, {
	__class__: minko_component_PointLight
});
class minko_component_Renderer extends minko_component_AbstractComponent {
	constructor(renderTarget,effect,effectTechnique,priority) {
		minko_Has_$uuid._hx_skip_constructor = true;
		super();
		minko_Has_$uuid._hx_skip_constructor = false;
		this._hx_constructor(renderTarget,effect,effectTechnique,priority);
	}
	_hx_constructor(renderTarget,effect,effectTechnique,priority) {
		this.enable_uuid();
		super._hx_constructor(1);
		this._backgroundColor = 0;
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = -1;
		this1.w = -1;
		this._viewportBox = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = -1;
		this2.w = -1;
		this._scissorBox = this2;
		this._enabled = true;
		this._mustZSort = true;
		this._renderingBegin = new minko_signal_Signal();
		this._renderingEnd = new minko_signal_Signal();
		this._beforePresent = new minko_signal_Signal();
		this._effect = effect;
		this._effectTechnique = effectTechnique;
		this._clearBeforeRender = true;
		this._priority = priority;
		this._renderTarget = renderTarget;
		this._postProcessingGeom = null;
		this._filterChanged = new minko_signal_Signal4();
		this._numDrawCalls = 0;
		this._numTriangles = 0;
		this._drawCallPool = new minko_render_DrawCallPool();
		this._name = "";
		this._sceneManager = null;
		this._variables = [];
		this._toCollect = [];
		this._drawCallToZSortNeededSlot = new haxe_ds_ObjectMap();
		this._surfaceChangedSlots = new haxe_ds_ObjectMap();
		this._surfaceToDrawCallIterator = new haxe_ds_ObjectMap();
		this._filterChanged = new minko_signal_Signal4();
		this._nodeLayoutChangedSlot = new haxe_ds_ObjectMap();
		this._surfaceLayoutMaskChangedSlot = new haxe_ds_ObjectMap();
	}
	get_effect() {
		return this._effect;
	}
	set_effect(v) {
		this.changeEffectOrTechnique(v,this._effectTechnique);
		return v;
	}
	setEffect(effect,technique) {
		this.changeEffectOrTechnique(effect,technique);
	}
	get_numDrawCalls() {
		return this._numDrawCalls;
	}
	get_numTriangles() {
		return this._numTriangles;
	}
	get_backgroundColor() {
		return this._backgroundColor;
	}
	set_backgroundColor(value) {
		this._backgroundColor = value;
		return value;
	}
	set_name(value) {
		this._name = value;
		return value;
	}
	get_name() {
		return this._name;
	}
	get_priority() {
		return this._priority;
	}
	set_priority(value) {
		this._priority = value;
		return value;
	}
	set_viewport(value) {
		this._viewportBox = value;
		return value;
	}
	scissorBox(x,y,w,h) {
		this._scissorBox.x = x;
		this._scissorBox.y = y;
		this._scissorBox.z = w;
		this._scissorBox.w = h;
	}
	get_renderTarget() {
		return this._renderTarget;
	}
	set_renderTarget(target) {
		this._renderTarget = target;
		return target;
	}
	get_clearBeforeRender() {
		return this._clearBeforeRender;
	}
	set_clearBeforeRender(value) {
		this._clearBeforeRender = value;
		return value;
	}
	get_effectVariables() {
		return this._variables;
	}
	get_effectTechnique() {
		return this._effectTechnique;
	}
	set_effectTechnique(value) {
		this.changeEffectOrTechnique(this._effect,value);
		return value;
	}
	get_enabled() {
		return this._enabled;
	}
	set_enabled(value) {
		this._enabled = value;
		return value;
	}
	get_drawCallPool() {
		return this._drawCallPool;
	}
	get_renderingBegin() {
		return this._renderingBegin;
	}
	get_beforePresent() {
		return this._beforePresent;
	}
	get_renderingEnd() {
		return this._renderingEnd;
	}
	reset() {
		this._toCollect = [];
		var s = this._surfaceToDrawCallIterator.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			this.removeSurface(s1);
		}
		this._surfaceToDrawCallIterator = new haxe_ds_ObjectMap();
		this._drawCallPool.clear();
	}
	initializePostProcessingGeometry() {
		var context = this._sceneManager.get_assets().get_context();
		var vb = minko_render_VertexBuffer.createbyData(context,[-1.0,1.0,0.0,1.0,-1.0,-1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,0.0,0.0,1.0,-1.0,1.0,0.0]);
		vb.addAttribute("position",2);
		vb.addAttribute("uv",2,2);
		var p = minko_data_Provider.create();
		p.set("postProcessingPosition",vb.attribute("position"));
		p.set("postProcessingUV",vb.attribute("uv"));
		this._postProcessingGeom = minko_geometry_Geometry.createbyName();
		this._postProcessingGeom.addVertexBuffer(vb);
		this.get_target().get_data().addProvider(p);
	}
	targetAdded(target) {
		if(this._effect != null) {
			target.get_data().addProviderbyName(this._effect.get_data(),"effect");
		}
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.removedHandler));
		this.addedHandler(target.get_root(),target,target.get_parent());
	}
	addedHandler(node,target,parent) {
		this.findSceneManager();
		this.removeRootSlot();
		this._rootDescendantAddedSlot = target.get_root().get_added().connect($bind(this,this.rootDescendantAddedHandler),Infinity);
		this._rootDescendantRemovedSlot = target.get_root().get_removed().connect($bind(this,this.rootDescendantRemovedHandler),Infinity);
		this._componentAddedSlot = target.get_root().get_componentAdded().connect($bind(this,this.componentAddedHandler),Infinity);
		this._componentRemovedSlot = target.get_root().get_componentRemoved().connect($bind(this,this.componentRemovedHandler),Infinity);
		this.reset();
		this.rootDescendantAddedHandler(null,target.get_root(),null);
	}
	removeRootSlot() {
		if(this._rootDescendantAddedSlot != null) {
			this._rootDescendantAddedSlot.dispose();
		}
		if(this._rootDescendantRemovedSlot != null) {
			this._rootDescendantRemovedSlot.dispose();
		}
		if(this._componentAddedSlot != null) {
			this._componentAddedSlot.dispose();
		}
		if(this._componentRemovedSlot != null) {
			this._componentRemovedSlot.dispose();
		}
		this._rootDescendantAddedSlot = null;
		this._rootDescendantRemovedSlot = null;
		this._componentAddedSlot = null;
		this._componentRemovedSlot = null;
	}
	targetRemoved(target) {
		this.removeRootSlot();
		if(this._addedSlot != null) {
			this._addedSlot.dispose();
		}
		if(this._removedSlot != null) {
			this._removedSlot.dispose();
		}
		if(this._renderingBeginSlot != null) {
			this._renderingBeginSlot.dispose();
		}
		this._addedSlot = null;
		this._removedSlot = null;
		this._renderingBeginSlot = null;
		this._surfaceChangedSlots = null;
		this._drawCallPool.clear();
		if(this._effect != null) {
			target.get_data().removeProviderbyName(this._effect.get_data(),"effect");
		}
	}
	removedHandler(node,target,parent) {
		this.findSceneManager();
		this.removeRootSlot();
		this.rootDescendantRemovedHandler(null,target.get_root(),null);
	}
	rootDescendantAddedHandler(node,target,parent) {
		var surfaceNodes = minko_scene_NodeSet.createbyNode(target).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaceNodes.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = surfaceNode.getComponents(minko_component_Surface);
			while(_g2 < _g11.length) {
				var surface = _g11[_g2];
				++_g2;
				this.addToCollect(surface);
			}
		}
	}
	rootDescendantRemovedHandler(node,target,parent) {
		var surfaceNodes = minko_scene_NodeSet.createbyNode(target).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaceNodes.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = surfaceNode.getComponents(minko_component_Surface);
			while(_g2 < _g11.length) {
				var surface = _g11[_g2];
				++_g2;
				this.unwatchSurface(surface,surfaceNode,true);
				this.removeSurface(surface);
			}
		}
	}
	componentAddedHandler(node,target,ctrl) {
		var _gthis = this;
		if(((ctrl) instanceof minko_component_Surface)) {
			var surfaceCtrl = js_Boot.__cast(ctrl , minko_component_Surface);
			this.addToCollect(surfaceCtrl);
		} else if(((ctrl) instanceof minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(ctrl , minko_component_SceneManager);
			this.setSceneManager(sceneManager);
		} else if(((ctrl) instanceof minko_component_PerspectiveCamera)) {
			var perspectiveCamera = js_Boot.__cast(ctrl , minko_component_PerspectiveCamera);
			this._worldToScreenMatrixPropertyChangedSlot = perspectiveCamera.get_target().get_data().getPropertyChanged("worldToScreenMatrix").connect(function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
				_gthis._mustZSort = true;
			});
		}
	}
	addToCollect(surfaceCtrl) {
		if(!Lambda.has(this._toCollect,surfaceCtrl)) {
			this._toCollect.push(surfaceCtrl);
		}
	}
	componentRemovedHandler(node,target,cmp) {
		if(((cmp) instanceof minko_component_Surface)) {
			var surface = js_Boot.__cast(cmp , minko_component_Surface);
			this.unwatchSurface(surface,target,false);
			this.removeSurface(surface);
		} else if(((cmp) instanceof minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(cmp , minko_component_SceneManager);
			this.setSceneManager(null);
		} else if(((cmp) instanceof minko_component_PerspectiveCamera)) {
			var perspectiveCamera = js_Boot.__cast(cmp , minko_component_PerspectiveCamera);
			this._worldToScreenMatrixPropertyChangedSlot.dispose();
			this._worldToScreenMatrixPropertyChangedSlot = null;
		}
	}
	addSurface(surface) {
		if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null) {
			throw new js__$Boot_HaxeError("surface");
		}
		if(this._surfaceChangedSlots.h.__keys__[surface.__id__] != null == false) {
			this._surfaceChangedSlots.set(surface,[]);
		}
		if(this._effect != null || surface.get_effect() != null) {
			if(!this.checkSurfaceLayout(surface)) {
				return;
			}
			var variables = this._variables.concat([]);
			variables.push(new minko_Tuple("surfaceUuid",surface.get_uuid()));
			variables.push(new minko_Tuple("geometryUuid",surface.get_geometry().get_uuid()));
			variables.push(new minko_Tuple("materialUuid",surface.get_material().get_uuid()));
			variables.push(new minko_Tuple("effectUuid",this._effect != null ? this._effect.get_uuid() : surface.get_effect().get_uuid()));
			var drawCalls = this._drawCallPool.addDrawCalls(this._effect != null ? this._effect : surface.get_effect(),this._effect != null ? this._effectTechnique : surface.get_technique(),variables,surface.get_target().get_root().get_data(),this.get_target().get_data(),surface.get_target().get_data());
			this._surfaceToDrawCallIterator.set(surface,drawCalls);
			this._surfaceChangedSlots.h[surface.__id__].push(surface.get_geometryChanged().connect($bind(this,this.surfaceGeometryOrMaterialChangedHandler)));
			this._surfaceChangedSlots.h[surface.__id__].push(surface.get_materialChanged().connect($bind(this,this.surfaceGeometryOrMaterialChangedHandler)));
		}
		this._surfaceChangedSlots.h[surface.__id__].push(surface.get_effectChanged().connect($bind(this,this.surfaceEffectChangedHandler)));
	}
	removeSurface(surface) {
		HxOverrides.remove(this._toCollect,surface);
		if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null == true) {
			this._drawCallPool.removeDrawCalls(this._surfaceToDrawCallIterator.h[surface.__id__]);
			this._surfaceToDrawCallIterator.remove(surface);
			var changedSlots = this._surfaceChangedSlots.h[surface.__id__];
			var _g = 0;
			while(_g < changedSlots.length) {
				var s = changedSlots[_g];
				++_g;
				s.dispose();
			}
			this._surfaceChangedSlots.remove(surface);
		}
	}
	surfaceGeometryOrMaterialChangedHandler(surface) {
		var variables = this._variables.concat([]);
		variables.push(new minko_Tuple("surfaceUuid",surface.get_uuid()));
		variables.push(new minko_Tuple("geometryUuid",surface.get_geometry().get_uuid()));
		variables.push(new minko_Tuple("materialUuid",surface.get_material().get_uuid()));
		variables.push(new minko_Tuple("effectUuid",this._effect != null ? this._effect.get_uuid() : surface.get_effect().get_uuid()));
		this._drawCallPool.invalidateDrawCalls(this._surfaceToDrawCallIterator.h[surface.__id__],variables);
	}
	surfaceEffectChangedHandler(surface) {
		this.removeSurface(surface);
		this.addToCollect(surface);
	}
	render(context,renderTarget) {
		if(!this._enabled) {
			return;
		}
		var forceSort = !Lambda.empty(this._toCollect);
		var _gthis = this;
		var _g = 0;
		var _g1 = this._toCollect;
		while(_g < _g1.length) {
			var surface = _g1[_g];
			++_g;
			this.watchSurface(surface);
			this.addSurface(surface);
		}
		this._toCollect = [];
		this._renderingBegin.execute(this);
		var rt = this._renderTarget != null ? this._renderTarget : renderTarget;
		if(this._scissorBox.z >= 0 && this._scissorBox.w >= 0) {
			context.setScissorTest(true,this._scissorBox);
		} else {
			context.setScissorTest(false,this._scissorBox);
		}
		if(rt != null) {
			context.setRenderToTexture(rt.get_id(),true);
		} else {
			context.setRenderToBackBuffer();
		}
		if(this._viewportBox.z >= 0 && this._viewportBox.w >= 0) {
			context.configureViewport(Math.floor(this._viewportBox.x),Math.floor(this._viewportBox.y),Math.floor(this._viewportBox.z),Math.floor(this._viewportBox.w));
		}
		if(this._clearBeforeRender) {
			context.clear((this._backgroundColor >> 24 & 255) / 255.0,(this._backgroundColor >> 16 & 255) / 255.0,(this._backgroundColor >> 8 & 255) / 255.0,(this._backgroundColor & 255) / 255.0);
		}
		this._drawCallPool.update(forceSort,this._mustZSort);
		this._mustZSort = false;
		var drawCallKeys = this._drawCallPool.get_drawCallsKeys();
		var drawCalls = this._drawCallPool.get_drawCalls();
		this._numDrawCalls = 0;
		this._numTriangles = 0;
		var _g2 = 0;
		while(_g2 < drawCallKeys.length) {
			var dk = drawCallKeys[_g2];
			++_g2;
			var priorityToDrawCalls = __map_reserved[dk] != null ? drawCalls.getReserved(dk) : drawCalls.h[dk];
			var drawCalls1 = priorityToDrawCalls.first;
			var _g21 = 0;
			while(_g21 < drawCalls1.length) {
				var drawCall = drawCalls1[_g21];
				++_g21;
				if(drawCall.get_enabled()) {
					drawCall.render(context,rt,_gthis._viewportBox,_gthis._backgroundColor);
					++_gthis._numDrawCalls;
					_gthis._numTriangles += drawCall.get_numTriangles();
				}
			}
			var drawCalls2 = priorityToDrawCalls.second;
			var _g22 = 0;
			while(_g22 < drawCalls2.length) {
				var drawCall1 = drawCalls2[_g22];
				++_g22;
				if(drawCall1.get_enabled()) {
					drawCall1.render(context,rt,_gthis._viewportBox,_gthis._backgroundColor);
					++_gthis._numDrawCalls;
					_gthis._numTriangles += drawCall1.get_numTriangles();
				}
			}
		}
		this._beforePresent.execute(this);
		context.present();
		this._renderingEnd.execute(this);
	}
	clear(canvas) {
		var x = (this._backgroundColor >> 24 & 255) / 255.0;
		var y = (this._backgroundColor >> 16 & 255) / 255.0;
		var z = (this._backgroundColor >> 8 & 255) / 255.0;
		var w = (this._backgroundColor & 255) / 255.0;
		var this1 = new glm_Vec4Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		this1.w = w;
		var backgroundColor = this1;
		this.clearbyVector4(canvas,backgroundColor);
	}
	clearbyVector4(canvas,clearColor) {
		canvas.get_context().clear(clearColor.x,clearColor.y,clearColor.z,clearColor.w);
		canvas.swapBuffers();
		canvas.get_context().clear(clearColor.x,clearColor.y,clearColor.z,clearColor.w);
	}
	findSceneManager() {
		var roots = minko_scene_NodeSet.createbyNode(this.get_target()).roots().where(function(node) {
			return node.hasComponent(minko_component_SceneManager);
		});
		if(roots.get_nodes().length > 1) {
			throw new js__$Boot_HaxeError("Renderer cannot be in two separate scenes.");
		} else if(roots.get_nodes().length == 1) {
			this.setSceneManager(roots.get_nodes()[0].getComponent(minko_component_SceneManager));
		} else {
			this.setSceneManager(null);
		}
	}
	setSceneManager(sceneManager) {
		if(sceneManager != this._sceneManager) {
			if(sceneManager != null) {
				this._sceneManager = sceneManager;
				this._renderingBeginSlot = this._sceneManager.get_renderingEnd().connect($bind(this,this.sceneManagerRenderingBeginHandler),this._priority);
				this.initializePostProcessingGeometry();
			} else {
				this._sceneManager = null;
				this._renderingBeginSlot = null;
				if(this._postProcessingGeom != null) {
					this.get_target().get_data().removeProviderbyName(this._postProcessingGeom.get_data(),"geometry");
					this._postProcessingGeom = null;
				}
			}
		}
	}
	sceneManagerRenderingBeginHandler(sceneManager,frameId,renderTarget) {
		this.render(sceneManager.get_assets().get_context(),renderTarget);
	}
	addFilter(filter,source) {
		return this;
	}
	removeFilter(filter,source) {
		return this;
	}
	surfaceLayoutMaskChangedHandler(surface) {
		if(this.checkSurfaceLayout(surface)) {
			this.enableDrawCalls(surface,true);
			if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null == false) {
				this.addToCollect(surface);
			}
		} else if((surface.get_target().get_layout() & 32) != 0 || (surface.get_target().get_layout() & 128) == 0) {
			this.enableDrawCalls(surface,false);
		} else if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null) {
			this.removeSurface(surface);
		}
	}
	watchSurface(surface) {
		var _gthis = this;
		var node = surface.get_target();
		if(this._nodeLayoutChangedSlot.h.__keys__[node.__id__] != null == false) {
			this._nodeLayoutChangedSlot.set(node,node.get_layoutChanged().connect(function(n,t) {
				var _g = 0;
				var _g1 = t.getComponents(minko_component_Surface);
				while(_g < _g1.length) {
					var surface1 = _g1[_g];
					++_g;
					_gthis.surfaceLayoutMaskChangedHandler(surface1);
				}
			}));
		}
		if(this._surfaceLayoutMaskChangedSlot.h.__keys__[surface.__id__] != null == false) {
			this._surfaceLayoutMaskChangedSlot.set(surface,surface.get_layoutMaskChanged().connect(function(surface2) {
				_gthis.surfaceLayoutMaskChangedHandler(surface2);
			}));
		}
	}
	unwatchSurface(surface,node,remove) {
		if(this._surfaceLayoutMaskChangedSlot.h.__keys__[surface.__id__] != null) {
			this._surfaceLayoutMaskChangedSlot.h[surface.__id__].dispose();
			this._surfaceLayoutMaskChangedSlot.remove(surface);
		}
		if(!node.hasComponent(minko_component_Surface) || remove) {
			this._nodeLayoutChangedSlot.h[node.__id__].dispose();
			this._nodeLayoutChangedSlot.remove(node);
		}
	}
	checkSurfaceLayout(surface) {
		return (surface.get_target().get_layout() & surface.get_layoutMask() & this.get_layoutMask()) != 0;
	}
	set_layoutMask(value) {
		super.set_layoutMask(value);
		if(this.get_target() != null) {
			this._drawCallPool.clear();
			this.rootDescendantRemovedHandler(null,this.get_target().get_root(),null);
		}
		return value;
	}
	enableDrawCalls(surface,enabled) {
		if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] == null) {
			return;
		}
		var drawCallId = this._surfaceToDrawCallIterator.h[surface.__id__];
		var _this = this._drawCallPool.get_drawCalls();
		var priorityToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(priorityToDrawCalls.hasNext()) {
			var priorityToDrawCalls1 = priorityToDrawCalls.next();
			var drawCalls = priorityToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				if(drawCall.get_batchIDs().length > 1) {
					continue;
				}
				if(drawCall.get_batchIDs()[0] == drawCallId) {
					drawCall.set_enabled(enabled);
				}
			}
			var drawCalls1 = priorityToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls1.length) {
				var drawCall1 = drawCalls1[_g1];
				++_g1;
				if(drawCall1.get_batchIDs().length > 1) {
					continue;
				}
				if(drawCall1.get_batchIDs()[0] == drawCallId) {
					drawCall1.set_enabled(enabled);
				}
			}
		}
	}
	changeEffectOrTechnique(effect,technique) {
		if(effect != this._effect || technique != this._effectTechnique) {
			this._effect = effect;
			this._effectTechnique = technique;
			this.reset();
			this.rootDescendantAddedHandler(this.get_target().get_root(),this.get_target().get_root(),this.get_target().get_parent());
		}
	}
	static create(backgroundColor,renderTarget,effect,effectTechnique,priority,name) {
		if(name == null) {
			name = "";
		}
		if(priority == null) {
			priority = 0.0;
		}
		if(effectTechnique == null) {
			effectTechnique = "default";
		}
		if(backgroundColor == null) {
			backgroundColor = 0;
		}
		var ctrl = new minko_component_Renderer(renderTarget,effect,effectTechnique,priority);
		ctrl.set_backgroundColor(backgroundColor);
		ctrl.set_name(name);
		return ctrl;
	}
}
$hx_exports["minko"]["component"]["Renderer"] = minko_component_Renderer;
minko_component_Renderer.__name__ = true;
minko_component_Renderer.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_Renderer.prototype, {
	__class__: minko_component_Renderer
});
class minko_component_SceneManager extends minko_component_AbstractComponent {
	constructor(canvas) {
		super();
		this._canvas = canvas;
		this._frameId = 0;
		this._time = 0.0;
		this._assets = minko_file_AssetLibrary.create(canvas.get_context());
		this._frameBegin = new minko_signal_Signal3();
		this._frameEnd = new minko_signal_Signal3();
		this._cullBegin = new minko_signal_Signal();
		this._cullEnd = new minko_signal_Signal();
		this._renderBegin = new minko_signal_Signal3();
		this._renderEnd = new minko_signal_Signal3();
		this._data = minko_data_Provider.create();
	}
	get_canvas() {
		return this._canvas;
	}
	get_frameId() {
		return this._frameId;
	}
	get_assets() {
		return this._assets;
	}
	get_frameBegin() {
		return this._frameBegin;
	}
	get_frameEnd() {
		return this._frameEnd;
	}
	get_cullingBegin() {
		return this._cullBegin;
	}
	get_cullingEnd() {
		return this._cullEnd;
	}
	get_renderingBegin() {
		return this._renderBegin;
	}
	get_renderingEnd() {
		return this._renderEnd;
	}
	get_time() {
		return this._time;
	}
	targetAdded(target) {
		if(target.get_root() != target) {
			throw new js__$Boot_HaxeError("SceneManager must be on the root node only.");
		}
		if(target.getComponents(minko_component_SceneManager).length > 1) {
			throw new js__$Boot_HaxeError("The same root node cannot have more than one SceneManager.");
		}
		target.get_data().addProvider(this._data);
		target.get_data().addProvider(this._canvas.get_data());
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
	}
	targetRemoved(target) {
		this._addedSlot = null;
		target.get_data().removeProvider(this._data);
		target.get_data().removeProvider(this._canvas.get_data());
	}
	addedHandler(node,target,ancestor) {
		if(target == this.get_target()) {
			throw new js__$Boot_HaxeError("SceneManager must be on the root node only.");
		}
	}
	nextFrame(time,deltaTime,renderTarget) {
		this._time = time;
		this._data.set("time",this._time);
		this._frameBegin.execute(this,time,deltaTime);
		this._cullBegin.execute(this);
		this._cullEnd.execute(this);
		this._renderBegin.execute(this,this._frameId,renderTarget);
		this._renderEnd.execute(this,this._frameId,renderTarget);
		this._frameEnd.execute(this,time,deltaTime);
		++this._frameId;
	}
	static create(canvas) {
		var sm = new minko_component_SceneManager(canvas);
		return sm;
	}
}
$hx_exports["minko"]["component"]["SceneManager"] = minko_component_SceneManager;
minko_component_SceneManager.__name__ = true;
minko_component_SceneManager.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_SceneManager.prototype, {
	__class__: minko_component_SceneManager
});
class minko_component_ShadowMappingTechnique extends minko_component_AbstractComponent {
	constructor(technique) {
		super();
		this._technique = technique;
		this._data = minko_data_Provider.create();
		this._data.set("shadowMappingTechnique",technique);
	}
	targetAdded(target) {
		target.get_data().addProvider(this._data);
	}
	static create(technique) {
		return new minko_component_ShadowMappingTechnique(technique);
	}
}
$hx_exports["minko"]["component"]["ShadowMappingTechnique"] = minko_component_ShadowMappingTechnique;
minko_component_ShadowMappingTechnique.__name__ = true;
minko_component_ShadowMappingTechnique.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_ShadowMappingTechnique.prototype, {
	__class__: minko_component_ShadowMappingTechnique
});
class minko_component_Skinning extends minko_component_AbstractAnimation {
	constructor(skin,method,context,skeletonRoot,moveTargetBelowRoot,isLooping) {
		super(isLooping);
		this._skin = skin;
		this._context = context;
		this._method = method;
		this._skeletonRoot = skeletonRoot;
		this._moveTargetBelowRoot = moveTargetBelowRoot;
		this._boneVertexBuffer = null;
		this._targetGeometry = new haxe_ds_ObjectMap();
		this._targetInputPositions = new haxe_ds_ObjectMap();
		this._targetInputNormals = new haxe_ds_ObjectMap();
	}
	clone(option) {
		var skin = minko_component_Skinning.create(null,null,null,null).copyFromSkinning(this,option);
		skin.initialize();
		return skin;
	}
	get_skin() {
		return this._skin;
	}
	initialize() {
		super.initialize();
		if(this._skin == null) {
			throw new js__$Boot_HaxeError("skin");
		}
		if(this._context == null) {
			throw new js__$Boot_HaxeError("context");
		}
		if(this._method != 0 && this._skin.get_maxNumVertexBones() > minko_component_Skinning.MAX_NUM_BONES_PER_VERTEX) {
			var error_msg = "The maximum number of bones per vertex gets too high (" + this._skin.get_maxNumVertexBones() + ") to propose hardware skinning (max allowed = " + minko_component_Skinning.MAX_NUM_BONES_PER_VERTEX + ")";
			this._method = 0;
		}
		this._boneVertexBuffer = this._method == 0 ? null : this.createVertexBufferForBones();
		this._maxTime = this._skin.get_duration();
		this.setPlaybackWindow(0,this._maxTime);
		this.seek(0);
	}
	targetAdded(target) {
		super.targetAdded(target);
		if(this._skeletonRoot == null || !this._moveTargetBelowRoot) {
			return;
		}
		if(target.get_parent() != null) {
			target.get_parent().removeChild(target);
		}
		this._skeletonRoot.addChild(target);
		if(target.hasComponent(minko_component_Transform)) {
			var transform = target.getComponent(minko_component_Transform);
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			dest._00 = 1;
			dest._10 = 0;
			dest._20 = 0;
			dest._30 = 0;
			dest._01 = 0;
			dest._11 = 1;
			dest._21 = 0;
			dest._31 = 0;
			dest._02 = 0;
			dest._12 = 0;
			dest._22 = 1;
			dest._32 = 0;
			dest._03 = 0;
			dest._13 = 0;
			dest._23 = 0;
			dest._33 = 1;
			transform.set_matrix(dest);
		}
		if(target.hasComponent(minko_component_MasterAnimation)) {
			var masterAnimation = target.getComponent(minko_component_MasterAnimation);
			masterAnimation.initAnimations();
		}
	}
	copyFromSkinning(skinning,option) {
		this.copyFrom(skinning,option);
		this._skin = new minko_geometry_Skin();
		this._context = skinning._context;
		this._method = skinning._method;
		this._skeletonRoot = skinning._skeletonRoot;
		this._moveTargetBelowRoot = skinning._moveTargetBelowRoot;
		this._boneVertexBuffer = null;
		this._targetGeometry = new haxe_ds_ObjectMap();
		this._targetInputPositions = new haxe_ds_ObjectMap();
		this._targetInputNormals = new haxe_ds_ObjectMap();
		this._skin = skinning._skin.clone();
		var targetGeometry = skinning._targetGeometry;
		var it = targetGeometry.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			this._targetGeometry.set(it1,targetGeometry.h[it1.__id__]);
		}
		return this;
	}
	addedHandler(node,target,parent) {
		super.addedHandler(node,target,parent);
		if(this._skin.get_duration() == 0) {
			return;
		}
		if(node.getComponents(minko_component_Surface).length > 1) {
			throw new js__$Boot_HaxeError("Warning: The skinning component is not intended to work on node with several surfaces. Attempts to apply skinning to first surface.");
		}
		if(node.hasComponent(minko_component_Surface)) {
			var geometry = (js_Boot.__cast(node.getComponent(minko_component_Surface) , minko_component_Surface)).get_geometry();
			if(geometry.hasVertexAttribute(minko_component_Skinning.ATTRNAME_POSITION) && geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_POSITION).get_numVertices() == this._skin.get_numVertices() && !geometry.hasVertexBuffer(this._boneVertexBuffer)) {
				this._targetGeometry.set(node,geometry);
				this._targetInputPositions.set(node,geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_POSITION).get_data());
				if(geometry.hasVertexAttribute(minko_component_Skinning.ATTRNAME_NORMAL) && geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_NORMAL).get_numVertices() == this._skin.get_numVertices()) {
					this._targetInputNormals.set(node,geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_NORMAL).get_data());
				}
				if(this._method != 0) {
					geometry.addVertexBuffer(this._boneVertexBuffer);
					geometry.get_data().set(minko_component_Skinning.PNAME_BONE_MATRICES,[]);
					geometry.get_data().set(minko_component_Skinning.PNAME_NUM_BONES,0);
				}
			}
		}
	}
	removedHandler(node,target,parent) {
		super.removedHandler(node,target,parent);
		if(this._targetGeometry.h.__keys__[target.__id__] != null) {
			var geometry = this._targetGeometry.h[target.__id__];
			if(this._method != 0) {
				geometry.removeVertexBuffer(this._boneVertexBuffer);
				geometry.get_data().unset(minko_component_Skinning.PNAME_BONE_MATRICES);
				geometry.get_data().unset(minko_component_Skinning.PNAME_NUM_BONES);
			}
			this._targetGeometry.remove(target);
		}
		if(this._targetInputPositions.h.__keys__[target.__id__] != null) {
			this._targetInputPositions.remove(target);
		}
		if(this._targetInputNormals.h.__keys__[target.__id__] != null) {
			this._targetInputNormals.remove(target);
		}
	}
	update() {
		var frameId = this._skin.getFrameId(this._currentTime);
		this.updateFrame(frameId,this.get_target());
	}
	updateFrame(frameId,target) {
		if(this._targetGeometry.h.__keys__[target.__id__] != null == false) {
			return;
		}
		var geometry = this._targetGeometry.h[target.__id__];
		var boneMatrices = this._skin.getMatrices(frameId);
		if(this._method == 1) {
			if(!geometry.get_data().hasProperty(minko_component_Skinning.PNAME_NUM_BONES) || geometry.get_data().get(minko_component_Skinning.PNAME_NUM_BONES) != this._skin.get_numBones()) {
				geometry.get_data().set(minko_component_Skinning.PNAME_NUM_BONES,this._skin.get_numBones());
			}
			geometry.get_data().set(minko_component_Skinning.PNAME_BONE_MATRICES,boneMatrices);
		} else {
			this.performSoftwareSkinningFrame(target,boneMatrices);
		}
	}
	performSoftwareSkinningFrame(target,boneMatrices) {
		var geometry = this._targetGeometry.h[target.__id__];
		var xyzBuffer = geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_POSITION);
		var xyzAttr = xyzBuffer.attribute(minko_component_Skinning.ATTRNAME_POSITION);
		this.performSoftwareSkinning(xyzAttr,xyzBuffer,this._targetInputPositions.h[target.__id__],boneMatrices,false);
		if(geometry.hasVertexAttribute(minko_component_Skinning.ATTRNAME_NORMAL) && this._targetInputNormals.h.__keys__[target.__id__] != null) {
			var normalBuffer = geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_NORMAL);
			var normalAttr = normalBuffer.attribute(minko_component_Skinning.ATTRNAME_NORMAL);
			this.performSoftwareSkinning(normalAttr,normalBuffer,this._targetInputNormals.h[target.__id__],boneMatrices,true);
		}
	}
	performSoftwareSkinning(attr,vertexBuffer,inputData,boneMatrices,doDeltaTransform) {
		var vertexSize = vertexBuffer.get_vertexSize();
		var outputData = vertexBuffer.get_data();
		var numVertices = Math.floor(outputData.length / vertexSize);
		var index = attr.offset;
		var _g = 0;
		var _g1 = numVertices;
		while(_g < _g1) {
			var vId = _g++;
			var this1 = new glm_Vec4Base();
			this1.x = inputData[index];
			this1.y = inputData[index + 1];
			this1.z = inputData[index + 2];
			this1.w = 1.0;
			var v1 = this1;
			var this2 = new glm_Vec4Base();
			this2.x = 0.0;
			this2.y = 0;
			this2.z = 0;
			this2.w = 0;
			var v2 = this2;
			var numVertexBones = this._skin.numVertexBones(vId);
			var _g2 = 0;
			var _g11 = numVertexBones;
			while(_g2 < _g11) {
				var j = _g2++;
				var boneId = 0;
				var boneWeight = 0.0;
				var t = this._skin.vertexBoneData(vId,j,boneId,boneWeight);
				boneId = t.first;
				boneWeight = t.second;
				var boneMatrix = boneMatrices[boneId];
				var this3 = new glm_Vec4Base();
				this3.x = 0;
				this3.y = 0;
				this3.z = 0;
				this3.w = 0;
				var dest = this3;
				var x = v1.x;
				var y = v1.y;
				var z = v1.z;
				var w = v1.w;
				dest.x = boneMatrix._00 * x + boneMatrix._10 * y + boneMatrix._20 * z + boneMatrix._30 * w;
				dest.y = boneMatrix._01 * x + boneMatrix._11 * y + boneMatrix._21 * z + boneMatrix._31 * w;
				dest.z = boneMatrix._02 * x + boneMatrix._12 * y + boneMatrix._22 * z + boneMatrix._32 * w;
				dest.w = boneMatrix._03 * x + boneMatrix._13 * y + boneMatrix._23 * z + boneMatrix._33 * w;
				var a = dest;
				var this4 = new glm_Vec4Base();
				this4.x = 0;
				this4.y = 0;
				this4.z = 0;
				this4.w = 0;
				var dest1 = this4;
				dest1.x = a.x * boneWeight;
				dest1.y = a.y * boneWeight;
				dest1.z = a.z * boneWeight;
				dest1.w = a.w * boneWeight;
				v2 = dest1;
			}
			outputData[index] = v2.x;
			outputData[index + 1] = v2.y;
			outputData[index + 2] = v2.z;
			index += vertexSize;
		}
		vertexBuffer.upload();
	}
	createVertexBufferForBones() {
		var vertexSize = 16;
		var numVertices = this._skin.get_numVertices();
		var _g = [];
		var _g1 = 0;
		var _g2 = numVertices * vertexSize;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(0.0);
		}
		var vertexData = _g;
		var index = 0;
		var _g3 = 0;
		var _g4 = numVertices;
		while(_g3 < _g4) {
			var vId = _g3++;
			var numVertexBones = this._skin.numVertexBones(vId);
			var j = 0;
			while(j < numVertexBones && j < vertexSize >> 2) {
				vertexData[index + j] = this._skin.vertexBoneId(vId,j);
				++j;
			}
			index += vertexSize >> 1;
			j = 0;
			while(j < numVertexBones && j < vertexSize >> 2) {
				vertexData[index + j] = this._skin.vertexBoneWeight(vId,j);
				++j;
			}
			index += vertexSize >> 1;
		}
		var vertexBuffer = minko_render_VertexBuffer.createbyData(this._context,vertexData);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_IDS_A,4,0);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_IDS_B,4,4);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_A,4,8);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_B,4,12);
		return vertexBuffer;
	}
	rebindDependencies(componentsMap,nodeMap,option) {
		this._skeletonRoot = nodeMap.h[this._skeletonRoot.__id__];
		var oldSurface = null;
		var node = this._targetGeometry.keys();
		while(node.hasNext()) {
			var node1 = node.next();
			oldSurface = node1.getComponent(minko_component_Surface);
			break;
		}
		var oldGeometry = oldSurface.get_geometry();
		var componentsMapSurface = js_Boot.__cast(componentsMap.h[oldSurface.__id__] , minko_component_Surface);
		componentsMapSurface.set_geometry(oldGeometry.clone());
	}
	static create(skin,method,context,skeletonRoot,moveTargetBelowRoot,isLooping) {
		if(isLooping == null) {
			isLooping = true;
		}
		if(moveTargetBelowRoot == null) {
			moveTargetBelowRoot = false;
		}
		var ptr = new minko_component_Skinning(skin,method,context,skeletonRoot,moveTargetBelowRoot,isLooping);
		ptr.initialize();
		return ptr;
	}
}
$hx_exports["minko"]["component"]["Skinning"] = minko_component_Skinning;
minko_component_Skinning.__name__ = true;
minko_component_Skinning.__super__ = minko_component_AbstractAnimation;
Object.assign(minko_component_Skinning.prototype, {
	__class__: minko_component_Skinning
});
class minko_component_SpotLight extends minko_component_AbstractDiscreteLight {
	constructor(diffuse,specular,innerAngleRadians,outerAngleRadians,attenuationConstant,attenuationLinear,attenuationQuadratic) {
		super("spotLight",diffuse,specular);
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
		var this2 = new glm_Vec3Base();
		this2.x = attenuationConstant;
		this2.y = attenuationLinear;
		this2.z = attenuationQuadratic;
		this.set_attenuationCoefficients(this2);
		this.set_innerConeAngle(innerAngleRadians);
		this.set_outerConeAngle(outerAngleRadians);
	}
	clone(option) {
		var light = minko_component_SpotLight.create().copyFrom(this,option);
		return light;
	}
	get_innerConeAngle() {
		return Math.acos(this.get_data().get("cosInnerConeAngle"));
	}
	set_innerConeAngle(radians) {
		this.get_data().set("cosInnerConeAngle",Math.cos(Math.max(0.0,Math.min(0.5 * Math.PI,radians))));
		return radians;
	}
	get_outerConeAngle() {
		return Math.acos(this.get_data().get("cosOuterConeAngle"));
	}
	set_outerConeAngle(radians) {
		this.get_data().set("cosOuterConeAngle",Math.cos(Math.max(0.0,Math.min(0.5 * Math.PI,radians))));
		return radians;
	}
	get_attenuationEnabled() {
		var coef = this.get_attenuationCoefficients();
		return !(coef.x < 0.0 || coef.y < 0.0 || coef.z < 0.0);
	}
	get_attenuationCoefficients() {
		return this.get_data().get("attenuationCoeffs");
	}
	setAttenuationCoefficients(constant,linear,quadratic) {
		var this1 = new glm_Vec3Base();
		this1.x = constant;
		this1.y = linear;
		this1.z = quadratic;
		return this.set_attenuationCoefficients(this1);
	}
	set_attenuationCoefficients(value) {
		this.get_data().set("attenuationCoeffs",value);
		return value;
	}
	get_position() {
		return this.get_data().get("position");
	}
	updateModelToWorldMatrix(modelToWorld) {
		var _r0c0 = modelToWorld._00;
		var _r0c1 = modelToWorld._10;
		var _r0c2 = modelToWorld._20;
		var _r1c0 = modelToWorld._01;
		var _r1c1 = modelToWorld._11;
		var _r1c2 = modelToWorld._21;
		var _r2c0 = modelToWorld._02;
		var _r2c1 = modelToWorld._22;
		var _r2c2 = modelToWorld._22;
		var this1 = new glm_Mat3Base();
		this1._00 = _r0c0;
		this1._01 = _r1c0;
		this1._02 = _r2c0;
		this1._10 = _r0c1;
		this1._11 = _r1c1;
		this1._12 = _r2c1;
		this1._20 = _r0c2;
		this1._21 = _r1c2;
		this1._22 = _r2c2;
		var m = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0.0;
		this2.y = 0.0;
		this2.z = -1.0;
		var v = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var dest = this3;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		dest.x = m._00 * x + m._10 * y + m._20 * z;
		dest.y = m._01 * x + m._11 * y + m._21 * z;
		dest.z = m._02 * x + m._12 * y + m._22 * z;
		var v1 = dest;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest1 = this4;
		var length = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v1.x * mult;
		dest1.y = v1.y * mult;
		dest1.z = v1.z * mult;
		var tmp2 = dest1;
		var tmp = this.get_data();
		var this5 = new glm_Vec4Base();
		this5.x = 0.0;
		this5.y = 0.0;
		this5.z = 0.0;
		this5.w = 1.0;
		var v2 = this5;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var dest2 = this6;
		var x1 = v2.x;
		var y1 = v2.y;
		var z1 = v2.z;
		var w = v2.w;
		dest2.x = modelToWorld._00 * x1 + modelToWorld._10 * y1 + modelToWorld._20 * z1 + modelToWorld._30 * w;
		dest2.y = modelToWorld._01 * x1 + modelToWorld._11 * y1 + modelToWorld._21 * z1 + modelToWorld._31 * w;
		dest2.z = modelToWorld._02 * x1 + modelToWorld._12 * y1 + modelToWorld._22 * z1 + modelToWorld._32 * w;
		dest2.w = modelToWorld._03 * x1 + modelToWorld._13 * y1 + modelToWorld._23 * z1 + modelToWorld._33 * w;
		var v3 = dest2;
		var x2 = v3.x;
		var y2 = v3.y;
		var z2 = v3.z;
		var this7 = new glm_Vec3Base();
		this7.x = x2;
		this7.y = y2;
		this7.z = z2;
		tmp.set("position",this7).set("direction",tmp2);
	}
	copyFrom(spotlight,option) {
		this.get_data().set("diffuse",spotlight.get_diffuse()).set("specular",spotlight.get_specular());
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
		var test = spotlight.get_attenuationCoefficients();
		this.get_data().set("attenuationCoeffs",spotlight.get_attenuationCoefficients());
		this.get_data().set("cosInnerConeAngle",spotlight.get_innerConeAngle());
		this.get_data().set("cosOuterConeAngle",spotlight.get_outerConeAngle());
		return this;
	}
	static create(diffuse,specular,innerAngleRadians,outerAngleRadians,attenuationConstant,attenuationLinear,attenuationQuadratic) {
		if(attenuationQuadratic == null) {
			attenuationQuadratic = -1.0;
		}
		if(attenuationLinear == null) {
			attenuationLinear = -1.0;
		}
		if(attenuationConstant == null) {
			attenuationConstant = -1.0;
		}
		if(outerAngleRadians == null) {
			outerAngleRadians = 0.78539816339744828;
		}
		if(innerAngleRadians == null) {
			innerAngleRadians = 0.62831853071795862;
		}
		if(specular == null) {
			specular = 1.0;
		}
		if(diffuse == null) {
			diffuse = 1.0;
		}
		return new minko_component_SpotLight(diffuse,specular,innerAngleRadians,outerAngleRadians,attenuationConstant,attenuationLinear,attenuationQuadratic);
	}
}
$hx_exports["minko"]["component"]["SpotLight"] = minko_component_SpotLight;
minko_component_SpotLight.__name__ = true;
minko_component_SpotLight.__super__ = minko_component_AbstractDiscreteLight;
Object.assign(minko_component_SpotLight.prototype, {
	__class__: minko_component_SpotLight
});
class minko_component_Surface extends minko_component_AbstractComponent {
	constructor(name,geometry,material,effect,technique) {
		super();
		this._name = name;
		this._geometry = geometry;
		this._material = material;
		this._effect = effect;
		this._provider = minko_data_Provider.create();
		this._technique = technique;
		if(this._effect != null && !this._effect.hasTechnique(this._technique)) {
			var message = "Effect " + this._effect.get_name() + " does not provide a '" + this._technique + "' technique.";
			throw new js__$Boot_HaxeError(message);
		}
		this._geometryChanged = new minko_signal_Signal();
		this._materialChanged = new minko_signal_Signal();
		this._effectChanged = new minko_signal_Signal();
		this.initializeIndexRange(geometry);
	}
	dispose() {
		super.dispose();
		this._geometryChanged.dispose();
		this._materialChanged.dispose();
		this._effectChanged.dispose();
		this._geometryChanged = null;
		this._materialChanged = null;
		this._effectChanged = null;
		this._provider.dispose();
		this._provider = null;
		this._geometry = null;
		this._material = null;
		this._effect = null;
		this._technique = null;
	}
	get_uuid() {
		return this._provider.get_uuid();
	}
	get_name() {
		return this._name;
	}
	set_name(value) {
		this._name = value;
		return value;
	}
	get_data() {
		return this._provider;
	}
	get_geometry() {
		return this._geometry;
	}
	set_firstIndex(index) {
		this.get_data().set("firstIndex",index);
		return index;
	}
	set_numIndices(numIndices) {
		this.get_data().set("numIndices",numIndices);
		return numIndices;
	}
	get_material() {
		return this._material;
	}
	set_effect(v) {
		this._effect = v;
		return v;
	}
	get_effect() {
		return this._effect;
	}
	get_technique() {
		return this._technique;
	}
	get_geometryChanged() {
		return this._geometryChanged;
	}
	get_materialChanged() {
		return this._materialChanged;
	}
	get_effectChanged() {
		return this._effectChanged;
	}
	targetAdded(target) {
		var targetData = target.get_data();
		targetData.addProviderbyName(this._provider,"surface");
		targetData.addProviderbyName(this._material.get_data(),"material");
		targetData.addProviderbyName(this._geometry.get_data(),"geometry");
		if(this._effect != null) {
			targetData.addProviderbyName(this._effect.get_data(),"effect");
		}
	}
	targetRemoved(target) {
		var _gthis = this;
		this._bubbleUpSlot = target.get_root().get_componentRemoved().connect(function(n,t,c) {
			_gthis._bubbleUpSlot.dispose();
			_gthis._bubbleUpSlot = null;
			var targetData = target.get_data();
			targetData.removeProviderbyName(_gthis._provider,"surface");
			targetData.removeProviderbyName(_gthis._material.get_data(),"material");
			targetData.removeProviderbyName(_gthis._geometry.get_data(),"geometry");
			if(_gthis._effect != null) {
				targetData.removeProviderbyName(_gthis._effect.get_data(),"effect");
			}
		});
	}
	set_geometry(value) {
		if(value == this._geometry) {
			return value;
		}
		var t = this.get_target();
		if(t != null) {
			t.get_data().removeProviderbyName(this._geometry.get_data(),"geometry");
		}
		this._geometry = value;
		if(t != null) {
			t.get_data().addProviderbyName(this._geometry.get_data(),"geometry");
		}
		this.initializeIndexRange(value);
		this._geometryChanged.execute(this);
		return value;
	}
	set_material(value) {
		if(value == this._material) {
			return value;
		}
		var t = this.get_target();
		if(t != null) {
			t.get_data().removeProviderbyName(this._material.get_data(),"material");
		}
		this._material = value;
		if(t != null) {
			t.get_data().addProviderbyName(this._material.get_data(),"material");
		}
		this._materialChanged.execute(this);
		return value;
	}
	setEffectAndTechnique(effect,technique) {
		if(effect == null) {
			throw new js__$Boot_HaxeError("effect");
		}
		if(!effect.hasTechnique(technique)) {
			throw new js__$Boot_HaxeError("The effect \"" + effect.get_name() + "\" does not provide the \"" + this._technique + "\" technique.");
		}
		var changed = false;
		if(effect != this._effect) {
			changed = true;
			if(this.get_target() != null) {
				if(this._effect != null) {
					this.get_target().get_data().removeProviderbyName(this._effect.get_data(),"effect");
				}
				if(effect != null) {
					this.get_target().get_data().addProviderbyName(effect.get_data(),"effect");
				}
			}
			this._effect = effect;
		}
		if(technique != this._technique) {
			changed = true;
			this._technique = technique;
			this._provider.set("technique",technique);
		}
		if(changed) {
			this._effectChanged.execute(this);
		}
	}
	initializeIndexRange(geometry) {
		this.set_firstIndex(0);
		this.set_numIndices(geometry.get_data().hasProperty("numIndices") ? geometry.get_data().get("numIndices") : 0);
	}
	static create(geometry,material,effect,technique,name) {
		if(name == null) {
			name = "";
		}
		if(technique == null) {
			technique = "default";
		}
		return new minko_component_Surface(name,geometry,material,effect,technique);
	}
}
$hx_exports["minko"]["component"]["Surface"] = minko_component_Surface;
minko_component_Surface.__name__ = true;
minko_component_Surface.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_Surface.prototype, {
	__class__: minko_component_Surface
});
class minko_component_RootTransform extends minko_component_AbstractComponent {
	constructor() {
		super();
		this._nodeTransformCache = [];
		this._nodeToId = new haxe_ds_ObjectMap();
		this._nodes = [];
		this._invalidLists = false;
		this._targetSlots = [];
		this._renderingBeginSlot = null;
		this._toAdd = [];
		this._toRemove = [];
		this._nodeToPropertyChangedSlot = new haxe_ds_ObjectMap();
	}
	dispose() {
		this._nodeTransformCache = null;
		this._nodeToId = null;
		var _n = this._nodeToPropertyChangedSlot.keys();
		while(_n.hasNext()) {
			var _n1 = _n.next();
			this._nodeToPropertyChangedSlot.h[_n1.__id__].dispose();
			_n1.dispose();
		}
		this._nodeToPropertyChangedSlot = null;
		var _g = 0;
		var _g1 = this._targetSlots;
		while(_g < _g1.length) {
			var _t = _g1[_g];
			++_g;
			_t.dispose();
		}
		this._targetSlots = null;
		if(this._renderingBeginSlot != null) {
			this._renderingBeginSlot.dispose();
		}
		this._renderingBeginSlot = null;
		this._nodes = null;
		this._toAdd = null;
		this._toRemove = null;
		super.dispose();
	}
	setDirty(target,d) {
		if(!this._invalidLists) {
			this._nodeTransformCache[this._nodeToId.h[target.__id__]]._dirty = true;
		}
	}
	clone(option) {
		return minko_component_RootTransform.create();
	}
	targetAdded(target) {
		this._targetSlots.push(target.get_added().connect($bind(this,this.addedHandler)));
		this._targetSlots.push(target.get_removed().connect($bind(this,this.removedHandler)));
		this._targetSlots.push(target.get_componentAdded().connect($bind(this,this.componentAddedHandler)));
		this._targetSlots.push(target.get_componentRemoved().connect($bind(this,this.componentRemovedHandler)));
		var sceneManager = target.get_root().getComponent(minko_component_SceneManager);
		if(sceneManager != null) {
			this._renderingBeginSlot = sceneManager.get_renderingBegin().connect($bind(this,this.renderingBeginHandler),1000.0);
		}
		this.addedHandler(target,target.get_root(),target.get_parent());
	}
	targetRemoved(target) {
	}
	componentAddedHandler(node,target,ctrl) {
		if(((ctrl) instanceof minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(ctrl , minko_component_SceneManager);
			this._renderingBeginSlot = sceneManager.get_renderingBegin().connect($bind(this,this.renderingBeginHandler),1000.0);
		} else if(((ctrl) instanceof minko_component_Transform)) {
			var removeIt = Lambda.has(this._toRemove,target);
			if(removeIt) {
				HxOverrides.remove(this._toRemove,target);
			} else {
				this._toAdd.push(target);
				this._invalidLists = true;
			}
		}
	}
	componentRemovedHandler(node,target,ctrl) {
		if(((ctrl) instanceof minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(ctrl , minko_component_SceneManager);
			this._renderingBeginSlot = null;
		} else if(((ctrl) instanceof minko_component_Transform)) {
			var addIt = Lambda.has(this._toAdd,target);
			if(addIt) {
				HxOverrides.remove(this._toAdd,target);
			} else {
				this._toRemove.push(target);
				this._invalidLists = true;
			}
		}
	}
	addedHandler(node,target,ancestor) {
		if(node.get_root() == this.get_target() && node != target) {
			var otherRoot = target.getComponent(minko_component_RootTransform);
			if(otherRoot != null) {
				this._toAdd = this._toAdd.concat(otherRoot._nodes.concat(otherRoot._toAdd));
				var _g = 0;
				var _g1 = this._toRemove;
				while(_g < _g1.length) {
					var toRemove = _g1[_g];
					++_g;
					HxOverrides.remove(this._toAdd,toRemove);
				}
				this._invalidLists = true;
				target.removeComponent(otherRoot);
				otherRoot.dispose();
				otherRoot = null;
			}
		}
	}
	removedHandler(node,target,ancestor) {
		this._invalidLists = true;
		var withTransforms = minko_scene_NodeSet.createbyNode(target).descendants(true,false).where(function(n) {
			return n.hasComponent(minko_component_Transform);
		});
		this._toRemove = withTransforms.get_nodes().concat(this._toRemove);
	}
	updateTransformsList() {
		if(this._toAdd.length == 0 && this._toRemove.length == 0) {
			return;
		}
		var _gthis = this;
		var _g = 0;
		var _g1 = this._toRemove;
		while(_g < _g1.length) {
			var toRemove = _g1[_g];
			++_g;
			this._nodeToId.remove(toRemove);
			this._nodeToPropertyChangedSlot.h[toRemove.__id__].dispose();
			this._nodeToPropertyChangedSlot.remove(toRemove);
		}
		this._nodes = [];
		var nodeAndId = this._nodeToId.keys();
		while(nodeAndId.hasNext()) {
			var nodeAndId1 = nodeAndId.next();
			this._nodes.push(nodeAndId1);
		}
		var _g2 = 0;
		var _g3 = this._toAdd;
		while(_g2 < _g3.length) {
			var node = [_g3[_g2]];
			++_g2;
			this._nodes.push(node[0]);
			this._nodeToPropertyChangedSlot.set(node[0],node[0].get_data().getPropertyChanged("matrix").connect((function(node1) {
				return function(store,provider,propertyName) {
					_gthis._nodeTransformCache[_gthis._nodeToId.h[node1[0].__id__]]._dirty = true;
				};
			})(node)));
		}
		this._toAdd = [];
		this._toRemove = [];
		var _g4 = 0;
		var _g5 = this._nodeTransformCache;
		while(_g4 < _g5.length) {
			var n = _g5[_g4];
			++_g4;
			n.clear();
		}
		var _g6 = [];
		var _g7 = 0;
		var _g8 = this._nodes.length;
		while(_g7 < _g8) {
			var i = _g7++;
			_g6.push(new minko_component_NodeTransformCacheEntry());
		}
		this._nodeTransformCache = _g6;
		var _g9 = 0;
		var _g10 = this._nodes;
		while(_g9 < _g10.length) {
			var node2 = _g10[_g9];
			++_g9;
			var transform = node2.getComponent(minko_component_Transform);
			transform.set_dirty(true);
		}
		this.sortNodes();
		var nodeId = 0;
		var ancestor = null;
		var ancestorId = -1;
		var firstSiblingId = -1;
		var numSiblings = 0;
		var _g11 = 0;
		var _g12 = this._nodes;
		while(_g11 < _g12.length) {
			var node3 = _g12[_g11];
			++_g11;
			var previousAncestor = ancestor;
			ancestor = node3.get_parent();
			while(ancestor != null && !ancestor.hasComponent(minko_component_Transform)) ancestor = ancestor.get_parent();
			if(previousAncestor == null && ancestor == null) {
				numSiblings = 0;
			} else if(ancestor != previousAncestor) {
				if(previousAncestor == null) {
					ancestorId = this._nodeToId.h[ancestor.__id__];
					firstSiblingId = nodeId;
					++numSiblings;
				} else {
					var previousAncestorId = this._nodeToId.h[previousAncestor.__id__];
					var previousAncestorCacheEntry = this._nodeTransformCache[previousAncestorId];
					previousAncestorCacheEntry._firstChildId = firstSiblingId;
					previousAncestorCacheEntry._numChildren = numSiblings;
					firstSiblingId = nodeId;
					numSiblings = ancestor != null ? 1 : 0;
					previousAncestor = ancestor;
					ancestorId = ancestor != null ? this._nodeToId.h[ancestor.__id__] : -1;
				}
			} else {
				++numSiblings;
			}
			this._nodeToId.set(node3,nodeId);
			var nodeCacheEntry = this._nodeTransformCache[nodeId];
			nodeCacheEntry._node = node3;
			nodeCacheEntry._parentId = ancestorId;
			nodeCacheEntry._matrix = node3.get_data().getUnsafePointer("matrix");
			nodeCacheEntry._modelToWorldMatrix = node3.get_data().getUnsafePointer("modelToWorldMatrix");
			nodeCacheEntry._provider = (js_Boot.__cast(node3.getComponent(minko_component_Transform) , minko_component_Transform)).get_data();
			++nodeId;
		}
		if(ancestor != null) {
			ancestorId = this._nodeToId.h[ancestor.__id__];
			var ancestorCacheEntry = this._nodeTransformCache[ancestorId];
			ancestorCacheEntry._firstChildId = firstSiblingId;
			ancestorCacheEntry._numChildren = numSiblings;
		}
		this._invalidLists = false;
	}
	sortNodes() {
		var sortedNodeSet = minko_scene_NodeSet.createbyNode(this._nodes[0].get_root()).descendants(true,false).where(function(descendant) {
			var transform = descendant.getComponent(minko_component_Transform);
			if(transform != null) {
				return transform.get_dirty();
			} else {
				return false;
			}
		});
		this._nodes = sortedNodeSet.get_nodes().concat([]);
	}
	updateTransforms() {
		var modelToWorldMatrix = null;
		var nodeId = 0;
		var propertyName = "modelToWorldMatrix";
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			var nodeCacheEntry = this._nodeTransformCache[nodeId];
			if(nodeCacheEntry._dirty) {
				var parentId = nodeCacheEntry._parentId;
				if(parentId < 0) {
					modelToWorldMatrix = nodeCacheEntry._matrix.get_value();
				} else {
					var parentCacheEntry = this._nodeTransformCache[parentId];
					var a = parentCacheEntry._modelToWorldMatrix.get_value();
					var b = nodeCacheEntry._matrix.get_value();
					var this1 = new glm_Mat4Base();
					this1._00 = 0;
					this1._01 = 0;
					this1._02 = 0;
					this1._03 = 0;
					this1._10 = 0;
					this1._11 = 0;
					this1._12 = 0;
					this1._13 = 0;
					this1._20 = 0;
					this1._21 = 0;
					this1._22 = 0;
					this1._23 = 0;
					this1._30 = 0;
					this1._31 = 0;
					this1._32 = 0;
					this1._33 = 0;
					var dest = this1;
					var _a;
					var _b;
					if(dest == a) {
						var this2 = new glm_Mat4Base();
						this2._00 = 0;
						this2._01 = 0;
						this2._02 = 0;
						this2._03 = 0;
						this2._10 = 0;
						this2._11 = 0;
						this2._12 = 0;
						this2._13 = 0;
						this2._20 = 0;
						this2._21 = 0;
						this2._22 = 0;
						this2._23 = 0;
						this2._30 = 0;
						this2._31 = 0;
						this2._32 = 0;
						this2._33 = 0;
						var dest1 = this2;
						dest1._00 = a._00;
						dest1._10 = a._10;
						dest1._20 = a._20;
						dest1._30 = a._30;
						dest1._01 = a._01;
						dest1._11 = a._11;
						dest1._21 = a._21;
						dest1._31 = a._31;
						dest1._02 = a._02;
						dest1._12 = a._12;
						dest1._22 = a._22;
						dest1._32 = a._32;
						dest1._03 = a._03;
						dest1._13 = a._13;
						dest1._23 = a._23;
						dest1._33 = a._33;
						_a = dest1;
						_b = b;
					} else if(dest == b) {
						_a = a;
						var this3 = new glm_Mat4Base();
						this3._00 = 0;
						this3._01 = 0;
						this3._02 = 0;
						this3._03 = 0;
						this3._10 = 0;
						this3._11 = 0;
						this3._12 = 0;
						this3._13 = 0;
						this3._20 = 0;
						this3._21 = 0;
						this3._22 = 0;
						this3._23 = 0;
						this3._30 = 0;
						this3._31 = 0;
						this3._32 = 0;
						this3._33 = 0;
						var dest2 = this3;
						dest2._00 = b._00;
						dest2._10 = b._10;
						dest2._20 = b._20;
						dest2._30 = b._30;
						dest2._01 = b._01;
						dest2._11 = b._11;
						dest2._21 = b._21;
						dest2._31 = b._31;
						dest2._02 = b._02;
						dest2._12 = b._12;
						dest2._22 = b._22;
						dest2._32 = b._32;
						dest2._03 = b._03;
						dest2._13 = b._13;
						dest2._23 = b._23;
						dest2._33 = b._33;
						_b = dest2;
					} else {
						_a = a;
						_b = b;
					}
					dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
					dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
					dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
					dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
					dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
					dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
					dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
					dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
					dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
					dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
					dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
					dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
					dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
					dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
					dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
					dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
					modelToWorldMatrix = dest;
				}
				var this4 = nodeCacheEntry._modelToWorldMatrix.get_value();
				if(!(!(Math.abs(this4._00 - modelToWorldMatrix._00) >= glm_GLM.EPSILON || Math.abs(this4._10 - modelToWorldMatrix._10) >= glm_GLM.EPSILON || Math.abs(this4._20 - modelToWorldMatrix._20) >= glm_GLM.EPSILON || Math.abs(this4._30 - modelToWorldMatrix._30) >= glm_GLM.EPSILON || Math.abs(this4._01 - modelToWorldMatrix._01) >= glm_GLM.EPSILON || Math.abs(this4._11 - modelToWorldMatrix._11) >= glm_GLM.EPSILON || Math.abs(this4._21 - modelToWorldMatrix._21) >= glm_GLM.EPSILON || Math.abs(this4._31 - modelToWorldMatrix._31) >= glm_GLM.EPSILON || Math.abs(this4._02 - modelToWorldMatrix._02) >= glm_GLM.EPSILON || Math.abs(this4._12 - modelToWorldMatrix._12) >= glm_GLM.EPSILON || Math.abs(this4._22 - modelToWorldMatrix._22) >= glm_GLM.EPSILON || Math.abs(this4._32 - modelToWorldMatrix._32) >= glm_GLM.EPSILON || Math.abs(this4._03 - modelToWorldMatrix._03) >= glm_GLM.EPSILON || Math.abs(this4._13 - modelToWorldMatrix._13) >= glm_GLM.EPSILON || Math.abs(this4._23 - modelToWorldMatrix._23) >= glm_GLM.EPSILON || Math.abs(this4._33 - modelToWorldMatrix._33) >= glm_GLM.EPSILON))) {
					var nodeData = node.get_data();
					var provider = nodeCacheEntry._provider;
					nodeCacheEntry._modelToWorldMatrix.set_value(modelToWorldMatrix);
					nodeData.get_propertyChanged().execute(nodeData,provider,propertyName);
					if(nodeData.hasPropertyChangedSignal("modelToWorldMatrix")) {
						nodeData.getPropertyChanged("modelToWorldMatrix").execute(nodeData,provider,propertyName);
					}
					var numChildren = nodeCacheEntry._numChildren;
					if(numChildren > 0) {
						var firstChildId = nodeCacheEntry._firstChildId;
						var lastChildId = firstChildId + numChildren;
						var _g2 = firstChildId;
						var _g11 = lastChildId;
						while(_g2 < _g11) {
							var childId = _g2++;
							var childCacheEntry = this._nodeTransformCache[childId];
							childCacheEntry._dirty = true;
						}
					}
				}
				nodeCacheEntry._dirty = false;
				var transform = node.getComponent(minko_component_Transform);
				transform.set_dirty(false);
			}
			++nodeId;
		}
	}
	forceUpdate(node,updateTransformLists) {
		if(this._invalidLists || updateTransformLists) {
			this.updateTransformsList();
		}
		this.updateTransforms();
	}
	renderingBeginHandler(sceneManager,frameId,abstractTexture) {
		if(this._invalidLists) {
			this.updateTransformsList();
		}
		this.updateTransforms();
	}
	static create() {
		return new minko_component_RootTransform();
	}
}
$hx_exports["minko"]["component"]["RootTransform"] = minko_component_RootTransform;
minko_component_RootTransform.__name__ = true;
minko_component_RootTransform.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_RootTransform.prototype, {
	__class__: minko_component_RootTransform
});
class minko_component_NodeTransformCacheEntry {
	constructor() {
		this._node = null;
		this._matrix = null;
		this._modelToWorldMatrix = null;
		this._parentId = -1;
		this._firstChildId = -1;
		this._numChildren = 0;
		this._dirty = true;
		this._provider = null;
	}
	clear() {
		this._node = null;
		this._matrix = null;
		this._modelToWorldMatrix = null;
		this._parentId = -1;
		this._firstChildId = -1;
		this._numChildren = 0;
		this._dirty = true;
		this._provider = null;
	}
}
$hx_exports["minko"]["component"]["NodeTransformCacheEntry"] = minko_component_NodeTransformCacheEntry;
minko_component_NodeTransformCacheEntry.__name__ = true;
Object.assign(minko_component_NodeTransformCacheEntry.prototype, {
	__class__: minko_component_NodeTransformCacheEntry
});
class minko_component_Transform extends minko_component_AbstractComponent {
	constructor() {
		super();
		this._data = minko_data_Provider.create();
		this._dirty = false;
		var tmp = this._data;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		var tmp1 = tmp.set("matrix",dest);
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		dest1._00 = 1;
		dest1._10 = 0;
		dest1._20 = 0;
		dest1._30 = 0;
		dest1._01 = 0;
		dest1._11 = 1;
		dest1._21 = 0;
		dest1._31 = 0;
		dest1._02 = 0;
		dest1._12 = 0;
		dest1._22 = 1;
		dest1._32 = 0;
		dest1._03 = 0;
		dest1._13 = 0;
		dest1._23 = 0;
		dest1._33 = 1;
		tmp1.set("modelToWorldMatrix",dest1);
		this._matrix = this._data.getUnsafePointer("matrix");
		this._modelToWorld = this._data.getUnsafePointer("modelToWorldMatrix");
	}
	dispose() {
		super.dispose();
		if(this._addedSlot != null) {
			this._addedSlot.dispose();
		}
		this._addedSlot = null;
		if(this._removedSlot != null) {
			this._removedSlot.dispose();
		}
		this._removedSlot = null;
		this._modelToWorld = null;
		this._matrix = null;
		if(this._data != null) {
			this._data.dispose();
		}
		this._data = null;
	}
	clone(option) {
		var this1 = this.get_matrix();
		var arr_0 = this1._00;
		var arr_1 = this1._01;
		var arr_2 = this1._02;
		var arr_3 = this1._03;
		var arr_4 = this1._10;
		var arr_5 = this1._11;
		var arr_6 = this1._12;
		var arr_7 = this1._13;
		var arr_8 = this1._20;
		var arr_9 = this1._21;
		var arr_10 = this1._22;
		var arr_11 = this1._23;
		var arr_12 = this1._30;
		var arr_13 = this1._31;
		var arr_14 = this1._32;
		var arr_15 = this1._33;
		var this2 = new glm_Mat4Base();
		this2._00 = arr_0;
		this2._01 = arr_1;
		this2._02 = arr_2;
		this2._03 = arr_3;
		this2._10 = arr_4;
		this2._11 = arr_5;
		this2._12 = arr_6;
		this2._13 = arr_7;
		this2._20 = arr_8;
		this2._21 = arr_9;
		this2._22 = arr_10;
		this2._23 = arr_11;
		this2._30 = arr_12;
		this2._31 = arr_13;
		this2._32 = arr_14;
		this2._33 = arr_15;
		return minko_component_Transform.createbyMatrix4(this2);
	}
	get_data() {
		return this._data;
	}
	get_dirty() {
		return this._dirty;
	}
	set_dirty(v) {
		this._dirty = v;
		return v;
	}
	get_matrix() {
		return this._matrix.get_value();
	}
	set_matrix(value) {
		this._matrix.set_value(value);
		if(this.get_target() != null) {
			var rootTransform = this.get_target().get_root().getComponent(minko_component_RootTransform);
			if(rootTransform != null) {
				rootTransform.setDirty(this.get_target(),true);
			}
		}
		return value;
	}
	get_modelToWorldMatrix() {
		return this._modelToWorldMatrix(false);
	}
	_modelToWorldMatrix(forceUpdate) {
		if(forceUpdate) {
			this.updateModelToWorldMatrix();
		}
		return this._modelToWorld.get_value();
	}
	updateModelToWorldMatrix() {
		var rt = this.get_target().get_root().getComponent(minko_component_RootTransform);
		rt.forceUpdate(this.get_target(),true);
	}
	targetAdded(target) {
		if(target.getComponents(minko_component_Transform).length > 1) {
			throw new js__$Boot_HaxeError("A node cannot have more than one Transform.");
		}
		target.get_data().addProvider(this._data);
		this._addedSlot = target.get_added().connect($bind(this,this.addedOrRemovedHandler));
		this.addedOrRemovedHandler(null,target,target.get_parent());
	}
	addedOrRemovedHandler(node,target,parent) {
		if(!target.get_root().hasComponent(minko_component_RootTransform)) {
			target.get_root().addComponent(minko_component_RootTransform.create());
		}
	}
	targetRemoved(target) {
		target.get_data().removeProvider(this._data);
		if(this._addedSlot != null) {
			this._addedSlot.dispose();
		}
		this._addedSlot = null;
		if(this._removedSlot != null) {
			this._removedSlot.dispose();
		}
		this._removedSlot = null;
	}
	static create() {
		var ctrl = new minko_component_Transform();
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		ctrl.set_matrix(dest);
		return ctrl;
	}
	static createbyMatrix4(transform) {
		var ctrl = minko_component_Transform.create();
		ctrl.set_matrix(transform);
		return ctrl;
	}
}
$hx_exports["minko"]["component"]["Transform"] = minko_component_Transform;
minko_component_Transform.__name__ = true;
minko_component_Transform.__super__ = minko_component_AbstractComponent;
Object.assign(minko_component_Transform.prototype, {
	__class__: minko_component_Transform
});
class minko_data_AbstractFilter {
	constructor() {
		this._watchedProperties = [];
		this._currentSurface = null;
		this._currentSurfaceRemovedSlot = null;
		this._currentSurfaceTargetRemovedSlot = null;
		this._changed = new minko_signal_Signal2();
	}
	get_currentSurface() {
		return this._currentSurface;
	}
	get_changed() {
		return this._changed;
	}
	watchProperty(propertyName) {
		this._watchedProperties.push(propertyName);
		this.get_changed().execute(this,null);
	}
	unwatchProperty(propertyName) {
		var it = Lambda.find(this._watchedProperties,function(value) {
			return value == propertyName;
		});
		if(it == null) {
			throw new js__$Boot_HaxeError("This property is not watching currently.");
		}
		HxOverrides.remove(this._watchedProperties,propertyName);
		this.get_changed().execute(this,null);
	}
	currentSurfaceRemovedHandler(UnnamedParameter1,UnnamedParameter2) {
		this.forgetCurrentSurface();
	}
	currentSurfaceTargetRemovedHandler(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
		this.forgetCurrentSurface();
	}
	forgetCurrentSurface() {
		this._currentSurface = null;
		this._currentSurfaceRemovedSlot.dispose();
		this._currentSurfaceRemovedSlot = null;
		this._currentSurfaceTargetRemovedSlot.dispose();
		this._currentSurfaceTargetRemovedSlot = null;
	}
}
$hx_exports["minko"]["data"]["AbstractFilter"] = minko_data_AbstractFilter;
minko_data_AbstractFilter.__name__ = true;
Object.assign(minko_data_AbstractFilter.prototype, {
	__class__: minko_data_AbstractFilter
});
class minko_data_Binding extends minko_Enable_$uuid {
	constructor() {
		minko_Has_$uuid._hx_skip_constructor = true;
		super();
		minko_Has_$uuid._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.propertyName = "";
		this.source = 0;
		super._hx_constructor();
		this.enable_uuid();
	}
	setBinding(propertyName,source) {
		this.propertyName = propertyName;
		this.source = source;
		return this;
	}
}
$hx_exports["minko"]["data"]["Binding"] = minko_data_Binding;
minko_data_Binding.__name__ = true;
minko_data_Binding.__super__ = minko_Enable_$uuid;
Object.assign(minko_data_Binding.prototype, {
	__class__: minko_data_Binding
});
class minko_data_MacroBinding extends minko_data_Binding {
	constructor() {
		super();
		this.minValue = -Infinity;
		this.maxValue = Infinity;
	}
	setBindingMinMax(min,max) {
		this.minValue = min;
		this.maxValue = max;
	}
	dispose() {
	}
}
$hx_exports["minko"]["data"]["MacroBinding"] = minko_data_MacroBinding;
minko_data_MacroBinding.__name__ = true;
minko_data_MacroBinding.__super__ = minko_data_Binding;
Object.assign(minko_data_MacroBinding.prototype, {
	__class__: minko_data_MacroBinding
});
class minko_data_BindingMapBase extends minko_Enable_$uuid {
	constructor() {
		super();
		this.defaultValues = new minko_data_Store();
		this.bindings = new haxe_ds_StringMap();
	}
	setBindingsAndStore(bindings,defaultValues) {
		this.bindings = bindings;
		this.defaultValues = defaultValues;
	}
	dispose() {
	}
	static copyFrom(t,m) {
		t.bindings = new haxe_ds_StringMap();
		var k = m.bindings.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var _this = t.bindings;
			var _this1 = m.bindings;
			var value = __map_reserved[k1] != null ? _this1.getReserved(k1) : _this1.h[k1];
			if(__map_reserved[k1] != null) {
				_this.setReserved(k1,value);
			} else {
				_this.h[k1] = value;
			}
		}
		t.defaultValues = new minko_data_Store();
		t.defaultValues.copyFrom(m.defaultValues,true);
		return t;
	}
}
$hx_exports["minko"]["data"]["BindingMapBase"] = minko_data_BindingMapBase;
minko_data_BindingMapBase.__name__ = true;
minko_data_BindingMapBase.__super__ = minko_Enable_$uuid;
Object.assign(minko_data_BindingMapBase.prototype, {
	__class__: minko_data_BindingMapBase
});
class minko_data_MacroBindingMap extends minko_data_BindingMapBase {
	constructor() {
		super();
		this.types = new haxe_ds_StringMap();
		this.enable_uuid();
	}
	static copyFrom2(t,m) {
		minko_data_BindingMapBase.copyFrom(t,m);
		var ts = (js_Boot.__cast(m , minko_data_MacroBindingMap)).types;
		var key = ts.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = t.types;
			var value = __map_reserved[key1] != null ? ts.getReserved(key1) : ts.h[key1];
			if(__map_reserved[key1] != null) {
				_this.setReserved(key1,value);
			} else {
				_this.h[key1] = value;
			}
		}
		return t;
	}
	static stringToMacroType(s) {
		if(s == "int") {
			return 1;
		}
		if(s == "int2") {
			return 2;
		}
		if(s == "int3") {
			return 3;
		}
		if(s == "int4") {
			return 4;
		}
		if(s == "float") {
			return 9;
		}
		if(s == "float2") {
			return 10;
		}
		if(s == "float3") {
			return 11;
		}
		if(s == "float4") {
			return 12;
		}
		if(s == "bool") {
			return 5;
		}
		if(s == "bool2") {
			return 6;
		}
		if(s == "bool3") {
			return 7;
		}
		if(s == "bool4") {
			return 8;
		}
		return 0;
	}
}
$hx_exports["minko"]["data"]["MacroBindingMap"] = minko_data_MacroBindingMap;
minko_data_MacroBindingMap.__name__ = true;
minko_data_MacroBindingMap.__super__ = minko_data_BindingMapBase;
Object.assign(minko_data_MacroBindingMap.prototype, {
	__class__: minko_data_MacroBindingMap
});
class minko_data_Collection {
	constructor(name) {
		this._name = name;
		this._items = [];
		this._itemAdded = new minko_signal_Signal2();
		this._itemRemoved = new minko_signal_Signal2();
	}
	dispose() {
		if(this._itemAdded != null) {
			this._itemAdded.dispose();
		}
		this._itemAdded = null;
		if(this._itemRemoved != null) {
			this._itemRemoved.dispose();
		}
		this._itemRemoved = null;
		this._items = null;
	}
	get_name() {
		return this._name;
	}
	get_items() {
		return this._items;
	}
	get_itemAdded() {
		return this._itemAdded;
	}
	get_itemRemoved() {
		return this._itemRemoved;
	}
	get_front() {
		return this._items[0];
	}
	get_back() {
		return this._items[this._items.length - 1];
	}
	insert(position,provider) {
		this._items.splice(position,0,provider);
		this._itemAdded.execute(this,provider);
		return this;
	}
	erase(position) {
		var provider = this._items[position];
		return this.remove(provider);
	}
	remove(provider) {
		HxOverrides.remove(this._items,provider);
		this._itemRemoved.execute(this,provider);
		return this;
	}
	pushBack(provider) {
		this._items.push(provider);
		this._itemAdded.execute(this,provider);
		return this;
	}
	popBack() {
		var provider = this._items.pop();
		this._itemRemoved.execute(this,provider);
		return this;
	}
	static create(name) {
		return new minko_data_Collection(name);
	}
	static createbyCollection(collection,deepCopy) {
		if(deepCopy == null) {
			deepCopy = false;
		}
		var copy = minko_data_Collection.create(collection._name);
		if(deepCopy) {
			var _g = 0;
			var _g1 = collection._items;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				copy._items.push(minko_data_Provider.createbyProvider(item));
			}
		} else {
			copy._items = collection._items;
		}
		return copy;
	}
}
$hx_exports["minko"]["data"]["Collection"] = minko_data_Collection;
minko_data_Collection.__name__ = true;
Object.assign(minko_data_Collection.prototype, {
	__class__: minko_data_Collection
});
class minko_data_Provider extends minko_Enable_$uuid {
	constructor() {
		super();
		this._values = new haxe_ds_StringMap();
		this._propertyAdded = new minko_signal_Signal2();
		this._propertyChanged = new minko_signal_Signal2();
		this._propertyRemoved = new minko_signal_Signal2();
		this.enable_uuid();
	}
	dispose() {
		if(this._values != null) {
			this._values = null;
		}
		if(this._propertyAdded != null) {
			this._propertyAdded.dispose();
		}
		if(this._propertyChanged != null) {
			this._propertyChanged.dispose();
		}
		if(this._propertyRemoved != null) {
			this._propertyRemoved.dispose();
		}
		this._propertyAdded = null;
		this._propertyChanged = null;
		this._propertyRemoved = null;
	}
	front() {
		var _this = this._values;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys()).next();
	}
	hasProperty(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	keys() {
		return this._values.keys();
	}
	get_propertyAdded() {
		return this._propertyAdded;
	}
	get_propertyChanged() {
		return this._propertyChanged;
	}
	get_propertyRemoved() {
		return this._propertyRemoved;
	}
	get(propertyName) {
		return this.getUnsafePointer(propertyName).get_value();
	}
	getUnsafePointer(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	setUnsafePointer(propertyName,value) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			_this.setReserved(propertyName,value);
		} else {
			_this.h[propertyName] = value;
		}
		return;
	}
	set(propertyName,value) {
		if(this.hasProperty(propertyName)) {
			var ptr = this.getUnsafePointer(propertyName).get_value();
			var changed = ptr != value;
			this.getUnsafePointer(propertyName).set_value(value);
			if(changed) {
				this._propertyChanged.execute(this,propertyName);
			}
		} else {
			this.setUnsafePointer(propertyName,new minko_data_UnsafePointer(value));
			this._propertyAdded.execute(this,propertyName);
			this._propertyChanged.execute(this,propertyName);
		}
		return this;
	}
	setProvider(values) {
		var p = values.keys();
		while(p.hasNext()) {
			var p1 = p.next();
			var value = __map_reserved[p1] != null ? values.getReserved(p1) : values.h[p1];
			this.getUnsafePointer(p1).set_value(value);
		}
	}
	propertyHasType(propertyName) {
		return this.getUnsafePointer(propertyName).get_value() != null;
	}
	clear() {
		this._values = new haxe_ds_StringMap();
	}
	unset(propertyName) {
		var _this = this._values;
		var propertyIt = __map_reserved[propertyName] != null ? _this.getReserved(propertyName) : _this.h[propertyName];
		if(propertyIt != null) {
			this._values.remove(propertyName);
			this._propertyRemoved.execute(this,propertyName);
		}
	}
	copyFrom(source) {
		var nameAnd = source.keys();
		while(nameAnd.hasNext()) {
			var nameAnd1 = nameAnd.next();
			this.set(nameAnd1,source.get(nameAnd1));
		}
		return this;
	}
	getValue(propertyName) {
		return this.getUnsafePointer(propertyName).get_value();
	}
	setValue(propertyName,value) {
		this.getUnsafePointer(propertyName).set_value(value);
	}
	static create() {
		var provider = new minko_data_Provider();
		return provider;
	}
	static createbyUuid(uuid) {
		var provider = new minko_data_Provider();
		provider.set_uuid(uuid);
		return provider;
	}
	static createbyStringMap(values) {
		var provider = new minko_data_Provider();
		provider.setProvider(values);
		return provider;
	}
	static createbyProvider(source) {
		var provider = minko_data_Provider.create();
		return provider.copyFrom(source);
	}
}
$hx_exports["minko"]["data"]["Provider"] = minko_data_Provider;
minko_data_Provider.__name__ = true;
minko_data_Provider.__super__ = minko_Enable_$uuid;
Object.assign(minko_data_Provider.prototype, {
	__class__: minko_data_Provider
});
class minko_data_ResolvedBinding {
	constructor(binding,propertyName,store) {
		this.binding = binding;
		this.propertyName = propertyName;
		this.store = store;
	}
}
$hx_exports["minko"]["data"]["ResolvedBinding"] = minko_data_ResolvedBinding;
minko_data_ResolvedBinding.__name__ = true;
Object.assign(minko_data_ResolvedBinding.prototype, {
	__class__: minko_data_ResolvedBinding
});
class minko_data_Store extends minko_Enable_$uuid {
	constructor() {
		super();
		this.enable_uuid();
		this.initialize();
	}
	initialize() {
		this._providers = [];
		this._collections = [];
		this._lengthProvider = null;
		this._propertyAdded = new minko_signal_Signal3();
		this._propertyRemoved = new minko_signal_Signal3();
		this._propertyChanged = new minko_signal_Signal3();
		this._propertyNameToChangedSignal = new haxe_ds_StringMap();
		this._propertyNameToAddedSignal = new haxe_ds_StringMap();
		this._propertyNameToRemovedSignal = new haxe_ds_StringMap();
		this._propertySlots = new haxe_ds_ObjectMap();
		this._collectionItemAddedSlots = new haxe_ds_ObjectMap();
		this._collectionItemRemovedSlots = new haxe_ds_ObjectMap();
	}
	dispose() {
		if(this._collectionItemAddedSlots != null) {
			var c = this._collectionItemAddedSlots.keys();
			while(c.hasNext()) {
				var c1 = c.next();
				this.removeCollection(c1);
			}
		}
		if(this._collectionItemRemovedSlots != null) {
			var c2 = this._collectionItemRemovedSlots.keys();
			while(c2.hasNext()) {
				var c3 = c2.next();
				this.removeCollection(c3);
			}
		}
		if(this._collections != null) {
			var _g = 0;
			var _g1 = this._collections;
			while(_g < _g1.length) {
				var c4 = _g1[_g];
				++_g;
				this.removeCollection(c4);
			}
		}
		this._collectionItemRemovedSlots = null;
		this._collectionItemAddedSlots = null;
		this._collections = null;
		if(this._providers != null) {
			var _g2 = 0;
			var _g11 = this._providers;
			while(_g2 < _g11.length) {
				var p = _g11[_g2];
				++_g2;
				this.removeProvider(p);
			}
		}
		if(this._propertyNameToChangedSignal != null) {
			var _this = this._propertyNameToChangedSignal;
			var it = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(it.hasNext()) {
				var it1 = it.next();
				if(it1 != null) {
					it1.dispose();
				}
			}
		}
		if(this._propertyNameToAddedSignal != null) {
			var _this1 = this._propertyNameToAddedSignal;
			var it2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(it2.hasNext()) {
				var it3 = it2.next();
				if(it3 != null) {
					it3.dispose();
				}
			}
		}
		if(this._propertyNameToRemovedSignal != null) {
			var _this2 = this._propertyNameToRemovedSignal;
			var it4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(it4.hasNext()) {
				var it5 = it4.next();
				if(it5 != null) {
					it5.dispose();
				}
			}
		}
		if(this._propertySlots != null) {
			var _ps = this._propertySlots.iterator();
			while(_ps.hasNext()) {
				var _ps1 = _ps.next();
				var _g3 = 0;
				while(_g3 < _ps1.length) {
					var _p = _ps1[_g3];
					++_g3;
					_p.dispose();
				}
			}
		}
		this._propertyNameToChangedSignal = null;
		this._propertyNameToAddedSignal = null;
		this._propertyNameToRemovedSignal = null;
		this._propertySlots = null;
		this._providers = null;
	}
	propertyHasType(propertyName) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			throw new js__$Boot_HaxeError("");
		}
		return provider.propertyHasType(providerAndToken.second);
	}
	get(propertyName) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			throw new js__$Boot_HaxeError("");
		}
		return provider.get(providerAndToken.second);
	}
	getUnsafePointer(propertyName) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			return null;
		}
		return provider.getUnsafePointer(providerAndToken.second);
	}
	set(propertyName,value) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			throw new js__$Boot_HaxeError("");
		}
		provider.set(providerAndToken.second,value);
		return this;
	}
	get_propertyAdded() {
		return this._propertyAdded;
	}
	get_propertyRemoved() {
		return this._propertyRemoved;
	}
	get_propertyChanged() {
		return this._propertyChanged;
	}
	getPropertyAdded(propertyName) {
		return this.getOrInsertSignal(this._propertyNameToAddedSignal,propertyName);
	}
	getPropertyRemoved(propertyName) {
		return this.getOrInsertSignal(this._propertyNameToRemovedSignal,propertyName);
	}
	getPropertyChanged(propertyName) {
		return this.getOrInsertSignal(this._propertyNameToChangedSignal,propertyName);
	}
	get_providers() {
		return this._providers;
	}
	set_providers(v) {
		this._providers = v;
		return v;
	}
	get_collections() {
		return this._collections;
	}
	addProvider(provider) {
		this.doAddProvider(provider);
	}
	addProviderbyName(provider,collectionName) {
		this.addProviderToCollection(provider,collectionName);
	}
	removeProvider(provider) {
		this.doRemoveProvider(provider);
	}
	removeProviderbyName(provider,collectionName) {
		this.removeProviderFromCollection(provider,collectionName);
	}
	addCollection(collection) {
		var _gthis = this;
		this._collections.push(collection);
		var tmp = this._collectionItemAddedSlots;
		var tmp1 = collection.get_itemAdded().connect(function(UnnamedParameter1,provider) {
			_gthis.doAddProvider(provider,collection);
		});
		tmp.set(collection,tmp1);
		var tmp2 = this._collectionItemRemovedSlots;
		var tmp3 = collection.get_itemRemoved().connect(function(UnnamedParameter11,provider1) {
			_gthis.doRemoveProvider(provider1,collection);
		});
		tmp2.set(collection,tmp3);
		if(collection.get_items().length != 0) {
			var _g = 0;
			var _g1 = collection.get_items();
			while(_g < _g1.length) {
				var provider2 = _g1[_g];
				++_g;
				this.doAddProvider(provider2,collection);
			}
		} else {
			this.updateCollectionLength(collection);
		}
	}
	removeCollection(collection) {
		HxOverrides.remove(this._collections,collection);
		this._collectionItemAddedSlots.h[collection.__id__].dispose();
		this._collectionItemAddedSlots.remove(collection);
		this._collectionItemRemovedSlots.h[collection.__id__].dispose();
		this._collectionItemRemovedSlots.remove(collection);
		var _g = 0;
		var _g1 = collection.get_items();
		while(_g < _g1.length) {
			var provider = _g1[_g];
			++_g;
			this.doRemoveProvider(provider,collection);
		}
	}
	hasProperty(propertyName) {
		return this.getProviderByPropertyName(propertyName).first != null;
	}
	hasPropertyAddedSignal(propertyName) {
		var _this = this._propertyNameToAddedSignal;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	hasPropertyRemovedSignal(propertyName) {
		var _this = this._propertyNameToRemovedSignal;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	hasPropertyChangedSignal(propertyName) {
		var _this = this._propertyNameToChangedSignal;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	getProviderByPropertyName(propertyName) {
		var pos = propertyName.indexOf("[");
		if(pos != -1) {
			var collectionName = HxOverrides.substr(propertyName,0,pos);
			var _g = 0;
			var _g1 = this._collections;
			while(_g < _g1.length) {
				var collection = _g1[_g];
				++_g;
				if(collection.get_name() == collectionName) {
					var pos2 = propertyName.indexOf("]");
					var indexStr = HxOverrides.substr(propertyName,pos + 1,pos2 - pos - 1);
					var pos3 = indexStr.indexOf("-");
					var token = HxOverrides.substr(propertyName,pos2 + 2,null);
					if(pos3 != -1 && pos3 < pos2) {
						var _g2 = 0;
						var _g11 = collection.get_items();
						while(_g2 < _g11.length) {
							var provider = _g11[_g2];
							++_g2;
							if(provider.get_uuid() == indexStr && provider.hasProperty(token)) {
								return new minko_Tuple(provider,token);
							}
						}
					} else {
						var index = Std.parseInt(indexStr);
						if(index < collection.get_items().length) {
							var provider1 = collection.get_items()[index];
							if(provider1.hasProperty(token)) {
								return new minko_Tuple(provider1,token);
							}
						}
					}
					return new minko_Tuple(null,token);
				}
			}
		} else {
			var _g3 = 0;
			var _g12 = this._providers;
			while(_g3 < _g12.length) {
				var provider2 = _g12[_g3];
				++_g3;
				if(provider2.hasProperty(propertyName)) {
					return new minko_Tuple(provider2,propertyName);
				}
			}
		}
		return new minko_Tuple(null,propertyName);
	}
	doRemoveProvider(provider,collection) {
		HxOverrides.remove(this._providers,provider);
		var property = provider.keys();
		while(property.hasNext()) {
			var property1 = property.next();
			this.providerPropertyRemovedHandler(provider,collection,property1);
		}
		if(this._propertySlots.h.__keys__[provider.__id__] != null) {
			var _slots = this._propertySlots.h[provider.__id__];
			var _g = 0;
			while(_g < _slots.length) {
				var s = _slots[_g];
				++_g;
				s.dispose();
			}
			this._propertySlots.remove(provider);
		}
		if(collection == null) {
			var nameAndValue = provider.keys();
			while(nameAndValue.hasNext()) {
				var nameAndValue1 = nameAndValue.next();
				var tmp;
				var _this = this._propertyNameToChangedSignal;
				if(__map_reserved[nameAndValue1] != null ? _this.existsReserved(nameAndValue1) : _this.h.hasOwnProperty(nameAndValue1)) {
					var _this1 = this._propertyNameToChangedSignal;
					tmp = (__map_reserved[nameAndValue1] != null ? _this1.getReserved(nameAndValue1) : _this1.h[nameAndValue1]).get_numCallbacks() == 0;
				} else {
					tmp = false;
				}
				if(tmp) {
					this._propertyNameToChangedSignal.remove(nameAndValue1);
				}
			}
		} else {
			var providerIndex = collection.get_items().indexOf(provider);
			var prefix = collection.get_name() + "[" + providerIndex + "].";
			var nameAndValue2 = provider.keys();
			while(nameAndValue2.hasNext()) {
				var nameAndValue3 = nameAndValue2.next();
				var _this2 = this._propertyNameToChangedSignal;
				var key = prefix + nameAndValue3;
				if(__map_reserved[key] != null ? _this2.existsReserved(key) : _this2.h.hasOwnProperty(key)) {
					var _this3 = this._propertyNameToChangedSignal;
					var key1 = prefix + nameAndValue3;
					(__map_reserved[key1] != null ? _this3.getReserved(key1) : _this3.h[key1]).dispose();
					this._propertyNameToChangedSignal.remove(prefix + nameAndValue3);
				}
			}
			this.updateCollectionLength(collection);
			var _g1 = 0;
			var _g11 = collection.get_items();
			while(_g1 < _g11.length) {
				var provider1 = _g11[_g1];
				++_g1;
				var property2 = provider1.keys();
				while(property2.hasNext()) {
					var property3 = property2.next();
					this.executePropertySignal(provider1,collection,property3,this._propertyChanged,this._propertyNameToChangedSignal);
				}
			}
		}
	}
	formatPropertyName(collection,provider,propertyName,useUuid) {
		if(useUuid == null) {
			useUuid = false;
		}
		if(collection == null) {
			return propertyName;
		}
		if(useUuid) {
			return this.formatPropertyIndexName(collection,provider.get_uuid(),propertyName);
		}
		var it = collection.get_items().indexOf(provider);
		return this.formatPropertyIndexName(collection,it == null ? "null" : "" + it,propertyName);
	}
	formatPropertyIndexName(collection,index,propertyName) {
		if(collection == null) {
			return propertyName;
		}
		return collection.get_name() + "[" + index + "]." + propertyName;
	}
	executePropertySignal(provider,collection,propertyName,anyChangedSignal,propertyNameToSignal) {
		anyChangedSignal.execute(this,provider,propertyName);
		if(collection != null) {
			var formattedPropertyName = this.formatPropertyName(collection,provider,propertyName,true);
			if(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.existsReserved(formattedPropertyName) : propertyNameToSignal.h.hasOwnProperty(formattedPropertyName)) {
				(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.getReserved(formattedPropertyName) : propertyNameToSignal.h[formattedPropertyName]).execute(this,provider,propertyName);
			}
			formattedPropertyName = this.formatPropertyName(collection,provider,propertyName);
			if(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.existsReserved(formattedPropertyName) : propertyNameToSignal.h.hasOwnProperty(formattedPropertyName)) {
				(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.getReserved(formattedPropertyName) : propertyNameToSignal.h[formattedPropertyName]).execute(this,provider,propertyName);
			}
		} else if(__map_reserved[propertyName] != null ? propertyNameToSignal.existsReserved(propertyName) : propertyNameToSignal.h.hasOwnProperty(propertyName)) {
			(__map_reserved[propertyName] != null ? propertyNameToSignal.getReserved(propertyName) : propertyNameToSignal.h[propertyName]).execute(this,provider,propertyName);
		}
	}
	providerPropertyAddedHandler(provider,collection,propertyName) {
		this.executePropertySignal(provider,collection,propertyName,this._propertyAdded,this._propertyNameToAddedSignal);
		this.executePropertySignal(provider,collection,propertyName,this._propertyChanged,this._propertyNameToChangedSignal);
	}
	providerPropertyRemovedHandler(provider,collection,propertyName) {
		this.executePropertySignal(provider,collection,propertyName,this._propertyChanged,this._propertyNameToChangedSignal);
		this.executePropertySignal(provider,collection,propertyName,this._propertyRemoved,this._propertyNameToRemovedSignal);
		var formattedName = this.formatPropertyName(collection,provider,propertyName);
		var _this = this._propertyNameToAddedSignal;
		var it = __map_reserved[formattedName] != null ? _this.getReserved(formattedName) : _this.h[formattedName];
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToAddedSignal.remove(formattedName);
		}
		var _this1 = this._propertyNameToRemovedSignal;
		it = __map_reserved[formattedName] != null ? _this1.getReserved(formattedName) : _this1.h[formattedName];
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToRemovedSignal.remove(formattedName);
		}
		var _this2 = this._propertyNameToChangedSignal;
		it = __map_reserved[formattedName] != null ? _this2.getReserved(formattedName) : _this2.h[formattedName];
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToChangedSignal.remove(formattedName);
		}
		formattedName = this.formatPropertyName(collection,provider,propertyName,true);
		var _this3 = this._propertyNameToAddedSignal;
		it = __map_reserved[formattedName] != null ? _this3.getReserved(formattedName) : _this3.h[formattedName];
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToAddedSignal.remove(formattedName);
		}
		var _this4 = this._propertyNameToRemovedSignal;
		it = __map_reserved[formattedName] != null ? _this4.getReserved(formattedName) : _this4.h[formattedName];
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToRemovedSignal.remove(formattedName);
		}
		var _this5 = this._propertyNameToChangedSignal;
		it = __map_reserved[formattedName] != null ? _this5.getReserved(formattedName) : _this5.h[formattedName];
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToChangedSignal.remove(formattedName);
		}
	}
	addProviderToCollection(provider,collectionName) {
		var collectionIt = Lambda.find(this._collections,function(c) {
			return c.get_name() == collectionName;
		});
		var collection = null;
		if(collectionIt == null) {
			collection = minko_data_Collection.create(collectionName);
			this.addCollection(collection);
		} else {
			collection = collectionIt;
		}
		collection.pushBack(provider);
	}
	removeProviderFromCollection(provider,collectionName) {
		var collectionIt = Lambda.find(this._collections,function(c) {
			return c.get_name() == collectionName;
		});
		if(collectionIt == null) {
			throw new js__$Boot_HaxeError("collectionName = " + collectionName);
		}
		collectionIt.remove(provider);
	}
	doAddProvider(provider,collection) {
		var _gthis = this;
		this._providers.push(provider);
		this._propertySlots.set(provider,[provider.get_propertyAdded().connect(function(p,propertyName) {
			_gthis.providerPropertyAddedHandler(p,collection,propertyName);
		}),provider.get_propertyRemoved().connect(function(p1,propertyName1) {
			_gthis.providerPropertyRemovedHandler(p1,collection,propertyName1);
		}),provider.get_propertyChanged().connect(function(p2,propertyName2) {
			_gthis.executePropertySignal(p2,collection,propertyName2,_gthis._propertyChanged,_gthis._propertyNameToChangedSignal);
		})]);
		var property = provider.keys();
		while(property.hasNext()) {
			var property1 = property.next();
			this.providerPropertyAddedHandler(provider,collection,property1);
		}
		if(collection != null) {
			this.updateCollectionLength(collection);
		}
	}
	updateCollectionLength(collection) {
		if(this._lengthProvider == null) {
			this._lengthProvider = minko_data_Provider.create();
			this.doAddProvider(this._lengthProvider);
		}
		this._lengthProvider.set(collection.get_name() + ".length",collection.get_items().length);
	}
	copyFrom(store,deepCopy) {
		if(deepCopy == null) {
			deepCopy = false;
		}
		if(deepCopy) {
			var added = [];
			var _g = 0;
			var _g1 = store._collections;
			while(_g < _g1.length) {
				var collection = _g1[_g];
				++_g;
				added = added.concat(collection.get_items());
				this.addCollection(minko_data_Collection.createbyCollection(collection));
			}
			var _g2 = 0;
			var _g3 = store._providers;
			while(_g2 < _g3.length) {
				var provider = _g3[_g2];
				++_g2;
				var it = Lambda.has(added,provider);
				if(it == false) {
					this._providers.push(minko_data_Provider.createbyProvider(provider));
				}
			}
		} else {
			this._collections = [].concat(store._collections);
			this._providers = [].concat(store._providers);
			if(store._lengthProvider != null) {
				this._lengthProvider = minko_data_Provider.createbyProvider(store._lengthProvider);
			}
		}
		return this;
	}
	getOrInsertSignal(signals,propertyName) {
		var signal;
		if(!(__map_reserved[propertyName] != null ? signals.existsReserved(propertyName) : signals.h.hasOwnProperty(propertyName))) {
			signal = new minko_signal_Signal3();
			if(__map_reserved[propertyName] != null) {
				signals.setReserved(propertyName,signal);
			} else {
				signals.h[propertyName] = signal;
			}
		} else {
			signal = __map_reserved[propertyName] != null ? signals.getReserved(propertyName) : signals.h[propertyName];
		}
		return signal;
	}
	static getActualPropertyName(vars,propertyName) {
		var s = propertyName;
		var _g = 0;
		while(_g < vars.length) {
			var variableName = vars[_g];
			++_g;
			var pos = propertyName.indexOf("@{" + variableName.first + "}");
			if(pos != -1) {
				s = HxOverrides.substr(s,0,pos) + variableName.second + HxOverrides.substr(s,pos + variableName.first.length + 3,null);
				break;
			} else {
				pos = propertyName.indexOf("@" + variableName.first);
				if(pos != -1) {
					s = HxOverrides.substr(s,0,pos) + variableName.second + HxOverrides.substr(s,pos + variableName.first.length + 1,null);
					break;
				}
			}
		}
		return s;
	}
}
$hx_exports["minko"]["data"]["Store"] = minko_data_Store;
minko_data_Store.__name__ = true;
minko_data_Store.__super__ = minko_Enable_$uuid;
Object.assign(minko_data_Store.prototype, {
	__class__: minko_data_Store
});
class minko_data_UnsafePointerArrayBuffer {
	constructor() {
	}
	applyDone(value) {
		this.arrayBuffer = this.applyFunc(value);
	}
	static vecInts1(dataValue) {
		return [dataValue];
	}
	static vecInts2(dataValue) {
		return [dataValue.x,dataValue.y].map(function(v) {
			return Math.floor(v);
		});
	}
	static vecInts3(dataValue) {
		return [dataValue.x,dataValue.y,dataValue.z].map(function(v) {
			return Math.floor(v);
		});
	}
	static vecInts4(dataValue) {
		return [dataValue.x,dataValue.y,dataValue.z,dataValue.w].map(function(v) {
			return Math.floor(v);
		});
	}
	static vecFloats1(dataValue) {
		return [dataValue];
	}
	static vecFloats2(dataValue) {
		return [dataValue.x,dataValue.y];
	}
	static vecFloats3(dataValue) {
		return [dataValue.x,dataValue.y,dataValue.z];
	}
	static vecFloats4(dataValue) {
		return [dataValue.x,dataValue.y,dataValue.z,dataValue.w];
	}
	static matFloats(dataValue) {
		return [dataValue._00,dataValue._01,dataValue._02,dataValue._03,dataValue._10,dataValue._11,dataValue._12,dataValue._13,dataValue._20,dataValue._21,dataValue._22,dataValue._23,dataValue._30,dataValue._31,dataValue._32,dataValue._33];
	}
	static vecsInts1(dataValue) {
		return dataValue;
	}
	static vecsInts2(dataValue) {
		var tmp = [];
		var _g = 0;
		while(_g < dataValue.length) {
			var d = dataValue[_g];
			++_g;
			tmp = tmp.concat(minko_data_UnsafePointerArrayBuffer.vecInts2(d));
		}
		return tmp;
	}
	static vecsInts3(dataValue) {
		var tmp = [];
		var _g = 0;
		while(_g < dataValue.length) {
			var d = dataValue[_g];
			++_g;
			tmp = tmp.concat(minko_data_UnsafePointerArrayBuffer.vecInts3(d));
		}
		return tmp;
	}
	static vecsInts4(dataValue) {
		var tmp = [];
		var _g = 0;
		while(_g < dataValue.length) {
			var d = dataValue[_g];
			++_g;
			tmp = tmp.concat(minko_data_UnsafePointerArrayBuffer.vecInts4(d));
		}
		return tmp;
	}
	static vecsFloats1(dataValue) {
		return dataValue;
	}
	static vecsFloats2(dataValue) {
		var tmp = [];
		var _g = 0;
		while(_g < dataValue.length) {
			var d = dataValue[_g];
			++_g;
			tmp = tmp.concat(minko_data_UnsafePointerArrayBuffer.vecFloats2(d));
		}
		return tmp;
	}
	static vecsFloats3(dataValue) {
		var tmp = [];
		var _g = 0;
		while(_g < dataValue.length) {
			var d = dataValue[_g];
			++_g;
			tmp = tmp.concat(minko_data_UnsafePointerArrayBuffer.vecFloats3(d));
		}
		return tmp;
	}
	static vecsFloats4(dataValue) {
		var tmp = [];
		var _g = 0;
		while(_g < dataValue.length) {
			var d = dataValue[_g];
			++_g;
			tmp = tmp.concat(minko_data_UnsafePointerArrayBuffer.vecFloats4(d));
		}
		return tmp;
	}
	static matsFloats(dataValue) {
		var tmp = [];
		var _g = 0;
		while(_g < dataValue.length) {
			var d = dataValue[_g];
			++_g;
			tmp = tmp.concat(minko_data_UnsafePointerArrayBuffer.matFloats(d));
		}
		return tmp;
	}
}
minko_data_UnsafePointerArrayBuffer.__name__ = true;
Object.assign(minko_data_UnsafePointerArrayBuffer.prototype, {
	__class__: minko_data_UnsafePointerArrayBuffer
});
class minko_data_UnsafePointer {
	constructor(d) {
		this.v = d;
	}
	arrayBuffer() {
		return this.buffer.arrayBuffer;
	}
	set_value(v) {
		this.v = v;
		if(this.buffer != null) {
			this.buffer.applyDone(v);
		}
		return this.v;
	}
	get_value() {
		return this.v;
	}
}
minko_data_UnsafePointer.__name__ = true;
Object.assign(minko_data_UnsafePointer.prototype, {
	__class__: minko_data_UnsafePointer
});
class minko_file_AbstractParser {
	constructor() {
		this._progress = new minko_signal_Signal2();
		this._complete = new minko_signal_Signal();
		this._error = new minko_signal_Signal2();
	}
	dispose() {
	}
	get_progress() {
		return this._progress;
	}
	get_complete() {
		return this._complete;
	}
	get_error() {
		return this._error;
	}
	parse(filename,resolvedFilename,options,data,assetLibrary) {
	}
}
$hx_exports["minko"]["file"]["AbstractParser"] = minko_file_AbstractParser;
minko_file_AbstractParser.__name__ = true;
Object.assign(minko_file_AbstractParser.prototype, {
	__class__: minko_file_AbstractParser
});
class minko_file_AbstractASSIMPParser extends minko_file_AbstractParser {
	constructor() {
		super();
		this.createMeshSurface_id = 0;
		this._numDependencies = 0;
		this._numLoadedDependencies = 0;
		this._filename = "";
		this._assetLibrary = null;
		this._options = null;
		this._symbol = null;
		this._nodeToAiNode = new haxe_ds_ObjectMap();
		this._aiNodeToNode = new haxe_ds_ObjectMap();
		this._aiMeshToNode = new haxe_ds_ObjectMap();
		this._nameToNode = new haxe_ds_StringMap();
		this._nameToAnimMatrices = new haxe_ds_StringMap();
		this._alreadyAnimatedNodes = [];
		this._meshNames = [];
		this._textureFilenameToAssetName = new haxe_ds_StringMap();
		this._loaderCompleteSlots = new haxe_ds_ObjectMap();
		this._loaderErrorSlots = new haxe_ds_ObjectMap();
		this._validAssetNames = new haxe_ds_StringMap();
		this._aiMaterialToMaterial = new haxe_ds_ObjectMap();
		this._aiMeshToGeometry = new haxe_ds_ObjectMap();
		this._importer = null;
	}
	provideLoaders(importer) {
	}
	dispose() {
		this._importer = null;
	}
	parse(filename,resolvedFilename,options,data,assetLibrary) {
		this.nextParse(filename,resolvedFilename,options,data,assetLibrary,[]);
	}
	nextParse(filename,resolvedFilename,options,data,assetLibrary,buffers) {
		var _gthis = this;
		var pos = resolvedFilename.lastIndexOf("\\/");
		options = options.clone();
		if(pos > 0) {
			options.get_includePaths().push(resolvedFilename.substring(0,pos));
		}
		this._filename = filename;
		this._resolvedFilename = resolvedFilename;
		this._assetLibrary = assetLibrary;
		this._options = options;
		this.initImporter();
		var ioHandlerOptions = options.clone();
		ioHandlerOptions.set_loadAsynchronously(false);
		var ioHandler = new minko_file_IOHandler(ioHandlerOptions,this._assetLibrary,this._resolvedFilename);
		ioHandler.errorFunction(function(self,filename1,error) {
			_gthis._error.execute(_gthis,"MissingAssetDependency" + filename1 + error);
		});
		this._importer.set_ioHandler(ioHandler);
		var progressHandler = new assimp_ProgressHandler();
		progressHandler.progressFunction(function(progress) {
			_gthis.get_progress().execute(_gthis,progress);
		});
		this._importer.set_progressHandler(progressHandler);
		var scene = this.importScene(filename,resolvedFilename,options,data,assetLibrary,buffers);
		if(scene == null) {
			return;
		}
		haxe_Log.trace("parseDependencies",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 232, className : "minko.file.AbstractASSIMPParser", methodName : "nextParse"});
		this.parseDependencies(resolvedFilename,scene);
		if(this._numDependencies == 0) {
			haxe_Log.trace("allDependenciesLoaded",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 238, className : "minko.file.AbstractASSIMPParser", methodName : "nextParse"});
			this.allDependenciesLoaded(scene);
		}
	}
	importScene(filename,resolvedFilename,options,data,assetLibrary,buffers) {
		var scene = this._importer.readFileFromMemory(data,0,minko_file_File.getExtension(filename),buffers);
		if(scene == null) {
			this._error.execute(this,this._importer.getErrorString());
			return null;
		}
		return scene;
	}
	getPostProcessingFlags(scene,options) {
		if(scene.numMeshes == 0) {
			return 0;
		}
		var numMaterials = scene.numMaterials;
		var numTextures = scene.numTextures;
		var _g = 0;
		var _g1 = numMaterials;
		while(_g < _g1) {
			var materialId = _g++;
			var aiMat = scene.materials[materialId];
			var textureType = minko_file_AbstractASSIMPParser._textureTypeToName.keys();
			while(textureType.hasNext()) {
				var textureType1 = textureType.next();
				numTextures += aiMat.getMaterialTextureCount(textureType1);
			}
		}
		var flags = 2 | 64 | 512 | 262144 | 8388608 | 32768 | 8 | 2048 | 131072 | 1024 | 16;
		if(options.get_optimizeForRendering()) {
			flags |= 128;
		}
		var removeComponentFlags = 0;
		if(numMaterials == 0 || numTextures == 0) {
			removeComponentFlags |= 4;
		}
		var _this = this._importer;
		var szName = assimp_Assimp.AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE;
		var value = options.get_normalMaxSmoothingAngle();
		var _this1 = assimp_Importer.impl.properties;
		var key = assimp_Hash.superFastHash(szName);
		_this1.h[key] = value;
		var _this2 = this._importer;
		var _this3 = assimp_Importer.impl.properties;
		var key1 = assimp_Hash.superFastHash(assimp_Assimp.AI_CONFIG_PP_RVC_FLAGS);
		_this3.h[key1] = removeComponentFlags;
		if(!options.get_preserveMaterials()) {
			flags |= 4096;
		}
		return flags;
	}
	applyPostProcessing(scene,postProcessingFlags) {
		var processedScene = this._importer.applyPostProcessing(postProcessingFlags);
		return processedScene;
	}
	allDependenciesLoaded(scene) {
		var processedScene = scene;
		var postProcessingFlags = this.getPostProcessingFlags(scene,this._options);
		if(postProcessingFlags != 0) {
			processedScene = this.applyPostProcessing(scene,postProcessingFlags);
		}
		if(processedScene == null) {
			this._error.execute(this,this._importer.getErrorString());
			return;
		}
		haxe_Log.trace("convertScene",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 318, className : "minko.file.AbstractASSIMPParser", methodName : "allDependenciesLoaded"});
		this.convertScene(scene);
	}
	initImporter() {
		if(this._importer != null) {
			return;
		}
		this._importer = new assimp_Importer();
		this.provideLoaders(this._importer);
		var _this = this._importer;
		var szName = assimp_Assimp.AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS;
		var value = this._options.get_includeAnimation();
		var _this1 = assimp_Importer.impl.properties;
		var key = assimp_Hash.superFastHash(szName);
		_this1.h[key] = value;
	}
	convertScene(scene) {
		haxe_Log.trace("LOG_DEBUG" + (this._numDependencies + " dependencies loaded!"),{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 647, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_DEBUG"});
		var symbolRootName = minko_file_File.removePrefixPathFromFilename(this._filename);
		haxe_Log.trace("createNode",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 347, className : "minko.file.AbstractASSIMPParser", methodName : "convertScene"});
		this._symbol = this.createNode(scene,null,symbolRootName);
		haxe_Log.trace("createSceneTree",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 349, className : "minko.file.AbstractASSIMPParser", methodName : "convertScene"});
		this.createSceneTree(this._symbol,scene,scene.rootNode,this._options.get_assetLibrary());
		if(this._options.get_preserveMaterials()) {
			haxe_Log.trace("createUnusedMaterials",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 353, className : "minko.file.AbstractASSIMPParser", methodName : "convertScene"});
			this.createUnusedMaterials(scene,this._options.get_assetLibrary(),this._options);
		}
		haxe_Log.trace("createLights",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 360, className : "minko.file.AbstractASSIMPParser", methodName : "convertScene"});
		this.createLights(scene);
		haxe_Log.trace("createCameras",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 362, className : "minko.file.AbstractASSIMPParser", methodName : "convertScene"});
		this.createCameras(scene);
		if(this._options.get_includeAnimation()) {
			haxe_Log.trace("createSkins",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 366, className : "minko.file.AbstractASSIMPParser", methodName : "convertScene"});
			this.createSkins(scene);
			haxe_Log.trace("createAnimations",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 368, className : "minko.file.AbstractASSIMPParser", methodName : "convertScene"});
			this.createAnimations(scene,true);
		}
		haxe_Log.trace("applyFunc",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 382, className : "minko.file.AbstractASSIMPParser", methodName : "convertScene"});
		this.applyFunc(this._symbol,this._options.get_nodeFunction());
		if(this._options.get_includeAnimation()) {
			var animations = minko_scene_NodeSet.createbyNode(this._symbol).descendants(true).where(function(n) {
				return n.hasComponent(minko_component_AbstractAnimation);
			});
			var _g = 0;
			var _g1 = animations.get_nodes();
			while(_g < _g1.length) {
				var n1 = _g1[_g];
				++_g;
				if(this._options.get_startAnimation()) {
					var ani = n1.getComponent(minko_component_AbstractAnimation);
					ani.play();
				} else {
					var ani1 = n1.getComponent(minko_component_AbstractAnimation);
					ani1.stop();
				}
			}
		}
		if(this._numDependencies == this._numLoadedDependencies) {
			haxe_Log.trace("finalize",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 403, className : "minko.file.AbstractASSIMPParser", methodName : "convertScene"});
			this.finalize();
		}
	}
	createNode(scene,node,name) {
		var metadata = new minko_component_Metadata();
		if(node == null || !this.parseMetadata(scene,node,this._options,metadata.get_data())) {
			return minko_scene_Node.create(name);
		}
		var minkoNode = new minko_scene_Node();
		var uuidIt = metadata.has("minko_uuid");
		if(uuidIt != false) {
			minkoNode = minko_scene_Node.create(name);
			minkoNode.set_uuid(metadata.get("minko_uuid"));
		} else {
			minkoNode = minko_scene_Node.create(name);
		}
		var entry = metadata._data.keys();
		while(entry.hasNext()) {
			var entry1 = entry.next();
			(this._options.get_attributeFunction())(minkoNode,entry1,metadata.get(entry1));
		}
		minkoNode.addComponent(minko_component_Metadata.create(metadata.get_data()));
		return minkoNode;
	}
	createSceneTree(minkoNode,scene,ainode,assets) {
		minkoNode.addComponent(this.getTransformFromAssimp(ainode));
		var _g = 0;
		var _g1 = ainode.numMeshes;
		while(_g < _g1) {
			var j = _g++;
			var aimesh = scene.meshes[ainode.meshes[j]];
			if(aimesh == null) {
				continue;
			}
			this._aiMeshToNode.set(aimesh,minkoNode);
			this.createMeshSurface(minkoNode,scene,aimesh);
		}
		var _g2 = 0;
		var _g3 = ainode.numChildren;
		while(_g2 < _g3) {
			var i = _g2++;
			var aichild = ainode.children[i];
			if(aichild == null) {
				continue;
			}
			var childName = aichild.name;
			var childNode = this.createNode(scene,aichild,childName);
			this._nodeToAiNode.set(childNode,aichild);
			this._aiNodeToNode.set(aichild,childNode);
			if(childName != null) {
				var _this = this._nameToNode;
				if(__map_reserved[childName] != null) {
					_this.setReserved(childName,childNode);
				} else {
					_this.h[childName] = childNode;
				}
			}
			this.createSceneTree(childNode,scene,aichild,assets);
			minkoNode.addChild(childNode);
		}
	}
	parseMetadata(scene,ainode,options,metadata) {
		if(ainode.metaData == null) {
			return false;
		}
		var key = ainode.metaData.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var data = ainode.metaData.get(key1);
			var dataString = "";
			switch(data.type) {
			case 0:
				dataString = Std.string(data.data);
				break;
			case 1:
				dataString = Std.string(data.data);
				break;
			case 2:
				dataString = Std.string(data.data);
				break;
			case 3:
				dataString = Std.string(data.data);
				break;
			case 5:
				dataString = data.data;
				break;
			case 6:
				var vec3 = data.data;
				dataString = "<" + vec3.x + ", " + vec3.y + ", " + vec3.z + ">";
				break;
			default:
			}
			if(__map_reserved[key1] != null) {
				metadata.setReserved(key1,dataString);
			} else {
				metadata.h[key1] = dataString;
			}
		}
		return true;
	}
	applyFunc(node,func) {
		func(node);
		if(node != null) {
			var _g = 0;
			var _g1 = node.get_children();
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				this.applyFunc(n,func);
			}
		}
	}
	getTransformFromAssimp(ainode) {
		return minko_component_Transform.createbyMatrix4(this.convertMat4(ainode.transformation));
	}
	createMeshGeometry(minkoNode,mesh,meshName) {
		var existingGeometry = this._aiMeshToGeometry.h.__keys__[mesh.__id__] != null;
		if(existingGeometry != false) {
			return this._aiMeshToGeometry.h[mesh.__id__];
		}
		var vertexSize = 0;
		if(mesh.hasPositions()) {
			vertexSize += 3;
		}
		if(mesh.hasNormals()) {
			vertexSize += 3;
		}
		if(mesh.getNumUVChannels() > 0) {
			vertexSize += Math.floor(Math.min(mesh.getNumUVChannels() * 2,minko_file_AbstractASSIMPParser.MAX_NUM_UV_CHANNELS * 2));
		}
		if(mesh.hasVertexColors(0)) {
			vertexSize += 4;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = vertexSize * mesh.numVertices;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(0.0);
		}
		var vertexData = _g;
		var vId = 0;
		var _g3 = 0;
		var _g4 = mesh.numVertices;
		while(_g3 < _g4) {
			var vertexId = _g3++;
			if(mesh.hasPositions()) {
				var vec = mesh.vertices[vertexId];
				vertexData[vId++] = vec.x;
				vertexData[vId++] = vec.y;
				vertexData[vId++] = vec.z;
			}
			if(mesh.hasNormals()) {
				var vec1 = mesh.normals[vertexId];
				vertexData[vId++] = vec1.x;
				vertexData[vId++] = vec1.y;
				vertexData[vId++] = vec1.z;
			}
			var _g31 = 0;
			var _g41 = Math.floor(Math.min(mesh.getNumUVChannels(),minko_file_AbstractASSIMPParser.MAX_NUM_UV_CHANNELS));
			while(_g31 < _g41) {
				var i1 = _g31++;
				var vec2 = mesh.textureCoords[i1][vertexId];
				vertexData[vId++] = vec2.x;
				vertexData[vId++] = vec2.y;
			}
			if(mesh.hasVertexColors(0)) {
				var color = mesh.colors[0][vertexId];
				var x = color.x;
				var y = color.y;
				var z = color.z;
				var w = color.w;
				var this1 = new glm_Vec4Base();
				this1.x = x;
				this1.y = y;
				this1.z = z;
				this1.w = w;
				var packedColor = this1;
				vertexData[vId++] = packedColor.x;
				vertexData[vId++] = packedColor.y;
				vertexData[vId++] = packedColor.z;
				vertexData[vId++] = packedColor.w;
			}
		}
		var indices = null;
		var numIndices = mesh.numFaces * 3;
		if(this._options.get_optimizeForRendering() || numIndices <= Infinity) {
			indices = minko_file_AbstractASSIMPParser.createIndexBuffer(mesh,this._assetLibrary.get_context());
		} else {
			indices = minko_file_AbstractASSIMPParser.createIndexBuffer(mesh,this._assetLibrary.get_context());
		}
		var geometry = minko_geometry_Geometry.create();
		var vertexBuffer = minko_render_VertexBuffer.createbyData(this._assetLibrary.get_context(),vertexData);
		var attrOffset = 0;
		if(mesh.hasPositions()) {
			vertexBuffer.addAttribute("position",3,attrOffset);
			attrOffset += 3;
		}
		if(mesh.hasNormals()) {
			vertexBuffer.addAttribute("normal",3,attrOffset);
			attrOffset += 3;
		}
		var _g5 = 0;
		var _g6 = Math.floor(Math.min(mesh.getNumUVChannels(),minko_file_AbstractASSIMPParser.MAX_NUM_UV_CHANNELS));
		while(_g5 < _g6) {
			var i2 = _g5++;
			var attributeName = "uv" + (i2 > 0 ? i2 == null ? "null" : "" + i2 : "");
			vertexBuffer.addAttribute(attributeName,2,attrOffset);
			attrOffset += 2;
		}
		if(mesh.hasVertexColors(0)) {
			vertexBuffer.addAttribute("color",4,attrOffset);
			attrOffset += 4;
		}
		geometry.addVertexBuffer(vertexBuffer);
		geometry.set_indices(indices);
		geometry = (this._options.get_geometryFunction())(meshName,geometry);
		this._aiMeshToGeometry.set(mesh,geometry);
		this._assetLibrary.setGeometry(meshName,geometry);
		return geometry;
	}
	getValidAssetName(name) {
		var _this = this._validAssetNames;
		var validAssetNameIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(validAssetNameIt != false) {
			var _this1 = this._validAssetNames;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		}
		var validAssetName = name;
		validAssetName = minko_file_File.removePrefixPathFromFilename(validAssetName);
		var invalidSymbolRegex_r = new RegExp("[^a-zA-Z0-9_\\.-]+","g".split("u").join(""));
		validAssetName = validAssetName.replace(invalidSymbolRegex_r,"");
		var _this2 = this._validAssetNames;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,validAssetName);
		} else {
			_this2.h[name] = validAssetName;
		}
		return validAssetName;
	}
	getMaterialName(materialName) {
		return this.getValidAssetName(materialName);
	}
	getMeshName(meshName) {
		return this.getValidAssetName(meshName);
	}
	LOG_ERROR(arg) {
		throw new js__$Boot_HaxeError("LOG_ERROR" + arg);
	}
	LOG_WARNING(arg) {
		haxe_Log.trace("LOG_WARNING" + arg,{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 644, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_WARNING"});
	}
	LOG_DEBUG(arg) {
		haxe_Log.trace("LOG_DEBUG" + arg,{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 647, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_DEBUG"});
	}
	createMeshSurface(minkoNode,scene,mesh) {
		if(mesh == null) {
			return;
		}
		var meshName = this.getMeshName(mesh.name);
		var primitiveType = mesh.primitiveTypes;
		if(primitiveType != 4) {
			haxe_Log.trace("LOG_WARNING" + ("primitive type for mesh '" + meshName + "' is not TRIANGLE"),{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 644, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_WARNING"});
			return;
		}
		var realMeshName = meshName;
		while(Lambda.has(this._meshNames,realMeshName)) realMeshName = meshName + "_" + this.createMeshSurface_id++;
		this._meshNames.push(realMeshName);
		var aiMat = scene.materials[mesh.materialIndex];
		var geometry = this.createMeshGeometry(minkoNode,mesh,realMeshName);
		var material = this.createMaterial(aiMat);
		var effect = this.chooseEffectByShadingMode(aiMat);
		minkoNode.addComponent(minko_component_Surface.create(geometry,material,effect,"default",realMeshName));
	}
	createCameras(scene) {
		var _g = 0;
		var _g1 = scene.numCameras;
		while(_g < _g1) {
			var i = _g++;
			var aiCamera = scene.cameras[i];
			var aiPosition = aiCamera.position;
			var aiLookAt = aiCamera.lookAt;
			var aiUp = aiCamera.up;
			var cameraName = aiCamera.name;
			var cameraNode = cameraName != null ? this.findNode(cameraName) : null;
			if(cameraNode != null) {
				var half_fovy = Math.atan(Math.tan(aiCamera.horizontalFOV * .5) * aiCamera.aspect);
				cameraNode.addComponent(minko_component_PerspectiveCamera.create(aiCamera.aspect,half_fovy,aiCamera.clipPlaneNear,aiCamera.clipPlaneFar));
				if(!cameraNode.hasComponent(minko_component_Transform)) {
					cameraNode.addComponent(minko_component_Transform.create());
				}
			}
		}
	}
	createUnusedMaterials(scene,assetLibrary,options) {
		var _g = 0;
		var _g1 = scene.numMaterials;
		while(_g < _g1) {
			var i = _g++;
			var aiMaterial = scene.materials[i];
			this.createMaterial(aiMaterial);
		}
	}
	createLights(scene) {
		var _g = 0;
		var _g1 = scene.numLights;
		while(_g < _g1) {
			var i = _g++;
			var aiLight = scene.lights[i];
			var lightName = aiLight.name;
			if(aiLight.type == 0) {
				haxe_Log.trace("LOG_WARNING" + ("The type of the '" + lightName + "' has not been properly recognized."),{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 644, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_WARNING"});
				continue;
			}
			var lightNode = this.findNode(lightName);
			if(lightNode == null) {
				continue;
			}
			var aiDiffuseColor = aiLight.colorDiffuse;
			var aiDirection = aiLight.direction;
			var aiPosition = aiLight.position;
			if(Math.sqrt(aiDirection.x * aiDirection.x + aiDirection.y * aiDirection.y + aiDirection.z * aiDirection.z) > 0.0) {
				var x = aiDirection.x;
				var y = aiDirection.y;
				var z = aiDirection.z;
				var this1 = new glm_Vec3Base();
				this1.x = x;
				this1.y = y;
				this1.z = z;
				var direction = this1;
				var x1 = aiPosition.x;
				var y1 = aiPosition.y;
				var z1 = aiPosition.z;
				var this2 = new glm_Vec3Base();
				this2.x = x1;
				this2.y = y1;
				this2.z = z1;
				var position = this2;
				var transform = lightNode.getComponent(minko_component_Transform);
				if(transform != null) {
					var a = transform.get_matrix();
					var _r0c0 = a._00;
					var _r0c1 = a._10;
					var _r0c2 = a._20;
					var _r1c0 = a._01;
					var _r1c1 = a._11;
					var _r1c2 = a._21;
					var _r2c0 = a._02;
					var _r2c1 = a._22;
					var _r2c2 = a._22;
					var this3 = new glm_Mat3Base();
					this3._00 = _r0c0;
					this3._01 = _r1c0;
					this3._02 = _r2c0;
					this3._10 = _r0c1;
					this3._11 = _r1c1;
					this3._12 = _r2c1;
					this3._20 = _r0c2;
					this3._21 = _r1c2;
					this3._22 = _r2c2;
					var m = this3;
					var this4 = new glm_Vec3Base();
					this4.x = 0;
					this4.y = 0;
					this4.z = 0;
					var dest = this4;
					var x2 = direction.x;
					var y2 = direction.y;
					var z2 = direction.z;
					dest.x = m._00 * x2 + m._10 * y2 + m._20 * z2;
					dest.y = m._01 * x2 + m._11 * y2 + m._21 * z2;
					dest.z = m._02 * x2 + m._12 * y2 + m._22 * z2;
					direction = dest;
					var m1 = transform.get_matrix();
					var x3 = position.x;
					var y3 = position.y;
					var z3 = position.z;
					var this5 = new glm_Vec4Base();
					this5.x = x3;
					this5.y = y3;
					this5.z = z3;
					this5.w = 1.0;
					var v = this5;
					var this6 = new glm_Vec4Base();
					this6.x = 0;
					this6.y = 0;
					this6.z = 0;
					this6.w = 0;
					var dest1 = this6;
					var x4 = v.x;
					var y4 = v.y;
					var z4 = v.z;
					var w = v.w;
					dest1.x = m1._00 * x4 + m1._10 * y4 + m1._20 * z4 + m1._30 * w;
					dest1.y = m1._01 * x4 + m1._11 * y4 + m1._21 * z4 + m1._31 * w;
					dest1.z = m1._02 * x4 + m1._12 * y4 + m1._22 * z4 + m1._32 * w;
					dest1.w = m1._03 * x4 + m1._13 * y4 + m1._23 * z4 + m1._33 * w;
					var v1 = dest1;
					var x5 = v1.x;
					var y5 = v1.y;
					var z5 = v1.z;
					var this7 = new glm_Vec3Base();
					this7.x = x5;
					this7.y = y5;
					this7.z = z5;
					position = this7;
				} else {
					lightNode.addComponent(minko_component_Transform.create());
				}
				var this8 = new glm_Vec3Base();
				this8.x = 0;
				this8.y = 0;
				this8.z = 0;
				var dest2 = this8;
				dest2.x = position.x + direction.x;
				dest2.y = position.y + direction.y;
				dest2.z = position.z + direction.z;
				var lookAt = dest2;
				var this9 = new glm_Vec3Base();
				this9.x = 0;
				this9.y = 0;
				this9.z = 0;
				var b = this9;
				if(!(!(Math.abs(lookAt.x - b.x) >= glm_GLM.EPSILON || Math.abs(lookAt.y - b.y) >= glm_GLM.EPSILON || Math.abs(lookAt.z - b.z) >= glm_GLM.EPSILON))) {
					var this10 = new glm_Vec3Base();
					this10.x = 0;
					this10.y = 0;
					this10.z = 0;
					var dest3 = this10;
					var length = Math.sqrt(lookAt.x * lookAt.x + lookAt.y * lookAt.y + lookAt.z * lookAt.z);
					var mult = 0;
					if(length >= glm_GLM.EPSILON) {
						mult = 1 / length;
					}
					dest3.x = lookAt.x * mult;
					dest3.y = lookAt.y * mult;
					dest3.z = lookAt.z * mult;
					lookAt = dest3;
				} else {
					lookAt = lookAt;
				}
				var this11 = new glm_Vec3Base();
				this11.x = 0.0;
				this11.y = 1.0;
				this11.z = 0.0;
				var this12 = new glm_Mat4Base();
				this12._00 = 0;
				this12._01 = 0;
				this12._02 = 0;
				this12._03 = 0;
				this12._10 = 0;
				this12._11 = 0;
				this12._12 = 0;
				this12._13 = 0;
				this12._20 = 0;
				this12._21 = 0;
				this12._22 = 0;
				this12._23 = 0;
				this12._30 = 0;
				this12._31 = 0;
				this12._32 = 0;
				this12._33 = 0;
				var matrix = glm_GLM.lookAt(position,lookAt,this11,this12);
				transform.set_matrix(matrix);
			}
			var diffuse = 1.0;
			var specular = 1.0;
			var x6 = aiDiffuseColor.x;
			var y6 = aiDiffuseColor.y;
			var z6 = aiDiffuseColor.z;
			var this13 = new glm_Vec3Base();
			this13.x = x6;
			this13.y = y6;
			this13.z = z6;
			var color = this13;
			switch(aiLight.type) {
			case 1:
				var dir = minko_component_DirectionalLight.create(diffuse,specular);
				dir.set_color(color);
				lightNode.addComponent(dir);
				break;
			case 2:
				var point = minko_component_PointLight.create(diffuse,specular,aiLight.attenuationConstant,aiLight.attenuationLinear,aiLight.attenuationQuadratic);
				point.set_color(color);
				lightNode.addComponent(point);
				break;
			case 3:
				var spot = minko_component_SpotLight.create(aiLight.angleInnerCone,aiLight.angleOuterCone,diffuse,specular,aiLight.attenuationConstant,aiLight.attenuationLinear,aiLight.attenuationQuadratic);
				spot.set_color(color);
				lightNode.addComponent(spot);
				break;
			default:
			}
		}
	}
	findNode(name) {
		var _this = this._nameToNode;
		var foundNodeIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundNodeIt != false) {
			var _this1 = this._nameToNode;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	parseDependencies(filename,scene) {
		this._numDependencies = 0;
		var path = new assimp_format_AiMaterialTexture();
		var _g = 0;
		var _g1 = scene.numMaterials;
		while(_g < _g1) {
			var materialId = _g++;
			var aiMat = scene.materials[materialId];
			var textureType = minko_file_AbstractASSIMPParser._textureTypeToName.keys();
			while(textureType.hasNext()) {
				var textureType1 = textureType.next();
				var numTextures = aiMat.getMaterialTextureCount(textureType1);
				var _g2 = 0;
				var _g11 = numTextures;
				while(_g2 < _g11) {
					var textureId = _g2++;
					var texFound = aiMat.getMaterialTexture(textureType1,textureId,path);
					if(texFound) {
						var filename1 = path.file;
						if(filename1 == null) {
							continue;
						}
						var assetName = minko_file_File.removePrefixPathFromFilename(filename1);
						var _this = this._textureFilenameToAssetName;
						if(__map_reserved[filename1] != null) {
							_this.setReserved(filename1,assetName);
						} else {
							_this.h[filename1] = assetName;
						}
					}
				}
			}
		}
		this._numDependencies = Lambda.count(this._textureFilenameToAssetName);
		var filenameToAssetNamePair = this._textureFilenameToAssetName.keys();
		while(filenameToAssetNamePair.hasNext()) {
			var filenameToAssetNamePair1 = filenameToAssetNamePair.next();
			var _this1 = this._textureFilenameToAssetName;
			this.loadTexture(filenameToAssetNamePair1,__map_reserved[filenameToAssetNamePair1] != null ? _this1.getReserved(filenameToAssetNamePair1) : _this1.h[filenameToAssetNamePair1],this._options,scene);
		}
	}
	finalize() {
		Lambda.iter(this._loaderCompleteSlots,function(l) {
			l.dispose();
		});
		Lambda.iter(this._loaderErrorSlots,function(l1) {
			l1.dispose();
		});
		this._loaderCompleteSlots = new haxe_ds_ObjectMap();
		this._loaderErrorSlots = new haxe_ds_ObjectMap();
		this._assetLibrary.setSymbol(this._filename,this._symbol);
		this.get_complete().execute(this);
	}
	loadTexture(textureFilename,assetName,options,scene) {
		var textureParentPrefixPath = minko_file_File.extractPrefixPathFromFilename(this._resolvedFilename);
		var _gthis = this;
		var texturePrefixPath = minko_file_File.extractPrefixPathFromFilename(textureFilename);
		var loader = minko_file_Loader.create();
		loader.set_options(options.clone());
		loader.get_options().set_includePaths([textureParentPrefixPath + "/" + texturePrefixPath]);
		this._loaderCompleteSlots.set(loader,loader.get_complete().connect(function(l) {
			_gthis.textureCompleteHandler(l,scene);
		}));
		this._loaderErrorSlots.set(loader,loader.get_error().connect(function(textureLoader,error) {
			++_gthis._numLoadedDependencies;
			haxe_Log.trace("LOG_DEBUG" + ("Unable to find texture with filename '" + assetName + "'"),{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 647, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_DEBUG"});
			_gthis._error.execute(_gthis,"MissingTextureDependency" + assetName);
			if(_gthis._numDependencies == _gthis._numLoadedDependencies) {
				_gthis.allDependenciesLoaded(scene);
			}
		}));
		loader.queue(assetName).load();
	}
	textureCompleteHandler(loader,scene) {
		haxe_Log.trace("LOG_DEBUG" + (this._numLoadedDependencies + "/" + this._numDependencies + " texture(s) loaded"),{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 647, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_DEBUG"});
		++this._numLoadedDependencies;
		if(this._numDependencies == this._numLoadedDependencies) {
			this.allDependenciesLoaded(scene);
		}
	}
	getSkinNumFrames(aimesh) {
		var minkoMesh = this._aiMeshToNode.h[aimesh.__id__];
		var meshNode = minkoMesh.get_parent();
		var numFrames = 0;
		var _g = 0;
		var _g1 = aimesh.numBones;
		while(_g < _g1) {
			var boneId = _g++;
			var currentNode = this.findNode(aimesh.bones[boneId].name);
			while(currentNode != null) {
				var _this = this._nameToAnimMatrices;
				var key = currentNode.get_name();
				if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
					var _this1 = this._nameToAnimMatrices;
					var key1 = currentNode.get_name();
					var numNodeFrames = Lambda.count(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
					if(numFrames == 0) {
						numFrames = numNodeFrames;
					} else if(numFrames != numNodeFrames) {
						haxe_Log.trace("LOG_WARNING" + "Inconsistent number of frames between the different parts of a same mesh!",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 644, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_WARNING"});
						numFrames = Math.floor(Math.max(numFrames,numNodeFrames));
					}
				}
				currentNode = currentNode.get_parent();
				if(!(currentNode != meshNode)) {
					break;
				}
			}
		}
		return numFrames;
	}
	createSkins(aiscene) {
		if(this._options.get_skinningFramerate() == 0) {
			return;
		}
		this.sampleAnimations(aiscene);
		var _g = 0;
		var _g1 = aiscene.numMeshes;
		while(_g < _g1) {
			var meshId = _g++;
			this.createSkin(aiscene.meshes[meshId]);
		}
	}
	createSkin(aimesh) {
		if(aimesh == null || aimesh.numBones == 0) {
			return;
		}
		var meshName = aimesh.name;
		if(this._aiMeshToNode.h.__keys__[aimesh.__id__] == null) {
			return;
		}
		var supposedSkeletonRoot = this.getSkeletonRoot(aimesh);
		var meshNode = this._aiMeshToNode.h[aimesh.__id__];
		var numBones = aimesh.numBones;
		var numFrames = this.getSkinNumFrames(aimesh);
		if(numFrames == 0) {
			haxe_Log.trace("LOG_WARNING" + "Failed to flatten skinning information. Most likely involved nodes do not share a common animation.",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 644, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_WARNING"});
			return;
		}
		var duration = Math.floor(1e+3 * numFrames / this._options.get_skinningFramerate()) | 0;
		var skin = minko_geometry_Skin.create(numBones,duration,numFrames);
		var skeletonRoot = this.getSkeletonRoot(aimesh);
		var boneNodes = [];
		var _g = 0;
		var _g1 = numBones;
		while(_g < _g1) {
			var boneId = _g++;
			var bone = this.createBone(aimesh.bones[boneId]);
			var boneName = aimesh.bones[boneId].name;
			var _this = this._nameToNode;
			var node = __map_reserved[boneName] != null ? _this.getReserved(boneName) : _this.h[boneName];
			boneNodes.push(node);
			if(bone == null) {
				return;
			}
			var boneOffsetMatrix = bone.get_offsetMatrix();
			var _g2 = [];
			var _g11 = 0;
			var _g21 = numFrames;
			while(_g11 < _g21) {
				var i = _g11++;
				var this1 = new glm_Mat4Base();
				this1._00 = 0;
				this1._01 = 0;
				this1._02 = 0;
				this1._03 = 0;
				this1._10 = 0;
				this1._11 = 0;
				this1._12 = 0;
				this1._13 = 0;
				this1._20 = 0;
				this1._21 = 0;
				this1._22 = 0;
				this1._23 = 0;
				this1._30 = 0;
				this1._31 = 0;
				this1._32 = 0;
				this1._33 = 0;
				var dest = this1;
				dest._00 = 1;
				dest._10 = 0;
				dest._20 = 0;
				dest._30 = 0;
				dest._01 = 0;
				dest._11 = 1;
				dest._21 = 0;
				dest._31 = 0;
				dest._02 = 0;
				dest._12 = 0;
				dest._22 = 1;
				dest._32 = 0;
				dest._03 = 0;
				dest._13 = 0;
				dest._23 = 0;
				dest._33 = 1;
				_g2.push(dest);
			}
			var modelToRootMatrices = _g2;
			this.precomputeModelToRootMatrices(node,skeletonRoot,modelToRootMatrices);
			skin.setBone(boneId,bone);
			var _g3 = 0;
			var _g4 = numFrames;
			while(_g3 < _g4) {
				var frameId = _g3++;
				var a = modelToRootMatrices[frameId];
				var this2 = new glm_Mat4Base();
				this2._00 = 0;
				this2._01 = 0;
				this2._02 = 0;
				this2._03 = 0;
				this2._10 = 0;
				this2._11 = 0;
				this2._12 = 0;
				this2._13 = 0;
				this2._20 = 0;
				this2._21 = 0;
				this2._22 = 0;
				this2._23 = 0;
				this2._30 = 0;
				this2._31 = 0;
				this2._32 = 0;
				this2._33 = 0;
				var dest1 = this2;
				var _a;
				var _b;
				if(dest1 == a) {
					var this3 = new glm_Mat4Base();
					this3._00 = 0;
					this3._01 = 0;
					this3._02 = 0;
					this3._03 = 0;
					this3._10 = 0;
					this3._11 = 0;
					this3._12 = 0;
					this3._13 = 0;
					this3._20 = 0;
					this3._21 = 0;
					this3._22 = 0;
					this3._23 = 0;
					this3._30 = 0;
					this3._31 = 0;
					this3._32 = 0;
					this3._33 = 0;
					var dest2 = this3;
					dest2._00 = a._00;
					dest2._10 = a._10;
					dest2._20 = a._20;
					dest2._30 = a._30;
					dest2._01 = a._01;
					dest2._11 = a._11;
					dest2._21 = a._21;
					dest2._31 = a._31;
					dest2._02 = a._02;
					dest2._12 = a._12;
					dest2._22 = a._22;
					dest2._32 = a._32;
					dest2._03 = a._03;
					dest2._13 = a._13;
					dest2._23 = a._23;
					dest2._33 = a._33;
					_a = dest2;
					_b = boneOffsetMatrix;
				} else if(dest1 == boneOffsetMatrix) {
					_a = a;
					var this4 = new glm_Mat4Base();
					this4._00 = 0;
					this4._01 = 0;
					this4._02 = 0;
					this4._03 = 0;
					this4._10 = 0;
					this4._11 = 0;
					this4._12 = 0;
					this4._13 = 0;
					this4._20 = 0;
					this4._21 = 0;
					this4._22 = 0;
					this4._23 = 0;
					this4._30 = 0;
					this4._31 = 0;
					this4._32 = 0;
					this4._33 = 0;
					var dest3 = this4;
					dest3._00 = boneOffsetMatrix._00;
					dest3._10 = boneOffsetMatrix._10;
					dest3._20 = boneOffsetMatrix._20;
					dest3._30 = boneOffsetMatrix._30;
					dest3._01 = boneOffsetMatrix._01;
					dest3._11 = boneOffsetMatrix._11;
					dest3._21 = boneOffsetMatrix._21;
					dest3._31 = boneOffsetMatrix._31;
					dest3._02 = boneOffsetMatrix._02;
					dest3._12 = boneOffsetMatrix._12;
					dest3._22 = boneOffsetMatrix._22;
					dest3._32 = boneOffsetMatrix._32;
					dest3._03 = boneOffsetMatrix._03;
					dest3._13 = boneOffsetMatrix._13;
					dest3._23 = boneOffsetMatrix._23;
					dest3._33 = boneOffsetMatrix._33;
					_b = dest3;
				} else {
					_a = a;
					_b = boneOffsetMatrix;
				}
				dest1._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
				dest1._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
				dest1._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
				dest1._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
				dest1._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
				dest1._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
				dest1._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
				dest1._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
				dest1._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
				dest1._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
				dest1._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
				dest1._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
				dest1._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
				dest1._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
				dest1._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
				dest1._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
				var dest11 = dest1;
				skin.setMatrix(frameId,boneId,dest11);
			}
		}
		var skinning = minko_component_Skinning.create(skin.reorganizeByVertices(),this._options.get_skinningMethod(),this._assetLibrary.get_context(),skeletonRoot);
		meshNode.addComponent(skinning);
		haxe_Log.trace("skinned node: ",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 1053, className : "minko.file.AbstractASSIMPParser", methodName : "createSkin"});
		haxe_Log.trace(meshNode.get_name(),{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 1054, className : "minko.file.AbstractASSIMPParser", methodName : "createSkin"});
		haxe_Log.trace("\n",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 1055, className : "minko.file.AbstractASSIMPParser", methodName : "createSkin"});
		haxe_Log.trace("skinned node parent: ",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 1056, className : "minko.file.AbstractASSIMPParser", methodName : "createSkin"});
		haxe_Log.trace(meshNode.get_parent().get_name(),{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 1057, className : "minko.file.AbstractASSIMPParser", methodName : "createSkin"});
		haxe_Log.trace("\n",{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 1058, className : "minko.file.AbstractASSIMPParser", methodName : "createSkin"});
		meshNode.addComponent(minko_component_MasterAnimation.create());
		var irrelevantTransformNodes = [];
		var _g22 = 0;
		while(_g22 < boneNodes.length) {
			var boneNode = boneNodes[_g22];
			++_g22;
			var boneNodeDescendants = minko_scene_NodeSet.createbyNode(boneNode).descendants(true).where(function(descendant) {
				return descendant.hasComponent(minko_component_Transform);
			});
			var tmp = boneNodeDescendants.get_nodes().filter(function(n) {
				return !Lambda.has(irrelevantTransformNodes,n);
			});
			irrelevantTransformNodes = irrelevantTransformNodes.concat(tmp);
			var boneNodeParent = boneNode.get_parent();
			while(boneNodeParent != skeletonRoot) {
				if(!Lambda.has(irrelevantTransformNodes,boneNodeParent)) {
					irrelevantTransformNodes.push(boneNodeParent);
				}
				boneNodeParent = boneNodeParent.get_parent();
			}
		}
		var animatedNodes = minko_scene_NodeSet.createbyNode(skeletonRoot).descendants(true).where(function(descendant1) {
			if(!descendant1.hasComponent(minko_component_Animation)) {
				return descendant1.hasComponent(minko_component_Skinning);
			} else {
				return true;
			}
		});
		var _g31 = 0;
		var _g41 = animatedNodes.get_nodes().length;
		while(_g31 < _g41) {
			var i1 = _g31++;
			var animatedNode = animatedNodes.get_nodes()[i1];
			var animatedNodeDescendants = minko_scene_NodeSet.createbyNode(animatedNode).descendants(true).where(function(animatedNodeDescendant) {
				return animatedNodeDescendant.hasComponent(minko_component_Transform);
			});
			var tmp1 = animatedNodeDescendants.get_nodes().filter(function(n1) {
				return !Lambda.has(irrelevantTransformNodes,n1);
			});
			irrelevantTransformNodes = irrelevantTransformNodes.concat(tmp1);
		}
		var _g5 = 0;
		while(_g5 < irrelevantTransformNodes.length) {
			var irrelevantTransformNode = irrelevantTransformNodes[_g5];
			++_g5;
			var transform = irrelevantTransformNode.getComponent(minko_component_Transform);
			var this5 = new glm_Mat4Base();
			this5._00 = 0;
			this5._01 = 0;
			this5._02 = 0;
			this5._03 = 0;
			this5._10 = 0;
			this5._11 = 0;
			this5._12 = 0;
			this5._13 = 0;
			this5._20 = 0;
			this5._21 = 0;
			this5._22 = 0;
			this5._23 = 0;
			this5._30 = 0;
			this5._31 = 0;
			this5._32 = 0;
			this5._33 = 0;
			var dest4 = this5;
			dest4._00 = 1;
			dest4._10 = 0;
			dest4._20 = 0;
			dest4._30 = 0;
			dest4._01 = 0;
			dest4._11 = 1;
			dest4._21 = 0;
			dest4._31 = 0;
			dest4._02 = 0;
			dest4._12 = 0;
			dest4._22 = 1;
			dest4._32 = 0;
			dest4._03 = 0;
			dest4._13 = 0;
			dest4._23 = 0;
			dest4._33 = 1;
			transform.set_matrix(dest4);
		}
	}
	getSkeletonRoot(aimesh) {
		var skeletonRoot = null;
		var boneAncestor = this.getBoneCommonAncestor(aimesh);
		var currentNode = boneAncestor;
		while(currentNode != null) {
			var _this = this._nameToAnimMatrices;
			var key = currentNode.get_name();
			if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
				skeletonRoot = currentNode;
			}
			currentNode = currentNode.get_parent();
		}
		if(skeletonRoot != null) {
			if(skeletonRoot.get_parent() != null) {
				return skeletonRoot.get_parent();
			} else {
				return this._symbol;
			}
		} else {
			return boneAncestor;
		}
	}
	getBoneCommonAncestor(aimesh) {
		if(aimesh != null && aimesh.numBones > 0) {
			var bonePath = [];
			var minDepth = 2147483647;
			var _g = 0;
			var _g1 = aimesh.numBones;
			while(_g < _g1) {
				var boneId = _g++;
				var boneNode = this.findNode(aimesh.bones[boneId].name);
				if(boneNode == null) {
					continue;
				}
				var tmp = [];
				bonePath.push(tmp);
				var currentNode = boneNode;
				while(currentNode != null) {
					tmp.push(currentNode);
					currentNode = currentNode.get_parent();
				}
				tmp.reverse();
				if(tmp.length < minDepth) {
					minDepth = tmp.length;
				}
			}
			if(bonePath.length == 0) {
				return this._symbol;
			}
			var _g2 = 0;
			var _g3 = minDepth;
			while(_g2 < _g3) {
				var d = _g2++;
				var node = bonePath[0][d];
				var isCommon = true;
				var boneId1 = 1;
				while(boneId1 < aimesh.numBones && isCommon) {
					if(bonePath[boneId1][d] != node) {
						isCommon = false;
						break;
					}
					++boneId1;
				}
				if(!isCommon) {
					if(d > 0) {
						return bonePath[0][d - 1];
					} else {
						return this._symbol;
					}
				}
			}
		}
		return this._symbol;
	}
	precomputeModelToRootMatrices(node,root,modelToRootMatrices) {
		var transformsUpToRoot = [];
		var currentNode = node;
		while(currentNode != null) {
			var currentName = currentNode.get_name();
			var tmp = new minko_Tuple3(null,null,null);
			transformsUpToRoot.push(tmp);
			tmp.first = currentNode;
			tmp.second = [];
			tmp.thiree = null;
			var _this = this._nameToAnimMatrices;
			var foundAnimMatricesIt = __map_reserved[currentName] != null ? _this.existsReserved(currentName) : _this.h.hasOwnProperty(currentName);
			if(foundAnimMatricesIt != false) {
				var _this1 = this._nameToAnimMatrices;
				tmp.second = __map_reserved[currentName] != null ? _this1.getReserved(currentName) : _this1.h[currentName];
			} else if(currentNode.hasComponent(minko_component_Transform)) {
				var t = currentNode.getComponent(minko_component_Transform);
				tmp.thiree = t.get_matrix();
			}
			currentNode = currentNode.get_parent();
			if(!(currentNode != root)) {
				break;
			}
		}
		var numFrames = modelToRootMatrices.length;
		var _g = 0;
		var _g1 = numFrames;
		while(_g < _g1) {
			var frameId = _g++;
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			dest._00 = 1;
			dest._10 = 0;
			dest._20 = 0;
			dest._30 = 0;
			dest._01 = 0;
			dest._11 = 1;
			dest._21 = 0;
			dest._31 = 0;
			dest._02 = 0;
			dest._12 = 0;
			dest._22 = 1;
			dest._32 = 0;
			dest._03 = 0;
			dest._13 = 0;
			dest._23 = 0;
			dest._33 = 1;
			var modelToRoot = dest;
			var _g2 = 0;
			while(_g2 < transformsUpToRoot.length) {
				var trfInfo = transformsUpToRoot[_g2];
				++_g2;
				var animMatrices = trfInfo.second;
				var matrix = trfInfo.thiree;
				if(animMatrices.length > 0) {
					matrix = animMatrices[Math.floor(Math.min(frameId,animMatrices.length - 1))];
					var this2 = new glm_Mat4Base();
					this2._00 = 0;
					this2._01 = 0;
					this2._02 = 0;
					this2._03 = 0;
					this2._10 = 0;
					this2._11 = 0;
					this2._12 = 0;
					this2._13 = 0;
					this2._20 = 0;
					this2._21 = 0;
					this2._22 = 0;
					this2._23 = 0;
					this2._30 = 0;
					this2._31 = 0;
					this2._32 = 0;
					this2._33 = 0;
					var dest1 = this2;
					var _a;
					var _b;
					if(dest1 == matrix) {
						var this3 = new glm_Mat4Base();
						this3._00 = 0;
						this3._01 = 0;
						this3._02 = 0;
						this3._03 = 0;
						this3._10 = 0;
						this3._11 = 0;
						this3._12 = 0;
						this3._13 = 0;
						this3._20 = 0;
						this3._21 = 0;
						this3._22 = 0;
						this3._23 = 0;
						this3._30 = 0;
						this3._31 = 0;
						this3._32 = 0;
						this3._33 = 0;
						var dest2 = this3;
						dest2._00 = matrix._00;
						dest2._10 = matrix._10;
						dest2._20 = matrix._20;
						dest2._30 = matrix._30;
						dest2._01 = matrix._01;
						dest2._11 = matrix._11;
						dest2._21 = matrix._21;
						dest2._31 = matrix._31;
						dest2._02 = matrix._02;
						dest2._12 = matrix._12;
						dest2._22 = matrix._22;
						dest2._32 = matrix._32;
						dest2._03 = matrix._03;
						dest2._13 = matrix._13;
						dest2._23 = matrix._23;
						dest2._33 = matrix._33;
						_a = dest2;
						_b = modelToRoot;
					} else if(dest1 == modelToRoot) {
						_a = matrix;
						var this4 = new glm_Mat4Base();
						this4._00 = 0;
						this4._01 = 0;
						this4._02 = 0;
						this4._03 = 0;
						this4._10 = 0;
						this4._11 = 0;
						this4._12 = 0;
						this4._13 = 0;
						this4._20 = 0;
						this4._21 = 0;
						this4._22 = 0;
						this4._23 = 0;
						this4._30 = 0;
						this4._31 = 0;
						this4._32 = 0;
						this4._33 = 0;
						var dest3 = this4;
						dest3._00 = modelToRoot._00;
						dest3._10 = modelToRoot._10;
						dest3._20 = modelToRoot._20;
						dest3._30 = modelToRoot._30;
						dest3._01 = modelToRoot._01;
						dest3._11 = modelToRoot._11;
						dest3._21 = modelToRoot._21;
						dest3._31 = modelToRoot._31;
						dest3._02 = modelToRoot._02;
						dest3._12 = modelToRoot._12;
						dest3._22 = modelToRoot._22;
						dest3._32 = modelToRoot._32;
						dest3._03 = modelToRoot._03;
						dest3._13 = modelToRoot._13;
						dest3._23 = modelToRoot._23;
						dest3._33 = modelToRoot._33;
						_b = dest3;
					} else {
						_a = matrix;
						_b = modelToRoot;
					}
					dest1._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
					dest1._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
					dest1._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
					dest1._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
					dest1._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
					dest1._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
					dest1._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
					dest1._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
					dest1._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
					dest1._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
					dest1._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
					dest1._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
					dest1._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
					dest1._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
					dest1._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
					dest1._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
					modelToRoot = dest1;
				} else if(matrix != null) {
					var this5 = new glm_Mat4Base();
					this5._00 = 0;
					this5._01 = 0;
					this5._02 = 0;
					this5._03 = 0;
					this5._10 = 0;
					this5._11 = 0;
					this5._12 = 0;
					this5._13 = 0;
					this5._20 = 0;
					this5._21 = 0;
					this5._22 = 0;
					this5._23 = 0;
					this5._30 = 0;
					this5._31 = 0;
					this5._32 = 0;
					this5._33 = 0;
					var dest4 = this5;
					var _a1;
					var _b1;
					if(dest4 == matrix) {
						var this6 = new glm_Mat4Base();
						this6._00 = 0;
						this6._01 = 0;
						this6._02 = 0;
						this6._03 = 0;
						this6._10 = 0;
						this6._11 = 0;
						this6._12 = 0;
						this6._13 = 0;
						this6._20 = 0;
						this6._21 = 0;
						this6._22 = 0;
						this6._23 = 0;
						this6._30 = 0;
						this6._31 = 0;
						this6._32 = 0;
						this6._33 = 0;
						var dest5 = this6;
						dest5._00 = matrix._00;
						dest5._10 = matrix._10;
						dest5._20 = matrix._20;
						dest5._30 = matrix._30;
						dest5._01 = matrix._01;
						dest5._11 = matrix._11;
						dest5._21 = matrix._21;
						dest5._31 = matrix._31;
						dest5._02 = matrix._02;
						dest5._12 = matrix._12;
						dest5._22 = matrix._22;
						dest5._32 = matrix._32;
						dest5._03 = matrix._03;
						dest5._13 = matrix._13;
						dest5._23 = matrix._23;
						dest5._33 = matrix._33;
						_a1 = dest5;
						_b1 = modelToRoot;
					} else if(dest4 == modelToRoot) {
						_a1 = matrix;
						var this7 = new glm_Mat4Base();
						this7._00 = 0;
						this7._01 = 0;
						this7._02 = 0;
						this7._03 = 0;
						this7._10 = 0;
						this7._11 = 0;
						this7._12 = 0;
						this7._13 = 0;
						this7._20 = 0;
						this7._21 = 0;
						this7._22 = 0;
						this7._23 = 0;
						this7._30 = 0;
						this7._31 = 0;
						this7._32 = 0;
						this7._33 = 0;
						var dest6 = this7;
						dest6._00 = modelToRoot._00;
						dest6._10 = modelToRoot._10;
						dest6._20 = modelToRoot._20;
						dest6._30 = modelToRoot._30;
						dest6._01 = modelToRoot._01;
						dest6._11 = modelToRoot._11;
						dest6._21 = modelToRoot._21;
						dest6._31 = modelToRoot._31;
						dest6._02 = modelToRoot._02;
						dest6._12 = modelToRoot._12;
						dest6._22 = modelToRoot._22;
						dest6._32 = modelToRoot._32;
						dest6._03 = modelToRoot._03;
						dest6._13 = modelToRoot._13;
						dest6._23 = modelToRoot._23;
						dest6._33 = modelToRoot._33;
						_b1 = dest6;
					} else {
						_a1 = matrix;
						_b1 = modelToRoot;
					}
					dest4._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
					dest4._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
					dest4._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
					dest4._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
					dest4._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
					dest4._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
					dest4._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
					dest4._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
					dest4._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
					dest4._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
					dest4._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
					dest4._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
					dest4._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
					dest4._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
					dest4._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
					dest4._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
					modelToRoot = dest4;
				}
			}
			modelToRootMatrices[frameId] = modelToRoot;
		}
	}
	createBone(aibone) {
		var boneName = aibone.name;
		var tmp;
		if(aibone != null) {
			var _this = this._nameToNode;
			tmp = (__map_reserved[boneName] != null ? _this.existsReserved(boneName) : _this.h.hasOwnProperty(boneName)) == false;
		} else {
			tmp = true;
		}
		if(tmp) {
			return null;
		}
		var offsetMatrix = this.convertMat4(aibone.offsetMatrix);
		var _g = [];
		var _g1 = 0;
		var _g2 = aibone.numWeights;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(0);
		}
		var boneVertexIds = _g;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = aibone.numWeights;
		while(_g4 < _g5) {
			var i1 = _g4++;
			_g3.push(0.0);
		}
		var boneVertexWeights = _g3;
		var _g6 = 0;
		var _g7 = aibone.numWeights;
		while(_g6 < _g7) {
			var i2 = _g6++;
			boneVertexIds[i2] = aibone.weights[i2].vertexId;
			boneVertexWeights[i2] = aibone.weights[i2].weight;
		}
		var _this1 = this._nameToNode;
		return minko_geometry_Bone.create(__map_reserved[boneName] != null ? _this1.getReserved(boneName) : _this1.h[boneName],offsetMatrix,boneVertexIds,boneVertexWeights);
	}
	sampleAnimations(scene) {
		this._nameToAnimMatrices = new haxe_ds_StringMap();
		if(scene == null) {
			return;
		}
		var _g = 0;
		var _g1 = scene.numAnimations;
		while(_g < _g1) {
			var animId = _g++;
			this.sampleAnimation(scene.animations[animId]);
		}
	}
	sampleAnimation(animation) {
		if(animation == null || animation.ticksPerSecond < 1e-6 || this._options.get_skinningFramerate() == 0) {
			return;
		}
		var numFrames = Math.floor(this._options.get_skinningFramerate() * animation.duration / animation.ticksPerSecond);
		numFrames = numFrames < 2 ? 2 : numFrames;
		var timeStep = animation.duration / (numFrames - 1);
		var _g = [];
		var _g1 = 0;
		var _g2 = numFrames;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(0.0);
		}
		var sampleTimes = _g;
		var _g3 = 1;
		var _g4 = numFrames;
		while(_g3 < _g4) {
			var frameId = _g3++;
			sampleTimes[frameId] = sampleTimes[frameId - 1] + timeStep;
		}
		var _g5 = 0;
		var _g6 = animation.numChannels;
		while(_g5 < _g6) {
			var channelId = _g5++;
			var nodeAnimation = animation.channels[channelId];
			var nodeName = nodeAnimation.nodeName;
			if(nodeName != null) {
				var _this = this._nameToAnimMatrices;
				var value = [];
				if(__map_reserved[nodeName] != null) {
					_this.setReserved(nodeName,value);
				} else {
					_this.h[nodeName] = value;
				}
				var _this1 = this._nameToAnimMatrices;
				this.sample(nodeAnimation,sampleTimes,__map_reserved[nodeName] != null ? _this1.getReserved(nodeName) : _this1.h[nodeName]);
			}
		}
	}
	sample(nodeAnimation,times,matrices) {
		var sample_position;
		var sample_scaling;
		var sample_rotation;
		var sample_rotationMatrix;
		var _g = [];
		var _g1 = 0;
		var _g2 = nodeAnimation.numPositionKeys;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(0.0);
		}
		var positionKeyTimeFactors = _g;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = nodeAnimation.numRotationKeys;
		while(_g4 < _g5) {
			var i1 = _g4++;
			_g3.push(0.0);
		}
		var rotationKeyTimeFactors = _g3;
		var _g6 = [];
		var _g7 = 0;
		var _g8 = nodeAnimation.numScalingKeys;
		while(_g7 < _g8) {
			var i2 = _g7++;
			_g6.push(0.0);
		}
		var scalingKeyTimeFactors = _g6;
		positionKeyTimeFactors = this.computeTimeFactors(nodeAnimation.numPositionKeys,nodeAnimation.positionKeys,positionKeyTimeFactors);
		rotationKeyTimeFactors = this.computeTimeFactors(nodeAnimation.numRotationKeys,nodeAnimation.rotationKeys,rotationKeyTimeFactors);
		scalingKeyTimeFactors = this.computeTimeFactors(nodeAnimation.numScalingKeys,nodeAnimation.scalingKeys,scalingKeyTimeFactors);
		var _g9 = 0;
		var _g10 = times.length;
		while(_g9 < _g10) {
			var frameId = _g9++;
			var time = times[frameId];
			sample_position = this.sampleVec3(nodeAnimation.positionKeys,positionKeyTimeFactors,time);
			sample_rotation = this.sampleQuat(nodeAnimation.rotationKeys,rotationKeyTimeFactors,time);
			var this1 = new glm_QuatBase();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this1.w = 1;
			var dest = this1;
			var length = Math.sqrt(sample_rotation.x * sample_rotation.x + sample_rotation.y * sample_rotation.y + sample_rotation.z * sample_rotation.z + sample_rotation.w * sample_rotation.w);
			var mult = 0;
			if(length >= glm_GLM.EPSILON) {
				mult = 1 / length;
			}
			dest.x = sample_rotation.x * mult;
			dest.y = sample_rotation.y * mult;
			dest.z = sample_rotation.z * mult;
			dest.w = sample_rotation.w * mult;
			sample_rotation = dest;
			if(Math.sqrt(sample_rotation.x * sample_rotation.x + sample_rotation.y * sample_rotation.y + sample_rotation.z * sample_rotation.z + sample_rotation.w * sample_rotation.w) == 0.0) {
				var this2 = new glm_Mat3Base();
				this2._00 = 0;
				this2._01 = 0;
				this2._02 = 0;
				this2._10 = 0;
				this2._11 = 0;
				this2._12 = 0;
				this2._20 = 0;
				this2._21 = 0;
				this2._22 = 0;
				var dest1 = this2;
				dest1._00 = 1;
				dest1._10 = 0;
				dest1._20 = 0;
				dest1._01 = 0;
				dest1._11 = 1;
				dest1._21 = 0;
				dest1._02 = 0;
				dest1._12 = 0;
				dest1._22 = 1;
				sample_rotationMatrix = dest1;
			} else {
				sample_rotationMatrix = assimp_format_Defs.mat3_cast(sample_rotation);
			}
			sample_scaling = this.sampleVec3(nodeAnimation.scalingKeys,scalingKeyTimeFactors,time);
			var arr_0 = sample_scaling.x * sample_rotationMatrix._00;
			var arr_1 = sample_scaling.y * sample_rotationMatrix._01;
			var arr_2 = sample_scaling.z * sample_rotationMatrix._02;
			var arr_3 = 0.0;
			var arr_4 = sample_scaling.x * sample_rotationMatrix._10;
			var arr_5 = sample_scaling.y * sample_rotationMatrix._11;
			var arr_6 = sample_scaling.z * sample_rotationMatrix._12;
			var arr_7 = 0.0;
			var arr_8 = sample_scaling.x * sample_rotationMatrix._20;
			var arr_9 = sample_scaling.y * sample_rotationMatrix._21;
			var arr_10 = sample_scaling.z * sample_rotationMatrix._22;
			var arr_11 = 0.0;
			var arr_12 = sample_position.x;
			var arr_13 = sample_position.y;
			var arr_14 = sample_position.z;
			var arr_15 = 1.0;
			var this3 = new glm_Mat4Base();
			this3._00 = arr_0;
			this3._01 = arr_1;
			this3._02 = arr_2;
			this3._03 = arr_3;
			this3._10 = arr_4;
			this3._11 = arr_5;
			this3._12 = arr_6;
			this3._13 = arr_7;
			this3._20 = arr_8;
			this3._21 = arr_9;
			this3._22 = arr_10;
			this3._23 = arr_11;
			this3._30 = arr_12;
			this3._31 = arr_13;
			this3._32 = arr_14;
			this3._33 = arr_15;
			var interpolated_matrix = this3;
			matrices[frameId] = interpolated_matrix;
		}
	}
	sampleVec3(keys,keyTimeFactors,time) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var output = this1;
		var numKeys = keyTimeFactors.length;
		var id = this.getIndexForTime(numKeys,keys,time);
		var value0 = keys[id].value;
		if(id == numKeys - 1) {
			var x = value0.x;
			var y = value0.y;
			var z = value0.z;
			var this2 = new glm_Vec3Base();
			this2.x = x;
			this2.y = y;
			this2.z = z;
			output = this2;
		} else {
			var w1 = (time - keys[id].time) * keyTimeFactors[id];
			var w0 = 1.0 - w1;
			var value1 = keys[id + 1].value;
			var x1 = w0 * value0.x + w1 * value1.x;
			var y1 = w0 * value0.y + w1 * value1.y;
			var z1 = w0 * value0.z + w1 * value1.z;
			var this3 = new glm_Vec3Base();
			this3.x = x1;
			this3.y = y1;
			this3.z = z1;
			output = this3;
		}
		return output;
	}
	sampleQuat(keys,keyTimeFactors,time) {
		var this1 = new glm_QuatBase();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 1;
		var output = this1;
		var numKeys = keyTimeFactors.length;
		var id = this.getIndexForTime(numKeys,keys,time);
		var value0 = keys[id].value;
		if(id == numKeys - 1) {
			var x = value0.w;
			var y = value0.x;
			var z = value0.y;
			var w = value0.z;
			var this2 = new glm_QuatBase();
			this2.x = x;
			this2.y = y;
			this2.z = z;
			this2.w = w;
			output = this2;
		} else {
			var w1 = (time - keys[id].time) * keyTimeFactors[id];
			var w0 = 1.0 - w1;
			var value1 = keys[id + 1].value;
			var interp = assimp_format_Defs.slerp(value0,value1,w1);
			output = interp;
		}
		return output;
	}
	computeTimeFactors(numKeys,keys,keyTimeFactors) {
		if(numKeys == 0 || keys == null) {
			return keyTimeFactors;
		}
		var _g = 0;
		var _g1 = numKeys - 1;
		while(_g < _g1) {
			var keyId = _g++;
			keyTimeFactors[keyId] = 1.0 / (keys[keyId + 1].time - keys[keyId].time + 1.401298E-45);
		}
		keyTimeFactors[numKeys - 1] = 1.0;
		return keyTimeFactors;
	}
	getIndexForTime(numKeys,keys,time) {
		if(numKeys == 0 || keys == null) {
			return 0;
		}
		var id = 0;
		var lowerId = 0;
		var upperId = numKeys - 1;
		while(upperId - lowerId > 1) {
			id = lowerId + upperId >> 1;
			if(keys[id].time > time) {
				upperId = id;
			} else {
				lowerId = id;
			}
		}
		return lowerId;
	}
	convertVec3(vec3) {
		return vec3;
	}
	convertQuat(quaternion) {
		return quaternion;
	}
	convertMat4(matrix) {
		var arr_0 = matrix._00;
		var arr_1 = matrix._01;
		var arr_2 = matrix._02;
		var arr_3 = matrix._03;
		var arr_4 = matrix._10;
		var arr_5 = matrix._11;
		var arr_6 = matrix._12;
		var arr_7 = matrix._13;
		var arr_8 = matrix._20;
		var arr_9 = matrix._21;
		var arr_10 = matrix._22;
		var arr_11 = matrix._23;
		var arr_12 = matrix._30;
		var arr_13 = matrix._31;
		var arr_14 = matrix._32;
		var arr_15 = matrix._33;
		var this1 = new glm_Mat4Base();
		this1._00 = arr_0;
		this1._01 = arr_4;
		this1._02 = arr_8;
		this1._03 = arr_12;
		this1._10 = arr_1;
		this1._11 = arr_5;
		this1._12 = arr_9;
		this1._13 = arr_13;
		this1._20 = arr_2;
		this1._21 = arr_6;
		this1._22 = arr_10;
		this1._23 = arr_14;
		this1._30 = arr_3;
		this1._31 = arr_7;
		this1._32 = arr_11;
		this1._33 = arr_15;
		var m = this1;
		return m;
	}
	createMaterial(aiMat) {
		var existingMaterial = this._aiMaterialToMaterial.h.__keys__[aiMat.__id__] != null;
		if(existingMaterial != false) {
			return this._aiMaterialToMaterial.h[aiMat.__id__];
		}
		var material = this.chooseMaterialByShadingMode(aiMat);
		if(aiMat == null) {
			return material;
		}
		var materialName = "";
		var rawMaterialName = "";
		if(aiMat.hasProperty(assimp_format_AiMatKeys.NAME)) {
			rawMaterialName = aiMat.getProperty(assimp_format_AiMatKeys.NAME).getStringValue();
			materialName = rawMaterialName;
		}
		materialName = this.getMaterialName(materialName);
		var blendingMode = this.getBlendingMode(aiMat);
		var srcBlendingMode = blendingMode & 255;
		var dstBlendingMode = blendingMode & 65280;
		material.get_data().set("blendingMode",blendingMode);
		material.get_data().set("blendingSource",srcBlendingMode);
		material.get_data().set("blendingDestination",dstBlendingMode);
		material.get_data().set("triangleCulling",this.getTriangleCulling(aiMat));
		material.get_data().set("wireframe",this.getWireframe(aiMat));
		if((blendingMode & 256) == 0) {
			material.get_data().set("priority",minko_render__$Priority_Priority_$Impl_$.TRANSPARENT);
			material.get_data().set("zSorted",true);
		} else {
			material.get_data().set("priority",minko_render__$Priority_Priority_$Impl_$.OPAQUE);
			material.get_data().set("zSorted",false);
		}
		var opacity = this.setScalarProperty(material,"opacity",aiMat,assimp_format_AiMatKeys.OPACITY,1.0);
		var shininess = this.setScalarProperty(material,"shininess",aiMat,assimp_format_AiMatKeys.SHININESS,0.0);
		var reflectivity = this.setScalarProperty(material,"reflectivity",aiMat,assimp_format_AiMatKeys.REFLECTIVITY,1.0);
		var shininessStr = this.setScalarProperty(material,"shininessStrength",aiMat,assimp_format_AiMatKeys.SHININESS_STRENGTH,1.0);
		var refractiveIdx = this.setScalarProperty(material,"refractiveIndex",aiMat,assimp_format_AiMatKeys.REFRACTI,1.0);
		var bumpScaling = this.setScalarProperty(material,"bumpScaling",aiMat,assimp_format_AiMatKeys.BUMPSCALING,1.0);
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 1;
		var defaultValue = this1;
		var diffuseColor = this.setColorProperty(material,"diffuseColor",aiMat,assimp_format_AiMatKeys.COLOR_DIFFUSE,defaultValue);
		var specularColor = this.setColorProperty(material,"specularColor",aiMat,assimp_format_AiMatKeys.COLOR_SPECULAR,defaultValue);
		var ambientColor = this.setColorProperty(material,"ambientColor",aiMat,assimp_format_AiMatKeys.COLOR_AMBIENT,defaultValue);
		var emissiveColor = this.setColorProperty(material,"emissiveColor",aiMat,assimp_format_AiMatKeys.COLOR_EMISSIVE,defaultValue);
		var reflectiveColor = this.setColorProperty(material,"reflectiveColor",aiMat,assimp_format_AiMatKeys.COLOR_REFLECTIVE,defaultValue);
		var transparentColor = this.setColorProperty(material,"transparentColor",aiMat,assimp_format_AiMatKeys.COLOR_TRANSPARENT,defaultValue);
		var epsilon = 0.1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var b = this2;
		var hasSpecular = (!(!(Math.abs(specularColor.x - b.x) >= glm_GLM.EPSILON || Math.abs(specularColor.y - b.y) >= glm_GLM.EPSILON || Math.abs(specularColor.z - b.z) >= glm_GLM.EPSILON || Math.abs(specularColor.w - b.w) >= glm_GLM.EPSILON)) && specularColor.w > 0.0 || aiMat.getMaterialTextureCount(2) >= 1) && shininess > 1.0 + epsilon;
		if(!hasSpecular) {
			material.get_data().unset("shininess");
			specularColor.w = 0.0;
		}
		var transparent = opacity > 0.0 && opacity < 1.0;
		if(transparent) {
			diffuseColor.w = opacity;
			if(hasSpecular) {
				specularColor.w = opacity;
			}
			ambientColor.w = opacity;
			emissiveColor.w = opacity;
			reflectiveColor.w = opacity;
			transparentColor.w = opacity;
			material.get_data().set("diffuseColor",diffuseColor);
			if(hasSpecular) {
				material.get_data().set("specularColor",specularColor);
			}
			material.get_data().set("ambientColor",ambientColor);
			material.get_data().set("emissiveColor",emissiveColor);
			material.get_data().set("reflectiveColor",reflectiveColor);
			material.get_data().set("transparentColor",transparentColor);
			this.enableTransparency(material);
		}
		var textureType = minko_file_AbstractASSIMPParser._textureTypeToName.keys();
		while(textureType.hasNext()) {
			var textureType1 = textureType.next();
			var textureName = minko_file_AbstractASSIMPParser._textureTypeToName.h[textureType1];
			var numTextures = aiMat.getMaterialTextureCount(textureType1);
			if(numTextures == 0) {
				continue;
			}
			var path = new assimp_format_AiMaterialTexture();
			if(aiMat.getMaterialTexture(textureType1,0,path)) {
				var textureFilename = path.file;
				var _this = this._textureFilenameToAssetName;
				var textureAssetNameIt = __map_reserved[textureFilename] != null ? _this.existsReserved(textureFilename) : _this.h.hasOwnProperty(textureFilename);
				if(textureAssetNameIt == false) {
					continue;
				}
				var _this1 = this._textureFilenameToAssetName;
				var textureAssetName = __map_reserved[textureFilename] != null ? _this1.getReserved(textureFilename) : _this1.h[textureFilename];
				var texture = this._assetLibrary.texture(textureAssetName);
				var textureIsValid = texture != null;
				texture = (this._options.get_textureFunction())(textureAssetName,texture);
				if(!textureIsValid && texture != null) {
					this._assetLibrary.setTexture(textureAssetName,texture);
				}
				if(texture != null) {
					material.get_data().set(textureName,texture);
					this.textureSet(material,textureName,texture);
				}
			}
		}
		var createMaterial_materialNameId = 0;
		var uniqueMaterialName = materialName;
		while(this._assetLibrary.material(uniqueMaterialName) != null) uniqueMaterialName = materialName + "_" + createMaterial_materialNameId++;
		material.get_data().set("name",uniqueMaterialName);
		var processedMaterial = (this._options.get_materialFunction())(uniqueMaterialName,material);
		this._aiMaterialToMaterial.set(aiMat,processedMaterial);
		this._assetLibrary.setMaterial(uniqueMaterialName,processedMaterial);
		return processedMaterial;
	}
	textureSet(material,textureTypeName,texture) {
		if(textureTypeName == minko_file_AbstractASSIMPParser._textureTypeToName.h[8]) {
			this.enableTransparency(material);
			if(!material.get_data().hasProperty("alphaThreshold")) {
				material.get_data().set("alphaThreshold",.5);
			}
		}
	}
	chooseMaterialByShadingMode(aiMat) {
		if(aiMat == null && this._options.get_material() != null) {
			return minko_material_Material.createbyMaterial(this._options.get_material());
		}
		if(aiMat.hasProperty(assimp_format_AiMatKeys.SHADING_MODEL)) {
			var shadingMode = aiMat.getProperty(assimp_format_AiMatKeys.SHADING_MODEL).getIntegerValue();
			switch(shadingMode) {
			case 1:
				return minko_material_BasicMaterial.create();
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:
				return minko_material_PhongMaterial.create();
			default:
				return minko_material_Material.createbyMaterial(this._options.get_material());
			}
		} else {
			return minko_material_Material.createbyMaterial(this._options.get_material());
		}
	}
	chooseEffectByShadingMode(aiMat) {
		var effect = this._options.get_effect();
		if(effect == null && aiMat != null) {
			if(aiMat.hasProperty(assimp_format_AiMatKeys.SHADING_MODEL)) {
				var shadingMode = aiMat.getProperty(assimp_format_AiMatKeys.SHADING_MODEL).getIntegerValue();
				switch(shadingMode) {
				case 1:
					break;
				case 2:
					break;
				case 3:
					break;
				case 4:
					break;
				case 5:
					break;
				case 6:
					break;
				case 7:
					if(this._assetLibrary.effect("effect/Basic.effect") != null) {
						effect = this._assetLibrary.effect("effect/Basic.effect");
					} else {
						throw new js__$Boot_HaxeError("LOG_ERROR" + "Basic effect not available in the asset library.");
					}
					break;
				case 8:
					break;
				case 9:
					break;
				case 10:
					if(this._assetLibrary.effect("effect/Phong.effect") != null) {
						effect = this._assetLibrary.effect("effect/Phong.effect");
					} else {
						throw new js__$Boot_HaxeError("LOG_ERROR" + "Phong effect not available in the asset library.");
					}
					break;
				default:
				}
			}
		}
		return (this._options.get_effectFunction())(effect);
	}
	getBlendingMode(aiMat) {
		var blendMode;
		if(aiMat != null && aiMat.hasProperty(assimp_format_AiMatKeys.BLEND_FUNC)) {
			blendMode = aiMat.getProperty(assimp_format_AiMatKeys.BLEND_FUNC).getIntegerValue();
			switch(blendMode) {
			case 0:
				return 16 | 8192;
			case 1:
				return 16 | 512;
			default:
				return 2 | 256;
			}
		} else {
			return 2 | 256;
		}
	}
	getTriangleCulling(aiMat) {
		var twoSided;
		if(aiMat != null && aiMat.hasProperty(assimp_format_AiMatKeys.TWOSIDED)) {
			twoSided = aiMat.getProperty(assimp_format_AiMatKeys.TWOSIDED).getIntegerValue();
			if(twoSided == 0) {
				return 0;
			} else {
				return 2;
			}
		} else {
			return 2;
		}
	}
	getWireframe(aiMat) {
		var wireframe = 0;
		if(aiMat != null && aiMat.hasProperty(assimp_format_AiMatKeys.TWOSIDED)) {
			wireframe = aiMat.getProperty(assimp_format_AiMatKeys.TWOSIDED).getIntegerValue();
		}
		return wireframe != 0;
	}
	setColorProperty(material,propertyName,aiMat,aiMatKeyName,defaultValue) {
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var color = this1;
		color.x = defaultValue.x;
		color.y = defaultValue.y;
		color.z = defaultValue.z;
		color.w = defaultValue.w;
		if(aiMat != null && aiMat.hasProperty(aiMatKeyName)) {
			var property = aiMat.getProperty(aiMatKeyName);
			color = property.getColor4DValue();
		}
		var tmp = material.get_data();
		var x = color.x;
		var y = color.y;
		var z = color.z;
		var w = color.w;
		var this2 = new glm_Vec4Base();
		this2.x = x;
		this2.y = y;
		this2.z = z;
		this2.w = w;
		tmp.set(propertyName,this2);
		return material.get_data().get(propertyName);
	}
	setScalarProperty(material,propertyName,aiMat,aiMatKeyName,defaultValue) {
		var scalar = defaultValue;
		if(aiMat != null && aiMat.hasProperty(aiMatKeyName)) {
			scalar = aiMat.getProperty(aiMatKeyName).getFloatValue();
		}
		material.get_data().set(propertyName,scalar);
		return material.get_data().get(propertyName);
	}
	createAnimations(scene,interpolate) {
		if(scene.numAnimations == 0) {
			return;
		}
		this.sampleAnimations(scene);
		if(Lambda.empty(this._nameToAnimMatrices)) {
			return;
		}
		var nodeToTimelines = new haxe_ds_ObjectMap();
		var nameToMatricesPair = this._nameToAnimMatrices.keys();
		while(nameToMatricesPair.hasNext()) {
			var nameToMatricesPair1 = nameToMatricesPair.next();
			var _this = this._nameToNode;
			var node = __map_reserved[nameToMatricesPair1] != null ? _this.getReserved(nameToMatricesPair1) : _this.h[nameToMatricesPair1];
			nodeToTimelines.set(node,[]);
		}
		var nameToMatricesPair2 = this._nameToAnimMatrices.keys();
		while(nameToMatricesPair2.hasNext()) {
			var nameToMatricesPair3 = nameToMatricesPair2.next();
			var _this1 = this._nameToNode;
			var node1 = __map_reserved[nameToMatricesPair3] != null ? _this1.getReserved(nameToMatricesPair3) : _this1.h[nameToMatricesPair3];
			var ainode = this._nodeToAiNode.h[node1.__id__];
			var aiParentNode = ainode;
			var isSkinned = false;
			while(aiParentNode != null && !isSkinned) {
				var _g = 0;
				var _g1 = aiParentNode.numMeshes;
				while(_g < _g1) {
					var i = _g++;
					var meshId = aiParentNode.meshes[i];
					isSkinned = isSkinned || scene.meshes[meshId].numBones > 0;
				}
				aiParentNode = aiParentNode.parent;
			}
			if(isSkinned) {
				continue;
			}
			var _this2 = this._nameToAnimMatrices;
			var matrices = __map_reserved[nameToMatricesPair3] != null ? _this2.getReserved(nameToMatricesPair3) : _this2.h[nameToMatricesPair3];
			var numFrames = matrices.length;
			var duration = numFrames * this._options.get_skinningFramerate();
			var _g2 = [];
			var _g11 = 0;
			var _g21 = numFrames;
			while(_g11 < _g21) {
				var i1 = _g11++;
				_g2.push(0);
			}
			var timetable = _g2;
			var timeStep = duration / (numFrames - 1);
			var _g3 = 1;
			var _g4 = numFrames;
			while(_g3 < _g4) {
				var frameId = _g3++;
				timetable[frameId] = timetable[frameId - 1] + timeStep | 0;
			}
			nodeToTimelines.h[node1.__id__].push(minko_animation_Matrix4x4Timeline.create(minko_file_AbstractASSIMPParser.PNAME_TRANSFORM,duration,timetable,matrices,interpolate));
		}
		var _this3 = this._nameToNode;
		var key = this._nameToAnimMatrices.keys().next();
		var animationRootNode = (__map_reserved[key] != null ? _this3.getReserved(key) : _this3.h[key]).get_root();
		var nodeAndTimelines = nodeToTimelines.keys();
		while(nodeAndTimelines.hasNext()) {
			var nodeAndTimelines1 = nodeAndTimelines.next();
			var second = nodeToTimelines.h[nodeAndTimelines1.__id__];
			nodeAndTimelines1.addComponent(minko_component_Animation.create(second));
		}
		if(!animationRootNode.hasComponent(minko_component_MasterAnimation)) {
			animationRootNode.addComponent(minko_component_MasterAnimation.create());
		}
	}
	enableTransparency(material) {
		material.get_data().set("priority",minko_render__$Priority_Priority_$Impl_$.TRANSPARENT);
		material.get_data().set("zSorted",true);
		var blendingMode = 16 | 8192;
		var srcBlendingMode = blendingMode & 255;
		var dstBlendingMode = blendingMode & 65280;
		material.get_data().set("blendingMode",blendingMode);
		material.get_data().set("blendingSource",srcBlendingMode);
		material.get_data().set("blendingDestination",dstBlendingMode);
	}
	static initializeTextureTypeToName() {
		var typeToString = new haxe_ds_IntMap();
		typeToString.h[1] = "diffuseMap";
		typeToString.h[2] = "specularMap";
		typeToString.h[8] = "alphaMap";
		typeToString.h[6] = "normalMap";
		typeToString.h[11] = "environmentMap2d";
		typeToString.h[10] = "lightMap";
		return typeToString;
	}
	static createIndexBuffer(mesh,context) {
		var _g = [];
		var _g1 = 0;
		var _g2 = 3 * mesh.numFaces;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(0);
		}
		var indexData = _g;
		var _g3 = 0;
		var _g4 = mesh.numFaces;
		while(_g3 < _g4) {
			var faceId = _g3++;
			var face = mesh.faces[faceId];
			indexData[3 * faceId] = face.indices[0];
			indexData[1 + 3 * faceId] = face.indices[1];
			indexData[2 + 3 * faceId] = face.indices[2];
		}
		return minko_render_IndexBuffer.createbyData(context,indexData);
	}
	static packColor(color) {
		var this1 = new glm_Vec4Base();
		this1.x = 1.0;
		this1.y = 0.00392156862745098;
		this1.z = 1.5378700499807768e-005;
		this1.w = 6.0308629411010845e-008;
		var b = this1;
		return color.x * b.x + color.y * b.y + color.z * b.z + color.w * b.w;
	}
}
minko_file_AbstractASSIMPParser.__name__ = true;
minko_file_AbstractASSIMPParser.__super__ = minko_file_AbstractParser;
Object.assign(minko_file_AbstractASSIMPParser.prototype, {
	__class__: minko_file_AbstractASSIMPParser
});
class minko_file_ASSIMPParser extends minko_file_AbstractASSIMPParser {
	constructor() {
		super();
	}
}
minko_file_ASSIMPParser.__name__ = true;
minko_file_ASSIMPParser.__super__ = minko_file_AbstractASSIMPParser;
Object.assign(minko_file_ASSIMPParser.prototype, {
	__class__: minko_file_ASSIMPParser
});
class minko_file_AbstractAssetDescriptor {
	constructor() {
	}
	get_location() {
		return null;
	}
	set_location(l) {
		return null;
	}
	dispose() {
	}
}
$hx_exports["minko"]["file"]["AbstractAssetDescriptor"] = minko_file_AbstractAssetDescriptor;
minko_file_AbstractAssetDescriptor.__name__ = true;
Object.assign(minko_file_AbstractAssetDescriptor.prototype, {
	__class__: minko_file_AbstractAssetDescriptor
});
class minko_file_AbstractProtocol {
	constructor() {
		if(minko_file_AbstractProtocol._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this._file = minko_file_File.create();
		this._options = minko_file_Options.empty();
		this._complete = new minko_signal_Signal();
		this._progress = new minko_signal_Signal2();
		this._error = new minko_signal_Signal2();
	}
	dispose() {
	}
	get_file() {
		return this._file;
	}
	get_options() {
		return this._options;
	}
	set_options(v) {
		this._options = v;
		return v;
	}
	get_complete() {
		return this._complete;
	}
	get_progress() {
		return this._progress;
	}
	get_error() {
		return this._error;
	}
	loadFile(filename,resolvedFilename,options) {
		this._options = options;
		this._file.set_filename(filename);
		this._file.set_resolvedFilename(resolvedFilename);
		this.load();
	}
	load() {
	}
	fileExists(filename) {
		return false;
	}
	isAbsolutePath(filename) {
		return false;
	}
	get_resolvedFilename() {
		return this._file._resolvedFilename;
	}
	get_data() {
		return this._file._data;
	}
	set_data(d) {
		this._file._data = d;
		return d;
	}
	static create() {
		return new minko_file_AbstractProtocol();
	}
}
$hx_exports["minko"]["file"]["AbstractProtocol"] = minko_file_AbstractProtocol;
minko_file_AbstractProtocol.__name__ = true;
Object.assign(minko_file_AbstractProtocol.prototype, {
	__class__: minko_file_AbstractProtocol
});
class minko_file_AssetLibrary {
	constructor(context) {
		this._context = context;
		this._loader = minko_file_Loader.create();
		this._materials = new haxe_ds_StringMap();
		this._geometries = new haxe_ds_StringMap();
		this._effects = new haxe_ds_StringMap();
		this._textures = new haxe_ds_StringMap();
		this._cubeTextures = new haxe_ds_StringMap();
		this._rectangleTextures = new haxe_ds_StringMap();
		this._symbols = new haxe_ds_StringMap();
		this._blobs = new haxe_ds_StringMap();
		this._dynamics = new haxe_ds_StringMap();
		this._scripts = new haxe_ds_StringMap();
		this._layouts = new haxe_ds_StringMap();
		this._sounds = new haxe_ds_StringMap();
		this._assetDescriptors = new haxe_ds_StringMap();
		this._parserError = new minko_signal_Signal2();
		this._ready = new minko_signal_Signal();
	}
	get_numGeometries() {
		return Lambda.count(this._geometries);
	}
	get_numMaterials() {
		return Lambda.count(this._materials);
	}
	get_numEffects() {
		return Lambda.count(this._effects);
	}
	get_numTextures() {
		return Lambda.count(this._textures);
	}
	get_context() {
		return this._context;
	}
	get_loader() {
		return this._loader;
	}
	disposeLoader() {
		this._loader = null;
	}
	geometry(name) {
		var _this = this._geometries;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._geometries;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	setGeometry(name,geometry) {
		var tempname = name;
		var _this = this._geometries;
		if(__map_reserved[tempname] != null ? _this.existsReserved(tempname) : _this.h.hasOwnProperty(tempname)) {
			tempname = tempname + "_" + this.get_numGeometries();
		}
		var _this1 = this._geometries;
		if(__map_reserved[tempname] != null) {
			_this1.setReserved(tempname,geometry);
		} else {
			_this1.h[tempname] = geometry;
		}
		return this;
	}
	geometryName(geometry) {
		var it = this._geometries.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._geometries;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == geometry) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this geometry.");
	}
	texture(name) {
		var _this = this._textures;
		var foundTextureIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundTextureIt) {
			var _this1 = this._textures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	setTexture(name,texture) {
		var _this = this._textures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return this;
	}
	getTextureByUuid(uuid,failIfNotReady) {
		var it = Lambda.find(this._textures,function(t) {
			if(t.get_sampler().uuid == uuid) {
				if(!(!failIfNotReady)) {
					return t.get_isReady();
				} else {
					return true;
				}
			} else {
				return false;
			}
		});
		return it;
	}
	cubeTexture(name) {
		var _this = this._cubeTextures;
		var foundTextureIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundTextureIt) {
			var _this1 = this._cubeTextures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	setCubeTexture(name,texture) {
		var _this = this._cubeTextures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return this;
	}
	rectangleTexture(name) {
		var _this = this._rectangleTextures;
		var foundTextureIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundTextureIt) {
			var _this1 = this._rectangleTextures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	setRectangleTexture(name,texture) {
		var _this = this._rectangleTextures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return this;
	}
	textureName(texture) {
		var it = this._textures.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._textures;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == texture) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this texture.");
	}
	symbol(name) {
		var _this = this._symbols;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._symbols;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	setSymbol(name,node) {
		var _this = this._symbols;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,node);
		} else {
			_this.h[name] = node;
		}
		return this;
	}
	symbolName(node) {
		var it = this._symbols.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._symbols;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == node) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this symbol.");
	}
	material(name) {
		var _this = this._materials;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._materials;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	setMaterial(name,material) {
		var mat = material;
		var _this = this._materials;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,material);
		} else {
			_this.h[name] = material;
		}
		return this;
	}
	materialName(material) {
		var it = this._materials.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._materials;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == material) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this material.");
	}
	effect(name) {
		var _this = this._effects;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._effects;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	setEffect(name,effect) {
		var _this = this._effects;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,effect);
		} else {
			_this.h[name] = effect;
		}
		return this;
	}
	effectName(effect) {
		var it = this._effects.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._effects;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == effect) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this effect.");
	}
	hasDynamics(name) {
		var _this = this._dynamics;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	dynamics(name) {
		var _this = this._dynamics;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			throw new js__$Boot_HaxeError("");
		}
		var _this1 = this._dynamics;
		if(__map_reserved[name] != null) {
			return _this1.getReserved(name);
		} else {
			return _this1.h[name];
		}
	}
	setDynamics(name,blob) {
		var _this = this._dynamics;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,blob);
		} else {
			_this.h[name] = blob;
		}
		return this;
	}
	hasBlob(name) {
		var _this = this._blobs;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	blob(name) {
		var _this = this._blobs;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			throw new js__$Boot_HaxeError("");
		}
		var _this1 = this._blobs;
		if(__map_reserved[name] != null) {
			return _this1.getReserved(name);
		} else {
			return _this1.h[name];
		}
	}
	setBlob(name,blob) {
		var _this = this._blobs;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,blob);
		} else {
			_this.h[name] = blob;
		}
		return this;
	}
	script(name) {
		var _this = this._scripts;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._scripts;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	setScript(name,script) {
		var _this = this._scripts;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,script);
		} else {
			_this.h[name] = script;
		}
		return this;
	}
	scriptName(script) {
		var it = this._scripts.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._scripts;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == script) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this script.");
	}
	layout(name) {
		var _this = this._layouts;
		if((__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) == false) {
			var existingMask = 0;
			var layout = this._layouts.keys();
			while(layout.hasNext()) {
				var layout1 = layout.next();
				var _this1 = this._layouts;
				existingMask |= __map_reserved[layout1] != null ? _this1.getReserved(layout1) : _this1.h[layout1];
			}
			var mask = 1;
			var i = 0;
			while(i < 32 && (existingMask & mask) == 1) {
				++i;
				mask <<= 1;
				continue;
			}
			if(mask == 0) {
				throw new js__$Boot_HaxeError("");
			}
			var _this2 = this._layouts;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,mask);
			} else {
				_this2.h[name] = mask;
			}
		}
		var _this3 = this._layouts;
		if(__map_reserved[name] != null) {
			return _this3.getReserved(name);
		} else {
			return _this3.h[name];
		}
	}
	setLayout(name,mask) {
		var _this = this._layouts;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,mask);
		} else {
			_this.h[name] = mask;
		}
		return this;
	}
	sound(name) {
		var _this = this._sounds;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	setSound(name,sound) {
		var _this = this._sounds;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,sound);
		} else {
			_this.h[name] = sound;
		}
		return this;
	}
	assetDescriptor(name) {
		var _this = this._assetDescriptors;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._assetDescriptors;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	setAssetDescriptor(name,assetDescriptor) {
		var _this = this._assetDescriptors;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,assetDescriptor);
		} else {
			_this.h[name] = assetDescriptor;
		}
		return this;
	}
	static create(context) {
		var al = new minko_file_AssetLibrary(context);
		al._loader.get_options().set_context(context);
		al._loader.get_options().set_assetLibrary(al);
		return al;
	}
	static createbyAssetLibrary(original) {
		var al = minko_file_AssetLibrary.create(original._context);
		var it = original._materials.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = al._materials;
			var _this1 = original._materials;
			var value = __map_reserved[it1] != null ? _this1.getReserved(it1) : _this1.h[it1];
			if(__map_reserved[it1] != null) {
				_this.setReserved(it1,value);
			} else {
				_this.h[it1] = value;
			}
		}
		var it2 = original._geometries.keys();
		while(it2.hasNext()) {
			var it3 = it2.next();
			var _this2 = al._geometries;
			var _this3 = original._geometries;
			var value1 = __map_reserved[it3] != null ? _this3.getReserved(it3) : _this3.h[it3];
			if(__map_reserved[it3] != null) {
				_this2.setReserved(it3,value1);
			} else {
				_this2.h[it3] = value1;
			}
		}
		var it4 = original._effects.keys();
		while(it4.hasNext()) {
			var it5 = it4.next();
			var _this4 = al._effects;
			var _this5 = original._effects;
			var value2 = __map_reserved[it5] != null ? _this5.getReserved(it5) : _this5.h[it5];
			if(__map_reserved[it5] != null) {
				_this4.setReserved(it5,value2);
			} else {
				_this4.h[it5] = value2;
			}
		}
		var it6 = original._textures.keys();
		while(it6.hasNext()) {
			var it7 = it6.next();
			var _this6 = al._textures;
			var _this7 = original._textures;
			var value3 = __map_reserved[it7] != null ? _this7.getReserved(it7) : _this7.h[it7];
			if(__map_reserved[it7] != null) {
				_this6.setReserved(it7,value3);
			} else {
				_this6.h[it7] = value3;
			}
		}
		var it8 = original._cubeTextures.keys();
		while(it8.hasNext()) {
			var it9 = it8.next();
			var _this8 = al._cubeTextures;
			var _this9 = original._cubeTextures;
			var value4 = __map_reserved[it9] != null ? _this9.getReserved(it9) : _this9.h[it9];
			if(__map_reserved[it9] != null) {
				_this8.setReserved(it9,value4);
			} else {
				_this8.h[it9] = value4;
			}
		}
		var it10 = original._rectangleTextures.keys();
		while(it10.hasNext()) {
			var it11 = it10.next();
			var _this10 = al._rectangleTextures;
			var _this11 = original._rectangleTextures;
			var value5 = __map_reserved[it11] != null ? _this11.getReserved(it11) : _this11.h[it11];
			if(__map_reserved[it11] != null) {
				_this10.setReserved(it11,value5);
			} else {
				_this10.h[it11] = value5;
			}
		}
		var it12 = original._symbols.keys();
		while(it12.hasNext()) {
			var it13 = it12.next();
			var _this12 = al._symbols;
			var _this13 = original._symbols;
			var value6 = __map_reserved[it13] != null ? _this13.getReserved(it13) : _this13.h[it13];
			if(__map_reserved[it13] != null) {
				_this12.setReserved(it13,value6);
			} else {
				_this12.h[it13] = value6;
			}
		}
		var it14 = original._blobs.keys();
		while(it14.hasNext()) {
			var it15 = it14.next();
			var _this14 = al._blobs;
			var _this15 = original._blobs;
			var value7 = __map_reserved[it15] != null ? _this15.getReserved(it15) : _this15.h[it15];
			if(__map_reserved[it15] != null) {
				_this14.setReserved(it15,value7);
			} else {
				_this14.h[it15] = value7;
			}
		}
		var it16 = original._dynamics.keys();
		while(it16.hasNext()) {
			var it17 = it16.next();
			var _this16 = al._dynamics;
			var _this17 = original._dynamics;
			var value8 = __map_reserved[it17] != null ? _this17.getReserved(it17) : _this17.h[it17];
			if(__map_reserved[it17] != null) {
				_this16.setReserved(it17,value8);
			} else {
				_this16.h[it17] = value8;
			}
		}
		var it18 = original._scripts.keys();
		while(it18.hasNext()) {
			var it19 = it18.next();
			var _this18 = al._scripts;
			var _this19 = original._scripts;
			var value9 = __map_reserved[it19] != null ? _this19.getReserved(it19) : _this19.h[it19];
			if(__map_reserved[it19] != null) {
				_this18.setReserved(it19,value9);
			} else {
				_this18.h[it19] = value9;
			}
		}
		var it20 = original._layouts.keys();
		while(it20.hasNext()) {
			var it21 = it20.next();
			var _this20 = al._layouts;
			var _this21 = original._layouts;
			var value10 = __map_reserved[it21] != null ? _this21.getReserved(it21) : _this21.h[it21];
			if(__map_reserved[it21] != null) {
				_this20.setReserved(it21,value10);
			} else {
				_this20.h[it21] = value10;
			}
		}
		var it22 = original._assetDescriptors.keys();
		while(it22.hasNext()) {
			var it23 = it22.next();
			var _this22 = al._assetDescriptors;
			var _this23 = original._assetDescriptors;
			var value11 = __map_reserved[it23] != null ? _this23.getReserved(it23) : _this23.h[it23];
			if(__map_reserved[it23] != null) {
				_this22.setReserved(it23,value11);
			} else {
				_this22.h[it23] = value11;
			}
		}
		return al;
	}
}
$hx_exports["minko"]["file"]["AssetLibrary"] = minko_file_AssetLibrary;
minko_file_AssetLibrary.__name__ = true;
Object.assign(minko_file_AssetLibrary.prototype, {
	__class__: minko_file_AssetLibrary
});
class minko_file_AssetLocation {
	constructor(filename,offset,length) {
		this.filename = filename;
		this.offset = offset;
		this.length = length;
	}
}
$hx_exports["minko"]["file"]["AssetLocation"] = minko_file_AssetLocation;
minko_file_AssetLocation.__name__ = true;
Object.assign(minko_file_AssetLocation.prototype, {
	__class__: minko_file_AssetLocation
});
class minko_file_GLSLBlock {
	constructor(t,v) {
		this.type = t;
		this.value = v;
	}
}
minko_file_GLSLBlock.__name__ = true;
Object.assign(minko_file_GLSLBlock.prototype, {
	__class__: minko_file_GLSLBlock
});
class minko_file_GLSLBlockTree {
	constructor(n) {
		this.leaf = [];
		this.node = n;
	}
}
$hx_exports["minko"]["file"]["GLSLBlockTree"] = minko_file_GLSLBlockTree;
minko_file_GLSLBlockTree.__name__ = true;
Object.assign(minko_file_GLSLBlockTree.prototype, {
	__class__: minko_file_GLSLBlockTree
});
class minko_file_Block {
	constructor() {
	}
	dispose() {
	}
}
$hx_exports["minko"]["file"]["Block"] = minko_file_Block;
minko_file_Block.__name__ = true;
Object.assign(minko_file_Block.prototype, {
	__class__: minko_file_Block
});
class minko_file_AttributeBlock extends minko_file_Block {
	constructor() {
		super();
		this.bindingMap = new minko_data_BindingMapBase();
	}
	copyFrom(s) {
		minko_data_BindingMapBase.copyFrom(this.bindingMap,s.bindingMap);
		return this;
	}
}
$hx_exports["minko"]["file"]["AttributeBlock"] = minko_file_AttributeBlock;
minko_file_AttributeBlock.__name__ = true;
minko_file_AttributeBlock.__super__ = minko_file_Block;
Object.assign(minko_file_AttributeBlock.prototype, {
	__class__: minko_file_AttributeBlock
});
class minko_file_MacroBlock extends minko_file_Block {
	constructor() {
		super();
		this.bindingMap = new minko_data_MacroBindingMap();
	}
	copyFrom(s) {
		minko_data_MacroBindingMap.copyFrom2(this.bindingMap,s.bindingMap);
		return this;
	}
}
$hx_exports["minko"]["file"]["MacroBlock"] = minko_file_MacroBlock;
minko_file_MacroBlock.__name__ = true;
minko_file_MacroBlock.__super__ = minko_file_Block;
Object.assign(minko_file_MacroBlock.prototype, {
	__class__: minko_file_MacroBlock
});
class minko_file_UniformBlock extends minko_file_Block {
	constructor() {
		super();
		this.bindingMap = new minko_data_BindingMapBase();
	}
	copyFrom(s) {
		minko_data_BindingMapBase.copyFrom(this.bindingMap,s.bindingMap);
		return this;
	}
}
$hx_exports["minko"]["file"]["UniformBlock"] = minko_file_UniformBlock;
minko_file_UniformBlock.__name__ = true;
minko_file_UniformBlock.__super__ = minko_file_Block;
Object.assign(minko_file_UniformBlock.prototype, {
	__class__: minko_file_UniformBlock
});
class minko_file_StateBlock extends minko_file_Block {
	constructor() {
		super();
		this.bindingMap = new minko_data_BindingMapBase();
		this.states = new minko_render_States();
		this.states.set_priority(minko_render_States.UNSET_PRIORITY_VALUE);
		this.bindingMap.defaultValues.addProvider(this.states.get_data());
	}
	copyFrom(s) {
		minko_data_BindingMapBase.copyFrom(this.bindingMap,s.bindingMap);
		this.states = new minko_render_States().copyFrom(s.states);
		this.bindingMap.defaultValues.removeProvider(this.bindingMap.defaultValues.get_providers()[0]);
		this.bindingMap.defaultValues.addProvider(this.states.get_data());
		return this;
	}
}
$hx_exports["minko"]["file"]["StateBlock"] = minko_file_StateBlock;
minko_file_StateBlock.__name__ = true;
minko_file_StateBlock.__super__ = minko_file_Block;
Object.assign(minko_file_StateBlock.prototype, {
	__class__: minko_file_StateBlock
});
class minko_file_Scope {
	constructor() {
		this.parent = null;
		this.children = [];
		this.attributeBlock = new minko_file_AttributeBlock();
		this.uniformBlock = new minko_file_UniformBlock();
		this.stateBlock = new minko_file_StateBlock();
		this.macroBlock = new minko_file_MacroBlock();
		this.defaultTechnique = "";
		this.passes = [];
		this.techniques = new haxe_ds_StringMap();
	}
	copyFrom(scope) {
		this.parent = scope.parent;
		this.children = [];
		this.attributeBlock.copyFrom(scope.attributeBlock);
		this.uniformBlock.copyFrom(scope.uniformBlock);
		this.stateBlock = new minko_file_StateBlock().copyFrom(scope.stateBlock);
		this.macroBlock.copyFrom(scope.macroBlock);
		this.defaultTechnique = scope.defaultTechnique;
		this.passes = scope.passes.concat([]);
		this.techniques = scope.techniques;
		return this;
	}
	copyFromParent(scope,parent) {
		this.copyFrom(scope);
		this.parent = parent;
		parent.children.push(this);
		return this;
	}
}
$hx_exports["minko"]["file"]["Scope"] = minko_file_Scope;
minko_file_Scope.__name__ = true;
Object.assign(minko_file_Scope.prototype, {
	__class__: minko_file_Scope
});
class minko_render__$Priority_Priority_$Impl_$ {
}
$hx_exports["minko"]["render"]["Priority"] = minko_render__$Priority_Priority_$Impl_$;
minko_render__$Priority_Priority_$Impl_$.__name__ = true;
class minko_file_EffectParser extends minko_file_AbstractParser {
	constructor() {
		super();
		this._effect = null;
		this._numDependencies = 0;
		this._numLoadedDependencies = 0;
		this._effectData = minko_data_Provider.create();
		this._filename = "";
		this._resolvedFilename = "";
		this._options = null;
		this._effectName = "";
		this._assetLibrary = null;
		this._globalScope = new minko_file_Scope();
		this._shaderToGLSL = new haxe_ds_ObjectMap();
		this._loaderCompleteSlots = new haxe_ds_ObjectMap();
		this._loaderErrorSlots = new haxe_ds_ObjectMap();
	}
	get_effect() {
		return this._effect;
	}
	get_effectName() {
		return this._effectName;
	}
	isDynamic(o) {
		if(!(((o) instanceof Array) && o.__enum__ == null) && !(typeof(o) == "number" && ((o | 0) === o)) && typeof(o) != "number" && typeof(o) != "string" && typeof(o) != "boolean") {
			return o != null;
		} else {
			return false;
		}
	}
	parse(filename,resolvedFilename,options,data,assetLibrary) {
		var root = { };
		var tempData = data.getString(0,data.length);
		try {
			root = new haxe_format_JsonParser(tempData).doParse();
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				this._error.execute(this,resolvedFilename + ": " + e1);
			} else {
				throw e;
			}
		}
		this._options = options.clone();
		var pos = resolvedFilename.lastIndexOf("/");
		if(pos == -1) {
			pos = resolvedFilename.lastIndexOf("\\");
		}
		if(pos != -1) {
			this._options = this._options.clone();
			this._options.set_includePaths([]);
			this._options.get_includePaths().push(HxOverrides.substr(resolvedFilename,0,pos));
		}
		this._filename = filename;
		this._resolvedFilename = resolvedFilename;
		this._assetLibrary = assetLibrary;
		if(Object.prototype.hasOwnProperty.call(root,"name")) {
			this._effectName = Reflect.field(root,"name");
		} else {
			this._effectName = filename;
		}
		this.parseGlobalScope(root,this._globalScope);
		this._effect = minko_render_Effect.create(this._effectName);
		if(this._numDependencies == this._numLoadedDependencies && this._effect != null) {
			this.finalize();
		}
	}
	getPriorityValue(name) {
		var _this = minko_file_EffectParser._priorityMap;
		var foundPriorityIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundPriorityIt) {
			var _this1 = minko_file_EffectParser._priorityMap;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			var _this2 = minko_file_EffectParser._priorityMap;
			if(__map_reserved["opaque"] != null) {
				return _this2.getReserved("opaque");
			} else {
				return _this2.h["opaque"];
			}
		}
	}
	parseGlobalScope(node,scope) {
		this.parseAttributes(node,scope,scope.attributeBlock);
		this.parseUniforms(node,scope,scope.uniformBlock);
		this.parseMacros(node,scope,scope.macroBlock);
		this.parseStates(node,scope,scope.stateBlock);
		this.parsePasses(node,scope,scope.passes);
		this.parseTechniques(node,scope,scope.techniques);
	}
	parseConfiguration(node) {
		var confValue = Reflect.field(node,"configuration");
		var platforms = this._options.get_platforms();
		var userFlags = this._options.get_userFlags();
		var r = false;
		if(((confValue) instanceof Array) && confValue.__enum__ == null) {
			var tmps = confValue;
			var _g = 0;
			while(_g < tmps.length) {
				var value = tmps[_g];
				++_g;
				if(typeof(value) == "string" && Lambda.has(platforms,value) || Lambda.has(userFlags,value)) {
					return true;
				} else if(((value) instanceof Array) && value.__enum__ == null) {
					var tmp = value;
					var _g1 = 0;
					while(_g1 < tmp.length) {
						var str = tmp[_g1];
						++_g1;
						if(typeof(str) == "string" && Lambda.has(platforms,str) || Lambda.has(userFlags,str)) {
							r = r;
							break;
						}
					}
				}
			}
		} else {
			return true;
		}
		return r;
	}
	fixMissingPassPriorities(passes) {
		var numPasses = passes.length;
		var passOne = passes[0];
		if(numPasses == 1) {
			if(passOne.get_states().get_priority() == minko_render_States.UNSET_PRIORITY_VALUE) {
				passOne.get_states().set_priority(minko_render_States.DEFAULT_PRIORITY);
			}
		} else {
			var _g = 0;
			var _g1 = numPasses;
			while(_g < _g1) {
				var i = _g++;
				var pass = passes[i];
				if(pass.get_states().get_priority() == minko_render_States.UNSET_PRIORITY_VALUE) {
					var nextPassWithPriority = i + 1;
					while(nextPassWithPriority < numPasses && passes[nextPassWithPriority].get_states().get_priority() == minko_render_States.UNSET_PRIORITY_VALUE) ++nextPassWithPriority;
					if(nextPassWithPriority >= numPasses) {
						pass.get_states().set_priority(minko_render_States.DEFAULT_PRIORITY + (numPasses - i - 1));
					} else {
						pass.get_states().set_priority(nextPassWithPriority - i + passes[nextPassWithPriority].get_states().get_priority());
					}
				}
			}
		}
	}
	parseTechniques(node,scope,techniques) {
		var techniquesNode = Reflect.field(node,"techniques");
		if(((techniquesNode) instanceof Array) && techniquesNode.__enum__ == null) {
			var tmp = techniquesNode;
			var _g = 0;
			while(_g < tmp.length) {
				var techniqueNode = tmp[_g];
				++_g;
				if(!this.parseConfiguration(techniqueNode)) {
					continue;
				}
				var techniqueName = "";
				if(Object.prototype.hasOwnProperty.call(techniqueNode,"name")) {
					var techniqueNameNode = Reflect.field(techniqueNode,"name");
					if(typeof(techniqueNameNode) == "string") {
						techniqueName = js_Boot.__cast(techniqueNameNode , String);
					} else if(((techniqueNameNode) instanceof Array) && techniqueNameNode.__enum__ == null) {
						var tmp1 = techniqueNameNode;
						if(tmp1.length == 1) {
							techniqueName = "default";
						} else {
							techniqueName = this._effectName + "-technique-" + Lambda.count(techniques);
						}
					}
				} else {
					techniqueName = "default";
				}
				var techniqueScope = new minko_file_Scope().copyFromParent(scope,scope);
				if(!(__map_reserved[techniqueName] != null ? techniques.existsReserved(techniqueName) : techniques.h.hasOwnProperty(techniqueName))) {
					var value = [];
					if(__map_reserved[techniqueName] != null) {
						techniques.setReserved(techniqueName,value);
					} else {
						techniques.h[techniqueName] = value;
					}
				}
				var passes = __map_reserved[techniqueName] != null ? techniques.getReserved(techniqueName) : techniques.h[techniqueName];
				this.parseAttributes(techniqueNode,techniqueScope,techniqueScope.attributeBlock);
				this.parseUniforms(techniqueNode,techniqueScope,techniqueScope.uniformBlock);
				this.parseMacros(techniqueNode,techniqueScope,techniqueScope.macroBlock);
				this.parseStates(techniqueNode,techniqueScope,techniqueScope.stateBlock);
				this.parsePasses(techniqueNode,techniqueScope,passes);
				this.fixMissingPassPriorities(__map_reserved[techniqueName] != null ? techniques.getReserved(techniqueName) : techniques.h[techniqueName]);
			}
		}
	}
	getPassToExtend(extendNode,callBack) {
		var pass = null;
		var passName;
		var _gthis = this;
		if(typeof(extendNode) == "string") {
			passName = extendNode;
			var passIt = Lambda.find(this._globalScope.passes,function(p) {
				return p.get_name() == passName;
			});
			if(passIt != null) {
				pass = passIt;
			}
		} else if(this.isDynamic(extendNode)) {
			passName = Reflect.field(extendNode,"pass");
			var techniqueName = Reflect.field(extendNode,"technique");
			var effectFilename = Reflect.field(extendNode,"effect");
			if(techniqueName == "") {
				techniqueName = "default";
			}
			if(this._assetLibrary.effect(effectFilename) == null) {
				var options = this._options.clone();
				var loader = minko_file_Loader.createbyLoader(this._assetLibrary.get_loader());
				loader.setQueue(effectFilename,options);
				this._numDependencies++;
				var effectComplete = loader.get_complete().connect(function(l) {
					pass = _gthis.findPassFromEffectFilename(effectFilename,techniqueName,passName);
					callBack(pass);
					_gthis._numLoadedDependencies++;
					if(_gthis._numDependencies == _gthis._numLoadedDependencies && _gthis._effect != null) {
						_gthis.finalize();
					}
				});
				loader.load();
				haxe_Log.trace("effectFilename",{ fileName : "minko/file/EffectParser.hx", lineNumber : 567, className : "minko.file.EffectParser", methodName : "getPassToExtend", customParams : [effectFilename]});
				return;
			} else {
				pass = this.findPassFromEffectFilename(effectFilename,techniqueName,passName);
			}
		} else {
			throw new js__$Boot_HaxeError("");
		}
		if(pass == null) {
			throw new js__$Boot_HaxeError("Undefined base pass with name '" + passName + "'.");
		}
		callBack(pass);
	}
	findPassFromEffectFilename(effectFilename,techniqueName,passName) {
		var effect = this._assetLibrary.effect(effectFilename);
		if(effect == null) {
			return null;
		}
		var techniqueNameAndPasses = effect.get_techniques().keys();
		while(techniqueNameAndPasses.hasNext()) {
			var techniqueNameAndPasses1 = techniqueNameAndPasses.next();
			if(techniqueNameAndPasses1 == techniqueName) {
				var _g = 0;
				var _this = effect.get_techniques();
				var _g1 = __map_reserved[techniqueNameAndPasses1] != null ? _this.getReserved(techniqueNameAndPasses1) : _this.h[techniqueNameAndPasses1];
				while(_g < _g1.length) {
					var p = _g1[_g];
					++_g;
					if(p.get_name() == passName) {
						return p;
					}
				}
			}
		}
		return null;
	}
	parsePassDynamic(node,scope,passes,pass) {
		var passScope = new minko_file_Scope().copyFromParent(scope,scope);
		var vertexShader = null;
		var fragmentShader = null;
		var passName = this._effectName + "-pass" + scope.passes.length;
		var nameNode = Reflect.field(node,"name");
		var isForward = true;
		if(Object.prototype.hasOwnProperty.call(node,"extends") && pass != null) {
			var extendNode = Reflect.field(node,"extends");
			var a = passScope.attributeBlock.bindingMap.bindings;
			var b = pass.get_attributeBindings().bindings;
			var k = b.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				if(!(__map_reserved[k1] != null ? a.existsReserved(k1) : a.h.hasOwnProperty(k1))) {
					var value = __map_reserved[k1] != null ? b.getReserved(k1) : b.h[k1];
					if(__map_reserved[k1] != null) {
						a.setReserved(k1,value);
					} else {
						a.h[k1] = value;
					}
				}
			}
			var a1 = passScope.uniformBlock.bindingMap.bindings;
			var b1 = pass.get_uniformBindings().bindings;
			var k2 = b1.keys();
			while(k2.hasNext()) {
				var k3 = k2.next();
				if(!(__map_reserved[k3] != null ? a1.existsReserved(k3) : a1.h.hasOwnProperty(k3))) {
					var value1 = __map_reserved[k3] != null ? b1.getReserved(k3) : b1.h[k3];
					if(__map_reserved[k3] != null) {
						a1.setReserved(k3,value1);
					} else {
						a1.h[k3] = value1;
					}
				}
			}
			var a2 = passScope.macroBlock.bindingMap.bindings;
			var b2 = pass.get_macroBindings().bindings;
			var k4 = b2.keys();
			while(k4.hasNext()) {
				var k5 = k4.next();
				if(!(__map_reserved[k5] != null ? a2.existsReserved(k5) : a2.h.hasOwnProperty(k5))) {
					var value2 = __map_reserved[k5] != null ? b2.getReserved(k5) : b2.h[k5];
					if(__map_reserved[k5] != null) {
						a2.setReserved(k5,value2);
					} else {
						a2.h[k5] = value2;
					}
				}
			}
			var a3 = passScope.macroBlock.bindingMap.types;
			var b3 = pass.get_macroBindings().types;
			var k6 = b3.keys();
			while(k6.hasNext()) {
				var k7 = k6.next();
				if(!(__map_reserved[k7] != null ? a3.existsReserved(k7) : a3.h.hasOwnProperty(k7))) {
					var value3 = __map_reserved[k7] != null ? b3.getReserved(k7) : b3.h[k7];
					if(__map_reserved[k7] != null) {
						a3.setReserved(k7,value3);
					} else {
						a3.h[k7] = value3;
					}
				}
			}
			var a4 = passScope.stateBlock.bindingMap.bindings;
			var b4 = pass.get_stateBindings().bindings;
			var k8 = b4.keys();
			while(k8.hasNext()) {
				var k9 = k8.next();
				if(!(__map_reserved[k9] != null ? a4.existsReserved(k9) : a4.h.hasOwnProperty(k9))) {
					var value4 = __map_reserved[k9] != null ? b4.getReserved(k9) : b4.h[k9];
					if(__map_reserved[k9] != null) {
						a4.setReserved(k9,value4);
					} else {
						a4.h[k9] = value4;
					}
				}
			}
			if(pass.get_attributeBindings().defaultValues.get_providers().length > 0) {
				if(passScope.attributeBlock.bindingMap.defaultValues.get_providers().length == 0) {
					var tmp = new minko_data_Store();
					passScope.attributeBlock.bindingMap.defaultValues = tmp.copyFrom(pass.get_attributeBindings().defaultValues,true);
				} else {
					var _g = [];
					var _g1 = 0;
					var _g2 = pass.get_attributeBindings().defaultValues.get_providers();
					while(_g1 < _g2.length) {
						var provider = _g2[_g1];
						++_g1;
						_g.push(new minko_data_Provider().copyFrom(provider));
					}
					var tmp1 = _g;
					passScope.attributeBlock.bindingMap.defaultValues.set_providers(tmp1);
				}
			}
			if(pass.get_uniformBindings().defaultValues.get_providers().length > 0) {
				if(passScope.uniformBlock.bindingMap.defaultValues.get_providers().length == 0) {
					var tmp2 = new minko_data_Store();
					passScope.uniformBlock.bindingMap.defaultValues = tmp2.copyFrom(pass.get_uniformBindings().defaultValues,true);
				} else {
					var _g3 = [];
					var _g11 = 0;
					var _g21 = pass.get_uniformBindings().defaultValues.get_providers();
					while(_g11 < _g21.length) {
						var provider1 = _g21[_g11];
						++_g11;
						_g3.push(new minko_data_Provider().copyFrom(provider1));
					}
					var tmp3 = _g3;
					passScope.uniformBlock.bindingMap.defaultValues.set_providers(tmp3);
				}
			}
			if(pass.get_macroBindings().defaultValues.get_providers().length > 0) {
				if(passScope.macroBlock.bindingMap.defaultValues.get_providers().length == 0) {
					var tmp4 = new minko_data_Store();
					passScope.macroBlock.bindingMap.defaultValues = tmp4.copyFrom(pass.get_macroBindings().defaultValues,true);
				} else {
					var _g4 = [];
					var _g12 = 0;
					var _g22 = pass.get_macroBindings().defaultValues.get_providers();
					while(_g12 < _g22.length) {
						var provider2 = _g22[_g12];
						++_g12;
						_g4.push(new minko_data_Provider().copyFrom(provider2));
					}
					var tmp5 = _g4;
					passScope.macroBlock.bindingMap.defaultValues.set_providers(tmp5);
				}
			}
			passScope.stateBlock.states.set_data(minko_data_Provider.createbyProvider(pass.get_stateBindings().defaultValues.get_providers()[0]));
			passScope.stateBlock.bindingMap.defaultValues.removeProvider(passScope.stateBlock.bindingMap.defaultValues.get_providers()[0]);
			passScope.stateBlock.bindingMap.defaultValues.addProvider(passScope.stateBlock.states.get_data());
			vertexShader = pass.get_program().get_vertexShader();
			fragmentShader = pass.get_program().get_fragmentShader();
			isForward = pass.get_isForward();
			passName = pass.get_name();
		}
		if(typeof(nameNode) == "string") {
			passName = nameNode;
		}
		this.parseAttributes(node,passScope,passScope.attributeBlock);
		this.parseUniforms(node,passScope,passScope.uniformBlock);
		this.parseMacros(node,passScope,passScope.macroBlock);
		this.parseStates(node,passScope,passScope.stateBlock);
		if(Object.prototype.hasOwnProperty.call(node,"vertexShader")) {
			vertexShader = this.parseShader(Reflect.field(node,"vertexShader"),passScope,0);
		} else if(vertexShader == null) {
			throw new js__$Boot_HaxeError("Missing vertex shader for pass \"" + passName + "\"");
		}
		if(Object.prototype.hasOwnProperty.call(node,"fragmentShader")) {
			fragmentShader = this.parseShader(Reflect.field(node,"fragmentShader"),passScope,1);
		} else if(fragmentShader == null) {
			throw new js__$Boot_HaxeError("Missing fragment shader for pass \"" + passName + "\"");
		}
		if(Object.prototype.hasOwnProperty.call(node,"forward")) {
			isForward = Reflect.field(node,"forward");
		}
		if(!isForward) {
			this.checkDeferredPassBindings(passScope);
		}
		passes.push(minko_render_Pass.create(passName,isForward,minko_render_Program.createbyShader(passName,this._options.get_context(),vertexShader,fragmentShader),passScope.attributeBlock.bindingMap,passScope.uniformBlock.bindingMap,passScope.stateBlock.bindingMap,passScope.macroBlock.bindingMap));
	}
	parsePassString(node,scope,passes,pass) {
		passes.push(minko_render_Pass.createbyPass(pass,true));
	}
	parsePass(node,scope,passes) {
		var _gthis = this;
		if(typeof(node) == "string") {
			this.getPassToExtend(node,function(pass) {
				_gthis.parsePassString(node,scope,passes,pass);
			});
		} else if(this.isDynamic(node)) {
			if(Object.prototype.hasOwnProperty.call(node,"extends")) {
				var extendNode = Reflect.field(node,"extends");
				this.getPassToExtend(extendNode,function(pass1) {
					_gthis.parsePassDynamic(node,scope,passes,pass1);
				});
			} else {
				this.parsePassDynamic(node,scope,passes,null);
			}
		}
	}
	checkDeferredPassBindings(passScope) {
		var _this = passScope.attributeBlock.bindingMap.bindings;
		var bindingNameAndValue = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(bindingNameAndValue.hasNext()) {
			var bindingNameAndValue1 = bindingNameAndValue.next();
			if(bindingNameAndValue1.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
		var _this1 = passScope.uniformBlock.bindingMap.bindings;
		var bindingNameAndValue2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(bindingNameAndValue2.hasNext()) {
			var bindingNameAndValue3 = bindingNameAndValue2.next();
			if(bindingNameAndValue3.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
		var _this2 = passScope.stateBlock.bindingMap.bindings;
		var bindingNameAndValue4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(bindingNameAndValue4.hasNext()) {
			var bindingNameAndValue5 = bindingNameAndValue4.next();
			if(bindingNameAndValue5.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
		var _this3 = passScope.macroBlock.bindingMap.bindings;
		var bindingNameAndValue6 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
		while(bindingNameAndValue6.hasNext()) {
			var bindingNameAndValue7 = bindingNameAndValue6.next();
			if(bindingNameAndValue7.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
	}
	parsePasses(node,scope,passes) {
		var passesNode = Reflect.field(node,"passes");
		if(((passesNode) instanceof Array) && passesNode.__enum__ == null) {
			var tmp = passesNode;
			var _g = 0;
			while(_g < tmp.length) {
				var passNode = tmp[_g];
				++_g;
				if(this.isDynamic(passNode) && !this.parseConfiguration(passNode)) {
					continue;
				}
				this.parsePass(passNode,scope,passes);
			}
		}
	}
	parseDefaultValue(node,scope,valueName,defaultValues) {
		if(!this.isDynamic(node)) {
			return;
		}
		var memberNames = Reflect.fields(node);
		if(Lambda.has(memberNames,"default") == false) {
			return;
		}
		var defaultValueNode = Reflect.field(node,"default");
		if(this.isDynamic(defaultValueNode)) {
			this.parseDefaultValueVectorObject(defaultValueNode,scope,valueName,defaultValues);
		} else if(((defaultValueNode) instanceof Array) && defaultValueNode.__enum__ == null) {
			var tmps = defaultValueNode;
			if(tmps.length == 1 && (((tmps[0]) instanceof Array) && tmps[0].__enum__ == null)) {
				this.parseDefaultValueVectorArray(tmps[0],scope,valueName,defaultValues);
			} else {
				throw new js__$Boot_HaxeError("");
			}
		} else if(typeof(defaultValueNode) == "boolean") {
			defaultValues.set(valueName,js_Boot.__cast(defaultValueNode , Bool) ? 1 : 0);
		} else if(typeof(defaultValueNode) == "number" && ((defaultValueNode | 0) === defaultValueNode)) {
			defaultValues.set(valueName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "number") {
			defaultValues.set(valueName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "string") {
			this.loadTexture(js_Boot.__cast(defaultValueNode , String),valueName,defaultValues);
		}
	}
	parseDefaultValueSamplerStates(cls,node,scope,valueName,defaultValues) {
		if(!this.isDynamic(node)) {
			return;
		}
		var memberNames = Reflect.fields(node);
		if(Lambda.has(memberNames,"default") == false) {
			return;
		}
		var defaultValueNode = Reflect.field(node,"default");
		if(typeof(defaultValueNode) == "string") {
			if(cls == "WrapMode") {
				defaultValues.set(valueName,minko_render_SamplerStates.stringToWrapMode(defaultValueNode));
			} else if(cls == "TextureFilter") {
				defaultValues.set(valueName,minko_render_SamplerStates.stringToTextureFilter(defaultValueNode));
			} else if(cls == "MipFilter") {
				defaultValues.set(valueName,minko_render_SamplerStates.stringToMipFilter(defaultValueNode));
			}
		}
	}
	parseDefaultValueStates(node,scope,stateName,defaultValues) {
		if(!this.isDynamic(node)) {
			return;
		}
		var memberNames = Reflect.fields(node);
		if(Lambda.has(memberNames,"default") == false) {
			return;
		}
		var defaultValueNode = Reflect.field(node,"default");
		if(typeof(defaultValueNode) == "boolean") {
			defaultValues.set(stateName,defaultValueNode ? 1 : 0);
		} else if(typeof(defaultValueNode) == "number" && ((defaultValueNode | 0) === defaultValueNode)) {
			defaultValues.set(stateName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "number") {
			defaultValues.set(stateName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "string") {
			defaultValues.set(stateName,defaultValueNode);
		} else if(((defaultValueNode) instanceof Array) && defaultValueNode.__enum__ == null) {
			if(stateName == "priority" && typeof(node[0]) == "string" && typeof(node[1]) == "number") {
				defaultValues.set(stateName,this.getPriorityValue(node[0]) + node[1]);
			} else {
				throw new js__$Boot_HaxeError("");
			}
		}
	}
	parseDefaultValueVectorArray(defaultValueNode,scope,valueName,defaultValues) {
		var size = defaultValueNode.length;
		var type = defaultValueNode[0];
		if(typeof(type) == "number" && ((type | 0) === type) || typeof(type) == "number") {
			var value = [];
			var _g = 0;
			var _g1 = size;
			while(_g < _g1) {
				var i = _g++;
				value[i] = defaultValueNode[i];
			}
			if(size == 2) {
				var this1 = new glm_Vec2Base();
				this1.x = value[0];
				this1.y = value[1];
				defaultValues.set(valueName,this1);
			} else if(size == 3) {
				var this2 = new glm_Vec3Base();
				this2.x = value[0];
				this2.y = value[1];
				this2.z = value[2];
				defaultValues.set(valueName,this2);
			} else if(size == 4) {
				var this3 = new glm_Vec4Base();
				this3.x = value[0];
				this3.y = value[1];
				this3.z = value[2];
				this3.w = value[3];
				defaultValues.set(valueName,this3);
			}
		} else if(typeof(type) == "boolean") {
			var value1 = [];
			var _g2 = 0;
			var _g11 = size;
			while(_g2 < _g11) {
				var i1 = _g2++;
				value1[i1] = defaultValueNode[i1] ? 1 : 0;
			}
			if(size == 2) {
				var this4 = new glm_Vec2Base();
				this4.x = value1[0];
				this4.y = value1[1];
				defaultValues.set(valueName,this4);
			} else if(size == 3) {
				var this5 = new glm_Vec3Base();
				this5.x = value1[0];
				this5.y = value1[1];
				this5.z = value1[2];
				defaultValues.set(valueName,this5);
			} else if(size == 4) {
				var this6 = new glm_Vec4Base();
				this6.x = value1[0];
				this6.y = value1[1];
				this6.z = value1[2];
				this6.w = value1[3];
				defaultValues.set(valueName,this6);
			}
		}
	}
	parseDefaultValueVectorObject(defaultValueNode,scope,valueName,defaultValues) {
		var memberNames = Reflect.fields(defaultValueNode);
		var size = memberNames.length;
		var type = Reflect.field(defaultValueNode,memberNames[0]);
		var offsets = ["x","y","z","w"];
		if(typeof(type) == "number" && ((type | 0) === type) || typeof(type) == "number") {
			var value = [];
			var _g = 0;
			var _g1 = size;
			while(_g < _g1) {
				var i = _g++;
				value[i] = Reflect.field(defaultValueNode,offsets[i]);
			}
			if(size == 2) {
				var this1 = new glm_Vec2Base();
				this1.x = value[0];
				this1.y = value[1];
				defaultValues.set(valueName,this1);
			} else if(size == 3) {
				var this2 = new glm_Vec3Base();
				this2.x = value[0];
				this2.y = value[1];
				this2.z = value[2];
				defaultValues.set(valueName,this2);
			} else if(size == 4) {
				var this3 = new glm_Vec4Base();
				this3.x = value[0];
				this3.y = value[1];
				this3.z = value[2];
				this3.w = value[3];
				defaultValues.set(valueName,this3);
			}
		} else if(typeof(type) == "boolean") {
			var value1 = [];
			var _g2 = 0;
			var _g11 = size;
			while(_g2 < _g11) {
				var i1 = _g2++;
				value1[i1] = Reflect.field(defaultValueNode,offsets[i1]) ? 1 : 0;
			}
			if(size == 2) {
				var this4 = new glm_Vec2Base();
				this4.x = value1[0];
				this4.y = value1[1];
				defaultValues.set(valueName,this4);
			} else if(size == 3) {
				var this5 = new glm_Vec3Base();
				this5.x = value1[0];
				this5.y = value1[1];
				this5.z = value1[2];
				defaultValues.set(valueName,this5);
			} else if(size == 4) {
				var this6 = new glm_Vec4Base();
				this6.x = value1[0];
				this6.y = value1[1];
				this6.z = value1[2];
				this6.w = value1[3];
				defaultValues.set(valueName,this6);
			}
		}
	}
	parseBinding(node,scope,binding) {
		binding.source = 0;
		if(typeof(node) == "string") {
			binding.propertyName = node;
			return true;
		} else {
			var bindingNode = Reflect.field(node,"binding");
			if(typeof(bindingNode) == "string") {
				binding.propertyName = bindingNode;
				return true;
			} else if(this.isDynamic(bindingNode)) {
				var propertyNode = Reflect.field(bindingNode,"property");
				var sourceNode = Reflect.field(bindingNode,"source");
				if(typeof(propertyNode) == "string") {
					binding.propertyName = propertyNode;
				}
				if(typeof(sourceNode) == "string") {
					var sourceStr = sourceNode;
					if(sourceStr == "target") {
						binding.source = 0;
					} else if(sourceStr == "renderer") {
						binding.source = 1;
					} else if(sourceStr == "root") {
						binding.source = 2;
					}
				}
				return true;
			}
		}
		return false;
	}
	parseMacroBinding(node,scope,binding) {
		if(!this.isDynamic(node)) {
			return;
		}
		var bindingNode = Reflect.field(node,"binding");
		if(!this.isDynamic(bindingNode)) {
			return;
		}
		var minNode = Reflect.field(bindingNode,"min");
		if(typeof(minNode) == "number" && ((minNode | 0) === minNode)) {
			binding.minValue = minNode;
		}
		var maxNode = Reflect.field(bindingNode,"max");
		if(typeof(maxNode) == "number" && ((maxNode | 0) === maxNode)) {
			binding.maxValue = maxNode;
		}
	}
	parseMacroBindings(node,scope,bindings) {
	}
	parseAttributes(node,scope,attributes) {
		var attributesNode = Reflect.field(node,"attributes");
		if(this.isDynamic(attributesNode)) {
			var defaultValuesProvider = null;
			if(attributes.bindingMap.defaultValues.get_providers().length > 0) {
				defaultValuesProvider = attributes.bindingMap.defaultValues.get_providers()[0];
			} else {
				defaultValuesProvider = minko_data_Provider.create();
				attributes.bindingMap.defaultValues.addProvider(defaultValuesProvider);
			}
			var memberNames = Reflect.fields(attributesNode);
			var _g = 0;
			while(_g < memberNames.length) {
				var attributeName = memberNames[_g];
				++_g;
				var attributeNode = Reflect.field(attributesNode,attributeName);
				var binding = new minko_data_Binding();
				if(this.parseBinding(attributeNode,scope,binding)) {
					var _this = attributes.bindingMap.bindings;
					if(__map_reserved[attributeName] != null) {
						_this.setReserved(attributeName,binding);
					} else {
						_this.h[attributeName] = binding;
					}
				}
			}
		}
	}
	parseUniforms(node,scope,uniforms) {
		var uniformsNode = Reflect.field(node,"uniforms");
		if(this.isDynamic(uniformsNode)) {
			var defaultValuesProvider = null;
			if(uniforms.bindingMap.defaultValues.get_providers().length > 0) {
				defaultValuesProvider = uniforms.bindingMap.defaultValues.get_providers()[0];
			} else {
				defaultValuesProvider = minko_data_Provider.create();
				uniforms.bindingMap.defaultValues.addProvider(defaultValuesProvider);
			}
			var _g = 0;
			var _g1 = Reflect.fields(uniformsNode);
			while(_g < _g1.length) {
				var uniformName = _g1[_g];
				++_g;
				var uniformNode = Reflect.field(uniformsNode,uniformName);
				var binding = new minko_data_Binding();
				if(this.parseBinding(uniformNode,scope,binding)) {
					var _this = uniforms.bindingMap.bindings;
					if(__map_reserved[uniformName] != null) {
						_this.setReserved(uniformName,binding);
					} else {
						_this.h[uniformName] = binding;
					}
				}
				this.parseSamplerStates(uniformNode,scope,uniformName,defaultValuesProvider,uniforms.bindingMap);
				this.parseDefaultValue(uniformNode,scope,uniformName,defaultValuesProvider);
			}
		}
	}
	parseMacros(node,scope,macros) {
		var macrosNode = Reflect.field(node,"macros");
		if(this.isDynamic(macrosNode)) {
			var defaultValuesProvider = null;
			if(macros.bindingMap.defaultValues.get_providers().length > 0) {
				defaultValuesProvider = macros.bindingMap.defaultValues.get_providers()[0];
			} else {
				defaultValuesProvider = minko_data_Provider.create();
				macros.bindingMap.defaultValues.addProvider(defaultValuesProvider);
			}
			var _g = 0;
			var _g1 = Reflect.fields(macrosNode);
			while(_g < _g1.length) {
				var macroName = _g1[_g];
				++_g;
				var macroNode = Reflect.field(macrosNode,macroName);
				var binding = new minko_data_MacroBinding();
				if(this.parseBinding(macroNode,scope,binding)) {
					this.parseMacroBinding(macroNode,scope,binding);
					var _this = macros.bindingMap.bindings;
					if(__map_reserved[macroName] != null) {
						_this.setReserved(macroName,binding);
					} else {
						_this.h[macroName] = binding;
					}
				}
				this.parseDefaultValue(macroNode,scope,macroName,defaultValuesProvider);
				var _this1 = macros.bindingMap.types;
				var value = 0;
				if(__map_reserved[macroName] != null) {
					_this1.setReserved(macroName,value);
				} else {
					_this1.h[macroName] = value;
				}
				if(this.isDynamic(macroNode)) {
					var typeNode = Reflect.field(macroNode,"type");
					if(typeof(typeNode) == "string") {
						var _this2 = macros.bindingMap.types;
						var value1 = minko_data_MacroBindingMap.stringToMacroType(typeNode);
						if(__map_reserved[macroName] != null) {
							_this2.setReserved(macroName,value1);
						} else {
							_this2.h[macroName] = value1;
						}
					}
				}
			}
		}
	}
	parseStates(node,scope,stateBlock) {
		var statesNode = Reflect.field(node,"states");
		var memberNames = Reflect.fields(statesNode);
		if(this.isDynamic(statesNode)) {
			var _g = 0;
			while(_g < memberNames.length) {
				var stateName = memberNames[_g];
				++_g;
				if(Lambda.has(minko_render_States.PROPERTY_NAMES,stateName)) {
					var parse_states = Reflect.field(statesNode,stateName);
					if(this.isDynamic(parse_states)) {
						var binding = new minko_data_Binding();
						if(this.parseBinding(parse_states,scope,binding)) {
							var _this = stateBlock.bindingMap.bindings;
							if(__map_reserved[stateName] != null) {
								_this.setReserved(stateName,binding);
							} else {
								_this.h[stateName] = binding;
							}
						} else {
							this.parseState(parse_states,scope,stateBlock,stateName);
						}
						if(Object.prototype.hasOwnProperty.call(parse_states,"default")) {
							var defaultValueNode = Reflect.field(parse_states,"default");
							this.parseState(defaultValueNode,scope,stateBlock,stateName);
						}
					} else {
						this.parseState(parse_states,scope,stateBlock,stateName);
					}
				} else if(Lambda.has(minko_file_EffectParser._extraStateNames,stateName)) {
					var parse_states1 = Reflect.field(statesNode,stateName);
					if(stateName == "blendingMode") {
						this.parseBlendingMode(parse_states1,scope,stateBlock);
					} else if(stateName == "stencilTest") {
						this.parseStencilState(parse_states1,scope,stateBlock);
					}
				}
			}
		}
	}
	parseState(node,scope,stateBlock,stateProperty) {
		if(stateProperty == "priority") {
			this.parsePriority(node,scope,stateBlock);
		} else if(stateProperty == minko_file_EffectParser._extraStateNames[0]) {
			this.parseBlendingMode(node,scope,stateBlock);
		} else if(stateProperty == "blendingSource") {
			this.parseBlendingSource(node,scope,stateBlock);
		} else if(stateProperty == "blendingDestination") {
			this.parseBlendingDestination(node,scope,stateBlock);
		} else if(stateProperty == "zSorted") {
			this.parseZSort(node,scope,stateBlock);
		} else if(stateProperty == "colorMask") {
			this.parseColorMask(node,scope,stateBlock);
		} else if(stateProperty == "depthMask") {
			this.parseDepthMask(node,scope,stateBlock);
		} else if(stateProperty == "depthFunction") {
			this.parseDepthFunction(node,scope,stateBlock);
		} else if(stateProperty == "triangleCulling") {
			this.parseTriangleCulling(node,scope,stateBlock);
		} else if(stateProperty == "stencilFunction") {
			this.parseStencilFunction(node,scope,stateBlock);
		} else if(stateProperty == "stencilReference") {
			this.parseStencilReference(node,scope,stateBlock);
		} else if(stateProperty == "stencilMask") {
			this.parseStencilMask(node,scope,stateBlock);
		} else if(stateProperty == "stencilFailOperation") {
			this.parseStencilFailOperation(node,scope,stateBlock);
		} else if(stateProperty == "stencilZFailOperation") {
			this.parseStencilZFailOperation(node,scope,stateBlock);
		} else if(stateProperty == "stencilZPassOperation") {
			this.parseStencilZPassOperation(node,scope,stateBlock);
		} else if(stateProperty == "scissorTest") {
			this.parseScissorTest(node,scope,stateBlock);
		} else if(stateProperty == "scissorBox") {
			this.parseScissorBox(node,scope,stateBlock);
		} else if(stateProperty == "target") {
			this.parseTarget(node,scope,stateBlock);
		}
	}
	parsePriority(node,scope,stateBlock) {
		if(node != null) {
			var priority = 0.0;
			if(typeof(node) == "number" && ((node | 0) === node)) {
				priority = node;
			} else if(typeof(node) == "number") {
				priority = node;
			} else if(typeof(node) == "string") {
				priority = this.getPriorityValue(node);
			} else if(((node) instanceof Array) && node.__enum__ == null) {
				var tmp = node;
				if(typeof(tmp[0]) == "string" && typeof(tmp[1]) == "number") {
					priority = this.getPriorityValue(tmp[0]) + tmp[1];
				}
			}
			stateBlock.states.set_priority(priority);
		}
	}
	parseBlendingMode(node,scope,stateBlock) {
		if(((node) instanceof Array) && node.__enum__ == null) {
			var blendingSrcString = node[0];
			var _this = minko_file_EffectParser._blendingSourceMap;
			if(__map_reserved[blendingSrcString] != null ? _this.existsReserved(blendingSrcString) : _this.h.hasOwnProperty(blendingSrcString)) {
				var _this1 = minko_file_EffectParser._blendingSourceMap;
				stateBlock.states.set_blendingSourceFactor(__map_reserved[blendingSrcString] != null ? _this1.getReserved(blendingSrcString) : _this1.h[blendingSrcString]);
			}
			var blendingDstString = node[1];
			var _this2 = minko_file_EffectParser._blendingDestinationMap;
			if(__map_reserved[blendingDstString] != null ? _this2.existsReserved(blendingDstString) : _this2.h.hasOwnProperty(blendingDstString)) {
				var _this3 = minko_file_EffectParser._blendingDestinationMap;
				stateBlock.states.set_blendingDestinationFactor(__map_reserved[blendingDstString] != null ? _this3.getReserved(blendingDstString) : _this3.h[blendingDstString]);
			}
		} else if(typeof(node) == "string") {
			var blendingModeString = node;
			var _this4 = minko_file_EffectParser._blendingModeMap;
			if(__map_reserved[blendingModeString] != null ? _this4.existsReserved(blendingModeString) : _this4.h.hasOwnProperty(blendingModeString)) {
				var _this5 = minko_file_EffectParser._blendingModeMap;
				var blendingMode = __map_reserved[blendingModeString] != null ? _this5.getReserved(blendingModeString) : _this5.h[blendingModeString];
				stateBlock.states.set_blendingSourceFactor(blendingMode & 255);
				stateBlock.states.set_blendingDestinationFactor(blendingMode & 65280);
			}
		}
	}
	parseBlendingSource(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._blendingSourceMap;
			var key = node;
			var blendingSourceString = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			stateBlock.states.set_blendingSourceFactor(blendingSourceString);
		}
	}
	parseBlendingDestination(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._blendingDestinationMap;
			var key = node;
			var blendingDestination = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			stateBlock.states.set_blendingDestinationFactor(blendingDestination);
		}
	}
	parseZSort(node,scope,stateBlock) {
		if(typeof(node) == "boolean") {
			stateBlock.states.set_zSorted(node);
		}
	}
	parseColorMask(node,scope,stateBlock) {
		if(typeof(node) == "boolean") {
			stateBlock.states.set_colorMask(node);
		}
	}
	parseDepthMask(node,scope,stateBlock) {
		if(typeof(node) == "boolean") {
			stateBlock.states.set_depthMask(node);
		}
	}
	parseDepthFunction(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var compareModeString = node;
			var _this = minko_file_EffectParser._compareFuncMap;
			var exist = __map_reserved[compareModeString] != null ? _this.existsReserved(compareModeString) : _this.h.hasOwnProperty(compareModeString);
			if(exist) {
				var _this1 = minko_file_EffectParser._compareFuncMap;
				stateBlock.states.set_depthFunction(__map_reserved[compareModeString] != null ? _this1.getReserved(compareModeString) : _this1.h[compareModeString]);
			}
		}
	}
	parseTriangleCulling(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var triangleCullingString = node;
			var _this = minko_file_EffectParser._triangleCullingMap;
			var exist = __map_reserved[triangleCullingString] != null ? _this.existsReserved(triangleCullingString) : _this.h.hasOwnProperty(triangleCullingString);
			if(exist) {
				var _this1 = minko_file_EffectParser._triangleCullingMap;
				stateBlock.states.set_triangleCulling(__map_reserved[triangleCullingString] != null ? _this1.getReserved(triangleCullingString) : _this1.h[triangleCullingString]);
			}
		}
	}
	parseTarget(node,scope,stateBlock) {
		var target = null;
		var targetName = "";
		if(this.isDynamic(node)) {
			var nameValue = Reflect.field(node,"name");
			if(typeof(nameValue) == "string") {
				targetName = nameValue;
			}
			if(!Object.prototype.hasOwnProperty.call(node,"size") && !(Object.prototype.hasOwnProperty.call(node,"width") && Object.prototype.hasOwnProperty.call(node,"height"))) {
				return;
			}
			var width = 0;
			var height = 0;
			if(Object.prototype.hasOwnProperty.call(node,"size")) {
				height = Reflect.field(node,"size");
				width = height;
			} else {
				if(!Object.prototype.hasOwnProperty.call(node,"width") || !Object.prototype.hasOwnProperty.call(node,"height")) {
					this._error.execute(this,this._resolvedFilename + ": render target definition requires both \"width\" and \"height\" properties.");
				}
				width = Reflect.field(node,"width");
				height = Reflect.field(node,"height");
			}
			var isCubeTexture = Object.prototype.hasOwnProperty.call(node,"isCube") && Reflect.field(node,"isCube");
			if(isCubeTexture) {
				target = minko_render_CubeTexture.create(this._options.get_context(),width,height,false,true);
				if(targetName.length != 0) {
					this._assetLibrary.setCubeTexture(targetName,target);
				}
			} else {
				target = minko_render_Texture.create(this._options.get_context(),width,height,false,true);
				if(targetName.length != 0) {
					this._assetLibrary.setTexture(targetName,target);
				}
			}
			target.upload();
			this._effectData.set(targetName,target);
		} else if(typeof(node) == "string") {
			targetName = node;
			target = this._assetLibrary.texture(targetName);
			if(target == null) {
				throw new js__$Boot_HaxeError("");
			}
			this._effectData.set(targetName,target);
		}
		if(target != null) {
			stateBlock.states.set_target(target);
		}
	}
	parseStencilState(node,scope,stateBlock) {
		if(this.isDynamic(node)) {
			var stencilFuncValue = Reflect.field(node,"stencilFunction");
			var stencilRefValue = Reflect.field(node,"stencilReference");
			var stencilMaskValue = Reflect.field(node,"stencilMask");
			var stencilOpsValue = Reflect.field(node,"stencilOps");
			this.parseStencilFunction(stencilFuncValue,scope,stateBlock);
			this.parseStencilReference(stencilRefValue,scope,stateBlock);
			this.parseStencilMask(stencilMaskValue,scope,stateBlock);
			this.parseStencilOperations(stencilOpsValue,scope,stateBlock);
		} else if(((node) instanceof Array) && node.__enum__ == null) {
			this.parseStencilFunction(node[0],scope,stateBlock);
			this.parseStencilReference(node[1],scope,stateBlock);
			this.parseStencilMask(node[2],scope,stateBlock);
			this.parseStencilOperations(node[3],scope,stateBlock);
		}
	}
	parseStencilFunction(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._compareFuncMap;
			var key = node;
			stateBlock.states.set_stencilFunction(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	parseStencilReference(node,scope,stateBlock) {
		if(typeof(node) == "number" && ((node | 0) === node)) {
			stateBlock.states.set_stencilReference(node);
		}
	}
	parseStencilMask(node,scope,stateBlock) {
		if(typeof(node) == "number" && ((node | 0) === node)) {
			stateBlock.states.set_stencilMask(node);
		}
	}
	parseStencilOperations(node,scope,stateBlock) {
		if(((node) instanceof Array) && node.__enum__ == null) {
			if(typeof(node[0]) == "string") {
				var _this = minko_file_EffectParser._stencilOpMap;
				var key = node[0];
				stateBlock.states.set_stencilFailOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
			}
			if(typeof(node[1]) == "string") {
				var _this1 = minko_file_EffectParser._stencilOpMap;
				var key1 = node[1];
				stateBlock.states.set_stencilZFailOperation(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
			}
			if(typeof(node[2]) == "string") {
				var _this2 = minko_file_EffectParser._stencilOpMap;
				var key2 = node[2];
				stateBlock.states.set_stencilZPassOperation(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]);
			}
		} else {
			this.parseStencilFailOperation(Reflect.field(node,"fail"),scope,stateBlock);
			this.parseStencilZFailOperation(Reflect.field(node,"zfail"),scope,stateBlock);
			this.parseStencilZPassOperation(Reflect.field(node,"zpass"),scope,stateBlock);
		}
	}
	parseStencilFailOperation(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._stencilOpMap;
			var key = node;
			stateBlock.states.set_stencilFailOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	parseStencilZFailOperation(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._stencilOpMap;
			var key = node;
			stateBlock.states.set_stencilZFailOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	parseStencilZPassOperation(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._stencilOpMap;
			var key = node;
			stateBlock.states.set_stencilZPassOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	parseScissorTest(node,scope,stateBlock) {
		if(node != null && typeof(node) == "boolean") {
			stateBlock.states.set_scissorTest(node);
		}
	}
	parseScissorBox(node,scope,stateBlock) {
		if(node != null && (((node) instanceof Array) && node.__enum__ == null)) {
			var this1 = new glm_Vec4Base();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this1.w = 0;
			var scissorBox = this1;
			if(js_Boot.__instanceof(node[0],Int)) {
				scissorBox.x = node[0];
			}
			if(js_Boot.__instanceof(node[1],Int)) {
				scissorBox.y = node[1];
			}
			if(js_Boot.__instanceof(node[2],Int)) {
				scissorBox.z = node[2];
			}
			if(js_Boot.__instanceof(node[3],Int)) {
				scissorBox.w = node[3];
			}
			stateBlock.states.set_scissorBox(scissorBox);
		}
	}
	parseSamplerStates(node,scope,uniformName,defaultValues,bindingMap) {
		if(this.isDynamic(node)) {
			var wrapModeNode = Reflect.field(node,"wrapMode");
			if(typeof(wrapModeNode) == "string") {
				var wrapModeStr = wrapModeNode;
				var wrapMode = minko_render_SamplerStates.stringToWrapMode(wrapModeStr);
				defaultValues.set(minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"wrapMode"),wrapMode);
			} else if(this.isDynamic(wrapModeNode)) {
				var uniformWrapModeBindingName = minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"wrapMode");
				var _this = bindingMap.bindings;
				if(!(__map_reserved[uniformWrapModeBindingName] != null ? _this.existsReserved(uniformWrapModeBindingName) : _this.h.hasOwnProperty(uniformWrapModeBindingName))) {
					var _this1 = bindingMap.bindings;
					var value = new minko_data_Binding();
					if(__map_reserved[uniformWrapModeBindingName] != null) {
						_this1.setReserved(uniformWrapModeBindingName,value);
					} else {
						_this1.h[uniformWrapModeBindingName] = value;
					}
				}
				var _this2 = bindingMap.bindings;
				this.parseBinding(wrapModeNode,scope,__map_reserved[uniformWrapModeBindingName] != null ? _this2.getReserved(uniformWrapModeBindingName) : _this2.h[uniformWrapModeBindingName]);
				this.parseDefaultValueSamplerStates("WrapMode",wrapModeNode,scope,uniformWrapModeBindingName,defaultValues);
			}
			var textureFilterNode = Reflect.field(node,"textureFilter");
			if(typeof(textureFilterNode) == "string") {
				var textureFilterStr = textureFilterNode;
				var textureFilter = minko_render_SamplerStates.stringToTextureFilter(textureFilterStr);
				defaultValues.set(minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"textureFilter"),textureFilter);
			} else if(this.isDynamic(textureFilterNode)) {
				var uniformTextureFilterBindingName = minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"textureFilter");
				var _this3 = bindingMap.bindings;
				if(!(__map_reserved[uniformTextureFilterBindingName] != null ? _this3.existsReserved(uniformTextureFilterBindingName) : _this3.h.hasOwnProperty(uniformTextureFilterBindingName))) {
					var _this4 = bindingMap.bindings;
					var value1 = new minko_data_Binding();
					if(__map_reserved[uniformTextureFilterBindingName] != null) {
						_this4.setReserved(uniformTextureFilterBindingName,value1);
					} else {
						_this4.h[uniformTextureFilterBindingName] = value1;
					}
				}
				var _this5 = bindingMap.bindings;
				this.parseBinding(textureFilterNode,scope,__map_reserved[uniformTextureFilterBindingName] != null ? _this5.getReserved(uniformTextureFilterBindingName) : _this5.h[uniformTextureFilterBindingName]);
				this.parseDefaultValueSamplerStates("TextureFilter",textureFilterNode,scope,uniformTextureFilterBindingName,defaultValues);
			}
			var mipFilterNode = Reflect.field(node,"mipFilter");
			if(typeof(mipFilterNode) == "string") {
				var mipFilterStr = mipFilterNode;
				var mipFilter = minko_render_SamplerStates.stringToMipFilter(mipFilterStr);
				defaultValues.set(minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"mipFilter"),mipFilter);
			} else if(this.isDynamic(mipFilterNode)) {
				var uniformMipFilterBindingName = minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"mipFilter");
				var _this6 = bindingMap.bindings;
				if(!(__map_reserved[uniformMipFilterBindingName] != null ? _this6.existsReserved(uniformMipFilterBindingName) : _this6.h.hasOwnProperty(uniformMipFilterBindingName))) {
					var _this7 = bindingMap.bindings;
					var value2 = new minko_data_Binding();
					if(__map_reserved[uniformMipFilterBindingName] != null) {
						_this7.setReserved(uniformMipFilterBindingName,value2);
					} else {
						_this7.h[uniformMipFilterBindingName] = value2;
					}
				}
				var _this8 = bindingMap.bindings;
				this.parseBinding(mipFilterNode,scope,__map_reserved[uniformMipFilterBindingName] != null ? _this8.getReserved(uniformMipFilterBindingName) : _this8.h[uniformMipFilterBindingName]);
				this.parseDefaultValueSamplerStates("MipFilter",mipFilterNode,scope,uniformMipFilterBindingName,defaultValues);
			}
		}
	}
	parseShader(node,scope,type) {
		if(typeof(node) != "string") {
			throw new js__$Boot_HaxeError("");
		}
		var glsl = node;
		var shader = minko_render_Shader.createbySource(this._options.get_context(),type,glsl);
		var blocks = new minko_file_GLSLBlockTree(new minko_file_GLSLBlock(0,""));
		var includes = [];
		this._shaderToGLSL.set(shader,blocks);
		this.parseGLSL(glsl,this._options,blocks,includes);
		shader.set_source(glsl);
		return shader;
	}
	parseGLSL(glsl,options,blocks,includes) {
		var stream = glsl.split("\n");
		var i = 0;
		var lastBlockEnd = 0;
		var numIncludes = 0;
		var _g = 0;
		while(_g < stream.length) {
			var line = stream[_g];
			++_g;
			var pos = line.indexOf("#pragma include ");
			var commentPos = line.indexOf("//");
			if(pos != -1 && (commentPos == -1 || pos < commentPos) && (line.indexOf("\"",pos) != -1 || line.indexOf("'",pos) != -1)) {
				var splitStr = "'";
				if(line.indexOf("\"",pos) != -1) {
					splitStr = "\"";
				}
				var filename = line.substring(line.indexOf(splitStr,pos) + splitStr.length,line.lastIndexOf(splitStr));
				if(lastBlockEnd != i) {
					blocks.leaf.push(new minko_file_GLSLBlockTree(new minko_file_GLSLBlock(0,HxOverrides.substr(glsl,lastBlockEnd,i - lastBlockEnd))));
				}
				if(!Lambda.has(includes,filename)) {
					includes.push(filename);
					blocks.leaf.push(new minko_file_GLSLBlockTree(new minko_file_GLSLBlock(1,filename)));
				}
				lastBlockEnd = i + line.length + 1;
				++numIncludes;
			}
			i += line.length + 1;
		}
		if(i != lastBlockEnd) {
			blocks.leaf.push(new minko_file_GLSLBlockTree(new minko_file_GLSLBlock(0,HxOverrides.substr(glsl,lastBlockEnd,null))));
		}
		if(numIncludes > 0) {
			this.loadGLSLDependencies(blocks,options,includes);
		}
	}
	loadGLSLDependencies(blocks,options,includes) {
		var _gthis = this;
		var _g = 0;
		var _g1 = blocks.leaf;
		while(_g < _g1.length) {
			var blockIt = [_g1[_g]];
			++_g;
			var block = [blockIt[0].node];
			if(block[0].type == 1) {
				if(options.get_assetLibrary().hasBlob(block[0].value)) {
					var data = options.get_assetLibrary().blob(block[0].value);
					this.parseGLSL(data.toString(),options,blockIt[0],includes);
				} else {
					var loader = minko_file_Loader.createbyOptions(options);
					this._numDependencies++;
					this._loaderCompleteSlots.set(loader,loader.get_complete().connect((function(block1,blockIt1) {
						return function(_1) {
							_gthis.glslIncludeCompleteHandler(_1,blockIt1[0],block1[0].value,includes);
							_gthis._numLoadedDependencies++;
							if(_gthis._numDependencies == _gthis._numLoadedDependencies && _gthis._effect != null) {
								_gthis.finalize();
							}
						};
					})(block,blockIt),0,true));
					this._loaderErrorSlots.set(loader,loader.get_error().connect((function(block2) {
						return function(_11,_2) {
							_gthis.dependencyErrorHandler(_11,_2,block2[0].value);
						};
					})(block),0,true));
					loader.queue(block[0].value).load();
				}
			}
		}
	}
	checkLoadedAndfinalize() {
		if(this._numDependencies == this._numLoadedDependencies && this._effect != null) {
			this.finalize();
		}
	}
	dependencyErrorHandler(loader,error,filename) {
		var err = "Unable to load '" + filename + "' required by \"" + this._filename + "\", included paths are: " + Std.string(loader.get_options().get_includePaths());
		this._error.execute(this,err);
	}
	createStates(block) {
		return null;
	}
	concatenateGLSLBlocks(blocks) {
		var glsl = "";
		var _g = 0;
		var _g1 = blocks.leaf;
		while(_g < _g1.length) {
			var block = _g1[_g];
			++_g;
			glsl += this.concatenateGLSLBlocks(block);
		}
		if(blocks.node.type == 0) {
			glsl += blocks.node.value;
		} else {
			haxe_Log.trace("concatenateGLSLBlocks",{ fileName : "minko/file/EffectParser.hx", lineNumber : 1706, className : "minko.file.EffectParser", methodName : "concatenateGLSLBlocks", customParams : [blocks.node.value]});
			glsl += "\n//" + blocks.node.value + "\n";
		}
		return glsl;
	}
	glslIncludeCompleteHandler(loader,blocks,filename,includes) {
		var block = blocks.node;
		var _this = loader.get_files();
		var file = __map_reserved[filename] != null ? _this.getReserved(filename) : _this.h[filename];
		var resolvedFilename = file.get_resolvedFilename();
		var options = loader.get_options();
		var pos = resolvedFilename.lastIndexOf("/");
		if(pos == -1) {
			pos = resolvedFilename.lastIndexOf("\\");
		}
		if(pos != -1) {
			options = options.clone();
			options.set_includePaths([]);
			options.get_includePaths().push(HxOverrides.substr(resolvedFilename,0,pos));
		}
		this.parseGLSL(file.get_data().toString(),options,blocks,includes);
	}
	loadTexture(textureFilename,uniformName,defaultValues) {
		var _gthis = this;
		if(this._options.get_assetLibrary().texture(textureFilename) != null) {
			var tmp = this._assetLibrary.texture(textureFilename);
			defaultValues.set(uniformName,tmp);
			return;
		}
		var loader = minko_file_Loader.createbyOptions(this._options);
		this._numDependencies++;
		this._loaderCompleteSlots.set(loader,loader.get_complete().connect(function(loader1) {
			var texture = _gthis._assetLibrary.texture(textureFilename);
			defaultValues.set(uniformName,texture);
			texture.upload();
			_gthis._numLoadedDependencies++;
			if(_gthis._numDependencies == _gthis._numLoadedDependencies && _gthis._effect != null) {
				_gthis.finalize();
			}
		}));
		this._loaderErrorSlots.set(loader,loader.get_error().connect(function(_1,_2) {
			_gthis.dependencyErrorHandler(_1,_2,textureFilename);
		}));
		loader.queue(textureFilename).load();
	}
	finalize() {
		var technique = this._globalScope.techniques.keys();
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _this = this._globalScope.techniques;
			var technique_second = __map_reserved[technique1] != null ? _this.getReserved(technique1) : _this.h[technique1];
			this._effect.addTechnique(technique1,technique_second);
			var _g = 0;
			while(_g < technique_second.length) {
				var pass = technique_second[_g];
				++_g;
				var vs = pass.get_program().get_vertexShader();
				var fs = pass.get_program().get_fragmentShader();
				if(this._shaderToGLSL.h.__keys__[vs.__id__] != null) {
					vs.set_source("#define VERTEX_SHADER\n" + this.concatenateGLSLBlocks(this._shaderToGLSL.h[vs.__id__]));
				}
				if(this._shaderToGLSL.h.__keys__[fs.__id__] != null) {
					fs.set_source("#define FRAGMENT_SHADER\n" + this.concatenateGLSLBlocks(this._shaderToGLSL.h[fs.__id__]));
				}
			}
		}
		this._effect.get_data().copyFrom(this._effectData);
		this._options.get_assetLibrary().setEffect(this._filename,this._effect);
		this._complete.execute(this);
		var lc = this._loaderCompleteSlots.iterator();
		while(lc.hasNext()) {
			var lc1 = lc.next();
			lc1.dispose();
		}
		this._loaderCompleteSlots = new haxe_ds_ObjectMap();
		var lc2 = this._loaderErrorSlots.iterator();
		while(lc2.hasNext()) {
			var lc3 = lc2.next();
			lc3.dispose();
		}
		this._loaderErrorSlots = new haxe_ds_ObjectMap();
	}
	static initialize_blendingSourceMap() {
		var tmp = new haxe_ds_StringMap();
		var value = 1;
		if(__map_reserved["zero"] != null) {
			tmp.setReserved("zero",value);
		} else {
			tmp.h["zero"] = value;
		}
		var value1 = 2;
		if(__map_reserved["one"] != null) {
			tmp.setReserved("one",value1);
		} else {
			tmp.h["one"] = value1;
		}
		var value2 = 4;
		if(__map_reserved["color"] != null) {
			tmp.setReserved("color",value2);
		} else {
			tmp.h["color"] = value2;
		}
		var value3 = 8;
		if(__map_reserved["one_minus_src_color"] != null) {
			tmp.setReserved("one_minus_src_color",value3);
		} else {
			tmp.h["one_minus_src_color"] = value3;
		}
		var value4 = 16;
		if(__map_reserved["src_alpha"] != null) {
			tmp.setReserved("src_alpha",value4);
		} else {
			tmp.h["src_alpha"] = value4;
		}
		var value5 = 32;
		if(__map_reserved["one_minus_src_alpha"] != null) {
			tmp.setReserved("one_minus_src_alpha",value5);
		} else {
			tmp.h["one_minus_src_alpha"] = value5;
		}
		var value6 = 64;
		if(__map_reserved["dst_alpha"] != null) {
			tmp.setReserved("dst_alpha",value6);
		} else {
			tmp.h["dst_alpha"] = value6;
		}
		var value7 = 128;
		if(__map_reserved["one_minus_dst_alpha"] != null) {
			tmp.setReserved("one_minus_dst_alpha",value7);
		} else {
			tmp.h["one_minus_dst_alpha"] = value7;
		}
		return tmp;
	}
	static initialize_blendingDestinationMap() {
		var tmp = new haxe_ds_StringMap();
		var value = 256;
		if(__map_reserved["zero"] != null) {
			tmp.setReserved("zero",value);
		} else {
			tmp.h["zero"] = value;
		}
		var value1 = 512;
		if(__map_reserved["one"] != null) {
			tmp.setReserved("one",value1);
		} else {
			tmp.h["one"] = value1;
		}
		var value2 = 1024;
		if(__map_reserved["dst_color"] != null) {
			tmp.setReserved("dst_color",value2);
		} else {
			tmp.h["dst_color"] = value2;
		}
		var value3 = 2048;
		if(__map_reserved["one_minus_dst_color"] != null) {
			tmp.setReserved("one_minus_dst_color",value3);
		} else {
			tmp.h["one_minus_dst_color"] = value3;
		}
		var value4 = 4096;
		if(__map_reserved["src_alpha_saturate"] != null) {
			tmp.setReserved("src_alpha_saturate",value4);
		} else {
			tmp.h["src_alpha_saturate"] = value4;
		}
		var value5 = 8192;
		if(__map_reserved["one_minus_src_alpha"] != null) {
			tmp.setReserved("one_minus_src_alpha",value5);
		} else {
			tmp.h["one_minus_src_alpha"] = value5;
		}
		var value6 = 16384;
		if(__map_reserved["dst_alpha"] != null) {
			tmp.setReserved("dst_alpha",value6);
		} else {
			tmp.h["dst_alpha"] = value6;
		}
		var value7 = 32768;
		if(__map_reserved["one_minus_dst_alpha"] != null) {
			tmp.setReserved("one_minus_dst_alpha",value7);
		} else {
			tmp.h["one_minus_dst_alpha"] = value7;
		}
		return tmp;
	}
	static initialize_blendingModeMap() {
		var tmp = new haxe_ds_StringMap();
		var value = 2 | 256;
		if(__map_reserved["default"] != null) {
			tmp.setReserved("default",value);
		} else {
			tmp.h["default"] = value;
		}
		var value1 = 16 | 8192;
		if(__map_reserved["alpha"] != null) {
			tmp.setReserved("alpha",value1);
		} else {
			tmp.h["alpha"] = value1;
		}
		var value2 = 16 | 512;
		if(__map_reserved["additive"] != null) {
			tmp.setReserved("additive",value2);
		} else {
			tmp.h["additive"] = value2;
		}
		return tmp;
	}
	static initialize_compareFuncMap() {
		var tmp = new haxe_ds_StringMap();
		var value = 0;
		if(__map_reserved["always"] != null) {
			tmp.setReserved("always",value);
		} else {
			tmp.h["always"] = value;
		}
		var value1 = 1;
		if(__map_reserved["equal"] != null) {
			tmp.setReserved("equal",value1);
		} else {
			tmp.h["equal"] = value1;
		}
		var value2 = 2;
		if(__map_reserved["greater"] != null) {
			tmp.setReserved("greater",value2);
		} else {
			tmp.h["greater"] = value2;
		}
		var value3 = 3;
		if(__map_reserved["greater_equal"] != null) {
			tmp.setReserved("greater_equal",value3);
		} else {
			tmp.h["greater_equal"] = value3;
		}
		var value4 = 4;
		if(__map_reserved["less"] != null) {
			tmp.setReserved("less",value4);
		} else {
			tmp.h["less"] = value4;
		}
		var value5 = 5;
		if(__map_reserved["less_equal"] != null) {
			tmp.setReserved("less_equal",value5);
		} else {
			tmp.h["less_equal"] = value5;
		}
		var value6 = 6;
		if(__map_reserved["never"] != null) {
			tmp.setReserved("never",value6);
		} else {
			tmp.h["never"] = value6;
		}
		var value7 = 7;
		if(__map_reserved["not_equal"] != null) {
			tmp.setReserved("not_equal",value7);
		} else {
			tmp.h["not_equal"] = value7;
		}
		return tmp;
	}
	static initialize_triangleCullingMap() {
		var tmp = new haxe_ds_StringMap();
		var value = 0;
		if(__map_reserved["none"] != null) {
			tmp.setReserved("none",value);
		} else {
			tmp.h["none"] = value;
		}
		var value1 = 1;
		if(__map_reserved["front"] != null) {
			tmp.setReserved("front",value1);
		} else {
			tmp.h["front"] = value1;
		}
		var value2 = 2;
		if(__map_reserved["back"] != null) {
			tmp.setReserved("back",value2);
		} else {
			tmp.h["back"] = value2;
		}
		var value3 = 3;
		if(__map_reserved["both"] != null) {
			tmp.setReserved("both",value3);
		} else {
			tmp.h["both"] = value3;
		}
		return tmp;
	}
	static initialize_stencilOpMap() {
		var tmp = new haxe_ds_StringMap();
		var value = 0;
		if(__map_reserved["keep"] != null) {
			tmp.setReserved("keep",value);
		} else {
			tmp.h["keep"] = value;
		}
		var value1 = 1;
		if(__map_reserved["zero"] != null) {
			tmp.setReserved("zero",value1);
		} else {
			tmp.h["zero"] = value1;
		}
		var value2 = 2;
		if(__map_reserved["replace"] != null) {
			tmp.setReserved("replace",value2);
		} else {
			tmp.h["replace"] = value2;
		}
		var value3 = 3;
		if(__map_reserved["incr"] != null) {
			tmp.setReserved("incr",value3);
		} else {
			tmp.h["incr"] = value3;
		}
		var value4 = 4;
		if(__map_reserved["incr_wrap"] != null) {
			tmp.setReserved("incr_wrap",value4);
		} else {
			tmp.h["incr_wrap"] = value4;
		}
		var value5 = 5;
		if(__map_reserved["decr"] != null) {
			tmp.setReserved("decr",value5);
		} else {
			tmp.h["decr"] = value5;
		}
		var value6 = 6;
		if(__map_reserved["decr_wrap"] != null) {
			tmp.setReserved("decr_wrap",value6);
		} else {
			tmp.h["decr_wrap"] = value6;
		}
		var value7 = 7;
		if(__map_reserved["invert"] != null) {
			tmp.setReserved("invert",value7);
		} else {
			tmp.h["invert"] = value7;
		}
		return tmp;
	}
	static initialize_priorityMap() {
		var tmp = new haxe_ds_StringMap();
		var value = minko_render__$Priority_Priority_$Impl_$.FIRST;
		if(__map_reserved["first"] != null) {
			tmp.setReserved("first",value);
		} else {
			tmp.h["first"] = value;
		}
		var value1 = minko_render__$Priority_Priority_$Impl_$.BACKGROUND;
		if(__map_reserved["background"] != null) {
			tmp.setReserved("background",value1);
		} else {
			tmp.h["background"] = value1;
		}
		var value2 = minko_render__$Priority_Priority_$Impl_$.OPAQUE;
		if(__map_reserved["opaque"] != null) {
			tmp.setReserved("opaque",value2);
		} else {
			tmp.h["opaque"] = value2;
		}
		var value3 = minko_render__$Priority_Priority_$Impl_$.TRANSPARENT;
		if(__map_reserved["transparent"] != null) {
			tmp.setReserved("transparent",value3);
		} else {
			tmp.h["transparent"] = value3;
		}
		var value4 = minko_render__$Priority_Priority_$Impl_$.LAST;
		if(__map_reserved["last"] != null) {
			tmp.setReserved("last",value4);
		} else {
			tmp.h["last"] = value4;
		}
		return tmp;
	}
	static create() {
		return new minko_file_EffectParser();
	}
}
$hx_exports["minko"]["file"]["EffectParser"] = minko_file_EffectParser;
minko_file_EffectParser.__name__ = true;
minko_file_EffectParser.__super__ = minko_file_AbstractParser;
Object.assign(minko_file_EffectParser.prototype, {
	__class__: minko_file_EffectParser
});
class minko_file_File {
	constructor() {
	}
	get_filename() {
		return this._filename;
	}
	set_filename(v) {
		this._filename = v;
		return v;
	}
	get_resolvedFilename() {
		return this._resolvedFilename;
	}
	set_resolvedFilename(v) {
		this._resolvedFilename = v;
		return v;
	}
	get_data() {
		return this._data;
	}
	static create() {
		return new minko_file_File();
	}
	static getCurrentWorkingDirectory() {
		return ".";
	}
	static getBinaryDirectory() {
		return ".";
	}
	static sanitizeFilename(filename) {
		var f = StringTools.replace(filename,"\\","/");
		return f;
	}
	static canonizeFilename(filename) {
		var r = new EReg("[\\/]","ig");
		var segments = r.split(filename);
		var path = [];
		var _g = 0;
		while(_g < segments.length) {
			var current = segments[_g];
			++_g;
			if(StringTools.trim(current) == "" || current == ".") {
				continue;
			}
			if(current != "..") {
				path.push(current);
			} else if(path.length > 0 && path[path.length - 1] != "..") {
				path.pop();
			} else {
				path.push(current);
			}
		}
		var ss = filename.length > 0 && filename.charAt(0) == "/" ? "/" : "";
		var output = ss + path.join("/");
		if(path.length != 0) {
			output = HxOverrides.substr(output,0,output.length);
		}
		if(output.length == 0) {
			output = ".";
		}
		return output;
	}
	static removePrefixPathFromFilename(filename) {
		var cleanFilename = minko_file_File.sanitizeFilename(filename);
		var filenameWithoutPrefixPath = cleanFilename;
		var lastSeparatorPosition = filenameWithoutPrefixPath.lastIndexOf("/");
		if(lastSeparatorPosition != -1) {
			filenameWithoutPrefixPath = HxOverrides.substr(filenameWithoutPrefixPath,lastSeparatorPosition + 1,null);
		}
		return filenameWithoutPrefixPath;
	}
	static extractPrefixPathFromFilename(filename) {
		var cleanFilename = minko_file_File.sanitizeFilename(filename);
		var prefixPath = cleanFilename;
		var lastSeparatorPosition = prefixPath.lastIndexOf("/");
		if(lastSeparatorPosition != -1) {
			prefixPath = HxOverrides.substr(prefixPath,0,lastSeparatorPosition);
		} else {
			return "";
		}
		return prefixPath;
	}
	static getExtension(filename) {
		var extension = "";
		var lastDotPosition = filename.lastIndexOf(".");
		if(lastDotPosition != -1) {
			extension = HxOverrides.substr(filename,lastDotPosition + 1,null);
			extension = extension.toLowerCase();
		}
		return extension;
	}
	static replaceExtension(filename,extension) {
		var transformedFilename = filename;
		var lastDotPosition = transformedFilename.lastIndexOf(".");
		if(lastDotPosition != -1) {
			var previousExtension = HxOverrides.substr(transformedFilename,lastDotPosition + 1,null);
			transformedFilename = HxOverrides.substr(transformedFilename,0,transformedFilename.length - (previousExtension.length + 1));
		}
		transformedFilename += "." + extension;
		return transformedFilename;
	}
}
$hx_exports["minko"]["file"]["File"] = minko_file_File;
minko_file_File.__name__ = true;
Object.assign(minko_file_File.prototype, {
	__class__: minko_file_File
});
class minko_file_FileProtocol extends minko_file_AbstractProtocol {
	constructor() {
		minko_file_AbstractProtocol._hx_skip_constructor = true;
		super();
		minko_file_AbstractProtocol._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this._workerSlots = new haxe_ds_ObjectMap();
		super._hx_constructor();
	}
	load() {
		var loader = this;
		var _gthis = this;
		minko_file_FileProtocol._runningLoaders.push(loader);
		var resolvedFilename = this.get_resolvedFilename();
		var options = this._options;
		var cleanFilename = resolvedFilename;
		var prefixPosition = resolvedFilename.indexOf("://");
		if(prefixPosition != -1) {
			cleanFilename = HxOverrides.substr(resolvedFilename,prefixPosition + 3,null);
		}
		if(this._options.get_loadAsynchronously() && minko_AbstractCanvas.get_defaultCanvas() != null && minko_AbstractCanvas.get_defaultCanvas().isWorkerRegistered("file-protocol")) {
			var worker = minko_AbstractCanvas.get_defaultCanvas().getWorker("file-protocol");
			var tmp = this._workerSlots;
			var tmp1 = worker.get_message().connect(function(UnnamedParameter1,message) {
				if(message.type == "complete") {
					var bytes = message.data;
					_gthis.set_data(bytes);
					_gthis._complete.execute(loader);
					HxOverrides.remove(minko_file_FileProtocol._runningLoaders,loader);
					_gthis._workerSlots.h[worker.__id__].dispose();
					_gthis._workerSlots.remove(worker);
				} else if(message.type == "progress") {
					var ratio = message.data;
					_gthis._progress.execute(loader,ratio);
				} else if(message.type == "error") {
					var err = message.data;
					_gthis._error.execute(loader,err);
					_gthis._complete.execute(loader);
					HxOverrides.remove(minko_file_FileProtocol._runningLoaders,loader);
					_gthis._workerSlots.h[worker.__id__].dispose();
					_gthis._workerSlots.remove(worker);
				}
			});
			tmp.set(worker,tmp1);
			var offset = options.get_seekingOffset();
			var length = options.get_seekedLength();
			var offsetByteArray = new haxe_io_BytesOutput();
			offsetByteArray.writeInt32(offset);
			offsetByteArray.writeInt32(length);
			minko_utils_BytesTool.writeUTF(offsetByteArray,cleanFilename);
			var tmp2 = offsetByteArray.getBytes();
			worker.start(tmp2);
		}
	}
	fileExists(filename) {
		return false;
	}
	isAbsolutePath(filename) {
		var cleanFilename = minko_file_File.sanitizeFilename(filename);
		return cleanFilename.indexOf("/") == 0;
	}
	static create() {
		return new minko_file_FileProtocol();
	}
}
$hx_exports["minko"]["file"]["FileProtocol"] = minko_file_FileProtocol;
minko_file_FileProtocol.__name__ = true;
minko_file_FileProtocol.__super__ = minko_file_AbstractProtocol;
Object.assign(minko_file_FileProtocol.prototype, {
	__class__: minko_file_FileProtocol
});
class minko_file_Gltf2Parser extends minko_file_ASSIMPParser {
	constructor() {
		super();
	}
	provideLoaders(importer) {
		importer.registerLoader(new assimp_format_gltf2_GlTF2Importer());
	}
	parse(filename,resolvedFilename,options,data,assetLibrary) {
		var _gthis = this;
		var assetName = HxOverrides.substr(filename,0,filename.indexOf("gltf")) + "bin";
		var textureParentPrefixPath = minko_file_File.extractPrefixPathFromFilename(resolvedFilename);
		var texturePrefixPath = minko_file_File.extractPrefixPathFromFilename(assetName);
		var loader = minko_file_Loader.create();
		loader.set_options(options.clone());
		loader.get_options().get_includePaths().push(textureParentPrefixPath + "/" + texturePrefixPath);
		this._loaderCompleteSlots.set(loader,loader.get_complete().connect(function(l) {
			var tmp = options.get_assetLibrary().blob(assetName);
			_gthis.nextParse(filename,resolvedFilename,options,data,assetLibrary,[tmp]);
		}));
		this._loaderErrorSlots.set(loader,loader.get_error().connect(function(textureLoader,error) {
			haxe_Log.trace("LOG_DEBUG" + ("Unable to find glb with filename '" + assetName + "'"),{ fileName : "minko/file/AbstractASSIMPParser.hx", lineNumber : 647, className : "minko.file.AbstractASSIMPParser", methodName : "LOG_DEBUG"});
			_gthis._error.execute(_gthis,"MissingDependency" + assetName);
		}));
		loader.queue(assetName).load();
	}
	static create() {
		return new minko_file_Gltf2Parser();
	}
}
minko_file_Gltf2Parser.__name__ = true;
minko_file_Gltf2Parser.__super__ = minko_file_ASSIMPParser;
Object.assign(minko_file_Gltf2Parser.prototype, {
	__class__: minko_file_Gltf2Parser
});
class minko_file_IOHandler extends assimp_IOSystem {
	constructor(options,assets,resolvedFilename) {
		super();
		this._options = options;
		this._assets = assets;
		this._resolvedFilename = resolvedFilename;
		this.complete = new minko_signal_Signal();
	}
	errorFunction(errorFunction) {
		this._errorFunction = errorFunction;
	}
	close(pFile) {
		this.complete.dispose();
	}
	exists(file) {
		return false;
	}
	getOsSeparator() {
		return "/";
	}
	open(pFile) {
		var loader = minko_file_Loader.create();
		var _gthis = this;
		loader.set_options(this._options);
		this._options.set_loadAsynchronously(false);
		this._options.set_storeDataIfNotParsed(false);
		this._options.set_parserFunction(function(UnnamedParameter1) {
			return null;
		});
		var absolutePath = minko_file_File.extractPrefixPathFromFilename(this._resolvedFilename);
		var relativePath = minko_file_File.extractPrefixPathFromFilename(pFile);
		var completePath = absolutePath + "/" + relativePath;
		var filename = minko_file_File.removePrefixPathFromFilename(pFile);
		if(relativePath != null && !(relativePath.length == 1 && relativePath.charAt(0) == ".")) {
			this._options.get_includePaths().push(completePath);
		}
		var stream = null;
		var tmp = this._loaderCompleteSlots;
		var tmp1 = loader.get_complete().connect(function(loaderThis) {
			_gthis._loaderErrorSlots.remove(loader);
			_gthis._loaderCompleteSlots.remove(loader);
			_gthis.complete.execute(loader);
			var _this = loaderThis.get_files();
			stream = new assimp_MemoryIOStream((__map_reserved[filename] != null ? _this.getReserved(filename) : _this.h[filename]).get_data());
		});
		tmp.set(loader,tmp1);
		var tmp2 = this._loaderErrorSlots;
		var tmp3 = loader.get_error().connect(function(UnnamedParameter11,error) {
			if(_gthis._errorFunction != null) {
				_gthis._errorFunction(_gthis,filename,error);
			} else {
				throw new js__$Boot_HaxeError(error);
			}
		});
		tmp2.set(loader,tmp3);
		loader.queue(filename).load();
		return stream;
	}
}
minko_file_IOHandler.__name__ = true;
minko_file_IOHandler.__super__ = assimp_IOSystem;
Object.assign(minko_file_IOHandler.prototype, {
	__class__: minko_file_IOHandler
});
class minko_file_JPEGParser extends minko_file_AbstractParser {
	constructor() {
		super();
	}
	parse(filename,resolvedFilename,options,data,assetLibrary) {
		var _gthis = this;
		minko_utils_WebNodeTools.loadFromBytes("jpg",data,function(pd) {
			pd.bytesPerPixel = 4;
			_gthis.__parse(filename,resolvedFilename,options,pd,assetLibrary);
		});
	}
	__parse(filename,resolvedFilename,options,data,assetLibrary) {
		var bmpData = data.pixels;
		var width = data.width;
		var height = data.height;
		var texture = null;
		if(options.get_isCubeTexture()) {
			var parser = new minko_file_MipMapChainParser();
			var cubeTexture = parser.parseCubeTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),(options.get_parseMipMaps() || options.get_generateMipmaps()) && !options.get_fixMipMaps(),options.get_resizeSmoothly(),1,filename);
			cubeTexture = (options.get_textureFunction())(filename,cubeTexture);
			assetLibrary.setCubeTexture(filename,cubeTexture);
			texture = cubeTexture;
		} else if(!options.get_isRectangleTexture()) {
			var parser1 = new minko_file_MipMapChainParser();
			if(options.get_fixMipMaps()) {
				minko_file_AtlasBuilder.fixMipMapLevel(bmpData,width,height,data.bytesPerPixel);
			}
			var texture2d = parser1.parseTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),(options.get_parseMipMaps() || options.get_generateMipmaps()) && !options.get_fixMipMaps(),options.get_resizeSmoothly(),1,filename);
			texture2d = (options.get_textureFunction())(filename,texture2d);
			texture = texture2d;
			assetLibrary.setTexture(filename,texture2d);
		}
		haxe_Log.trace("JPEGParser" + filename,{ fileName : "minko/file/JPEGParser.hx", lineNumber : 83, className : "minko.file.JPEGParser", methodName : "__parse"});
		texture.upload();
		if(options.get_disposeTextureAfterLoading()) {
			texture.disposeData();
		}
		this.get_complete().execute(this);
	}
}
$hx_exports["minko"]["file"]["JPEGParser"] = minko_file_JPEGParser;
minko_file_JPEGParser.__name__ = true;
minko_file_JPEGParser.__super__ = minko_file_AbstractParser;
Object.assign(minko_file_JPEGParser.prototype, {
	__class__: minko_file_JPEGParser
});
class minko_file_Loader {
	constructor() {
		this._options = minko_file_Options.empty();
		this._complete = new minko_signal_Signal();
		this._progress = new minko_signal_Signal2();
		this._parsingProgress = new minko_signal_Signal2();
		this._error = new minko_signal_Signal2();
		this._numFilesToParse = 0;
		this._numFilesToParseComplete = 0;
		this._filesQueue = [];
		this._loading = [];
		this._filenameToOptions = new haxe_ds_StringMap();
		this._files = new haxe_ds_StringMap();
		this._protocolErrorSlots = new haxe_ds_ObjectMap();
		this._protocolCompleteSlots = new haxe_ds_ObjectMap();
		this._protocolProgressSlots = new haxe_ds_ObjectMap();
		this._parserProgressSlots = new haxe_ds_ObjectMap();
		this._parserCompleteSlots = new haxe_ds_ObjectMap();
		this._parserErrorSlots = new haxe_ds_ObjectMap();
		this._protocolToProgress = new haxe_ds_ObjectMap();
		this._parserToProgress = new haxe_ds_ObjectMap();
	}
	get_options() {
		return this._options;
	}
	set_options(v) {
		this._options = v;
		return v;
	}
	get_complete() {
		return this._complete;
	}
	get_progress() {
		return this._progress;
	}
	get_parsingProgress() {
		return this._parsingProgress;
	}
	get_error() {
		return this._error;
	}
	get_filesQueue() {
		return this._filesQueue;
	}
	get_loading() {
		if(this._filesQueue.length <= 0) {
			return this._loading.length > 0;
		} else {
			return true;
		}
	}
	queue(filename) {
		return this.setQueue(filename,null);
	}
	setQueue(filename,options) {
		if(StringTools.trim(filename) == "") {
			return this;
		}
		this._filesQueue.push(filename);
		var _this = this._filenameToOptions;
		var value = options != null ? options : this._options;
		if(__map_reserved[filename] != null) {
			_this.setReserved(filename,value);
		} else {
			_this.h[filename] = value;
		}
		return this;
	}
	load() {
		if(this._filesQueue.length == 0) {
			this._complete.execute(this);
		} else {
			this._numFiles = this._filesQueue.length;
			this._protocolToProgress = new haxe_ds_ObjectMap();
			var queue = this._filesQueue.concat([]);
			var _g = 0;
			while(_g < queue.length) {
				var filename = queue[_g];
				++_g;
				var _this = this._filenameToOptions;
				var options = __map_reserved[filename] != null ? _this.getReserved(filename) : _this.h[filename];
				var includePaths = options.get_includePaths();
				var loadFile = false;
				var resolvedFilename = (options.get_uriFunction())(minko_file_File.sanitizeFilename(filename));
				var protocol = ((options.get_protocolFunction())(resolvedFilename))();
				protocol.set_options(options);
				if(includePaths.length == 0 || protocol.isAbsolutePath(resolvedFilename)) {
					loadFile = true;
				} else {
					var _g1 = 0;
					while(_g1 < includePaths.length) {
						var includePath = includePaths[_g1];
						++_g1;
						resolvedFilename = (options.get_uriFunction())(minko_file_File.sanitizeFilename(includePath + "/" + filename));
						protocol = ((options.get_protocolFunction())(resolvedFilename))();
						protocol.set_options(options);
						if(protocol.fileExists(resolvedFilename)) {
							loadFile = true;
							break;
						}
					}
					if(loadFile == false) {
						includePaths = minko_file_Options.includePaths_clear();
						var _g2 = 0;
						while(_g2 < includePaths.length) {
							var includePath1 = includePaths[_g2];
							++_g2;
							resolvedFilename = (options.get_uriFunction())(minko_file_File.sanitizeFilename(includePath1 + "/" + filename));
							protocol = ((options.get_protocolFunction())(resolvedFilename))();
							protocol.set_options(options);
							if(protocol.fileExists(resolvedFilename)) {
								loadFile = true;
								break;
							}
						}
					}
				}
				if(loadFile) {
					var _this1 = this._files;
					var value = protocol.get_file();
					if(__map_reserved[filename] != null) {
						_this1.setReserved(filename,value);
					} else {
						_this1.h[filename] = value;
					}
					HxOverrides.remove(this._filesQueue,filename);
					this._loading.push(filename);
					var that = [this];
					this._protocolErrorSlots.set(protocol,protocol.get_error().connect((function(that1) {
						return function(protocol1,err) {
							that1[0].protocolErrorHandler(protocol1,err);
						};
					})(that)));
					this._protocolCompleteSlots.set(protocol,protocol.get_complete().connect((function(that2) {
						return function(protocol2) {
							that2[0].protocolCompleteHandler(protocol2);
						};
					})(that)));
					this._protocolProgressSlots.set(protocol,protocol.get_progress().connect((function(that3) {
						return function(protocol3,progress) {
							that3[0].protocolProgressHandler(protocol3,progress);
						};
					})(that)));
					protocol.loadFile(filename,resolvedFilename,options);
				} else {
					var error = "ProtocolError" + "File does not exist: " + filename + ", include paths: " + this._options.get_includePaths().join(",");
					this.errorThrown(error);
				}
			}
		}
	}
	get_files() {
		return this._files;
	}
	protocolErrorHandler(protocol,err) {
		var error = "ProtocolError" + "Protocol error: " + protocol.get_file().get_filename() + ", include paths: " + this._options.get_includePaths().join(",");
		this.errorThrown(error);
	}
	protocolCompleteHandler(protocol) {
		this._protocolToProgress.set(protocol,1.0);
		var filename = protocol.get_file().get_filename();
		HxOverrides.remove(this._loading,filename);
		this._filenameToOptions.remove(filename);
		this._protocolErrorSlots.h[protocol.__id__].dispose();
		this._protocolErrorSlots.remove(protocol);
		this._protocolCompleteSlots.h[protocol.__id__].dispose();
		this._protocolCompleteSlots.remove(protocol);
		this._protocolProgressSlots.h[protocol.__id__].dispose();
		this._protocolProgressSlots.remove(protocol);
		this._numFilesToParse++;
		haxe_Log.trace("file '" + protocol.get_file().get_filename() + "' loaded, " + this._loading.length + " file(s) still loading, " + this._filesQueue.length + " file(s) in the queue",{ fileName : "minko/file/Loader.hx", lineNumber : 248, className : "minko.file.Loader", methodName : "protocolCompleteHandler"});
		var parsed = this.processData(filename,protocol.get_file().get_resolvedFilename(),protocol.get_options(),protocol.get_file().get_data());
		if(this.get_options().get_storeDataIfNotParsed()) {
			if(!parsed) {
				this._numFilesToParseComplete++;
				this.finalize();
			}
		}
	}
	protocolProgressHandler(protocol,progress) {
		this._protocolToProgress.set(protocol,progress);
		var newTotalProgress = 0.0;
		var protocolAndProgress = this._protocolToProgress.keys();
		while(protocolAndProgress.hasNext()) {
			var protocolAndProgress1 = protocolAndProgress.next();
			newTotalProgress += this._protocolToProgress.h[protocolAndProgress1.__id__] / this._numFiles;
		}
		if(newTotalProgress > 1.0) {
			newTotalProgress = 1.0;
		}
		this._progress.execute(this,newTotalProgress);
	}
	finalize() {
		if(this._loading.length == 0 && this._filesQueue.length == 0 && this._numFilesToParse == this._numFilesToParseComplete) {
			this._protocolErrorSlots = new haxe_ds_ObjectMap();
			this._protocolCompleteSlots = new haxe_ds_ObjectMap();
			this._protocolProgressSlots = new haxe_ds_ObjectMap();
			this._filenameToOptions = new haxe_ds_StringMap();
			this._complete.execute(this);
			this._parserErrorSlots = new haxe_ds_ObjectMap();
			this._protocolToProgress = new haxe_ds_ObjectMap();
			this._files = new haxe_ds_StringMap();
		}
	}
	processData(filename,resolvedFilename,options,data) {
		var extension = HxOverrides.substr(filename,filename.lastIndexOf(".") + 1,null).toLowerCase();
		var parser = null;
		try {
			if(options.getParser(extension) != null) {
				parser = (options.getParser(extension))();
			}
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				haxe_Log.trace(e1,{ fileName : "minko/file/Loader.hx", lineNumber : 301, className : "minko.file.Loader", methodName : "processData"});
			} else {
				throw e;
			}
		}
		if(parser != null) {
			this._parserProgressSlots.set(parser,parser.get_progress().connect($bind(this,this.parserProgressHandler)));
			this._parserCompleteSlots.set(parser,parser.get_complete().connect($bind(this,this.parserCompleteHandler)));
			this._parserErrorSlots.set(parser,parser.get_error().connect($bind(this,this.parserErrorHandler)));
			parser.parse(filename,resolvedFilename,options,data,options.get_assetLibrary());
		} else if(options.get_storeDataIfNotParsed()) {
			if(extension != "glsl") {
				haxe_Log.trace("no parser found for extension '" + extension + "'",{ fileName : "minko/file/Loader.hx", lineNumber : 312, className : "minko.file.Loader", methodName : "processData"});
			}
			options.get_assetLibrary().setBlob(filename,data);
		}
		return parser != null;
	}
	parserProgressHandler(parser,progress) {
		this._parserToProgress.set(parser,progress);
		var newTotalProgress = 0.0;
		var parserAndProgress = this._parserToProgress.keys();
		while(parserAndProgress.hasNext()) {
			var parserAndProgress1 = parserAndProgress.next();
			newTotalProgress += this._parserToProgress.h[parserAndProgress1.__id__] / this._numFiles;
		}
		if(newTotalProgress > 1.0) {
			newTotalProgress = 1.0;
		}
		this._parsingProgress.execute(this,newTotalProgress);
	}
	parserCompleteHandler(parser) {
		this._numFilesToParseComplete++;
		this._parserCompleteSlots.remove(parser);
		this._parserToProgress.set(parser,1.0);
		this.finalize();
	}
	parserErrorHandler(parser,error) {
		this.errorThrown(error);
	}
	errorThrown(error) {
		if(this._error.get_numCallbacks() > 0) {
			this._error.execute(this,error);
		} else {
			haxe_Log.trace(error,{ fileName : "minko/file/Loader.hx", lineNumber : 357, className : "minko.file.Loader", methodName : "errorThrown"});
			throw new js__$Boot_HaxeError(error);
		}
	}
	static create() {
		return new minko_file_Loader();
	}
	static createbyOptions(options) {
		var copy = minko_file_Loader.create();
		copy._options = options;
		return copy;
	}
	static createbyLoader(loader) {
		var copy = minko_file_Loader.create();
		copy._options = loader._options;
		return copy;
	}
}
$hx_exports["minko"]["file"]["Loader"] = minko_file_Loader;
minko_file_Loader.__name__ = true;
Object.assign(minko_file_Loader.prototype, {
	__class__: minko_file_Loader
});
class minko_file_AtlasBuilder {
	constructor() {
	}
	fixAtlasMipMaps(data,width,height) {
		var numLevels = minko_utils_MathUtil.getp2(width) + 1;
		var rgba = new minko_file_PixelData(width,height,new haxe_io_Bytes(new ArrayBuffer(width * width * data.bytesPerPixel)));
		rgba.bytesPerPixel = data.bytesPerPixel;
		var actualHeight = height;
		var diff = height - width * 2 - 1;
		actualHeight = height + Math.floor((diff + 1) / 2);
		var actualY = actualHeight;
		var source_atlasList = [];
		var _g = 1;
		var _g1 = numLevels;
		while(_g < _g1) {
			var level = _g++;
			var mipMapWidth = Math.floor(Math.max(width >> level,1));
			var mipMapHeight = Math.floor(Math.max(actualHeight >> level,1));
			var r = new minko_math_Rect();
			r.y = actualY;
			r.height = mipMapHeight;
			r.width = mipMapWidth;
			source_atlasList.push(r);
			actualY += mipMapHeight;
		}
		haxe_Log.trace(source_atlasList,{ fileName : "minko/file/MaxRectPacker.hx", lineNumber : 90, className : "minko.file.AtlasBuilder", methodName : "fixAtlasMipMaps"});
		var padding = 1;
		var dest_atlasList = this.buildFromAtlasRect(source_atlasList,padding,width,actualHeight);
		dest_atlasList = dest_atlasList.map(function(d) {
			d.y += actualHeight;
			return d;
		});
		var tmp = new minko_math_Rect(0,0,width,actualHeight);
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		rgba.copyPixels(data,tmp,this1);
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = width / width;
		this2.w = actualHeight / height;
		var uv = [this2];
		var _g2 = 0;
		var _g3 = source_atlasList.length;
		while(_g2 < _g3) {
			var i = _g2++;
			var s = source_atlasList[i];
			var d1 = dest_atlasList[i];
			var x = d1.x;
			var y = d1.y;
			var this3 = new glm_Vec2Base();
			this3.x = x;
			this3.y = y;
			rgba.copyPixels(data,s,this3);
			var tmp1 = new minko_math_Rect(s.x,s.y,s.width,padding);
			var x1 = d1.x;
			var y1 = d1.y - padding;
			var this4 = new glm_Vec2Base();
			this4.x = x1;
			this4.y = y1;
			rgba.copyPixels(data,tmp1,this4);
			var tmp2 = new minko_math_Rect(s.x,s.y + s.height - padding,s.width,padding);
			var x2 = d1.x;
			var y2 = d1.y + d1.height;
			var this5 = new glm_Vec2Base();
			this5.x = x2;
			this5.y = y2;
			rgba.copyPixels(data,tmp2,this5);
			var tmp3 = new minko_math_Rect(s.x,s.y,padding,s.height);
			var x3 = d1.x - padding;
			var y3 = d1.y;
			var this6 = new glm_Vec2Base();
			this6.x = x3;
			this6.y = y3;
			rgba.copyPixels(data,tmp3,this6);
			var tmp4 = new minko_math_Rect(s.x + s.width - padding,s.y,padding,s.height);
			var x4 = d1.x + d1.width;
			var y4 = d1.y;
			var this7 = new glm_Vec2Base();
			this7.x = x4;
			this7.y = y4;
			rgba.copyPixels(data,tmp4,this7);
			var x5 = d1.x / width;
			var y5 = d1.y / height;
			var z = d1.width / width;
			var w = d1.height / height;
			var this8 = new glm_Vec4Base();
			this8.x = x5;
			this8.y = y5;
			this8.z = z;
			this8.w = w;
			uv.push(this8);
		}
		haxe_Log.trace(uv,{ fileName : "minko/file/MaxRectPacker.hx", lineNumber : 116, className : "minko.file.AtlasBuilder", methodName : "fixAtlasMipMaps"});
		return { uv : uv, data : rgba};
	}
	fixMipMaps(data,width,height) {
		var numLevels = minko_utils_MathUtil.getp2(width) + 1;
		var rgba = new minko_file_PixelData(width,height,new haxe_io_Bytes(new ArrayBuffer(width * width * data.bytesPerPixel)));
		rgba.bytesPerPixel = data.bytesPerPixel;
		var actualHeight = height;
		var diff = height - width * 2 - 1;
		actualHeight = height + Math.floor((diff + 1) / 2);
		var actualY = actualHeight;
		var source_atlasList = [new minko_math_Rect(0,0,width,actualHeight)];
		var _g = 1;
		var _g1 = numLevels;
		while(_g < _g1) {
			var level = _g++;
			var mipMapWidth = Math.floor(Math.max(width >> level,1));
			var mipMapHeight = Math.floor(Math.max(actualHeight >> level,1));
			var r = new minko_math_Rect();
			r.y = actualY;
			r.height = mipMapHeight;
			r.width = mipMapWidth;
			source_atlasList.push(r);
			actualY += mipMapHeight;
		}
		haxe_Log.trace(source_atlasList,{ fileName : "minko/file/MaxRectPacker.hx", lineNumber : 150, className : "minko.file.AtlasBuilder", methodName : "fixMipMaps"});
		var padding = 1;
		var dest_atlasList = source_atlasList.concat([]);
		var _g2 = 0;
		var _g3 = source_atlasList.length;
		while(_g2 < _g3) {
			var i = _g2++;
			var s = source_atlasList[i];
			var d = dest_atlasList[i];
			var x = d.x;
			var y = d.y;
			var this1 = new glm_Vec2Base();
			this1.x = x;
			this1.y = y;
			rgba.copyPixels(data,s,this1);
		}
		return rgba;
	}
	buildFromAtlasRect(atlasList,padding,width,height) {
		if(height == null) {
			height = 1024;
		}
		if(width == null) {
			width = 1024;
		}
		if(padding == null) {
			padding = 2;
		}
		var packer = new minko_file_MaxRectPacker(width,height);
		var len = atlasList.length;
		var tmp = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var rectData = atlasList[i];
			var rect = packer.quickInsert(rectData.width + padding * 2,rectData.height + padding * 2);
			haxe_Log.trace(rect,{ fileName : "minko/file/MaxRectPacker.hx", lineNumber : 174, className : "minko.file.AtlasBuilder", methodName : "buildFromAtlasRect"});
			rect.x += padding;
			rect.y += padding;
			rect.width -= padding * 2;
			rect.height -= padding * 2;
			tmp.push(rect);
		}
		return tmp;
	}
	static fixMipMapLevel(data,width,height,bytesPerPixel) {
		var endX = width;
		var endY = height;
		var idx = 0;
		var numLevels = minko_utils_MathUtil.getp2(width) + 1;
		var dataOffset = 0;
		var offsetY = 0;
		var _g = 1;
		var _g1 = numLevels;
		while(_g < _g1) {
			var level = _g++;
			var mipMapWidth = Math.floor(Math.max(width >> level,1));
			var mipMapHeight = Math.floor(Math.max(height >> level,1));
			dataOffset += width * mipMapHeight * bytesPerPixel;
			offsetY += mipMapHeight;
			var _g2 = offsetY;
			var _g11 = Math.floor(mipMapHeight / 2) + offsetY;
			while(_g2 < _g11) {
				var y = _g2++;
				var lw = mipMapWidth;
				while(lw < width) {
					var _g3 = 0;
					var _g12 = mipMapWidth;
					while(_g3 < _g12) {
						var xx = _g3++;
						var x = xx;
						var xy1 = (x + y * width) * bytesPerPixel;
						x = lw + xx;
						var xy2 = (x + y * width) * bytesPerPixel;
						var _g4 = 0;
						var _g13 = bytesPerPixel;
						while(_g4 < _g13) {
							var i = _g4++;
							data.b[xy2++] = data.b[xy1++];
						}
					}
					lw += mipMapWidth;
				}
			}
		}
	}
}
minko_file_AtlasBuilder.__name__ = true;
Object.assign(minko_file_AtlasBuilder.prototype, {
	__class__: minko_file_AtlasBuilder
});
class minko_file_MaxRectPacker {
	constructor(width,height) {
		this.init(width,height);
	}
	init(width,height) {
		this.binWidth = width;
		this.binHeight = height;
		this.freeRects = [];
		this.freeRects.push(new minko_math_Rect(0,0,width,height));
	}
	quickInsert(width,height) {
		var score = Infinity;
		var areaFit;
		var r;
		var bestNode = new minko_math_Rect();
		var len = this.freeRects.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			r = this.freeRects[i];
			if(r.width >= width && r.height >= height) {
				areaFit = r.width * r.height - width * height;
				if(areaFit < score) {
					bestNode.x = r.x;
					bestNode.y = r.y;
					bestNode.width = width;
					bestNode.height = height;
					score = areaFit;
				}
			}
		}
		var newNode = bestNode;
		if(newNode.height == 0) {
			return null;
		}
		var numRectsToProcess = this.freeRects.length;
		var i1 = 0;
		while(i1 < numRectsToProcess) {
			if(this.splitFreeNode(this.freeRects[i1],newNode)) {
				this.freeRects.splice(i1,1);
				--numRectsToProcess;
				--i1;
			}
			++i1;
		}
		this.pruneFreeList();
		return newNode;
	}
	quickFindPositionForNewNodeBestAreaFit(width,height) {
		var score = Infinity;
		var areaFit;
		var r;
		var bestNode = new minko_math_Rect();
		var len = this.freeRects.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			r = this.freeRects[i];
			if(r.width >= width && r.height >= height) {
				areaFit = r.width * r.height - width * height;
				if(areaFit < score) {
					bestNode.x = r.x;
					bestNode.y = r.y;
					bestNode.width = width;
					bestNode.height = height;
					score = areaFit;
				}
			}
		}
		return bestNode;
	}
	splitFreeNode(freeNode,usedNode) {
		var newNode;
		if(usedNode.x >= freeNode.x + freeNode.width || usedNode.x + usedNode.width <= freeNode.x || usedNode.y >= freeNode.y + freeNode.height || usedNode.y + usedNode.height <= freeNode.y) {
			return false;
		}
		if(usedNode.x < freeNode.x + freeNode.width && usedNode.x + usedNode.width > freeNode.x) {
			if(usedNode.y > freeNode.y && usedNode.y < freeNode.y + freeNode.height) {
				newNode = freeNode.clone();
				newNode.height = usedNode.y - newNode.y;
				this.freeRects.push(newNode);
			}
			if(usedNode.y + usedNode.height < freeNode.y + freeNode.height) {
				newNode = freeNode.clone();
				newNode.y = usedNode.y + usedNode.height;
				newNode.height = freeNode.y + freeNode.height - (usedNode.y + usedNode.height);
				this.freeRects.push(newNode);
			}
		}
		if(usedNode.y < freeNode.y + freeNode.height && usedNode.y + usedNode.height > freeNode.y) {
			if(usedNode.x > freeNode.x && usedNode.x < freeNode.x + freeNode.width) {
				newNode = freeNode.clone();
				newNode.width = usedNode.x - newNode.x;
				this.freeRects.push(newNode);
			}
			if(usedNode.x + usedNode.width < freeNode.x + freeNode.width) {
				newNode = freeNode.clone();
				newNode.x = usedNode.x + usedNode.width;
				newNode.width = freeNode.x + freeNode.width - (usedNode.x + usedNode.width);
				this.freeRects.push(newNode);
			}
		}
		return true;
	}
	pruneFreeList() {
		var i = 0;
		var j = 0;
		var len = this.freeRects.length;
		var tmpRect;
		var tmpRect2;
		while(i < len) {
			j = i + 1;
			tmpRect = this.freeRects[i];
			while(j < len) {
				tmpRect2 = this.freeRects[j];
				if(tmpRect.x >= tmpRect2.x && tmpRect.y >= tmpRect2.y && tmpRect.x + tmpRect.width <= tmpRect2.x + tmpRect2.width && tmpRect.y + tmpRect.height <= tmpRect2.y + tmpRect2.height) {
					this.freeRects.splice(i,1);
					--i;
					--len;
					break;
				}
				if(tmpRect2.x >= tmpRect.x && tmpRect2.y >= tmpRect.y && tmpRect2.x + tmpRect2.width <= tmpRect.x + tmpRect.width && tmpRect2.y + tmpRect2.height <= tmpRect.y + tmpRect.height) {
					this.freeRects.splice(j,1);
					--len;
					--j;
				}
				++j;
			}
			++i;
		}
	}
	isContainedIn(a,b) {
		if(a.x >= b.x && a.y >= b.y && a.x + a.width <= b.x + b.width) {
			return a.y + a.height <= b.y + b.height;
		} else {
			return false;
		}
	}
}
minko_file_MaxRectPacker.__name__ = true;
Object.assign(minko_file_MaxRectPacker.prototype, {
	__class__: minko_file_MaxRectPacker
});
class minko_file_MipMapChainParser {
	constructor() {
	}
	parseTexture(context,width,height,data,parseMipMaps,mipMapping,smooth,format,filename) {
		if(filename == null) {
			filename = "";
		}
		if(format == null) {
			format = 1;
		}
		if(smooth == null) {
			smooth = true;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		var numLevels = mipMapping && parseMipMaps ? minko_utils_MathUtil.getp2(width) + 1 : 1;
		var actualHeight = height;
		if(mipMapping && parseMipMaps && width * 2 - 1 != height) {
			var diff = height - width * 2 - 1;
			actualHeight = height + Math.floor((diff + 1) / 2);
		}
		var bytesPerPixel = format == 0 ? 3 : 4;
		var rgba = new haxe_io_Bytes(new ArrayBuffer(width * actualHeight * 4));
		var texture = minko_render_Texture.create(context,width,actualHeight,mipMapping,false,smooth,1,filename);
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		this.parseMipMap(rgba,0,data,0,width,height,this1,width,actualHeight,bytesPerPixel);
		texture.get_data()[0] = rgba;
		texture.upload();
		if(mipMapping && parseMipMaps) {
			var dataOffset = width * actualHeight * bytesPerPixel;
			texture.uploadMipLevel(0,rgba);
			var _g = 1;
			var _g1 = numLevels;
			while(_g < _g1) {
				var level = _g++;
				if(dataOffset > width * height * bytesPerPixel) {
					break;
				}
				var mipMapWidth = Math.floor(Math.max(width >> level,1));
				var mipMapHeight = Math.floor(Math.max(actualHeight >> level,1));
				var mipMapSize = Math.floor(mipMapWidth * mipMapHeight * 4);
				var textureRgbaData = new haxe_io_Bytes(new ArrayBuffer(mipMapSize));
				texture.get_data()[level] = textureRgbaData;
				var this2 = new glm_Vec2Base();
				this2.x = 0;
				this2.y = 0;
				this.parseMipMap(textureRgbaData,0,data,dataOffset,width,height,this2,mipMapWidth,mipMapHeight,bytesPerPixel);
				dataOffset += width * mipMapHeight * bytesPerPixel;
				texture.uploadMipLevel(level,textureRgbaData);
			}
		}
		return texture;
	}
	parseMipMap(_out,rgbaOffset,data,dataOffset,width,height,offset,mipMapWidth,mipMapHeight,bytesPerPixel) {
		var endX = Math.floor(offset.x + mipMapWidth);
		var endY = Math.floor(offset.y + mipMapHeight);
		var idx = 0;
		var _g = Math.floor(offset.y);
		var _g1 = endY;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = Math.floor(offset.x);
			var _g11 = endX;
			while(_g2 < _g11) {
				var x = _g2++;
				var xy = (x + y * width) * bytesPerPixel;
				var _g3 = 0;
				var _g12 = bytesPerPixel;
				while(_g3 < _g12) {
					var i = _g3++;
					_out.b[rgbaOffset + idx++] = data.b[dataOffset + xy++];
				}
				var _g21 = bytesPerPixel;
				var _g31 = 4;
				while(_g21 < _g31) {
					var i1 = _g21++;
					_out.b[rgbaOffset + idx++] = 255;
				}
			}
		}
	}
	parseCubeTexture(context,width,height,data,parseMipMaps,mipMapping,smooth,format,filename) {
		if(filename == null) {
			filename = "";
		}
		if(format == null) {
			format = 1;
		}
		if(smooth == null) {
			smooth = true;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		var faceSize = Math.floor(width / 4);
		var texture = minko_render_CubeTexture.create(context,faceSize,faceSize,mipMapping,false,smooth,1,filename);
		var faces = [0,1,2,3,4,5];
		var this1 = new glm_Vec2Base();
		this1.x = 2;
		this1.y = 1;
		var this2 = new glm_Vec2Base();
		this2.x = 0;
		this2.y = 1;
		var this3 = new glm_Vec2Base();
		this3.x = 1;
		this3.y = 0;
		var this4 = new glm_Vec2Base();
		this4.x = 1;
		this4.y = 2;
		var this5 = new glm_Vec2Base();
		this5.x = 1;
		this5.y = 1;
		var this6 = new glm_Vec2Base();
		this6.x = 3;
		this6.y = 1;
		var faceOffset = [this1,this2,this3,this4,this5,this6];
		var rgba = new haxe_io_Bytes(new ArrayBuffer(faceSize * faceSize * 4));
		var bytesPerPixel = format == 1 ? 4 : 3;
		var a = faceOffset[0];
		var this7 = new glm_Vec2Base();
		this7.x = 0;
		this7.y = 0;
		var dest = this7;
		dest.x = a.x * faceSize;
		dest.y = a.y * faceSize;
		var offset = dest;
		var face = faces[0];
		this.parseMipMap(rgba,0,data,0,width,height,offset,faceSize,faceSize,bytesPerPixel);
		texture.setData(rgba,face);
		var a1 = faceOffset[1];
		var this8 = new glm_Vec2Base();
		this8.x = 0;
		this8.y = 0;
		var dest1 = this8;
		dest1.x = a1.x * faceSize;
		dest1.y = a1.y * faceSize;
		var offset1 = dest1;
		var face1 = faces[1];
		this.parseMipMap(rgba,0,data,0,width,height,offset1,faceSize,faceSize,bytesPerPixel);
		texture.setData(rgba,face1);
		var a2 = faceOffset[2];
		var this9 = new glm_Vec2Base();
		this9.x = 0;
		this9.y = 0;
		var dest2 = this9;
		dest2.x = a2.x * faceSize;
		dest2.y = a2.y * faceSize;
		var offset2 = dest2;
		var face2 = faces[2];
		this.parseMipMap(rgba,0,data,0,width,height,offset2,faceSize,faceSize,bytesPerPixel);
		texture.setData(rgba,face2);
		var a3 = faceOffset[3];
		var this10 = new glm_Vec2Base();
		this10.x = 0;
		this10.y = 0;
		var dest3 = this10;
		dest3.x = a3.x * faceSize;
		dest3.y = a3.y * faceSize;
		var offset3 = dest3;
		var face3 = faces[3];
		this.parseMipMap(rgba,0,data,0,width,height,offset3,faceSize,faceSize,bytesPerPixel);
		texture.setData(rgba,face3);
		var a4 = faceOffset[4];
		var this11 = new glm_Vec2Base();
		this11.x = 0;
		this11.y = 0;
		var dest4 = this11;
		dest4.x = a4.x * faceSize;
		dest4.y = a4.y * faceSize;
		var offset4 = dest4;
		var face4 = faces[4];
		this.parseMipMap(rgba,0,data,0,width,height,offset4,faceSize,faceSize,bytesPerPixel);
		texture.setData(rgba,face4);
		var a5 = faceOffset[5];
		var this12 = new glm_Vec2Base();
		this12.x = 0;
		this12.y = 0;
		var dest5 = this12;
		dest5.x = a5.x * faceSize;
		dest5.y = a5.y * faceSize;
		var offset5 = dest5;
		var face5 = faces[5];
		this.parseMipMap(rgba,0,data,0,width,height,offset5,faceSize,faceSize,bytesPerPixel);
		texture.setData(rgba,face5);
		texture.upload();
		var eof = width * height * bytesPerPixel;
		if(mipMapping && parseMipMaps) {
			var _g = 0;
			while(_g < 6) {
				var i = _g++;
				var face6 = faces[i];
				var level = 1;
				var dataOffset = width * faceSize * 3 * bytesPerPixel;
				var size = faceSize / 2;
				while(size >= 1) {
					var a6 = faceOffset[i];
					var this13 = new glm_Vec2Base();
					this13.x = 0;
					this13.y = 0;
					var dest6 = this13;
					dest6.x = a6.x * size;
					dest6.y = a6.y * size;
					var offset6 = dest6;
					if(dataOffset >= eof) {
						break;
					}
					this.parseMipMap(rgba,0,data,dataOffset,width,height,offset6,size,size,bytesPerPixel);
					texture.uploadMipLevel(level,rgba,face6);
					dataOffset += Math.floor(width * size * 3 * bytesPerPixel);
					size /= 2;
					++level;
				}
			}
		}
		return texture;
	}
	dispose() {
	}
}
$hx_exports["minko"]["file"]["MipMapChainParser"] = minko_file_MipMapChainParser;
minko_file_MipMapChainParser.__name__ = true;
Object.assign(minko_file_MipMapChainParser.prototype, {
	__class__: minko_file_MipMapChainParser
});
class minko_material_Material extends minko_Has_$uuid {
	constructor(name) {
		super();
		this._provider = minko_data_Provider.create();
		this._provider.set("name",name);
		this._provider.set("uuid",this._provider.get_uuid());
	}
	dispose() {
		this._provider = null;
	}
	get_uuid() {
		return this._provider.get_uuid();
	}
	get_name() {
		return this._provider.get("name");
	}
	get_data() {
		return this._provider;
	}
	hasProperty(propertyName) {
		return this._provider.hasProperty(propertyName);
	}
	get(propertyName) {
		return this._provider.get(propertyName);
	}
	unset(propertyName) {
		this._provider.unset(propertyName);
	}
	setbyKeyObject(values) {
		var fields = Reflect.fields(values);
		var _g = 0;
		while(_g < fields.length) {
			var key = fields[_g];
			++_g;
			this._provider.set(key,Reflect.field(values,key));
		}
		return this;
	}
	set(key,values) {
		this._provider.set(key,values);
		return this;
	}
	copyFrom(values) {
		this._provider = minko_data_Provider.createbyProvider(values);
		this._provider.set("uuid",this._provider.get_uuid());
	}
	initialize() {
	}
	static create(name) {
		if(name == null) {
			name = "material";
		}
		var instance = new minko_material_Material(name);
		instance.initialize();
		return instance;
	}
	static createbyMaterial(source) {
		var mat = minko_material_Material.create();
		mat._provider.copyFrom(source._provider);
		return mat;
	}
}
$hx_exports["minko"]["material"]["Material"] = minko_material_Material;
minko_material_Material.__name__ = true;
minko_material_Material.__super__ = minko_Has_$uuid;
Object.assign(minko_material_Material.prototype, {
	__class__: minko_material_Material
});
class minko_material_BasicMaterial extends minko_material_Material {
	constructor(name) {
		super(name);
	}
	set_diffuseColor(value) {
		this.get_data().set("diffuseColor",value);
		return value;
	}
	diffuseColorRGBA(diffuseRGBA) {
		var this1 = new glm_Vec4Base();
		this1.x = (diffuseRGBA >> 24 & 255) / 255;
		this1.y = (diffuseRGBA >> 16 & 255) / 255;
		this1.z = (diffuseRGBA >> 8 & 255) / 255;
		this1.w = (diffuseRGBA & 255) / 255;
		return this.set_diffuseColor(this1);
	}
	get_diffuseColor() {
		return this.get_data().get("diffuseColor");
	}
	set_uvScale(value) {
		this.get_data().set("uvScale",value);
		return value;
	}
	get_uvScale() {
		return this.get_data().get("uvScale");
	}
	set_uvOffset(value) {
		this.get_data().set("uvOffset",value);
		return value;
	}
	get_uvOffset() {
		return this.get_data().get("uvOffset");
	}
	get_diffuseMap() {
		if(this.get_data().hasProperty("diffuseMap")) {
			return this.get_data().get("diffuseMap");
		} else {
			return null;
		}
	}
	set_diffuseMap(texture) {
		if(texture != null) {
			this.get_data().set("diffuseMap",texture);
		} else {
			this.get_data().unset("diffuseMap");
		}
		return texture;
	}
	set_fogColor(value) {
		this.get_data().set("fogColor",value);
		return value;
	}
	fogColorRGBA(fogRGBA) {
		var this1 = new glm_Vec4Base();
		this1.x = (fogRGBA >> 24 & 255) / 255;
		this1.y = (fogRGBA >> 16 & 255) / 255;
		this1.z = (fogRGBA >> 8 & 255) / 255;
		this1.w = (fogRGBA & 255) / 255;
		return this.set_fogColor(this1);
	}
	get_fogColor() {
		return this.get_data().get("fogColor");
	}
	set_fogStart(value) {
		this.get_data().get("fogBounds").x = value;
		return value;
	}
	get_fogStart() {
		return this.get_data().get("fogBounds").x;
	}
	set_fogEnd(value) {
		this.get_data().get("fogBounds").y = value;
		return value;
	}
	get_fogEnd() {
		return this.get_data().get("fogBounds").y;
	}
	set_fogTechnique(value) {
		this.get_data().set("fogTechnique",value);
		return value;
	}
	get_fogTechnique() {
		return this.get_data().get("fogTechnique");
	}
	setBlendingMode(src,dst) {
		this.get_data().set("blendingMode",src | dst);
		this.get_data().set("blendingSource",src);
		this.get_data().set("blendingDestination",dst);
		return this;
	}
	set_blendingMode(value) {
		var srcBlendingMode = value & 255;
		var dstBlendingMode = value & 65280;
		this.get_data().set("blendingMode",value);
		this.get_data().set("blendingSource",srcBlendingMode);
		this.get_data().set("blendingDestination",dstBlendingMode);
		return value;
	}
	get_blendingSourceFactor() {
		if(this.get_data().hasProperty("bleblendingModendMode")) {
			return this.get_data().get("blendingMode") & 255;
		} else {
			return this._defaultStates.get_blendingSourceFactor();
		}
	}
	get_blendingDestinationFactor() {
		if(this.get_data().hasProperty("blendingMode")) {
			return this.get_data().get("blendingMode") & 65280;
		} else {
			return this._defaultStates.get_blendingDestinationFactor();
		}
	}
	set_colorMask(value) {
		this.get_data().set("colorMask",value);
		return value;
	}
	get_colorMask() {
		if(this.get_data().hasProperty("colorMask")) {
			return this.get_data().get("colorMask");
		} else {
			return this._defaultStates.get_colorMask();
		}
	}
	set_depthMask(value) {
		this.get_data().set("depthMask",value);
		return value;
	}
	get_depthMask() {
		if(this.get_data().hasProperty("depthMask")) {
			return this.get_data().get("depthMask");
		} else {
			return this._defaultStates.get_depthMask();
		}
	}
	set_depthFunction(value) {
		this.get_data().set("depthFunction",value);
		return value;
	}
	get_depthFunction() {
		if(this.get_data().hasProperty("depthFunction")) {
			return this.get_data().get("depthFunction");
		} else {
			return this._defaultStates.get_depthFunction();
		}
	}
	set_triangleCulling(value) {
		this.get_data().set("triangleCulling",value);
		return value;
	}
	get_triangleCulling() {
		if(this.get_data().hasProperty("triangleCulling")) {
			return this.get_data().get("triangleCulling");
		} else {
			return this._defaultStates.get_triangleCulling();
		}
	}
	set_stencilFunction(value) {
		this.get_data().set("stencilFunction",value);
		return value;
	}
	get_stencilFunction() {
		if(this.get_data().hasProperty("stencilFunction")) {
			return this.get_data().get("stencilFunction");
		} else {
			return this._defaultStates.get_stencilFunction();
		}
	}
	set_stencilReference(value) {
		this.get_data().set("stencilReference",value);
		return value;
	}
	get_stencilReference() {
		if(this.get_data().hasProperty("stencilReference")) {
			return this.get_data().get("stencilReference");
		} else {
			return this._defaultStates.get_stencilReference();
		}
	}
	set_stencilMask(value) {
		this.get_data().set("stencilMask",value);
		return value;
	}
	get_stencilMask() {
		if(this.get_data().hasProperty("stencilMask")) {
			return this.get_data().get("stencilMask");
		} else {
			return this._defaultStates.get_stencilMask();
		}
	}
	set_stencilFailOperation(value) {
		this.get_data().set("stencilFailOperation",value);
		return value;
	}
	get_stencilFailOperation() {
		if(this.get_data().hasProperty("stencilFailOperation")) {
			return this.get_data().get("stencilFailOperation");
		} else {
			return this._defaultStates.get_stencilFailOperation();
		}
	}
	set_stencilZFailOperation(value) {
		this.get_data().set("stencilZFailOperation",value);
		return value;
	}
	get_stencilZFailOperation() {
		if(this.get_data().hasProperty("stencilZFailOperation")) {
			return this.get_data().get("stencilZFailOperation");
		} else {
			return this._defaultStates.get_stencilZFailOperation();
		}
	}
	set_stencilZPassOperation(value) {
		this.get_data().set("stencilZPassOperation",value);
		return value;
	}
	get_stencilZPassOperation() {
		if(this.get_data().hasProperty("stencilZPassOperation")) {
			return this.get_data().get("stencilZPassOperation");
		} else {
			return this._defaultStates.get_stencilZPassOperation();
		}
	}
	set_priority(value) {
		this.get_data().set("priority",value);
		return value;
	}
	get_priority() {
		if(this.get_data().hasProperty("priority")) {
			return this.get_data().get("priority");
		} else {
			return this._defaultStates.get_priority();
		}
	}
	set_zSorted(value) {
		this.get_data().set("zSorted",value);
		return value;
	}
	get_zSorted() {
		if(this.get_data().hasProperty("zSorted")) {
			return this.get_data().get("zSorted");
		} else {
			return this._defaultStates.get_zSorted();
		}
	}
	static create(name) {
		if(name == null) {
			name = "BasicMaterial";
		}
		return new minko_material_BasicMaterial(name);
	}
	static createbyBasicMaterial(source) {
		var pm = minko_material_BasicMaterial.create(source.get_name());
		pm.get_data().copyFrom(source.get_data());
		return pm;
	}
}
$hx_exports["minko"]["material"]["BasicMaterial"] = minko_material_BasicMaterial;
minko_material_BasicMaterial.__name__ = true;
minko_material_BasicMaterial.__super__ = minko_material_Material;
Object.assign(minko_material_BasicMaterial.prototype, {
	__class__: minko_material_BasicMaterial
});
class minko_signal_Signal2 {
	constructor() {
		this._callbacks = [];
	}
	copyFrom(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	dispose() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	get_numCallbacks() {
		return this._callbacks.length;
	}
	connect(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot2(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	remove(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	execute(a,b) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	static create() {
		return new minko_signal_Signal2();
	}
}
$hx_exports["minko"]["signal"]["Signal2"] = minko_signal_Signal2;
minko_signal_Signal2.__name__ = true;
Object.assign(minko_signal_Signal2.prototype, {
	__class__: minko_signal_Signal2
});
class minko_file_Options {
	constructor() {
		this._parsers = new haxe_ds_StringMap();
		this._protocols = new haxe_ds_StringMap();
		this._context = null;
		this._includePaths = [];
		this._platforms = [];
		this._userFlags = [];
		this._optimizeForRendering = true;
		this._generateMipMaps = false;
		this._fixMipMaps = false;
		this._parseMipMaps = false;
		this._resizeSmoothly = false;
		this._isCubeTexture = false;
		this._isRectangleTexture = false;
		this._generateSmoothNormals = false;
		this._normalMaxSmoothingAngle = 80.0;
		this._includeAnimation = true;
		this._startAnimation = true;
		this._loadAsynchronously = true;
		this._disposeIndexBufferAfterLoading = false;
		this._disposeVertexBufferAfterLoading = false;
		this._disposeTextureAfterLoading = false;
		this._storeDataIfNotParsed = true;
		this._preserveMaterials = true;
		this._trackAssetDescriptor = false;
		this._skinningFramerate = 30;
		this._skinningMethod = 1;
		this._material = null;
		this._effect = null;
		this._seekingOffset = 0;
		this._seekedLength = 0;
		this._materialFunction = null;
		this._textureFunction = null;
		this._geometryFunction = null;
		this._protocolFunction = null;
		this._parserFunction = null;
		this._uriFunction = null;
		this._nodeFunction = null;
		this._effectFunction = null;
		this._textureFormatFunction = null;
		this._attributeFunction = null;
		this._fileStatusFunction = null;
		this._preventLoadingFunction = null;
		var binaryDir = minko_file_File.getBinaryDirectory();
		this.get_includePaths().push(binaryDir + "/asset");
		this.get_includePaths().push(".");
		this.initializePlatforms();
		this.initializeUserFlags();
	}
	get_fixMipMaps() {
		return this._fixMipMaps;
	}
	set_fixMipMaps(p) {
		this._fixMipMaps = p;
		return p;
	}
	clone() {
		var copy = new minko_file_Options();
		copy.copyFrom(this);
		copy.initialize();
		return copy;
	}
	get_context() {
		return this._context;
	}
	set_context(v) {
		this._context = v;
		return v;
	}
	get_assetLibrary() {
		return this._assets;
	}
	set_assetLibrary(v) {
		this._assets = v;
		return v;
	}
	set_includePaths(v) {
		this._includePaths = v;
		return v;
	}
	get_includePaths() {
		return this._includePaths;
	}
	get_platforms() {
		return this._platforms;
	}
	get_userFlags() {
		return this._userFlags;
	}
	get_optimizeForRendering() {
		return this._optimizeForRendering;
	}
	set_optimizeForRendering(value) {
		this._optimizeForRendering = value;
		return value;
	}
	get_generateMipmaps() {
		return this._generateMipMaps;
	}
	set_generateMipmaps(generateMipmaps) {
		this._generateMipMaps = generateMipmaps;
		return generateMipmaps;
	}
	get_parseMipMaps() {
		return this._parseMipMaps;
	}
	set_parseMipMaps(parseMipMaps) {
		this._parseMipMaps = parseMipMaps;
		return parseMipMaps;
	}
	get_includeAnimation() {
		return this._includeAnimation;
	}
	set_includeAnimation(value) {
		this._includeAnimation = value;
		return value;
	}
	get_startAnimation() {
		return this._startAnimation;
	}
	set_startAnimation(value) {
		this._startAnimation = value;
		return value;
	}
	get_loadAsynchronously() {
		return this._loadAsynchronously;
	}
	set_loadAsynchronously(value) {
		this._loadAsynchronously = value;
		return value;
	}
	get_resizeSmoothly() {
		return this._resizeSmoothly;
	}
	set_resizeSmoothly(value) {
		this._resizeSmoothly = value;
		return value;
	}
	get_isCubeTexture() {
		return this._isCubeTexture;
	}
	set_isCubeTexture(value) {
		this._isCubeTexture = value;
		return value;
	}
	get_isRectangleTexture() {
		return this._isRectangleTexture;
	}
	set_isRectangleTexture(value) {
		this._isRectangleTexture = value;
		return value;
	}
	get_generateSmoothNormals() {
		return this._generateSmoothNormals;
	}
	set_generateSmoothNormals(value) {
		this._generateSmoothNormals = value;
		return value;
	}
	get_normalMaxSmoothingAngle() {
		return this._normalMaxSmoothingAngle;
	}
	set_normalMaxSmoothingAngle(value) {
		this._normalMaxSmoothingAngle = value;
		return value;
	}
	get_disposeIndexBufferAfterLoading() {
		return this._disposeIndexBufferAfterLoading;
	}
	set_disposeIndexBufferAfterLoading(value) {
		this._disposeIndexBufferAfterLoading = value;
		return value;
	}
	get_disposeVertexBufferAfterLoading() {
		return this._disposeVertexBufferAfterLoading;
	}
	set_disposeVertexBufferAfterLoading(value) {
		this._disposeVertexBufferAfterLoading = value;
		return value;
	}
	get_disposeTextureAfterLoading() {
		return this._disposeTextureAfterLoading;
	}
	set_disposeTextureAfterLoading(value) {
		this._disposeTextureAfterLoading = value;
		return value;
	}
	get_storeDataIfNotParsed() {
		return this._storeDataIfNotParsed;
	}
	set_storeDataIfNotParsed(value) {
		this._storeDataIfNotParsed = value;
		return value;
	}
	get_preserveMaterials() {
		return this._preserveMaterials;
	}
	set_preserveMaterials(value) {
		this._preserveMaterials = value;
		return value;
	}
	get_trackAssetDescriptor() {
		return this._trackAssetDescriptor;
	}
	set_trackAssetDescriptor(value) {
		this._trackAssetDescriptor = value;
		return value;
	}
	get_skinningFramerate() {
		return this._skinningFramerate;
	}
	set_skinningFramerate(value) {
		this._skinningFramerate = value;
		return value;
	}
	get_skinningMethod() {
		return this._skinningMethod;
	}
	set_skinningMethod(value) {
		this._skinningMethod = value;
		return value;
	}
	get_effect() {
		return this._effect;
	}
	set_effect(effect) {
		this._effect = effect;
		return effect;
	}
	get_material() {
		return this._material;
	}
	set_material(material) {
		this._material = material;
		return material;
	}
	registerTextureFormat(textureFormat) {
		this._textureFormats.push(textureFormat);
		return this;
	}
	get_protocolFunction() {
		if(this._protocolFunction != null) {
			return this._protocolFunction;
		} else {
			return $bind(this,this.defaultProtocolFunction);
		}
	}
	set_protocolFunction(func) {
		this._protocolFunction = func;
		return func;
	}
	get_parserFunction() {
		return this._parserFunction;
	}
	set_parserFunction(func) {
		this._parserFunction = func;
		return func;
	}
	get_materialFunction() {
		return this._materialFunction;
	}
	set_materialFunction(func) {
		this._materialFunction = func;
		return func;
	}
	get_textureFunction() {
		return this._textureFunction;
	}
	set_textureFunction(func) {
		this._textureFunction = func;
		return func;
	}
	get_geometryFunction() {
		return this._geometryFunction;
	}
	set_geometryFunction(func) {
		this._geometryFunction = func;
		return func;
	}
	get_uriFunction() {
		return this._uriFunction;
	}
	set_uriFunction(func) {
		this._uriFunction = func;
		return func;
	}
	get_nodeFunction() {
		return this._nodeFunction;
	}
	set_nodeFunction(func) {
		this._nodeFunction = func;
		return func;
	}
	get_effectFunction() {
		return this._effectFunction;
	}
	set_effectFunction(func) {
		this._effectFunction = func;
		return func;
	}
	get_textureFormatFunction() {
		return this._textureFormatFunction;
	}
	set_textureFormatFunction(func) {
		this._textureFormatFunction = func;
		return func;
	}
	get_attributeFunction() {
		return this._attributeFunction;
	}
	set_attributeFunction(func) {
		this._attributeFunction = func;
		return func;
	}
	get_fileStatusFunction() {
		return this._fileStatusFunction;
	}
	set_fileStatusFunction(func) {
		this._fileStatusFunction = func;
		return func;
	}
	get_preventLoadingFunction() {
		return this._preventLoadingFunction;
	}
	set_preventLoadingFunction(func) {
		this._preventLoadingFunction = func;
		return func;
	}
	get_seekingOffset() {
		return this._seekingOffset;
	}
	set_seekingOffset(value) {
		this._seekingOffset = value;
		return value;
	}
	get_seekedLength() {
		return this._seekedLength;
	}
	set_seekedLength(value) {
		this._seekedLength = value;
		return value;
	}
	registerParser(extension,cls) {
		var ext = extension.toLowerCase();
		var _this = this._parsers;
		if(__map_reserved[ext] != null) {
			_this.setReserved(ext,cls);
		} else {
			_this.h[ext] = cls;
		}
		return this;
	}
	getParser(extension) {
		if(this._parserFunction != null) {
			return this._parserFunction(extension);
		}
		var _this = this._parsers;
		if((__map_reserved[extension] != null ? _this.existsReserved(extension) : _this.h.hasOwnProperty(extension)) == false) {
			return null;
		} else {
			var _this1 = this._parsers;
			if(__map_reserved[extension] != null) {
				return _this1.getReserved(extension);
			} else {
				return _this1.h[extension];
			}
		}
	}
	registerProtocol(cls,protocol) {
		var prefix = protocol.toLowerCase();
		var _this = this._protocols;
		if(__map_reserved[prefix] != null) {
			_this.setReserved(prefix,cls);
		} else {
			_this.h[prefix] = cls;
		}
		return this;
	}
	getProtocol(protocol) {
		var p;
		var _this = this._protocols;
		if((__map_reserved[protocol] != null ? _this.existsReserved(protocol) : _this.h.hasOwnProperty(protocol)) == false) {
			p = null;
		} else {
			var _this1 = this._protocols;
			p = __map_reserved[protocol] != null ? _this1.getReserved(protocol) : _this1.h[protocol];
		}
		if(p != null) {
			return p;
		}
		var defaultProtocol;
		var _this2 = minko_file_Options._defaultProtocols;
		if((__map_reserved[protocol] != null ? _this2.existsReserved(protocol) : _this2.h.hasOwnProperty(protocol)) == false) {
			defaultProtocol = null;
		} else {
			var _this3 = minko_file_Options._defaultProtocols;
			defaultProtocol = __map_reserved[protocol] != null ? _this3.getReserved(protocol) : _this3.h[protocol];
		}
		return defaultProtocol;
	}
	copyFrom(copy) {
		this._context = copy._context;
		this._assets = copy._assets;
		this._includePaths = copy._includePaths.concat([]);
		this._platforms = copy._platforms.concat([]);
		this._userFlags = copy._userFlags.concat([]);
		this._optimizeForRendering = copy._optimizeForRendering;
		this._parsers = copy._parsers;
		this._protocols = copy._protocols;
		this._generateMipMaps = copy._generateMipMaps;
		this._fixMipMaps = copy._fixMipMaps;
		this._parseMipMaps = copy._parseMipMaps;
		this._resizeSmoothly = copy._resizeSmoothly;
		this._isCubeTexture = copy._isCubeTexture;
		this._isRectangleTexture = copy._isRectangleTexture;
		this._generateSmoothNormals = copy._generateSmoothNormals;
		this._normalMaxSmoothingAngle = copy._normalMaxSmoothingAngle;
		this._includeAnimation = copy._includeAnimation;
		this._startAnimation = copy._startAnimation;
		this._disposeIndexBufferAfterLoading = copy._disposeIndexBufferAfterLoading;
		this._disposeVertexBufferAfterLoading = copy._disposeVertexBufferAfterLoading;
		this._disposeTextureAfterLoading = copy._disposeTextureAfterLoading;
		this._storeDataIfNotParsed = copy._storeDataIfNotParsed;
		this._preserveMaterials = copy._preserveMaterials;
		this._trackAssetDescriptor = copy._trackAssetDescriptor;
		this._skinningFramerate = copy._skinningFramerate;
		this._skinningMethod = copy._skinningMethod;
		this._effect = copy._effect;
		this._textureFormats = copy._textureFormats;
		this._material = copy._material;
		this._materialFunction = copy._materialFunction;
		this._textureFunction = copy._textureFunction;
		this._geometryFunction = copy._geometryFunction;
		this._protocolFunction = copy._protocolFunction;
		this._parserFunction = copy._parserFunction;
		this._uriFunction = copy._uriFunction;
		this._nodeFunction = copy._nodeFunction;
		this._effectFunction = copy._effectFunction;
		this._textureFormatFunction = copy._textureFormatFunction;
		this._attributeFunction = copy._attributeFunction;
		this._fileStatusFunction = copy._fileStatusFunction;
		this._preventLoadingFunction = copy._preventLoadingFunction;
		this._loadAsynchronously = copy._loadAsynchronously;
		this._seekingOffset = copy._seekingOffset;
		this._seekedLength = copy._seekedLength;
		return this;
	}
	initialize() {
		this.resetNotInheritedValues();
		this.initializeDefaultFunctions();
		var _this = this._parsers;
		if(!(__map_reserved["effect"] != null ? _this.existsReserved("effect") : _this.h.hasOwnProperty("effect"))) {
			this.registerParser("effect",function() {
				return new minko_file_EffectParser();
			});
		}
		var _this1 = minko_file_Options._defaultProtocols;
		if(!(__map_reserved["file"] != null ? _this1.existsReserved("file") : _this1.h.hasOwnProperty("file"))) {
			minko_file_Options.registerDefaultProtocol("file",function() {
				return new minko_file_FileProtocol();
			});
		}
	}
	initializePlatforms() {
	}
	initializeUserFlags() {
	}
	initializeDefaultFunctions() {
		var options = this;
		if(this._materialFunction == null) {
			this._materialFunction = function(UnnamedParameter1,material) {
				return material;
			};
		}
		if(this._textureFunction == null) {
			this._textureFunction = function(UnnamedParameter11,texture) {
				return texture;
			};
		}
		if(this._geometryFunction == null) {
			this._geometryFunction = function(UnnamedParameter12,geom) {
				return geom;
			};
		}
		if(this._uriFunction == null) {
			this._uriFunction = function(uri) {
				return uri;
			};
		}
		if(this._nodeFunction == null) {
			this._nodeFunction = function(node) {
				return node;
			};
		}
		if(this._effectFunction == null) {
			this._effectFunction = function(effect) {
				return effect;
			};
		}
		this._textureFormatFunction = function(availableTextureFormats) {
			var defaultTextureFormats = [12,13,10,11,8,9,5,4,15,14,7,6,3,2,1,0];
			var textureFormats = options._textureFormats.length == 0 ? defaultTextureFormats : options._textureFormats;
			var textureFormatIt = Lambda.find(textureFormats,function(textureFormat) {
				return Lambda.has(availableTextureFormats,textureFormat);
			});
			if(textureFormatIt != null) {
				return textureFormatIt;
			}
			if(Lambda.has(textureFormats,0) && Lambda.has(availableTextureFormats,1)) {
				return 1;
			}
			if(Lambda.has(textureFormats,1) && Lambda.has(availableTextureFormats,0)) {
				return 0;
			}
			var errorMessage = "No desired texture format available";
			throw new js__$Boot_HaxeError(errorMessage);
		};
		if(this._material == null) {
			this._material = minko_file_Options._defaultMaterial;
		}
		if(this._attributeFunction == null) {
			this._attributeFunction = function(node1,key,value) {
			};
		}
		this._parserFunction = null;
		if(this._preventLoadingFunction == null) {
			this._preventLoadingFunction = function(filename) {
				return false;
			};
		}
	}
	resetNotInheritedValues() {
		this.set_seekingOffset(0);
		this.set_seekedLength(0);
	}
	defaultProtocolFunction(filename) {
		var protocol = "";
		var index = 0;
		var _g = 0;
		var _g1 = filename.length;
		while(_g < _g1) {
			var i = _g++;
			if(i < filename.length - 2 && filename.charAt(i) == ":" && filename.charAt(i + 1) == "/" && filename.charAt(i + 2) == "/") {
				break;
			}
			protocol += filename.charAt(i);
			index = i;
		}
		if(index != filename.length) {
			var loader = this.getProtocol(protocol);
			if(loader != null) {
				return loader;
			}
		}
		return this.getProtocol("file");
	}
	static empty() {
		var instance = new minko_file_Options();
		instance.initialize();
		return instance;
	}
	static create(context) {
		var options = minko_file_Options.empty();
		options._context = context;
		return options;
	}
	static registerDefaultProtocol(protocol,cls) {
		var prefix = protocol.toLowerCase();
		var _this = minko_file_Options._defaultProtocols;
		if(__map_reserved[prefix] != null) {
			_this.setReserved(prefix,cls);
		} else {
			_this.h[prefix] = cls;
		}
	}
	static includePaths_clear() {
		var binaryDir = "";
		var __includePaths = [];
		__includePaths.push("asset/effect");
		return __includePaths;
	}
}
$hx_exports["minko"]["file"]["Options"] = minko_file_Options;
minko_file_Options.__name__ = true;
Object.assign(minko_file_Options.prototype, {
	__class__: minko_file_Options
});
class minko_file_PNGParser extends minko_file_AbstractParser {
	constructor() {
		super();
	}
	parse(filename,resolvedFilename,options,data,assetLibrary) {
		var _gthis = this;
		minko_utils_WebNodeTools.loadFromBytes("png",data,function(pd) {
			pd.bytesPerPixel = 4;
			_gthis.__parse(filename,resolvedFilename,options,pd,assetLibrary);
		});
	}
	__parse(filename,resolvedFilename,options,data,assetLibrary) {
		var bmpData = data.pixels;
		var width = data.width;
		var height = data.height;
		var texture = null;
		if(options.get_isCubeTexture()) {
			var parser = new minko_file_MipMapChainParser();
			var cubeTexture = parser.parseCubeTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),(options.get_parseMipMaps() || options.get_generateMipmaps()) && !options.get_fixMipMaps(),options.get_resizeSmoothly(),1,filename);
			cubeTexture = (options.get_textureFunction())(filename,cubeTexture);
			assetLibrary.setCubeTexture(filename,cubeTexture);
			texture = cubeTexture;
		} else if(!options.get_isRectangleTexture()) {
			var parser1 = new minko_file_MipMapChainParser();
			var texture2d = parser1.parseTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),(options.get_parseMipMaps() || options.get_generateMipmaps()) && !options.get_fixMipMaps(),options.get_resizeSmoothly(),1,filename);
			texture2d = (options.get_textureFunction())(filename,texture2d);
			texture = texture2d;
			assetLibrary.setTexture(filename,texture2d);
		}
		haxe_Log.trace("PNGParser" + filename,{ fileName : "minko/file/PNGParser.hx", lineNumber : 70, className : "minko.file.PNGParser", methodName : "__parse"});
		texture.upload();
		if(options.get_disposeTextureAfterLoading()) {
			texture.disposeData();
		}
		this.get_complete().execute(this);
	}
}
$hx_exports["minko"]["file"]["PNGParser"] = minko_file_PNGParser;
minko_file_PNGParser.__name__ = true;
minko_file_PNGParser.__super__ = minko_file_AbstractParser;
Object.assign(minko_file_PNGParser.prototype, {
	__class__: minko_file_PNGParser
});
class minko_file_PixelData {
	constructor(w,h,p) {
		this.width = w;
		this.height = h;
		this.pixels = p;
	}
	copyPixels(sourceBitmapData,sourceRect,destPoint) {
		var _g = 0;
		var _g1 = Math.floor(sourceRect.height);
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g11 = Math.floor(sourceRect.width);
			while(_g2 < _g11) {
				var x = _g2++;
				var xy1 = Math.floor((sourceRect.x + x + (y + sourceRect.y) * sourceBitmapData.width) * this.bytesPerPixel);
				var xy2 = Math.floor((destPoint.x + x + (y + destPoint.y) * this.width) * this.bytesPerPixel);
				var _g3 = 0;
				var _g12 = this.bytesPerPixel;
				while(_g3 < _g12) {
					var i = _g3++;
					this.pixels.b[xy2++] = sourceBitmapData.pixels.b[xy1++];
				}
			}
		}
	}
}
$hx_exports["minko"]["data"]["PixelData"] = minko_file_PixelData;
minko_file_PixelData.__name__ = true;
Object.assign(minko_file_PixelData.prototype, {
	__class__: minko_file_PixelData
});
class minko_geometry_Bone {
	constructor(node,offsetMatrix,vertexIds,vertexWeights) {
		this._node = node;
		this._offsetMatrix = offsetMatrix;
		this._vertexIds = vertexIds;
		this._vertexWeights = vertexWeights;
		if(this._vertexIds.length != this._vertexWeights.length) {
			throw new js__$Boot_HaxeError("A bone's arrays of vertex indices and vertex weights must have the same size.");
		}
	}
	get_node() {
		return this._node;
	}
	get_offsetMatrix() {
		return this._offsetMatrix;
	}
	get_vertexIds() {
		return this._vertexIds;
	}
	get_vertexWeights() {
		return this._vertexWeights;
	}
	static create(node,offsetMatrix,vertexIds,vertexWeights) {
		return new minko_geometry_Bone(node,offsetMatrix,vertexIds,vertexWeights);
	}
}
$hx_exports["minko"]["geometry"]["Bone"] = minko_geometry_Bone;
minko_geometry_Bone.__name__ = true;
Object.assign(minko_geometry_Bone.prototype, {
	__class__: minko_geometry_Bone
});
class minko_geometry_CubeGeometry extends minko_geometry_Geometry {
	constructor() {
		super("cube");
	}
	initialize(context) {
		var xyzData = [0.5,0.5,-0.5,0.0,1.0,0.0,1.0,0.0,-0.5,0.5,0.5,0.0,1.0,0.0,0.0,1.0,0.5,0.5,0.5,0.0,1.0,0.0,1.0,1.0,0.5,0.5,-0.5,0.0,1.0,0.0,1.0,0.0,-0.5,0.5,-0.5,0.0,1.0,0.0,0.0,0.0,-0.5,0.5,0.5,0.0,1.0,0.0,0.0,1.0,-0.5,-0.5,0.5,0.0,-1.0,0.0,0.0,0.0,0.5,-0.5,-0.5,0.0,-1.0,0.0,1.0,1.0,0.5,-0.5,0.5,0.0,-1.0,0.0,1.0,0.0,-0.5,-0.5,-0.5,0.0,-1.0,0.0,0.0,1.0,0.5,-0.5,-0.5,0.0,-1.0,0.0,1.0,1.0,-0.5,-0.5,0.5,0.0,-1.0,0.0,0.0,0.0,0.5,-0.5,-0.5,0.0,0.0,-1.0,0.0,1.0,-0.5,0.5,-0.5,0.0,0.0,-1.0,1.0,0.0,0.5,0.5,-0.5,0.0,0.0,-1.0,0.0,0.0,-0.5,0.5,-0.5,0.0,0.0,-1.0,1.0,0.0,0.5,-0.5,-0.5,0.0,0.0,-1.0,0.0,1.0,-0.5,-0.5,-0.5,0.0,0.0,-1.0,1.0,1.0,-0.5,0.5,0.5,0.0,0.0,1.0,0.0,0.0,-0.5,-0.5,0.5,0.0,0.0,1.0,0.0,1.0,0.5,0.5,0.5,0.0,0.0,1.0,1.0,0.0,-0.5,-0.5,0.5,0.0,0.0,1.0,0.0,1.0,0.5,-0.5,0.5,0.0,0.0,1.0,1.0,1.0,0.5,0.5,0.5,0.0,0.0,1.0,1.0,0.0,-0.5,-0.5,0.5,-1.0,0.0,0.0,1.0,1.0,-0.5,0.5,-0.5,-1.0,0.0,0.0,0.0,0.0,-0.5,-0.5,-0.5,-1.0,0.0,0.0,0.0,1.0,-0.5,0.5,-0.5,-1.0,0.0,0.0,0.0,0.0,-0.5,-0.5,0.5,-1.0,0.0,0.0,1.0,1.0,-0.5,0.5,0.5,-1.0,0.0,0.0,1.0,0.0,0.5,-0.5,-0.5,1.0,0.0,0.0,1.0,1.0,0.5,0.5,-0.5,1.0,0.0,0.0,1.0,0.0,0.5,0.5,0.5,1.0,0.0,0.0,0.0,0.0,0.5,0.5,0.5,1.0,0.0,0.0,0.0,0.0,0.5,-0.5,0.5,1.0,0.0,0.0,0.0,1.0,0.5,-0.5,-0.5,1.0,0.0,0.0,1.0,1.0];
		var i = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35];
		var vertexBuffer = minko_render_VertexBuffer.createbyData(context,xyzData);
		vertexBuffer.addAttribute("position",3,0);
		vertexBuffer.addAttribute("normal",3,3);
		vertexBuffer.addAttribute("uv",2,6);
		this.addVertexBuffer(vertexBuffer);
		this.set_indices(minko_render_IndexBuffer.createbyData(context,i));
		this.computeCenterPosition();
	}
	static create(context) {
		var geom = new minko_geometry_CubeGeometry();
		geom.initialize(context);
		return geom;
	}
}
$hx_exports["minko"]["geometry"]["CubeGeometry"] = minko_geometry_CubeGeometry;
minko_geometry_CubeGeometry.__name__ = true;
minko_geometry_CubeGeometry.__super__ = minko_geometry_Geometry;
Object.assign(minko_geometry_CubeGeometry.prototype, {
	__class__: minko_geometry_CubeGeometry
});
class minko_geometry_QuadGeometry extends minko_geometry_Geometry {
	constructor(numColumns,numRows,width,height) {
		if(height == null) {
			height = 1.0;
		}
		if(width == null) {
			width = 1.0;
		}
		if(numRows == null) {
			numRows = 1;
		}
		if(numColumns == null) {
			numColumns = 1;
		}
		super("quad_" + numColumns + "x" + numRows);
		this._numColumns = numColumns;
		this._numRows = numRows;
		this._width = width;
		this._height = height;
	}
	initialize(context) {
		var vertexData = [];
		var indicesData = [];
		var y = 0;
		while(y <= this._numRows) {
			var x = 0;
			while(x <= this._numColumns) {
				vertexData.push((x / this._numColumns - 0.5) * this._width);
				vertexData.push((y / this._numRows - 0.5) * this._height);
				vertexData.push(0.0);
				vertexData.push(0.0);
				vertexData.push(0.0);
				vertexData.push(1.0);
				vertexData.push(x / this._numColumns);
				vertexData.push(1.0 - y / this._numRows);
				++x;
			}
			++y;
		}
		var _g = 0;
		var _g1 = this._numRows;
		while(_g < _g1) {
			var y1 = _g++;
			var _g2 = 0;
			var _g11 = this._numColumns;
			while(_g2 < _g11) {
				var x1 = _g2++;
				indicesData.push(x1 + (this._numColumns + 1) * y1);
				indicesData.push(x1 + 1 + y1 * (this._numColumns + 1));
				indicesData.push((y1 + 1) * (this._numColumns + 1) + x1);
				indicesData.push(x1 + 1 + y1 * (this._numColumns + 1));
				indicesData.push((y1 + 1) * (this._numColumns + 1) + x1 + 1);
				indicesData.push((y1 + 1) * (this._numColumns + 1) + x1);
			}
		}
		var vertexBuffer = minko_render_VertexBuffer.createbyData(context,vertexData);
		var indexBuffer = minko_render_IndexBuffer.createbyData(context,indicesData);
		vertexBuffer.addAttribute("position",3,0);
		vertexBuffer.addAttribute("normal",3,3);
		vertexBuffer.addAttribute("uv",2,6);
		this.addVertexBuffer(vertexBuffer);
		this.set_indices(indexBuffer);
		this.computeCenterPosition();
	}
	static create(context,numColumns,numRows,width,height) {
		if(height == null) {
			height = 1.0;
		}
		if(width == null) {
			width = 1.0;
		}
		if(numRows == null) {
			numRows = 1;
		}
		if(numColumns == null) {
			numColumns = 1;
		}
		var geom = new minko_geometry_QuadGeometry(numColumns,numRows,width,height);
		geom.initialize(context);
		return geom;
	}
}
$hx_exports["minko"]["geometry"]["QuadGeometry"] = minko_geometry_QuadGeometry;
minko_geometry_QuadGeometry.__name__ = true;
minko_geometry_QuadGeometry.__super__ = minko_geometry_Geometry;
Object.assign(minko_geometry_QuadGeometry.prototype, {
	__class__: minko_geometry_QuadGeometry
});
class minko_geometry_Skin {
	constructor(numBones,duration,numFrames) {
		if(numFrames == null) {
			numFrames = 0;
		}
		if(duration == null) {
			duration = 0;
		}
		if(numBones == null) {
			numBones = 0;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = numBones;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(null);
		}
		this._bones = _g;
		this._numBones = numBones;
		this._duration = duration;
		this._timeFactor = duration > 0 ? numFrames / duration : 0.0;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = numFrames;
		while(_g4 < _g5) {
			var i1 = _g4++;
			var _g41 = [];
			var _g51 = 0;
			var _g6 = numBones;
			while(_g51 < _g6) {
				var j = _g51++;
				var this1 = new glm_Mat4Base();
				this1._00 = 0;
				this1._01 = 0;
				this1._02 = 0;
				this1._03 = 0;
				this1._10 = 0;
				this1._11 = 0;
				this1._12 = 0;
				this1._13 = 0;
				this1._20 = 0;
				this1._21 = 0;
				this1._22 = 0;
				this1._23 = 0;
				this1._30 = 0;
				this1._31 = 0;
				this1._32 = 0;
				this1._33 = 0;
				var dest = this1;
				dest._00 = 1;
				dest._10 = 0;
				dest._20 = 0;
				dest._30 = 0;
				dest._01 = 0;
				dest._11 = 1;
				dest._21 = 0;
				dest._31 = 0;
				dest._02 = 0;
				dest._12 = 0;
				dest._22 = 1;
				dest._32 = 0;
				dest._03 = 0;
				dest._13 = 0;
				dest._23 = 0;
				dest._33 = 1;
				_g41.push(dest);
			}
			_g3.push(_g41);
		}
		this._boneMatricesPerFrame = _g3;
		this._maxNumVertexBones = 0;
		this._numVertexBones = [];
		this._vertexBones = [];
		this._vertexBoneWeights = [];
	}
	clone() {
		var skin = new minko_geometry_Skin().copyFrom(this);
		return skin;
	}
	get_numBones() {
		return this._numBones;
	}
	get_maxNumVertexBones() {
		return this._maxNumVertexBones;
	}
	get_bones() {
		return this._bones;
	}
	set_bones(v) {
		this._bones = v;
		return v;
	}
	getBone(boneId) {
		return this._bones[boneId];
	}
	setBone(boneId,value) {
		this._bones[boneId] = value;
	}
	get_duration() {
		return this._duration;
	}
	getFrameId(time) {
		var frameId = time * this._timeFactor;
		return Math.floor(Math.min(frameId,this.get_numFrames() - 1));
	}
	get_numFrames() {
		return this._boneMatricesPerFrame.length;
	}
	set_boneMatricesPerFrame(v) {
		this._boneMatricesPerFrame = v;
		return v;
	}
	get_boneMatricesPerFrame() {
		return this._boneMatricesPerFrame;
	}
	getMatrices(frameId) {
		return this._boneMatricesPerFrame[frameId];
	}
	setMatrix(frameId,boneId,value) {
		this._boneMatricesPerFrame[frameId][boneId] = value;
	}
	get_numVertices() {
		return this._numVertexBones.length;
	}
	numVertexBones(vertexId) {
		return this._numVertexBones[vertexId];
	}
	vertexBoneData(vertexId,j,boneId,boneWeight) {
		var index = this.vertexArraysIndex(vertexId,j);
		boneId = this._vertexBones[index];
		boneWeight = this._vertexBoneWeights[index];
		return new minko_Tuple(boneId,boneWeight);
	}
	vertexBoneId(vertexId,j) {
		return this._vertexBones[this.vertexArraysIndex(vertexId,j)];
	}
	vertexBoneWeight(vertexId,j) {
		return this._vertexBoneWeights[this.vertexArraysIndex(vertexId,j)];
	}
	reorganizeByVertices() {
		this._numVertexBones = null;
		this._vertexBones = null;
		this._vertexBoneWeights = null;
		var lastId = this.get_lastVertexId();
		var numVertices = lastId + 1;
		var numBones = this._bones.length;
		var _g = [];
		var _g1 = 0;
		var _g2 = numVertices;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(0);
		}
		this._numVertexBones = _g;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = numVertices * numBones;
		while(_g4 < _g5) {
			var i1 = _g4++;
			_g3.push(0);
		}
		this._vertexBones = _g3;
		var _g6 = [];
		var _g7 = 0;
		var _g8 = numVertices * numBones;
		while(_g7 < _g8) {
			var i2 = _g7++;
			_g6.push(0.0);
		}
		this._vertexBoneWeights = _g6;
		var _g9 = 0;
		var _g10 = numBones;
		while(_g9 < _g10) {
			var boneId = _g9++;
			var bone = this._bones[boneId];
			var vertexIds = bone.get_vertexIds();
			var vertexWeights = bone.get_vertexWeights();
			var _g91 = 0;
			var _g101 = vertexIds.length;
			while(_g91 < _g101) {
				var i3 = _g91++;
				if(vertexWeights[i3] > 0.0) {
					var vId = vertexIds[i3];
					var j = this._numVertexBones[vId];
					this._numVertexBones[vId] += 1;
					var index = this.vertexArraysIndex(vId,j);
					this._vertexBones[index] = boneId;
					this._vertexBoneWeights[index] = vertexWeights[i3];
				}
			}
		}
		this._maxNumVertexBones = 0;
		var _g11 = 0;
		var _g12 = numVertices;
		while(_g11 < _g12) {
			var vId1 = _g11++;
			this._maxNumVertexBones = Math.floor(Math.max(this._maxNumVertexBones,this._numVertexBones[vId1]));
		}
		return this;
	}
	disposeBones() {
		this._bones = null;
		return this;
	}
	copyFrom(skin) {
		this._bones = [];
		this._numBones = skin._numBones;
		this._duration = skin._duration;
		this._timeFactor = skin._timeFactor;
		this._boneMatricesPerFrame = skin._boneMatricesPerFrame.concat([]);
		this._maxNumVertexBones = skin._maxNumVertexBones;
		this._numVertexBones = skin._numVertexBones.concat([]);
		this._vertexBones = skin._vertexBones.concat([]);
		this._vertexBoneWeights = skin._vertexBoneWeights.concat([]);
		return this;
	}
	get_lastVertexId() {
		var lastId = 0;
		var _g = 0;
		var _g1 = this._bones.length;
		while(_g < _g1) {
			var boneId = _g++;
			var vertexId = this._bones[boneId].get_vertexIds();
			var _g2 = 0;
			var _g11 = vertexId.length;
			while(_g2 < _g11) {
				var i = _g2++;
				lastId = Math.floor(Math.max(lastId,vertexId[i]));
			}
		}
		return lastId;
	}
	vertexArraysIndex(vertexId,j) {
		return j + this._numBones * vertexId;
	}
	static create(numBones,duration,numFrames) {
		return new minko_geometry_Skin(numBones,duration,numFrames);
	}
}
$hx_exports["minko"]["geometry"]["Skin"] = minko_geometry_Skin;
minko_geometry_Skin.__name__ = true;
Object.assign(minko_geometry_Skin.prototype, {
	__class__: minko_geometry_Skin
});
class minko_geometry_SphereGeometry extends minko_geometry_Geometry {
	constructor() {
		super("sphere");
	}
	initializeVertices(context,numParallels,numMeridians,withNormals) {
		var numVertices = (numParallels - 2) * (numMeridians + 1) + 2;
		var c = 0;
		var k = 0;
		var data = [];
		var _g = 1;
		var _g1 = numParallels - 1;
		while(_g < _g1) {
			var j = _g++;
			var i = 0;
			while(i < numMeridians + 1) {
				var theta = j / (numParallels - 1.0) * Math.PI;
				var phi = i / numMeridians * 2.0 * Math.PI;
				var x = Math.sin(theta) * Math.cos(phi) * .5;
				var y = Math.cos(theta) * .5;
				var z = -Math.sin(theta) * Math.sin(phi) * .5;
				data.push(x);
				data.push(y);
				data.push(z);
				data.push(1.0 - i / numMeridians);
				data.push(j / (numParallels - 1.0));
				if(withNormals) {
					data.push(x * 2.0);
					data.push(y * 2.0);
					data.push(z * 2.0);
				}
				++i;
				c += 3;
				k += 2;
			}
		}
		data.push(0.0);
		data.push(.5);
		data.push(0.0);
		data.push(.5);
		data.push(0.0);
		if(withNormals) {
			data.push(0.0);
			data.push(1.0);
			data.push(0.0);
		}
		data.push(0.0);
		data.push(-.5);
		data.push(0.0);
		data.push(.5);
		data.push(1.0);
		if(withNormals) {
			data.push(0.0);
			data.push(-1.0);
			data.push(0.0);
		}
		var stream = minko_render_VertexBuffer.createbyData(context,data);
		stream.addAttribute("position",3,0);
		stream.addAttribute("uv",2,3);
		if(withNormals) {
			stream.addAttribute("normal",3,5);
		}
		this.addVertexBuffer(stream);
		this.computeCenterPosition();
	}
	initializeIndices(context,numParallels,numMeridians) {
		var data = [];
		var c = 0;
		++numMeridians;
		var _g = 0;
		var _g1 = numParallels - 3;
		while(_g < _g1) {
			var j = _g++;
			var _g2 = 0;
			var _g11 = numMeridians - 1;
			while(_g2 < _g11) {
				var i = _g2++;
				data[c++] = j * numMeridians + i;
				data[c++] = (j + 1) * numMeridians + i + 1;
				data[c++] = j * numMeridians + i + 1;
				data[c++] = j * numMeridians + i;
				data[c++] = (j + 1) * numMeridians + i;
				data[c++] = (j + 1) * numMeridians + i + 1;
			}
		}
		var _g21 = 0;
		var _g3 = numMeridians - 1;
		while(_g21 < _g3) {
			var i1 = _g21++;
			data[c++] = (numParallels - 2) * numMeridians;
			data[c++] = i1;
			data[c++] = i1 + 1;
			data[c++] = (numParallels - 2) * numMeridians + 1;
			data[c++] = (numParallels - 3) * numMeridians + i1 + 1;
			data[c++] = (numParallels - 3) * numMeridians + i1;
		}
		this.set_indices(minko_render_IndexBuffer.createbyData(context,data));
	}
	static create(context,numParallels,numMeridians,withNormals) {
		if(withNormals == null) {
			withNormals = true;
		}
		if(numMeridians == null) {
			numMeridians = 0;
		}
		if(numParallels == null) {
			numParallels = 10;
		}
		numMeridians = numMeridians != 0 ? numMeridians : numParallels;
		var geom = new minko_geometry_SphereGeometry();
		geom.initializeVertices(context,numParallels,numMeridians,withNormals);
		geom.initializeIndices(context,numParallels,numMeridians);
		return geom;
	}
}
$hx_exports["minko"]["geometry"]["SphereGeometry"] = minko_geometry_SphereGeometry;
minko_geometry_SphereGeometry.__name__ = true;
minko_geometry_SphereGeometry.__super__ = minko_geometry_Geometry;
Object.assign(minko_geometry_SphereGeometry.prototype, {
	__class__: minko_geometry_SphereGeometry
});
class minko_input_Joystick {
	constructor(canvas,joystickId) {
		this._canvas = canvas;
		this._joystickAxisMotion = new minko_signal_Signal4();
		this._joystickHatMotion = new minko_signal_Signal4();
		this._joystickButtonUp = new minko_signal_Signal3();
		this._joystickButtonDown = new minko_signal_Signal3();
		this._joystickId = joystickId;
	}
	get_joystickId() {
		return this._joystickId;
	}
	get_joystickAxisMotion() {
		return this._joystickAxisMotion;
	}
	get_joystickHatMotion() {
		return this._joystickHatMotion;
	}
	get_joystickButtonDown() {
		return this._joystickButtonDown;
	}
	get_joystickButtonUp() {
		return this._joystickButtonUp;
	}
}
$hx_exports["minko"]["input"]["Joystick"] = minko_input_Joystick;
minko_input_Joystick.__name__ = true;
Object.assign(minko_input_Joystick.prototype, {
	__class__: minko_input_Joystick
});
class minko_input_KeyMap {
	static initializeKeyToKeyCodeMap() {
		var keyToKeyCodeMap = new haxe_ds_IntMap();
		keyToKeyCodeMap.h[3] = 24;
		keyToKeyCodeMap.h[8] = 8;
		keyToKeyCodeMap.h[9] = 9;
		keyToKeyCodeMap.h[12] = 12;
		keyToKeyCodeMap.h[13] = 13;
		keyToKeyCodeMap.h[27] = 27;
		keyToKeyCodeMap.h[28] = 28;
		keyToKeyCodeMap.h[29] = 29;
		keyToKeyCodeMap.h[30] = 30;
		keyToKeyCodeMap.h[31] = 31;
		keyToKeyCodeMap.h[32] = 32;
		keyToKeyCodeMap.h[46] = 127;
		keyToKeyCodeMap.h[48] = 48;
		keyToKeyCodeMap.h[49] = 49;
		keyToKeyCodeMap.h[50] = 50;
		keyToKeyCodeMap.h[51] = 51;
		keyToKeyCodeMap.h[52] = 52;
		keyToKeyCodeMap.h[53] = 53;
		keyToKeyCodeMap.h[54] = 54;
		keyToKeyCodeMap.h[55] = 55;
		keyToKeyCodeMap.h[56] = 56;
		keyToKeyCodeMap.h[57] = 57;
		keyToKeyCodeMap.h[58] = 58;
		keyToKeyCodeMap.h[59] = 59;
		keyToKeyCodeMap.h[60] = 60;
		keyToKeyCodeMap.h[61] = 61;
		keyToKeyCodeMap.h[62] = 62;
		keyToKeyCodeMap.h[63] = 63;
		keyToKeyCodeMap.h[64] = 64;
		keyToKeyCodeMap.h[65] = 97;
		keyToKeyCodeMap.h[66] = 98;
		keyToKeyCodeMap.h[67] = 99;
		keyToKeyCodeMap.h[68] = 100;
		keyToKeyCodeMap.h[69] = 101;
		keyToKeyCodeMap.h[70] = 102;
		keyToKeyCodeMap.h[71] = 103;
		keyToKeyCodeMap.h[72] = 104;
		keyToKeyCodeMap.h[73] = 105;
		keyToKeyCodeMap.h[74] = 106;
		keyToKeyCodeMap.h[75] = 107;
		keyToKeyCodeMap.h[76] = 108;
		keyToKeyCodeMap.h[77] = 109;
		keyToKeyCodeMap.h[78] = 110;
		keyToKeyCodeMap.h[79] = 111;
		keyToKeyCodeMap.h[80] = 112;
		keyToKeyCodeMap.h[81] = 113;
		keyToKeyCodeMap.h[82] = 114;
		keyToKeyCodeMap.h[83] = 115;
		keyToKeyCodeMap.h[84] = 116;
		keyToKeyCodeMap.h[85] = 117;
		keyToKeyCodeMap.h[86] = 118;
		keyToKeyCodeMap.h[87] = 119;
		keyToKeyCodeMap.h[88] = 120;
		keyToKeyCodeMap.h[89] = 121;
		keyToKeyCodeMap.h[90] = 122;
		keyToKeyCodeMap.h[160] = 94;
		keyToKeyCodeMap.h[161] = 33;
		keyToKeyCodeMap.h[162] = 34;
		keyToKeyCodeMap.h[163] = 35;
		keyToKeyCodeMap.h[164] = 36;
		keyToKeyCodeMap.h[165] = 37;
		keyToKeyCodeMap.h[166] = 38;
		keyToKeyCodeMap.h[167] = 95;
		keyToKeyCodeMap.h[168] = 40;
		keyToKeyCodeMap.h[169] = 41;
		keyToKeyCodeMap.h[170] = 42;
		keyToKeyCodeMap.h[171] = 43;
		keyToKeyCodeMap.h[172] = 124;
		keyToKeyCodeMap.h[173] = 45;
		keyToKeyCodeMap.h[174] = 123;
		keyToKeyCodeMap.h[175] = 125;
		keyToKeyCodeMap.h[176] = 126;
		keyToKeyCodeMap.h[188] = 44;
		keyToKeyCodeMap.h[190] = 46;
		keyToKeyCodeMap.h[191] = 47;
		keyToKeyCodeMap.h[192] = 96;
		keyToKeyCodeMap.h[219] = 91;
		keyToKeyCodeMap.h[220] = 92;
		keyToKeyCodeMap.h[221] = 93;
		keyToKeyCodeMap.h[222] = 39;
		return keyToKeyCodeMap;
	}
	static initializeKeyToScanCodeMap() {
		var keyToScanCodeMap = new haxe_ds_IntMap();
		keyToScanCodeMap.h[6] = 117;
		keyToScanCodeMap.h[145] = 71;
		keyToScanCodeMap.h[21] = 144;
		keyToScanCodeMap.h[22] = 144;
		keyToScanCodeMap.h[23] = 144;
		keyToScanCodeMap.h[24] = 144;
		keyToScanCodeMap.h[25] = 144;
		keyToScanCodeMap.h[16] = 225;
		keyToScanCodeMap.h[17] = 224;
		keyToScanCodeMap.h[18] = 226;
		keyToScanCodeMap.h[19] = 72;
		keyToScanCodeMap.h[20] = 57;
		keyToScanCodeMap.h[33] = 75;
		keyToScanCodeMap.h[34] = 78;
		keyToScanCodeMap.h[35] = 77;
		keyToScanCodeMap.h[36] = 74;
		keyToScanCodeMap.h[37] = 80;
		keyToScanCodeMap.h[38] = 82;
		keyToScanCodeMap.h[39] = 79;
		keyToScanCodeMap.h[40] = 81;
		keyToScanCodeMap.h[41] = 119;
		keyToScanCodeMap.h[43] = 116;
		keyToScanCodeMap.h[44] = 70;
		keyToScanCodeMap.h[45] = 73;
		keyToScanCodeMap.h[224] = 231;
		keyToScanCodeMap.h[225] = 230;
		keyToScanCodeMap.h[91] = 227;
		keyToScanCodeMap.h[93] = 101;
		keyToScanCodeMap.h[95] = 282;
		keyToScanCodeMap.h[96] = 98;
		keyToScanCodeMap.h[97] = 89;
		keyToScanCodeMap.h[98] = 90;
		keyToScanCodeMap.h[99] = 91;
		keyToScanCodeMap.h[100] = 92;
		keyToScanCodeMap.h[101] = 93;
		keyToScanCodeMap.h[102] = 94;
		keyToScanCodeMap.h[103] = 95;
		keyToScanCodeMap.h[104] = 96;
		keyToScanCodeMap.h[105] = 97;
		keyToScanCodeMap.h[106] = 85;
		keyToScanCodeMap.h[107] = 87;
		keyToScanCodeMap.h[108] = 159;
		keyToScanCodeMap.h[109] = 86;
		keyToScanCodeMap.h[110] = 220;
		keyToScanCodeMap.h[111] = 84;
		keyToScanCodeMap.h[112] = 58;
		keyToScanCodeMap.h[113] = 59;
		keyToScanCodeMap.h[114] = 60;
		keyToScanCodeMap.h[115] = 61;
		keyToScanCodeMap.h[116] = 62;
		keyToScanCodeMap.h[117] = 63;
		keyToScanCodeMap.h[118] = 64;
		keyToScanCodeMap.h[119] = 65;
		keyToScanCodeMap.h[120] = 66;
		keyToScanCodeMap.h[121] = 67;
		keyToScanCodeMap.h[122] = 68;
		keyToScanCodeMap.h[123] = 69;
		keyToScanCodeMap.h[124] = 104;
		keyToScanCodeMap.h[125] = 105;
		keyToScanCodeMap.h[126] = 106;
		keyToScanCodeMap.h[127] = 107;
		keyToScanCodeMap.h[128] = 108;
		keyToScanCodeMap.h[129] = 109;
		keyToScanCodeMap.h[130] = 110;
		keyToScanCodeMap.h[131] = 111;
		keyToScanCodeMap.h[132] = 112;
		keyToScanCodeMap.h[133] = 113;
		keyToScanCodeMap.h[134] = 114;
		keyToScanCodeMap.h[135] = 115;
		keyToScanCodeMap.h[144] = 83;
		keyToScanCodeMap.h[181] = 127;
		keyToScanCodeMap.h[182] = 129;
		keyToScanCodeMap.h[183] = 128;
		keyToScanCodeMap.h[300] = 228;
		keyToScanCodeMap.h[301] = 229;
		return keyToScanCodeMap;
	}
}
$hx_exports["minko"]["input"]["KeyMap"] = minko_input_KeyMap;
minko_input_KeyMap.__name__ = true;
class minko_input_Keyboard {
	constructor() {
		this._down = new minko_signal_Signal();
		this._up = new minko_signal_Signal();
		this._textInput = new minko_signal_Signal2();
		this._keyDown = new haxe_ds_IntMap();
		this._keyUp = new haxe_ds_IntMap();
	}
	get_keyDown() {
		return this._down;
	}
	get_textInput() {
		return this._textInput;
	}
	getKeyDown(key) {
		var index = key;
		if(!this._keyDown.h.hasOwnProperty(index)) {
			var _this = this._keyDown;
			var value = new minko_signal_Signal2();
			_this.h[index] = value;
		}
		return this._keyDown.h[index];
	}
	get_keyUp() {
		return this._up;
	}
	getKeyUp(key) {
		var index = key;
		if(!this._keyUp.h.hasOwnProperty(index)) {
			var _this = this._keyUp;
			var value = new minko_signal_Signal2();
			_this.h[index] = value;
		}
		return this._keyUp.h[index];
	}
	keyIsDown(key) {
		return false;
	}
	hasKeyDownSignal(key) {
		return this._keyDown.h.hasOwnProperty(key);
	}
	hasKeyUpSignal(key) {
		return this._keyUp.h.hasOwnProperty(key);
	}
	setKeyboardState(key,state) {
	}
	static create() {
		return new minko_input_Keyboard();
	}
	static getKeyName(key) {
		return minko_input_Keyboard._keyToName[key];
	}
	static initializeKeyNames() {
		var names = [];
		names[3] = "CANCEL";
		names[6] = "HELP";
		names[8] = "BACK_SPACE";
		names[9] = "TAB";
		names[12] = "CLEAR";
		names[13] = "RETURN";
		names[14] = "ENTER";
		names[16] = "SHIFT";
		names[17] = "CONTROL";
		names[18] = "ALT";
		names[19] = "PAUSE";
		names[20] = "CAPS_LOCK";
		names[21] = "KANA";
		names[22] = "EISU";
		names[23] = "JUNJA";
		names[24] = "FINAL";
		names[25] = "KANJI";
		names[27] = "ESCAPE";
		names[28] = "CONVERT";
		names[29] = "NONCONVERT";
		names[30] = "ACCEPT";
		names[31] = "MODECHANGE";
		names[32] = "SPACE";
		names[33] = "PAGE_UP";
		names[34] = "PAGE_DOWN";
		names[35] = "END";
		names[36] = "HOME";
		names[37] = "LEFT";
		names[38] = "UP";
		names[39] = "RIGHT";
		names[40] = "DOWN";
		names[41] = "SELECT";
		names[42] = "PRINT";
		names[43] = "EXECUTE";
		names[44] = "PRINTSCREEN";
		names[45] = "INSERT";
		names[46] = "DELETE";
		names[48] = "_0";
		names[49] = "_1";
		names[50] = "_2";
		names[51] = "_3";
		names[52] = "_4";
		names[53] = "_5";
		names[54] = "_6";
		names[55] = "_7";
		names[56] = "_8";
		names[57] = "_9";
		names[58] = "COLON";
		names[59] = "SEMICOLON";
		names[60] = "LESS_THAN";
		names[61] = "EQUALS";
		names[62] = "GREATER_THAN";
		names[63] = "QUESTION_MARK";
		names[64] = "AT";
		names[65] = "A";
		names[66] = "B";
		names[67] = "C";
		names[68] = "D";
		names[69] = "E";
		names[70] = "F";
		names[71] = "G";
		names[72] = "H";
		names[73] = "I";
		names[74] = "J";
		names[75] = "K";
		names[76] = "L";
		names[77] = "M";
		names[78] = "N";
		names[79] = "O";
		names[80] = "P";
		names[81] = "Q";
		names[82] = "R";
		names[83] = "S";
		names[84] = "T";
		names[85] = "U";
		names[86] = "V";
		names[87] = "W";
		names[88] = "X";
		names[89] = "Y";
		names[90] = "Z";
		names[91] = "WIN";
		names[93] = "CONTEXT_MENU";
		names[95] = "SLEEP";
		names[96] = "NUMPAD0";
		names[97] = "NUMPAD1";
		names[98] = "NUMPAD2";
		names[99] = "NUMPAD3";
		names[100] = "NUMPAD4";
		names[101] = "NUMPAD5";
		names[102] = "NUMPAD6";
		names[103] = "NUMPAD7";
		names[104] = "NUMPAD8";
		names[105] = "NUMPAD9";
		names[106] = "MULTIPLY";
		names[107] = "ADD";
		names[108] = "SEPARATOR";
		names[109] = "SUBTRACT";
		names[110] = "DECIMAL";
		names[111] = "DIVIDE";
		names[112] = "F1";
		names[113] = "F2";
		names[114] = "F3";
		names[115] = "F4";
		names[116] = "F5";
		names[117] = "F6";
		names[118] = "F7";
		names[119] = "F8";
		names[120] = "F9";
		names[121] = "F10";
		names[122] = "F11";
		names[123] = "F12";
		names[124] = "F13";
		names[125] = "F14";
		names[126] = "F15";
		names[127] = "F16";
		names[128] = "F17";
		names[129] = "F18";
		names[130] = "F19";
		names[131] = "F20";
		names[132] = "F21";
		names[133] = "F22";
		names[134] = "F23";
		names[135] = "F24";
		names[144] = "NUM_LOCK";
		names[145] = "SCROLL_LOCK";
		names[146] = "WIN_OEM_FJ_JISHO";
		names[147] = "WIN_OEM_FJ_MASSHOU";
		names[148] = "WIN_OEM_FJ_TOUROKU";
		names[149] = "WIN_OEM_FJ_LOYA";
		names[150] = "WIN_OEM_FJ_ROYA";
		names[160] = "CIRCUMFLEX";
		names[161] = "EXCLAMATION";
		names[162] = "DOUBLE_QUOTE";
		names[163] = "HASH";
		names[164] = "DOLLAR";
		names[165] = "PERCENT";
		names[166] = "AMPERSAND";
		names[167] = "UNDERSCORE";
		names[168] = "OPEN_PAREN";
		names[169] = "CLOSE_PAREN";
		names[170] = "ASTERISK";
		names[171] = "PLUS";
		names[172] = "PIPE";
		names[173] = "HYPHEN_MINUS";
		names[174] = "OPEN_CURLY_BRACKET";
		names[175] = "CLOSE_CURLY_BRACKET";
		names[176] = "TILDE";
		names[181] = "VOLUME_MUTE";
		names[182] = "VOLUME_DOWN";
		names[183] = "VOLUME_UP";
		names[188] = "COMMA";
		names[190] = "PERIOD";
		names[191] = "SLASH";
		names[192] = "BACK_QUOTE";
		names[219] = "OPEN_BRACKET";
		names[220] = "BACK_SLASH";
		names[221] = "CLOSE_BRACKET";
		names[222] = "QUOTE";
		names[224] = "META";
		names[225] = "ALTGR";
		names[227] = "WIN_ICO_HELP";
		names[228] = "WIN_ICO_00";
		names[230] = "WIN_ICO_CLEAR";
		names[233] = "WIN_OEM_RESET";
		names[234] = "WIN_OEM_JUMP";
		names[235] = "WIN_OEM_PA1";
		names[236] = "WIN_OEM_PA2";
		names[237] = "WIN_OEM_PA3";
		names[238] = "WIN_OEM_WSCTRL";
		names[239] = "WIN_OEM_CUSEL";
		names[240] = "WIN_OEM_ATTN";
		names[241] = "WIN_OEM_FINISH";
		names[242] = "WIN_OEM_COPY";
		names[243] = "WIN_OEM_AUTO";
		names[244] = "WIN_OEM_ENLW";
		names[245] = "WIN_OEM_BACKTAB";
		names[246] = "ATTN";
		names[247] = "CRSEL";
		names[248] = "EXSEL";
		names[249] = "EREOF";
		names[250] = "PLAY";
		names[251] = "ZOOM";
		names[253] = "PA1";
		names[254] = "WIN_OEM_CLEAR";
		names[300] = "CONTROL_RIGHT";
		names[301] = "SHIFT_RIGHT";
		return names;
	}
}
$hx_exports["minko"]["input"]["Keyboard"] = minko_input_Keyboard;
minko_input_Keyboard.__name__ = true;
Object.assign(minko_input_Keyboard.prototype, {
	__class__: minko_input_Keyboard
});
class minko_input_Mouse {
	constructor(canvas) {
		var _gthis = this;
		this._canvas = canvas;
		this._x = 0;
		this._y = 0;
		this._dX = 0;
		this._dY = 0;
		this._leftButtonIsDown = false;
		this._rightButtonIsDown = false;
		this._middleButtonIsDown = false;
		this._mouseMove = new minko_signal_Signal3();
		this._mouseWheel = new minko_signal_Signal3();
		this._mouseLeftButtonDown = new minko_signal_Signal();
		this._mouseLeftButtonUp = new minko_signal_Signal();
		this._mouseLeftClick = new minko_signal_Signal();
		this._mouseRightButtonDown = new minko_signal_Signal();
		this._mouseRightButtonUp = new minko_signal_Signal();
		this._mouseRightClick = new minko_signal_Signal();
		this._mouseMiddleButtonDown = new minko_signal_Signal();
		this._mouseMiddleButtonUp = new minko_signal_Signal();
		this._mouseMiddleClick = new minko_signal_Signal();
		this._slots = [];
		this._slots.push(this._mouseLeftButtonDown.connect(function(mouse) {
			_gthis._leftButtonIsDown = true;
			_gthis._lastMouseLeftDownX = _gthis.get_x();
			_gthis._lastMouseLeftDownY = _gthis.get_y();
		}));
		this._slots.push(this._mouseLeftButtonUp.connect(function(mouse1) {
			_gthis._leftButtonIsDown = false;
			var dX = Math.abs(_gthis.get_x() - _gthis._lastMouseLeftDownX);
			var dY = Math.abs(_gthis.get_y() - _gthis._lastMouseLeftDownY);
			if(dX < 5 && dY < 5) {
				_gthis.get_leftButtonClick().execute(mouse1);
			}
		}));
		this._slots.push(this._mouseRightButtonDown.connect(function(mouse2) {
			_gthis._rightButtonIsDown = true;
			_gthis._lastMouseRightDownX = _gthis.get_x();
			_gthis._lastMouseRightDownY = _gthis.get_y();
		}));
		this._slots.push(this._mouseRightButtonUp.connect(function(mouse3) {
			_gthis._rightButtonIsDown = false;
			var dX1 = Math.abs(_gthis.get_x() - _gthis._lastMouseRightDownX);
			var dY1 = Math.abs(_gthis.get_y() - _gthis._lastMouseRightDownY);
			if(dX1 < 5 && dY1 < 5) {
				_gthis.get_rightButtonClick().execute(mouse3);
			}
		}));
		this._slots.push(this._mouseMiddleButtonDown.connect(function(mouse4) {
			_gthis._middleButtonIsDown = true;
			_gthis._lastMouseMiddleDownX = _gthis.get_x();
			_gthis._lastMouseMiddleDownY = _gthis.get_y();
		}));
		this._slots.push(this._mouseMiddleButtonUp.connect(function(mouse5) {
			_gthis._middleButtonIsDown = false;
			var dX2 = Math.abs(_gthis.get_x() - _gthis._lastMouseMiddleDownX);
			var dY2 = Math.abs(_gthis.get_y() - _gthis._lastMouseMiddleDownY);
			if(dX2 < 5 && dY2 < 5) {
				_gthis.get_middleButtonClick().execute(mouse5);
			}
		}));
	}
	get_x() {
		return this._x;
	}
	get_y() {
		return this._y;
	}
	set_x(v) {
		this._x = v;
		return v;
	}
	set_y(v) {
		this._y = v;
		return v;
	}
	get_dX() {
		return this._dX;
	}
	get_dY() {
		return this._dY;
	}
	set_dX(v) {
		this._dX = v;
		return v;
	}
	set_dY(v) {
		this._dY = v;
		return v;
	}
	get_leftButtonIsDown() {
		return this._leftButtonIsDown;
	}
	get_rightButtonIsDown() {
		return this._rightButtonIsDown;
	}
	get_middleButtonIsDown() {
		return this._middleButtonIsDown;
	}
	get_normalizedX() {
		return 2.0 * (this._x / this._canvas.get_width() - 0.5);
	}
	get_normalizedY() {
		return 2.0 * (this._y / this._canvas.get_height() - .5);
	}
	get_move() {
		return this._mouseMove;
	}
	get_wheel() {
		return this._mouseWheel;
	}
	get_leftButtonDown() {
		return this._mouseLeftButtonDown;
	}
	get_leftButtonUp() {
		return this._mouseLeftButtonUp;
	}
	get_leftButtonClick() {
		return this._mouseLeftClick;
	}
	get_rightButtonDown() {
		return this._mouseRightButtonDown;
	}
	get_rightButtonUp() {
		return this._mouseRightButtonUp;
	}
	get_rightButtonClick() {
		return this._mouseRightClick;
	}
	get_middleButtonDown() {
		return this._mouseMiddleButtonDown;
	}
	get_middleButtonUp() {
		return this._mouseMiddleButtonUp;
	}
	get_middleButtonClick() {
		return this._mouseMiddleClick;
	}
	static create(canvas) {
		return new minko_input_Mouse(canvas);
	}
}
$hx_exports["minko"]["input"]["Mouse"] = minko_input_Mouse;
minko_input_Mouse.__name__ = true;
Object.assign(minko_input_Mouse.prototype, {
	__class__: minko_input_Mouse
});
class minko_input_TouchPoint {
	constructor(x,y,dX,dY) {
		this.x = x;
		this.y = y;
		this.dX = dX;
		this.dY = dY;
	}
}
$hx_exports["minko"]["input"]["TouchPoint"] = minko_input_TouchPoint;
minko_input_TouchPoint.__name__ = true;
Object.assign(minko_input_TouchPoint.prototype, {
	__class__: minko_input_TouchPoint
});
class minko_input_Touch {
	constructor(canvas) {
		this._canvas = canvas;
		this._touches = new haxe_ds_IntMap();
		this._touchMove = new minko_signal_Signal4();
		this._touchDown = new minko_signal_Signal4();
		this._touchUp = new minko_signal_Signal4();
		this._pinchZoom = new minko_signal_Signal2();
		this._swipeLeft = new minko_signal_Signal();
		this._swipeRight = new minko_signal_Signal();
		this._swipeUp = new minko_signal_Signal();
		this._swipeDown = new minko_signal_Signal();
		this._tap = new minko_signal_Signal3();
		this._doubleTap = new minko_signal_Signal3();
		this._longHold = new minko_signal_Signal3();
	}
	get_touches() {
		return this._touches;
	}
	get_identifiers() {
		return this._identifiers;
	}
	get_numTouches() {
		return this._identifiers.length;
	}
	touch(identifier) {
		return this._touches.h[identifier];
	}
	get_touchMove() {
		return this._touchMove;
	}
	get_touchDown() {
		return this._touchDown;
	}
	get_touchUp() {
		return this._touchUp;
	}
	get_swipeLeft() {
		return this._swipeLeft;
	}
	get_swipeRight() {
		return this._swipeRight;
	}
	get_swipeUp() {
		return this._swipeUp;
	}
	get_swipeDown() {
		return this._swipeDown;
	}
	get_pinchZoom() {
		return this._pinchZoom;
	}
	get_tap() {
		return this._tap;
	}
	get_doubleTap() {
		return this._doubleTap;
	}
	get_longHold() {
		return this._longHold;
	}
	get_averageX() {
		var x = 0.0;
		var l = this.get_numTouches();
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			x += this._touches.h[this._identifiers[i]].x;
		}
		x /= l;
		return x;
	}
	get_averageY() {
		var y = 0.0;
		var l = this.get_numTouches();
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			y += this._touches.h[this._identifiers[i]].y;
		}
		y /= l;
		return y;
	}
	get_averageDX() {
		var x = 0.0;
		var l = this.get_numTouches();
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			x += this._touches.h[this._identifiers[i]].dX;
		}
		x /= l;
		return x;
	}
	get_averageDY() {
		var y = 0.0;
		var l = this.get_numTouches();
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			y += this._touches.h[this._identifiers[i]].dY;
		}
		y /= l;
		return y;
	}
	resetDeltas() {
		var l = this.get_numTouches();
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			this._touches.h[this._identifiers[i]].dX = 0;
			this._touches.h[this._identifiers[i]].dY = 0;
		}
	}
	addTouch(identifier,x,y,dX,dY) {
	}
	updateTouch(identifier,x,y,dX,dY) {
	}
	removeTouch(identifier) {
	}
	static create(canvas) {
		return new minko_input_Touch(canvas);
	}
}
$hx_exports["minko"]["input"]["Touch"] = minko_input_Touch;
minko_input_Touch.__name__ = true;
Object.assign(minko_input_Touch.prototype, {
	__class__: minko_input_Touch
});
class minko_material_PhongMaterial extends minko_material_BasicMaterial {
	constructor(name) {
		super(name);
	}
	set_specularColor(color) {
		this.get_data().set("specularColor",color);
		return color;
	}
	specularColorRGBA(color) {
		var this1 = new glm_Vec4Base();
		this1.x = (color >> 24 & 255) / 255;
		this1.y = (color >> 16 & 255) / 255;
		this1.z = (color >> 8 & 255) / 255;
		this1.w = (color & 255) / 255;
		return this.set_specularColor(this1);
	}
	get_specularColor() {
		return this.get_data().get("specularColor");
	}
	set_shininess(value) {
		this.get_data().set("shininess",value);
		return value;
	}
	get_shininess() {
		return this.get_data().get("shininess");
	}
	get_normalMap() {
		if(this.get_data().hasProperty("normalMap")) {
			return this.get_data().get("normalMap");
		} else {
			return null;
		}
	}
	set_normalMap(value) {
		if(value.get_type() == 1) {
			throw new js__$Boot_HaxeError("Only 2d normal maps are currently supported.");
		}
		this.get_data().set("normalMap",value);
		return value;
	}
	get_specularMap() {
		if(this.get_data().hasProperty("specularMap")) {
			return this.get_data().get("specularMap");
		} else {
			return null;
		}
	}
	set_specularMap(value) {
		if(value.get_type() == 1) {
			throw new js__$Boot_HaxeError("Only 2d normal maps are currently supported.");
		}
		this.get_data().set("specularMap",value);
		return value;
	}
	set_environmentAlpha(value) {
		this.get_data().set("environmentAlpha",value);
		return value;
	}
	get_environmentAlpha() {
		return this.get_data().get("environmentAlpha");
	}
	get_environmentCubemap() {
		if(this.get_data().hasProperty("environmentCubemap")) {
			return this.get_data().get("environmentCubemap");
		} else {
			return null;
		}
	}
	set_environmentMap(value) {
		if(value.get_type() == 0) {
			this.get_data().set("environmentMap2d",value);
		} else {
			this.get_data().set("environmentCubemap",value);
		}
		return value;
	}
	get_environmentMap2d() {
		if(this.get_data().hasProperty("environmentMap2d")) {
			return this.get_data().get("environmentMap2d");
		} else {
			return null;
		}
	}
	get_alphaMap() {
		if(this.get_data().hasProperty("alphaMap")) {
			return this.get_data().get("alphaMap");
		} else {
			return null;
		}
	}
	set_alphaMap(value) {
		if(value.get_type() == 1) {
			throw new js__$Boot_HaxeError("Only 2d transparency maps are currently supported.");
		}
		this.get_data().set("alphaMap",value);
		return value;
	}
	set_alphaThreshold(value) {
		this.get_data().set("alphaThreshold",value);
		return value;
	}
	get_alphaThreshold() {
		return this.get_data().get("alphaThreshold");
	}
	get_fresnelReflectance() {
		return this.get_data().get("fresnelReflectance");
	}
	set_fresnelReflectance(value) {
		this.get_data().set("fresnelReflectance",value);
		return value;
	}
	get_fresnelExponent() {
		return this.get_data().get("fresnelExponent");
	}
	set_fresnelExponent(value) {
		this.get_data().set("fresnelExponent",value);
		return value;
	}
	static create(name) {
		if(name == null) {
			name = "PhongMaterial";
		}
		return new minko_material_PhongMaterial(name);
	}
	static createbyPhongMaterial(source) {
		var pm = minko_material_PhongMaterial.create(source.get_name());
		pm.get_data().copyFrom(source.get_data());
		return pm;
	}
}
$hx_exports["minko"]["material"]["PhongMaterial"] = minko_material_PhongMaterial;
minko_material_PhongMaterial.__name__ = true;
minko_material_PhongMaterial.__super__ = minko_material_BasicMaterial;
Object.assign(minko_material_PhongMaterial.prototype, {
	__class__: minko_material_PhongMaterial
});
class minko_material_WaterMaterial extends minko_material_PhongMaterial {
	constructor(numWaves,name) {
		super(name);
		this._numWaves = numWaves;
		var _g = [];
		var _g1 = 0;
		var _g2 = numWaves;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(0.0);
		}
		this._amplitudes = _g;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = numWaves * 2;
		while(_g4 < _g5) {
			var i1 = _g4++;
			var this1 = new glm_Vec2Base();
			this1.x = 1;
			this1.y = 1;
			_g3.push(this1);
		}
		this._origins = _g3;
		var _g6 = [];
		var _g7 = 0;
		var _g8 = numWaves;
		while(_g7 < _g8) {
			var i2 = _g7++;
			_g6.push(0.0);
		}
		this._waveLength = _g6;
		var _g9 = [];
		var _g10 = 0;
		var _g11 = numWaves;
		while(_g10 < _g11) {
			var i3 = _g10++;
			_g9.push(0.0);
		}
		this._speeds = _g9;
		var _g12 = [];
		var _g13 = 0;
		var _g14 = numWaves;
		while(_g13 < _g14) {
			var i4 = _g13++;
			_g12.push(0.0);
		}
		this._sharpness = _g12;
		var _g15 = [];
		var _g16 = 0;
		var _g17 = numWaves;
		while(_g16 < _g17) {
			var i5 = _g16++;
			_g15.push(0);
		}
		this._waveType = _g15;
		this.get_data().set("numWaves",this._numWaves).set("waveOrigin",this._origins).set("waveLength",this._waveLength).set("waveAmplitude",this._amplitudes).set("waveSharpness",this._sharpness).set("waveSpeed",this._speeds).set("waveType",this._waveType);
	}
	setWaveProperty(propertyName,waveId,value) {
		var values = this.get_data().get(propertyName);
		values[waveId] = value;
	}
	setDirection(waveId,direction) {
		this.setWaveProperty("waveOrigin",waveId,direction);
		this.setWaveProperty("waveType",waveId,0);
		return this;
	}
	setCenter(waveId,origin) {
		this.setWaveProperty("waveOrigin",waveId,origin);
		this.setWaveProperty("waveType",waveId,1);
		return this;
	}
	setAmplitude(waveId,amplitude) {
		this.setWaveProperty("waveAmplitude",waveId,amplitude);
		return this;
	}
	setWaveLength(waveId,waveLength) {
		this.setWaveProperty("waveLength",waveId,waveLength);
		return this;
	}
	setSharpness(waveId,sharpness) {
		this.setWaveProperty("waveSharpness",waveId,sharpness);
		return this;
	}
	setSpeed(waveId,speed) {
		this.setWaveProperty("waveSpeed",waveId,speed);
		return this;
	}
	static createWaves(numWaves,name) {
		if(name == null) {
			name = "WaterMaterial";
		}
		return new minko_material_WaterMaterial(numWaves,name);
	}
}
$hx_exports["minko"]["material"]["WaterMaterial"] = minko_material_WaterMaterial;
minko_material_WaterMaterial.__name__ = true;
minko_material_WaterMaterial.__super__ = minko_material_PhongMaterial;
Object.assign(minko_material_WaterMaterial.prototype, {
	__class__: minko_material_WaterMaterial
});
class minko_math_HashCore {
	static djb2(s) {
		var hash = 5381;
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			hash = (hash << 5) + hash + HxOverrides.cca(s,i);
		}
		return hash;
	}
	static sdbm(s) {
		var hash = 0;
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			hash = HxOverrides.cca(s,i) + (hash << 6) + (hash << 16) - hash;
		}
		return hash;
	}
	static javaHashCode(s) {
		var hash = 0;
		if(s.length == 0) {
			return hash;
		}
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			hash = (hash << 5) - hash + HxOverrides.cca(s,i);
			hash &= hash;
		}
		return hash;
	}
}
minko_math_HashCore.__name__ = true;
class minko_math_Random {
	static makeRandomSeed() {
		return Math.floor(Math.random() * 2147483647.0);
	}
	static nextParkMiller(seed) {
		return Math.floor(seed * 16807.0 % 2147483647.0);
	}
	static nextParkMiller31(seed) {
		var lo = 16807 * (seed & 65535);
		var hi = 16807 * (seed >>> 16);
		lo += (hi & 32767) << 16;
		lo += hi >>> 15;
		if(lo > 2147483647) {
			lo -= 2147483647;
		}
		return lo;
	}
	static nextLCG(seed) {
		return Math.floor((1103515245.0 * seed + 12345) % 2147483647.0);
	}
	static toFloat(seed) {
		return seed / 2147483647.0;
	}
	static toBool(seed) {
		return seed / 2147483647.0 > 0.5;
	}
	static toFloatRange(seed,min,max) {
		return min + (max - min) * (seed / 2147483647.0);
	}
	static toIntRange(seed,min,max) {
		return Math.round(min - 0.4999 + (max + 0.4999 - (min - 0.4999)) * (seed / 2147483647.0));
	}
	static stringToSeed(s) {
		return Math.floor(minko_math_HashCore.djb2(s) % 2147483647.0);
	}
}
minko_math_Random.__name__ = true;
class minko_math_Ray {
	constructor() {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this._origin = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0.0;
		this2.y = 0.0;
		this2.z = -1.0;
		this._direction = this2;
	}
	get_direction() {
		return this._direction;
	}
	set_direction(value) {
		this._direction = value;
		return value;
	}
	get_origin() {
		return this._origin;
	}
	set_origin(value) {
		this._origin = value;
		return value;
	}
	setRay(origin,direction) {
		this._origin = origin;
		this._direction = direction;
	}
	static createbyVector3(origin,direction) {
		var ray = new minko_math_Ray();
		ray.setRay(origin,direction);
		return ray;
	}
	static create() {
		return new minko_math_Ray();
	}
}
$hx_exports["minko"]["math"]["Ray"] = minko_math_Ray;
minko_math_Ray.__name__ = true;
Object.assign(minko_math_Ray.prototype, {
	__class__: minko_math_Ray
});
class minko_math_Rect {
	constructor(x,y,w,h) {
		if(h == null) {
			h = 0;
		}
		if(w == null) {
			w = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		this.width = w;
		this.height = h;
	}
	clone() {
		var c = new minko_math_Rect();
		c.x = this.x;
		c.y = this.y;
		c.width = this.width;
		c.height = this.height;
		return c;
	}
}
minko_math_Rect.__name__ = true;
Object.assign(minko_math_Rect.prototype, {
	__class__: minko_math_Rect
});
class minko_net_HTTPOptions extends minko_file_Options {
	constructor() {
		super();
		this._username = "";
		this._password = "";
		this._additionalHeaders = [];
		this._verifyPeer = true;
	}
	get_username() {
		return this._username;
	}
	set_username(v) {
		this._username = v;
		return v;
	}
	get_password() {
		return this._password;
	}
	set_password(v) {
		this._password = v;
		return v;
	}
	get_additionalHeaders() {
		return this._additionalHeaders;
	}
	get_verifyPeer() {
		return this._verifyPeer;
	}
	set_verifyPeer(v) {
		this._verifyPeer = v;
		return v;
	}
	copyFrom(copy) {
		super.copyFrom(copy);
		this._username = (js_Boot.__cast(copy , minko_net_HTTPOptions))._username;
		this._password = (js_Boot.__cast(copy , minko_net_HTTPOptions))._password;
		this._additionalHeaders = (js_Boot.__cast(copy , minko_net_HTTPOptions))._additionalHeaders;
		this._verifyPeer = (js_Boot.__cast(copy , minko_net_HTTPOptions))._verifyPeer;
		return this;
	}
	clone() {
		var copy = new minko_net_HTTPOptions();
		copy.copyFrom(this);
		copy.initialize();
		return copy;
	}
	static create() {
		var instance = new minko_net_HTTPOptions();
		instance.initialize();
		return instance;
	}
	static createbyOptions(copy) {
		var instance = new minko_net_HTTPOptions();
		instance.copyFrom(copy);
		instance.initialize();
		return instance;
	}
}
$hx_exports["minko"]["net"]["HTTPOptions"] = minko_net_HTTPOptions;
minko_net_HTTPOptions.__name__ = true;
minko_net_HTTPOptions.__super__ = minko_file_Options;
Object.assign(minko_net_HTTPOptions.prototype, {
	__class__: minko_net_HTTPOptions
});
class minko_net_WebHTTPProtocol extends minko_file_AbstractProtocol {
	constructor() {
		super();
		this._status = 0;
	}
	wget2CompleteHandler(id,arg,data,size) {
		arg.completeHandler(data);
	}
	wget2ErrorHandler(id,arg,code,message) {
		arg.errorHandler(code,message);
	}
	wget2ProgressHandler(id,arg,loadedBytes,totalBytes) {
		arg.progressHandler(loadedBytes,totalBytes);
	}
	load() {
		minko_net_WebHTTPProtocol._httpProtocolReferences.push(this);
		this._options.set_protocolFunction(function(filename) {
			return function() {
				return new minko_net_WebHTTPProtocol();
			};
		});
		this.get_progress().execute(this,0.0);
		var username = null;
		var password = null;
		var additionalHeaders = [];
		var verifyPeer = true;
		if(((this._options) instanceof minko_net_HTTPOptions)) {
			var httpOptions = js_Boot.__cast(this._options , minko_net_HTTPOptions);
			username = haxe_io_Bytes.ofString(httpOptions.get_username());
			password = haxe_io_Bytes.ofString(httpOptions.get_password());
			additionalHeaders = httpOptions.get_additionalHeaders();
			verifyPeer = httpOptions.get_verifyPeer();
		}
		var seekingOffset = this._options.get_seekingOffset();
		var seekedLength = this._options.get_seekedLength();
		if(seekingOffset >= 0 && seekedLength > 0) {
			var rangeMin = seekingOffset == null ? "null" : "" + seekingOffset;
			var rangeMax = Std.string(seekingOffset + seekedLength - 1);
			additionalHeaders.push(new minko_Tuple("Range","bytes=" + rangeMin + "-" + rangeMax));
		}
		if(this.get_options().get_loadAsynchronously()) {
			var additionalHeadersJsonString = "";
			if(additionalHeaders.length != 0) {
				var additionalHeaderCount = 0;
				additionalHeadersJsonString += "{ ";
				var _g = 0;
				while(_g < additionalHeaders.length) {
					var additionalHeader = additionalHeaders[_g];
					++_g;
					additionalHeadersJsonString += "\"" + additionalHeader.first + "\" : \"" + additionalHeader.second + "\"";
					if(additionalHeaderCount < additionalHeaders.length - 1) {
						additionalHeadersJsonString += ", ";
					}
					++additionalHeaderCount;
				}
				additionalHeadersJsonString += " }";
			}
			this._handle = minko_net_EmscriptenAsync.emscripten_async_wget3_data(this.get_resolvedFilename(),"GET","",additionalHeadersJsonString,this,true,$bind(this,this.wget2CompleteHandler),$bind(this,this.wget2ErrorHandler),$bind(this,this.wget2ProgressHandler));
		} else {
			var xhr = new XMLHttpRequest();
			xhr.open("GET",this.get_resolvedFilename(),false);
			xhr.overrideMimeType("text/plain; charset=x-user-defined");
			var _g1 = 0;
			while(_g1 < additionalHeaders.length) {
				var additionalHeader1 = additionalHeaders[_g1];
				++_g1;
				xhr.setRequestHeader(additionalHeader1.first,additionalHeader1.second);
			}
			xhr.send(null);
			var size = -1;
			var bytes = null;
			if(xhr.readyState == 4 && xhr.status == 0 || (xhr.status == 200 || xhr.status == 206)) {
				var array = new Uint8Array(xhr.responseText.length);
				var _g11 = 0;
				var _g2 = xhr.responseText.length;
				while(_g11 < _g2) {
					var i = _g11++;
					array[i] = HxOverrides.cca(xhr.responseText,i) & 255;
				}
				bytes = haxe_io_Bytes.ofData(array.buffer);
				size = xhr.responseText.length;
			} else {
				size = -1;
			}
			if(size >= 0) {
				this.completeHandler(bytes);
			} else {
				this.errorHandler(0,"");
			}
		}
	}
	fileExists(filename) {
		var username = "";
		var password = "";
		var additionalHeaders = [];
		var verifyPeer = true;
		if(((this._options) instanceof minko_net_HTTPOptions)) {
			var httpOptions = this._options;
			username = httpOptions.get_username();
			password = httpOptions.get_password();
			additionalHeaders = httpOptions.get_additionalHeaders();
			verifyPeer = httpOptions.get_verifyPeer();
		}
		additionalHeaders.push(new minko_Tuple("Access-Control-Allow-Methods","GET, POST,PUT"));
		var xhr = new XMLHttpRequest();
		xhr.open("HEAD",filename,false);
		if(additionalHeaders != null) {
			var _g = 0;
			while(_g < additionalHeaders.length) {
				var additionalHeader = additionalHeaders[_g];
				++_g;
				if(additionalHeader.first == "") {
					continue;
				}
				xhr.setRequestHeader(additionalHeader.first,additionalHeader.second);
			}
		}
		try {
			xhr.send(null);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return false;
		}
		var status = xhr.status;
		if(!(xhr.readyState == 4 && xhr.status == 0)) {
			if(status >= 200) {
				return status < 300;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	isAbsolutePath(filename) {
		return filename.indexOf("://") != -1;
	}
	completeHandler(data) {
		if(this._status == 1) {
			return;
		}
		this.set_data(data);
		this.get_progress().execute(this,1.0);
		this.get_complete().execute(this);
		HxOverrides.remove(minko_net_WebHTTPProtocol._httpProtocolReferences,this);
	}
	errorHandler(code,message) {
		if(message == null) {
			message = "";
		}
		this.get_error().execute(this,message);
		HxOverrides.remove(minko_net_WebHTTPProtocol._httpProtocolReferences,this);
	}
	progressHandler(loadedBytes,totalBytes) {
		if(this._status == 1) {
			return;
		}
		var progress = 0.0;
		if(totalBytes != 0) {
			progress = loadedBytes / totalBytes;
		}
		if(this.get_options().get_fileStatusFunction() != null) {
			var fileStatus = (this.get_options().get_fileStatusFunction())(this.get_file(),progress);
			if(fileStatus == 1) {
				this._status = 1;
				minko_net_EmscriptenAsync.emscripten_async_wget2_abort(this._handle);
				this.get_error().execute(this,"");
				return;
			}
		}
		this.get_progress().execute(this,progress);
	}
	static create() {
		return new minko_net_WebHTTPProtocol();
	}
}
$hx_exports["minko"]["net"]["WebHTTPProtocol"] = minko_net_WebHTTPProtocol;
minko_net_WebHTTPProtocol.__name__ = true;
minko_net_WebHTTPProtocol.__super__ = minko_file_AbstractProtocol;
Object.assign(minko_net_WebHTTPProtocol.prototype, {
	__class__: minko_net_WebHTTPProtocol
});
class minko_net_EmscriptenAsync {
	static getNextWgetRequestHandle() {
		var a = minko_net_EmscriptenAsync.nextWgetRequestHandle;
		minko_net_EmscriptenAsync.nextWgetRequestHandle++;
		return a;
	}
	static emscripten_async_wget2_abort(handle) {
		var http = minko_net_EmscriptenAsync.wgetRequests.h[handle];
		if(http != null) {
			http.abort();
		}
	}
	static emscripten_async_wget3_data(url,request,param,additionalHeader,arg,free,onload,onerror,onprogress) {
		var _url = url;
		var _request = request;
		var _param = param;
		var http = new XMLHttpRequest();
		http.open(_request,_url,true);
		http.responseType = "arraybuffer";
		var handle = minko_net_EmscriptenAsync.getNextWgetRequestHandle();
		var http_onload = function(e) {
			if(http.status == 200 || http.status == 206 || HxOverrides.substr(_url,0,4).toLowerCase() != "http") {
				var byteArray = new Uint8Array(http.response);
				var buffer = haxe_io_Bytes.ofData(byteArray.buffer);
				if(onload != null) {
					onload(handle,arg,buffer,byteArray.length);
				}
				if(free) {
					buffer = null;
				}
			} else if(onerror != null) {
				onerror(handle,arg,http.status,http.statusText);
			}
			minko_net_EmscriptenAsync.wgetRequests.remove(handle);
		};
		http.onload = http_onload;
		var http_onerror = function(e1) {
			if(onerror != null) {
				onerror(handle,arg,http.status,http.statusText);
			}
			minko_net_EmscriptenAsync.wgetRequests.remove(handle);
		};
		http.onerror = http_onerror;
		var http_onprogress = function(e2) {
			if(onprogress != null) {
				onprogress(handle,arg,e2.loaded,e2.lengthComputable || e2.lengthComputable == null ? e2.total : 0);
			}
		};
		http.onprogress = http_onprogress;
		var http_onabort = function(e3) {
			minko_net_EmscriptenAsync.wgetRequests.remove(handle);
		};
		http.onabort = http_onabort;
		if(additionalHeader != "") {
			var additionalHeaderObject = JSON.parse(additionalHeader);
			var _g = 0;
			var _g1 = Reflect.fields(additionalHeaderObject);
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				http.setRequestHeader(entry,Reflect.field(additionalHeaderObject,entry));
			}
		}
		if(_request == "POST") {
			http.setRequestHeader("Content-type","application/x-www-form-urlencoded");
			http.setRequestHeader("Content-length",_param.length == null ? "null" : "" + _param.length);
			http.setRequestHeader("Connection","close");
			http.send(_param);
		} else {
			http.send(null);
		}
		minko_net_EmscriptenAsync.wgetRequests.h[handle] = http;
		return handle;
	}
}
minko_net_EmscriptenAsync.__name__ = true;
class minko_render_AbstractContext {
	constructor() {
	}
	dispose() {
	}
	get_errorsEnabled() {
		return false;
	}
	set_errorsEnabled(errors) {
		return errors;
	}
	get_driverInfo() {
		return "";
	}
	get_renderTarget() {
		return -1;
	}
	get_viewportWidth() {
		return -1;
	}
	get_viewportHeight() {
		return -1;
	}
	get_currentProgram() {
		return -1;
	}
	configureViewport(x,y,width,height) {
	}
	clear(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = -1;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 0.0;
		}
		if(blue == null) {
			blue = 0.0;
		}
		if(green == null) {
			green = 0.0;
		}
		if(red == null) {
			red = 0.0;
		}
	}
	present() {
	}
	drawIndexBufferTriangles(indexBuffer,firstIndex,numTriangles) {
	}
	drawTriangles(firstIndex,numTriangles) {
	}
	createVertexBuffer(size) {
		return -1;
	}
	setVertexBufferAt(position,vertexBuffer,size,stride,offset) {
	}
	uploadVertexBufferData(vertexBuffer,offset,size,data) {
	}
	deleteVertexBuffer(vertexBuffer) {
	}
	createIndexBuffer(size) {
		return -1;
	}
	uploaderIndexBufferData(indexBuffer,offset,size,data) {
	}
	deleteIndexBuffer(indexBuffer) {
	}
	createTexture(type,width,height,mipMapping,optimizeForRenderToTexture,assertPowerOfTwoSized) {
		if(assertPowerOfTwoSized == null) {
			assertPowerOfTwoSized = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		return -1;
	}
	createRectangleTexture(type,width,height) {
		return -1;
	}
	createCompressedTexture(type,format,width,height,mipMapping) {
		return -1;
	}
	uploadTexture2dData(texture,width,height,mipLevel,data) {
	}
	uploadCubeTextureData(texture,face,width,height,mipLevel,data) {
	}
	uploadCompressedTexture2dData(texture,format,width,height,size,mipLevel,data) {
	}
	uploadCompressedCubeTextureData(texture,face,format,width,height,mipLevel,data) {
	}
	activateMipMapping(texture) {
	}
	deleteTexture(texture) {
	}
	setTextureAt(position,texture,location) {
		if(location == null) {
			location = -1;
		}
	}
	setSamplerStateAt(position,wrapping,filtering,mipFiltering) {
	}
	createProgram() {
		return -1;
	}
	attachShader(program,shader) {
	}
	linkProgram(program) {
	}
	deleteProgram(program) {
	}
	setProgram(program) {
	}
	compileShader(shader) {
	}
	setShaderSource(shader,source) {
	}
	createVertexShader() {
		return -1;
	}
	deleteVertexShader(vertexShader) {
	}
	createFragmentShader() {
		return -1;
	}
	deleteFragmentShader(fragmentShader) {
	}
	getProgramInputs(program) {
		return null;
	}
	setBlendingModeSD(source,destination) {
	}
	setBlendingMode(blendMode) {
	}
	setColorMask(NamelessParameter) {
	}
	setDepthTest(depthMask,depthFunc) {
	}
	setStencilTest(stencilFunc,stencilRef,stencilMask,stencilFailOp,stencilZFailOp,stencilZPassOp) {
	}
	setScissorTest(scissorTest,NamelessParameter2) {
	}
	readPixels(pixels) {
	}
	readRectPixels(x,y,width,height,pixels) {
	}
	setTriangleCulling(triangleCulling) {
	}
	setRenderToBackBuffer() {
	}
	setRenderToTexture(texture,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
	}
	generateMipmaps(texture) {
	}
	setUniformFloat(location,count,v) {
	}
	setUniformFloat2(location,count,v) {
	}
	setUniformFloat3(location,count,v) {
	}
	setUniformFloat4(location,count,v) {
	}
	setUniformMatrix4x4(location,count,v) {
	}
	setUniformInt(location,count,v) {
	}
	setUniformInt2(location,count,v) {
	}
	setUniformInt3(location,count,v) {
	}
	setUniformInt4(location,count,v) {
	}
	createVertexAttributeArray() {
		return -1;
	}
	setVertexAttributeArray(vertexArray) {
	}
}
$hx_exports["minko"]["render"]["AbstractContext"] = minko_render_AbstractContext;
minko_render_AbstractContext.__name__ = true;
Object.assign(minko_render_AbstractContext.prototype, {
	__class__: minko_render_AbstractContext
});
class minko_render_AbstractResource {
	constructor(context) {
		if(minko_render_AbstractResource._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(context);
	}
	_hx_constructor(context) {
		this._uuid = minko_Uuid.getUuid();
		this._context = context;
		this._id = -1;
	}
	get_uuid() {
		return this._uuid;
	}
	get_context() {
		return this._context;
	}
	set_id(v) {
		this._id = v;
		return this._id;
	}
	get_id() {
		if(this._id == -1) {
			throw new js__$Boot_HaxeError("");
		}
		return this._id;
	}
	get_isReady() {
		return this._id != -1;
	}
	dispose() {
	}
	upload() {
	}
}
$hx_exports["minko"]["render"]["AbstractResource"] = minko_render_AbstractResource;
minko_render_AbstractResource.__name__ = true;
Object.assign(minko_render_AbstractResource.prototype, {
	__class__: minko_render_AbstractResource
});
class minko_render_AbstractTexture extends minko_render_AbstractResource {
	constructor(type,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename) {
		minko_render_AbstractResource._hx_skip_constructor = true;
		super();
		minko_render_AbstractResource._hx_skip_constructor = false;
		this._hx_constructor(type,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
	}
	_hx_constructor(type,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename) {
		this.MAX_SIZE = 4096;
		super._hx_constructor(context);
		this._sampler = new minko_render_TextureSampler(this.get_uuid(),this._id);
		this._type = type;
		this._format = format;
		this._width = width;
		this._height = height;
		var x = width;
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		this._widthGPU = Math.floor(Math.min(x + 1,this.MAX_SIZE));
		var x1 = height;
		--x1;
		x1 |= x1 >> 1;
		x1 |= x1 >> 2;
		x1 |= x1 >> 4;
		x1 |= x1 >> 8;
		x1 |= x1 >> 16;
		this._heightGPU = Math.floor(Math.min(x1 + 1,this.MAX_SIZE));
		this._mipMapping = mipMapping;
		this._resizeSmoothly = resizeSmoothly;
		this._optimizeForRenderToTexture = optimizeForRenderToTexture;
		this._filename = filename;
	}
	get_sampler() {
		return this._sampler;
	}
	set_id(v) {
		this._id = v;
		this._sampler.id = v;
		return this._id;
	}
	get_type() {
		return this._type;
	}
	get_format() {
		return this._format;
	}
	get_width() {
		return this._widthGPU;
	}
	get_height() {
		return this._heightGPU;
	}
	get_originalWidth() {
		return this._width;
	}
	get_originalHeight() {
		return this._height;
	}
	get_mipMapping() {
		return this._mipMapping;
	}
	activateMipMapping() {
		if(this._mipMapping) {
			return;
		}
		this._mipMapping = true;
		this._context.activateMipMapping(this._id);
	}
	get_optimizeForRenderToTexture() {
		return this._optimizeForRenderToTexture;
	}
	resize(width,height,resizeSmoothly) {
	}
	disposeData() {
	}
	getMipmapWidth(level) {
		var p = minko_utils_MathUtil.getp2(this._widthGPU);
		return 1 << p - level;
	}
	getMipmapHeight(level) {
		var p = minko_utils_MathUtil.getp2(this._heightGPU);
		return 1 << p - level;
	}
	static resizeData(width,height,data,newWidth,newHeight,resizeSmoothly) {
		var newData = null;
		if(newWidth == 0 || newHeight == 0) {
			return data;
		}
		if(newWidth == width && newHeight == height) {
			newData = new haxe_io_Bytes(new ArrayBuffer(width * height * 4));
			newData.blit(0,data,0,width * height * 4);
			return newData;
		}
		var size = newWidth * newHeight * 4;
		var xFactor = (width - 1.0) / (newWidth - 1.0);
		var yFactor = (height - 1.0) / (newHeight - 1.0);
		newData = new haxe_io_Bytes(new ArrayBuffer(size));
		var idx = 0;
		var y = 0.0;
		var _g = 0;
		var _g1 = newHeight;
		while(_g < _g1) {
			var q = _g++;
			var j = Math.floor(y);
			var dy = y - j;
			if(j >= height) {
				j = height - 1;
			}
			var x = 0.0;
			var _g2 = 0;
			var _g11 = newWidth;
			while(_g2 < _g11) {
				var p = _g2++;
				var i = Math.floor(x);
				if(i >= width) {
					i = width - 1;
				}
				var ijTL = i + width * j << 2;
				if(resizeSmoothly) {
					var dx = x - i;
					var dxy = dx * dy;
					var ijTR = i < width - 1 ? ijTL + 4 : ijTL;
					var ijBL = j < height - 1 ? ijTL + (width << 2) : ijTL;
					var ijBR = i < width - 1 && j < height - 1 ? ijTL + (width + 1 << 2) : ijTL;
					var wTL = 1.0 - dx - dy + dxy;
					var wTR = dx - dxy;
					var wBL = dy - dxy;
					var wBR = dxy;
					var color = wTL * data.b[ijTL] + wTR * data.b[ijTR] + wBL * data.b[ijBL] + wBR * data.b[ijBR];
					newData.b[idx] = Math.floor(color);
					var color1 = wTL * data.b[ijTL + 1] + wTR * data.b[ijTR + 1] + wBL * data.b[ijBL + 1] + wBR * data.b[ijBR + 1];
					newData.b[idx + 1] = Math.floor(color1);
					var color2 = wTL * data.b[ijTL + 2] + wTR * data.b[ijTR + 2] + wBL * data.b[ijBL + 2] + wBR * data.b[ijBR + 2];
					newData.b[idx + 2] = Math.floor(color2);
					var color3 = wTL * data.b[ijTL + 3] + wTR * data.b[ijTR + 3] + wBL * data.b[ijBL + 3] + wBR * data.b[ijBR + 3];
					newData.b[idx + 3] = Math.floor(color3);
				} else {
					newData.b[idx] = data.b[ijTL];
					newData.b[idx + 1] = data.b[ijTL + 1];
					newData.b[idx + 2] = data.b[ijTL + 2];
					newData.b[idx + 3] = data.b[ijTL + 3];
				}
				idx += 4;
				x += xFactor;
			}
			y += yFactor;
		}
		return newData;
	}
}
$hx_exports["minko"]["render"]["AbstractTexture"] = minko_render_AbstractTexture;
minko_render_AbstractTexture.__name__ = true;
minko_render_AbstractTexture.__super__ = minko_render_AbstractResource;
Object.assign(minko_render_AbstractTexture.prototype, {
	__class__: minko_render_AbstractTexture
});
class minko_render_CubeTexture extends minko_render_AbstractTexture {
	constructor(context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename) {
		if(filename == null) {
			filename = "";
		}
		if(resizeSmoothly == null) {
			resizeSmoothly = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		if(format == null) {
			format = 1;
		}
		super(1,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
		this._data = [];
		var x = width;
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		this._widthGPU = Math.floor(Math.min(x + 1,this.MAX_SIZE));
		var x1 = height;
		--x1;
		x1 |= x1 >> 1;
		x1 |= x1 >> 2;
		x1 |= x1 >> 4;
		x1 |= x1 >> 8;
		x1 |= x1 >> 16;
		this._heightGPU = Math.floor(Math.min(x1 + 1,this.MAX_SIZE));
	}
	setData(data,face,widthGPU,heightGPU) {
		if(heightGPU == null) {
			heightGPU = -1;
		}
		if(widthGPU == null) {
			widthGPU = -1;
		}
		this._data[face] = minko_render_AbstractTexture.resizeData(this._width,this._height,data,this._widthGPU,this._heightGPU,this._resizeSmoothly);
	}
	resize(width,height,resizeSmoothly) {
		var previousWidth = this.get_width();
		var previousHeight = this.get_height();
		var previousData = this._data[0];
		this._data[0] = minko_render_AbstractTexture.resizeData(previousWidth,previousHeight,previousData,width,height,resizeSmoothly);
		var previousData1 = this._data[1];
		this._data[1] = minko_render_AbstractTexture.resizeData(previousWidth,previousHeight,previousData1,width,height,resizeSmoothly);
		var previousData2 = this._data[2];
		this._data[2] = minko_render_AbstractTexture.resizeData(previousWidth,previousHeight,previousData2,width,height,resizeSmoothly);
		var previousData3 = this._data[3];
		this._data[3] = minko_render_AbstractTexture.resizeData(previousWidth,previousHeight,previousData3,width,height,resizeSmoothly);
		var previousData4 = this._data[4];
		this._data[4] = minko_render_AbstractTexture.resizeData(previousWidth,previousHeight,previousData4,width,height,resizeSmoothly);
		var previousData5 = this._data[5];
		this._data[5] = minko_render_AbstractTexture.resizeData(previousWidth,previousHeight,previousData5,width,height,resizeSmoothly);
		this._width = width << 2;
		this._widthGPU = width;
		this._height = height * 3;
		this._heightGPU = height;
	}
	uploadMipLevel(level,data,face) {
		var width = this._widthGPU >> level;
		var height = this._heightGPU >> level;
		this._context.uploadCubeTextureData(this._id,face,width,height,level,data);
	}
	upload() {
		if(this._id == -1) {
			this.set_id(this._context.createTexture(this._type,this._widthGPU,this._heightGPU,this._mipMapping,this._optimizeForRenderToTexture));
		}
		var numFacePixels = this._widthGPU * this._heightGPU;
		if(numFacePixels == 0) {
			return;
		}
		var faceData = this._data[0];
		var face = 0;
		this._context.uploadCubeTextureData(this._id,face,this._widthGPU,this._heightGPU,0,faceData);
		var faceData1 = this._data[1];
		var face1 = 1;
		this._context.uploadCubeTextureData(this._id,face1,this._widthGPU,this._heightGPU,0,faceData1);
		var faceData2 = this._data[2];
		var face2 = 2;
		this._context.uploadCubeTextureData(this._id,face2,this._widthGPU,this._heightGPU,0,faceData2);
		var faceData3 = this._data[3];
		var face3 = 3;
		this._context.uploadCubeTextureData(this._id,face3,this._widthGPU,this._heightGPU,0,faceData3);
		var faceData4 = this._data[4];
		var face4 = 4;
		this._context.uploadCubeTextureData(this._id,face4,this._widthGPU,this._heightGPU,0,faceData4);
		var faceData5 = this._data[5];
		var face5 = 5;
		this._context.uploadCubeTextureData(this._id,face5,this._widthGPU,this._heightGPU,0,faceData5);
	}
	dispose() {
		if(this._id != -1) {
			this._context.deleteTexture(this._id);
			this.set_id(-1);
		}
		this.disposeData();
	}
	disposeData() {
		var _g = 0;
		var _g1 = this._data;
		while(_g < _g1.length) {
			var face = _g1[_g];
			++_g;
		}
		this._data = null;
	}
	static create(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename) {
		if(filename == null) {
			filename = "";
		}
		if(format == null) {
			format = 1;
		}
		if(resizeSmoothly == null) {
			resizeSmoothly = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		return new minko_render_CubeTexture(context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
	}
}
$hx_exports["minko"]["render"]["CubeTexture"] = minko_render_CubeTexture;
minko_render_CubeTexture.__name__ = true;
minko_render_CubeTexture.__super__ = minko_render_AbstractTexture;
Object.assign(minko_render_CubeTexture.prototype, {
	__class__: minko_render_CubeTexture
});
class minko_render_UniformValue {
	constructor(location,size,count) {
		this.location = location;
		this.size = size;
		this.count = count;
	}
	get_dataArray() {
		return this.data.arrayBuffer();
	}
}
$hx_exports["minko"]["render"]["UniformValue"] = minko_render_UniformValue;
minko_render_UniformValue.__name__ = true;
Object.assign(minko_render_UniformValue.prototype, {
	__class__: minko_render_UniformValue
});
class minko_render_SamplerValue {
	constructor(position,texture,location) {
		this.position = position;
		this.location = location;
		this.texture = texture;
	}
	get_sampler() {
		return this.texture.get_value().get_sampler();
	}
}
$hx_exports["minko"]["render"]["SamplerValue"] = minko_render_SamplerValue;
minko_render_SamplerValue.__name__ = true;
Object.assign(minko_render_SamplerValue.prototype, {
	__class__: minko_render_SamplerValue
});
class minko_render_AttributeValue {
	constructor(location,resourceId,size,vertexSize,offset) {
		this.location = location;
		this.resourceId = resourceId;
		this.size = size;
		this.stride = vertexSize;
		this.offset = offset;
	}
}
$hx_exports["minko"]["render"]["AttributeValue"] = minko_render_AttributeValue;
minko_render_AttributeValue.__name__ = true;
Object.assign(minko_render_AttributeValue.prototype, {
	__class__: minko_render_AttributeValue
});
class minko_render_DrawCall extends minko_Enable_$uuid {
	constructor(batchId,pass,variables,rootData,rendererData,targetData) {
		minko_Has_$uuid._hx_skip_constructor = true;
		super();
		minko_Has_$uuid._hx_skip_constructor = false;
		this._hx_constructor(batchId,pass,variables,rootData,rendererData,targetData);
	}
	_hx_constructor(batchId,pass,variables,rootData,rendererData,targetData) {
		this._enabled = true;
		this._pass = pass;
		this._rootData = rootData;
		this._rendererData = rendererData;
		this._targetData = targetData;
		this._variables = variables;
		this._indexBuffer = null;
		this._firstIndex = null;
		this._numIndices = null;
		this._priority = new minko_data_UnsafePointer(minko_render_States.DEFAULT_PRIORITY);
		this._zSorted = new minko_data_UnsafePointer(false);
		this._blendingSourceFactor = new minko_data_UnsafePointer(2);
		this._blendingDestinationFactor = new minko_data_UnsafePointer(256);
		this._colorMask = new minko_data_UnsafePointer(true);
		this._depthMask = new minko_data_UnsafePointer(true);
		this._depthFunc = new minko_data_UnsafePointer(4);
		this._triangleCulling = new minko_data_UnsafePointer(2);
		this._stencilFunction = new minko_data_UnsafePointer(0);
		this._stencilReference = new minko_data_UnsafePointer(0);
		this._stencilMask = new minko_data_UnsafePointer(1);
		this._stencilFailOp = new minko_data_UnsafePointer(0);
		this._stencilZFailOp = new minko_data_UnsafePointer(0);
		this._stencilZPassOp = new minko_data_UnsafePointer(0);
		this._scissorTest = new minko_data_UnsafePointer(false);
		this._scissorBox = new minko_data_UnsafePointer(minko_render_States.DEFAULT_SCISSOR_BOX);
		this._target = new minko_data_UnsafePointer(minko_render_States.DEFAULT_TARGET);
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this._centerPosition = new minko_data_UnsafePointer(this1);
		this._modelToWorldMatrix = null;
		this._worldToScreenMatrix = null;
		this._modelToWorldMatrixPropertyRemovedSlot = null;
		this._worldToScreenMatrixPropertyRemovedSlot = null;
		this._vertexAttribArray = 0;
		this._batchIDs = [batchId];
		this._uniformFloat = [];
		this._uniformInt = [];
		this._uniformBool = [];
		this._samplers = [];
		this._attributes = [];
		this.bindPositionalMembers();
		super._hx_constructor();
		this.enable_uuid();
	}
	dispose() {
		this._pass = null;
		this._rootData = null;
		this._rendererData = null;
		this._targetData = null;
		this._variables = null;
		if(this._modelToWorldMatrixPropertyAddedSlot != null) {
			this._modelToWorldMatrixPropertyAddedSlot.dispose();
		}
		if(this._worldToScreenMatrixPropertyAddedSlot != null) {
			this._worldToScreenMatrixPropertyAddedSlot.dispose();
		}
		if(this._modelToWorldMatrixPropertyRemovedSlot != null) {
			this._modelToWorldMatrixPropertyRemovedSlot.dispose();
		}
		if(this._worldToScreenMatrixPropertyRemovedSlot != null) {
			this._worldToScreenMatrixPropertyRemovedSlot.dispose();
		}
		this._modelToWorldMatrixPropertyAddedSlot = null;
		this._worldToScreenMatrixPropertyAddedSlot = null;
		this._modelToWorldMatrixPropertyRemovedSlot = null;
		this._worldToScreenMatrixPropertyRemovedSlot = null;
	}
	get_enabled() {
		return this._enabled;
	}
	set_enabled(value) {
		this._enabled = value;
		return value;
	}
	get_batchIDs() {
		return this._batchIDs;
	}
	get_pass() {
		return this._pass;
	}
	get_program() {
		return this._program;
	}
	set_variables(v) {
		this._variables = v;
		return v;
	}
	get_variables() {
		return this._variables;
	}
	get_rootData() {
		return this._rootData;
	}
	get_rendererData() {
		return this._rendererData;
	}
	get_targetData() {
		return this._targetData;
	}
	get_boundBoolUniforms() {
		return this._uniformBool;
	}
	get_boundIntUniforms() {
		return this._uniformInt;
	}
	get_boundFloatUniforms() {
		return this._uniformFloat;
	}
	get_samplers() {
		return this._samplers;
	}
	get_priority() {
		return this._priority.get_value();
	}
	get_zSorted() {
		if(this._zSorted.get_value()) {
			return this._zSorted.get_value();
		} else {
			return false;
		}
	}
	get_blendingSource() {
		return this._blendingSourceFactor.get_value();
	}
	get_blendingDestination() {
		return this._blendingDestinationFactor.get_value();
	}
	get_colorMask() {
		return this._colorMask.get_value();
	}
	get_depthMask() {
		return this._depthMask.get_value();
	}
	get_depthFunction() {
		return this._depthFunc.get_value();
	}
	get_triangleCulling() {
		return this._triangleCulling.get_value();
	}
	get_stencilFunction() {
		return this._stencilFunction.get_value();
	}
	get_stencilReference() {
		return this._stencilReference.get_value();
	}
	get_stencilMask() {
		return this._stencilMask.get_value();
	}
	get_stencilFailOperation() {
		return this._stencilFailOp.get_value();
	}
	get_stencilZFailOperation() {
		return this._stencilZFailOp.get_value();
	}
	get_stencilZPassOperation() {
		return this._stencilZPassOp.get_value();
	}
	get_scissorTest() {
		return this._scissorTest.get_value();
	}
	get_scissorBox() {
		return this._scissorBox.get_value();
	}
	get_target() {
		return this._target.get_value();
	}
	get_numTriangles() {
		if(this._numIndices != null) {
			return Math.floor(this._numIndices.get_value() / 3);
		} else {
			return 0;
		}
	}
	bind(program) {
		this.reset();
		this._program = program;
	}
	render(context,renderTarget,viewport,clearColor) {
		if(!this.get_enabled()) {
			return;
		}
		context.setProgram(this._program.get_id());
		var hasOwnTarget = this._target != null && this._target.get_value() != null && this._target.get_value().get_id() != 0;
		var renderTargetId = hasOwnTarget ? this._target.get_value().get_id() : renderTarget != null ? renderTarget.get_id() : 0;
		var targetChanged = false;
		if(renderTargetId != 0) {
			if(renderTargetId != context.get_renderTarget()) {
				context.setRenderToTexture(renderTargetId,true);
				if(hasOwnTarget) {
					context.clear((clearColor >> 24 & 255) / 255.0,(clearColor >> 16 & 255) / 255.0,(clearColor >> 8 & 255) / 255.0,(clearColor & 255) / 255.0);
				}
				targetChanged = true;
			}
		} else {
			context.setRenderToBackBuffer();
		}
		if(targetChanged && !hasOwnTarget && viewport.z >= 0 && viewport.w >= 0) {
			context.configureViewport(Math.floor(viewport.x),Math.floor(viewport.y),Math.floor(viewport.z),Math.floor(viewport.w));
		}
		var _g = 0;
		var _g1 = this._uniformBool;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.size == 1) {
				context.setUniformInt(u.location,u.count,u.data.arrayBuffer());
			} else if(u.size == 2) {
				context.setUniformInt2(u.location,u.count,u.data.arrayBuffer());
			} else if(u.size == 3) {
				context.setUniformInt3(u.location,u.count,u.data.arrayBuffer());
			} else if(u.size == 4) {
				context.setUniformInt4(u.location,u.count,u.data.arrayBuffer());
			}
		}
		var _g2 = 0;
		var _g3 = this._uniformInt;
		while(_g2 < _g3.length) {
			var u1 = _g3[_g2];
			++_g2;
			if(u1.size == 1) {
				context.setUniformInt(u1.location,u1.count,u1.data.arrayBuffer());
			} else if(u1.size == 2) {
				context.setUniformInt2(u1.location,u1.count,u1.data.arrayBuffer());
			} else if(u1.size == 3) {
				context.setUniformInt3(u1.location,u1.count,u1.data.arrayBuffer());
			} else if(u1.size == 4) {
				context.setUniformInt4(u1.location,u1.count,u1.data.arrayBuffer());
			}
		}
		var _g4 = 0;
		var _g5 = this._uniformFloat;
		while(_g4 < _g5.length) {
			var u2 = _g5[_g4];
			++_g4;
			if(u2.size == 1) {
				context.setUniformFloat(u2.location,u2.count,u2.data.arrayBuffer());
			} else if(u2.size == 2) {
				context.setUniformFloat2(u2.location,u2.count,u2.data.arrayBuffer());
			} else if(u2.size == 3) {
				context.setUniformFloat3(u2.location,u2.count,u2.data.arrayBuffer());
			} else if(u2.size == 4) {
				context.setUniformFloat4(u2.location,u2.count,u2.data.arrayBuffer());
			} else if(u2.size == 16) {
				context.setUniformMatrix4x4(u2.location,u2.count,u2.data.arrayBuffer());
			}
		}
		var _g6 = 0;
		var _g7 = this._samplers;
		while(_g6 < _g7.length) {
			var s = _g7[_g6];
			++_g6;
			context.setTextureAt(s.position,s.get_sampler().id,s.location);
			context.setSamplerStateAt(s.position,s.wrapMode.get_value(),s.textureFilter.get_value(),s.mipFilter.get_value());
		}
		var _g8 = 0;
		var _g9 = this._attributes;
		while(_g8 < _g9.length) {
			var a = _g9[_g8];
			++_g8;
			context.setVertexBufferAt(a.location,a.resourceId,a.size,a.stride,a.offset);
		}
		context.setColorMask(this._colorMask.get_value());
		context.setBlendingModeSD(this._blendingSourceFactor.get_value(),this._blendingDestinationFactor.get_value());
		context.setDepthTest(this._depthMask.get_value(),this._depthFunc.get_value());
		context.setStencilTest(this._stencilFunction.get_value(),this._stencilReference.get_value(),this._stencilMask.get_value(),this._stencilFailOp.get_value(),this._stencilZFailOp.get_value(),this._stencilZPassOp.get_value());
		context.setScissorTest(this._scissorTest.get_value(),this._scissorBox.get_value());
		context.setTriangleCulling(this._triangleCulling.get_value());
		if(!this._pass.get_isForward()) {
			context.drawTriangles(0,2);
		} else {
			context.drawIndexBufferTriangles(this._indexBuffer.get_value(),this._firstIndex.get_value(),Math.floor(this._numIndices.get_value() / 3));
		}
	}
	bindAttribute(input,attributeBindings,defaultValues) {
		var binding = this.resolveBinding(input.name,attributeBindings);
		if(binding == null) {
			if(!defaultValues.hasProperty(input.name)) {
				var it = Lambda.has(this._program.get_setAttributeNames(),input.name);
				if(it == false) {
					haxe_Log.trace("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is not bound, has not been set and no default value was provided.",{ fileName : "minko/render/DrawCall.hx", lineNumber : 525, className : "minko.render.DrawCall", methodName : "bindAttribute"});
					throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
				}
				this.setAttributeValueFromStore(input,input.name,defaultValues);
			}
		} else {
			if(!binding.store.hasProperty(binding.propertyName)) {
				if(!defaultValues.hasProperty(input.name)) {
					haxe_Log.trace("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.",{ fileName : "minko/render/DrawCall.hx", lineNumber : 546, className : "minko.render.DrawCall", methodName : "bindAttribute"});
					throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
				}
				this.setAttributeValueFromStore(input,input.name,defaultValues);
			} else {
				this.setAttributeValueFromStore(input,binding.propertyName,binding.store);
			}
			binding = null;
		}
	}
	bindUniform(input,uniformBindings,defaultValues) {
		var binding = this.resolveBinding(input.name,uniformBindings);
		if(binding == null) {
			if(!defaultValues.hasProperty(input.name)) {
				var it = Lambda.has(this._program.get_setUniformNames(),input.name);
				if(it == false) {
					haxe_Log.trace("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is not bound, has not been set and no default value was provided.",{ fileName : "minko/render/DrawCall.hx", lineNumber : 569, className : "minko.render.DrawCall", methodName : "bindUniform"});
					throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
				}
			}
			this.setUniformValueFromStore(input,input.name,defaultValues);
		} else if(!binding.store.hasProperty(binding.propertyName)) {
			if(!defaultValues.hasProperty(input.name)) {
				haxe_Log.trace("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.",{ fileName : "minko/render/DrawCall.hx", lineNumber : 581, className : "minko.render.DrawCall", methodName : "bindUniform"});
				throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
			} else {
				this.setUniformValueFromStore(input,input.name,defaultValues);
			}
		} else {
			this.setUniformValueFromStore(input,binding.propertyName,binding.store);
		}
		return binding;
	}
	bindSamplerStates(input,uniformBindings,defaultValues) {
		var wrapModeBinding = this.bindSamplerState(input,uniformBindings,defaultValues,"wrapMode");
		var textureFilterBinding = this.bindSamplerState(input,uniformBindings,defaultValues,"textureFilter");
		var mipFilterBinding = this.bindSamplerState(input,uniformBindings,defaultValues,"mipFilter");
		var samplerStatesResolveBindings = [wrapModeBinding,textureFilterBinding,mipFilterBinding];
		return samplerStatesResolveBindings;
	}
	bindSamplerState(input,uniformBindings,defaultValues,samplerStateProperty) {
		if(samplerStateProperty == "wrapMode" || samplerStateProperty == "textureFilter" || samplerStateProperty == "mipFilter") {
			var samplerStateUniformName = minko_render_SamplerStates.uniformNameToSamplerStateName(input.name,samplerStateProperty);
			var binding = this.resolveBinding(samplerStateUniformName,uniformBindings);
			if(binding == null) {
				this.setSamplerStateValueFromStore(input,samplerStateUniformName,defaultValues,samplerStateProperty);
			} else if(!binding.store.hasProperty(binding.propertyName)) {
				this.setSamplerStateValueFromStore(input,samplerStateUniformName,defaultValues,samplerStateProperty);
			} else {
				this.setSamplerStateValueFromStore(input,binding.propertyName,binding.store,samplerStateProperty);
			}
			return binding;
		}
		return null;
	}
	bindStates(stateBindings,defaultValues) {
		var statesResolveBindings = [this.bindState("priority",stateBindings,defaultValues),this.bindState("zSorted",stateBindings,defaultValues),this.bindState("blendingSource",stateBindings,defaultValues),this.bindState("blendingDestination",stateBindings,defaultValues),this.bindState("colorMask",stateBindings,defaultValues),this.bindState("depthMask",stateBindings,defaultValues),this.bindState("depthFunction",stateBindings,defaultValues),this.bindState("triangleCulling",stateBindings,defaultValues),this.bindState("stencilFunction",stateBindings,defaultValues),this.bindState("stencilReference",stateBindings,defaultValues),this.bindState("stencilMask",stateBindings,defaultValues),this.bindState("stencilFailOperation",stateBindings,defaultValues),this.bindState("stencilZFailOperation",stateBindings,defaultValues),this.bindState("stencilZPassOperation",stateBindings,defaultValues),this.bindState("scissorTest",stateBindings,defaultValues),this.bindState("scissorBox",stateBindings,defaultValues),this.bindState("target",stateBindings,defaultValues)];
		return statesResolveBindings;
	}
	bindState(stateName,bindings,defaultValues) {
		var binding = this.resolveBinding(stateName,bindings);
		if(binding == null) {
			this.setStateValueFromStore(stateName,defaultValues);
		} else if(!binding.store.hasProperty(binding.propertyName)) {
			this.setStateValueFromStore(stateName,defaultValues);
		} else {
			this.setStateValueFromStore(stateName,binding.store);
		}
		return binding;
	}
	bindPositionalMembers() {
		if(this._targetData.hasProperty("centerPosition")) {
			this._centerPosition = this._targetData.getUnsafePointer("centerPosition");
		}
		if(this._targetData.hasProperty("modelToWorldMatrix")) {
			this._modelToWorldMatrix = this._targetData.getUnsafePointer("modelToWorldMatrix");
		}
		if(this._rendererData.hasProperty("worldToScreenMatrix")) {
			this._worldToScreenMatrix = this._rendererData.getUnsafePointer("worldToScreenMatrix");
		}
	}
	bindIndexBuffer() {
		var indexBufferProperty = minko_data_Store.getActualPropertyName(this._variables,"geometry[@{geometryUuid}].indices");
		if(this._targetData.hasProperty(indexBufferProperty)) {
			this._indexBuffer = this._targetData.getUnsafePointer(indexBufferProperty);
		} else {
			throw new js__$Boot_HaxeError("no  _indexBuffer ");
		}
		var surfaceFirstIndexProperty = minko_data_Store.getActualPropertyName(this._variables,"surface[@{surfaceUuid}].firstIndex");
		if(!this._targetData.hasProperty(surfaceFirstIndexProperty)) {
			var geometryFirstIndexProperty = minko_data_Store.getActualPropertyName(this._variables,"geometry[@{geometryUuid}].firstIndex");
			if(this._targetData.hasProperty(geometryFirstIndexProperty)) {
				this._firstIndex = this._targetData.getUnsafePointer(geometryFirstIndexProperty);
			}
		} else {
			this._firstIndex = this._targetData.getUnsafePointer(surfaceFirstIndexProperty);
		}
		var surfaceNumIndicesProperty = minko_data_Store.getActualPropertyName(this._variables,"surface[@{surfaceUuid}].numIndices");
		if(!this._targetData.hasProperty(surfaceNumIndicesProperty)) {
			var geometryNumIndicesProperty = minko_data_Store.getActualPropertyName(this._variables,"geometry[@{geometryUuid}].numIndices");
			if(this._targetData.hasProperty(geometryNumIndicesProperty)) {
				this._numIndices = this._targetData.getUnsafePointer(geometryNumIndicesProperty);
			}
		} else {
			this._numIndices = this._targetData.getUnsafePointer(surfaceNumIndicesProperty);
		}
	}
	getEyeSpacePosition() {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		var modelView = dest;
		if(this._modelToWorldMatrix != null) {
			modelView = this._modelToWorldMatrix.get_value();
		}
		if(this._worldToScreenMatrix != null) {
			var a = this._worldToScreenMatrix.get_value();
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest1 = this2;
			var _a;
			var _b;
			if(dest1 == a) {
				var this3 = new glm_Mat4Base();
				this3._00 = 0;
				this3._01 = 0;
				this3._02 = 0;
				this3._03 = 0;
				this3._10 = 0;
				this3._11 = 0;
				this3._12 = 0;
				this3._13 = 0;
				this3._20 = 0;
				this3._21 = 0;
				this3._22 = 0;
				this3._23 = 0;
				this3._30 = 0;
				this3._31 = 0;
				this3._32 = 0;
				this3._33 = 0;
				var dest2 = this3;
				dest2._00 = a._00;
				dest2._10 = a._10;
				dest2._20 = a._20;
				dest2._30 = a._30;
				dest2._01 = a._01;
				dest2._11 = a._11;
				dest2._21 = a._21;
				dest2._31 = a._31;
				dest2._02 = a._02;
				dest2._12 = a._12;
				dest2._22 = a._22;
				dest2._32 = a._32;
				dest2._03 = a._03;
				dest2._13 = a._13;
				dest2._23 = a._23;
				dest2._33 = a._33;
				_a = dest2;
				_b = modelView;
			} else if(dest1 == modelView) {
				_a = a;
				var this4 = new glm_Mat4Base();
				this4._00 = 0;
				this4._01 = 0;
				this4._02 = 0;
				this4._03 = 0;
				this4._10 = 0;
				this4._11 = 0;
				this4._12 = 0;
				this4._13 = 0;
				this4._20 = 0;
				this4._21 = 0;
				this4._22 = 0;
				this4._23 = 0;
				this4._30 = 0;
				this4._31 = 0;
				this4._32 = 0;
				this4._33 = 0;
				var dest3 = this4;
				dest3._00 = modelView._00;
				dest3._10 = modelView._10;
				dest3._20 = modelView._20;
				dest3._30 = modelView._30;
				dest3._01 = modelView._01;
				dest3._11 = modelView._11;
				dest3._21 = modelView._21;
				dest3._31 = modelView._31;
				dest3._02 = modelView._02;
				dest3._12 = modelView._12;
				dest3._22 = modelView._22;
				dest3._32 = modelView._32;
				dest3._03 = modelView._03;
				dest3._13 = modelView._13;
				dest3._23 = modelView._23;
				dest3._33 = modelView._33;
				_b = dest3;
			} else {
				_a = a;
				_b = modelView;
			}
			dest1._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest1._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest1._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest1._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest1._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest1._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest1._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest1._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest1._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest1._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest1._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest1._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest1._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest1._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest1._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest1._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			modelView = dest1;
		}
		var x = this._centerPosition.get_value().x;
		var y = this._centerPosition.get_value().y;
		var z = this._centerPosition.get_value().z;
		var this5 = new glm_Vec4Base();
		this5.x = x;
		this5.y = y;
		this5.z = z;
		this5.w = 1;
		var v = this5;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var dest4 = this6;
		var x1 = v.x;
		var y1 = v.y;
		var z1 = v.z;
		var w = v.w;
		dest4.x = modelView._00 * x1 + modelView._10 * y1 + modelView._20 * z1 + modelView._30 * w;
		dest4.y = modelView._01 * x1 + modelView._11 * y1 + modelView._21 * z1 + modelView._31 * w;
		dest4.z = modelView._02 * x1 + modelView._12 * y1 + modelView._22 * z1 + modelView._32 * w;
		dest4.w = modelView._03 * x1 + modelView._13 * y1 + modelView._23 * z1 + modelView._33 * w;
		var tmp = dest4;
		var x2 = tmp.x;
		var y2 = tmp.y;
		var z2 = tmp.z;
		var this7 = new glm_Vec3Base();
		this7.x = x2;
		this7.y = y2;
		this7.z = z2;
		return this7;
	}
	initializeOnContext(context) {
	}
	reset() {
		this._program = null;
		this._indexBuffer = null;
		this._firstIndex = null;
		this._numIndices = null;
		this._uniformFloat = [];
		this._uniformInt = [];
		this._uniformBool = [];
		this._samplers = [];
		this._attributes = [];
		this._vertexAttribArray = 0;
	}
	getStore(source) {
		switch(source) {
		case 0:
			return this._targetData;
		case 1:
			return this._rendererData;
		case 2:
			return this._rootData;
		}
	}
	resolveBinding(inputName,bindings) {
		var isCollection = false;
		var bindingName = inputName;
		var isArray = inputName.charAt(inputName.length - 1) == "]";
		var pos = bindingName.indexOf("[");
		if(!isArray && pos != -1) {
			bindingName = HxOverrides.substr(bindingName,0,pos);
			isCollection = true;
		}
		var binding = null;
		var bindingPropertyName = "";
		var tmp;
		if(!(__map_reserved[bindingName] != null ? bindings.existsReserved(bindingName) : bindings.h.hasOwnProperty(bindingName))) {
			if(!isArray) {
				var key = bindingName + "[0]";
				tmp = __map_reserved[key] != null ? bindings.existsReserved(key) : bindings.h.hasOwnProperty(key);
			} else {
				tmp = false;
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			binding = __map_reserved[bindingName] != null ? bindings.getReserved(bindingName) : bindings.h[bindingName];
			bindingPropertyName = binding.propertyName;
		}
		if(binding == null) {
			return null;
		}
		var store = this.getStore(binding.source);
		var propertyName = minko_data_Store.getActualPropertyName(this._variables,bindingPropertyName);
		if(isCollection && !isArray) {
			propertyName += HxOverrides.substr(inputName,pos,null);
		}
		return new minko_data_ResolvedBinding(binding,propertyName,store);
	}
	setUniformValueFromStore(input,propertyName,store) {
		var isArray = input.name.charAt(input.name.length - 1) == "]";
		var data = store.getUnsafePointer(propertyName);
		if(isArray == false) {
			switch(input.type) {
			case 1:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,1,input.size,minko_data_UnsafePointerArrayBuffer.vecInts1,data);
				break;
			case 2:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,2,input.size,minko_data_UnsafePointerArrayBuffer.vecInts2,data);
				break;
			case 3:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,3,input.size,minko_data_UnsafePointerArrayBuffer.vecInts3,data);
				break;
			case 4:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,4,input.size,minko_data_UnsafePointerArrayBuffer.vecInts4,data);
				break;
			case 5:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,1,input.size,minko_data_UnsafePointerArrayBuffer.vecInts1,data);
				break;
			case 6:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,2,input.size,minko_data_UnsafePointerArrayBuffer.vecInts2,data);
				break;
			case 7:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,3,input.size,minko_data_UnsafePointerArrayBuffer.vecInts3,data);
				break;
			case 8:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,4,input.size,minko_data_UnsafePointerArrayBuffer.vecInts4,data);
				break;
			case 9:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,1,input.size,minko_data_UnsafePointerArrayBuffer.vecFloats1,data);
				break;
			case 10:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,2,input.size,minko_data_UnsafePointerArrayBuffer.vecFloats2,data);
				break;
			case 11:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,3,input.size,minko_data_UnsafePointerArrayBuffer.vecFloats3,data);
				break;
			case 12:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,4,input.size,minko_data_UnsafePointerArrayBuffer.vecFloats4,data);
				break;
			case 0:case 13:
				haxe_Log.trace("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type),{ fileName : "minko/render/DrawCall.hx", lineNumber : 910, className : "minko.render.DrawCall", methodName : "setUniformValueFromStore"});
				throw new js__$Boot_HaxeError("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
			case 14:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,16,input.size,minko_data_UnsafePointerArrayBuffer.matFloats,data);
				break;
			case 15:case 16:
				var samplerIt = Lambda.find(this._samplers,function(samplerValue) {
					return samplerValue.location == input.location;
				});
				var texture = store.getUnsafePointer(propertyName);
				if(samplerIt == null) {
					this._samplers.push(new minko_render_SamplerValue(this._program.get_setTextureNames().length + this._samplers.length,texture,input.location));
				} else {
					samplerIt.texture = texture;
				}
				break;
			}
		} else {
			switch(input.type) {
			case 1:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,1,input.size,minko_data_UnsafePointerArrayBuffer.vecsInts1,data);
				break;
			case 2:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,2,input.size,minko_data_UnsafePointerArrayBuffer.vecsInts2,data);
				break;
			case 3:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,3,input.size,minko_data_UnsafePointerArrayBuffer.vecsInts3,data);
				break;
			case 4:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,4,input.size,minko_data_UnsafePointerArrayBuffer.vecsInts4,data);
				break;
			case 5:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,1,input.size,minko_data_UnsafePointerArrayBuffer.vecsInts1,data);
				break;
			case 6:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,2,input.size,minko_data_UnsafePointerArrayBuffer.vecsInts2,data);
				break;
			case 7:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,3,input.size,minko_data_UnsafePointerArrayBuffer.vecsInts3,data);
				break;
			case 8:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,4,input.size,minko_data_UnsafePointerArrayBuffer.vecsInts4,data);
				break;
			case 9:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,1,input.size,minko_data_UnsafePointerArrayBuffer.vecsFloats1,data);
				break;
			case 10:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,2,input.size,minko_data_UnsafePointerArrayBuffer.vecsFloats2,data);
				break;
			case 11:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,3,input.size,minko_data_UnsafePointerArrayBuffer.vecsFloats3,data);
				break;
			case 12:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,4,input.size,minko_data_UnsafePointerArrayBuffer.vecsFloats4,data);
				break;
			case 0:case 13:
				haxe_Log.trace("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type),{ fileName : "minko/render/DrawCall.hx", lineNumber : 962, className : "minko.render.DrawCall", methodName : "setUniformValueFromStore"});
				throw new js__$Boot_HaxeError("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
			case 14:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,16,input.size,minko_data_UnsafePointerArrayBuffer.matsFloats,data);
				break;
			case 15:case 16:
				haxe_Log.trace("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type),{ fileName : "minko/render/DrawCall.hx", lineNumber : 958, className : "minko.render.DrawCall", methodName : "setUniformValueFromStore"});
				throw new js__$Boot_HaxeError("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
			}
		}
	}
	setSamplerStateValueFromStore(input,propertyName,store,samplerStateProperty) {
		var it = Lambda.find(this._samplers,function(sampler) {
			return sampler.location == input.location;
		});
		if(it != null) {
			var sampler1 = it;
			if(samplerStateProperty == "wrapMode") {
				if(store.hasProperty(propertyName)) {
					sampler1.wrapMode = store.getUnsafePointer(propertyName);
				} else {
					sampler1.wrapMode = new minko_data_UnsafePointer(0);
				}
			} else if(samplerStateProperty == "textureFilter") {
				if(store.hasProperty(propertyName)) {
					sampler1.textureFilter = store.getUnsafePointer(propertyName);
				} else {
					sampler1.textureFilter = new minko_data_UnsafePointer(0);
				}
			} else if(samplerStateProperty == "mipFilter") {
				if(store.hasProperty(propertyName)) {
					sampler1.mipFilter = store.getUnsafePointer(propertyName);
				} else {
					sampler1.mipFilter = new minko_data_UnsafePointer(0);
				}
			}
		}
	}
	setStateValueFromStore(stateName,store) {
		if(stateName == "priority") {
			if(store.hasProperty(stateName)) {
				this._priority = store.getUnsafePointer(stateName);
			} else {
				this._priority = new minko_data_UnsafePointer(minko_render_States.DEFAULT_PRIORITY);
			}
		} else if(stateName == "zSorted") {
			if(store.hasProperty(stateName)) {
				this._zSorted = store.getUnsafePointer(stateName);
			} else {
				this._zSorted = new minko_data_UnsafePointer(false);
			}
		} else if(stateName == "blendingSource") {
			if(store.hasProperty(stateName)) {
				this._blendingSourceFactor = store.getUnsafePointer(stateName);
			} else {
				this._blendingSourceFactor = new minko_data_UnsafePointer(2);
			}
		} else if(stateName == "blendingDestination") {
			if(store.hasProperty(stateName)) {
				this._blendingDestinationFactor = store.getUnsafePointer(stateName);
			} else {
				this._blendingDestinationFactor = new minko_data_UnsafePointer(256);
			}
		} else if(stateName == "colorMask") {
			if(store.hasProperty(stateName)) {
				this._colorMask = store.getUnsafePointer(stateName);
			} else {
				this._colorMask = new minko_data_UnsafePointer(true);
			}
		} else if(stateName == "depthMask") {
			if(store.hasProperty(stateName)) {
				this._depthMask = store.getUnsafePointer(stateName);
			} else {
				this._depthMask = new minko_data_UnsafePointer(true);
			}
		} else if(stateName == "depthFunction") {
			if(store.hasProperty(stateName)) {
				this._depthFunc = store.getUnsafePointer(stateName);
			} else {
				this._depthFunc = new minko_data_UnsafePointer(4);
			}
		} else if(stateName == "triangleCulling") {
			if(store.hasProperty(stateName)) {
				this._triangleCulling = store.getUnsafePointer(stateName);
			} else {
				this._triangleCulling = new minko_data_UnsafePointer(2);
			}
		} else if(stateName == "stencilFunction") {
			if(store.hasProperty(stateName)) {
				this._stencilFunction = store.getUnsafePointer(stateName);
			} else {
				this._stencilFunction = new minko_data_UnsafePointer(0);
			}
		} else if(stateName == "stencilReference") {
			if(store.hasProperty(stateName)) {
				this._stencilReference = store.getUnsafePointer(stateName);
			} else {
				this._stencilReference = new minko_data_UnsafePointer(0);
			}
		} else if(stateName == "stencilMask") {
			if(store.hasProperty(stateName)) {
				this._stencilMask = store.getUnsafePointer(stateName);
			} else {
				this._stencilMask = new minko_data_UnsafePointer(1);
			}
		} else if(stateName == "stencilFailOperation") {
			if(store.hasProperty(stateName)) {
				this._stencilFailOp = store.getUnsafePointer(stateName);
			} else {
				this._stencilFailOp = new minko_data_UnsafePointer(0);
			}
		} else if(stateName == "stencilZFailOperation") {
			if(store.hasProperty(stateName)) {
				this._stencilZFailOp = store.getUnsafePointer(stateName);
			} else {
				this._stencilZFailOp = new minko_data_UnsafePointer(0);
			}
		} else if(stateName == "stencilZPassOperation") {
			if(store.hasProperty(stateName)) {
				this._stencilZPassOp = store.getUnsafePointer(stateName);
			} else {
				this._stencilZPassOp = new minko_data_UnsafePointer(0);
			}
		} else if(stateName == "scissorTest") {
			if(store.hasProperty(stateName)) {
				this._scissorTest = store.getUnsafePointer(stateName);
			} else {
				this._scissorTest = new minko_data_UnsafePointer(false);
			}
		} else if(stateName == "scissorBox") {
			if(store.hasProperty(stateName)) {
				this._scissorBox = store.getUnsafePointer(stateName);
			} else {
				this._scissorBox = new minko_data_UnsafePointer(minko_render_States.DEFAULT_SCISSOR_BOX);
			}
		} else if(stateName == "target") {
			if(store.hasProperty(stateName)) {
				this._target = store.getUnsafePointer(stateName);
			} else {
				this._target = new minko_data_UnsafePointer(minko_render_States.DEFAULT_TARGET);
			}
		}
	}
	setAttributeValueFromStore(input,propertyName,store) {
		var attr = store.get(propertyName);
		this._attributes.push(new minko_render_AttributeValue(input.location,attr.resourceId,attr.size,attr.vertexSize,attr.offset));
	}
	static setUniformValue(uniforms,location,size,count,dataArray,data) {
		var it = Lambda.find(uniforms,function(u) {
			return u.location == location;
		});
		if(it == null) {
			it = new minko_render_UniformValue(location,size,count);
			uniforms.push(it);
		}
		it.data = data;
		minko_render_DrawCall.setUnsafePointerArrayBuffer(dataArray,data);
	}
	static setUnsafePointerArrayBuffer(dataArray,data) {
		if(data.buffer == null) {
			var buffer = new minko_data_UnsafePointerArrayBuffer();
			buffer.applyFunc = dataArray;
			buffer.applyDone(data.get_value());
			data.buffer = buffer;
		}
	}
}
$hx_exports["minko"]["render"]["DrawCall"] = minko_render_DrawCall;
minko_render_DrawCall.__name__ = true;
minko_render_DrawCall.__super__ = minko_Enable_$uuid;
Object.assign(minko_render_DrawCall.prototype, {
	__class__: minko_render_DrawCall
});
class minko_render_DrawCallPool {
	constructor() {
		this._zSortUsefulPropertyNames = [];
		this._sortUsefulPropertyNames = [];
		this._zSortUsefulPropertyNames = ["modelToWorldMatrix","material[@{materialUuid}].priority","material[@{materialUuid}].zSorted","geometry[@{geometryUuid}].position"];
		this._sortUsefulPropertyNames = ["material[@{materialUuid}].priority","material[@{materialUuid}].zSorted","material[@{materialUuid}].target"];
		this._batchId = 0;
		this._drawCalls = new haxe_ds_StringMap();
		this._drawCallsKeys = [];
		this._invalidDrawCalls = new haxe_ds_ObjectMap();
		this._drawCallToPropRebindFuncs = new haxe_ds_ObjectMap();
		this._drawCallsToBeSorted = [];
		this._propChangedSlot = new haxe_ds_ObjectMap();
		this._sortUsefulPropertyChangedSlot = new haxe_ds_ObjectMap();
		this._zSortUsefulPropertyChangedSlot = new haxe_ds_ObjectMap();
		this._mustZSort = false;
	}
	dispose() {
		if(this._propChangedSlot != null) {
			this._propChangedSlot = null;
		}
		if(this._drawCallToPropRebindFuncs != null) {
			this._drawCallToPropRebindFuncs = null;
		}
	}
	get_drawCallsKeys() {
		return this._drawCallsKeys;
	}
	get_drawCalls() {
		return this._drawCalls;
	}
	addDrawCalls(effect,techniqueName,variables,rootData,rendererData,targetData) {
		var technique = effect.technique(techniqueName);
		this._batchId++;
		var _g = 0;
		while(_g < technique.length) {
			var pass = technique[_g];
			++_g;
			var drawCall = [new minko_render_DrawCall(this._batchId,pass,variables,rootData,rendererData,targetData)];
			this.initializeDrawCall(drawCall[0]);
			if(!pass.get_isForward()) {
				var seekedDrawCall = this.findDrawCall((function(drawCall1) {
					return function(d) {
						return d.get_program() == drawCall1[0].get_program();
					};
				})(drawCall));
				if(seekedDrawCall != null) {
					seekedDrawCall.get_batchIDs().push(this._batchId);
					drawCall[0] = null;
					continue;
				}
			}
			this.addDrawCallToSortedBucket(drawCall[0]);
		}
		technique = null;
		return this._batchId;
	}
	_removeDrawCalls(drawCalls,batchId) {
		var _gthis = this;
		return drawCalls.filter(function(drawCall) {
			var batchIDs = drawCall.get_batchIDs();
			var it = Lambda.has(batchIDs,batchId);
			if(it != false) {
				HxOverrides.remove(batchIDs,batchId);
				if(batchIDs.length != 0) {
					return true;
				}
				var tmp = drawCall.get_pass().get_macroBindings();
				var tmp1 = drawCall.get_rootData();
				var tmp2 = drawCall.get_rendererData();
				var tmp3 = drawCall.get_targetData();
				_gthis.unwatchProgramSignature(drawCall,tmp,tmp1,tmp2,tmp3);
				_gthis.unbindDrawCall(drawCall);
				_gthis._invalidDrawCalls.remove(drawCall);
				HxOverrides.remove(_gthis._drawCallsToBeSorted,drawCall);
				drawCall.dispose();
				drawCall = null;
				return false;
			}
			return true;
		});
	}
	removeDrawCalls(batchId) {
		var _this = this._drawCalls;
		var priorityAndTargetIdToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(priorityAndTargetIdToDrawCalls.hasNext()) {
			var priorityAndTargetIdToDrawCalls1 = priorityAndTargetIdToDrawCalls.next();
			var batchId1 = [batchId];
			priorityAndTargetIdToDrawCalls1.first = priorityAndTargetIdToDrawCalls1.first.filter((function(_gthis,batchId2) {
				return function(drawCall) {
					var batchIDs = drawCall.get_batchIDs();
					var it = Lambda.has(batchIDs,batchId2[0]);
					if(it != false) {
						HxOverrides.remove(batchIDs,batchId2[0]);
						if(batchIDs.length != 0) {
							return true;
						}
						var tmp = drawCall.get_pass().get_macroBindings();
						var tmp1 = drawCall.get_rootData();
						var tmp2 = drawCall.get_rendererData();
						var tmp3 = drawCall.get_targetData();
						_gthis[0].unwatchProgramSignature(drawCall,tmp,tmp1,tmp2,tmp3);
						_gthis[0].unbindDrawCall(drawCall);
						_gthis[0]._invalidDrawCalls.remove(drawCall);
						HxOverrides.remove(_gthis[0]._drawCallsToBeSorted,drawCall);
						drawCall.dispose();
						drawCall = null;
						return false;
					}
					return true;
				};
			})([this],batchId1));
			var batchId3 = [batchId];
			priorityAndTargetIdToDrawCalls1.second = priorityAndTargetIdToDrawCalls1.second.filter((function(_gthis1,batchId4) {
				return function(drawCall1) {
					var batchIDs1 = drawCall1.get_batchIDs();
					var it1 = Lambda.has(batchIDs1,batchId4[0]);
					if(it1 != false) {
						HxOverrides.remove(batchIDs1,batchId4[0]);
						if(batchIDs1.length != 0) {
							return true;
						}
						var tmp4 = drawCall1.get_pass().get_macroBindings();
						var tmp5 = drawCall1.get_rootData();
						var tmp6 = drawCall1.get_rendererData();
						var tmp7 = drawCall1.get_targetData();
						_gthis1[0].unwatchProgramSignature(drawCall1,tmp4,tmp5,tmp6,tmp7);
						_gthis1[0].unbindDrawCall(drawCall1);
						_gthis1[0]._invalidDrawCalls.remove(drawCall1);
						HxOverrides.remove(_gthis1[0]._drawCallsToBeSorted,drawCall1);
						drawCall1.dispose();
						drawCall1 = null;
						return false;
					}
					return true;
				};
			})([this],batchId3));
		}
	}
	invalidateDrawCalls(batchId,variables) {
		var _gthis = this;
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				var batchIDs = drawCall.get_batchIDs();
				var it = Lambda.has(batchIDs,batchId);
				if(it != false) {
					_gthis._invalidDrawCalls.set(drawCall,new minko_Tuple(true,variables));
				}
			}
			var drawCalls1 = sortPropertiesToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls1.length) {
				var drawCall1 = drawCalls1[_g1];
				++_g1;
				var batchIDs1 = drawCall1.get_batchIDs();
				var it1 = Lambda.has(batchIDs1,batchId);
				if(it1 != false) {
					_gthis._invalidDrawCalls.set(drawCall1,new minko_Tuple(true,variables));
				}
			}
		}
	}
	update(forceSort,mustZSort) {
		if(mustZSort == null) {
			mustZSort = false;
		}
		if(forceSort == null) {
			forceSort = false;
		}
		var invalidDrawCall = this._invalidDrawCalls.keys();
		while(invalidDrawCall.hasNext()) {
			var invalidDrawCall1 = invalidDrawCall.next();
			var drawCallPtr = invalidDrawCall1;
			this.initializeDrawCall(drawCallPtr,true);
		}
		this._invalidDrawCalls = new haxe_ds_ObjectMap();
		var drawCallPtrAndFuncList = this._drawCallToPropRebindFuncs.iterator();
		while(drawCallPtrAndFuncList.hasNext()) {
			var drawCallPtrAndFuncList1 = drawCallPtrAndFuncList.next();
			var _g = 0;
			while(_g < drawCallPtrAndFuncList1.length) {
				var func = drawCallPtrAndFuncList1[_g];
				++_g;
				func();
			}
		}
		this._drawCallToPropRebindFuncs = new haxe_ds_ObjectMap();
		var _g1 = 0;
		var _g11 = this._drawCallsToBeSorted;
		while(_g1 < _g11.length) {
			var drawCall = _g11[_g1];
			++_g1;
			this.removeDrawCallFromSortedBucket(drawCall);
			this.addDrawCallToSortedBucket(drawCall);
		}
		this._drawCallsToBeSorted = [];
		var finalMustZSort = forceSort || this._mustZSort || mustZSort;
		if(finalMustZSort) {
			this._mustZSort = false;
			this.zSortDrawCalls();
		}
	}
	clear() {
		this._drawCalls = new haxe_ds_StringMap();
		this._drawCallsKeys = [];
		this._invalidDrawCalls = new haxe_ds_ObjectMap();
		this._propChangedSlot = new haxe_ds_ObjectMap();
		this._drawCallToPropRebindFuncs = new haxe_ds_ObjectMap();
		this._sortUsefulPropertyChangedSlot = new haxe_ds_ObjectMap();
		this._zSortUsefulPropertyChangedSlot = new haxe_ds_ObjectMap();
	}
	get_numDrawCalls() {
		var numDrawCalls = 0;
		var _this = this._drawCalls;
		var drawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(drawCalls.hasNext()) {
			var drawCalls1 = drawCalls.next();
			numDrawCalls += drawCalls1.first.length;
			numDrawCalls += drawCalls1.second.length;
		}
		return numDrawCalls;
	}
	watchProgramSignature(drawCall,macroBindings,rootData,rendererData,targetData) {
	}
	unwatchProgramSignature(drawCall,macroBindings,rootData,rendererData,targetData) {
		var drawCallPropChangedSlot = this._propChangedSlot.h[drawCall.__id__];
		var _g = 0;
		var _g1 = drawCallPropChangedSlot.macroBinding;
		while(_g < _g1.length) {
			var macroNameAndBinding = _g1[_g];
			++_g;
			this.removeMacroCallback(drawCall,macroNameAndBinding.first);
		}
		drawCallPropChangedSlot.macroBinding = [];
	}
	macroPropertyAddedHandler(drawCall,macroBinding,propertyName,store) {
		var _gthis = this;
		this.removeMacroCallback(drawCall,propertyName);
		var tmp = store.getPropertyRemoved(propertyName);
		this.addMacroCallback(drawCall,propertyName,tmp,function(s,UnnamedParameter1,p) {
			_gthis.macroPropertyRemovedHandler(drawCall,macroBinding,propertyName,s);
		});
		this.macroPropertyChangedHandler(drawCall,macroBinding);
	}
	macroPropertyRemovedHandler(drawCall,macroBinding,propertyName,store) {
		var _gthis = this;
		if(store.hasProperty(propertyName)) {
			return;
		}
		this.removeMacroCallback(drawCall,propertyName);
		var tmp = store.getPropertyAdded(propertyName);
		this.addMacroCallback(drawCall,propertyName,tmp,function(s,UnnamedParameter1,p) {
			_gthis.macroPropertyAddedHandler(drawCall,macroBinding,propertyName,s);
		});
		this.macroPropertyChangedHandler(drawCall,macroBinding);
	}
	macroPropertyChangedHandler(drawCall,macroBinding) {
		this._invalidDrawCalls.set(drawCall,new minko_Tuple(false,[]));
	}
	initializeDrawCall(drawCall,forceRebind) {
		if(forceRebind == null) {
			forceRebind = false;
		}
		var invalidDrawCallIt = this._invalidDrawCalls.h[drawCall.__id__];
		var variablesChanged = false;
		if(invalidDrawCallIt != null) {
			variablesChanged = invalidDrawCallIt.first;
		}
		var newVariables = [];
		if(variablesChanged) {
			newVariables = invalidDrawCallIt.second;
		}
		var variables = variablesChanged ? newVariables : drawCall.get_variables();
		var pass = drawCall.get_pass();
		var programAndSignature = pass.selectProgram(variables,drawCall.get_targetData(),drawCall.get_rendererData(),drawCall.get_rootData());
		var program = programAndSignature.first;
		if(variablesChanged) {
			drawCall.set_variables(variables);
		}
		if(program == drawCall.get_program()) {
			return;
		}
		if(this._propChangedSlot.h.__keys__[drawCall.__id__] != null) {
			this.unwatchProgramSignature(drawCall,drawCall.get_pass().get_macroBindings(),drawCall.get_rootData(),drawCall.get_rendererData(),drawCall.get_targetData());
			this.unbindDrawCall(drawCall);
		}
		if(this._propChangedSlot.h.__keys__[drawCall.__id__] == null) {
			this._propChangedSlot.set(drawCall,{ uniformBinding : [], samplerStatesBinding : [], stateBinding : [], macroBinding : []});
		}
		this.bindDrawCall(drawCall,pass,program,forceRebind);
		if(programAndSignature.second != null) {
			this.watchProgramSignature(drawCall,drawCall.get_pass().get_macroBindings(),drawCall.get_rootData(),drawCall.get_rendererData(),drawCall.get_targetData());
		}
	}
	addMacroCallback(drawCall,propertyName,signal,callback) {
		if(!this.hasMacroCallback(drawCall,propertyName)) {
			var drawCallPropChangedSlot = this._propChangedSlot.h[drawCall.__id__];
			var changedSlot = signal.connect(callback);
			this.addPropChangedSlot(drawCallPropChangedSlot.macroBinding,new minko_Tuple(propertyName,changedSlot));
		} else {
			haxe_Log.trace("addMacroCallback null",{ fileName : "minko/render/DrawCallPool.hx", lineNumber : 376, className : "minko.render.DrawCallPool", methodName : "addMacroCallback"});
		}
	}
	removeMacroCallback(drawCall,propertyName) {
		if(this.hasMacroCallback(drawCall,propertyName)) {
			var drawCallPropChangedSlot = this._propChangedSlot.h[drawCall.__id__];
			drawCallPropChangedSlot.macroBinding = this.removePropChangedSlot(drawCallPropChangedSlot.macroBinding,propertyName);
		} else {
			haxe_Log.trace("removeMacroCallback null",{ fileName : "minko/render/DrawCallPool.hx", lineNumber : 387, className : "minko.render.DrawCallPool", methodName : "removeMacroCallback"});
		}
	}
	hasMacroCallback(drawCall,propertyName) {
		var drawCallPropChangedSlot = this._propChangedSlot.h[drawCall.__id__];
		if(this._propChangedSlot.h.__keys__[drawCall.__id__] == null) {
			return false;
		}
		return Lambda.exists(drawCallPropChangedSlot.macroBinding,function(m) {
			return m.first == propertyName;
		});
	}
	removePropChangedSlot(bindings,propertyName) {
		var dc = Lambda.find(bindings,function(b) {
			return b.first == propertyName;
		});
		dc.second.dispose();
		dc.second = null;
		var tmp = bindings.filter(function(b1) {
			return b1.first != propertyName;
		});
		return tmp;
	}
	addPropChangedSlot(bindings,dc) {
		bindings.push(dc);
	}
	uniformBindingPropertyAddedHandler(drawCall,input,uniformBindingMap,forceRebind) {
		if(forceRebind == null) {
			forceRebind = false;
		}
		if(!forceRebind && this._invalidDrawCalls.h.__keys__[drawCall.__id__] != null) {
			return;
		}
		var resolvedBinding = drawCall.bindUniform(input,uniformBindingMap.bindings,uniformBindingMap.defaultValues);
		resolvedBinding = null;
		if(input.type == 15 || input.type == 16) {
			this.samplerStatesBindingPropertyAddedHandler(drawCall,input,uniformBindingMap);
		}
	}
	samplerStatesBindingPropertyAddedHandler(drawCall,input,uniformBindingMap) {
		var resolvedBindings = drawCall.bindSamplerStates(input,uniformBindingMap.bindings,uniformBindingMap.defaultValues);
		resolvedBindings = null;
	}
	stateBindingPropertyAddedHandler(stateName,drawCall,stateBindingMap,forceRebind) {
		var resolvedBinding = drawCall.bindState(stateName,stateBindingMap.bindings,stateBindingMap.defaultValues);
		resolvedBinding = null;
	}
	addDrawCallToSortedBucket(drawCall) {
		var priority = drawCall.get_priority();
		var targetId = drawCall.get_target() != null ? drawCall.get_target().get_id() : 0;
		var zSortedIndex = drawCall.get_zSorted() ? 1 : 0;
		var _sortPropertyTuple = priority + "_" + targetId;
		var _this = this._drawCalls;
		if(!(__map_reserved[_sortPropertyTuple] != null ? _this.existsReserved(_sortPropertyTuple) : _this.h.hasOwnProperty(_sortPropertyTuple))) {
			this._drawCallsKeys.push(_sortPropertyTuple);
			this._drawCallsKeys.sort(minko_render_DrawCallPool.compareDrawCalls);
			var _this1 = this._drawCalls;
			var value = new minko_Tuple([],[]);
			if(__map_reserved[_sortPropertyTuple] != null) {
				_this1.setReserved(_sortPropertyTuple,value);
			} else {
				_this1.h[_sortPropertyTuple] = value;
			}
		}
		var _this2 = this._drawCalls;
		var _drawCallList = __map_reserved[_sortPropertyTuple] != null ? _this2.getReserved(_sortPropertyTuple) : _this2.h[_sortPropertyTuple];
		if(zSortedIndex == 1) {
			_drawCallList.second.push(drawCall);
		} else {
			_drawCallList.first.push(drawCall);
		}
	}
	removeDrawCallFromSortedBucket(drawCall) {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			HxOverrides.remove(sortPropertiesToDrawCalls1.first,drawCall);
			HxOverrides.remove(sortPropertiesToDrawCalls1.second,drawCall);
		}
	}
	findDrawCall(predicate) {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				if(predicate(drawCall)) {
					return drawCall;
				}
			}
			drawCalls = sortPropertiesToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls.length) {
				var drawCall1 = drawCalls[_g1];
				++_g1;
				if(predicate(drawCall1)) {
					return drawCall1;
				}
			}
		}
		return null;
	}
	foreachDrawCall(func) {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				func(drawCall);
			}
			var drawCalls1 = sortPropertiesToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls1.length) {
				var drawCall1 = drawCalls1[_g1];
				++_g1;
				func(drawCall1);
			}
		}
	}
	bindDrawCall(drawCall,pass,program,forceRebind) {
		drawCall.bind(program);
		var _g = 0;
		var _g1 = program.get_inputs().get_attributes();
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			drawCall.bindAttribute(input,pass.get_attributeBindings().bindings,pass.get_attributeBindings().defaultValues);
		}
		var _g2 = 0;
		var _g3 = minko_render_States.PROPERTY_NAMES;
		while(_g2 < _g3.length) {
			var stateName = _g3[_g2];
			++_g2;
			this.stateBindingPropertyAddedHandler(stateName,drawCall,pass.get_stateBindings(),forceRebind);
		}
		var _g4 = 0;
		var _g5 = program.get_inputs().get_uniforms();
		while(_g4 < _g5.length) {
			var input1 = _g5[_g4];
			++_g4;
			this.uniformBindingPropertyAddedHandler(drawCall,input1,pass.get_uniformBindings(),forceRebind);
		}
		if(pass.get_isForward()) {
			drawCall.bindIndexBuffer();
		}
	}
	unbindDrawCall(drawCall) {
		if(this._propChangedSlot.h.__keys__[drawCall.__id__] != null) {
			var __propChangedSlot_keys = this._propChangedSlot.h[drawCall.__id__];
			var _g = 0;
			var _g1 = __propChangedSlot_keys.samplerStatesBinding;
			while(_g < _g1.length) {
				var it = _g1[_g];
				++_g;
				this.removePropChangedSlot(__propChangedSlot_keys.samplerStatesBinding,it.first);
			}
			var _g2 = 0;
			var _g3 = __propChangedSlot_keys.stateBinding;
			while(_g2 < _g3.length) {
				var it1 = _g3[_g2];
				++_g2;
				this.removePropChangedSlot(__propChangedSlot_keys.stateBinding,it1.first);
			}
			var _g4 = 0;
			var _g5 = __propChangedSlot_keys.uniformBinding;
			while(_g4 < _g5.length) {
				var it2 = _g5[_g4];
				++_g4;
				this.removePropChangedSlot(__propChangedSlot_keys.uniformBinding,it2.first);
			}
			var _g6 = 0;
			var _g7 = __propChangedSlot_keys.macroBinding;
			while(_g6 < _g7.length) {
				var it3 = _g7[_g6];
				++_g6;
				this.removePropChangedSlot(__propChangedSlot_keys.macroBinding,it3.first);
			}
			__propChangedSlot_keys.samplerStatesBinding = null;
			__propChangedSlot_keys.stateBinding = null;
			__propChangedSlot_keys.uniformBinding = null;
			__propChangedSlot_keys.macroBinding = null;
			__propChangedSlot_keys = null;
			this._propChangedSlot.remove(drawCall);
		}
		if(this._sortUsefulPropertyChangedSlot.h.__keys__[drawCall.__id__] != null) {
			var _sortUsefulPropertyChangedSlot_keys = this._sortUsefulPropertyChangedSlot.h[drawCall.__id__];
			var _g8 = 0;
			while(_g8 < _sortUsefulPropertyChangedSlot_keys.length) {
				var it4 = _sortUsefulPropertyChangedSlot_keys[_g8];
				++_g8;
				it4.second.dispose();
				HxOverrides.remove(_sortUsefulPropertyChangedSlot_keys,it4);
			}
			this._sortUsefulPropertyChangedSlot.remove(drawCall);
		}
		if(this._zSortUsefulPropertyChangedSlot.h.__keys__[drawCall.__id__] != null) {
			var _zSortUsefulPropertyChangedSlot_keys = this._zSortUsefulPropertyChangedSlot.h[drawCall.__id__];
			var _g9 = 0;
			while(_g9 < _zSortUsefulPropertyChangedSlot_keys.length) {
				var it5 = _zSortUsefulPropertyChangedSlot_keys[_g9];
				++_g9;
				it5.second.dispose();
				HxOverrides.remove(_zSortUsefulPropertyChangedSlot_keys,it5);
			}
			this._zSortUsefulPropertyChangedSlot.remove(drawCall);
		}
		this._drawCallToPropRebindFuncs.remove(drawCall);
	}
	zSortDrawCalls() {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.second;
			drawCalls.sort(minko_render_DrawCallPool.compareZSortedDrawCalls);
		}
	}
	static compareZSortedDrawCalls(a,b) {
		var aPosition = a.getEyeSpacePosition();
		var bPosition = b.getEyeSpacePosition();
		if(aPosition.z > bPosition.z) {
			return -1;
		} else if(aPosition.z < bPosition.z) {
			return 1;
		} else {
			return 0;
		}
	}
	static compareDrawCalls(a,b) {
		a = a.toUpperCase();
		b = b.toUpperCase();
		if(a > b) {
			return -1;
		} else if(a < b) {
			return 1;
		} else {
			return 0;
		}
	}
	static sortPropertyTuple(m,s) {
		return m + "_" + s;
	}
}
$hx_exports["minko"]["render"]["DrawCallPool"] = minko_render_DrawCallPool;
minko_render_DrawCallPool.__name__ = true;
Object.assign(minko_render_DrawCallPool.prototype, {
	__class__: minko_render_DrawCallPool
});
class minko_render_Effect extends minko_Has_$uuid {
	constructor(name) {
		if(name == null) {
			name = "";
		}
		super();
		this._data = minko_data_Provider.create();
		this._name = name;
		this._techniques = new haxe_ds_StringMap();
		this._fallback = new haxe_ds_StringMap();
		this._uniformFunctions = [];
		this._attributeFunctions = [];
		this._macroFunctions = [];
	}
	get_uuid() {
		return this._data.get_uuid();
	}
	get_name() {
		return this._name;
	}
	get_techniques() {
		return this._techniques;
	}
	get_data() {
		return this._data;
	}
	technique(techniqueName) {
		if(!this.hasTechnique(techniqueName)) {
			throw new js__$Boot_HaxeError("techniqueName = " + techniqueName);
		}
		var _this = this._techniques;
		if(__map_reserved[techniqueName] != null) {
			return _this.getReserved(techniqueName);
		} else {
			return _this.h[techniqueName];
		}
	}
	fallback(techniqueName) {
		var _this = this._fallback;
		var foundFallbackIt = __map_reserved[techniqueName] != null ? _this.existsReserved(techniqueName) : _this.h.hasOwnProperty(techniqueName);
		if(foundFallbackIt == false) {
			throw new js__$Boot_HaxeError("techniqueName = " + techniqueName);
		}
		var _this1 = this._fallback;
		if(__map_reserved[techniqueName] != null) {
			return _this1.getReserved(techniqueName);
		} else {
			return _this1.h[techniqueName];
		}
	}
	hasTechnique(techniqueName) {
		var _this = this._techniques;
		return (__map_reserved[techniqueName] != null ? _this.existsReserved(techniqueName) : _this.h.hasOwnProperty(techniqueName)) != false;
	}
	hasFallback(techniqueName) {
		var _this = this._fallback;
		return (__map_reserved[techniqueName] != null ? _this.existsReserved(techniqueName) : _this.h.hasOwnProperty(techniqueName)) != false;
	}
	setUniform(name,values) {
		this._uniformFunctions.push(function(pass) {
			minko_render_Effect.setUniformOnPass(pass,name,values);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.setUniform(name,values);
			}
		}
	}
	setAttribute(name,attribute) {
		this._attributeFunctions.push(function(pass) {
			minko_render_Effect.setVertexAttributeOnPass(pass,name,attribute);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.setAttribute(name,attribute);
			}
		}
	}
	define(macroName) {
		this._macroFunctions.push(function(pass) {
			minko_render_Effect.defineOnPass(pass,macroName);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.define(macroName);
			}
		}
	}
	setDefine(macroName,macroValue) {
		this._macroFunctions.push(function(pass) {
			minko_render_Effect.defineOnPassWithValue(pass,macroName,macroValue);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.setDefine(macroName,macroValue);
			}
		}
	}
	addTechnique(name,passes) {
		if(this.hasTechnique(name)) {
			throw new js__$Boot_HaxeError("A technique named '" + name + "' already exists.");
		}
		var _g = 0;
		while(_g < passes.length) {
			var pass = passes[_g];
			++_g;
			var _g1 = 0;
			var _g11 = this._uniformFunctions;
			while(_g1 < _g11.length) {
				var func = _g11[_g1];
				++_g1;
				func(pass);
			}
			var _g2 = 0;
			var _g3 = this._attributeFunctions;
			while(_g2 < _g3.length) {
				var func1 = _g3[_g2];
				++_g2;
				func1(pass);
			}
			var _g4 = 0;
			var _g5 = this._macroFunctions;
			while(_g4 < _g5.length) {
				var func2 = _g5[_g4];
				++_g4;
				func2(pass);
			}
		}
		var _this = this._techniques;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,passes);
		} else {
			_this.h[name] = passes;
		}
	}
	addTechniqueFallback(name,passes,fallback) {
		var _this = this._fallback;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,fallback);
		} else {
			_this.h[name] = fallback;
		}
		this.addTechnique(name,passes);
	}
	removeTechnique(name) {
		if(!this.hasTechnique(name)) {
			throw new js__$Boot_HaxeError("The technique named '" + name + "' does not exist.");
		}
		this._techniques.remove(name);
		this._fallback.remove(name);
	}
	initializeMaterial(material,technique) {
		if(technique == null) {
			technique = "default";
		}
		this.fillMaterial(material,technique);
		return material;
	}
	fillMaterial(material,technique) {
		var _this = this._techniques;
		var passes = __map_reserved[technique] != null ? _this.getReserved(technique) : _this.h[technique];
		var _g = 0;
		while(_g < passes.length) {
			var pass = passes[_g];
			++_g;
			var defaultValues = pass.get_uniformBindings().defaultValues.get_providers()[0];
			var nameAndBinding = pass.get_uniformBindings().bindings.keys();
			while(nameAndBinding.hasNext()) {
				var nameAndBinding1 = nameAndBinding.next();
				var uniformName = nameAndBinding1;
				var _this1 = pass.get_uniformBindings().bindings;
				var nameAndBinding_second = __map_reserved[nameAndBinding1] != null ? _this1.getReserved(nameAndBinding1) : _this1.h[nameAndBinding1];
				if(defaultValues.hasProperty(uniformName)) {
					var pos = nameAndBinding_second.propertyName.indexOf("material[@{materialUuid}].");
					if(pos == 0) {
						material.get_data().set(HxOverrides.substr(nameAndBinding_second.propertyName,pos + 26,null),defaultValues.get(uniformName));
					}
				}
			}
		}
	}
	static create(name) {
		if(name == null) {
			name = "";
		}
		return new minko_render_Effect(name);
	}
	static createbyTechnique(name,passes) {
		var effect = minko_render_Effect.create(name);
		var _this = effect._techniques;
		if(__map_reserved["default"] != null) {
			_this.setReserved("default",passes);
		} else {
			_this.h["default"] = passes;
		}
		return effect;
	}
	static setUniformOnPass(pass,name,values) {
		pass.setUniform(name,values);
	}
	static setVertexAttributeOnPass(pass,name,attribute) {
		pass.setAttribute(name,attribute);
	}
	static defineOnPass(pass,macroName) {
		pass.define(macroName);
	}
	static defineOnPassWithValue(pass,macroName,macroValue) {
		pass.setDefine(macroName,macroValue);
	}
}
$hx_exports["minko"]["render"]["Effect"] = minko_render_Effect;
minko_render_Effect.__name__ = true;
minko_render_Effect.__super__ = minko_Has_$uuid;
Object.assign(minko_render_Effect.prototype, {
	__class__: minko_render_Effect
});
class minko_render_GlContext extends minko_render_AbstractContext {
	constructor() {
		super();
	}
	bytesToUint8Array(b) {
		return new Uint8Array(b.b.bufferValue);
	}
	initialize() {
		this._textureTypes = new haxe_ds_IntMap();
		this._uniformInputLocations = new haxe_ds_IntMap();
		this._uniformInputLocationKeys = new haxe_ds_ObjectMap();
		this._errorsEnabled = false;
		this._textures = new haxe_ds_IntMap();
		this._textureSizes = new haxe_ds_IntMap();
		this._textureHasMipmaps = new haxe_ds_IntMap();
		this._oldViewportX = this._viewportX = 0;
		this._oldViewportY = this._viewportY = 0;
		this._oldViewportWidth = this._viewportWidth = 0;
		this._oldViewportHeight = this._viewportHeight = 0;
		this._currentTarget = -1;
		this._currentIndexBuffer = -1;
		this._currentVertexBuffer = new haxe_ds_IntMap();
		this._currentVertexBuffer.h[0] = 0;
		this._currentVertexBuffer.h[1] = 0;
		this._currentVertexBuffer.h[2] = 0;
		this._currentVertexBuffer.h[3] = 0;
		this._currentVertexBuffer.h[4] = 0;
		this._currentVertexBuffer.h[5] = 0;
		this._currentVertexBuffer.h[6] = 0;
		this._currentVertexBuffer.h[7] = 0;
		this._currentVertexSize = new haxe_ds_IntMap();
		this._currentVertexSize.h[0] = -1;
		this._currentVertexSize.h[1] = -1;
		this._currentVertexSize.h[2] = -1;
		this._currentVertexSize.h[3] = -1;
		this._currentVertexSize.h[4] = -1;
		this._currentVertexSize.h[5] = -1;
		this._currentVertexSize.h[6] = -1;
		this._currentVertexSize.h[7] = -1;
		this._currentVertexStride = new haxe_ds_IntMap();
		this._currentVertexStride.h[0] = -1;
		this._currentVertexStride.h[1] = -1;
		this._currentVertexStride.h[2] = -1;
		this._currentVertexStride.h[3] = -1;
		this._currentVertexStride.h[4] = -1;
		this._currentVertexStride.h[5] = -1;
		this._currentVertexStride.h[6] = -1;
		this._currentVertexStride.h[7] = -1;
		this._currentVertexOffset = new haxe_ds_IntMap();
		this._currentVertexOffset.h[0] = -1;
		this._currentVertexOffset.h[1] = -1;
		this._currentVertexOffset.h[2] = -1;
		this._currentVertexOffset.h[3] = -1;
		this._currentVertexOffset.h[4] = -1;
		this._currentVertexOffset.h[5] = -1;
		this._currentVertexOffset.h[6] = -1;
		this._currentVertexOffset.h[7] = -1;
		this._currentBoundTexture = 0;
		this._currentTexture = new haxe_ds_IntMap();
		this._currentTexture.h[0] = 0;
		this._currentTexture.h[1] = 0;
		this._currentTexture.h[2] = 0;
		this._currentTexture.h[3] = 0;
		this._currentTexture.h[4] = 0;
		this._currentTexture.h[5] = 0;
		this._currentTexture.h[6] = 0;
		this._currentTexture.h[7] = 0;
		this._currentProgram = 0;
		this._currentTriangleCulling = 2;
		this._currentWrapMode = new haxe_ds_IntMap();
		this._currentTextureFilter = new haxe_ds_IntMap();
		this._currentMipFilter = new haxe_ds_IntMap();
		this._currentBlendingMode = 2 | 256;
		this._currentColorMask = true;
		this._currentDepthMask = true;
		this._currentDepthFunc = 8;
		this._currentStencilFunc = 8;
		this._currentStencilRef = 0;
		this._currentStencilMask = 1;
		this._currentStencilFailOp = 8;
		this._currentStencilZFailOp = 8;
		this._currentStencilZPassOp = 8;
		this._vertexAttributeEnabled = new haxe_ds_IntMap();
		this._vertexAttributeEnabled.h[0] = false;
		this._vertexAttributeEnabled.h[1] = false;
		this._vertexAttributeEnabled.h[2] = false;
		this._vertexAttributeEnabled.h[3] = false;
		this._vertexAttributeEnabled.h[4] = false;
		this._vertexAttributeEnabled.h[5] = false;
		this._vertexAttributeEnabled.h[6] = false;
		this._vertexAttributeEnabled.h[7] = false;
		this._vertexAttributeEnabled.h[8] = false;
		this._vertexAttributeEnabled.h[9] = false;
		this._vertexAttributeEnabled.h[10] = false;
		this._vertexAttributeEnabled.h[11] = false;
		this._vertexAttributeEnabled.h[12] = false;
		this._vertexAttributeEnabled.h[13] = false;
		this._vertexAttributeEnabled.h[14] = false;
		this._vertexAttributeEnabled.h[15] = false;
		this._vertexAttributeEnabled.h[16] = false;
		this._vertexAttributeEnabled.h[17] = false;
		this._vertexAttributeEnabled.h[18] = false;
		this._vertexAttributeEnabled.h[19] = false;
		this._vertexAttributeEnabled.h[20] = false;
		this._vertexAttributeEnabled.h[21] = false;
		this._vertexAttributeEnabled.h[22] = false;
		this._vertexAttributeEnabled.h[23] = false;
		this._vertexAttributeEnabled.h[24] = false;
		this._vertexAttributeEnabled.h[25] = false;
		this._vertexAttributeEnabled.h[26] = false;
		this._vertexAttributeEnabled.h[27] = false;
		this._vertexAttributeEnabled.h[28] = false;
		this._vertexAttributeEnabled.h[29] = false;
		this._vertexAttributeEnabled.h[30] = false;
		this._vertexAttributeEnabled.h[31] = false;
		this._stencilBits = 0;
		this._vertexBuffers = new haxe_ds_IntMap();
		this._indexBuffers = new haxe_ds_IntMap();
		this._programs = new haxe_ds_IntMap();
		this._vertexShaders = new haxe_ds_IntMap();
		this._fragmentShaders = new haxe_ds_IntMap();
		this._shaders = new haxe_ds_IntMap();
		this._frameBuffers = new haxe_ds_IntMap();
		this._renderBuffers = new haxe_ds_IntMap();
		this.gl.enable(2929);
		this.gl.enable(3042);
		this.gl.enable(2884);
		this.gl.cullFace(1029);
		this.gl.frontFace(2305);
		this._driverInfo = "";
		haxe_Log.trace("_getSupportedExtensions" + Std.string(this.gl.getSupportedExtensions()),{ fileName : "minko/render/GlContext.hx", lineNumber : 240, className : "minko.render.GlContext", methodName : "initialize"});
		this.gl.getExtension("OES_standard_derivatives");
		haxe_Log.trace("_getSupportedExtensions" + Std.string(this.gl.getSupportedExtensions()),{ fileName : "minko/render/GlContext.hx", lineNumber : 242, className : "minko.render.GlContext", methodName : "initialize"});
		this._oglMajorVersion = 2;
		this._oglMinorVersion = 0;
		var viewportSettings = this.gl.getParameter(2978);
		this._viewportX = viewportSettings[0];
		this._viewportY = viewportSettings[1];
		this._viewportWidth = viewportSettings[2];
		this._viewportHeight = viewportSettings[3];
		this.setColorMask(true);
		this.setDepthTest(true,4);
		this._stencilBits = this.gl.getParameter(3415);
		if(this._stencilBits != -1) {
			this.gl.enable(2960);
			this.setStencilTest(0,0,1,0,0,0);
		}
		this.initializeExtFunctions();
	}
	initializeExtFunctions() {
	}
	dispose() {
		var vertexBuffer = this._vertexBuffers.iterator();
		while(vertexBuffer.hasNext()) {
			var vertexBuffer1 = vertexBuffer.next();
			this.gl.deleteBuffer(vertexBuffer1);
		}
		var indexBuffer = this._indexBuffers.iterator();
		while(indexBuffer.hasNext()) {
			var indexBuffer1 = indexBuffer.next();
			this.gl.deleteBuffer(indexBuffer1);
		}
		var texture = this._textures.iterator();
		while(texture.hasNext()) {
			var texture1 = texture.next();
			this.gl.deleteTexture(texture1);
		}
		var program = this._programs.iterator();
		while(program.hasNext()) {
			var program1 = program.next();
			this.gl.deleteProgram(program1);
		}
		var vertexShader = this._vertexShaders.iterator();
		while(vertexShader.hasNext()) {
			var vertexShader1 = vertexShader.next();
			this.gl.deleteShader(vertexShader1);
		}
		var fragmentShader = this._fragmentShaders.iterator();
		while(fragmentShader.hasNext()) {
			var fragmentShader1 = fragmentShader.next();
			this.gl.deleteShader(fragmentShader1);
		}
		super.dispose();
	}
	get_errorsEnabled() {
		return this._errorsEnabled;
	}
	set_errorsEnabled(errors) {
		this._errorsEnabled = errors;
		return errors;
	}
	get_driverInfo() {
		return this._driverInfo;
	}
	get_renderTarget() {
		return this._currentTarget;
	}
	get_viewportWidth() {
		return this._viewportWidth;
	}
	get_viewportHeight() {
		return this._viewportHeight;
	}
	get_currentProgram() {
		return this._currentProgram;
	}
	configureViewport(x,y,width,height) {
		if(x != this._viewportX || y != this._viewportY || width != this._viewportWidth || height != this._viewportHeight) {
			this._viewportX = x;
			this._viewportY = y;
			this._viewportWidth = width;
			this._viewportHeight = height;
			this.gl.viewport(x,y,width,height);
		}
	}
	clear(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = -1;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 0.0;
		}
		if(blue == null) {
			blue = 0.0;
		}
		if(green == null) {
			green = 0.0;
		}
		if(red == null) {
			red = 0.0;
		}
		this.gl.clearColor(red,green,blue,alpha);
		this.gl.clearDepth(depth);
		if(this._stencilBits != 0) {
			this.gl.clearStencil(stencil);
		}
		mask = 17664 & mask;
		if((mask & 256) != null) {
			this.gl.depthMask(this._currentDepthMask = true);
		}
		this.gl.clear(mask);
	}
	present() {
		this.gl.flush();
	}
	drawTriangles(firstIndex,numTriangles) {
		this.gl.bindBuffer(34963,null);
		this.gl.drawArrays(4,firstIndex,numTriangles * 3);
		this.checkForErrors();
	}
	drawIndexBufferTriangles(indexBuffer,firstIndex,numTriangles) {
		if(this._currentIndexBuffer != indexBuffer) {
			this._currentIndexBuffer = indexBuffer;
			this.gl.bindBuffer(34963,this._indexBuffers.h[indexBuffer]);
		}
		this.checkForErrors();
		this.gl.drawElements(4,numTriangles * 3,5123,firstIndex);
		this.checkForErrors();
	}
	checkForErrors() {
		if(this._errorsEnabled && this.getError() != 0) {
			throw new js__$Boot_HaxeError("error: OpenGLES2Context::checkForErrors()");
		}
	}
	createVertexBuffer(size) {
		var vertexBuffer = this.gl.createBuffer();
		this.gl.bindBuffer(34962,vertexBuffer);
		this.gl.bufferData(34962,size * 4,35044);
		minko_render_GlContext.vertexBufferCount += 1;
		this._vertexBuffers.h[minko_render_GlContext.vertexBufferCount] = vertexBuffer;
		this.checkForErrors();
		return minko_render_GlContext.vertexBufferCount;
	}
	createVertexAttributeArray() {
		return -1;
	}
	setVertexAttributeArray(vertexArray) {
	}
	setVertexBufferAt(position,vertexBuffer,size,stride,offset) {
		var vertexAttributeEnabled = vertexBuffer > 0;
		var vertexBufferChanged = this._currentVertexBuffer.h[position] != vertexBuffer || vertexAttributeEnabled;
		if(vertexBufferChanged) {
			this.gl.bindBuffer(34962,this._vertexBuffers.h[vertexBuffer]);
			this.checkForErrors();
			this._currentVertexBuffer.h[position] = vertexBuffer;
		}
		if(vertexBufferChanged || this._currentVertexSize.h[position] != size || this._currentVertexStride.h[position] != stride || this._currentVertexOffset.h[position] != offset) {
			this.gl.vertexAttribPointer(position,size,5126,false,4 * stride,4 * offset);
			this.checkForErrors();
			this._currentVertexSize.h[position] = size;
			this._currentVertexStride.h[position] = stride;
			this._currentVertexOffset.h[position] = offset;
		}
		if(vertexBufferChanged || this._vertexAttributeEnabled.h[position] != vertexAttributeEnabled) {
			if(vertexAttributeEnabled) {
				this.gl.enableVertexAttribArray(position);
				this.checkForErrors();
				this._vertexAttributeEnabled.h[position] = true;
			} else {
				this.gl.disableVertexAttribArray(position);
				this.checkForErrors();
				this._vertexAttributeEnabled.h[position] = false;
			}
		}
	}
	uploadVertexBufferData(vertexBuffer,offset,size,data) {
		this.gl.bindBuffer(34962,this._vertexBuffers.h[vertexBuffer]);
		this.gl.bufferSubData(34962,offset,new Float32Array(data));
		this.checkForErrors();
	}
	deleteVertexBuffer(vertexBuffer) {
		var currentVertexBuffer = this._currentVertexBuffer.keys();
		while(currentVertexBuffer.hasNext()) {
			var currentVertexBuffer1 = currentVertexBuffer.next();
			if(this._currentVertexBuffer.h[currentVertexBuffer1] == vertexBuffer) {
				this._currentVertexBuffer.h[currentVertexBuffer1] = 0;
			}
		}
		this.gl.deleteBuffer(this._vertexBuffers.h[vertexBuffer]);
		this._vertexBuffers.remove(vertexBuffer);
		this.checkForErrors();
	}
	createIndexBuffer(size) {
		var indexBuffer = this.gl.createBuffer();
		this.gl.bindBuffer(34963,indexBuffer);
		this.gl.bufferData(34963,size * 2,35044);
		minko_render_GlContext.indexBufferCount += 1;
		this._indexBuffers.h[minko_render_GlContext.indexBufferCount] = indexBuffer;
		this.checkForErrors();
		return minko_render_GlContext.indexBufferCount;
	}
	uploaderIndexBufferData(indexBuffer,offset,size,data) {
		if(this._currentIndexBuffer != indexBuffer) {
			this.gl.bindBuffer(34963,this._indexBuffers.h[indexBuffer]);
			this._currentIndexBuffer = indexBuffer;
		}
		this.gl.bufferSubData(34963,offset * 2,new Uint16Array(data));
		this.checkForErrors();
	}
	deleteIndexBuffer(indexBuffer) {
		if(this._currentIndexBuffer == indexBuffer) {
			this._currentIndexBuffer = -1;
		}
		this.gl.deleteBuffer(this._indexBuffers.h[indexBuffer]);
		this._indexBuffers.remove(indexBuffer);
		this.checkForErrors();
	}
	createTexture(type,width,height,mipMapping,optimizeForRenderToTexture,assertPowerOfTwoSized) {
		if(assertPowerOfTwoSized == null) {
			assertPowerOfTwoSized = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		if(assertPowerOfTwoSized) {
			if(!(width != 0 && (width & width - 1) == 0)) {
				throw new js__$Boot_HaxeError("width");
			}
			if(!(height != 0 && (height & height - 1) == 0)) {
				throw new js__$Boot_HaxeError("height");
			}
		} else if(mipMapping) {
			throw new js__$Boot_HaxeError("assertPowerOfTwoSized must be true when mipMapping is true");
		}
		var texture = this.gl.createTexture();
		var glTarget = type == 0 ? 3553 : 34067;
		this.gl.bindTexture(glTarget,texture);
		minko_render_GlContext.textureCount++;
		this._currentBoundTexture = minko_render_GlContext.textureCount;
		this.gl.texParameteri(glTarget,10242,33071);
		this.gl.texParameteri(glTarget,10243,33071);
		this.gl.texParameteri(glTarget,10241,9728);
		this.gl.texParameteri(glTarget,10240,9728);
		this._textures.h[minko_render_GlContext.textureCount] = texture;
		var _this = this._textureSizes;
		var key = minko_render_GlContext.textureCount;
		var value = new minko_Tuple(width,height);
		_this.h[key] = value;
		this._textureHasMipmaps.h[minko_render_GlContext.textureCount] = mipMapping;
		this._textureTypes.h[minko_render_GlContext.textureCount] = type;
		this._currentWrapMode.h[minko_render_GlContext.textureCount] = 0;
		this._currentTextureFilter.h[minko_render_GlContext.textureCount] = 0;
		this._currentMipFilter.h[minko_render_GlContext.textureCount] = 0;
		if(mipMapping) {
			var level = 0;
			var h = height;
			var w = width;
			var size = width > height ? width : height;
			while(size > 0) {
				if(type == 0) {
					this.gl.texImage2D(3553,level,6408,w,h,0,6408,5121,null);
				} else {
					this.gl.texImage2D(34069,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34070,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34071,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34072,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34073,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34074,level,6408,w,h,0,6408,5121,null);
				}
				++level;
				size >>= 1;
				w >>= 1;
				h >>= 1;
			}
		} else if(type == 0) {
			this.gl.texImage2D(3553,0,6408,width,height,0,6408,5121,null);
		} else {
			this.gl.texImage2D(34069,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34070,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34071,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34072,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34073,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34074,0,6408,width,height,0,6408,5121,null);
		}
		if(optimizeForRenderToTexture) {
			this.createRTTBuffers(type,minko_render_GlContext.textureCount,width,height);
		}
		this.checkForErrors();
		return minko_render_GlContext.textureCount;
	}
	createRectangleTexture(type,width,height) {
		return this.createTexture(type,width,height,false,false,false);
	}
	createCompressedTexture(type,format,width,height,mipMapping) {
		if(!(width != 0 && (width & width - 1) == 0)) {
			throw new js__$Boot_HaxeError("width");
		}
		if(!(height != 0 && (height & height - 1) == 0)) {
			throw new js__$Boot_HaxeError("height");
		}
		var texture = this.gl.createTexture();
		var glTarget = type == 0 ? 3553 : 34067;
		this.gl.bindTexture(glTarget,texture);
		minko_render_GlContext.textureCount++;
		this._currentBoundTexture = minko_render_GlContext.textureCount;
		this.gl.texParameteri(glTarget,10242,33071);
		this.gl.texParameteri(glTarget,10243,33071);
		this.gl.texParameteri(glTarget,10241,9728);
		this.gl.texParameteri(glTarget,10240,9728);
		this._textures.h[minko_render_GlContext.textureCount] = texture;
		var _this = this._textureSizes;
		var key = minko_render_GlContext.textureCount;
		var value = new minko_Tuple(width,height);
		_this.h[key] = value;
		this._textureHasMipmaps.h[minko_render_GlContext.textureCount] = mipMapping;
		this._textureTypes.h[minko_render_GlContext.textureCount] = type;
		this._currentWrapMode.h[minko_render_GlContext.textureCount] = 0;
		this._currentTextureFilter.h[minko_render_GlContext.textureCount] = 0;
		this._currentMipFilter.h[minko_render_GlContext.textureCount] = 0;
		var oglFormat = this.availableTextureFormats().h[format];
		var level = 0;
		var h = height;
		var w = width;
		if(mipMapping) {
			var size = width > height ? width : height;
			while(size > 0) {
				var dataSize = minko_render_TextureFormatInfo.textureSize(format,w,h);
				var data = new haxe_io_Bytes(new ArrayBuffer(dataSize));
				if(type == 0) {
					this.gl.compressedTexImage2D(3553,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
				} else {
					this.gl.compressedTexImage2D(34069,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34070,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34071,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34072,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34073,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34074,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
				}
				++level;
				size >>= 1;
				w >>= 1;
				h >>= 1;
			}
		} else {
			var dataSize1 = minko_render_TextureFormatInfo.textureSize(format,width,height);
			var data1 = new haxe_io_Bytes(new ArrayBuffer(dataSize1));
			if(type == 0) {
				this.gl.compressedTexImage2D(3553,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
			} else {
				this.gl.compressedTexImage2D(34069,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34070,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34071,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34072,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34073,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34074,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
			}
		}
		this.checkForErrors();
		return minko_render_GlContext.textureCount;
	}
	getTextureType(textureId) {
		var foundTypeIt = this._textureTypes.h[textureId];
		return foundTypeIt;
	}
	uploadTexture2dData(texture,width,height,mipLevel,data) {
		this.gl.bindTexture(3553,this._textures.h[texture]);
		this.gl.texImage2D(3553,mipLevel,6408,width,height,0,6408,5121,new Uint8Array(data.b.bufferValue));
		this._currentBoundTexture = texture;
		this.checkForErrors();
	}
	uploadCubeTextureData(texture,face,width,height,mipLevel,data) {
		this.gl.bindTexture(34067,this._textures.h[texture]);
		var cubeFace = 0;
		switch(face) {
		case 0:
			cubeFace = 34069;
			break;
		case 1:
			cubeFace = 34070;
			break;
		case 2:
			cubeFace = 34071;
			break;
		case 3:
			cubeFace = 34072;
			break;
		case 4:
			cubeFace = 34073;
			break;
		case 5:
			cubeFace = 34074;
			break;
		default:
			throw new js__$Boot_HaxeError("");
		}
		this.gl.texImage2D(cubeFace,mipLevel,6408,width,height,0,6408,5121,new Uint8Array(data.b.bufferValue));
		this._currentBoundTexture = texture;
		this.checkForErrors();
	}
	uploadCompressedTexture2dData(texture,format,width,height,size,mipLevel,data) {
		var formats = this.availableTextureFormats();
		this.gl.bindTexture(3553,this._textures.h[texture]);
		this.gl.compressedTexSubImage2D(3553,mipLevel,0,0,width,height,formats.h[format],new Uint8Array(data.b.bufferValue));
		this._currentBoundTexture = texture;
		this.checkForErrors();
	}
	uploadCompressedCubeTextureData(texture,face,format,width,height,mipLevel,data) {
		throw new js__$Boot_HaxeError("");
	}
	activateMipMapping(texture) {
		this._textureHasMipmaps.h[texture] = true;
	}
	deleteTexture(texture) {
		this.gl.deleteTexture(this._textures.h[texture]);
		this._textures.remove(texture);
		if(this._frameBuffers.h.hasOwnProperty(texture)) {
			this.gl.deleteFramebuffer(this._frameBuffers.h[texture]);
			this._frameBuffers.remove(texture);
			this.gl.deleteRenderbuffer(this._renderBuffers.h[texture]);
			this._renderBuffers.remove(texture);
		}
		this._textureSizes.remove(texture);
		this._textureHasMipmaps.remove(texture);
		this._textureTypes.remove(texture);
		this._currentWrapMode.remove(texture);
		this._currentTextureFilter.remove(texture);
		this._currentMipFilter.remove(texture);
		this._currentTexture.h[texture] = 0;
		this._currentBoundTexture = this._currentBoundTexture == texture ? 0 : this._currentBoundTexture;
		this.checkForErrors();
	}
	setTextureAt(position,texture,location) {
		if(location == null) {
			location = -1;
		}
		var textureIsValid = texture > 0;
		if(!textureIsValid) {
			return;
		}
		if(position >= Lambda.count(this._currentTexture)) {
			return;
		}
		var glTarget = this.getTextureType(texture) == 0 ? 3553 : 34067;
		if(this._currentTexture.h[position] != texture || this._currentBoundTexture != texture) {
			this.gl.activeTexture(33984 + position);
			this.gl.bindTexture(glTarget,this._textures.h[texture]);
			this._currentTexture.h[position] = texture;
			this._currentBoundTexture = texture;
		}
		if(textureIsValid && location >= 0) {
			this.gl.uniform1i(this._uniformInputLocations.h[location],position);
		}
		this.checkForErrors();
	}
	setSamplerStateAt(position,wrapping,filtering,mipFiltering) {
		var texture = this._currentTexture.h[position];
		var glTarget = this.getTextureType(texture) == 0 ? 3553 : 34067;
		var active = false;
		if(!this._textureHasMipmaps.h[texture]) {
			mipFiltering = 0;
		}
		if(this._currentWrapMode.h[texture] != wrapping) {
			this._currentWrapMode.h[texture] = wrapping;
			this.gl.activeTexture(33984 + position);
			active = true;
			switch(wrapping) {
			case 0:
				this.gl.texParameteri(glTarget,10242,33071);
				this.gl.texParameteri(glTarget,10243,33071);
				break;
			case 1:
				this.gl.texParameteri(glTarget,10242,10497);
				this.gl.texParameteri(glTarget,10243,10497);
				break;
			}
		}
		if(this._currentTextureFilter.h[texture] != filtering || this._currentMipFilter.h[texture] != mipFiltering) {
			this._currentTextureFilter.h[texture] = filtering;
			this._currentMipFilter.h[texture] = mipFiltering;
			if(!active) {
				this.gl.activeTexture(33984 + position);
			}
			switch(filtering) {
			case 0:
				switch(mipFiltering) {
				case 0:
					this.gl.texParameteri(glTarget,10241,9728);
					break;
				case 1:
					this.gl.texParameteri(glTarget,10241,9984);
					break;
				case 2:
					this.gl.texParameteri(glTarget,10241,9986);
					break;
				}
				this.gl.texParameteri(glTarget,10240,9728);
				break;
			case 1:
				switch(mipFiltering) {
				case 0:
					this.gl.texParameteri(glTarget,10241,9729);
					break;
				case 1:
					this.gl.texParameteri(glTarget,10241,9985);
					break;
				case 2:
					this.gl.texParameteri(glTarget,10241,9987);
					break;
				}
				this.gl.texParameteri(glTarget,10240,9729);
				break;
			}
		}
		this.checkForErrors();
	}
	createProgram() {
		var handle = this.gl.createProgram();
		this.checkForErrors();
		minko_render_GlContext.programCount++;
		this._programs.h[minko_render_GlContext.programCount] = handle;
		return minko_render_GlContext.programCount;
	}
	attachShader(program,shader) {
		this.gl.attachShader(this._programs.h[program],this._shaders.h[shader]);
		this.checkForErrors();
	}
	linkProgram(program) {
		this.gl.linkProgram(this._programs.h[program]);
		this.checkForErrors();
	}
	deleteProgram(program) {
		this.gl.deleteProgram(this._programs.h[program]);
		this._programs.remove(program);
		this.checkForErrors();
	}
	compileShader(shader) {
		this.gl.compileShader(this._shaders.h[shader]);
		var errors = this.getShaderCompilationLogs(shader);
		if(errors != "") {
			var source = this.getShaderSource(shader);
			haxe_Log.trace("Shader source (glShaderSource_" + shader + "):\n" + source,{ fileName : "minko/render/GlContext.hx", lineNumber : 1105, className : "minko.render.GlContext", methodName : "compileShader"});
			haxe_Log.trace("Shader errors (glShaderSource_" + shader + "):\n" + errors,{ fileName : "minko/render/GlContext.hx", lineNumber : 1106, className : "minko.render.GlContext", methodName : "compileShader"});
			throw new js__$Boot_HaxeError("Shader compilation failed. Enable debug logs to display errors.");
		}
		this.checkForErrors();
	}
	setProgram(program) {
		if(this._currentProgram == program) {
			return;
		}
		this._currentProgram = program;
		this.gl.useProgram(this._programs.h[program]);
		this.checkForErrors();
	}
	setShaderSource(shader,source) {
		var sourceString = source;
		this.gl.shaderSource(this._shaders.h[shader],sourceString);
		this.checkForErrors();
	}
	getShaderSource(shader) {
		var source = this.gl.getShaderSource(this._shaders.h[shader]);
		this.checkForErrors();
		return source;
	}
	createVertexShader() {
		var vertexShader = this.gl.createShader(35633);
		minko_render_GlContext.shaderCount++;
		this._vertexShaders.h[minko_render_GlContext.shaderCount] = vertexShader;
		this._shaders.h[minko_render_GlContext.shaderCount] = vertexShader;
		this.checkForErrors();
		return minko_render_GlContext.shaderCount;
	}
	deleteVertexShader(vertexShader) {
		this.gl.deleteShader(this._vertexShaders.h[vertexShader]);
		this._vertexShaders.remove(vertexShader);
		this._shaders.remove(vertexShader);
		this.checkForErrors();
	}
	createFragmentShader() {
		var fragmentShader = this.gl.createShader(35632);
		minko_render_GlContext.shaderCount++;
		this._fragmentShaders.h[minko_render_GlContext.shaderCount] = fragmentShader;
		this._shaders.h[minko_render_GlContext.shaderCount] = fragmentShader;
		this.checkForErrors();
		return minko_render_GlContext.shaderCount;
	}
	deleteFragmentShader(fragmentShader) {
		this.gl.deleteShader(this._fragmentShaders.h[fragmentShader]);
		this._fragmentShaders.remove(fragmentShader);
		this._shaders.remove(fragmentShader);
		this.checkForErrors();
	}
	getProgramInputs(program) {
		this.setProgram(program);
		var ip = new minko_render_ProgramInputs();
		var program1 = this._programs.h[program];
		var inputs = [];
		var total = -1;
		var maxUniformNameLength = -1;
		total = this.gl.getProgramParameter(program1,35718);
		var _g = 0;
		var _g1 = total;
		while(_g < _g1) {
			var i = _g++;
			var activeInfo = this.gl.getActiveUniform(program1,i);
			this.checkForErrors();
			var name = activeInfo.name;
			var size = activeInfo.size;
			var type = activeInfo.type;
			var inputType = this.convertInputType(type);
			var location = this.gl.getUniformLocation(program1,name);
			if(location != null && inputType != 0) {
				if(this._uniformInputLocationKeys.h.__keys__[location.__id__] != null == false) {
					minko_render_GlContext.locationCount++;
					this._uniformInputLocationKeys.set(location,minko_render_GlContext.locationCount);
					this._uniformInputLocations.h[minko_render_GlContext.locationCount] = location;
				}
				var location_index = this._uniformInputLocationKeys.h[location.__id__];
				inputs.push(new minko_render_UniformInput(name,location_index,size,inputType));
			}
		}
		var tmp = inputs;
		var program2 = this._programs.h[program];
		var inputs1 = [];
		var total1 = -1;
		var maxAttributeNameLength = -1;
		total1 = this.gl.getProgramParameter(program2,35721);
		var _g2 = 0;
		var _g11 = total1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var activeInfo1 = this.gl.getActiveAttrib(program2,i1);
			var size1 = activeInfo1.size;
			var type1 = activeInfo1.type;
			var name1 = activeInfo1.name;
			this.checkForErrors();
			var location1 = this.gl.getAttribLocation(program2,name1);
			if(location1 >= 0) {
				inputs1.push(new minko_render_AttributeInput(name1,location1));
			}
		}
		ip.setProgramInputs(tmp,inputs1);
		return ip;
	}
	convertInputType(type) {
		switch(type) {
		case 5124:
			return 1;
		case 5126:
			return 9;
		case 35664:
			return 10;
		case 35665:
			return 11;
		case 35666:
			return 12;
		case 35667:
			return 2;
		case 35668:
			return 3;
		case 35669:
			return 4;
		case 35670:
			return 5;
		case 35671:
			return 6;
		case 35672:
			return 7;
		case 35673:
			return 8;
		case 35675:
			return 13;
		case 35676:
			return 14;
		case 35678:
			return 15;
		case 35680:
			return 16;
		default:
			throw new js__$Boot_HaxeError("unsupported type");
		}
	}
	getUniformInput(program,name) {
		var program1 = this._programs.h[program];
		var inputs = [];
		var total = -1;
		var maxUniformNameLength = -1;
		total = this.gl.getProgramParameter(program1,35718);
		var _g = 0;
		var _g1 = total;
		while(_g < _g1) {
			var i = _g++;
			var activeInfo = this.gl.getActiveUniform(program1,i);
			this.checkForErrors();
			var name1 = activeInfo.name;
			var size = activeInfo.size;
			var type = activeInfo.type;
			var inputType = this.convertInputType(type);
			var location = this.gl.getUniformLocation(program1,name1);
			if(location != null && inputType != 0) {
				if(this._uniformInputLocationKeys.h.__keys__[location.__id__] != null == false) {
					minko_render_GlContext.locationCount++;
					this._uniformInputLocationKeys.set(location,minko_render_GlContext.locationCount);
					this._uniformInputLocations.h[minko_render_GlContext.locationCount] = location;
				}
				var location_index = this._uniformInputLocationKeys.h[location.__id__];
				inputs.push(new minko_render_UniformInput(name1,location_index,size,inputType));
			}
		}
		var inputs1 = inputs;
		inputs1 = inputs1.filter(function(i1) {
			return i1.name == name;
		});
		if(inputs1.length > 0) {
			return inputs1[0];
		} else {
			return null;
		}
	}
	getUniformInputs(program) {
		var inputs = [];
		var total = -1;
		var maxUniformNameLength = -1;
		total = this.gl.getProgramParameter(program,35718);
		var _g = 0;
		var _g1 = total;
		while(_g < _g1) {
			var i = _g++;
			var activeInfo = this.gl.getActiveUniform(program,i);
			this.checkForErrors();
			var name = activeInfo.name;
			var size = activeInfo.size;
			var type = activeInfo.type;
			var inputType = this.convertInputType(type);
			var location = this.gl.getUniformLocation(program,name);
			if(location != null && inputType != 0) {
				if(this._uniformInputLocationKeys.h.__keys__[location.__id__] != null == false) {
					minko_render_GlContext.locationCount++;
					this._uniformInputLocationKeys.set(location,minko_render_GlContext.locationCount);
					this._uniformInputLocations.h[minko_render_GlContext.locationCount] = location;
				}
				var location_index = this._uniformInputLocationKeys.h[location.__id__];
				inputs.push(new minko_render_UniformInput(name,location_index,size,inputType));
			}
		}
		return inputs;
	}
	getAttributeInput(program,name) {
		var program1 = this._programs.h[program];
		var inputs = [];
		var total = -1;
		var maxAttributeNameLength = -1;
		total = this.gl.getProgramParameter(program1,35721);
		var _g = 0;
		var _g1 = total;
		while(_g < _g1) {
			var i = _g++;
			var activeInfo = this.gl.getActiveAttrib(program1,i);
			var size = activeInfo.size;
			var type = activeInfo.type;
			var name1 = activeInfo.name;
			this.checkForErrors();
			var location = this.gl.getAttribLocation(program1,name1);
			if(location >= 0) {
				inputs.push(new minko_render_AttributeInput(name1,location));
			}
		}
		var inputs1 = inputs;
		inputs1 = inputs1.filter(function(i1) {
			return i1.name == name;
		});
		if(inputs1.length > 0) {
			return inputs1[0];
		} else {
			return null;
		}
	}
	getAttributeInputs(program) {
		var inputs = [];
		var total = -1;
		var maxAttributeNameLength = -1;
		total = this.gl.getProgramParameter(program,35721);
		var _g = 0;
		var _g1 = total;
		while(_g < _g1) {
			var i = _g++;
			var activeInfo = this.gl.getActiveAttrib(program,i);
			var size = activeInfo.size;
			var type = activeInfo.type;
			var name = activeInfo.name;
			this.checkForErrors();
			var location = this.gl.getAttribLocation(program,name);
			if(location >= 0) {
				inputs.push(new minko_render_AttributeInput(name,location));
			}
		}
		return inputs;
	}
	getShaderCompilationLogs(shader) {
		var compileStatus = this.gl.getShaderParameter(this._shaders.h[shader],35713);
		if(compileStatus == false) {
			var logs = this.gl.getShaderInfoLog(this._shaders.h[shader]);
			return logs;
		}
		return "";
	}
	getProgramInfoLogs(program) {
		var programInfo = this.gl.getProgramInfoLog(this._programs.h[program]);
		return programInfo;
	}
	setBlendingModeSD(source,destination) {
		if((source | destination) != this._currentBlendingMode) {
			this._currentBlendingMode = source | destination;
			this.gl.blendFunc(minko_render_GlContext._blendingFactors.h[source & 255],minko_render_GlContext._blendingFactors.h[destination & 65280]);
			this.checkForErrors();
		}
	}
	setBlendingMode(blendingMode) {
		if(blendingMode != this._currentBlendingMode) {
			this._currentBlendingMode = blendingMode;
			this.gl.blendFunc(minko_render_GlContext._blendingFactors.h[blendingMode & 255],minko_render_GlContext._blendingFactors.h[blendingMode & 65280]);
			this.checkForErrors();
		}
	}
	setDepthTest(depthMask,depthFunc) {
		if(depthMask != this._currentDepthMask || depthFunc != this._currentDepthFunc) {
			this._currentDepthMask = depthMask;
			this._currentDepthFunc = depthFunc;
			this.gl.depthMask(depthMask);
			this.gl.depthFunc(minko_render_GlContext._compareFuncs.h[depthFunc]);
			this.checkForErrors();
		}
	}
	setColorMask(colorMask) {
		if(this._currentColorMask != colorMask) {
			this._currentColorMask = colorMask;
			this.gl.colorMask(colorMask,colorMask,colorMask,colorMask);
			this.checkForErrors();
		}
	}
	setStencilTest(stencilFunc,stencilRef,stencilMask,stencilFailOp,stencilZFailOp,stencilZPassOp) {
		if(stencilFunc != this._currentStencilFunc || stencilRef != this._currentStencilRef || stencilMask != this._currentStencilMask) {
			this._currentStencilFunc = stencilFunc;
			this._currentStencilRef = stencilRef;
			this._currentStencilMask = stencilMask;
			this.gl.stencilFunc(minko_render_GlContext._compareFuncs.h[stencilFunc],stencilRef,stencilMask);
			this.checkForErrors();
		}
		if(stencilFailOp != this._currentStencilFailOp || stencilZFailOp != this._currentStencilZFailOp || stencilZPassOp != this._currentStencilZPassOp) {
			this._currentStencilFailOp = stencilFailOp;
			this._currentStencilZFailOp = stencilZFailOp;
			this._currentStencilZPassOp = stencilZPassOp;
			this.gl.stencilOp(minko_render_GlContext._stencilOps.h[stencilFailOp],minko_render_GlContext._stencilOps.h[stencilZFailOp],minko_render_GlContext._stencilOps.h[stencilZPassOp]);
			this.checkForErrors();
		}
	}
	readRectPixels(x,y,width,height,pixels) {
		this.gl.readPixels(x,y,width,height,6408,5121,pixels.b);
		this.checkForErrors();
	}
	setScissorTest(scissorTest,scissorBox) {
		var tmp;
		if(scissorTest == this._scissorTest) {
			var b = this._scissorBox;
			tmp = !(Math.abs(scissorBox.x - b.x) >= glm_GLM.EPSILON || Math.abs(scissorBox.y - b.y) >= glm_GLM.EPSILON || Math.abs(scissorBox.z - b.z) >= glm_GLM.EPSILON || Math.abs(scissorBox.w - b.w) >= glm_GLM.EPSILON);
		} else {
			tmp = false;
		}
		if(tmp) {
			return;
		}
		if(scissorTest) {
			this.gl.enable(3089);
			var x = 0;
			var y = 0;
			var width = 0;
			var height = 0;
			if(scissorBox.z < 0 || scissorBox.w < 0) {
				x = this._viewportX;
				y = this._viewportY;
				width = this._viewportWidth;
				height = this._viewportHeight;
			} else {
				x = scissorBox.x | 0;
				y = scissorBox.y | 0;
				width = scissorBox.z | 0;
				height = scissorBox.w | 0;
			}
			this.gl.scissor(x,y,width,height);
		} else {
			this.gl.disable(3089);
		}
		this._scissorTest = scissorTest;
		this._scissorBox = scissorBox;
		this.checkForErrors();
	}
	readPixels(pixels) {
		this.gl.readPixels(this._viewportX,this._viewportY,this._viewportWidth,this._viewportHeight,6408,5121,pixels.b);
		this.checkForErrors();
	}
	setTriangleCulling(triangleCulling) {
		if(triangleCulling == this._currentTriangleCulling) {
			return;
		}
		if(this._currentTriangleCulling == 0) {
			this.gl.enable(2884);
		}
		this._currentTriangleCulling = triangleCulling;
		switch(triangleCulling) {
		case 0:
			this.gl.disable(2884);
			break;
		case 1:
			this.gl.cullFace(1028);
			break;
		case 2:
			this.gl.cullFace(1029);
			break;
		case 3:
			this.gl.cullFace(1032);
			break;
		}
		this.checkForErrors();
	}
	createRTTBuffers(type,textureKey,width,height) {
		var texture = this._textures.h[textureKey];
		var frameBuffer = this.gl.createFramebuffer();
		this.gl.bindFramebuffer(36160,frameBuffer);
		if(type == 0) {
			this.gl.framebufferTexture2D(36160,36064,3553,texture,0);
		} else {
			this.gl.framebufferTexture2D(36160,36064,34069,texture,0);
			this.gl.framebufferTexture2D(36160,36065,34070,texture,0);
			this.gl.framebufferTexture2D(36160,36066,34071,texture,0);
			this.gl.framebufferTexture2D(36160,36067,34072,texture,0);
			this.gl.framebufferTexture2D(36160,36068,34073,texture,0);
			this.gl.framebufferTexture2D(36160,36069,34074,texture,0);
		}
		var renderBuffer = this.gl.createRenderbuffer();
		this.gl.bindRenderbuffer(36161,renderBuffer);
		this.gl.renderbufferStorage(36161,33189,width,height);
		this.gl.framebufferRenderbuffer(36160,36096,36161,renderBuffer);
		var status = this.gl.checkFramebufferStatus(36160);
		if(status != 36053) {
			throw new js__$Boot_HaxeError("");
		}
		this._frameBuffers.h[textureKey] = frameBuffer;
		this._renderBuffers.h[textureKey] = renderBuffer;
		this.gl.bindFramebuffer(36160,null);
		this.gl.bindRenderbuffer(36161,null);
		this.checkForErrors();
	}
	setRenderToBackBuffer() {
		if(this._currentTarget == -1) {
			return;
		}
		this.gl.bindFramebuffer(36160,null);
		this.gl.bindRenderbuffer(36161,null);
		this.configureViewport(this._oldViewportX,this._oldViewportY,this._oldViewportWidth,this._oldViewportHeight);
		this._currentTarget = -1;
		this.checkForErrors();
	}
	setRenderToTexture(texture,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		if(texture == this._currentTarget) {
			return;
		}
		if(this._frameBuffers.h.hasOwnProperty(texture) == false) {
			throw new js__$Boot_HaxeError("this texture cannot be used for RTT");
		}
		if(this._renderBuffers.h.hasOwnProperty(texture) == false) {
			throw new js__$Boot_HaxeError("this texture cannot be used for RTT");
		}
		if(this._currentTarget == -1) {
			this._oldViewportX = this._viewportX;
			this._oldViewportY = this._viewportY;
			this._oldViewportWidth = this._viewportWidth;
			this._oldViewportHeight = this._viewportHeight;
		}
		this._currentTarget = texture;
		this.gl.bindFramebuffer(36160,this._frameBuffers.h[texture]);
		this.checkForErrors();
		if(enableDepthAndStencil) {
			this.gl.bindRenderbuffer(36161,this._renderBuffers.h[texture]);
			this.checkForErrors();
		}
		var textureSize = this._textureSizes.h[texture];
		this.configureViewport(0,0,textureSize.first,textureSize.second);
		this.checkForErrors();
	}
	getError() {
		return 0;
	}
	generateMipmaps(texture) {
		this.gl.bindTexture(3553,this._textures.h[texture]);
		if(this._oglMajorVersion < 3) {
			this.gl.generateMipmap(3553);
		} else {
			this.gl.generateMipmap(3553);
		}
		this.checkForErrors();
		this._currentBoundTexture = texture;
	}
	setUniformFloat(location,count,v) {
		this.gl.uniform1fv(this._uniformInputLocations.h[location],v);
	}
	setUniformFloat2(location,count,v) {
		this.gl.uniform2fv(this._uniformInputLocations.h[location],v);
	}
	setUniformFloat3(location,count,v) {
		this.gl.uniform3fv(this._uniformInputLocations.h[location],v);
	}
	setUniformFloat4(location,count,v) {
		this.gl.uniform4fv(this._uniformInputLocations.h[location],v);
	}
	setUniformMatrix4x4(location,count,v) {
		this.gl.uniformMatrix4fv(this._uniformInputLocations.h[location],false,v);
	}
	setUniformInt(location,count,v) {
		this.gl.uniform1iv(this._uniformInputLocations.h[location],v);
	}
	setUniformInt2(location,count,v) {
		this.gl.uniform2iv(this._uniformInputLocations.h[location],v);
	}
	setUniformInt3(location,count,v) {
		this.gl.uniform3iv(this._uniformInputLocations.h[location],v);
	}
	setUniformInt4(location,count,v) {
		this.gl.uniform4iv(this._uniformInputLocations.h[location],v);
	}
	supportsExtension(extensionNameString) {
		return this.gl.getExtension(extensionNameString) != null;
	}
	availableTextureFormats() {
		if(Lambda.count(minko_render_GlContext._availableTextureFormats) > 0) {
			return minko_render_GlContext._availableTextureFormats;
		}
		var formats = minko_render_GlContext._availableTextureFormats;
		formats.h[0] = 6407;
		formats.h[1] = 6408;
		var rawFormats = this.gl.getParameter(34467);
		var _g = 0;
		_hx_loop1: while(_g < rawFormats.length) {
			var rawFormat = rawFormats[_g];
			++_g;
			switch(rawFormat) {
			case 33776:
				formats.h[2] = 33776;
				break _hx_loop1;
			case 33777:
				formats.h[3] = 33777;
				break _hx_loop1;
			case 33778:
				formats.h[4] = 33778;
				break _hx_loop1;
			case 33779:
				formats.h[5] = 33779;
				break _hx_loop1;
			case 35840:
				formats.h[9] = 35840;
				break _hx_loop1;
			case 35841:
				formats.h[8] = 35841;
				break _hx_loop1;
			case 35842:
				formats.h[11] = 35842;
				break _hx_loop1;
			case 35843:
				formats.h[10] = 35843;
				break _hx_loop1;
			case 35986:
				formats.h[14] = 35986;
				break _hx_loop1;
			case 35987:
				formats.h[15] = 35987;
				break _hx_loop1;
			case 36196:
				formats.h[6] = 36196;
				formats.h[7] = 36196;
				break _hx_loop1;
			case 37175:
				formats.h[12] = 37175;
				break _hx_loop1;
			case 37176:
				formats.h[13] = 37176;
				break _hx_loop1;
			default:
				break _hx_loop1;
			}
		}
		return formats;
	}
	static initializeBlendFactorsMap() {
		var m = new haxe_ds_IntMap();
		m.h[1] = 0;
		m.h[2] = 1;
		m.h[4] = 768;
		m.h[8] = 769;
		m.h[16] = 770;
		m.h[32] = 771;
		m.h[64] = 772;
		m.h[128] = 773;
		m.h[256] = 0;
		m.h[512] = 1;
		m.h[1024] = 774;
		m.h[2048] = 775;
		m.h[32768] = 773;
		m.h[8192] = 771;
		m.h[16384] = 772;
		m.h[32768] = 773;
		return m;
	}
	static initializeDepthFuncsMap() {
		var m = new haxe_ds_IntMap();
		m.h[0] = 519;
		m.h[1] = 514;
		m.h[2] = 516;
		m.h[3] = 518;
		m.h[4] = 513;
		m.h[5] = 515;
		m.h[6] = 512;
		m.h[7] = 517;
		return m;
	}
	static initializeStencilOperationsMap() {
		var m = new haxe_ds_IntMap();
		m.h[0] = 7680;
		m.h[1] = 0;
		m.h[2] = 7681;
		m.h[3] = 7682;
		m.h[4] = 34055;
		m.h[5] = 7683;
		m.h[6] = 34056;
		m.h[7] = 5386;
		return m;
	}
	static create() {
		return new minko_render_GlContext();
	}
}
$hx_exports["minko"]["render"]["GlContext"] = minko_render_GlContext;
minko_render_GlContext.__name__ = true;
minko_render_GlContext.__super__ = minko_render_AbstractContext;
Object.assign(minko_render_GlContext.prototype, {
	__class__: minko_render_GlContext
});
class minko_render_IndexBuffer extends minko_render_AbstractResource {
	constructor(context) {
		super(context);
		this._data = [];
		this._numIndices = 0;
		this._changed = new minko_signal_Signal();
	}
	get_data() {
		return this._data;
	}
	set_data(v) {
		this._data = v;
		return this._data;
	}
	get_dataPointer() {
		return this._data;
	}
	get_numIndices() {
		return this._numIndices;
	}
	upload() {
		this.uploadOffset();
	}
	uploadOffset(offset,count) {
		if(count == null) {
			count = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		if(this.get_data().length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createIndexBuffer(this.get_data().length);
		}
		var oldNumIndices = this._numIndices;
		this._numIndices = count > 0 ? count : this.get_data().length;
		this._context.uploaderIndexBufferData(this._id,offset,this._numIndices,this.get_data());
		if(this._numIndices != oldNumIndices) {
			this._changed.execute(this);
		}
	}
	uploadOffsetData(offset,count,data) {
		if(data.length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createIndexBuffer(data.length);
		}
		var numIndices = count > 0 ? count : data.length;
		this._numIndices = numIndices;
		this._context.uploaderIndexBufferData(this._id,offset,numIndices,data);
		this._changed.execute(this);
	}
	dispose() {
		if(this._id != -1) {
			this._context.deleteIndexBuffer(this._id);
		}
		this._id = -1;
		this._numIndices = 0;
		this.disposeData();
		this._changed.execute(null);
	}
	disposeData() {
		if(this._data != null) {
			this._data = null;
		}
	}
	equals(indexBuffer) {
		return this.get_dataPointer() == indexBuffer.get_dataPointer();
	}
	get_changed() {
		return this._changed;
	}
	static create(context) {
		return new minko_render_IndexBuffer(context);
	}
	static createbyData(context,data) {
		var ptr = new minko_render_IndexBuffer(context);
		ptr.set_data(data);
		ptr.upload();
		return ptr;
	}
}
$hx_exports["minko"]["render"]["IndexBuffer"] = minko_render_IndexBuffer;
minko_render_IndexBuffer.__name__ = true;
minko_render_IndexBuffer.__super__ = minko_render_AbstractResource;
Object.assign(minko_render_IndexBuffer.prototype, {
	__class__: minko_render_IndexBuffer
});
class minko_render_Pass extends minko_Enable_$uuid {
	constructor(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings) {
		minko_Has_$uuid._hx_skip_constructor = true;
		super();
		minko_Has_$uuid._hx_skip_constructor = false;
		this._hx_constructor(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings);
	}
	_hx_constructor(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings) {
		this._name = name;
		this._isForward = isForward;
		this._programTemplate = program;
		this._attributeBindings = minko_data_BindingMapBase.copyFrom(new minko_data_BindingMapBase(),attributeBindings);
		this._uniformBindings = minko_data_BindingMapBase.copyFrom(new minko_data_BindingMapBase(),uniformBindings);
		this._stateBindings = minko_data_BindingMapBase.copyFrom(new minko_data_BindingMapBase(),stateBindings);
		this._macroBindings = minko_data_MacroBindingMap.copyFrom2(new minko_data_MacroBindingMap(),macroBindings);
		this._states = minko_render_States.createbyProvider(this._stateBindings.defaultValues.get_providers()[0]);
		this._signatureToProgram = new haxe_ds_ObjectMap();
		this._uniformFunctions = new haxe_ds_StringMap();
		this._attributeFunctions = new haxe_ds_StringMap();
		this._macroFunctions = new haxe_ds_StringMap();
		this._signature = new haxe_ds_StringMap();
		super._hx_constructor();
		this.enable_uuid();
	}
	dispose() {
		var signatureAndProgram = this._signatureToProgram.iterator();
		while(signatureAndProgram.hasNext()) {
			var signatureAndProgram1 = signatureAndProgram.next();
			if(signatureAndProgram1 != null) {
				signatureAndProgram1.dispose();
			}
		}
	}
	get_name() {
		return this._name;
	}
	get_isForward() {
		return this._isForward;
	}
	get_program() {
		return this._programTemplate;
	}
	get_attributeBindings() {
		return this._attributeBindings;
	}
	get_uniformBindings() {
		return this._uniformBindings;
	}
	get_stateBindings() {
		return this._stateBindings;
	}
	get_macroBindings() {
		return this._macroBindings;
	}
	get_states() {
		return this._states;
	}
	setUniform(name,values) {
		var _this = this._uniformFunctions;
		var value = function(program) {
			minko_render_Pass.setUniformOnProgram(program,name,values);
		};
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
		if(this._programTemplate.get_isReady()) {
			this._programTemplate.setUniform(name,values);
		}
		var signatureAndProgram = this._signatureToProgram.iterator();
		while(signatureAndProgram.hasNext()) {
			var signatureAndProgram1 = signatureAndProgram.next();
			signatureAndProgram1.setUniform(name,values);
		}
	}
	setAttribute(name,attribute) {
		var _this = this._attributeFunctions;
		var value = function(program) {
			minko_render_Pass.setVertexAttributeOnProgram(program,name,attribute);
		};
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
		if(this._programTemplate.get_isReady()) {
			this._programTemplate.setAttributebyName(name,attribute);
		}
		var signatureAndProgram = this._signatureToProgram.iterator();
		while(signatureAndProgram.hasNext()) {
			var signatureAndProgram1 = signatureAndProgram.next();
			signatureAndProgram1.setAttributebyName(name,attribute);
		}
	}
	define(macroName) {
		var _this = this._macroFunctions;
		var value = function(program) {
			minko_render_Pass.defineOnProgram(program,macroName);
		};
		if(__map_reserved[macroName] != null) {
			_this.setReserved(macroName,value);
		} else {
			_this.h[macroName] = value;
		}
		this._programTemplate.define(macroName);
	}
	setDefine(macroName,macroValue) {
		var _this = this._macroFunctions;
		var value = function(program) {
			minko_render_Pass.defineOnProgramWithValue(program,macroName,macroValue);
		};
		if(__map_reserved[macroName] != null) {
			_this.setReserved(macroName,value);
		} else {
			_this.h[macroName] = value;
		}
		this._programTemplate.setDefine(macroName,macroValue);
	}
	selectProgram(vars,targetData,rendererData,rootData) {
		var program = null;
		var signature = new minko_render_ProgramSignature();
		if(Lambda.count(this._macroBindings.bindings) == 0) {
			program = this._programTemplate;
		} else {
			signature.bind(this._macroBindings,vars,targetData,rendererData,rootData);
			var signatureKey = signature.get_key();
			var _this = this._signature;
			var foundProgramIt = __map_reserved[signatureKey] != null ? _this.existsReserved(signatureKey) : _this.h.hasOwnProperty(signatureKey);
			if(foundProgramIt) {
				signature.dispose();
				var _this1 = this._signature;
				signature = __map_reserved[signatureKey] != null ? _this1.getReserved(signatureKey) : _this1.h[signatureKey];
				program = this._signatureToProgram.h[signature.__id__];
				return new minko_Tuple(program,signature);
			} else {
				var _this2 = this._signature;
				if(__map_reserved[signatureKey] != null) {
					_this2.setReserved(signatureKey,signature);
				} else {
					_this2.h[signatureKey] = signature;
				}
				program = minko_render_Program.createbyProgram(this._programTemplate,true);
				this._signatureToProgram.set(signature,program);
				signature.updateProgram(program);
			}
		}
		return new minko_Tuple(this.finalizeProgram(program),signature);
	}
	finalizeProgram(program) {
		if(!program.get_vertexShader().get_isReady()) {
			program.get_vertexShader().upload();
		}
		if(!program.get_fragmentShader().get_isReady()) {
			program.get_fragmentShader().upload();
		}
		if(!program.get_isReady()) {
			try {
				program.upload();
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(js_Boot.__instanceof(e1,haxe_io_Error)) {
					throw new js__$Boot_HaxeError(e1);
				} else {
					throw e;
				}
			}
			var _this = this._uniformFunctions;
			var nameAndFunc = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(nameAndFunc.hasNext()) {
				var nameAndFunc1 = nameAndFunc.next();
				nameAndFunc1(program);
			}
			var _this1 = this._attributeFunctions;
			var nameAndFunc2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(nameAndFunc2.hasNext()) {
				var nameAndFunc3 = nameAndFunc2.next();
				nameAndFunc3(program);
			}
			var _this2 = this._macroFunctions;
			var nameAndFunc4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(nameAndFunc4.hasNext()) {
				var nameAndFunc5 = nameAndFunc4.next();
				nameAndFunc5(program);
			}
		}
		return program;
	}
	static create(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings) {
		return new minko_render_Pass(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings);
	}
	static createbyPass(pass,deepCopy) {
		if(deepCopy == null) {
			deepCopy = false;
		}
		var p = minko_render_Pass.create(pass._name,pass._isForward,deepCopy ? minko_render_Program.createbyProgram(pass._programTemplate,deepCopy) : pass._programTemplate,pass._attributeBindings,pass._uniformBindings,pass._stateBindings,pass._macroBindings);
		var signatureProgram = pass._signatureToProgram.keys();
		while(signatureProgram.hasNext()) {
			var signatureProgram1 = signatureProgram.next();
			var programSignature = new minko_render_ProgramSignature().copyFrom(signatureProgram1);
			p._signatureToProgram.set(programSignature,pass._signatureToProgram.h[signatureProgram1.__id__]);
			var _this = p._signature;
			var key = programSignature.get_key();
			if(__map_reserved[key] != null) {
				_this.setReserved(key,programSignature);
			} else {
				_this.h[key] = programSignature;
			}
		}
		p._uniformFunctions = pass._uniformFunctions;
		p._attributeFunctions = pass._attributeFunctions;
		p._macroFunctions = pass._macroFunctions;
		if(pass._programTemplate.get_isReady()) {
			var _this1 = p._uniformFunctions;
			var nameAndFunc = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(nameAndFunc.hasNext()) {
				var nameAndFunc1 = nameAndFunc.next();
				nameAndFunc1(pass._programTemplate);
			}
			var _this2 = p._attributeFunctions;
			var nameAndFunc2 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(nameAndFunc2.hasNext()) {
				var nameAndFunc3 = nameAndFunc2.next();
				nameAndFunc3(pass._programTemplate);
			}
			var _this3 = p._macroFunctions;
			var nameAndFunc4 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
			while(nameAndFunc4.hasNext()) {
				var nameAndFunc5 = nameAndFunc4.next();
				nameAndFunc5(pass._programTemplate);
			}
		}
		return p;
	}
	static setUniformOnProgram(program,name,values) {
		program.setUniform(name,values);
	}
	static setVertexAttributeOnProgram(program,name,attribute) {
		program.setAttributebyName(name,attribute);
	}
	static defineOnProgram(program,macroName) {
		program.define(macroName);
	}
	static defineOnProgramWithValue(program,macroName,value) {
	}
}
$hx_exports["minko"]["render"]["Pass"] = minko_render_Pass;
minko_render_Pass.__name__ = true;
minko_render_Pass.__super__ = minko_Enable_$uuid;
Object.assign(minko_render_Pass.prototype, {
	__class__: minko_render_Pass
});
class minko_render_Program extends minko_render_AbstractResource {
	constructor(_name,context) {
		super(context);
		this._name = _name;
		this._inputs = new minko_render_ProgramInputs();
		this._setUniforms = [];
		this._setTextures = [];
		this._setAttributes = [];
		this._definedMacros = [];
	}
	clearDefinedMacros() {
		this._definedMacros = [];
		this._vertexShader.clearDefinedMacros();
		this._fragmentShader.clearDefinedMacros();
	}
	get_name() {
		return this._name;
	}
	get_vertexShader() {
		return this._vertexShader;
	}
	get_fragmentShader() {
		return this._fragmentShader;
	}
	get_setTextureNames() {
		return this._setTextures;
	}
	get_setAttributeNames() {
		return this._setAttributes;
	}
	get_setUniformNames() {
		return this._setUniforms;
	}
	get_definedMacroNames() {
		return this._definedMacros;
	}
	get_inputs() {
		return this._inputs;
	}
	upload() {
		this._id = this.get_context().createProgram();
		this._context.attachShader(this._id,this._vertexShader.get_id());
		this._context.attachShader(this._id,this._fragmentShader.get_id());
		this._context.linkProgram(this._id);
		this._inputs.copyFrom(this._context.getProgramInputs(this._id));
	}
	dispose() {
		if(this._id != -1) {
			this._context.deleteProgram(this._id);
			this._id = -1;
		}
		this._vertexShader = null;
		this._fragmentShader = null;
	}
	setUniform(name,v) {
	}
	setUniformFloat(size,name,count,v) {
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			switch(size) {
			case 1:
				this._context.setUniformFloat(it.location,count,v);
				break;
			case 2:
				this._context.setUniformFloat2(it.location,count,v);
				break;
			case 3:
				this._context.setUniformFloat3(it.location,count,v);
				break;
			case 4:
				this._context.setUniformFloat4(it.location,count,v);
				break;
			case 16:
				this._context.setUniformMatrix4x4(it.location,count,v);
				break;
			}
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name);
		}
		return this;
	}
	setUniformInt(size,name,count,v) {
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			switch(size) {
			case 1:
				this._context.setUniformInt(it.location,count,v);
				break;
			case 2:
				this._context.setUniformInt2(it.location,count,v);
				break;
			case 3:
				this._context.setUniformInt3(it.location,count,v);
				break;
			case 4:
				this._context.setUniformInt4(it.location,count,v);
				break;
			}
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name);
		}
		return this;
	}
	setUniformFloat1(name,v) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat(it.location,1,v);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	setUniformFloat2(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat2(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	setUniformFloat3(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat3(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	setUniformFloat4(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat4(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	setUniformMatrix4x4(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformMatrix4x4(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	setUniformInt1(name,v) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt(it.location,1,v);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	setUniformInt2(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt2(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	setUniformInt3(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt3(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	setUniformInt4(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt4(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	setUniformAbstractTexture(name,texture) {
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setTextureAt(this._setTextures.length,texture.get_id(),it.location);
			this._context.setProgram(oldProgram);
			this._setTextures.push(name);
			this._setUniforms.push(name);
		}
		return this;
	}
	define(macroName) {
		this._vertexShader.define(macroName);
		this._fragmentShader.define(macroName);
		this._definedMacros.push(macroName);
		return this;
	}
	setDefine(macroName,value) {
		this._vertexShader.setDefine(macroName,value);
		this._fragmentShader.setDefine(macroName,value);
		this._definedMacros.push(macroName);
		return this;
	}
	setAttributebyName(name,attribute) {
		return this.setAttribute(name,attribute,name);
	}
	setAttribute(name,attribute,attributeName) {
		var it = Lambda.find(this._inputs.get_attributes(),function(a) {
			return a.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setVertexBufferAt(it.location,attribute.resourceId,attribute.size,attribute.vertexSize,attribute.offset);
			this._context.setProgram(oldProgram);
			this._setAttributes.push(name);
		}
		return this;
	}
	static create(name,context) {
		return new minko_render_Program(name,context);
	}
	static createbyProgram(program,deepCopy) {
		if(deepCopy == null) {
			deepCopy = false;
		}
		var p = minko_render_Program.create(program._name,program._context);
		p._vertexShader = deepCopy ? minko_render_Shader.createbyShader(program._vertexShader) : program._vertexShader;
		p._fragmentShader = deepCopy ? minko_render_Shader.createbyShader(program._fragmentShader) : program._fragmentShader;
		p._inputs = new minko_render_ProgramInputs();
		p._setTextures = [];
		p._setAttributes = [];
		return p;
	}
	static createbyShader(name,context,vertexShader,fragmentShader) {
		var p = minko_render_Program.create(name,context);
		p._vertexShader = vertexShader;
		p._fragmentShader = fragmentShader;
		return p;
	}
}
$hx_exports["minko"]["render"]["Program"] = minko_render_Program;
minko_render_Program.__name__ = true;
minko_render_Program.__super__ = minko_render_AbstractResource;
Object.assign(minko_render_Program.prototype, {
	__class__: minko_render_Program
});
class minko_render_UniformInput {
	constructor(name,location,size,type) {
		this.name = name;
		this.location = location;
		this.size = size;
		this.type = type;
	}
}
$hx_exports["minko"]["render"]["AbstractInput"] = minko_render_UniformInput;
minko_render_UniformInput.__name__ = true;
Object.assign(minko_render_UniformInput.prototype, {
	__class__: minko_render_UniformInput
});
class minko_render_AttributeInput {
	constructor(name,location) {
		this.name = name;
		this.location = location;
	}
}
$hx_exports["minko"]["render"]["AttributeInput"] = minko_render_AttributeInput;
minko_render_AttributeInput.__name__ = true;
Object.assign(minko_render_AttributeInput.prototype, {
	__class__: minko_render_AttributeInput
});
class minko_render_ProgramInputs {
	constructor() {
		this._uniforms = [];
		this._attributes = [];
	}
	get_uniforms() {
		return this._uniforms;
	}
	get_attributes() {
		return this._attributes;
	}
	copyFrom(inputs) {
		this._uniforms = inputs._uniforms.concat([]);
		this._attributes = inputs._attributes.concat([]);
		return this;
	}
	setProgramInputs(uniforms,attributes) {
		this._uniforms = uniforms.concat([]);
		this._attributes = attributes.concat([]);
	}
	static typeToString(type) {
		switch(type) {
		case 0:
			return "unknown";
		case 1:
			return "int1";
		case 2:
			return "int2";
		case 3:
			return "int3";
		case 4:
			return "int4";
		case 5:
			return "bool1";
		case 6:
			return "bool2";
		case 7:
			return "bool3";
		case 8:
			return "bool4";
		case 9:
			return "float1";
		case 10:
			return "float2";
		case 11:
			return "float3";
		case 12:
			return "float4";
		case 13:
			return "float9";
		case 14:
			return "float16";
		case 15:
			return "sampler2d";
		case 16:
			return "samplerCube";
		default:
			throw new js__$Boot_HaxeError("type");
		}
	}
}
$hx_exports["minko"]["render"]["ProgramInputs"] = minko_render_ProgramInputs;
minko_render_ProgramInputs.__name__ = true;
Object.assign(minko_render_ProgramInputs.prototype, {
	__class__: minko_render_ProgramInputs
});
class minko_render_ProgramSignature {
	constructor() {
		this._mask = [];
		this._values = [];
		this._types = [];
		this._macros = [];
	}
	get_key() {
		return this._macros.toString() + this._values.toString() + this._types.toString() + this._mask.toString();
	}
	bind(macroBindings,variables,targetData,rendererData,rootData) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 64) {
			var i = _g1++;
			_g.push(false);
		}
		this._mask = _g;
		this._values = [];
		this._macros = [];
		this._types = [];
		var macroId = 0;
		var _g2 = 0;
		var _g3 = macroBindings.defaultValues.get_providers();
		while(_g2 < _g3.length) {
			var provider = _g3[_g2];
			++_g2;
			var propertyNameAndValue = provider.keys();
			while(propertyNameAndValue.hasNext()) {
				var propertyNameAndValue1 = propertyNameAndValue.next();
				var _this = macroBindings.bindings;
				if(!(__map_reserved[propertyNameAndValue1] != null ? _this.existsReserved(propertyNameAndValue1) : _this.h.hasOwnProperty(propertyNameAndValue1))) {
					this._macros.push(propertyNameAndValue1);
					var _this1 = macroBindings.types;
					var type = __map_reserved[propertyNameAndValue1] != null ? _this1.getReserved(propertyNameAndValue1) : _this1.h[propertyNameAndValue1];
					this._types.push(type);
					if(type != 0) {
						this._values.push(provider.get(propertyNameAndValue1));
					} else {
						this._values.push(0);
					}
					this._mask[macroId] = true;
					++macroId;
				}
			}
		}
		var macroNameAndBinding = macroBindings.bindings.keys();
		while(macroNameAndBinding.hasNext()) {
			var macroNameAndBinding1 = macroNameAndBinding.next();
			var macroName = macroNameAndBinding1;
			var _this2 = macroBindings.bindings;
			var macroBinding = __map_reserved[macroNameAndBinding1] != null ? _this2.getReserved(macroNameAndBinding1) : _this2.h[macroNameAndBinding1];
			if(macroName == "RADIANCE_MAP_MAX_LOD") {
				haxe_Log.trace("radianceMap.maxAvailableLod",{ fileName : "minko/render/ProgramSignature.hx", lineNumber : 62, className : "minko.render.ProgramSignature", methodName : "bind"});
			}
			var propertyName = minko_data_Store.getActualPropertyName(variables,macroBinding.propertyName);
			var store = targetData;
			if(macroBinding.source != 0) {
				store = macroBinding.source == 1 ? rendererData : rootData;
			}
			var macroIsDefined = store.hasProperty(propertyName);
			if(macroIsDefined) {
				var _this3 = macroBindings.types;
				var type1 = __map_reserved[macroName] != null ? _this3.getReserved(macroName) : _this3.h[macroName];
				if(macroId == 64) {
					throw new js__$Boot_HaxeError("");
				}
				this._macros.push(macroName);
				this._types.push(type1);
				if(type1 != 0) {
					var value = this.getValueFromStore(macroIsDefined ? store : macroBindings.defaultValues,propertyName,type1);
					if(type1 == 1) {
						value = Math.max(macroBinding.minValue,Math.min(macroBinding.maxValue,value));
					}
					this._values.push(value);
				} else {
					this._values.push(0);
				}
				this._mask[macroId] = true;
				++macroId;
			}
		}
	}
	copyFrom(signature) {
		this._mask = signature._mask.concat([]);
		this._values = signature._values;
		this.key = signature.get_key();
		return this;
	}
	updateProgram(program) {
		var _g = 0;
		while(_g < 64) {
			var macroIndex = _g++;
			if(this._mask[macroIndex]) {
				switch(this._types[macroIndex]) {
				case 0:
					program.define(this._macros[macroIndex]);
					break;
				case 1:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 2:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 3:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 4:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 5:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 6:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 7:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 8:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 9:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 10:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 11:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 12:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 13:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				case 14:
					program.setDefine(this._macros[macroIndex],this._values[macroIndex]);
					break;
				}
			}
		}
	}
	getValueFromStore(store,propertyName,type) {
		switch(type) {
		case 0:
			throw new js__$Boot_HaxeError("");
		case 1:
			return store.get(propertyName);
		case 2:
			return store.get(propertyName);
		case 3:
			return store.get(propertyName);
		case 4:
			return store.get(propertyName);
		case 5:
			return store.get(propertyName);
		case 6:
			return store.get(propertyName);
		case 7:
			return store.get(propertyName);
		case 8:
			return store.get(propertyName);
		case 9:
			return store.get(propertyName);
		case 10:
			return store.get(propertyName);
		case 11:
			return store.get(propertyName);
		case 12:
			return store.get(propertyName);
		case 13:
			return store.get(propertyName);
		case 14:
			return store.get(propertyName);
		}
	}
	dispose() {
	}
}
$hx_exports["minko"]["render"]["ProgramSignature"] = minko_render_ProgramSignature;
minko_render_ProgramSignature.__name__ = true;
Object.assign(minko_render_ProgramSignature.prototype, {
	__class__: minko_render_ProgramSignature
});
class minko_render_RectangleTexture extends minko_render_AbstractTexture {
	constructor(context,width,height,format,filename) {
		if(filename == null) {
			filename = "";
		}
		super(0,context,width,height,format,false,false,false,filename);
	}
	get_data() {
		return this._data;
	}
	setData(data,widthGPU,heightGPU) {
		if(heightGPU == null) {
			heightGPU = -1;
		}
		if(widthGPU == null) {
			widthGPU = -1;
		}
		if(widthGPU >= 0) {
			if(widthGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("widthGPU");
			}
			this._width = widthGPU;
			this._widthGPU = widthGPU;
		}
		if(heightGPU >= 0) {
			if(heightGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("heightGPU");
			}
			this._height = heightGPU;
			this._heightGPU = heightGPU;
		}
		var size = this._width * this._height * 4;
		this._data = new haxe_io_Bytes(new ArrayBuffer(size));
		if(this._format == 1) {
			this._data.blit(0,data,0,size);
		} else if(this._format == 0) {
			var i = 0;
			var j = 0;
			while(j < size) {
				this._data.b[j] = data.b[i];
				this._data.b[j + 1] = data.b[i + 1];
				this._data.b[j + 2] = data.b[i + 2];
				this._data.b[j + 3] = 255;
				i += 3;
				j += 4;
			}
		}
	}
	resize(width,height,resizeSmoothly) {
		var previousWidth = this.get_width();
		var previousHeight = this.get_height();
		var previousData = this._data;
		this._data = minko_render_AbstractTexture.resizeData(previousWidth,previousHeight,previousData,width,height,resizeSmoothly);
		this._width = width;
		this._widthGPU = width;
		this._height = height;
		this._heightGPU = height;
	}
	dispose() {
		if(this._id != -1) {
			this._context.deleteTexture(this._id);
			this._id = -1;
		}
		this.disposeData();
	}
	disposeData() {
		this._data = null;
	}
	upload() {
		if(this._id == -1) {
			this._id = this._context.createRectangleTexture(this._type,this._widthGPU,this._heightGPU);
		}
		if(this._data.length > 0) {
			this._context.uploadTexture2dData(this._id,this._widthGPU,this._heightGPU,0,this._data);
		}
	}
	static create(context,width,height,format,filename) {
		if(filename == null) {
			filename = "";
		}
		return new minko_render_RectangleTexture(context,width,height,format,filename);
	}
}
$hx_exports["minko"]["render"]["RectangleTexture"] = minko_render_RectangleTexture;
minko_render_RectangleTexture.__name__ = true;
minko_render_RectangleTexture.__super__ = minko_render_AbstractTexture;
Object.assign(minko_render_RectangleTexture.prototype, {
	__class__: minko_render_RectangleTexture
});
class minko_render_SamplerStates {
	constructor(wm,tf,mf) {
		this.wrapMode = wm;
		this.textureFilter = tf;
		this.mipFilter = mf;
	}
	static uniformNameToSamplerStateName(uniformName,sampleState) {
		return uniformName + "/" + sampleState;
	}
	static uniformNameToSamplerStateBindingName(uniformName,samplerState) {
		var samplerStateCapitalized = samplerState.charAt(0).toUpperCase() + HxOverrides.substr(samplerState,1,null);
		return uniformName + samplerStateCapitalized;
	}
	static stringToWrapMode(value) {
		if(value == "repeat") {
			return 1;
		} else {
			return 0;
		}
	}
	static stringToTextureFilter(value) {
		if(value == "linear") {
			return 1;
		} else {
			return 0;
		}
	}
	static stringToMipFilter(value) {
		if(value == "linear") {
			return 2;
		} else if(value == "nearest") {
			return 1;
		} else {
			return 0;
		}
	}
}
$hx_exports["minko"]["render"]["SamplerStates"] = minko_render_SamplerStates;
minko_render_SamplerStates.__name__ = true;
Object.assign(minko_render_SamplerStates.prototype, {
	__class__: minko_render_SamplerStates
});
class minko_render_Shader extends minko_render_AbstractResource {
	constructor(context,type) {
		super(context);
		this._type = type;
		this._definedMacros = new haxe_ds_StringMap();
	}
	clearDefinedMacros() {
		this._definedMacros = new haxe_ds_StringMap();
	}
	get_type() {
		return this._type;
	}
	get_source() {
		return this._source;
	}
	set_source(v) {
		this._source = v;
		return v;
	}
	define(macroName) {
		if(!Lambda.has(this._definedMacros,macroName)) {
			var _this = this._definedMacros;
			if(__map_reserved[macroName] != null) {
				_this.setReserved(macroName,null);
			} else {
				_this.h[macroName] = null;
			}
		}
	}
	setDefine(macroName,value) {
		if(!Lambda.has(this._definedMacros,macroName)) {
			var _this = this._definedMacros;
			if(__map_reserved[macroName] != null) {
				_this.setReserved(macroName,value);
			} else {
				_this.h[macroName] = value;
			}
		}
	}
	dispose() {
		if(this._type == 0) {
			this._context.deleteVertexShader(this._id);
		} else if(this._type == 1) {
			this._context.deleteFragmentShader(this._id);
		}
		this._id = -1;
	}
	upload() {
		if(this._type == 0) {
			this._id = this._context.createVertexShader();
		} else {
			this._id = this._context.createFragmentShader();
		}
		var source = "#version 100\n  ";
		var _gthis = this;
		var s = this._definedMacros.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			var _this = _gthis._definedMacros;
			var value = __map_reserved[s1] != null ? _this.getReserved(s1) : _this.h[s1];
			source += value != null ? "#define " + s1 + " " + value + "\n" : "#define " + s1 + "\n";
		}
		source += this._source;
		this._context.setShaderSource(this._id,source);
		this._context.compileShader(this._id);
	}
	static create(context,type) {
		return new minko_render_Shader(context,type);
	}
	static createbySource(context,type,source) {
		var s = minko_render_Shader.create(context,type);
		s._source = source;
		return s;
	}
	static createbyShader(shader) {
		var s = minko_render_Shader.create(shader.get_context(),shader._type);
		s._source = shader._source;
		var k = shader._definedMacros.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var _this = s._definedMacros;
			var _this1 = shader._definedMacros;
			var value = __map_reserved[k1] != null ? _this1.getReserved(k1) : _this1.h[k1];
			if(__map_reserved[k1] != null) {
				_this.setReserved(k1,value);
			} else {
				_this.h[k1] = value;
			}
		}
		return s;
	}
}
$hx_exports["minko"]["render"]["Shader"] = minko_render_Shader;
minko_render_Shader.__name__ = true;
minko_render_Shader.__super__ = minko_render_AbstractResource;
Object.assign(minko_render_Shader.prototype, {
	__class__: minko_render_Shader
});
class minko_render_States {
	constructor(priority,zSorted,blendingSourceFactor,blendingDestinationFactor,colorMask,depthMask,depthFunction,triangleCulling,stencilFunction,stencilRef,stencilMask,stencilFailOp,stencilZFailOp,stencilZPassOp,scissorTest,scissorBox,target) {
		if(scissorTest == null) {
			scissorTest = false;
		}
		if(stencilZPassOp == null) {
			stencilZPassOp = 0;
		}
		if(stencilZFailOp == null) {
			stencilZFailOp = 0;
		}
		if(stencilFailOp == null) {
			stencilFailOp = 0;
		}
		if(stencilMask == null) {
			stencilMask = 1;
		}
		if(stencilRef == null) {
			stencilRef = 0;
		}
		if(stencilFunction == null) {
			stencilFunction = 0;
		}
		if(triangleCulling == null) {
			triangleCulling = 2;
		}
		if(depthFunction == null) {
			depthFunction = 4;
		}
		if(depthMask == null) {
			depthMask = true;
		}
		if(colorMask == null) {
			colorMask = true;
		}
		if(blendingDestinationFactor == null) {
			blendingDestinationFactor = 256;
		}
		if(blendingSourceFactor == null) {
			blendingSourceFactor = 2;
		}
		if(zSorted == null) {
			zSorted = false;
		}
		this._data = minko_data_Provider.create();
		this.set_priority(priority == null ? minko_render_States.DEFAULT_PRIORITY : priority);
		this.set_zSorted(zSorted);
		this.set_blendingSourceFactor(blendingSourceFactor);
		this.set_blendingDestinationFactor(blendingDestinationFactor);
		this.set_colorMask(colorMask);
		this.set_depthMask(depthMask);
		this.set_depthFunction(depthFunction);
		this.set_triangleCulling(triangleCulling);
		this.set_stencilFunction(stencilFunction);
		this.set_stencilReference(stencilRef);
		this.set_stencilMask(stencilMask);
		this.set_stencilFailOperation(stencilFailOp);
		this.set_stencilZFailOperation(stencilZFailOp);
		this.set_stencilZPassOperation(stencilZPassOp);
		this.set_scissorTest(scissorTest);
		this.set_scissorBox(scissorBox == null ? minko_render_States.DEFAULT_SCISSOR_BOX : scissorBox);
		this.set_target(target == null ? minko_render_States.DEFAULT_TARGET : target);
	}
	copyFrom(states) {
		this._data = minko_data_Provider.createbyProvider(states._data);
		return this;
	}
	resetDefaultValues() {
		this._data.set("priority",minko_render_States.DEFAULT_PRIORITY);
		this._data.set("zSorted",false);
		this._data.set("blendingSource",2);
		this._data.set("blendingDestination",256);
		this._data.set("colorMask",true);
		this._data.set("depthMask",true);
		this._data.set("depthFunction",4);
		this._data.set("triangleCulling",2);
		this._data.set("stencilFunction",0);
		this._data.set("stencilReference",0);
		this._data.set("stencilMask",1);
		this._data.set("stencilFailOperation",0);
		this._data.set("stencilZFailOperation",0);
		this._data.set("stencilZPassOperation",0);
		this._data.set("scissorTest",false);
		this._data.set("scissorBox",minko_render_States.DEFAULT_SCISSOR_BOX);
		this._data.set("target",minko_render_States.DEFAULT_TARGET);
	}
	get_data() {
		return this._data;
	}
	set_data(v) {
		this._data = v;
		return v;
	}
	get_priority() {
		return this._data.get("priority");
	}
	set_priority(priority) {
		this._data.set("priority",priority);
		return priority;
	}
	get_zSorted() {
		return this._data.get("zSorted");
	}
	set_zSorted(zSorted) {
		this._data.set("zSorted",zSorted);
		return zSorted;
	}
	get_blendingSourceFactor() {
		return this._data.get("blendingSource");
	}
	set_blendingSourceFactor(value) {
		this._data.set("blendingSource",value);
		return value;
	}
	get_blendingDestinationFactor() {
		return this._data.get("blendingDestination");
	}
	set_blendingDestinationFactor(value) {
		this._data.set("blendingDestination",value);
		return value;
	}
	get_colorMask() {
		return this._data.get("colorMask");
	}
	set_colorMask(value) {
		this._data.set("colorMask",value);
		return value;
	}
	get_depthMask() {
		return this._data.get("depthMask");
	}
	set_depthMask(value) {
		this._data.set("depthMask",value);
		return value;
	}
	get_depthFunction() {
		return this._data.get("depthFunction");
	}
	set_depthFunction(value) {
		this._data.set("depthFunction",value);
		return value;
	}
	get_triangleCulling() {
		return this._data.get("triangleCulling");
	}
	set_triangleCulling(value) {
		this._data.set("triangleCulling",value);
		return value;
	}
	get_stencilFunction() {
		return this._data.get("stencilFunction");
	}
	set_stencilFunction(value) {
		this._data.set("stencilFunction",value);
		return value;
	}
	get_stencilReference() {
		return this._data.get("stencilReference");
	}
	set_stencilReference(value) {
		this._data.set("stencilReference",value);
		return value;
	}
	get_stencilMask() {
		return this._data.get("stencilMask");
	}
	set_stencilMask(value) {
		this._data.set("stencilMask",value);
		return value;
	}
	get_stencilFailOperation() {
		return this._data.get("stencilFailOperation");
	}
	set_stencilFailOperation(value) {
		this._data.set("stencilFailOperation",value);
		return value;
	}
	get_stencilZFailOperation() {
		return this._data.get("stencilZFailOperation");
	}
	set_stencilZFailOperation(value) {
		this._data.set("stencilZFailOperation",value);
		return value;
	}
	get_stencilZPassOperation() {
		return this._data.get("stencilZPassOperation");
	}
	set_stencilZPassOperation(value) {
		this._data.set("stencilZPassOperation",value);
		return value;
	}
	get_scissorTest() {
		return this._data.get("scissorTest");
	}
	set_scissorTest(value) {
		this._data.set("scissorTest",value);
		return value;
	}
	get_scissorBox() {
		return this._data.get("scissorBox");
	}
	set_scissorBox(value) {
		this._data.set("scissorBox",value);
		return value;
	}
	get_target() {
		return this._data.get("target");
	}
	set_target(value) {
		this._data.set("target",value);
		return value;
	}
	static createbyProvider(a) {
		var s = new minko_render_States();
		s.set_data(a);
		return s;
	}
}
$hx_exports["minko"]["render"]["States"] = minko_render_States;
minko_render_States.__name__ = true;
Object.assign(minko_render_States.prototype, {
	__class__: minko_render_States
});
class minko_render_Texture extends minko_render_AbstractTexture {
	constructor(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename) {
		if(filename == null) {
			filename = "";
		}
		if(format == null) {
			format = 1;
		}
		if(resizeSmoothly == null) {
			resizeSmoothly = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		super(0,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
		this._data = [];
	}
	get_data() {
		return this._data;
	}
	setData(data,widthGPU,heightGPU) {
		if(widthGPU >= 0) {
			if(widthGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("widthGPU");
			}
			this._width = widthGPU;
			this._widthGPU = widthGPU;
		}
		if(heightGPU >= 0) {
			if(heightGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("heightGPU");
			}
			this._height = heightGPU;
			this._heightGPU = heightGPU;
		}
		if(!minko_render_TextureFormatInfo.isCompressed(this._format)) {
			var size = this._width * this._height * 4;
			var rgba = new haxe_io_Bytes(new ArrayBuffer(size));
			if(this._format == 1) {
				rgba.blit(0,data,0,size);
			} else if(this._format == 0) {
				this._format = 1;
				var i = 0;
				var j = 0;
				while(j < size) {
					rgba.b[j] = data.b[i];
					rgba.b[j + 1] = data.b[i + 1];
					rgba.b[j + 2] = data.b[i + 2];
					rgba.b[j + 3] = 255;
					i += 3;
					j += 4;
				}
			}
			rgba = minko_render_AbstractTexture.resizeData(this._width,this._height,rgba,this._widthGPU,this._heightGPU,this._resizeSmoothly);
			this._data.push(rgba);
		} else {
			var size1 = minko_render_TextureFormatInfo.textureSize(this._format,this._width,this._height);
			var rgb = new haxe_io_Bytes(new ArrayBuffer(size1));
			rgb.blit(0,data,0,size1);
			this._data.push(rgb);
		}
	}
	resize(width,height,resizeSmoothly) {
		var previousWidth = this.get_width();
		var previousHeight = this.get_height();
		var previousNumMipMaps = this.get_data().length > minko_render_TextureFormatInfo.textureSize(this._format,previousWidth,previousHeight) ? minko_utils_MathUtil.getp2(previousWidth) + 1 : 1;
		var numMipMaps = previousNumMipMaps > 1 ? minko_utils_MathUtil.getp2(width) + 1 : 1;
		var newData = [];
		var _g = 0;
		var _g1 = numMipMaps;
		while(_g < _g1) {
			var i = _g++;
			var mipMapData = this.get_data()[i];
			var mipMapPreviousWidth = Math.floor(Math.max(previousWidth >> i,1));
			var mipMapPreviousHeight = Math.floor(Math.max(previousHeight >> i,1));
			var mipMapWidth = width >> i;
			var mipMapHeight = height >> i;
			var newMipMapData = minko_render_AbstractTexture.resizeData(mipMapPreviousWidth,mipMapPreviousHeight,mipMapData,mipMapWidth,mipMapHeight,resizeSmoothly);
			newData.push(newMipMapData);
		}
		this._data = newData;
		this._width = width;
		this._widthGPU = width;
		this._height = height;
		this._heightGPU = height;
	}
	dispose() {
		if(this._id != -1) {
			this._context.deleteTexture(this._id);
			this.set_id(-1);
		}
		this.disposeData();
	}
	disposeData() {
		this._data = null;
	}
	upload() {
		if(this._id == -1) {
			if(minko_render_TextureFormatInfo.isCompressed(this._format)) {
				this.set_id(this._context.createCompressedTexture(this._type,this._format,this._widthGPU,this._heightGPU,this._mipMapping));
			} else {
				this.set_id(this._context.createTexture(this._type,this._widthGPU,this._heightGPU,this._mipMapping,this._optimizeForRenderToTexture));
			}
		}
		if(this._data.length > 0) {
			if(minko_render_TextureFormatInfo.isCompressed(this._format)) {
				this._context.uploadCompressedTexture2dData(this._id,this._format,this._widthGPU,this._heightGPU,this._data.length,0,this._data[0]);
			} else {
				this._context.uploadTexture2dData(this._id,this._widthGPU,this._heightGPU,0,this._data[0]);
				if(this._mipMapping) {
					this._context.generateMipmaps(this._id);
				}
			}
		}
	}
	uploadMipLevel(level,data) {
		var width = this._widthGPU >> level;
		var height = this._heightGPU >> level;
		if(minko_render_TextureFormatInfo.isCompressed(this._format)) {
			var size = minko_render_TextureFormatInfo.textureSize(this._format,width,height);
			this._context.uploadCompressedTexture2dData(this._id,this._format,width,height,size,level,data);
		} else {
			this._context.uploadTexture2dData(this._id,width,height,level,data);
		}
	}
	static create(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename) {
		if(filename == null) {
			filename = "";
		}
		if(format == null) {
			format = 1;
		}
		if(resizeSmoothly == null) {
			resizeSmoothly = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		return new minko_render_Texture(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename);
	}
}
$hx_exports["minko"]["render"]["Texture"] = minko_render_Texture;
minko_render_Texture.__name__ = true;
minko_render_Texture.__super__ = minko_render_AbstractTexture;
Object.assign(minko_render_Texture.prototype, {
	__class__: minko_render_Texture
});
class minko_render_Entry {
	constructor(name,isCompressed,numBitsPerPixel,minimumSize,hasAlphaChannel,hasSeparateAlphaChannel) {
		this._name = name;
		this._isCompressed = isCompressed;
		this._numBitsPerPixel = numBitsPerPixel;
		this._minimumSize = minimumSize;
		this._hasAlphaChannel = hasAlphaChannel;
		this._hasSeparateAlphaChannel = hasSeparateAlphaChannel;
	}
}
$hx_exports["minko"]["render"]["Entry"] = minko_render_Entry;
minko_render_Entry.__name__ = true;
Object.assign(minko_render_Entry.prototype, {
	__class__: minko_render_Entry
});
class minko_render_TextureFormatInfo {
	static initializeFormatsMap() {
		var m = new haxe_ds_IntMap();
		var value = new minko_render_Entry("RGB",false,24,3,false,false);
		m.h[0] = value;
		var value1 = new minko_render_Entry("RGBA",false,32,4,true,false);
		m.h[1] = value1;
		var value2 = new minko_render_Entry("RGB_DXT1",true,4,8,false,false);
		m.h[2] = value2;
		var value3 = new minko_render_Entry("RGBA_DXT1",true,4,8,true,false);
		m.h[3] = value3;
		var value4 = new minko_render_Entry("RGBA_DXT3",true,8,16,true,false);
		m.h[4] = value4;
		var value5 = new minko_render_Entry("RGBA_DXT5",true,8,16,true,false);
		m.h[5] = value5;
		var value6 = new minko_render_Entry("RGB_ETC1",true,4,8,false,false);
		m.h[6] = value6;
		var value7 = new minko_render_Entry("RGBA_ETC1",true,4,8,true,true);
		m.h[7] = value7;
		var value8 = new minko_render_Entry("RGB_PVRTC1_2BPP",true,2,32,false,false);
		m.h[8] = value8;
		var value9 = new minko_render_Entry("RGB_PVRTC1_4BPP",true,4,32,false,false);
		m.h[9] = value9;
		var value10 = new minko_render_Entry("RGBA_PVRTC1_2BPP",true,2,32,true,false);
		m.h[10] = value10;
		var value11 = new minko_render_Entry("RGBA_PVRTC1_4BPP",true,4,32,true,false);
		m.h[11] = value11;
		var value12 = new minko_render_Entry("RGBA_PVRTC2_2BPP",true,2,32,true,false);
		m.h[12] = value12;
		var value13 = new minko_render_Entry("RGBA_PVRTC2_4BPP",true,4,32,true,false);
		m.h[13] = value13;
		var value14 = new minko_render_Entry("RGB_ATITC",true,8,16,false,false);
		m.h[14] = value14;
		var value15 = new minko_render_Entry("RGBA_ATITC",true,8,16,true,false);
		m.h[15] = value15;
		return m;
	}
	static isSupported(format) {
		return false;
	}
	static textureSize(format,width,height) {
		return Math.floor(Math.max(minko_render_TextureFormatInfo.minimumSize(format),minko_render_TextureFormatInfo.numBitsPerPixel(format) / 8.0 * width * height));
	}
	static name(format) {
		return minko_render_TextureFormatInfo._formats.h[format]._name;
	}
	static isCompressed(format) {
		return minko_render_TextureFormatInfo._formats.h[format]._isCompressed;
	}
	static numBitsPerPixel(format) {
		return minko_render_TextureFormatInfo._formats.h[format]._numBitsPerPixel;
	}
	static minimumSize(format) {
		return minko_render_TextureFormatInfo._formats.h[format]._minimumSize;
	}
	static hasAlphaChannel(format) {
		return minko_render_TextureFormatInfo._formats.h[format]._hasAlphaChannel;
	}
	static hasSeparateAlphaChannel(format) {
		return minko_render_TextureFormatInfo._formats.h[format]._hasSeparateAlphaChannel;
	}
	static get_textureFormats() {
		var formats = [];
		var textureFormat = minko_render_TextureFormatInfo._formats.keys();
		while(textureFormat.hasNext()) {
			var textureFormat1 = textureFormat.next();
			formats.push(textureFormat1);
		}
		return formats;
	}
}
$hx_exports["minko"]["render"]["TextureFormatInfo"] = minko_render_TextureFormatInfo;
minko_render_TextureFormatInfo.__name__ = true;
class minko_render_TextureSampler {
	constructor(uuid,id) {
		this.uuid = uuid;
		this.id = id;
		this.mipFilter = 0;
		this.textureFilter = 0;
		this.wrapMode = 0;
	}
	copyFrom(rhs) {
		this.uuid = rhs.uuid;
		this.id = rhs.id;
		this.mipFilter = rhs.mipFilter;
		this.textureFilter = rhs.textureFilter;
		this.wrapMode = rhs.wrapMode;
	}
	equals(rhs) {
		if(this.uuid == rhs.uuid && this.id == rhs.id && this.mipFilter == rhs.mipFilter && this.textureFilter == rhs.textureFilter) {
			return this.wrapMode == rhs.wrapMode;
		} else {
			return false;
		}
	}
}
$hx_exports["minko"]["render"]["TextureSampler"] = minko_render_TextureSampler;
minko_render_TextureSampler.__name__ = true;
Object.assign(minko_render_TextureSampler.prototype, {
	__class__: minko_render_TextureSampler
});
class minko_render_VertexAttribute {
	constructor(_id,_vertexSize,name,size,actualOffset) {
		this.resourceId = _id;
		this.vertexSize = _vertexSize;
		this.name = name;
		this.size = size;
		this.offset = actualOffset;
	}
	equals(rhs) {
		if(this.resourceId == rhs.resourceId && this.vertexSize == rhs.vertexSize && this.name == rhs.name && this.size == rhs.size) {
			return this.offset == rhs.offset;
		} else {
			return false;
		}
	}
}
$hx_exports["minko"]["render"]["VertexAttribute"] = minko_render_VertexAttribute;
minko_render_VertexAttribute.__name__ = true;
Object.assign(minko_render_VertexAttribute.prototype, {
	__class__: minko_render_VertexAttribute
});
class minko_render_VertexBuffer extends minko_render_AbstractResource {
	constructor(context) {
		super(context);
		this._data = [];
		this._attributes = [];
		this._vertexSize = 0;
		this._vertexSizeChanged = new minko_signal_Signal2();
	}
	set_data(v) {
		this._data = v;
		return v;
	}
	get_data() {
		return this._data;
	}
	get_attributes() {
		return this._attributes;
	}
	get_vertexSize() {
		return this._vertexSize;
	}
	set_vertexSize(value) {
		var offset = value - this._vertexSize;
		this._vertexSize = value;
		this._vertexSizeChanged.execute(this,offset);
		return value;
	}
	get_vertexSizeChanged() {
		return this._vertexSizeChanged;
	}
	get_numVertices() {
		if(this._vertexSize > 0) {
			return Math.floor(this._data.length / this._vertexSize);
		} else {
			return 0;
		}
	}
	upload() {
		this.uploadOffset(0,0);
	}
	uploadOffset(offset,numVertices) {
		if(numVertices == null) {
			numVertices = 0;
		}
		if(this._data.length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createVertexBuffer(this._data.length);
		}
		this._context.uploadVertexBufferData(this._id,offset * this._vertexSize,numVertices == 0 ? this._data.length : numVertices * this._vertexSize,this._data);
	}
	uploadData(offset,numVertices,data) {
		if(data.length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createVertexBuffer(data.length);
		}
		this._context.uploadVertexBufferData(this._id,offset * this._vertexSize,numVertices == 0 ? data.length : numVertices * this._vertexSize,data);
	}
	dispose() {
		if(this._id != -1) {
			this._context.deleteVertexBuffer(this._id);
			this._id = -1;
		}
		this.disposeData();
	}
	disposeData() {
		this._data = null;
	}
	addAttribute(name,size,offset) {
		if(offset == null) {
			offset = 0;
		}
		var _gthis = this;
		if(this.hasAttribute(name)) {
			throw new js__$Boot_HaxeError("name");
		}
		var actualOffset = offset;
		if(actualOffset == 0) {
			actualOffset = this._vertexSize;
		}
		this._attributes.push(new minko_render_VertexAttribute(this._id,this._vertexSize,name,size,actualOffset));
		this.set_vertexSize(this._vertexSize + size);
		this._attributes = this._attributes.map(function(a) {
			a.vertexSize = _gthis.get_vertexSize();
			return a;
		});
	}
	removeAttribute(attributeName) {
		var _gthis = this;
		var it = Lambda.find(this._attributes,function(attr) {
			return attr.name == attributeName;
		});
		if(it == null) {
			throw new js__$Boot_HaxeError("attributeName = " + attributeName);
		}
		this.set_vertexSize(this._vertexSize - it.size);
		HxOverrides.remove(this._attributes,it);
		this._attributes = this._attributes.map(function(a) {
			a.vertexSize = _gthis.get_vertexSize();
			return a;
		});
	}
	hasAttribute(attributeName) {
		var it = Lambda.exists(this._attributes,function(attr) {
			return attr.name == attributeName;
		});
		return it;
	}
	attribute(attributeName) {
		var it = Lambda.find(this._attributes,function(attr) {
			return attr.name == attributeName;
		});
		if(it == null) {
			throw new js__$Boot_HaxeError("attributeName = " + attributeName);
		}
		return it;
	}
	equals(vertexBuffer) {
		return this._data == vertexBuffer._data;
	}
	static create(context) {
		return new minko_render_VertexBuffer(context);
	}
	static createbyVec3Data(context,data,len) {
		var ptr = new minko_render_VertexBuffer(context);
		ptr.set_data([]);
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			ptr.get_data().push(d.x);
			ptr.get_data().push(d.y);
			ptr.get_data().push(d.z);
		}
		ptr.upload();
		return ptr;
	}
	static createbyData(context,data) {
		var ptr = new minko_render_VertexBuffer(context);
		ptr.set_data(data);
		ptr.upload();
		return ptr;
	}
}
$hx_exports["minko"]["render"]["VertexBuffer"] = minko_render_VertexBuffer;
minko_render_VertexBuffer.__name__ = true;
minko_render_VertexBuffer.__super__ = minko_render_AbstractResource;
Object.assign(minko_render_VertexBuffer.prototype, {
	__class__: minko_render_VertexBuffer
});
class minko_scene_Node extends minko_Enable_$uuid {
	constructor(n) {
		if(n == null) {
			n = "";
		}
		super();
		this._name = n;
		this._layout = 1;
		this._children = [];
		this._container = new minko_data_Store();
		this._components = [];
		this._added = new minko_signal_Signal3();
		this._removed = new minko_signal_Signal3();
		this._layoutChanged = new minko_signal_Signal2();
		this._componentAdded = new minko_signal_Signal3();
		this._componentRemoved = new minko_signal_Signal3();
	}
	clone(option) {
		var clone = this.cloneNode();
		var nodeMap = new haxe_ds_ObjectMap();
		var componentsMap = new haxe_ds_ObjectMap();
		this.listItems(clone,nodeMap,componentsMap);
		this.rebindComponentsDependencies(componentsMap,nodeMap,option);
		var itn = nodeMap.keys();
		while(itn.hasNext()) {
			var itn1 = itn.next();
			var node = itn1;
			var originComponents = node.getComponents(minko_component_AbstractComponent);
			var itc = componentsMap.keys();
			while(itc.hasNext()) {
				var itc1 = itc.next();
				var component = itc1;
				if(Lambda.has(originComponents,component)) {
					nodeMap.h[node.__id__].addComponent(componentsMap.h[component.__id__]);
				}
			}
		}
		return nodeMap.h[this.__id__];
	}
	cloneNode() {
		var clone = minko_scene_Node.create();
		clone._name = this.get_name() + "_clone";
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			clone.addChild(child.cloneNode());
		}
		return clone;
	}
	listItems(clonedRoot,nodeMap,components) {
		var _g = 0;
		var _g1 = this._components;
		while(_g < _g1.length) {
			var component = _g1[_g];
			++_g;
			components.set(component,component.clone(1));
		}
		nodeMap.set(this,clonedRoot);
		var _g2 = 0;
		var _g3 = this.get_children().length;
		while(_g2 < _g3) {
			var childId = _g2++;
			var child = this.get_children()[childId];
			var clonedChild = clonedRoot.get_children()[childId];
			child.listItems(clonedChild,nodeMap,components);
		}
	}
	rebindComponentsDependencies(componentsMap,nodeMap,option) {
		var comp = componentsMap.keys();
		while(comp.hasNext()) {
			var comp1 = comp.next();
			var compClone = js_Boot.__cast(componentsMap.h[comp1.__id__] , minko_component_AbstractComponent);
			if(compClone != null) {
				compClone.rebindDependencies(componentsMap,nodeMap,option);
			}
		}
	}
	get_name() {
		return this._name;
	}
	set_name(v) {
		this._name = v;
		return v;
	}
	get_layout() {
		return this._layout;
	}
	set_layout(v) {
		if(v != this._layout) {
			this._layout = v;
			var descendants = minko_scene_NodeSet.createbyNode(this).descendants(true);
			var _g = 0;
			var _g1 = descendants.get_nodes();
			while(_g < _g1.length) {
				var descendant = _g1[_g];
				++_g;
				descendant._layoutChanged.execute(descendant,this);
			}
			var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors();
			var _g2 = 0;
			var _g3 = ancestors.get_nodes();
			while(_g2 < _g3.length) {
				var ancestor = _g3[_g2];
				++_g2;
				ancestor._layoutChanged.execute(ancestor,this);
			}
		}
		return v;
	}
	get_parent() {
		return this._parent;
	}
	get_root() {
		return this._root;
	}
	get_children() {
		return this._children;
	}
	get_data() {
		return this._container;
	}
	get_added() {
		return this._added;
	}
	get_removed() {
		return this._removed;
	}
	get_layoutChanged() {
		return this._layoutChanged;
	}
	get_componentAdded() {
		return this._componentAdded;
	}
	get_componentRemoved() {
		return this._componentRemoved;
	}
	addChild(child) {
		if(child.get_parent() != null) {
			child.get_parent().removeChild(child);
		}
		this._children.push(child);
		child._parent = this;
		child.updateRoot();
		var descendants = minko_scene_NodeSet.createbyNode(child).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._added.execute(descendant,child,this);
		}
		var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors(true);
		var _g2 = 0;
		var _g3 = ancestors.get_nodes();
		while(_g2 < _g3.length) {
			var ancestor = _g3[_g2];
			++_g2;
			ancestor._added.execute(ancestor,child,this);
		}
		return this;
	}
	removeChild(child) {
		var it = Lambda.has(this._children,child);
		if(it == false) {
			throw new js__$Boot_HaxeError("child");
		}
		HxOverrides.remove(this._children,child);
		child._parent = null;
		child.updateRoot();
		var descendants = minko_scene_NodeSet.createbyNode(child).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._removed.execute(descendant,child,this);
		}
		var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors(true);
		var _g2 = 0;
		var _g3 = ancestors.get_nodes();
		while(_g2 < _g3.length) {
			var ancestor = _g3[_g2];
			++_g2;
			ancestor._removed.execute(ancestor,child,this);
		}
		return this;
	}
	removeChildren() {
		var numChildren = this._children.length;
		var i = numChildren - 1;
		while(i >= 0) {
			this.removeChild(this._children[i]);
			--i;
		}
		return this;
	}
	contains(node) {
		return Lambda.has(this._children,node);
	}
	addComponent(component) {
		if(component == null) {
			throw new js__$Boot_HaxeError("component");
		}
		var it = Lambda.has(this._components,component);
		if(it) {
			throw new js__$Boot_HaxeError("The same component cannot be added twice.");
		}
		if(component.get_target() != null) {
			component.get_target().removeComponent(component);
		}
		this._components.push(component);
		component.set_target(this);
		var descendants = minko_scene_NodeSet.createbyNode(this).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._componentAdded.execute(descendant,this,component);
		}
		var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors();
		var _g2 = 0;
		var _g3 = ancestors.get_nodes();
		while(_g2 < _g3.length) {
			var ancestor = _g3[_g2];
			++_g2;
			ancestor._componentAdded.execute(ancestor,this,component);
		}
		return this;
	}
	removeComponent(component) {
		if(component == null) {
			throw new js__$Boot_HaxeError("component");
		}
		var it = Lambda.has(this._components,component);
		if(it == false) {
			throw new js__$Boot_HaxeError("component");
		}
		HxOverrides.remove(this._components,component);
		component.set_target(null);
		var descendants = minko_scene_NodeSet.createbyNode(this).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._componentRemoved.execute(descendant,this,component);
		}
		var ancestor = this.get_parent();
		while(ancestor != null) {
			ancestor._componentRemoved.execute(ancestor,this,component);
			ancestor = ancestor.get_parent();
		}
		return this;
	}
	existsComponent(c) {
		return Lambda.has(this._components,c);
	}
	hasComponent(cClass) {
		return Lambda.exists(this._components,function(c) {
			return js_Boot.__instanceof(c,cClass);
		});
	}
	getComponent(cClass) {
		return Lambda.find(this._components,function(c) {
			return js_Boot.__instanceof(c,cClass);
		});
	}
	getComponents(cClass) {
		return this._components.filter(function(c) {
			return js_Boot.__instanceof(c,cClass);
		});
	}
	get_components() {
		return this._components;
	}
	setNode(uuid,name) {
		this.set_uuid(uuid);
		this._name = name;
		this._layout = 1;
	}
	updateRoot() {
		this._root = this.get_parent() != null ? this.get_parent().get_root() != null ? this.get_parent()._root : this._parent : this;
		var _g = 0;
		var _g1 = this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.updateRoot();
		}
	}
	dispose() {
		var _g = 0;
		var _g1 = this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dispose();
		}
		var _g2 = 0;
		var _g3 = this._components;
		while(_g2 < _g3.length) {
			var component = _g3[_g2];
			++_g2;
			this.removeComponent(component);
			component.dispose();
		}
		this._container.dispose();
		this._added.dispose();
		this._removed.dispose();
		this._layoutChanged.dispose();
		this._componentAdded.dispose();
		this._componentRemoved.dispose();
		this._children = null;
		this._components = null;
		this._container = null;
		this._added = null;
		this._removed = null;
		this._layoutChanged = null;
		this._componentAdded = null;
		this._componentRemoved = null;
	}
	static create(n) {
		if(n == null) {
			n = "";
		}
		var node = new minko_scene_Node(n);
		node._root = node;
		return node;
	}
	static createbyLayout(n,l) {
		var node = new minko_scene_Node(n);
		node._root = node;
		node.set_layout(l);
		return node;
	}
}
$hx_exports["minko"]["scene"]["Node"] = minko_scene_Node;
minko_scene_Node.__name__ = true;
minko_scene_Node.__super__ = minko_Enable_$uuid;
Object.assign(minko_scene_Node.prototype, {
	__class__: minko_scene_Node
});
class minko_scene_NodeSet extends minko_scene_Node {
	constructor() {
		super();
		this._nodes = [];
	}
	get_nodes() {
		return this._nodes;
	}
	dispose() {
		super.dispose();
		this._nodes = null;
	}
	size() {
		return this._nodes.length;
	}
	descendants(andSelf,depthFirst,result) {
		if(depthFirst == null) {
			depthFirst = false;
		}
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var nodesStack = [];
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			nodesStack.push(node);
			while(nodesStack.length != 0) {
				var descendant = nodesStack.shift();
				if(descendant != node || andSelf) {
					result._nodes.push(descendant);
				}
				nodesStack = depthFirst ? descendant.get_children().concat(nodesStack) : nodesStack.concat(descendant.get_children());
			}
		}
		return result;
	}
	ancestors(andSelf,result) {
		if(andSelf == null) {
			andSelf = false;
		}
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(andSelf) {
				result._nodes.push(node);
			}
			while(node != null) {
				if(node.get_parent() != null) {
					result._nodes.push(node.get_parent());
				}
				node = node.get_parent();
			}
		}
		return result;
	}
	childrens(andSelf,result) {
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(andSelf) {
				result._nodes.push(node);
			}
			result._nodes = result._nodes.concat(node.get_children());
		}
		return result;
	}
	where(filter,result) {
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(filter(node)) {
				result._nodes.push(node);
			}
		}
		return result;
	}
	roots(result) {
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(!Lambda.has(result._nodes,node.get_root())) {
				result._nodes.push(node.get_root());
			}
		}
		return result;
	}
	static createbyArray(nodes) {
		var set = new minko_scene_NodeSet();
		set.nodes = nodes.concat([]);
		return set;
	}
	static create() {
		var set = new minko_scene_NodeSet();
		return set;
	}
	static createbyNode(node) {
		var set = new minko_scene_NodeSet();
		set.get_nodes().push(node);
		return set;
	}
}
$hx_exports["minko"]["scene"]["NodeSet"] = minko_scene_NodeSet;
minko_scene_NodeSet.__name__ = true;
minko_scene_NodeSet.__super__ = minko_scene_Node;
Object.assign(minko_scene_NodeSet.prototype, {
	__class__: minko_scene_NodeSet
});
class minko_signal_SignalSlot {
	constructor(_s) {
		this.expired = false;
		this._signal = _s;
	}
	disconnect() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	dispose() {
		this.disconnect();
	}
}
$hx_exports["minko"]["signal"]["SignalSlot"] = minko_signal_SignalSlot;
minko_signal_SignalSlot.__name__ = true;
Object.assign(minko_signal_SignalSlot.prototype, {
	__class__: minko_signal_SignalSlot
});
class minko_signal_Signal {
	constructor() {
		this._callbacks = [];
	}
	copyFrom(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	dispose() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	get_numCallbacks() {
		return this._callbacks.length;
	}
	connect(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	execute(a) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	remove(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	static create() {
		return new minko_signal_Signal();
	}
}
$hx_exports["minko"]["signal"]["Signal"] = minko_signal_Signal;
minko_signal_Signal.__name__ = true;
Object.assign(minko_signal_Signal.prototype, {
	__class__: minko_signal_Signal
});
class minko_signal_SignalSlot2 {
	constructor(_s) {
		this.expired = false;
		this._signal = _s;
	}
	disconnect() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	dispose() {
		this.disconnect();
	}
}
$hx_exports["minko"]["signal"]["SignalSlot2"] = minko_signal_SignalSlot2;
minko_signal_SignalSlot2.__name__ = true;
Object.assign(minko_signal_SignalSlot2.prototype, {
	__class__: minko_signal_SignalSlot2
});
class minko_signal_SignalSlot3 {
	constructor(_s) {
		this.expired = false;
		this._signal = _s;
	}
	disconnect() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	dispose() {
		this.disconnect();
	}
}
$hx_exports["minko"]["signal"]["SignalSlot3"] = minko_signal_SignalSlot3;
minko_signal_SignalSlot3.__name__ = true;
Object.assign(minko_signal_SignalSlot3.prototype, {
	__class__: minko_signal_SignalSlot3
});
class minko_signal_Signal3 {
	constructor() {
		this._callbacks = [];
	}
	copyFrom(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	dispose() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	get_numCallbacks() {
		return this._callbacks.length;
	}
	connect(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot3(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	execute(a,b,c) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b,c);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	remove(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	static create() {
		return new minko_signal_Signal3();
	}
}
$hx_exports["minko"]["signal"]["Signal3"] = minko_signal_Signal3;
minko_signal_Signal3.__name__ = true;
Object.assign(minko_signal_Signal3.prototype, {
	__class__: minko_signal_Signal3
});
class minko_signal_SignalSlot4 {
	constructor(_s) {
		this.expired = false;
		this._signal = _s;
	}
	disconnect() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	dispose() {
		this.disconnect();
	}
}
$hx_exports["minko"]["signal"]["SignalSlot4"] = minko_signal_SignalSlot4;
minko_signal_SignalSlot4.__name__ = true;
Object.assign(minko_signal_SignalSlot4.prototype, {
	__class__: minko_signal_SignalSlot4
});
class minko_signal_Signal4 {
	constructor() {
		this._callbacks = [];
	}
	copyFrom(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	dispose() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	get_numCallbacks() {
		return this._callbacks.length;
	}
	connect(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot4(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	execute(a,b,c,d) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b,c,d);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	remove(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	static create() {
		return new minko_signal_Signal4();
	}
}
$hx_exports["minko"]["signal"]["Signal4"] = minko_signal_Signal4;
minko_signal_Signal4.__name__ = true;
Object.assign(minko_signal_Signal4.prototype, {
	__class__: minko_signal_Signal4
});
class minko_utils_BytesTool {
	static readUTF(b) {
		var len = b.readInt32();
		return b.readString(len);
	}
	static readOneBytes(b) {
		var len = b.readInt32();
		return b.read(len);
	}
	static writeUTF(b,bt) {
		b.writeInt32(bt.length);
		b.writeString(bt);
	}
	static writeOneBytes(b,bt) {
		b.writeInt32(bt.length);
		b.writeFullBytes(bt,0,bt.length);
	}
}
minko_utils_BytesTool.__name__ = true;
class minko_utils_MathUtil {
	static lerp(from,to,t) {
		return from + (to - from) * Math.min(Math.max(t,0),1);
	}
	static fract(x) {
		return x - Math.floor(x);
	}
	static std_copy(s,begin,size,d,index) {
		var g = 0;
		var _g = begin;
		var _g1 = size;
		while(_g < _g1) {
			var k = _g++;
			d[index + g] = s[k];
			++g;
		}
	}
	static make_vec2(a,b) {
		var this1 = new glm_Vec2Base();
		this1.x = a[b];
		this1.y = a[b + 1];
		return this1;
	}
	static make_vec3(a,b) {
		var this1 = new glm_Vec3Base();
		this1.x = a[b];
		this1.y = a[b + 1];
		this1.z = a[b + 2];
		return this1;
	}
	static make_vec4(a,b) {
		var this1 = new glm_Vec4Base();
		this1.x = a[b];
		this1.y = a[b + 1];
		this1.z = a[b + 2];
		this1.w = a[b + 3];
		return this1;
	}
	static isEpsilonEqual(a,b,EPSILON) {
		if(EPSILON == null) {
			EPSILON = 1.19209290e-007;
		}
		return Math.abs(a - b) < EPSILON;
	}
	static isEpsilonEqualVec3(a,b,EPSILON) {
		if(EPSILON == null) {
			EPSILON = 1.19209290e-007;
		}
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var dest = this1;
		dest.x = a.x - b.x;
		dest.y = a.y - b.y;
		dest.z = a.z - b.z;
		var this2 = dest;
		return Math.abs(this2.x * this2.x + this2.y * this2.y + this2.z * this2.z) < EPSILON;
	}
	static linearRand(from,to) {
		return from + (to - from) * (minko_math_Random.makeRandomSeed() / 2147483647.0);
	}
	static sphericalRand(Radius) {
		var z = -1 + 2 * (minko_math_Random.makeRandomSeed() / 2147483647.0);
		var a = 6.283185307179586476925286766559 * (minko_math_Random.makeRandomSeed() / 2147483647.0);
		var r = Math.sqrt(1 - z * z);
		var x = r * Math.cos(a);
		var y = r * Math.sin(a);
		var this1 = new glm_Vec3Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		var a1 = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var dest = this2;
		dest.x = a1.x * Radius;
		dest.y = a1.y * Radius;
		dest.z = a1.z * Radius;
		return dest;
	}
	static diskRand(Radius) {
		var Result = null;
		var LenRadius = 0;
		while(true) {
			var from = -Radius;
			var x = from + (Radius - from) * (minko_math_Random.makeRandomSeed() / 2147483647.0);
			var from1 = -Radius;
			var y = from1 + (Radius - from1) * (minko_math_Random.makeRandomSeed() / 2147483647.0);
			var this1 = new glm_Vec2Base();
			this1.x = x;
			this1.y = y;
			Result = this1;
			LenRadius = Math.sqrt(Result.x * Result.x + Result.y * Result.y);
			if(!(LenRadius > Radius)) {
				break;
			}
		}
		return Result;
	}
	static rand01() {
		return Math.random();
	}
	static clamp(x,minVal,maxVal) {
		return Math.min(Math.max(x,minVal),maxVal);
	}
	static mat4_mat3(a) {
		var _r0c0 = a._00;
		var _r0c1 = a._10;
		var _r0c2 = a._20;
		var _r1c0 = a._01;
		var _r1c1 = a._11;
		var _r1c2 = a._21;
		var _r2c0 = a._02;
		var _r2c1 = a._22;
		var _r2c2 = a._22;
		var this1 = new glm_Mat3Base();
		this1._00 = _r0c0;
		this1._01 = _r1c0;
		this1._02 = _r2c0;
		this1._10 = _r0c1;
		this1._11 = _r1c1;
		this1._12 = _r2c1;
		this1._20 = _r0c2;
		this1._21 = _r1c2;
		this1._22 = _r2c2;
		return this1;
	}
	static vec4_vec3(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var this1 = new glm_Vec3Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		return this1;
	}
	static vec3_vec4(v,z) {
		var x = v.x;
		var y = v.y;
		var z1 = v.z;
		var this1 = new glm_Vec4Base();
		this1.x = x;
		this1.y = y;
		this1.z = z1;
		this1.w = z;
		return this1;
	}
	static mat4_copyFrom(a,b) {
		a._00 = b._00;
		a._10 = b._10;
		a._20 = b._20;
		a._30 = b._30;
		a._01 = b._01;
		a._11 = b._11;
		a._21 = b._21;
		a._31 = b._31;
		a._02 = b._02;
		a._12 = b._12;
		a._22 = b._22;
		a._32 = b._32;
		a._03 = b._03;
		a._13 = b._13;
		a._23 = b._23;
		a._33 = b._33;
	}
	static getp2(x) {
		var tmp = x;
		var p = 0;
		while((tmp >>= 1) > 0) ++p;
		return p;
	}
	static mix(v,n,rt) {
		return n * rt + v * (1 - rt);
	}
	static clp2(x) {
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		return x + 1;
	}
	static rgba(x) {
		var this1 = new glm_Vec4Base();
		this1.x = (x >> 24 & 255) / 255;
		this1.y = (x >> 16 & 255) / 255;
		this1.z = (x >> 8 & 255) / 255;
		this1.w = (x & 255) / 255;
		return this1;
	}
	static vec2_equals(a,b) {
		return !(Math.abs(a.x - b.x) >= glm_GLM.EPSILON || Math.abs(a.y - b.y) >= glm_GLM.EPSILON);
	}
	static vec3_equals(a,b) {
		return !(Math.abs(a.x - b.x) >= glm_GLM.EPSILON || Math.abs(a.y - b.y) >= glm_GLM.EPSILON || Math.abs(a.z - b.z) >= glm_GLM.EPSILON);
	}
	static vec4_equals(a,b) {
		return !(Math.abs(a.x - b.x) >= glm_GLM.EPSILON || Math.abs(a.y - b.y) >= glm_GLM.EPSILON || Math.abs(a.z - b.z) >= glm_GLM.EPSILON || Math.abs(a.w - b.w) >= glm_GLM.EPSILON);
	}
	static vec3_max(a,b) {
		return a;
	}
}
minko_utils_MathUtil.__name__ = true;
class minko_utils_RandomNumbers {
	static nextNumber() {
		return Math.random();
	}
	static nextNumberCeiling(ceiling) {
		return Math.floor(minko_utils_RandomNumbers.nextNumber() * ceiling);
	}
}
minko_utils_RandomNumbers.__name__ = true;
class minko_utils_TimeUtil {
	static getTimerMilliseconds() {
		return new Date().getTime();
	}
}
minko_utils_TimeUtil.__name__ = true;
class minko_utils_VectorHelper {
	static resize(list,newSize,value) {
		if(list.length > newSize) {
			while(list.length > newSize) list.pop();
		} else if(list.length < newSize) {
			var _g = list.length;
			var _g1 = newSize;
			while(_g < _g1) {
				var i = _g++;
				list.push(value);
			}
		}
	}
	static equals(list1,list2) {
		if(list1.length != list2.length) {
			return false;
		}
		var _g = 0;
		var _g1 = list2.length;
		while(_g < _g1) {
			var i = _g++;
			if(list1[i] != list2[i]) {
				return false;
			}
		}
		return true;
	}
	static swap(list1,list2) {
		var temp = list1.slice();
		minko_utils_VectorHelper.resize(list1,list2.length,null);
		var _g = 0;
		var _g1 = list2.length;
		while(_g < _g1) {
			var i = _g++;
			list1[i] = list2[i];
		}
		minko_utils_VectorHelper.resize(list2,temp.length,null);
		var _g2 = 0;
		var _g3 = temp.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			list2[i1] = temp[i1];
		}
	}
	static initializedList(size,value) {
		var temp = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var count = _g++;
			temp.push(value);
		}
		return temp;
	}
	static nestedList(outerSize,innerSize,value) {
		var temp = [];
		var _g = 0;
		var _g1 = outerSize;
		while(_g < _g1) {
			var count = _g++;
			temp.push(minko_utils_VectorHelper.initializedList(innerSize,value));
		}
		return temp;
	}
}
minko_utils_VectorHelper.__name__ = true;
class minko_utils_WebNodeTools {
	static createCanvasElement() {
		var r = window.document.createElement("canvas");
		var r_style = r.style;
		r_style.position = "absolute";
		r_style.setProperty("-webkit-touch-callout","none");
		r_style.setProperty("user-select","none");
		return r;
	}
	static loadFromBytes(t,c,h) {
		if(minko_utils_WebNodeTools.component == null) {
			minko_utils_WebNodeTools.component = minko_utils_WebNodeTools.createCanvasElement();
		}
		var o = window.document.createElement("img");
		var n = minko_utils_WebNodeTools.component;
		var f = null;
		var i;
		var l;
		var p;
		f = function(_) {
			o.removeEventListener("load",f);
			var x = o.width;
			--x;
			x |= x >> 1;
			x |= x >> 2;
			x |= x >> 4;
			x |= x >> 8;
			x |= x >> 16;
			n.width = Math.floor(Math.min(x + 1,minko_utils_WebNodeTools.MAX_SIZE));
			var x1 = o.height;
			--x1;
			x1 |= x1 >> 1;
			x1 |= x1 >> 2;
			x1 |= x1 >> 4;
			x1 |= x1 >> 8;
			x1 |= x1 >> 16;
			n.height = Math.floor(Math.min(x1 + 1,minko_utils_WebNodeTools.MAX_SIZE));
			var q = n.getContext("2d");
			q.drawImage(o,0,0,o.width,o.height,0,0,n.width,n.height);
			p = q.getImageData(0,0,n.width,n.height);
			if(h != null) {
				var n1 = n.width;
				var n2 = n.height;
				var f1 = haxe_io_Bytes.ofData(p.data.buffer);
				h(new minko_file_PixelData(n1,n2,f1));
			}
			o.remove();
			o = null;
			p = null;
		};
		o.addEventListener("load",f);
		var tmp = haxe_crypto_Base64.encode(c);
		o.src = "data:image/" + t + ";base64," + tmp;
	}
}
minko_utils_WebNodeTools.__name__ = true;
class tutorial_ApplyingAntialiasingEffect {
	constructor() {
		this.init();
	}
	init() {
		var canvas = minko_WebCanvas.create("Minko Tutorial - Applying antialiasing effect",tutorial_ApplyingAntialiasingEffect.WINDOW_WIDTH,tutorial_ApplyingAntialiasingEffect.WINDOW_HEIGHT);
		var sceneManager = minko_component_SceneManager.create(canvas);
		sceneManager.get_assets().get_loader().queue("effect/Basic.effect").queue("effect/FXAA/FXAA.effect");
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(0)).addComponent(minko_component_PerspectiveCamera.create(canvas.get_aspectRatio()));
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = -5.0;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest));
		root.addChild(camera1);
		var renderTarget = canvas.get_context();
		var x = tutorial_ApplyingAntialiasingEffect.WINDOW_WIDTH;
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		var x1 = tutorial_ApplyingAntialiasingEffect.WINDOW_HEIGHT;
		--x1;
		x1 |= x1 >> 1;
		x1 |= x1 >> 2;
		x1 |= x1 >> 4;
		x1 |= x1 >> 8;
		x1 |= x1 >> 16;
		var renderTarget1 = minko_render_Texture.create(renderTarget,x + 1,x1 + 1,false,true);
		renderTarget1.upload();
		var ppMaterial = minko_material_BasicMaterial.create();
		ppMaterial.set_diffuseMap(renderTarget1);
		var effect = new minko_render_Effect();
		var enableFXAA = true;
		var cube = minko_scene_Node.create("cube");
		var renderer = minko_component_Renderer.create();
		var postProcessingScene = minko_scene_Node.create();
		var complete = sceneManager.get_assets().get_loader().get_complete().connect(function(loader) {
			haxe_Log.trace("Enable FXAA",{ fileName : "tutorial/ApplyingAntialiasingEffect.hx", lineNumber : 66, className : "tutorial.ApplyingAntialiasingEffect", methodName : "init"});
			var material = minko_material_BasicMaterial.create();
			var this6 = new glm_Vec4Base();
			this6.x = 0.0;
			this6.y = 0.0;
			this6.z = 1.0;
			this6.w = 1.0;
			material.set_diffuseColor(this6);
			var complete1 = minko_component_Transform.create();
			cube.addComponent(complete1);
			var complete2 = minko_component_Surface.create(minko_geometry_CubeGeometry.create(canvas.get_context()),material,sceneManager.get_assets().effect("effect/Basic.effect"));
			cube.addComponent(complete2);
			root.addChild(cube);
			effect = sceneManager.get_assets().effect("effect/FXAA/FXAA.effect");
			if(effect == null) {
				throw new js__$Boot_HaxeError("The FXAA effect has not been loaded.");
			}
			effect.get_data().set("textureSampler",renderTarget1);
			var complete3 = effect.get_data();
			var x2 = tutorial_ApplyingAntialiasingEffect.WINDOW_WIDTH;
			var y = tutorial_ApplyingAntialiasingEffect.WINDOW_HEIGHT;
			var this7 = new glm_Vec2Base();
			this7.x = x2;
			this7.y = y;
			complete3.set("resolution",this7);
			var complete4 = effect.get_data();
			var x3 = 1.0 / renderTarget1.get_width();
			var y1 = 1. / renderTarget1.get_height();
			var this8 = new glm_Vec2Base();
			this8.x = x3;
			this8.y = y1;
			complete4.set("invertedDiffuseMapSize",this8);
			postProcessingScene.addComponent(renderer);
			var complete5 = minko_component_Surface.create(minko_geometry_QuadGeometry.create(sceneManager.get_assets().get_context()),ppMaterial,effect);
			postProcessingScene.addComponent(complete5);
			var keyDown = canvas.get_keyboard().get_keyDown().connect(function(k) {
				if(k.keyIsDown(32)) {
					enableFXAA = !enableFXAA;
					if(enableFXAA) {
						haxe_Log.trace("Enable FXAA",{ fileName : "tutorial/ApplyingAntialiasingEffect.hx", lineNumber : 94, className : "tutorial.ApplyingAntialiasingEffect", methodName : "init"});
						haxe_Log.trace("\n",{ fileName : "tutorial/ApplyingAntialiasingEffect.hx", lineNumber : 95, className : "tutorial.ApplyingAntialiasingEffect", methodName : "init"});
					} else {
						haxe_Log.trace("Disable FXAA",{ fileName : "tutorial/ApplyingAntialiasingEffect.hx", lineNumber : 98, className : "tutorial.ApplyingAntialiasingEffect", methodName : "init"});
						haxe_Log.trace("\n",{ fileName : "tutorial/ApplyingAntialiasingEffect.hx", lineNumber : 99, className : "tutorial.ApplyingAntialiasingEffect", methodName : "init"});
					}
				}
			});
			var resized = canvas.get_resized().connect(function(canvas1,width,height) {
				var perspectiveCamera = camera1.getComponent(minko_component_PerspectiveCamera);
				perspectiveCamera.set_aspectRatio(width / height);
				var x4 = width;
				--x4;
				x4 |= x4 >> 1;
				x4 |= x4 >> 2;
				x4 |= x4 >> 4;
				x4 |= x4 >> 8;
				x4 |= x4 >> 16;
				var x5 = height;
				--x5;
				x5 |= x5 >> 1;
				x5 |= x5 >> 2;
				x5 |= x5 >> 4;
				x5 |= x5 >> 8;
				x5 |= x5 >> 16;
				renderTarget1 = minko_render_Texture.create(sceneManager.get_assets().get_context(),x4 + 1,x5 + 1,false,true);
				renderTarget1.upload();
				ppMaterial.set_diffuseMap(renderTarget1);
				effect.get_data().set("textureSampler",renderTarget1);
				var resized1 = effect.get_data();
				var x6 = tutorial_ApplyingAntialiasingEffect.WINDOW_WIDTH;
				var y2 = tutorial_ApplyingAntialiasingEffect.WINDOW_HEIGHT;
				var this9 = new glm_Vec2Base();
				this9.x = x6;
				this9.y = y2;
				resized1.set("resolution",this9);
				var resized2 = effect.get_data();
				var x7 = 1.0 / renderTarget1.get_width();
				var y3 = 1.0 / renderTarget1.get_height();
				var this10 = new glm_Vec2Base();
				this10.x = x7;
				this10.y = y3;
				resized2.set("invertedDiffuseMapSize",this10);
			});
			var enterFrame = canvas.get_enterFrame().connect(function(canvas2,t,dt) {
				var cubeTransform = cube.getComponent(minko_component_Transform);
				var a = cubeTransform.get_matrix();
				var this11 = new glm_Vec3Base();
				this11.x = 0.0;
				this11.y = 1.0;
				this11.z = 0.0;
				var axis = this11;
				var angle = .01;
				var this12 = new glm_QuatBase();
				this12.x = 0;
				this12.y = 0;
				this12.z = 0;
				this12.w = 1;
				var dest1 = this12;
				angle *= 0.5;
				var s = Math.sin(angle);
				dest1.x = s * axis.x;
				dest1.y = s * axis.y;
				dest1.z = s * axis.z;
				dest1.w = Math.cos(angle);
				var rotation = dest1;
				var this13 = new glm_Mat4Base();
				this13._00 = 0;
				this13._01 = 0;
				this13._02 = 0;
				this13._03 = 0;
				this13._10 = 0;
				this13._11 = 0;
				this13._12 = 0;
				this13._13 = 0;
				this13._20 = 0;
				this13._21 = 0;
				this13._22 = 0;
				this13._23 = 0;
				this13._30 = 0;
				this13._31 = 0;
				this13._32 = 0;
				this13._33 = 0;
				var dest2 = this13;
				var x21 = rotation.x + rotation.x;
				var y21 = rotation.y + rotation.y;
				var z2 = rotation.z + rotation.z;
				var xx = rotation.x * x21;
				var xy = rotation.x * y21;
				var xz = rotation.x * z2;
				var yy = rotation.y * y21;
				var yz = rotation.y * z2;
				var zz = rotation.z * z2;
				var wx = rotation.w * x21;
				var wy = rotation.w * y21;
				var wz = rotation.w * z2;
				dest2._00 = 1 - (yy + zz);
				dest2._10 = xy - wz;
				dest2._20 = xz + wy;
				dest2._30 = 0;
				dest2._01 = xy + wz;
				dest2._11 = 1 - (xx + zz);
				dest2._21 = yz - wx;
				dest2._31 = 0;
				dest2._02 = xz - wy;
				dest2._12 = yz + wx;
				dest2._22 = 1 - (xx + yy);
				dest2._32 = 0;
				dest2._03 = 0;
				dest2._13 = 0;
				dest2._23 = 0;
				dest2._33 = 1;
				var b = dest2;
				var this14 = new glm_Mat4Base();
				this14._00 = 0;
				this14._01 = 0;
				this14._02 = 0;
				this14._03 = 0;
				this14._10 = 0;
				this14._11 = 0;
				this14._12 = 0;
				this14._13 = 0;
				this14._20 = 0;
				this14._21 = 0;
				this14._22 = 0;
				this14._23 = 0;
				this14._30 = 0;
				this14._31 = 0;
				this14._32 = 0;
				this14._33 = 0;
				var dest3 = this14;
				var _a;
				var _b;
				if(dest3 == a) {
					var this15 = new glm_Mat4Base();
					this15._00 = 0;
					this15._01 = 0;
					this15._02 = 0;
					this15._03 = 0;
					this15._10 = 0;
					this15._11 = 0;
					this15._12 = 0;
					this15._13 = 0;
					this15._20 = 0;
					this15._21 = 0;
					this15._22 = 0;
					this15._23 = 0;
					this15._30 = 0;
					this15._31 = 0;
					this15._32 = 0;
					this15._33 = 0;
					var dest4 = this15;
					dest4._00 = a._00;
					dest4._10 = a._10;
					dest4._20 = a._20;
					dest4._30 = a._30;
					dest4._01 = a._01;
					dest4._11 = a._11;
					dest4._21 = a._21;
					dest4._31 = a._31;
					dest4._02 = a._02;
					dest4._12 = a._12;
					dest4._22 = a._22;
					dest4._32 = a._32;
					dest4._03 = a._03;
					dest4._13 = a._13;
					dest4._23 = a._23;
					dest4._33 = a._33;
					_a = dest4;
					_b = b;
				} else if(dest3 == b) {
					_a = a;
					var this16 = new glm_Mat4Base();
					this16._00 = 0;
					this16._01 = 0;
					this16._02 = 0;
					this16._03 = 0;
					this16._10 = 0;
					this16._11 = 0;
					this16._12 = 0;
					this16._13 = 0;
					this16._20 = 0;
					this16._21 = 0;
					this16._22 = 0;
					this16._23 = 0;
					this16._30 = 0;
					this16._31 = 0;
					this16._32 = 0;
					this16._33 = 0;
					var dest5 = this16;
					dest5._00 = b._00;
					dest5._10 = b._10;
					dest5._20 = b._20;
					dest5._30 = b._30;
					dest5._01 = b._01;
					dest5._11 = b._11;
					dest5._21 = b._21;
					dest5._31 = b._31;
					dest5._02 = b._02;
					dest5._12 = b._12;
					dest5._22 = b._22;
					dest5._32 = b._32;
					dest5._03 = b._03;
					dest5._13 = b._13;
					dest5._23 = b._23;
					dest5._33 = b._33;
					_b = dest5;
				} else {
					_a = a;
					_b = b;
				}
				dest3._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
				dest3._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
				dest3._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
				dest3._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
				dest3._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
				dest3._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
				dest3._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
				dest3._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
				dest3._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
				dest3._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
				dest3._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
				dest3._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
				dest3._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
				dest3._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
				dest3._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
				dest3._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
				cubeTransform.set_matrix(dest3);
				if(enableFXAA) {
					sceneManager.nextFrame(t,dt,renderTarget1);
					var enterFrame1 = sceneManager.get_assets().get_context();
					renderer.render(enterFrame1);
				} else {
					sceneManager.nextFrame(t,dt);
				}
			});
		});
		sceneManager.get_assets().get_loader().load();
		canvas.run();
	}
}
tutorial_ApplyingAntialiasingEffect.__name__ = true;
Object.assign(tutorial_ApplyingAntialiasingEffect.prototype, {
	__class__: tutorial_ApplyingAntialiasingEffect
});
class tutorial_WorkingEnvironmentMaps {
	constructor() {
		var canvas = minko_WebCanvas.create("Minko Tutorial - Working with the PhongMaterial",tutorial_WorkingEnvironmentMaps.WINDOW_WIDTH,tutorial_WorkingEnvironmentMaps.WINDOW_HEIGHT);
		var sceneManager = minko_component_SceneManager.create(canvas);
		sceneManager.get_assets().get_loader().get_options().registerParser("jpg",function() {
			return new minko_file_JPEGParser();
		});
		sceneManager.get_assets().get_loader().queue("effect/Phong.effect").queue(tutorial_WorkingEnvironmentMaps.ENVMAP).queue(tutorial_WorkingEnvironmentMaps.MYTEXTURE);
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(0));
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 1.0;
		this1.z = 1.3;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest)).addComponent(minko_component_PerspectiveCamera.create(tutorial_WorkingEnvironmentMaps.WINDOW_WIDTH / tutorial_WorkingEnvironmentMaps.WINDOW_HEIGHT,Math.PI * 0.25,.1,1000.0));
		var spotLight = minko_scene_Node.create("spotLight").addComponent(minko_component_SpotLight.create(.6,.78,20.0));
		var this6 = new glm_Vec3Base();
		this6.x = 3.0;
		this6.y = 5.0;
		this6.z = 1.5;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var this8 = new glm_Vec3Base();
		this8.x = 0.0;
		this8.y = 1.0;
		this8.z = 0.0;
		var this9 = new glm_Mat4Base();
		this9._00 = 0;
		this9._01 = 0;
		this9._02 = 0;
		this9._03 = 0;
		this9._10 = 0;
		this9._11 = 0;
		this9._12 = 0;
		this9._13 = 0;
		this9._20 = 0;
		this9._21 = 0;
		this9._22 = 0;
		this9._23 = 0;
		this9._30 = 0;
		this9._31 = 0;
		this9._32 = 0;
		this9._33 = 0;
		var src1 = glm_GLM.lookAt(this6,this7,this8,this9);
		var this10 = new glm_Mat4Base();
		this10._00 = 0;
		this10._01 = 0;
		this10._02 = 0;
		this10._03 = 0;
		this10._10 = 0;
		this10._11 = 0;
		this10._12 = 0;
		this10._13 = 0;
		this10._20 = 0;
		this10._21 = 0;
		this10._22 = 0;
		this10._23 = 0;
		this10._30 = 0;
		this10._31 = 0;
		this10._32 = 0;
		this10._33 = 0;
		var dest1 = this10;
		var a001 = src1._00;
		var a011 = src1._10;
		var a021 = src1._20;
		var a031 = src1._30;
		var a101 = src1._01;
		var a111 = src1._11;
		var a121 = src1._21;
		var a131 = src1._31;
		var a201 = src1._02;
		var a211 = src1._12;
		var a221 = src1._22;
		var a231 = src1._32;
		var a301 = src1._03;
		var a311 = src1._13;
		var a321 = src1._23;
		var a331 = src1._33;
		var t001 = a121 * a231 * a311 - a131 * a221 * a311 + a131 * a211 * a321 - a111 * a231 * a321 - a121 * a211 * a331 + a111 * a221 * a331;
		var t011 = a031 * a221 * a311 - a021 * a231 * a311 - a031 * a211 * a321 + a011 * a231 * a321 + a021 * a211 * a331 - a011 * a221 * a331;
		var t021 = a021 * a131 * a311 - a031 * a121 * a311 + a031 * a111 * a321 - a011 * a131 * a321 - a021 * a111 * a331 + a011 * a121 * a331;
		var t031 = a031 * a121 * a211 - a021 * a131 * a211 - a031 * a111 * a221 + a011 * a131 * a221 + a021 * a111 * a231 - a011 * a121 * a231;
		var det1 = a001 * t001 + a101 * t011 + a201 * t021 + a301 * t031;
		if(Math.abs(det1) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det1 + ") is too small!");
		}
		var idet1 = 1 / det1;
		dest1._00 = t001 * idet1;
		dest1._01 = (a131 * a221 * a301 - a121 * a231 * a301 - a131 * a201 * a321 + a101 * a231 * a321 + a121 * a201 * a331 - a101 * a221 * a331) * idet1;
		dest1._02 = (a111 * a231 * a301 - a131 * a211 * a301 + a131 * a201 * a311 - a101 * a231 * a311 - a111 * a201 * a331 + a101 * a211 * a331) * idet1;
		dest1._03 = (a121 * a211 * a301 - a111 * a221 * a301 - a121 * a201 * a311 + a101 * a221 * a311 + a111 * a201 * a321 - a101 * a211 * a321) * idet1;
		dest1._10 = t011 * idet1;
		dest1._11 = (a021 * a231 * a301 - a031 * a221 * a301 + a031 * a201 * a321 - a001 * a231 * a321 - a021 * a201 * a331 + a001 * a221 * a331) * idet1;
		dest1._12 = (a031 * a211 * a301 - a011 * a231 * a301 - a031 * a201 * a311 + a001 * a231 * a311 + a011 * a201 * a331 - a001 * a211 * a331) * idet1;
		dest1._13 = (a011 * a221 * a301 - a021 * a211 * a301 + a021 * a201 * a311 - a001 * a221 * a311 - a011 * a201 * a321 + a001 * a211 * a321) * idet1;
		dest1._20 = t021 * idet1;
		dest1._21 = (a031 * a121 * a301 - a021 * a131 * a301 - a031 * a101 * a321 + a001 * a131 * a321 + a021 * a101 * a331 - a001 * a121 * a331) * idet1;
		dest1._22 = (a011 * a131 * a301 - a031 * a111 * a301 + a031 * a101 * a311 - a001 * a131 * a311 - a011 * a101 * a331 + a001 * a111 * a331) * idet1;
		dest1._23 = (a021 * a111 * a301 - a011 * a121 * a301 - a021 * a101 * a311 + a001 * a121 * a311 + a011 * a101 * a321 - a001 * a111 * a321) * idet1;
		dest1._30 = t031 * idet1;
		dest1._31 = (a021 * a131 * a201 - a031 * a121 * a201 + a031 * a101 * a221 - a001 * a131 * a221 - a021 * a101 * a231 + a001 * a121 * a231) * idet1;
		dest1._32 = (a031 * a111 * a201 - a011 * a131 * a201 - a031 * a101 * a211 + a001 * a131 * a211 + a011 * a101 * a231 - a001 * a111 * a231) * idet1;
		dest1._33 = (a011 * a121 * a201 - a021 * a111 * a201 + a021 * a101 * a211 - a001 * a121 * a211 - a011 * a101 * a221 + a001 * a111 * a221) * idet1;
		var spotLight1 = spotLight.addComponent(minko_component_Transform.createbyMatrix4(dest1));
		var s1 = spotLight1.getComponent(minko_component_SpotLight);
		s1.set_diffuse(0.5);
		var ambientLight = minko_scene_Node.create("ambientLight").addComponent(minko_component_AmbientLight.create(.2));
		var a1 = ambientLight.getComponent(minko_component_AmbientLight);
		var this11 = new glm_Vec3Base();
		this11.x = 1.0;
		this11.y = 1.0;
		this11.z = 1.0;
		a1.set_color(this11);
		root.addChild(ambientLight);
		root.addChild(spotLight1);
		root.addChild(camera1);
		var complete = sceneManager.get_assets().get_loader().get_complete().connect(function(loader) {
			var phongMaterial = minko_material_PhongMaterial.create();
			phongMaterial.set_diffuseMap(sceneManager.get_assets().texture(tutorial_WorkingEnvironmentMaps.MYTEXTURE));
			phongMaterial.set_environmentMap(sceneManager.get_assets().texture(tutorial_WorkingEnvironmentMaps.ENVMAP));
			phongMaterial.set_environmentAlpha(.5);
			var sphereGeom = minko_geometry_SphereGeometry.create(sceneManager.get_canvas().get_context(),20);
			sphereGeom.computeTangentSpace(true);
			var mesh = minko_scene_Node.create("mesh");
			var this12 = new glm_Vec3Base();
			this12.x = 1.1;
			this12.y = 1.1;
			this12.z = 1.1;
			var amount = this12;
			var this13 = new glm_Mat4Base();
			this13._00 = 0;
			this13._01 = 0;
			this13._02 = 0;
			this13._03 = 0;
			this13._10 = 0;
			this13._11 = 0;
			this13._12 = 0;
			this13._13 = 0;
			this13._20 = 0;
			this13._21 = 0;
			this13._22 = 0;
			this13._23 = 0;
			this13._30 = 0;
			this13._31 = 0;
			this13._32 = 0;
			this13._33 = 0;
			var dest2 = this13;
			dest2._00 = 1;
			dest2._10 = 0;
			dest2._20 = 0;
			dest2._30 = 0;
			dest2._01 = 0;
			dest2._11 = 1;
			dest2._21 = 0;
			dest2._31 = 0;
			dest2._02 = 0;
			dest2._12 = 0;
			dest2._22 = 1;
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			dest2._00 = amount.x;
			dest2._11 = amount.y;
			dest2._22 = amount.z;
			var mesh1 = mesh.addComponent(minko_component_Transform.createbyMatrix4(dest2)).addComponent(minko_component_Surface.create(sphereGeom,phongMaterial,sceneManager.get_assets().effect("effect/Phong.effect")));
			root.addChild(mesh1);
		});
		sceneManager.get_assets().get_loader().load();
		var enterFrame = canvas.get_enterFrame().connect(function(canvas1,t,dt) {
			sceneManager.nextFrame(t,dt);
		});
		canvas.run();
	}
}
tutorial_WorkingEnvironmentMaps.__name__ = true;
Object.assign(tutorial_WorkingEnvironmentMaps.prototype, {
	__class__: tutorial_WorkingEnvironmentMaps
});
class tutorial_WorkingNormalMaps {
	constructor() {
		var canvas = minko_WebCanvas.create("Minko Tutorial - Working with the PhongMaterial",tutorial_WorkingNormalMaps.WINDOW_WIDTH,tutorial_WorkingNormalMaps.WINDOW_HEIGHT);
		var sceneManager = minko_component_SceneManager.create(canvas);
		sceneManager.get_assets().get_loader().get_options().registerParser("jpg",function() {
			return new minko_file_JPEGParser();
		});
		sceneManager.get_assets().get_loader().queue("effect/Phong.effect").queue(tutorial_WorkingNormalMaps.NORMALMAP).queue(tutorial_WorkingNormalMaps.MYTEXTURE);
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(0));
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 1.0;
		this1.z = 1.3;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest)).addComponent(minko_component_PerspectiveCamera.create(tutorial_WorkingNormalMaps.WINDOW_WIDTH / tutorial_WorkingNormalMaps.WINDOW_HEIGHT,Math.PI * 0.25,.1,1000.0));
		var spotLight = minko_scene_Node.create("spotLight").addComponent(minko_component_SpotLight.create(.6,.78,20.0));
		var this6 = new glm_Vec3Base();
		this6.x = 3.0;
		this6.y = 5.0;
		this6.z = 1.5;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var this8 = new glm_Vec3Base();
		this8.x = 0.0;
		this8.y = 1.0;
		this8.z = 0.0;
		var this9 = new glm_Mat4Base();
		this9._00 = 0;
		this9._01 = 0;
		this9._02 = 0;
		this9._03 = 0;
		this9._10 = 0;
		this9._11 = 0;
		this9._12 = 0;
		this9._13 = 0;
		this9._20 = 0;
		this9._21 = 0;
		this9._22 = 0;
		this9._23 = 0;
		this9._30 = 0;
		this9._31 = 0;
		this9._32 = 0;
		this9._33 = 0;
		var src1 = glm_GLM.lookAt(this6,this7,this8,this9);
		var this10 = new glm_Mat4Base();
		this10._00 = 0;
		this10._01 = 0;
		this10._02 = 0;
		this10._03 = 0;
		this10._10 = 0;
		this10._11 = 0;
		this10._12 = 0;
		this10._13 = 0;
		this10._20 = 0;
		this10._21 = 0;
		this10._22 = 0;
		this10._23 = 0;
		this10._30 = 0;
		this10._31 = 0;
		this10._32 = 0;
		this10._33 = 0;
		var dest1 = this10;
		var a001 = src1._00;
		var a011 = src1._10;
		var a021 = src1._20;
		var a031 = src1._30;
		var a101 = src1._01;
		var a111 = src1._11;
		var a121 = src1._21;
		var a131 = src1._31;
		var a201 = src1._02;
		var a211 = src1._12;
		var a221 = src1._22;
		var a231 = src1._32;
		var a301 = src1._03;
		var a311 = src1._13;
		var a321 = src1._23;
		var a331 = src1._33;
		var t001 = a121 * a231 * a311 - a131 * a221 * a311 + a131 * a211 * a321 - a111 * a231 * a321 - a121 * a211 * a331 + a111 * a221 * a331;
		var t011 = a031 * a221 * a311 - a021 * a231 * a311 - a031 * a211 * a321 + a011 * a231 * a321 + a021 * a211 * a331 - a011 * a221 * a331;
		var t021 = a021 * a131 * a311 - a031 * a121 * a311 + a031 * a111 * a321 - a011 * a131 * a321 - a021 * a111 * a331 + a011 * a121 * a331;
		var t031 = a031 * a121 * a211 - a021 * a131 * a211 - a031 * a111 * a221 + a011 * a131 * a221 + a021 * a111 * a231 - a011 * a121 * a231;
		var det1 = a001 * t001 + a101 * t011 + a201 * t021 + a301 * t031;
		if(Math.abs(det1) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det1 + ") is too small!");
		}
		var idet1 = 1 / det1;
		dest1._00 = t001 * idet1;
		dest1._01 = (a131 * a221 * a301 - a121 * a231 * a301 - a131 * a201 * a321 + a101 * a231 * a321 + a121 * a201 * a331 - a101 * a221 * a331) * idet1;
		dest1._02 = (a111 * a231 * a301 - a131 * a211 * a301 + a131 * a201 * a311 - a101 * a231 * a311 - a111 * a201 * a331 + a101 * a211 * a331) * idet1;
		dest1._03 = (a121 * a211 * a301 - a111 * a221 * a301 - a121 * a201 * a311 + a101 * a221 * a311 + a111 * a201 * a321 - a101 * a211 * a321) * idet1;
		dest1._10 = t011 * idet1;
		dest1._11 = (a021 * a231 * a301 - a031 * a221 * a301 + a031 * a201 * a321 - a001 * a231 * a321 - a021 * a201 * a331 + a001 * a221 * a331) * idet1;
		dest1._12 = (a031 * a211 * a301 - a011 * a231 * a301 - a031 * a201 * a311 + a001 * a231 * a311 + a011 * a201 * a331 - a001 * a211 * a331) * idet1;
		dest1._13 = (a011 * a221 * a301 - a021 * a211 * a301 + a021 * a201 * a311 - a001 * a221 * a311 - a011 * a201 * a321 + a001 * a211 * a321) * idet1;
		dest1._20 = t021 * idet1;
		dest1._21 = (a031 * a121 * a301 - a021 * a131 * a301 - a031 * a101 * a321 + a001 * a131 * a321 + a021 * a101 * a331 - a001 * a121 * a331) * idet1;
		dest1._22 = (a011 * a131 * a301 - a031 * a111 * a301 + a031 * a101 * a311 - a001 * a131 * a311 - a011 * a101 * a331 + a001 * a111 * a331) * idet1;
		dest1._23 = (a021 * a111 * a301 - a011 * a121 * a301 - a021 * a101 * a311 + a001 * a121 * a311 + a011 * a101 * a321 - a001 * a111 * a321) * idet1;
		dest1._30 = t031 * idet1;
		dest1._31 = (a021 * a131 * a201 - a031 * a121 * a201 + a031 * a101 * a221 - a001 * a131 * a221 - a021 * a101 * a231 + a001 * a121 * a231) * idet1;
		dest1._32 = (a031 * a111 * a201 - a011 * a131 * a201 - a031 * a101 * a211 + a001 * a131 * a211 + a011 * a101 * a231 - a001 * a111 * a231) * idet1;
		dest1._33 = (a011 * a121 * a201 - a021 * a111 * a201 + a021 * a101 * a211 - a001 * a121 * a211 - a011 * a101 * a221 + a001 * a111 * a221) * idet1;
		var spotLight1 = spotLight.addComponent(minko_component_Transform.createbyMatrix4(dest1));
		var s1 = spotLight1.getComponent(minko_component_SpotLight);
		s1.set_diffuse(0.5);
		var ambientLight = minko_scene_Node.create("ambientLight").addComponent(minko_component_AmbientLight.create(.2));
		var a1 = ambientLight.getComponent(minko_component_AmbientLight);
		var this11 = new glm_Vec3Base();
		this11.x = 1.0;
		this11.y = 1.0;
		this11.z = 1.0;
		a1.set_color(this11);
		root.addChild(ambientLight);
		root.addChild(spotLight1);
		root.addChild(camera1);
		var complete = sceneManager.get_assets().get_loader().get_complete().connect(function(loader) {
			var phongMaterial = minko_material_PhongMaterial.create();
			phongMaterial.set_diffuseMap(sceneManager.get_assets().texture(tutorial_WorkingNormalMaps.MYTEXTURE));
			var this12 = new glm_Vec4Base();
			this12.x = .4;
			this12.y = .8;
			this12.z = 1.0;
			this12.w = 1.0;
			phongMaterial.set_specularColor(this12);
			phongMaterial.set_shininess(2.0);
			phongMaterial.set_normalMap(sceneManager.get_assets().texture(tutorial_WorkingNormalMaps.NORMALMAP));
			var sphereGeom = minko_geometry_SphereGeometry.create(sceneManager.get_canvas().get_context(),20);
			sphereGeom.computeTangentSpace(true);
			var mesh = minko_scene_Node.create("mesh");
			var this13 = new glm_Vec3Base();
			this13.x = 1.1;
			this13.y = 1.1;
			this13.z = 1.1;
			var amount = this13;
			var this14 = new glm_Mat4Base();
			this14._00 = 0;
			this14._01 = 0;
			this14._02 = 0;
			this14._03 = 0;
			this14._10 = 0;
			this14._11 = 0;
			this14._12 = 0;
			this14._13 = 0;
			this14._20 = 0;
			this14._21 = 0;
			this14._22 = 0;
			this14._23 = 0;
			this14._30 = 0;
			this14._31 = 0;
			this14._32 = 0;
			this14._33 = 0;
			var dest2 = this14;
			dest2._00 = 1;
			dest2._10 = 0;
			dest2._20 = 0;
			dest2._30 = 0;
			dest2._01 = 0;
			dest2._11 = 1;
			dest2._21 = 0;
			dest2._31 = 0;
			dest2._02 = 0;
			dest2._12 = 0;
			dest2._22 = 1;
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			dest2._00 = amount.x;
			dest2._11 = amount.y;
			dest2._22 = amount.z;
			var mesh1 = mesh.addComponent(minko_component_Transform.createbyMatrix4(dest2)).addComponent(minko_component_Surface.create(sphereGeom,phongMaterial,sceneManager.get_assets().effect("effect/Phong.effect")));
			root.addChild(mesh1);
		});
		sceneManager.get_assets().get_loader().load();
		var enterFrame = canvas.get_enterFrame().connect(function(canvas1,t,dt) {
			sceneManager.nextFrame(t,dt);
		});
		canvas.run();
	}
}
tutorial_WorkingNormalMaps.__name__ = true;
Object.assign(tutorial_WorkingNormalMaps.prototype, {
	__class__: tutorial_WorkingNormalMaps
});
class tutorial_WorkingPointlights {
	constructor() {
		this.init();
	}
	init() {
		var canvas = minko_WebCanvas.create("Minko Tutorial - Working with point lights",tutorial_WorkingPointlights.WINDOW_WIDTH,tutorial_WorkingPointlights.WINDOW_HEIGHT);
		var sceneManager = minko_component_SceneManager.create(canvas);
		sceneManager.get_assets().get_loader().queue("effect/Phong.effect");
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(2139062271));
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 1.5;
		this1.z = 2.3;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest)).addComponent(minko_component_PerspectiveCamera.create(tutorial_WorkingPointlights.WINDOW_WIDTH / tutorial_WorkingPointlights.WINDOW_HEIGHT,Math.PI * 0.25,.1,1000.0));
		root.addChild(camera1);
		var ground = minko_scene_Node.create("ground");
		var leftWall = minko_scene_Node.create("leftWall");
		var rightWall = minko_scene_Node.create("rightWall");
		var backWall = minko_scene_Node.create("backWall");
		var pointLight = minko_scene_Node.create("pointLight");
		var complete = sceneManager.get_assets().get_loader().get_complete().connect(function(loader) {
			var groundBasicMaterial = minko_material_BasicMaterial.create();
			var this6 = new glm_Vec4Base();
			this6.x = 1.0;
			this6.y = .5;
			this6.z = .5;
			this6.w = 1.0;
			groundBasicMaterial.set_diffuseColor(this6);
			var complete1 = minko_component_Surface.create(minko_geometry_QuadGeometry.create(sceneManager.get_assets().get_context()),groundBasicMaterial,sceneManager.get_assets().effect("effect/Phong.effect"));
			var complete2 = ground.addComponent(complete1);
			var this7 = new glm_Vec3Base();
			this7.x = 4.0;
			this7.y = 4.0;
			this7.z = 4.0;
			var amount = this7;
			var this8 = new glm_Mat4Base();
			this8._00 = 0;
			this8._01 = 0;
			this8._02 = 0;
			this8._03 = 0;
			this8._10 = 0;
			this8._11 = 0;
			this8._12 = 0;
			this8._13 = 0;
			this8._20 = 0;
			this8._21 = 0;
			this8._22 = 0;
			this8._23 = 0;
			this8._30 = 0;
			this8._31 = 0;
			this8._32 = 0;
			this8._33 = 0;
			var dest1 = this8;
			dest1._00 = 1;
			dest1._10 = 0;
			dest1._20 = 0;
			dest1._30 = 0;
			dest1._01 = 0;
			dest1._11 = 1;
			dest1._21 = 0;
			dest1._31 = 0;
			dest1._02 = 0;
			dest1._12 = 0;
			dest1._22 = 1;
			dest1._32 = 0;
			dest1._03 = 0;
			dest1._13 = 0;
			dest1._23 = 0;
			dest1._33 = 1;
			dest1._00 = amount.x;
			dest1._11 = amount.y;
			dest1._22 = amount.z;
			var a = dest1;
			var this9 = new glm_Vec3Base();
			this9.x = 1.0;
			this9.y = 0.0;
			this9.z = 0.0;
			var axis = this9;
			var angle = -Math.PI / 2;
			var this10 = new glm_QuatBase();
			this10.x = 0;
			this10.y = 0;
			this10.z = 0;
			this10.w = 1;
			var dest2 = this10;
			angle *= 0.5;
			var s = Math.sin(angle);
			dest2.x = s * axis.x;
			dest2.y = s * axis.y;
			dest2.z = s * axis.z;
			dest2.w = Math.cos(angle);
			var rotation = dest2;
			var this11 = new glm_Mat4Base();
			this11._00 = 0;
			this11._01 = 0;
			this11._02 = 0;
			this11._03 = 0;
			this11._10 = 0;
			this11._11 = 0;
			this11._12 = 0;
			this11._13 = 0;
			this11._20 = 0;
			this11._21 = 0;
			this11._22 = 0;
			this11._23 = 0;
			this11._30 = 0;
			this11._31 = 0;
			this11._32 = 0;
			this11._33 = 0;
			var dest3 = this11;
			var x2 = rotation.x + rotation.x;
			var y2 = rotation.y + rotation.y;
			var z2 = rotation.z + rotation.z;
			var xx = rotation.x * x2;
			var xy = rotation.x * y2;
			var xz = rotation.x * z2;
			var yy = rotation.y * y2;
			var yz = rotation.y * z2;
			var zz = rotation.z * z2;
			var wx = rotation.w * x2;
			var wy = rotation.w * y2;
			var wz = rotation.w * z2;
			dest3._00 = 1 - (yy + zz);
			dest3._10 = xy - wz;
			dest3._20 = xz + wy;
			dest3._30 = 0;
			dest3._01 = xy + wz;
			dest3._11 = 1 - (xx + zz);
			dest3._21 = yz - wx;
			dest3._31 = 0;
			dest3._02 = xz - wy;
			dest3._12 = yz + wx;
			dest3._22 = 1 - (xx + yy);
			dest3._32 = 0;
			dest3._03 = 0;
			dest3._13 = 0;
			dest3._23 = 0;
			dest3._33 = 1;
			var b = dest3;
			var this12 = new glm_Mat4Base();
			this12._00 = 0;
			this12._01 = 0;
			this12._02 = 0;
			this12._03 = 0;
			this12._10 = 0;
			this12._11 = 0;
			this12._12 = 0;
			this12._13 = 0;
			this12._20 = 0;
			this12._21 = 0;
			this12._22 = 0;
			this12._23 = 0;
			this12._30 = 0;
			this12._31 = 0;
			this12._32 = 0;
			this12._33 = 0;
			var dest4 = this12;
			var _a;
			var _b;
			if(dest4 == a) {
				var this13 = new glm_Mat4Base();
				this13._00 = 0;
				this13._01 = 0;
				this13._02 = 0;
				this13._03 = 0;
				this13._10 = 0;
				this13._11 = 0;
				this13._12 = 0;
				this13._13 = 0;
				this13._20 = 0;
				this13._21 = 0;
				this13._22 = 0;
				this13._23 = 0;
				this13._30 = 0;
				this13._31 = 0;
				this13._32 = 0;
				this13._33 = 0;
				var dest5 = this13;
				dest5._00 = a._00;
				dest5._10 = a._10;
				dest5._20 = a._20;
				dest5._30 = a._30;
				dest5._01 = a._01;
				dest5._11 = a._11;
				dest5._21 = a._21;
				dest5._31 = a._31;
				dest5._02 = a._02;
				dest5._12 = a._12;
				dest5._22 = a._22;
				dest5._32 = a._32;
				dest5._03 = a._03;
				dest5._13 = a._13;
				dest5._23 = a._23;
				dest5._33 = a._33;
				_a = dest5;
				_b = b;
			} else if(dest4 == b) {
				_a = a;
				var this14 = new glm_Mat4Base();
				this14._00 = 0;
				this14._01 = 0;
				this14._02 = 0;
				this14._03 = 0;
				this14._10 = 0;
				this14._11 = 0;
				this14._12 = 0;
				this14._13 = 0;
				this14._20 = 0;
				this14._21 = 0;
				this14._22 = 0;
				this14._23 = 0;
				this14._30 = 0;
				this14._31 = 0;
				this14._32 = 0;
				this14._33 = 0;
				var dest6 = this14;
				dest6._00 = b._00;
				dest6._10 = b._10;
				dest6._20 = b._20;
				dest6._30 = b._30;
				dest6._01 = b._01;
				dest6._11 = b._11;
				dest6._21 = b._21;
				dest6._31 = b._31;
				dest6._02 = b._02;
				dest6._12 = b._12;
				dest6._22 = b._22;
				dest6._32 = b._32;
				dest6._03 = b._03;
				dest6._13 = b._13;
				dest6._23 = b._23;
				dest6._33 = b._33;
				_b = dest6;
			} else {
				_a = a;
				_b = b;
			}
			dest4._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest4._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest4._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest4._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest4._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest4._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest4._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest4._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest4._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest4._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest4._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest4._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest4._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest4._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest4._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest4._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			complete2.addComponent(minko_component_Transform.createbyMatrix4(dest4));
			var leftWallBasicMaterial = minko_material_BasicMaterial.create();
			var this15 = new glm_Vec4Base();
			this15.x = .5;
			this15.y = .5;
			this15.z = .5;
			this15.w = 1.0;
			leftWallBasicMaterial.set_diffuseColor(this15);
			var complete3 = minko_component_Surface.create(minko_geometry_QuadGeometry.create(sceneManager.get_assets().get_context()),leftWallBasicMaterial,sceneManager.get_assets().effect("effect/Phong.effect"));
			var complete4 = leftWall.addComponent(complete3);
			var this16 = new glm_Vec3Base();
			this16.x = -1.0;
			this16.y = 0.0;
			this16.z = 0.0;
			var translation = this16;
			var this17 = new glm_Mat4Base();
			this17._00 = 0;
			this17._01 = 0;
			this17._02 = 0;
			this17._03 = 0;
			this17._10 = 0;
			this17._11 = 0;
			this17._12 = 0;
			this17._13 = 0;
			this17._20 = 0;
			this17._21 = 0;
			this17._22 = 0;
			this17._23 = 0;
			this17._30 = 0;
			this17._31 = 0;
			this17._32 = 0;
			this17._33 = 0;
			var dest7 = this17;
			dest7._00 = 1;
			dest7._10 = 0;
			dest7._20 = 0;
			dest7._30 = 0;
			dest7._01 = 0;
			dest7._11 = 1;
			dest7._21 = 0;
			dest7._31 = 0;
			dest7._02 = 0;
			dest7._12 = 0;
			dest7._22 = 1;
			dest7._32 = 0;
			dest7._03 = 0;
			dest7._13 = 0;
			dest7._23 = 0;
			dest7._33 = 1;
			dest7._30 = translation.x;
			dest7._31 = translation.y;
			dest7._32 = translation.z;
			var a1 = dest7;
			var this18 = new glm_Vec3Base();
			this18.x = 4.0;
			this18.y = 4.0;
			this18.z = 4.0;
			var amount1 = this18;
			var this19 = new glm_Mat4Base();
			this19._00 = 0;
			this19._01 = 0;
			this19._02 = 0;
			this19._03 = 0;
			this19._10 = 0;
			this19._11 = 0;
			this19._12 = 0;
			this19._13 = 0;
			this19._20 = 0;
			this19._21 = 0;
			this19._22 = 0;
			this19._23 = 0;
			this19._30 = 0;
			this19._31 = 0;
			this19._32 = 0;
			this19._33 = 0;
			var dest8 = this19;
			dest8._00 = 1;
			dest8._10 = 0;
			dest8._20 = 0;
			dest8._30 = 0;
			dest8._01 = 0;
			dest8._11 = 1;
			dest8._21 = 0;
			dest8._31 = 0;
			dest8._02 = 0;
			dest8._12 = 0;
			dest8._22 = 1;
			dest8._32 = 0;
			dest8._03 = 0;
			dest8._13 = 0;
			dest8._23 = 0;
			dest8._33 = 1;
			dest8._00 = amount1.x;
			dest8._11 = amount1.y;
			dest8._22 = amount1.z;
			var b1 = dest8;
			var this20 = new glm_Mat4Base();
			this20._00 = 0;
			this20._01 = 0;
			this20._02 = 0;
			this20._03 = 0;
			this20._10 = 0;
			this20._11 = 0;
			this20._12 = 0;
			this20._13 = 0;
			this20._20 = 0;
			this20._21 = 0;
			this20._22 = 0;
			this20._23 = 0;
			this20._30 = 0;
			this20._31 = 0;
			this20._32 = 0;
			this20._33 = 0;
			var dest9 = this20;
			var _a1;
			var _b1;
			if(dest9 == a1) {
				var this21 = new glm_Mat4Base();
				this21._00 = 0;
				this21._01 = 0;
				this21._02 = 0;
				this21._03 = 0;
				this21._10 = 0;
				this21._11 = 0;
				this21._12 = 0;
				this21._13 = 0;
				this21._20 = 0;
				this21._21 = 0;
				this21._22 = 0;
				this21._23 = 0;
				this21._30 = 0;
				this21._31 = 0;
				this21._32 = 0;
				this21._33 = 0;
				var dest10 = this21;
				dest10._00 = a1._00;
				dest10._10 = a1._10;
				dest10._20 = a1._20;
				dest10._30 = a1._30;
				dest10._01 = a1._01;
				dest10._11 = a1._11;
				dest10._21 = a1._21;
				dest10._31 = a1._31;
				dest10._02 = a1._02;
				dest10._12 = a1._12;
				dest10._22 = a1._22;
				dest10._32 = a1._32;
				dest10._03 = a1._03;
				dest10._13 = a1._13;
				dest10._23 = a1._23;
				dest10._33 = a1._33;
				_a1 = dest10;
				_b1 = b1;
			} else if(dest9 == b1) {
				_a1 = a1;
				var this22 = new glm_Mat4Base();
				this22._00 = 0;
				this22._01 = 0;
				this22._02 = 0;
				this22._03 = 0;
				this22._10 = 0;
				this22._11 = 0;
				this22._12 = 0;
				this22._13 = 0;
				this22._20 = 0;
				this22._21 = 0;
				this22._22 = 0;
				this22._23 = 0;
				this22._30 = 0;
				this22._31 = 0;
				this22._32 = 0;
				this22._33 = 0;
				var dest11 = this22;
				dest11._00 = b1._00;
				dest11._10 = b1._10;
				dest11._20 = b1._20;
				dest11._30 = b1._30;
				dest11._01 = b1._01;
				dest11._11 = b1._11;
				dest11._21 = b1._21;
				dest11._31 = b1._31;
				dest11._02 = b1._02;
				dest11._12 = b1._12;
				dest11._22 = b1._22;
				dest11._32 = b1._32;
				dest11._03 = b1._03;
				dest11._13 = b1._13;
				dest11._23 = b1._23;
				dest11._33 = b1._33;
				_b1 = dest11;
			} else {
				_a1 = a1;
				_b1 = b1;
			}
			dest9._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
			dest9._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
			dest9._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
			dest9._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
			dest9._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
			dest9._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
			dest9._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
			dest9._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
			dest9._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
			dest9._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
			dest9._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
			dest9._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
			dest9._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
			dest9._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
			dest9._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
			dest9._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
			var a2 = dest9;
			var this23 = new glm_Vec3Base();
			this23.x = 0.0;
			this23.y = 1.0;
			this23.z = 0.0;
			var axis1 = this23;
			var angle1 = Math.PI / 2;
			var this24 = new glm_QuatBase();
			this24.x = 0;
			this24.y = 0;
			this24.z = 0;
			this24.w = 1;
			var dest12 = this24;
			angle1 *= 0.5;
			var s1 = Math.sin(angle1);
			dest12.x = s1 * axis1.x;
			dest12.y = s1 * axis1.y;
			dest12.z = s1 * axis1.z;
			dest12.w = Math.cos(angle1);
			var rotation1 = dest12;
			var this25 = new glm_Mat4Base();
			this25._00 = 0;
			this25._01 = 0;
			this25._02 = 0;
			this25._03 = 0;
			this25._10 = 0;
			this25._11 = 0;
			this25._12 = 0;
			this25._13 = 0;
			this25._20 = 0;
			this25._21 = 0;
			this25._22 = 0;
			this25._23 = 0;
			this25._30 = 0;
			this25._31 = 0;
			this25._32 = 0;
			this25._33 = 0;
			var dest13 = this25;
			var x21 = rotation1.x + rotation1.x;
			var y21 = rotation1.y + rotation1.y;
			var z21 = rotation1.z + rotation1.z;
			var xx1 = rotation1.x * x21;
			var xy1 = rotation1.x * y21;
			var xz1 = rotation1.x * z21;
			var yy1 = rotation1.y * y21;
			var yz1 = rotation1.y * z21;
			var zz1 = rotation1.z * z21;
			var wx1 = rotation1.w * x21;
			var wy1 = rotation1.w * y21;
			var wz1 = rotation1.w * z21;
			dest13._00 = 1 - (yy1 + zz1);
			dest13._10 = xy1 - wz1;
			dest13._20 = xz1 + wy1;
			dest13._30 = 0;
			dest13._01 = xy1 + wz1;
			dest13._11 = 1 - (xx1 + zz1);
			dest13._21 = yz1 - wx1;
			dest13._31 = 0;
			dest13._02 = xz1 - wy1;
			dest13._12 = yz1 + wx1;
			dest13._22 = 1 - (xx1 + yy1);
			dest13._32 = 0;
			dest13._03 = 0;
			dest13._13 = 0;
			dest13._23 = 0;
			dest13._33 = 1;
			var b2 = dest13;
			var this26 = new glm_Mat4Base();
			this26._00 = 0;
			this26._01 = 0;
			this26._02 = 0;
			this26._03 = 0;
			this26._10 = 0;
			this26._11 = 0;
			this26._12 = 0;
			this26._13 = 0;
			this26._20 = 0;
			this26._21 = 0;
			this26._22 = 0;
			this26._23 = 0;
			this26._30 = 0;
			this26._31 = 0;
			this26._32 = 0;
			this26._33 = 0;
			var dest14 = this26;
			var _a2;
			var _b2;
			if(dest14 == a2) {
				var this27 = new glm_Mat4Base();
				this27._00 = 0;
				this27._01 = 0;
				this27._02 = 0;
				this27._03 = 0;
				this27._10 = 0;
				this27._11 = 0;
				this27._12 = 0;
				this27._13 = 0;
				this27._20 = 0;
				this27._21 = 0;
				this27._22 = 0;
				this27._23 = 0;
				this27._30 = 0;
				this27._31 = 0;
				this27._32 = 0;
				this27._33 = 0;
				var dest15 = this27;
				dest15._00 = a2._00;
				dest15._10 = a2._10;
				dest15._20 = a2._20;
				dest15._30 = a2._30;
				dest15._01 = a2._01;
				dest15._11 = a2._11;
				dest15._21 = a2._21;
				dest15._31 = a2._31;
				dest15._02 = a2._02;
				dest15._12 = a2._12;
				dest15._22 = a2._22;
				dest15._32 = a2._32;
				dest15._03 = a2._03;
				dest15._13 = a2._13;
				dest15._23 = a2._23;
				dest15._33 = a2._33;
				_a2 = dest15;
				_b2 = b2;
			} else if(dest14 == b2) {
				_a2 = a2;
				var this28 = new glm_Mat4Base();
				this28._00 = 0;
				this28._01 = 0;
				this28._02 = 0;
				this28._03 = 0;
				this28._10 = 0;
				this28._11 = 0;
				this28._12 = 0;
				this28._13 = 0;
				this28._20 = 0;
				this28._21 = 0;
				this28._22 = 0;
				this28._23 = 0;
				this28._30 = 0;
				this28._31 = 0;
				this28._32 = 0;
				this28._33 = 0;
				var dest16 = this28;
				dest16._00 = b2._00;
				dest16._10 = b2._10;
				dest16._20 = b2._20;
				dest16._30 = b2._30;
				dest16._01 = b2._01;
				dest16._11 = b2._11;
				dest16._21 = b2._21;
				dest16._31 = b2._31;
				dest16._02 = b2._02;
				dest16._12 = b2._12;
				dest16._22 = b2._22;
				dest16._32 = b2._32;
				dest16._03 = b2._03;
				dest16._13 = b2._13;
				dest16._23 = b2._23;
				dest16._33 = b2._33;
				_b2 = dest16;
			} else {
				_a2 = a2;
				_b2 = b2;
			}
			dest14._00 = _a2._00 * _b2._00 + _a2._10 * _b2._01 + _a2._20 * _b2._02 + _a2._30 * _b2._03;
			dest14._10 = _a2._00 * _b2._10 + _a2._10 * _b2._11 + _a2._20 * _b2._12 + _a2._30 * _b2._13;
			dest14._20 = _a2._00 * _b2._20 + _a2._10 * _b2._21 + _a2._20 * _b2._22 + _a2._30 * _b2._23;
			dest14._30 = _a2._00 * _b2._30 + _a2._10 * _b2._31 + _a2._20 * _b2._32 + _a2._30 * _b2._33;
			dest14._01 = _a2._01 * _b2._00 + _a2._11 * _b2._01 + _a2._21 * _b2._02 + _a2._31 * _b2._03;
			dest14._11 = _a2._01 * _b2._10 + _a2._11 * _b2._11 + _a2._21 * _b2._12 + _a2._31 * _b2._13;
			dest14._21 = _a2._01 * _b2._20 + _a2._11 * _b2._21 + _a2._21 * _b2._22 + _a2._31 * _b2._23;
			dest14._31 = _a2._01 * _b2._30 + _a2._11 * _b2._31 + _a2._21 * _b2._32 + _a2._31 * _b2._33;
			dest14._02 = _a2._02 * _b2._00 + _a2._12 * _b2._01 + _a2._22 * _b2._02 + _a2._32 * _b2._03;
			dest14._12 = _a2._02 * _b2._10 + _a2._12 * _b2._11 + _a2._22 * _b2._12 + _a2._32 * _b2._13;
			dest14._22 = _a2._02 * _b2._20 + _a2._12 * _b2._21 + _a2._22 * _b2._22 + _a2._32 * _b2._23;
			dest14._32 = _a2._02 * _b2._30 + _a2._12 * _b2._31 + _a2._22 * _b2._32 + _a2._32 * _b2._33;
			dest14._03 = _a2._03 * _b2._00 + _a2._13 * _b2._01 + _a2._23 * _b2._02 + _a2._33 * _b2._03;
			dest14._13 = _a2._03 * _b2._10 + _a2._13 * _b2._11 + _a2._23 * _b2._12 + _a2._33 * _b2._13;
			dest14._23 = _a2._03 * _b2._20 + _a2._13 * _b2._21 + _a2._23 * _b2._22 + _a2._33 * _b2._23;
			dest14._33 = _a2._03 * _b2._30 + _a2._13 * _b2._31 + _a2._23 * _b2._32 + _a2._33 * _b2._33;
			complete4.addComponent(minko_component_Transform.createbyMatrix4(dest14));
			var rightWallBasicMaterial = minko_material_BasicMaterial.create();
			var this29 = new glm_Vec4Base();
			this29.x = .5;
			this29.y = .5;
			this29.z = .5;
			this29.w = 1.0;
			rightWallBasicMaterial.set_diffuseColor(this29);
			var complete5 = minko_component_Surface.create(minko_geometry_QuadGeometry.create(sceneManager.get_assets().get_context()),rightWallBasicMaterial,sceneManager.get_assets().effect("effect/Phong.effect"));
			var complete6 = rightWall.addComponent(complete5);
			var this30 = new glm_Vec3Base();
			this30.x = 1.0;
			this30.y = 0.0;
			this30.z = 0.0;
			var translation1 = this30;
			var this31 = new glm_Mat4Base();
			this31._00 = 0;
			this31._01 = 0;
			this31._02 = 0;
			this31._03 = 0;
			this31._10 = 0;
			this31._11 = 0;
			this31._12 = 0;
			this31._13 = 0;
			this31._20 = 0;
			this31._21 = 0;
			this31._22 = 0;
			this31._23 = 0;
			this31._30 = 0;
			this31._31 = 0;
			this31._32 = 0;
			this31._33 = 0;
			var dest17 = this31;
			dest17._00 = 1;
			dest17._10 = 0;
			dest17._20 = 0;
			dest17._30 = 0;
			dest17._01 = 0;
			dest17._11 = 1;
			dest17._21 = 0;
			dest17._31 = 0;
			dest17._02 = 0;
			dest17._12 = 0;
			dest17._22 = 1;
			dest17._32 = 0;
			dest17._03 = 0;
			dest17._13 = 0;
			dest17._23 = 0;
			dest17._33 = 1;
			dest17._30 = translation1.x;
			dest17._31 = translation1.y;
			dest17._32 = translation1.z;
			var a3 = dest17;
			var this32 = new glm_Vec3Base();
			this32.x = 4.0;
			this32.y = 4.0;
			this32.z = 4.0;
			var amount2 = this32;
			var this33 = new glm_Mat4Base();
			this33._00 = 0;
			this33._01 = 0;
			this33._02 = 0;
			this33._03 = 0;
			this33._10 = 0;
			this33._11 = 0;
			this33._12 = 0;
			this33._13 = 0;
			this33._20 = 0;
			this33._21 = 0;
			this33._22 = 0;
			this33._23 = 0;
			this33._30 = 0;
			this33._31 = 0;
			this33._32 = 0;
			this33._33 = 0;
			var dest18 = this33;
			dest18._00 = 1;
			dest18._10 = 0;
			dest18._20 = 0;
			dest18._30 = 0;
			dest18._01 = 0;
			dest18._11 = 1;
			dest18._21 = 0;
			dest18._31 = 0;
			dest18._02 = 0;
			dest18._12 = 0;
			dest18._22 = 1;
			dest18._32 = 0;
			dest18._03 = 0;
			dest18._13 = 0;
			dest18._23 = 0;
			dest18._33 = 1;
			dest18._00 = amount2.x;
			dest18._11 = amount2.y;
			dest18._22 = amount2.z;
			var b3 = dest18;
			var this34 = new glm_Mat4Base();
			this34._00 = 0;
			this34._01 = 0;
			this34._02 = 0;
			this34._03 = 0;
			this34._10 = 0;
			this34._11 = 0;
			this34._12 = 0;
			this34._13 = 0;
			this34._20 = 0;
			this34._21 = 0;
			this34._22 = 0;
			this34._23 = 0;
			this34._30 = 0;
			this34._31 = 0;
			this34._32 = 0;
			this34._33 = 0;
			var dest19 = this34;
			var _a3;
			var _b3;
			if(dest19 == a3) {
				var this35 = new glm_Mat4Base();
				this35._00 = 0;
				this35._01 = 0;
				this35._02 = 0;
				this35._03 = 0;
				this35._10 = 0;
				this35._11 = 0;
				this35._12 = 0;
				this35._13 = 0;
				this35._20 = 0;
				this35._21 = 0;
				this35._22 = 0;
				this35._23 = 0;
				this35._30 = 0;
				this35._31 = 0;
				this35._32 = 0;
				this35._33 = 0;
				var dest20 = this35;
				dest20._00 = a3._00;
				dest20._10 = a3._10;
				dest20._20 = a3._20;
				dest20._30 = a3._30;
				dest20._01 = a3._01;
				dest20._11 = a3._11;
				dest20._21 = a3._21;
				dest20._31 = a3._31;
				dest20._02 = a3._02;
				dest20._12 = a3._12;
				dest20._22 = a3._22;
				dest20._32 = a3._32;
				dest20._03 = a3._03;
				dest20._13 = a3._13;
				dest20._23 = a3._23;
				dest20._33 = a3._33;
				_a3 = dest20;
				_b3 = b3;
			} else if(dest19 == b3) {
				_a3 = a3;
				var this36 = new glm_Mat4Base();
				this36._00 = 0;
				this36._01 = 0;
				this36._02 = 0;
				this36._03 = 0;
				this36._10 = 0;
				this36._11 = 0;
				this36._12 = 0;
				this36._13 = 0;
				this36._20 = 0;
				this36._21 = 0;
				this36._22 = 0;
				this36._23 = 0;
				this36._30 = 0;
				this36._31 = 0;
				this36._32 = 0;
				this36._33 = 0;
				var dest21 = this36;
				dest21._00 = b3._00;
				dest21._10 = b3._10;
				dest21._20 = b3._20;
				dest21._30 = b3._30;
				dest21._01 = b3._01;
				dest21._11 = b3._11;
				dest21._21 = b3._21;
				dest21._31 = b3._31;
				dest21._02 = b3._02;
				dest21._12 = b3._12;
				dest21._22 = b3._22;
				dest21._32 = b3._32;
				dest21._03 = b3._03;
				dest21._13 = b3._13;
				dest21._23 = b3._23;
				dest21._33 = b3._33;
				_b3 = dest21;
			} else {
				_a3 = a3;
				_b3 = b3;
			}
			dest19._00 = _a3._00 * _b3._00 + _a3._10 * _b3._01 + _a3._20 * _b3._02 + _a3._30 * _b3._03;
			dest19._10 = _a3._00 * _b3._10 + _a3._10 * _b3._11 + _a3._20 * _b3._12 + _a3._30 * _b3._13;
			dest19._20 = _a3._00 * _b3._20 + _a3._10 * _b3._21 + _a3._20 * _b3._22 + _a3._30 * _b3._23;
			dest19._30 = _a3._00 * _b3._30 + _a3._10 * _b3._31 + _a3._20 * _b3._32 + _a3._30 * _b3._33;
			dest19._01 = _a3._01 * _b3._00 + _a3._11 * _b3._01 + _a3._21 * _b3._02 + _a3._31 * _b3._03;
			dest19._11 = _a3._01 * _b3._10 + _a3._11 * _b3._11 + _a3._21 * _b3._12 + _a3._31 * _b3._13;
			dest19._21 = _a3._01 * _b3._20 + _a3._11 * _b3._21 + _a3._21 * _b3._22 + _a3._31 * _b3._23;
			dest19._31 = _a3._01 * _b3._30 + _a3._11 * _b3._31 + _a3._21 * _b3._32 + _a3._31 * _b3._33;
			dest19._02 = _a3._02 * _b3._00 + _a3._12 * _b3._01 + _a3._22 * _b3._02 + _a3._32 * _b3._03;
			dest19._12 = _a3._02 * _b3._10 + _a3._12 * _b3._11 + _a3._22 * _b3._12 + _a3._32 * _b3._13;
			dest19._22 = _a3._02 * _b3._20 + _a3._12 * _b3._21 + _a3._22 * _b3._22 + _a3._32 * _b3._23;
			dest19._32 = _a3._02 * _b3._30 + _a3._12 * _b3._31 + _a3._22 * _b3._32 + _a3._32 * _b3._33;
			dest19._03 = _a3._03 * _b3._00 + _a3._13 * _b3._01 + _a3._23 * _b3._02 + _a3._33 * _b3._03;
			dest19._13 = _a3._03 * _b3._10 + _a3._13 * _b3._11 + _a3._23 * _b3._12 + _a3._33 * _b3._13;
			dest19._23 = _a3._03 * _b3._20 + _a3._13 * _b3._21 + _a3._23 * _b3._22 + _a3._33 * _b3._23;
			dest19._33 = _a3._03 * _b3._30 + _a3._13 * _b3._31 + _a3._23 * _b3._32 + _a3._33 * _b3._33;
			var a4 = dest19;
			var this37 = new glm_Vec3Base();
			this37.x = 0.0;
			this37.y = 1.0;
			this37.z = 0.0;
			var axis2 = this37;
			var angle2 = -Math.PI / 2;
			var this38 = new glm_QuatBase();
			this38.x = 0;
			this38.y = 0;
			this38.z = 0;
			this38.w = 1;
			var dest22 = this38;
			angle2 *= 0.5;
			var s2 = Math.sin(angle2);
			dest22.x = s2 * axis2.x;
			dest22.y = s2 * axis2.y;
			dest22.z = s2 * axis2.z;
			dest22.w = Math.cos(angle2);
			var rotation2 = dest22;
			var this39 = new glm_Mat4Base();
			this39._00 = 0;
			this39._01 = 0;
			this39._02 = 0;
			this39._03 = 0;
			this39._10 = 0;
			this39._11 = 0;
			this39._12 = 0;
			this39._13 = 0;
			this39._20 = 0;
			this39._21 = 0;
			this39._22 = 0;
			this39._23 = 0;
			this39._30 = 0;
			this39._31 = 0;
			this39._32 = 0;
			this39._33 = 0;
			var dest23 = this39;
			var x22 = rotation2.x + rotation2.x;
			var y22 = rotation2.y + rotation2.y;
			var z22 = rotation2.z + rotation2.z;
			var xx2 = rotation2.x * x22;
			var xy2 = rotation2.x * y22;
			var xz2 = rotation2.x * z22;
			var yy2 = rotation2.y * y22;
			var yz2 = rotation2.y * z22;
			var zz2 = rotation2.z * z22;
			var wx2 = rotation2.w * x22;
			var wy2 = rotation2.w * y22;
			var wz2 = rotation2.w * z22;
			dest23._00 = 1 - (yy2 + zz2);
			dest23._10 = xy2 - wz2;
			dest23._20 = xz2 + wy2;
			dest23._30 = 0;
			dest23._01 = xy2 + wz2;
			dest23._11 = 1 - (xx2 + zz2);
			dest23._21 = yz2 - wx2;
			dest23._31 = 0;
			dest23._02 = xz2 - wy2;
			dest23._12 = yz2 + wx2;
			dest23._22 = 1 - (xx2 + yy2);
			dest23._32 = 0;
			dest23._03 = 0;
			dest23._13 = 0;
			dest23._23 = 0;
			dest23._33 = 1;
			var b4 = dest23;
			var this40 = new glm_Mat4Base();
			this40._00 = 0;
			this40._01 = 0;
			this40._02 = 0;
			this40._03 = 0;
			this40._10 = 0;
			this40._11 = 0;
			this40._12 = 0;
			this40._13 = 0;
			this40._20 = 0;
			this40._21 = 0;
			this40._22 = 0;
			this40._23 = 0;
			this40._30 = 0;
			this40._31 = 0;
			this40._32 = 0;
			this40._33 = 0;
			var dest24 = this40;
			var _a4;
			var _b4;
			if(dest24 == a4) {
				var this41 = new glm_Mat4Base();
				this41._00 = 0;
				this41._01 = 0;
				this41._02 = 0;
				this41._03 = 0;
				this41._10 = 0;
				this41._11 = 0;
				this41._12 = 0;
				this41._13 = 0;
				this41._20 = 0;
				this41._21 = 0;
				this41._22 = 0;
				this41._23 = 0;
				this41._30 = 0;
				this41._31 = 0;
				this41._32 = 0;
				this41._33 = 0;
				var dest25 = this41;
				dest25._00 = a4._00;
				dest25._10 = a4._10;
				dest25._20 = a4._20;
				dest25._30 = a4._30;
				dest25._01 = a4._01;
				dest25._11 = a4._11;
				dest25._21 = a4._21;
				dest25._31 = a4._31;
				dest25._02 = a4._02;
				dest25._12 = a4._12;
				dest25._22 = a4._22;
				dest25._32 = a4._32;
				dest25._03 = a4._03;
				dest25._13 = a4._13;
				dest25._23 = a4._23;
				dest25._33 = a4._33;
				_a4 = dest25;
				_b4 = b4;
			} else if(dest24 == b4) {
				_a4 = a4;
				var this42 = new glm_Mat4Base();
				this42._00 = 0;
				this42._01 = 0;
				this42._02 = 0;
				this42._03 = 0;
				this42._10 = 0;
				this42._11 = 0;
				this42._12 = 0;
				this42._13 = 0;
				this42._20 = 0;
				this42._21 = 0;
				this42._22 = 0;
				this42._23 = 0;
				this42._30 = 0;
				this42._31 = 0;
				this42._32 = 0;
				this42._33 = 0;
				var dest26 = this42;
				dest26._00 = b4._00;
				dest26._10 = b4._10;
				dest26._20 = b4._20;
				dest26._30 = b4._30;
				dest26._01 = b4._01;
				dest26._11 = b4._11;
				dest26._21 = b4._21;
				dest26._31 = b4._31;
				dest26._02 = b4._02;
				dest26._12 = b4._12;
				dest26._22 = b4._22;
				dest26._32 = b4._32;
				dest26._03 = b4._03;
				dest26._13 = b4._13;
				dest26._23 = b4._23;
				dest26._33 = b4._33;
				_b4 = dest26;
			} else {
				_a4 = a4;
				_b4 = b4;
			}
			dest24._00 = _a4._00 * _b4._00 + _a4._10 * _b4._01 + _a4._20 * _b4._02 + _a4._30 * _b4._03;
			dest24._10 = _a4._00 * _b4._10 + _a4._10 * _b4._11 + _a4._20 * _b4._12 + _a4._30 * _b4._13;
			dest24._20 = _a4._00 * _b4._20 + _a4._10 * _b4._21 + _a4._20 * _b4._22 + _a4._30 * _b4._23;
			dest24._30 = _a4._00 * _b4._30 + _a4._10 * _b4._31 + _a4._20 * _b4._32 + _a4._30 * _b4._33;
			dest24._01 = _a4._01 * _b4._00 + _a4._11 * _b4._01 + _a4._21 * _b4._02 + _a4._31 * _b4._03;
			dest24._11 = _a4._01 * _b4._10 + _a4._11 * _b4._11 + _a4._21 * _b4._12 + _a4._31 * _b4._13;
			dest24._21 = _a4._01 * _b4._20 + _a4._11 * _b4._21 + _a4._21 * _b4._22 + _a4._31 * _b4._23;
			dest24._31 = _a4._01 * _b4._30 + _a4._11 * _b4._31 + _a4._21 * _b4._32 + _a4._31 * _b4._33;
			dest24._02 = _a4._02 * _b4._00 + _a4._12 * _b4._01 + _a4._22 * _b4._02 + _a4._32 * _b4._03;
			dest24._12 = _a4._02 * _b4._10 + _a4._12 * _b4._11 + _a4._22 * _b4._12 + _a4._32 * _b4._13;
			dest24._22 = _a4._02 * _b4._20 + _a4._12 * _b4._21 + _a4._22 * _b4._22 + _a4._32 * _b4._23;
			dest24._32 = _a4._02 * _b4._30 + _a4._12 * _b4._31 + _a4._22 * _b4._32 + _a4._32 * _b4._33;
			dest24._03 = _a4._03 * _b4._00 + _a4._13 * _b4._01 + _a4._23 * _b4._02 + _a4._33 * _b4._03;
			dest24._13 = _a4._03 * _b4._10 + _a4._13 * _b4._11 + _a4._23 * _b4._12 + _a4._33 * _b4._13;
			dest24._23 = _a4._03 * _b4._20 + _a4._13 * _b4._21 + _a4._23 * _b4._22 + _a4._33 * _b4._23;
			dest24._33 = _a4._03 * _b4._30 + _a4._13 * _b4._31 + _a4._23 * _b4._32 + _a4._33 * _b4._33;
			complete6.addComponent(minko_component_Transform.createbyMatrix4(dest24));
			var backWallBasicMaterial = minko_material_BasicMaterial.create();
			var this43 = new glm_Vec4Base();
			this43.x = .5;
			this43.y = .5;
			this43.z = .5;
			this43.w = 1.0;
			backWallBasicMaterial.set_diffuseColor(this43);
			var complete7 = minko_component_Surface.create(minko_geometry_QuadGeometry.create(sceneManager.get_assets().get_context()),backWallBasicMaterial,sceneManager.get_assets().effect("effect/Phong.effect"));
			var complete8 = backWall.addComponent(complete7);
			var this44 = new glm_Vec3Base();
			this44.x = 0.0;
			this44.y = 0.0;
			this44.z = -1.0;
			var translation2 = this44;
			var this45 = new glm_Mat4Base();
			this45._00 = 0;
			this45._01 = 0;
			this45._02 = 0;
			this45._03 = 0;
			this45._10 = 0;
			this45._11 = 0;
			this45._12 = 0;
			this45._13 = 0;
			this45._20 = 0;
			this45._21 = 0;
			this45._22 = 0;
			this45._23 = 0;
			this45._30 = 0;
			this45._31 = 0;
			this45._32 = 0;
			this45._33 = 0;
			var dest27 = this45;
			dest27._00 = 1;
			dest27._10 = 0;
			dest27._20 = 0;
			dest27._30 = 0;
			dest27._01 = 0;
			dest27._11 = 1;
			dest27._21 = 0;
			dest27._31 = 0;
			dest27._02 = 0;
			dest27._12 = 0;
			dest27._22 = 1;
			dest27._32 = 0;
			dest27._03 = 0;
			dest27._13 = 0;
			dest27._23 = 0;
			dest27._33 = 1;
			dest27._30 = translation2.x;
			dest27._31 = translation2.y;
			dest27._32 = translation2.z;
			var a5 = dest27;
			var this46 = new glm_Vec3Base();
			this46.x = 4.0;
			this46.y = 4.0;
			this46.z = 4.0;
			var amount3 = this46;
			var this47 = new glm_Mat4Base();
			this47._00 = 0;
			this47._01 = 0;
			this47._02 = 0;
			this47._03 = 0;
			this47._10 = 0;
			this47._11 = 0;
			this47._12 = 0;
			this47._13 = 0;
			this47._20 = 0;
			this47._21 = 0;
			this47._22 = 0;
			this47._23 = 0;
			this47._30 = 0;
			this47._31 = 0;
			this47._32 = 0;
			this47._33 = 0;
			var dest28 = this47;
			dest28._00 = 1;
			dest28._10 = 0;
			dest28._20 = 0;
			dest28._30 = 0;
			dest28._01 = 0;
			dest28._11 = 1;
			dest28._21 = 0;
			dest28._31 = 0;
			dest28._02 = 0;
			dest28._12 = 0;
			dest28._22 = 1;
			dest28._32 = 0;
			dest28._03 = 0;
			dest28._13 = 0;
			dest28._23 = 0;
			dest28._33 = 1;
			dest28._00 = amount3.x;
			dest28._11 = amount3.y;
			dest28._22 = amount3.z;
			var b5 = dest28;
			var this48 = new glm_Mat4Base();
			this48._00 = 0;
			this48._01 = 0;
			this48._02 = 0;
			this48._03 = 0;
			this48._10 = 0;
			this48._11 = 0;
			this48._12 = 0;
			this48._13 = 0;
			this48._20 = 0;
			this48._21 = 0;
			this48._22 = 0;
			this48._23 = 0;
			this48._30 = 0;
			this48._31 = 0;
			this48._32 = 0;
			this48._33 = 0;
			var dest29 = this48;
			var _a5;
			var _b5;
			if(dest29 == a5) {
				var this49 = new glm_Mat4Base();
				this49._00 = 0;
				this49._01 = 0;
				this49._02 = 0;
				this49._03 = 0;
				this49._10 = 0;
				this49._11 = 0;
				this49._12 = 0;
				this49._13 = 0;
				this49._20 = 0;
				this49._21 = 0;
				this49._22 = 0;
				this49._23 = 0;
				this49._30 = 0;
				this49._31 = 0;
				this49._32 = 0;
				this49._33 = 0;
				var dest30 = this49;
				dest30._00 = a5._00;
				dest30._10 = a5._10;
				dest30._20 = a5._20;
				dest30._30 = a5._30;
				dest30._01 = a5._01;
				dest30._11 = a5._11;
				dest30._21 = a5._21;
				dest30._31 = a5._31;
				dest30._02 = a5._02;
				dest30._12 = a5._12;
				dest30._22 = a5._22;
				dest30._32 = a5._32;
				dest30._03 = a5._03;
				dest30._13 = a5._13;
				dest30._23 = a5._23;
				dest30._33 = a5._33;
				_a5 = dest30;
				_b5 = b5;
			} else if(dest29 == b5) {
				_a5 = a5;
				var this50 = new glm_Mat4Base();
				this50._00 = 0;
				this50._01 = 0;
				this50._02 = 0;
				this50._03 = 0;
				this50._10 = 0;
				this50._11 = 0;
				this50._12 = 0;
				this50._13 = 0;
				this50._20 = 0;
				this50._21 = 0;
				this50._22 = 0;
				this50._23 = 0;
				this50._30 = 0;
				this50._31 = 0;
				this50._32 = 0;
				this50._33 = 0;
				var dest31 = this50;
				dest31._00 = b5._00;
				dest31._10 = b5._10;
				dest31._20 = b5._20;
				dest31._30 = b5._30;
				dest31._01 = b5._01;
				dest31._11 = b5._11;
				dest31._21 = b5._21;
				dest31._31 = b5._31;
				dest31._02 = b5._02;
				dest31._12 = b5._12;
				dest31._22 = b5._22;
				dest31._32 = b5._32;
				dest31._03 = b5._03;
				dest31._13 = b5._13;
				dest31._23 = b5._23;
				dest31._33 = b5._33;
				_b5 = dest31;
			} else {
				_a5 = a5;
				_b5 = b5;
			}
			dest29._00 = _a5._00 * _b5._00 + _a5._10 * _b5._01 + _a5._20 * _b5._02 + _a5._30 * _b5._03;
			dest29._10 = _a5._00 * _b5._10 + _a5._10 * _b5._11 + _a5._20 * _b5._12 + _a5._30 * _b5._13;
			dest29._20 = _a5._00 * _b5._20 + _a5._10 * _b5._21 + _a5._20 * _b5._22 + _a5._30 * _b5._23;
			dest29._30 = _a5._00 * _b5._30 + _a5._10 * _b5._31 + _a5._20 * _b5._32 + _a5._30 * _b5._33;
			dest29._01 = _a5._01 * _b5._00 + _a5._11 * _b5._01 + _a5._21 * _b5._02 + _a5._31 * _b5._03;
			dest29._11 = _a5._01 * _b5._10 + _a5._11 * _b5._11 + _a5._21 * _b5._12 + _a5._31 * _b5._13;
			dest29._21 = _a5._01 * _b5._20 + _a5._11 * _b5._21 + _a5._21 * _b5._22 + _a5._31 * _b5._23;
			dest29._31 = _a5._01 * _b5._30 + _a5._11 * _b5._31 + _a5._21 * _b5._32 + _a5._31 * _b5._33;
			dest29._02 = _a5._02 * _b5._00 + _a5._12 * _b5._01 + _a5._22 * _b5._02 + _a5._32 * _b5._03;
			dest29._12 = _a5._02 * _b5._10 + _a5._12 * _b5._11 + _a5._22 * _b5._12 + _a5._32 * _b5._13;
			dest29._22 = _a5._02 * _b5._20 + _a5._12 * _b5._21 + _a5._22 * _b5._22 + _a5._32 * _b5._23;
			dest29._32 = _a5._02 * _b5._30 + _a5._12 * _b5._31 + _a5._22 * _b5._32 + _a5._32 * _b5._33;
			dest29._03 = _a5._03 * _b5._00 + _a5._13 * _b5._01 + _a5._23 * _b5._02 + _a5._33 * _b5._03;
			dest29._13 = _a5._03 * _b5._10 + _a5._13 * _b5._11 + _a5._23 * _b5._12 + _a5._33 * _b5._13;
			dest29._23 = _a5._03 * _b5._20 + _a5._13 * _b5._21 + _a5._23 * _b5._22 + _a5._33 * _b5._23;
			dest29._33 = _a5._03 * _b5._30 + _a5._13 * _b5._31 + _a5._23 * _b5._32 + _a5._33 * _b5._33;
			complete8.addComponent(minko_component_Transform.createbyMatrix4(dest29));
			var this51 = new glm_Vec3Base();
			this51.x = -.5;
			this51.y = 0.3;
			this51.z = 0.0;
			var translation3 = this51;
			var this52 = new glm_Mat4Base();
			this52._00 = 0;
			this52._01 = 0;
			this52._02 = 0;
			this52._03 = 0;
			this52._10 = 0;
			this52._11 = 0;
			this52._12 = 0;
			this52._13 = 0;
			this52._20 = 0;
			this52._21 = 0;
			this52._22 = 0;
			this52._23 = 0;
			this52._30 = 0;
			this52._31 = 0;
			this52._32 = 0;
			this52._33 = 0;
			var dest32 = this52;
			dest32._00 = 1;
			dest32._10 = 0;
			dest32._20 = 0;
			dest32._30 = 0;
			dest32._01 = 0;
			dest32._11 = 1;
			dest32._21 = 0;
			dest32._31 = 0;
			dest32._02 = 0;
			dest32._12 = 0;
			dest32._22 = 1;
			dest32._32 = 0;
			dest32._03 = 0;
			dest32._13 = 0;
			dest32._23 = 0;
			dest32._33 = 1;
			dest32._30 = translation3.x;
			dest32._31 = translation3.y;
			dest32._32 = translation3.z;
			var complete9 = minko_component_Transform.createbyMatrix4(dest32);
			pointLight.addComponent(complete9);
			var pointLightPointLight = minko_component_PointLight.create();
			pointLightPointLight.set_diffuse(0.8);
			var this53 = new glm_Vec3Base();
			this53.x = 0.5;
			this53.y = 0.5;
			this53.z = 1.0;
			pointLightPointLight.set_color(this53);
			pointLight.addComponent(pointLightPointLight);
			root.addChild(ground);
			root.addChild(leftWall);
			root.addChild(rightWall);
			root.addChild(backWall);
			root.addChild(pointLight);
		});
		sceneManager.get_assets().get_loader().load();
		var enterFrame = canvas.get_enterFrame().connect(function(canvas1,t,dt) {
			sceneManager.nextFrame(t,dt);
		});
		canvas.run();
	}
}
tutorial_WorkingPointlights.__name__ = true;
Object.assign(tutorial_WorkingPointlights.prototype, {
	__class__: tutorial_WorkingPointlights
});
class tutorial_WorkingSpecularMaps {
	constructor() {
		var canvas = minko_WebCanvas.create("Minko Tutorial - Working with the PhongMaterial",tutorial_WorkingSpecularMaps.WINDOW_WIDTH,tutorial_WorkingSpecularMaps.WINDOW_HEIGHT);
		var sceneManager = minko_component_SceneManager.create(canvas);
		sceneManager.get_assets().get_loader().get_options().registerParser("jpg",function() {
			return new minko_file_JPEGParser();
		});
		sceneManager.get_assets().get_loader().queue("effect/Phong.effect").queue(tutorial_WorkingSpecularMaps.SPECULARMAP).queue(tutorial_WorkingSpecularMaps.MYTEXTURE);
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(0));
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 1.0;
		this1.z = 1.3;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest)).addComponent(minko_component_PerspectiveCamera.create(tutorial_WorkingSpecularMaps.WINDOW_WIDTH / tutorial_WorkingSpecularMaps.WINDOW_HEIGHT,Math.PI * 0.25,.1,1000.0));
		var spotLight = minko_scene_Node.create("spotLight").addComponent(minko_component_SpotLight.create(.6,.78,20.0));
		var this6 = new glm_Vec3Base();
		this6.x = 3.0;
		this6.y = 5.0;
		this6.z = 1.5;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var this8 = new glm_Vec3Base();
		this8.x = 0.0;
		this8.y = 1.0;
		this8.z = 0.0;
		var this9 = new glm_Mat4Base();
		this9._00 = 0;
		this9._01 = 0;
		this9._02 = 0;
		this9._03 = 0;
		this9._10 = 0;
		this9._11 = 0;
		this9._12 = 0;
		this9._13 = 0;
		this9._20 = 0;
		this9._21 = 0;
		this9._22 = 0;
		this9._23 = 0;
		this9._30 = 0;
		this9._31 = 0;
		this9._32 = 0;
		this9._33 = 0;
		var src1 = glm_GLM.lookAt(this6,this7,this8,this9);
		var this10 = new glm_Mat4Base();
		this10._00 = 0;
		this10._01 = 0;
		this10._02 = 0;
		this10._03 = 0;
		this10._10 = 0;
		this10._11 = 0;
		this10._12 = 0;
		this10._13 = 0;
		this10._20 = 0;
		this10._21 = 0;
		this10._22 = 0;
		this10._23 = 0;
		this10._30 = 0;
		this10._31 = 0;
		this10._32 = 0;
		this10._33 = 0;
		var dest1 = this10;
		var a001 = src1._00;
		var a011 = src1._10;
		var a021 = src1._20;
		var a031 = src1._30;
		var a101 = src1._01;
		var a111 = src1._11;
		var a121 = src1._21;
		var a131 = src1._31;
		var a201 = src1._02;
		var a211 = src1._12;
		var a221 = src1._22;
		var a231 = src1._32;
		var a301 = src1._03;
		var a311 = src1._13;
		var a321 = src1._23;
		var a331 = src1._33;
		var t001 = a121 * a231 * a311 - a131 * a221 * a311 + a131 * a211 * a321 - a111 * a231 * a321 - a121 * a211 * a331 + a111 * a221 * a331;
		var t011 = a031 * a221 * a311 - a021 * a231 * a311 - a031 * a211 * a321 + a011 * a231 * a321 + a021 * a211 * a331 - a011 * a221 * a331;
		var t021 = a021 * a131 * a311 - a031 * a121 * a311 + a031 * a111 * a321 - a011 * a131 * a321 - a021 * a111 * a331 + a011 * a121 * a331;
		var t031 = a031 * a121 * a211 - a021 * a131 * a211 - a031 * a111 * a221 + a011 * a131 * a221 + a021 * a111 * a231 - a011 * a121 * a231;
		var det1 = a001 * t001 + a101 * t011 + a201 * t021 + a301 * t031;
		if(Math.abs(det1) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det1 + ") is too small!");
		}
		var idet1 = 1 / det1;
		dest1._00 = t001 * idet1;
		dest1._01 = (a131 * a221 * a301 - a121 * a231 * a301 - a131 * a201 * a321 + a101 * a231 * a321 + a121 * a201 * a331 - a101 * a221 * a331) * idet1;
		dest1._02 = (a111 * a231 * a301 - a131 * a211 * a301 + a131 * a201 * a311 - a101 * a231 * a311 - a111 * a201 * a331 + a101 * a211 * a331) * idet1;
		dest1._03 = (a121 * a211 * a301 - a111 * a221 * a301 - a121 * a201 * a311 + a101 * a221 * a311 + a111 * a201 * a321 - a101 * a211 * a321) * idet1;
		dest1._10 = t011 * idet1;
		dest1._11 = (a021 * a231 * a301 - a031 * a221 * a301 + a031 * a201 * a321 - a001 * a231 * a321 - a021 * a201 * a331 + a001 * a221 * a331) * idet1;
		dest1._12 = (a031 * a211 * a301 - a011 * a231 * a301 - a031 * a201 * a311 + a001 * a231 * a311 + a011 * a201 * a331 - a001 * a211 * a331) * idet1;
		dest1._13 = (a011 * a221 * a301 - a021 * a211 * a301 + a021 * a201 * a311 - a001 * a221 * a311 - a011 * a201 * a321 + a001 * a211 * a321) * idet1;
		dest1._20 = t021 * idet1;
		dest1._21 = (a031 * a121 * a301 - a021 * a131 * a301 - a031 * a101 * a321 + a001 * a131 * a321 + a021 * a101 * a331 - a001 * a121 * a331) * idet1;
		dest1._22 = (a011 * a131 * a301 - a031 * a111 * a301 + a031 * a101 * a311 - a001 * a131 * a311 - a011 * a101 * a331 + a001 * a111 * a331) * idet1;
		dest1._23 = (a021 * a111 * a301 - a011 * a121 * a301 - a021 * a101 * a311 + a001 * a121 * a311 + a011 * a101 * a321 - a001 * a111 * a321) * idet1;
		dest1._30 = t031 * idet1;
		dest1._31 = (a021 * a131 * a201 - a031 * a121 * a201 + a031 * a101 * a221 - a001 * a131 * a221 - a021 * a101 * a231 + a001 * a121 * a231) * idet1;
		dest1._32 = (a031 * a111 * a201 - a011 * a131 * a201 - a031 * a101 * a211 + a001 * a131 * a211 + a011 * a101 * a231 - a001 * a111 * a231) * idet1;
		dest1._33 = (a011 * a121 * a201 - a021 * a111 * a201 + a021 * a101 * a211 - a001 * a121 * a211 - a011 * a101 * a221 + a001 * a111 * a221) * idet1;
		var spotLight1 = spotLight.addComponent(minko_component_Transform.createbyMatrix4(dest1));
		var s1 = spotLight1.getComponent(minko_component_SpotLight);
		s1.set_diffuse(0.5);
		var ambientLight = minko_scene_Node.create("ambientLight").addComponent(minko_component_AmbientLight.create(.2));
		var a1 = ambientLight.getComponent(minko_component_AmbientLight);
		var this11 = new glm_Vec3Base();
		this11.x = 1.0;
		this11.y = 1.0;
		this11.z = 1.0;
		a1.set_color(this11);
		root.addChild(ambientLight);
		root.addChild(spotLight1);
		root.addChild(camera1);
		var complete = sceneManager.get_assets().get_loader().get_complete().connect(function(loader) {
			var phongMaterial = minko_material_PhongMaterial.create();
			phongMaterial.set_diffuseMap(sceneManager.get_assets().texture(tutorial_WorkingSpecularMaps.MYTEXTURE));
			phongMaterial.set_specularMap(sceneManager.get_assets().texture(tutorial_WorkingSpecularMaps.SPECULARMAP));
			phongMaterial.set_shininess(2.0);
			var sphereGeom = minko_geometry_SphereGeometry.create(sceneManager.get_canvas().get_context(),20);
			sphereGeom.computeTangentSpace(true);
			var mesh = minko_scene_Node.create("mesh");
			var this12 = new glm_Vec3Base();
			this12.x = 1.1;
			this12.y = 1.1;
			this12.z = 1.1;
			var amount = this12;
			var this13 = new glm_Mat4Base();
			this13._00 = 0;
			this13._01 = 0;
			this13._02 = 0;
			this13._03 = 0;
			this13._10 = 0;
			this13._11 = 0;
			this13._12 = 0;
			this13._13 = 0;
			this13._20 = 0;
			this13._21 = 0;
			this13._22 = 0;
			this13._23 = 0;
			this13._30 = 0;
			this13._31 = 0;
			this13._32 = 0;
			this13._33 = 0;
			var dest2 = this13;
			dest2._00 = 1;
			dest2._10 = 0;
			dest2._20 = 0;
			dest2._30 = 0;
			dest2._01 = 0;
			dest2._11 = 1;
			dest2._21 = 0;
			dest2._31 = 0;
			dest2._02 = 0;
			dest2._12 = 0;
			dest2._22 = 1;
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			dest2._00 = amount.x;
			dest2._11 = amount.y;
			dest2._22 = amount.z;
			var mesh1 = mesh.addComponent(minko_component_Transform.createbyMatrix4(dest2)).addComponent(minko_component_Surface.create(sphereGeom,phongMaterial,sceneManager.get_assets().effect("effect/Phong.effect")));
			root.addChild(mesh1);
		});
		sceneManager.get_assets().get_loader().load();
		var enterFrame = canvas.get_enterFrame().connect(function(canvas1,t,dt) {
			sceneManager.nextFrame(t,dt);
		});
		canvas.run();
	}
}
tutorial_WorkingSpecularMaps.__name__ = true;
Object.assign(tutorial_WorkingSpecularMaps.prototype, {
	__class__: tutorial_WorkingSpecularMaps
});
class tutorial_WorkingSpotlights {
	constructor() {
		this.init();
	}
	init() {
		var canvas = minko_WebCanvas.create("Minko Tutorial - Working with spot lights",tutorial_WorkingSpotlights.WINDOW_WIDTH,tutorial_WorkingSpotlights.WINDOW_HEIGHT);
		var sceneManager = minko_component_SceneManager.create(canvas);
		sceneManager.get_assets().get_loader().queue("effect/Phong.effect");
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(2139062271));
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 3.0;
		this1.z = -5.0;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var src = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var camera1 = camera.addComponent(minko_component_Transform.createbyMatrix4(dest)).addComponent(minko_component_PerspectiveCamera.create(tutorial_WorkingSpotlights.WINDOW_WIDTH / tutorial_WorkingSpotlights.WINDOW_HEIGHT,Math.PI * 0.25,.1,1000.0));
		root.addChild(camera1);
		var ground = minko_scene_Node.create("ground");
		var spotLight = minko_scene_Node.create("spotLight").addComponent(minko_component_SpotLight.create(.15,.4));
		var this6 = new glm_Vec3Base();
		this6.x = .1;
		this6.y = 2.0;
		this6.z = 0.0;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var this8 = new glm_Vec3Base();
		this8.x = 0.0;
		this8.y = 1.0;
		this8.z = 0.0;
		var this9 = new glm_Mat4Base();
		this9._00 = 0;
		this9._01 = 0;
		this9._02 = 0;
		this9._03 = 0;
		this9._10 = 0;
		this9._11 = 0;
		this9._12 = 0;
		this9._13 = 0;
		this9._20 = 0;
		this9._21 = 0;
		this9._22 = 0;
		this9._23 = 0;
		this9._30 = 0;
		this9._31 = 0;
		this9._32 = 0;
		this9._33 = 0;
		var src1 = glm_GLM.lookAt(this6,this7,this8,this9);
		var this10 = new glm_Mat4Base();
		this10._00 = 0;
		this10._01 = 0;
		this10._02 = 0;
		this10._03 = 0;
		this10._10 = 0;
		this10._11 = 0;
		this10._12 = 0;
		this10._13 = 0;
		this10._20 = 0;
		this10._21 = 0;
		this10._22 = 0;
		this10._23 = 0;
		this10._30 = 0;
		this10._31 = 0;
		this10._32 = 0;
		this10._33 = 0;
		var dest1 = this10;
		var a001 = src1._00;
		var a011 = src1._10;
		var a021 = src1._20;
		var a031 = src1._30;
		var a101 = src1._01;
		var a111 = src1._11;
		var a121 = src1._21;
		var a131 = src1._31;
		var a201 = src1._02;
		var a211 = src1._12;
		var a221 = src1._22;
		var a231 = src1._32;
		var a301 = src1._03;
		var a311 = src1._13;
		var a321 = src1._23;
		var a331 = src1._33;
		var t001 = a121 * a231 * a311 - a131 * a221 * a311 + a131 * a211 * a321 - a111 * a231 * a321 - a121 * a211 * a331 + a111 * a221 * a331;
		var t011 = a031 * a221 * a311 - a021 * a231 * a311 - a031 * a211 * a321 + a011 * a231 * a321 + a021 * a211 * a331 - a011 * a221 * a331;
		var t021 = a021 * a131 * a311 - a031 * a121 * a311 + a031 * a111 * a321 - a011 * a131 * a321 - a021 * a111 * a331 + a011 * a121 * a331;
		var t031 = a031 * a121 * a211 - a021 * a131 * a211 - a031 * a111 * a221 + a011 * a131 * a221 + a021 * a111 * a231 - a011 * a121 * a231;
		var det1 = a001 * t001 + a101 * t011 + a201 * t021 + a301 * t031;
		if(Math.abs(det1) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det1 + ") is too small!");
		}
		var idet1 = 1 / det1;
		dest1._00 = t001 * idet1;
		dest1._01 = (a131 * a221 * a301 - a121 * a231 * a301 - a131 * a201 * a321 + a101 * a231 * a321 + a121 * a201 * a331 - a101 * a221 * a331) * idet1;
		dest1._02 = (a111 * a231 * a301 - a131 * a211 * a301 + a131 * a201 * a311 - a101 * a231 * a311 - a111 * a201 * a331 + a101 * a211 * a331) * idet1;
		dest1._03 = (a121 * a211 * a301 - a111 * a221 * a301 - a121 * a201 * a311 + a101 * a221 * a311 + a111 * a201 * a321 - a101 * a211 * a321) * idet1;
		dest1._10 = t011 * idet1;
		dest1._11 = (a021 * a231 * a301 - a031 * a221 * a301 + a031 * a201 * a321 - a001 * a231 * a321 - a021 * a201 * a331 + a001 * a221 * a331) * idet1;
		dest1._12 = (a031 * a211 * a301 - a011 * a231 * a301 - a031 * a201 * a311 + a001 * a231 * a311 + a011 * a201 * a331 - a001 * a211 * a331) * idet1;
		dest1._13 = (a011 * a221 * a301 - a021 * a211 * a301 + a021 * a201 * a311 - a001 * a221 * a311 - a011 * a201 * a321 + a001 * a211 * a321) * idet1;
		dest1._20 = t021 * idet1;
		dest1._21 = (a031 * a121 * a301 - a021 * a131 * a301 - a031 * a101 * a321 + a001 * a131 * a321 + a021 * a101 * a331 - a001 * a121 * a331) * idet1;
		dest1._22 = (a011 * a131 * a301 - a031 * a111 * a301 + a031 * a101 * a311 - a001 * a131 * a311 - a011 * a101 * a331 + a001 * a111 * a331) * idet1;
		dest1._23 = (a021 * a111 * a301 - a011 * a121 * a301 - a021 * a101 * a311 + a001 * a121 * a311 + a011 * a101 * a321 - a001 * a111 * a321) * idet1;
		dest1._30 = t031 * idet1;
		dest1._31 = (a021 * a131 * a201 - a031 * a121 * a201 + a031 * a101 * a221 - a001 * a131 * a221 - a021 * a101 * a231 + a001 * a121 * a231) * idet1;
		dest1._32 = (a031 * a111 * a201 - a011 * a131 * a201 - a031 * a101 * a211 + a001 * a131 * a211 + a011 * a101 * a231 - a001 * a111 * a231) * idet1;
		dest1._33 = (a011 * a121 * a201 - a021 * a111 * a201 + a021 * a101 * a211 - a001 * a121 * a211 - a011 * a101 * a221 + a001 * a111 * a221) * idet1;
		var spotLight1 = spotLight.addComponent(minko_component_Transform.createbyMatrix4(dest1));
		var spotLightSpotLight = spotLight1.getComponent(minko_component_SpotLight);
		spotLightSpotLight.set_diffuse(0.5);
		root.addChild(spotLight1);
		var complete = sceneManager.get_assets().get_loader().get_complete().connect(function(loader) {
			var basicMaterial = minko_material_BasicMaterial.create();
			var this11 = new glm_Vec4Base();
			this11.x = 1.0;
			this11.y = .7;
			this11.z = .7;
			this11.w = 1.0;
			basicMaterial.set_diffuseColor(this11);
			var complete1 = minko_component_Surface.create(minko_geometry_QuadGeometry.create(sceneManager.get_assets().get_context()),basicMaterial,sceneManager.get_assets().effect("effect/Phong.effect"));
			var complete2 = ground.addComponent(complete1);
			var this12 = new glm_Vec3Base();
			this12.x = 4.0;
			this12.y = 4.0;
			this12.z = 4.0;
			var amount = this12;
			var this13 = new glm_Mat4Base();
			this13._00 = 0;
			this13._01 = 0;
			this13._02 = 0;
			this13._03 = 0;
			this13._10 = 0;
			this13._11 = 0;
			this13._12 = 0;
			this13._13 = 0;
			this13._20 = 0;
			this13._21 = 0;
			this13._22 = 0;
			this13._23 = 0;
			this13._30 = 0;
			this13._31 = 0;
			this13._32 = 0;
			this13._33 = 0;
			var dest2 = this13;
			dest2._00 = 1;
			dest2._10 = 0;
			dest2._20 = 0;
			dest2._30 = 0;
			dest2._01 = 0;
			dest2._11 = 1;
			dest2._21 = 0;
			dest2._31 = 0;
			dest2._02 = 0;
			dest2._12 = 0;
			dest2._22 = 1;
			dest2._32 = 0;
			dest2._03 = 0;
			dest2._13 = 0;
			dest2._23 = 0;
			dest2._33 = 1;
			dest2._00 = amount.x;
			dest2._11 = amount.y;
			dest2._22 = amount.z;
			var a = dest2;
			var this14 = new glm_Vec3Base();
			this14.x = 1.0;
			this14.y = 0.0;
			this14.z = 0.0;
			var axis = this14;
			var angle = -Math.PI / 2;
			var this15 = new glm_QuatBase();
			this15.x = 0;
			this15.y = 0;
			this15.z = 0;
			this15.w = 1;
			var dest3 = this15;
			angle *= 0.5;
			var s = Math.sin(angle);
			dest3.x = s * axis.x;
			dest3.y = s * axis.y;
			dest3.z = s * axis.z;
			dest3.w = Math.cos(angle);
			var rotation = dest3;
			var this16 = new glm_Mat4Base();
			this16._00 = 0;
			this16._01 = 0;
			this16._02 = 0;
			this16._03 = 0;
			this16._10 = 0;
			this16._11 = 0;
			this16._12 = 0;
			this16._13 = 0;
			this16._20 = 0;
			this16._21 = 0;
			this16._22 = 0;
			this16._23 = 0;
			this16._30 = 0;
			this16._31 = 0;
			this16._32 = 0;
			this16._33 = 0;
			var dest4 = this16;
			var x2 = rotation.x + rotation.x;
			var y2 = rotation.y + rotation.y;
			var z2 = rotation.z + rotation.z;
			var xx = rotation.x * x2;
			var xy = rotation.x * y2;
			var xz = rotation.x * z2;
			var yy = rotation.y * y2;
			var yz = rotation.y * z2;
			var zz = rotation.z * z2;
			var wx = rotation.w * x2;
			var wy = rotation.w * y2;
			var wz = rotation.w * z2;
			dest4._00 = 1 - (yy + zz);
			dest4._10 = xy - wz;
			dest4._20 = xz + wy;
			dest4._30 = 0;
			dest4._01 = xy + wz;
			dest4._11 = 1 - (xx + zz);
			dest4._21 = yz - wx;
			dest4._31 = 0;
			dest4._02 = xz - wy;
			dest4._12 = yz + wx;
			dest4._22 = 1 - (xx + yy);
			dest4._32 = 0;
			dest4._03 = 0;
			dest4._13 = 0;
			dest4._23 = 0;
			dest4._33 = 1;
			var b = dest4;
			var this17 = new glm_Mat4Base();
			this17._00 = 0;
			this17._01 = 0;
			this17._02 = 0;
			this17._03 = 0;
			this17._10 = 0;
			this17._11 = 0;
			this17._12 = 0;
			this17._13 = 0;
			this17._20 = 0;
			this17._21 = 0;
			this17._22 = 0;
			this17._23 = 0;
			this17._30 = 0;
			this17._31 = 0;
			this17._32 = 0;
			this17._33 = 0;
			var dest5 = this17;
			var _a;
			var _b;
			if(dest5 == a) {
				var this18 = new glm_Mat4Base();
				this18._00 = 0;
				this18._01 = 0;
				this18._02 = 0;
				this18._03 = 0;
				this18._10 = 0;
				this18._11 = 0;
				this18._12 = 0;
				this18._13 = 0;
				this18._20 = 0;
				this18._21 = 0;
				this18._22 = 0;
				this18._23 = 0;
				this18._30 = 0;
				this18._31 = 0;
				this18._32 = 0;
				this18._33 = 0;
				var dest6 = this18;
				dest6._00 = a._00;
				dest6._10 = a._10;
				dest6._20 = a._20;
				dest6._30 = a._30;
				dest6._01 = a._01;
				dest6._11 = a._11;
				dest6._21 = a._21;
				dest6._31 = a._31;
				dest6._02 = a._02;
				dest6._12 = a._12;
				dest6._22 = a._22;
				dest6._32 = a._32;
				dest6._03 = a._03;
				dest6._13 = a._13;
				dest6._23 = a._23;
				dest6._33 = a._33;
				_a = dest6;
				_b = b;
			} else if(dest5 == b) {
				_a = a;
				var this19 = new glm_Mat4Base();
				this19._00 = 0;
				this19._01 = 0;
				this19._02 = 0;
				this19._03 = 0;
				this19._10 = 0;
				this19._11 = 0;
				this19._12 = 0;
				this19._13 = 0;
				this19._20 = 0;
				this19._21 = 0;
				this19._22 = 0;
				this19._23 = 0;
				this19._30 = 0;
				this19._31 = 0;
				this19._32 = 0;
				this19._33 = 0;
				var dest7 = this19;
				dest7._00 = b._00;
				dest7._10 = b._10;
				dest7._20 = b._20;
				dest7._30 = b._30;
				dest7._01 = b._01;
				dest7._11 = b._11;
				dest7._21 = b._21;
				dest7._31 = b._31;
				dest7._02 = b._02;
				dest7._12 = b._12;
				dest7._22 = b._22;
				dest7._32 = b._32;
				dest7._03 = b._03;
				dest7._13 = b._13;
				dest7._23 = b._23;
				dest7._33 = b._33;
				_b = dest7;
			} else {
				_a = a;
				_b = b;
			}
			dest5._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest5._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest5._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest5._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest5._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest5._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest5._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest5._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest5._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest5._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest5._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest5._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest5._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest5._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest5._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest5._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			complete2.addComponent(minko_component_Transform.createbyMatrix4(dest5));
			root.addChild(ground);
		});
		sceneManager.get_assets().get_loader().load();
		var enterFrame = canvas.get_enterFrame().connect(function(canvas1,t,dt) {
			sceneManager.nextFrame(t,dt);
		});
		canvas.run();
	}
}
tutorial_WorkingSpotlights.__name__ = true;
Object.assign(tutorial_WorkingSpotlights.prototype, {
	__class__: tutorial_WorkingSpotlights
});
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
ExampleAssimp.WINDOW_WIDTH = 800;
ExampleAssimp.WINDOW_HEIGHT = 600;
ExampleAssimp.MODEL_FILENAME = "Sample_005339_08932_25_14.gltf";
ExampleAssimp.LABEL_RUN_START = "run_start";
ExampleAssimp.LABEL_RUN_STOP = "run_stop";
ExampleAssimp.LABEL_IDLE = "idle";
ExampleAssimp.LABEL_WALK_START = "walk_start";
ExampleAssimp.LABEL_WALK_STOP = "walk_stop";
ExampleAssimp.LABEL_PUNCH_START = "punch_start";
ExampleAssimp.LABEL_PUNCH_HIT = "punch_hit";
ExampleAssimp.LABEL_PUNCH_STOP = "punch_stop";
ExampleAssimp.LABEL_KICK_START = "kick_start";
ExampleAssimp.LABEL_KICK_HIT = "kick_hit";
ExampleAssimp.LABEL_KICK_STOP = "kick_stop";
ExampleAssimp.LABEL_STUN_START = "stun_start";
ExampleAssimp.LABEL_STUN_STOP = "stun_stop";
assimp_Assimp.DEBUG = true;
assimp_Assimp.BLENDER_DEBUG = false;
assimp_Assimp.BLENDER_NO_STATS = false;
assimp_Assimp.NO = new assimp_No();
assimp_Assimp.PROCESS = new assimp_Process();
assimp_Assimp.AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE = "PP_GSN_MAX_SMOOTHING_ANGLE";
assimp_Assimp.AI_CONFIG_PP_RVC_FLAGS = "PP_RVC_FLAGS";
assimp_Assimp.AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS = "IMPORT_FBX_PRESERVE_PIVOTS";
assimp_BaseImporter._hx_skip_constructor = false;
assimp_AiConfig.GLOB_MEASURE_TIME = "GLOB_MEASURE_TIME";
assimp_AiConfig.FAVOUR_SPEED = "FAVOUR_SPEED";
assimp_AiConfig.ANDROID_JNI_ASSIMP_MANAGER_SUPPORT = false;
assimp_AiConfig.EXPORT_XFILE_64BIT = false;
assimp_AiConfig.PP = { SBBC_MAX_BONES : "PP_SBBC_MAX_BONES", CT : { MAX_SMOOTHING_ANGLE : "PP_CT_MAX_SMOOTHING_ANGLE", TEXTURE_CHANNEL_INDEX : "PP_CT_TEXTURE_CHANNEL_INDEX"}, GSN_MAX_SMOOTHING_ANGLE : "PP_GSN_MAX_SMOOTHING_ANGLE", RRM_EXCLUDE_LIST : "PP_RRM_EXCLUDE_LIST", PTV : { KEEP_HIERARCHY : "PP_PTV_KEEP_HIERARCHY", NORMALIZE : "PP_PTV_NORMALIZE", ADD_ROOT_TRANSFORMATION : "PP_PTV_ADD_ROOT_TRANSFORMATION", ROOT_TRANSFORMATION : "PP_PTV_ROOT_TRANSFORMATION"}, FD_REMOVE : "PP_FD_REMOVE", OG_EXCLUDE_LIST : "PP_OG_EXCLUDE_LIST", SLM : { TRIANGLE_LIMIT : "PP_SLM_TRIANGLE_LIMIT", VERTEX_LIMIT : "PP_SLM_VERTEX_LIMIT"}, LBW_MAX_WEIGHTS : "PP_LBW_MAX_WEIGHTS", DB_THRESHOLD : "PP_DB_THRESHOLD", DB_ALL_OR_NONE : "PP_DB_ALL_OR_NONE", ICL_PTCACHE_SIZE : "PP_ICL_PTCACHE_SIZE", RVC_FLAGS : "PP_RVC_FLAGS", SBP_REMOVE : "PP_SBP_REMOVE", FID_ANIM_ACCURACY : "PP_FID_ANIM_ACCURACY", TUV_EVALUATE : "PP_TUV_EVALUATE"};
assimp_AiConfig.Import = { NO_SKELETON_MESHES : "IMPORT_NO_SKELETON_MESHES", GLOBAL_KEYFRAME : "IMPORT_GLOBAL_KEYFRAME", Mdl : { COLORMAP : "IMPORT_MDL_COLORMAP", KEYFRAME : "IMPORT_MDL_KEYFRAME"}, Fbx : { Read : { ALL_GEOMETRY_LAYERS : "IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS", ALL_MATERIALS : "IMPORT_FBX_READ_ALL_MATERIALS", MATERIALS : "IMPORT_FBX_READ_MATERIALS", TEXTURES : "IMPORT_FBX_READ_TEXTURES", CAMERAS : "IMPORT_FBX_READ_CAMERAS", LIGHTS : "IMPORT_FBX_READ_LIGHTS", ANIMATIONS : "IMPORT_FBX_READ_ANIMATIONS"}, STRICT_MODE : "IMPORT_FBX_STRICT_MODE", PRESERVE_PIVOTS : "IMPORT_FBX_PRESERVE_PIVOTS", OPTIMIZE_EMPTY_ANIMATION_CURVES : "IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES", SEARCH_EMBEDDED_TEXTURES : "IMPORT_FBX_SEARCH_EMBEDDED_TEXTURES"}, Md3 : { KEYFRAME : "IMPORT_MD3_KEYFRAME", SKIN_NAME : "IMPORT_MD3_SKIN_NAME", SHADER_SRC : "IMPORT_MD3_SHADER_SRC", HANDLE_MULTIPART : "IMPORT_MD3_HANDLE_MULTIPART"}, MD2_KEYFRAME : "IMPORT_MD2_KEYFRAME", MDC_KEYFRAME : -1, SMD_KEYFRAME : -1, UNREAL_KEYFRAME : -1, Ac : { SEPARATE_BFCULL : "IMPORT_AC_SEPARATE_BFCULL", EVAL_SUBDIVISION : "IMPORT_AC_EVAL_SUBDIVISION"}, UNREAL_HANDLE_FLAGS : "UNREAL_HANDLE_FLAGS", TER_MAKE_UVS : "IMPORT_TER_MAKE_UVS", ASE_RECONSTRUCT_NORMALS : "IMPORT_ASE_RECONSTRUCT_NORMALS", LWO_ONE_LAYER_ONLY : "IMPORT_LWO_ONE_LAYER_ONLY", MD5_NO_ANIM_AUTOLOAD : "IMPORT_MD5_NO_ANIM_AUTOLOAD", Lws : { LWS_ANIM_START : "IMPORT_LWS_ANIM_START", LWS_ANIM_END : "IMPORT_LWS_ANIM_END"}, IRR_ANIM_FPS : "IMPORT_IRR_ANIM_FPS", Ogre : { MATERIAL_FILE : "IMPORT_OGRE_MATERIAL_FILE", OGRE_TEXTURETYPE_FROM_FILENAME : "IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME"}, Ifc : { IFC_SKIP_SPACE_REPRESENTATIONS : "IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS", IFC_CUSTOM_TRIANGULATION : "IMPORT_IFC_CUSTOM_TRIANGULATION", IFC_SMOOTHING_ANGLE : "IMPORT_IFC_SMOOTHING_ANGLE", IFC_CYLINDRICAL_TESSELLATION : "IMPORT_IFC_CYLINDRICAL_TESSELLATION"}, COLLADA_IGNORE_UP_DIRECTION : "IMPORT_COLLADA_IGNORE_UP_DIRECTION"};
assimp_Importer.impl = new assimp_ImporterPimpl();
assimp_Types.MAXLEN = 1024;
assimp_AiMemoryInfo.textures = 0;
assimp_AiMemoryInfo.materials = 0;
assimp_AiMemoryInfo.meshes = 0;
assimp_AiMemoryInfo.nodes = 0;
assimp_AiMemoryInfo.animations = 0;
assimp_AiMemoryInfo.cameras = 0;
assimp_AiMemoryInfo.lights = 0;
assimp_AiMemoryInfo.total = 0;
assimp_format_AiMatKeys.NAME_BASE = "?mat.name";
assimp_format_AiMatKeys.NAME = "?mat.name,0,0";
assimp_format_AiMatKeys.TWOSIDED_BASE = "$mat.twosided";
assimp_format_AiMatKeys.TWOSIDED = "$mat.twosided,0,0";
assimp_format_AiMatKeys.SHADING_MODEL_BASE = "$mat.shadingm";
assimp_format_AiMatKeys.SHADING_MODEL = "$mat.shadingm,0,0";
assimp_format_AiMatKeys.ENABLE_WIREFRAME_BASE = "$mat.wireframe";
assimp_format_AiMatKeys.ENABLE_WIREFRAME = "$mat.wireframe,0,0";
assimp_format_AiMatKeys.BLEND_FUNC_BASE = "$mat.blend";
assimp_format_AiMatKeys.BLEND_FUNC = "$mat.blend,0,0";
assimp_format_AiMatKeys.OPACITY_BASE = "$mat.opacity";
assimp_format_AiMatKeys.OPACITY = "$mat.opacity,0,0";
assimp_format_AiMatKeys.BUMPSCALING_BASE = "$mat.bumpscaling";
assimp_format_AiMatKeys.BUMPSCALING = "$mat.bumpscaling,0,0";
assimp_format_AiMatKeys.SHININESS_BASE = "$mat.shininess";
assimp_format_AiMatKeys.SHININESS = "$mat.shininess,0,0";
assimp_format_AiMatKeys.REFLECTIVITY_BASE = "$mat.reflectivity";
assimp_format_AiMatKeys.REFLECTIVITY = "$mat.reflectivity,0,0";
assimp_format_AiMatKeys.SHININESS_STRENGTH_BASE = "$mat.shinpercent";
assimp_format_AiMatKeys.SHININESS_STRENGTH = "$mat.shinpercent,0,0";
assimp_format_AiMatKeys.REFRACTI_BASE = "$mat.refracti";
assimp_format_AiMatKeys.REFRACTI = "$mat.refracti,0,0";
assimp_format_AiMatKeys.COLOR_DIFFUSE_BASE = "$clr.diffuse";
assimp_format_AiMatKeys.COLOR_DIFFUSE = "$clr.diffuse,0,0";
assimp_format_AiMatKeys.COLOR_AMBIENT_BASE = "$clr.ambient";
assimp_format_AiMatKeys.COLOR_AMBIENT = "$clr.ambient,0,0";
assimp_format_AiMatKeys.COLOR_SPECULAR_BASE = "$clr.specular";
assimp_format_AiMatKeys.COLOR_SPECULAR = "$clr.specular,0,0";
assimp_format_AiMatKeys.COLOR_EMISSIVE_BASE = "$clr.emissive";
assimp_format_AiMatKeys.COLOR_EMISSIVE = "$clr.emissive,0,0";
assimp_format_AiMatKeys.COLOR_TRANSPARENT_BASE = "$clr.transparent";
assimp_format_AiMatKeys.COLOR_TRANSPARENT = "$clr.transparent,0,0";
assimp_format_AiMatKeys.COLOR_REFLECTIVE_BASE = "$clr.reflective";
assimp_format_AiMatKeys.COLOR_REFLECTIVE = "$clr.reflective,0,0";
assimp_format_AiMatKeys.GLOBAL_BACKGROUND_IMAGE_BASE = "?bg.global";
assimp_format_AiMatKeys.GLOBAL_BACKGROUND_IMAGE = "?bg.global,0,0";
assimp_format_AiMatKeys.TEXTURE_BASE = "$tex.file";
assimp_format_AiMatKeys.UVWSRC_BASE = "$tex.uvwsrc";
assimp_format_AiMatKeys.TEXOP_BASE = "$tex.op";
assimp_format_AiMatKeys.MAPPING_BASE = "$tex.mapping";
assimp_format_AiMatKeys.TEXBLEND_BASE = "$tex.blend";
assimp_format_AiMatKeys.MAPPINGMODE_U_BASE = "$tex.mapmodeu";
assimp_format_AiMatKeys.MAPPINGMODE_V_BASE = "$tex.mapmodev";
assimp_format_AiMatKeys.TEXMAP_AXIS_BASE = "$tex.mapaxis";
assimp_format_AiMatKeys.UVTRANSFORM_BASE = "$tex.uvtrafo";
assimp_format_AiMatKeys.TEXFLAGS_BASE = "$tex.flags";
assimp_format_AiPbrmaterial.GLTF_TEXTURE_TEXCOORD_BASE = "$tex.file.texCoord";
assimp_format_AiPbrmaterial.GLTF_MAPPINGNAME_BASE = "$tex.mappingname";
assimp_format_AiPbrmaterial.GLTF_MAPPINGID_BASE = "$tex.mappingid";
assimp_format_AiPbrmaterial.GLTF_MAPPINGFILTER_MAG_BASE = "$tex.mappingfiltermag";
assimp_format_AiPbrmaterial.GLTF_MAPPINGFILTER_MIN_BASE = "$tex.mappingfiltermin";
assimp_format_AiPbrmaterial.GLTF_TEXTURE_SCALE_BASE = "$tex.scale";
assimp_format_AiPbrmaterial.GLTF_TEXTURE_STRENGTH_BASE = "$tex.strength";
assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_FACTOR_BASE = "$mat.gltf.pbrMetallicRoughness.baseColorFactor";
assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR_BASE = "$mat.gltf.pbrMetallicRoughness.metallicFactor";
assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR_BASE = "$mat.gltf.pbrMetallicRoughness.roughnessFactor";
assimp_format_AiPbrmaterial.GLTF_ALPHAMODE_BASE = "$mat.gltf.alphaMode";
assimp_format_AiPbrmaterial.GLTF_ALPHACUTOFF_BASE = "$mat.gltf.alphaCutoff";
assimp_format_AiPbrmaterial.GLTF_PBRSPECULARGLOSSINESS_BASE = "$mat.gltf.pbrSpecularGlossiness";
assimp_format_AiPbrmaterial.GLTF_PBRSPECULARGLOSSINESS_GLOSSINESS_FACTOR_BASE = "$mat.gltf.pbrMetallicRoughness.glossinessFactor";
assimp_format_AiPbrmaterial.GLTF_UNLIT_BASE = "$mat.gltf.unlit";
assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_FACTOR = "$mat.gltf.pbrMetallicRoughness.baseColorFactor, 0, 0";
assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR = "$mat.gltf.pbrMetallicRoughness.metallicFactor, 0, 0";
assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR = "$mat.gltf.pbrMetallicRoughness.roughnessFactor, 0, 0";
assimp_format_AiPbrmaterial.GLTF_ALPHAMODE = "$mat.gltf.alphaMode, 0, 0";
assimp_format_AiPbrmaterial.GLTF_ALPHACUTOFF = "$mat.gltf.alphaCutoff, 0, 0";
assimp_format_AiPbrmaterial.GLTF_PBRSPECULARGLOSSINESS = "$mat.gltf.pbrSpecularGlossiness, 0, 0";
assimp_format_AiPbrmaterial.GLTF_PBRSPECULARGLOSSINESS_GLOSSINESS_FACTOR = "$mat.gltf.pbrMetallicRoughness.glossinessFactor, 0, 0";
assimp_format_AiPbrmaterial.GLTF_UNLIT = "$mat.gltf.unlit, 0, 0";
assimp_format_AiPbrmaterial.GLTF_TEXTURE_TEXCOORD = assimp_format_AiPbrmaterial.GLTF_TEXTURE_TEXCOORD_BASE + ", 0, 0";
assimp_format_AiPbrmaterial.GLTF_MAPPINGNAME = assimp_format_AiPbrmaterial.GLTF_MAPPINGNAME_BASE + ", 0, 0";
assimp_format_AiPbrmaterial.GLTF_MAPPINGID = assimp_format_AiPbrmaterial.GLTF_MAPPINGID_BASE + ", 0, 0";
assimp_format_AiPbrmaterial.GLTF_MAPPINGFILTER_MAG = assimp_format_AiPbrmaterial.GLTF_MAPPINGFILTER_MAG_BASE + ", 0, 0";
assimp_format_AiPbrmaterial.GLTF_MAPPINGFILTER_MIN = assimp_format_AiPbrmaterial.GLTF_MAPPINGFILTER_MIN_BASE + ", 0, 0";
assimp_format_AiPbrmaterial.GLTF_TEXTURE_SCALE = assimp_format_AiPbrmaterial.GLTF_TEXTURE_SCALE_BASE + ", 0, 0";
assimp_format_AiPbrmaterial.GLTF_TEXTURE_STRENGTH = assimp_format_AiPbrmaterial.GLTF_TEXTURE_STRENGTH_BASE + ", 0, 0";
assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_TEXTURE = 1;
assimp_format_AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_METALLICROUGHNESS_TEXTURE = 12;
assimp_format_AiDefines.AI_SLM_DEFAULT_MAX_TRIANGLES = 1000000;
assimp_format_AiDefines.AI_SLM_DEFAULT_MAX_VERTICES = 1000000;
assimp_format_AiDefines.AI_LBW_MAX_WEIGHTS = 4;
assimp_format_AiDefines.PP_ICL_PTCACHE_SIZE = 12;
assimp_format_AiDefines.AI_MAX_FACE_INDICES = 32767;
assimp_format_AiDefines.AI_MAX_BONE_WEIGHTS = 2147483647;
assimp_format_AiDefines.AI_MAX_VERTICES = 2147483647;
assimp_format_AiDefines.AI_MAX_FACES = 2147483647;
assimp_format_AiDefines.AI_MAX_NUMBER_OF_COLOR_SETS = 8;
assimp_format_AiDefines.AI_MAX_NUMBER_OF_TEXTURECOORDS = 8;
assimp_format_AiDefines.AI_SBBC_DEFAULT_MAX_BONES = 60;
assimp_format_AiDefines.AI_DEBONE_THRESHOLD = 1.0;
assimp_format_AiDefines.MAX_LENGTH = 1024;
assimp_format_AiDefines.AI_DEFAULT_MATERIAL_NAME = "DefaultMaterial";
assimp_format_AiDefines.AI_DEFAULT_TEXTURED_MATERIAL_NAME = "TexturedDefaultMaterial";
assimp_format_Defs.AI_MATH_TWO_PI = Math.PI * 2;
assimp_format_Defs.AI_MATH_TWO_PIf = Math.PI * 2;
assimp_format_Defs.AI_MATH_HALF_PI = Math.PI;
assimp_format_Defs.epsilon = 1.401298E-45;
assimp_format_Mesh.AI_MAX_FACE_INDICES = 32767;
assimp_format_Mesh.AI_MAX_BONE_WEIGHTS = 2147483647;
assimp_format_Mesh.AI_MAX_VERTICES = 2147483647;
assimp_format_Mesh.AI_MAX_FACES = 2147483647;
assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS = 8;
assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS = 8;
assimp_format_Scene.AI_SCENE_FLAGS_INCOMPLETE = 1;
assimp_format_Scene.AI_SCENE_FLAGS_VALIDATED = 2;
assimp_format_Scene.AI_SCENE_FLAGS_VALIDATION_WARNING = 4;
assimp_format_Scene.AI_SCENE_FLAGS_NON_VERBOSE_FORMAT = 8;
assimp_format_Scene.AI_SCENE_FLAGS_TERRAIN = 16;
assimp_format_Scene.AI_SCENE_FLAGS_ALLOW_SHARED = 32;
assimp_format_Version.legalString = "\"";
assimp_format_Version.versionMinor = 0;
assimp_format_Version.versionMajor = 4;
assimp_format_Version.versionRevision = -296288351;
assimp_format_Version.branch = "master";
assimp_format_Version.build = 14;
assimp_format_Version.compileFlags = assimp_Assimp.DEBUG;
assimp_format_Version.version = "$versionMajor.$versionMinor.$build";
assimp_format_assbin_AssbinLoader.ASSBIN_VERSION_MINOR = 0;
assimp_format_assbin_AssbinLoader.ASSBIN_VERSION_MAJOR = 1;
assimp_format_assbin_AssbinLoader.ASSBIN_HEADER_LENGTH = 512;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AICAMERA = 4660;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AILIGHT = 4661;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AITEXTURE = 4662;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMESH = 4663;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AINODEANIM = 4664;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AISCENE = 4665;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIBONE = 4666;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIANIMATION = 4667;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AINODE = 4668;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMATERIAL = 4669;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_POSITIONS = 1;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_NORMALS = 2;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_COLOR_BASE = 65536;
assimp_format_gltf2_types_Ref._hx_skip_constructor = false;
assimp_format_gltf2_types_Ref.idCount = 0;
assimp_format_gltf2_types_Material.defaultBaseColor = [1,1,1,1];
assimp_format_gltf2_types_Material.defaultEmissiveFactor = [0,0,0];
assimp_format_gltf2_types_Material.defaultDiffuseFactor = [1,1,1,1];
assimp_format_gltf2_types_Material.defaultSpecularFactor = [1,1,1];
example_ExamplePbr.ENVMAP = "cloudySea";
example_ExamplePbr.MAP_DIFFUSE = "texture/" + example_ExamplePbr.ENVMAP + "/" + example_ExamplePbr.ENVMAP + "-diffuse.jpg";
example_ExamplePbr.MAP_RADIANCE = "texture/" + example_ExamplePbr.ENVMAP + "/" + example_ExamplePbr.ENVMAP + "-radiance.jpg";
example_ExamplePbr.MAP_IRRADIANCE = "texture/" + example_ExamplePbr.ENVMAP + "/" + example_ExamplePbr.ENVMAP + "-irradiance.jpg";
example_ExampleSkybox.SKYBOX_TEXTURE = "texture/cloudySea-diffuse.jpg";
example_ExampleSkybox.NUM_OBJECTS = 15;
example_ExampleWater.CAMERA_LIN_SPEED = 0.05;
example_ExampleWater.CAMERA_ANG_SPEED = Math.PI * 2.0 / 180.0;
example_ExampleWater.flowMapCycle = 0.25;
minko_Has_$uuid._hx_skip_constructor = false;
glm_GLM.EPSILON = 1.401298E-45;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
minko_Timer.wantedFPS = 60.;
minko_Timer.maxDeltaTime = 0.5;
minko_Timer.smoothFactor = 0.95;
minko_Timer.lastTimeStamp = Date.now() / 1000;
minko_Timer.startTimeStamp = Date.now() / 1000;
minko_Timer.elapsedTime = 0.;
minko_Timer.frameCount = 0;
minko_Timer.dt = 1 / minko_Timer.wantedFPS;
minko_Timer.currentDT = 1 / minko_Timer.wantedFPS;
minko_Timer.remainingTime = 1 / minko_Timer.wantedFPS;
minko_Uuid.CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
minko_WebBackend.loopInit = false;
minko_component_DirectionalLight.MAX_NUM_SHADOW_CASCADES = 4;
minko_component_DirectionalLight.DEFAULT_NUM_SHADOW_CASCADES = 4;
minko_component_DirectionalLight.MIN_SHADOWMAP_SIZE = 32;
minko_component_DirectionalLight.MAX_SHADOWMAP_SIZE = 1024;
minko_component_DirectionalLight.DEFAULT_SHADOWMAP_SIZE = 512;
minko_component_Skinning.PNAME_NUM_BONES = "numBones";
minko_component_Skinning.PNAME_BONE_MATRICES = "boneMatrices";
minko_component_Skinning.ATTRNAME_BONE_IDS_A = "boneIdsA";
minko_component_Skinning.ATTRNAME_BONE_IDS_B = "boneIdsB";
minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_A = "boneWeightsA";
minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_B = "boneWeightsB";
minko_component_Skinning.MAX_NUM_BONES_PER_VERTEX = 8;
minko_component_Skinning.ATTRNAME_POSITION = "position";
minko_component_Skinning.ATTRNAME_NORMAL = "normal";
minko_component_SpotLight.PI = 3.141592653589793;
minko_component_Surface.SURFACE_COLLECTION_NAME = "surface";
minko_component_Surface.GEOMETRY_COLLECTION_NAME = "geometry";
minko_component_Surface.MATERIAL_COLLECTION_NAME = "material";
minko_component_Surface.EFFECT_COLLECTION_NAME = "effect";
minko_file_AbstractASSIMPParser._textureTypeToName = minko_file_AbstractASSIMPParser.initializeTextureTypeToName();
minko_file_AbstractASSIMPParser.PNAME_TRANSFORM = "matrix";
minko_file_AbstractASSIMPParser.MAX_NUM_UV_CHANNELS = 2;
minko_file_AbstractProtocol._hx_skip_constructor = false;
minko_render__$Priority_Priority_$Impl_$.FIRST = 4000.0;
minko_render__$Priority_Priority_$Impl_$.BACKGROUND = 3000.0;
minko_render__$Priority_Priority_$Impl_$.OPAQUE = 2000.0;
minko_render__$Priority_Priority_$Impl_$.TRANSPARENT = 1000.0;
minko_render__$Priority_Priority_$Impl_$.LAST = 0.0;
minko_file_EffectParser.EXTRA_PROPERTY_BLENDING_MODE = "blendingMode";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_TEST = "stencilTest";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_OPS = "stencilOps";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_FAIL_OP = "fail";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_Z_FAIL_OP = "zfail";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_Z_PASS_OP = "zpass";
minko_file_EffectParser._blendingSourceMap = minko_file_EffectParser.initialize_blendingSourceMap();
minko_file_EffectParser._blendingDestinationMap = minko_file_EffectParser.initialize_blendingDestinationMap();
minko_file_EffectParser._blendingModeMap = minko_file_EffectParser.initialize_blendingModeMap();
minko_file_EffectParser._compareFuncMap = minko_file_EffectParser.initialize_compareFuncMap();
minko_file_EffectParser._triangleCullingMap = minko_file_EffectParser.initialize_triangleCullingMap();
minko_file_EffectParser._stencilOpMap = minko_file_EffectParser.initialize_stencilOpMap();
minko_file_EffectParser._priorityMap = minko_file_EffectParser.initialize_priorityMap();
minko_file_EffectParser._extraStateNames = ["blendingMode","stencilTest"];
minko_file_FileProtocol._runningLoaders = [];
minko_file_Options._defaultProtocols = new haxe_ds_StringMap();
minko_file_Options._defaultMaterial = minko_material_BasicMaterial.create("defaultMaterial");
minko_input_KeyMap.keyToKeyCodeMap = minko_input_KeyMap.initializeKeyToKeyCodeMap();
minko_input_KeyMap.keyToScanCodeMap = minko_input_KeyMap.initializeKeyToScanCodeMap();
minko_input_Keyboard.NUM_KEYS = 350;
minko_input_Keyboard._keyToName = minko_input_Keyboard.initializeKeyNames();
minko_input_Mouse.CLICK_MOVE_THRESHOLD = 5;
minko_math_Random.MPM = 2147483647.0;
minko_math_Random.MINSTD = 16807.0;
minko_net_WebHTTPProtocol._httpProtocolReferences = [];
minko_net_EmscriptenAsync.nextWgetRequestHandle = 0;
minko_net_EmscriptenAsync.wgetRequests = new haxe_ds_IntMap();
minko_render_AbstractResource._hx_skip_constructor = false;
minko_render_DrawCall.MAX_NUM_TEXTURES = 8;
minko_render_DrawCall.MAX_NUM_VERTEXBUFFERS = 8;
minko_render_GlContext.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
minko_render_GlContext.GL_STENCIL = 6146;
minko_render_GlContext.GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
minko_render_GlContext.GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
minko_render_GlContext.GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
minko_render_GlContext.GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
minko_render_GlContext.GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
minko_render_GlContext.GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 37175;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 37176;
minko_render_GlContext.GL_ETC1_RGB8_OES = 36196;
minko_render_GlContext.GL_ATC_RGB_AMD = 35986;
minko_render_GlContext.GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987;
minko_render_GlContext._blendingFactors = minko_render_GlContext.initializeBlendFactorsMap();
minko_render_GlContext._compareFuncs = minko_render_GlContext.initializeDepthFuncsMap();
minko_render_GlContext._stencilOps = minko_render_GlContext.initializeStencilOperationsMap();
minko_render_GlContext._availableTextureFormats = new haxe_ds_IntMap();
minko_render_GlContext.locationCount = 0;
minko_render_GlContext.vertexBufferCount = 0;
minko_render_GlContext.indexBufferCount = 0;
minko_render_GlContext.textureCount = 0;
minko_render_GlContext.programCount = 0;
minko_render_GlContext.shaderCount = 0;
minko_render_ProgramSignature._maxNumMacros = 64;
minko_render_SamplerStates.PROPERTY_WRAP_MODE = "wrapMode";
minko_render_SamplerStates.PROPERTY_TEXTURE_FILTER = "textureFilter";
minko_render_SamplerStates.PROPERTY_MIP_FILTER = "mipFilter";
minko_render_SamplerStates.PROPERTY_NAMES = ["wrapMode","textureFilter","mipFilter"];
minko_render_SamplerStates.DEFAULT_WRAP_MODE = 0;
minko_render_SamplerStates.DEFAULT_TEXTURE_FILTER = 0;
minko_render_SamplerStates.DEFAULT_MIP_FILTER = 0;
minko_render_States.PROPERTY_PRIORITY = "priority";
minko_render_States.PROPERTY_ZSORTED = "zSorted";
minko_render_States.PROPERTY_BLENDING_SOURCE = "blendingSource";
minko_render_States.PROPERTY_BLENDING_DESTINATION = "blendingDestination";
minko_render_States.PROPERTY_COLOR_MASK = "colorMask";
minko_render_States.PROPERTY_DEPTH_MASK = "depthMask";
minko_render_States.PROPERTY_DEPTH_FUNCTION = "depthFunction";
minko_render_States.PROPERTY_TRIANGLE_CULLING = "triangleCulling";
minko_render_States.PROPERTY_STENCIL_FUNCTION = "stencilFunction";
minko_render_States.PROPERTY_STENCIL_REFERENCE = "stencilReference";
minko_render_States.PROPERTY_STENCIL_MASK = "stencilMask";
minko_render_States.PROPERTY_STENCIL_FAIL_OPERATION = "stencilFailOperation";
minko_render_States.PROPERTY_STENCIL_ZFAIL_OPERATION = "stencilZFailOperation";
minko_render_States.PROPERTY_STENCIL_ZPASS_OPERATION = "stencilZPassOperation";
minko_render_States.PROPERTY_SCISSOR_TEST = "scissorTest";
minko_render_States.PROPERTY_SCISSOR_BOX = "scissorBox";
minko_render_States.PROPERTY_TARGET = "target";
minko_render_States.PROPERTY_NAMES = ["priority","zSorted","blendingSource","blendingDestination","colorMask","depthMask","depthFunction","triangleCulling","stencilFunction","stencilReference","stencilMask","stencilFailOperation","stencilZFailOperation","stencilZPassOperation","scissorTest","scissorBox","target"];
minko_render_States.DEFAULT_PRIORITY = minko_render__$Priority_Priority_$Impl_$.OPAQUE;
minko_render_States.DEFAULT_ZSORTED = false;
minko_render_States.DEFAULT_BLENDING_SOURCE = 2;
minko_render_States.DEFAULT_BLENDING_DESTINATION = 256;
minko_render_States.DEFAULT_COLOR_MASK = true;
minko_render_States.DEFAULT_DEPTH_MASK = true;
minko_render_States.DEFAULT_DEPTH_FUNCTION = 4;
minko_render_States.DEFAULT_TRIANGLE_CULLING = 2;
minko_render_States.DEFAULT_STENCIL_FUNCTION = 0;
minko_render_States.DEFAULT_STENCIL_REFERENCE = 0;
minko_render_States.DEFAULT_STENCIL_MASK = 1;
minko_render_States.DEFAULT_STENCIL_FAIL_OPERATION = 0;
minko_render_States.DEFAULT_STENCIL_ZFAIL_OPERATION = 0;
minko_render_States.DEFAULT_STENCIL_ZPASS_OPERATION = 0;
minko_render_States.DEFAULT_SCISSOR_TEST = false;
minko_render_States.DEFAULT_SCISSOR_BOX = (function($this) {
	var $r;
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	$r = this1;
	return $r;
}(this));
minko_render_States.UNSET_PRIORITY_VALUE = -Infinity;
minko_render_TextureFormatInfo._formats = minko_render_TextureFormatInfo.initializeFormatsMap();
minko_utils_MathUtil.pi = 3.14159265;
minko_utils_MathUtil.half_pi = 1.57079637;
minko_utils_RandomNumbers.RAND_MAX = 10;
minko_utils_WebNodeTools.MAX_SIZE = 4096;
tutorial_ApplyingAntialiasingEffect.WINDOW_WIDTH = 800;
tutorial_ApplyingAntialiasingEffect.WINDOW_HEIGHT = 600;
tutorial_WorkingEnvironmentMaps.WINDOW_WIDTH = 800;
tutorial_WorkingEnvironmentMaps.WINDOW_HEIGHT = 600;
tutorial_WorkingEnvironmentMaps.MYTEXTURE = "texture/diffuseMap.jpg";
tutorial_WorkingEnvironmentMaps.ENVMAP = "texture/envMap.jpg";
tutorial_WorkingNormalMaps.WINDOW_WIDTH = 800;
tutorial_WorkingNormalMaps.WINDOW_HEIGHT = 600;
tutorial_WorkingNormalMaps.MYTEXTURE = "texture/diffuseMap.jpg";
tutorial_WorkingNormalMaps.NORMALMAP = "texture/normalMap.jpg";
tutorial_WorkingPointlights.WINDOW_WIDTH = 800;
tutorial_WorkingPointlights.WINDOW_HEIGHT = 600;
tutorial_WorkingSpecularMaps.WINDOW_WIDTH = 800;
tutorial_WorkingSpecularMaps.WINDOW_HEIGHT = 600;
tutorial_WorkingSpecularMaps.MYTEXTURE = "texture/diffuseMap.jpg";
tutorial_WorkingSpecularMaps.SPECULARMAP = "texture/specularMap.jpg";
tutorial_WorkingSpotlights.WINDOW_WIDTH = 800;
tutorial_WorkingSpotlights.WINDOW_HEIGHT = 600;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
