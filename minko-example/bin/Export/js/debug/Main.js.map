{
"version":3,
"file":"Main.js",
"sourceRoot":"file:///",
"sources":["C:/HaxeToolkit/haxe/std/js/_std/EReg.hx","C:/HaxeToolkit/haxe/std/js/_std/HxOverrides.hx","C:/HaxeToolkit/haxe/std/Lambda.hx","E:/minko-assimp/src/Main.hx","E:/minko-hx/src/glm/Mat4.hx","C:/HaxeToolkit/haxe/std/js/_std/Reflect.hx","C:/HaxeToolkit/haxe/std/js/_std/Std.hx","C:/HaxeToolkit/haxe/std/StringBuf.hx","C:/HaxeToolkit/haxe/std/StringTools.hx","E:/minko-assimp/src/assimp/Assimp.hx","E:/minko-assimp/src/assimp/BaseImporter.hx","E:/minko-assimp/src/assimp/BaseProcess.hx","E:/minko-assimp/src/assimp/Config.hx","E:/minko-assimp/src/assimp/IOSystem.hx","E:/minko-assimp/src/assimp/DefaultIOSystem.hx","E:/minko-assimp/src/assimp/ProgressHandler.hx","E:/minko-assimp/src/assimp/DefaultProgressHandler.hx","E:/minko-assimp/src/assimp/Hash.hx","E:/minko-assimp/src/assimp/IOStreamUtil.hx","E:/minko-hx/src/glm/Vec3.hx","E:/minko-hx/src/glm/Vec4.hx","E:/minko-hx/src/glm/Quat.hx","E:/minko-assimp/src/assimp/ImporterPimpl.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/ds/IntMap.hx","E:/minko-assimp/src/assimp/Importer.hx","E:/minko-assimp/src/assimp/ImporterDesc.hx","E:/minko-assimp/src/assimp/ProcessHelper.hx","E:/minko-assimp/src/assimp/ScenePreprocessor.hx","E:/minko-assimp/src/assimp/StringUtil.hx","E:/minko-assimp/src/assimp/format/AiMatKeys.hx","E:/minko-assimp/src/assimp/format/Anim.hx","E:/minko-assimp/src/assimp/format/Camera.hx","E:/minko-assimp/src/assimp/format/Defs.hx","E:/minko-hx/src/glm/Mat3.hx","E:/minko-assimp/src/assimp/format/Light.hx","E:/minko-hx/src/glm/Vec2.hx","E:/minko-assimp/src/assimp/format/Material.hx","E:/minko-assimp/src/assimp/format/Mesh.hx","E:/minko-assimp/src/assimp/format/MetaData.hx","E:/minko-assimp/src/assimp/format/Scene.hx","E:/minko-assimp/src/assimp/format/Version.hx","E:/minko-assimp/src/assimp/format/assbin/AssbinLoader.hx","E:/minko-assimp/src/assimp/format/gltf2/GLTF2.hx","E:/minko-assimp/src/assimp/format/gltf2/GlTF2Importer.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Accessor.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Animation.hx","E:/minko-assimp/src/assimp/format/gltf2/types/AnimationChannel.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Buffer.hx","E:/minko-assimp/src/assimp/format/gltf2/types/BufferView.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Ref.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Camera.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Image.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Material.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Mesh.hx","E:/minko-assimp/src/assimp/format/gltf2/types/MeshPrimitive.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Node.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Sampler.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Scene.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Skin.hx","E:/minko-assimp/src/assimp/format/gltf2/types/Texture.hx","E:/minko-assimp/src/assimp/postProcess/ValidateDSProcess.hx","E:/minko-hx/src/example/ExampleLightScattering.hx","E:/minko-hx/src/minko/utils/MathUtil.hx","E:/minko-hx/src/example/ExamplePbr.hx","E:/minko-hx/src/example/ExamplePicking.hx","E:/minko-hx/src/example/ExampleSkybox.hx","E:/minko-hx/src/example/ExampleStencil.hx","E:/minko-hx/src/example/ExampleWater.hx","E:/minko-hx/src/minko/Uuid.hx","E:/minko-hx/src/minko/geometry/Geometry.hx","E:/minko-hx/src/example/StarGeometry.hx","E:/minko-hx/src/minko/component/AbstractComponent.hx","E:/minko-hx/src/example/TextureDebugDisplay.hx","E:/minko-hx/src/glm/GLM.hx","C:/HaxeToolkit/haxe/std/haxe/Log.hx","C:/HaxeToolkit/haxe/std/haxe/Timer.hx","C:/HaxeToolkit/haxe/std/haxe/crypto/Adler32.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/io/Bytes.hx","C:/HaxeToolkit/haxe/std/haxe/crypto/Base64.hx","C:/HaxeToolkit/haxe/std/haxe/crypto/BaseCode.hx","C:/HaxeToolkit/haxe/std/haxe/ds/List.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/ds/ObjectMap.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/ds/StringMap.hx","C:/HaxeToolkit/haxe/std/haxe/format/JsonParser.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/io/BytesBuffer.hx","C:/HaxeToolkit/haxe/std/haxe/io/Input.hx","C:/HaxeToolkit/haxe/std/haxe/io/BytesInput.hx","C:/HaxeToolkit/haxe/std/haxe/io/Output.hx","C:/HaxeToolkit/haxe/std/haxe/io/BytesOutput.hx","C:/HaxeToolkit/haxe/std/haxe/io/Eof.hx","C:/HaxeToolkit/haxe/std/haxe/io/FPHelper.hx","C:/HaxeToolkit/haxe/std/haxe/zip/Huffman.hx","C:/HaxeToolkit/haxe/std/haxe/zip/InflateImpl.hx","C:/HaxeToolkit/haxe/std/haxe/zip/Uncompress.hx","C:/HaxeToolkit/haxe/std/js/Boot.hx","C:/HaxeToolkit/haxe/std/js/html/CanvasElement.hx","E:/minko-hx/src/minko/AbstractBackend.hx","E:/minko-hx/src/minko/AbstractCanvas.hx","E:/minko-hx/src/minko/Canvas.hx","E:/minko-hx/src/minko/Timer.hx","E:/minko-hx/src/minko/Tuple.hx","E:/minko-hx/src/minko/WebBackend.hx","E:/minko-hx/src/minko/WebCanvas.hx","E:/minko-hx/src/minko/animation/AbstractTimeline.hx","E:/minko-hx/src/minko/animation/Matrix4x4Timeline.hx","E:/minko-hx/src/minko/async/Worker.hx","E:/minko-hx/src/minko/async/WorkerImpl.hx","E:/minko-hx/src/minko/audio/Sound.hx","E:/minko-hx/src/minko/component/AbstractAnimation.hx","E:/minko-hx/src/minko/component/AbstractRootDataComponent.hx","E:/minko-hx/src/minko/component/AbstractLight.hx","E:/minko-hx/src/minko/component/AbstractDiscreteLight.hx","E:/minko-hx/src/minko/component/AbstractScript.hx","E:/minko-hx/src/minko/component/AmbientLight.hx","E:/minko-hx/src/minko/component/Animation.hx","E:/minko-hx/src/minko/component/DirectionalLight.hx","E:/minko-hx/src/minko/component/MasterAnimation.hx","E:/minko-hx/src/minko/component/Metadata.hx","E:/minko-hx/src/minko/component/PerspectiveCamera.hx","E:/minko-hx/src/minko/component/Picking.hx","E:/minko-hx/src/minko/component/PointLight.hx","E:/minko-hx/src/minko/component/Renderer.hx","E:/minko-hx/src/minko/component/SceneManager.hx","E:/minko-hx/src/minko/component/ShadowMappingTechnique.hx","E:/minko-hx/src/minko/component/Skinning.hx","E:/minko-hx/src/minko/component/SpotLight.hx","E:/minko-hx/src/minko/component/Surface.hx","E:/minko-hx/src/minko/component/Transform.hx","E:/minko-hx/src/minko/data/AbstractFilter.hx","E:/minko-hx/src/minko/data/Binding.hx","E:/minko-hx/src/minko/data/BindingMap.hx","E:/minko-hx/src/minko/data/Collection.hx","E:/minko-hx/src/minko/data/Provider.hx","E:/minko-hx/src/minko/data/ResolvedBinding.hx","E:/minko-hx/src/minko/data/Store.hx","E:/minko-hx/src/minko/data/UnsafePointer.hx","E:/minko-hx/src/minko/file/AbstractParser.hx","E:/minko-assimp/src/minko/file/AbstractASSIMPParser.hx","E:/minko-assimp/src/minko/file/ASSIMPParser.hx","E:/minko-hx/src/minko/file/AbstractAssetDescriptor.hx","E:/minko-hx/src/minko/file/AbstractProtocol.hx","E:/minko-hx/src/minko/file/AssetLibrary.hx","E:/minko-hx/src/minko/file/AssetLocation.hx","E:/minko-hx/src/minko/file/EffectParser.hx","E:/minko-hx/src/minko/file/File.hx","E:/minko-hx/src/minko/file/FileProtocol.hx","E:/minko-assimp/src/minko/file/Gltf2Parser.hx","E:/minko-assimp/src/minko/file/IOHandler.hx","E:/minko-hx/src/minko/file/JPEGParser.hx","E:/minko-hx/src/minko/file/Loader.hx","E:/minko-hx/src/minko/file/MaxRectPacker.hx","E:/minko-hx/src/minko/file/MipMapChainParser.hx","E:/minko-hx/src/minko/material/Material.hx","E:/minko-hx/src/minko/material/BasicMaterial.hx","E:/minko-hx/src/minko/signal/Signal2.hx","E:/minko-hx/src/minko/file/Options.hx","E:/minko-hx/src/minko/file/PNGParser.hx","E:/minko-hx/src/minko/file/PixelData.hx","E:/minko-hx/src/minko/geometry/Bone.hx","E:/minko-hx/src/minko/geometry/CubeGeometry.hx","E:/minko-hx/src/minko/geometry/QuadGeometry.hx","E:/minko-hx/src/minko/geometry/Skin.hx","E:/minko-hx/src/minko/geometry/SphereGeometry.hx","E:/minko-hx/src/minko/input/Joystick.hx","E:/minko-hx/src/minko/input/Keyboard.hx","E:/minko-hx/src/minko/input/Mouse.hx","E:/minko-hx/src/minko/input/Touch.hx","E:/minko-hx/src/minko/material/PhongMaterial.hx","E:/minko-hx/src/minko/material/WaterMaterial.hx","E:/minko-hx/src/minko/math/Random.hx","E:/minko-hx/src/minko/math/Ray.hx","E:/minko-hx/src/minko/math/Rect.hx","E:/minko-hx/src/minko/net/HTTPOptions.hx","E:/minko-hx/src/minko/net/WebHTTPProtocol.hx","E:/minko-hx/src/minko/render/AbstractContext.hx","E:/minko-hx/src/minko/render/AbstractResource.hx","E:/minko-hx/src/minko/render/AbstractTexture.hx","E:/minko-hx/src/minko/render/CubeTexture.hx","E:/minko-hx/src/minko/render/DrawCall.hx","E:/minko-hx/src/minko/render/DrawCallPool.hx","E:/minko-hx/src/minko/render/Effect.hx","E:/minko-hx/src/minko/render/GlContext.hx","E:/minko-hx/src/minko/render/IndexBuffer.hx","E:/minko-hx/src/minko/render/Pass.hx","E:/minko-hx/src/minko/render/Program.hx","E:/minko-hx/src/minko/render/ProgramInputs.hx","E:/minko-hx/src/minko/render/ProgramSignature.hx","E:/minko-hx/src/minko/render/RectangleTexture.hx","E:/minko-hx/src/minko/render/SamplerStates.hx","E:/minko-hx/src/minko/render/Shader.hx","E:/minko-hx/src/minko/render/States.hx","E:/minko-hx/src/minko/render/Texture.hx","E:/minko-hx/src/minko/render/TextureFormatInfo.hx","E:/minko-hx/src/minko/render/TextureSampler.hx","E:/minko-hx/src/minko/render/VertexAttribute.hx","E:/minko-hx/src/minko/render/VertexBuffer.hx","E:/minko-hx/src/minko/scene/Node.hx","E:/minko-hx/src/minko/scene/NodeSet.hx","E:/minko-hx/src/minko/signal/Signal.hx","E:/minko-hx/src/minko/signal/Signal3.hx","E:/minko-hx/src/minko/signal/Signal4.hx","E:/minko-hx/src/minko/utils/BytesTool.hx","E:/minko-hx/src/minko/utils/RandomNumbers.hx","E:/minko-hx/src/minko/utils/TimeUtil.hx","E:/minko-hx/src/minko/utils/VectorHelper.hx","E:/minko-hx/src/minko/utils/WebNodeTools.hx","E:/minko-hx/src/tutorial/ApplyingAntialiasingEffect.hx","E:/minko-hx/src/tutorial/WorkingEnvironmentMaps.hx","E:/minko-hx/src/tutorial/WorkingNormalMaps.hx","E:/minko-hx/src/tutorial/WorkingPointlights.hx","E:/minko-hx/src/tutorial/WorkingSpecularMaps.hx","E:/minko-hx/src/tutorial/WorkingSpotlights.hx","C:/HaxeToolkit/haxe/std/js/_std/String.hx","E:/minko-assimp/src/assimp/Types.hx","E:/minko-hx/src/minko/render/Priority.hx"],
"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class EReg {\n\n\tvar r : HaxeRegExp;\n\n\tpublic inline function new( r : String, opt : String ) : Void {\n\t\tthis.r = new HaxeRegExp(r, opt.split(\"u\").join(\"\")); // 'u' (utf8) depends on page encoding\n\t}\n\n\tpublic function match( s : String ) : Bool {\n\t\tif( r.global ) r.lastIndex = 0;\n\t\tr.m = r.exec(s);\n\t\tr.s = s;\n\t\treturn (r.m != null);\n\t}\n\n\tpublic function matched( n : Int ) : String {\n\t\treturn if( r.m != null && n >= 0 && n < r.m.length ) r.m[n] else throw \"EReg::matched\";\n\t}\n\n\tpublic function matchedLeft() : String {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\treturn r.s.substr(0,r.m.index);\n\t}\n\n\tpublic function matchedRight() : String {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\tvar sz = r.m.index+r.m[0].length;\n\t\treturn r.s.substr(sz,r.s.length-sz);\n\t}\n\n\tpublic function matchedPos() : { pos : Int, len : Int } {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\treturn { pos : r.m.index, len : r.m[0].length };\n\t}\n\n\tpublic function matchSub( s : String, pos : Int, len : Int = -1):Bool {\n\t\treturn if (r.global) {\n\t\t\tr.lastIndex = pos;\n\t\t\tr.m = r.exec(len < 0 ? s : s.substr(0, pos + len));\n\t\t\tvar b = r.m != null;\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t}\n\t\t\tb;\n\t\t} else {\n\t\t\t// TODO: check some ^/$ related corner cases\n\t\t\tvar b = match( len < 0 ? s.substr(pos) : s.substr(pos,len) );\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t\tr.m.index += pos;\n\t\t\t}\n\t\t\tb;\n\t\t}\n\t}\n\n\tpublic function split( s : String ) : Array<String> {\n\t\t// we can't use directly s.split because it's ignoring the 'g' flag\n\t\tvar d = \"#__delim__#\";\n\t\treturn replace(s,d).split(d);\n\t}\n\n\tpublic inline function replace( s : String, by : String ) : String {\n\t\treturn (cast s).replace(r,by);\n\t}\n\n\tpublic function map( s : String, f : EReg -> String ) : String {\n\t\tvar offset = 0;\n\t\tvar buf = new StringBuf();\n\t\tdo {\n\t\t\tif (offset >= s.length)\n\t\t\t\tbreak;\n\t\t\telse if (!matchSub(s, offset)) {\n\t\t\t\tbuf.add(s.substr(offset));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar p = matchedPos();\n\t\t\tbuf.add(s.substr(offset, p.pos - offset));\n\t\t\tbuf.add(f(this));\n\t\t\tif (p.len == 0) {\n\t\t\t\tbuf.add(s.substr(p.pos, 1));\n\t\t\t\toffset = p.pos + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t\toffset = p.pos + p.len;\n\t\t} while (r.global);\n\t\tif (!r.global && offset > 0 && offset < s.length)\n\t\t\tbuf.add(s.substr(offset));\n\t\treturn buf.toString();\n\t}\n\n\tpublic static inline function escape( s : String ) : String {\n\t\treturn (cast s).replace(escapeRe, \"\\\\$&\");\n\t}\n\tstatic var escapeRe = new js.RegExp(\"[.*+?^${}()|[\\\\]\\\\\\\\]\", \"g\");\n}\n\n@:native(\"RegExp\")\nprivate extern class HaxeRegExp extends js.RegExp {\n\tvar m:js.RegExp.RegExpMatch;\n\tvar s:String;\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:noDoc\nclass HxOverrides {\n\n\tstatic function dateStr( date :Date ) : String {\n\t\tvar m = date.getMonth() + 1;\n\t\tvar d = date.getDate();\n\t\tvar h = date.getHours();\n\t\tvar mi = date.getMinutes();\n\t\tvar s = date.getSeconds();\n\t\treturn date.getFullYear()\n\t\t\t+\"-\"+(if( m < 10 ) \"0\"+m else \"\"+m)\n\t\t\t+\"-\"+(if( d < 10 ) \"0\"+d else \"\"+d)\n\t\t\t+\" \"+(if( h < 10 ) \"0\"+h else \"\"+h)\n\t\t\t+\":\"+(if( mi < 10 ) \"0\"+mi else \"\"+mi)\n\t\t\t+\":\"+(if( s < 10 ) \"0\"+s else \"\"+s);\n\t}\n\n\tstatic function strDate( s : String ) : Date {\n\t\tswitch( s.length ) {\n\t\tcase 8: // hh:mm:ss\n\t\t\tvar k = s.split(\":\");\n\t\t\tvar d = js.Syntax.construct(Date);\n\t\t\t(cast d)[cast \"setTime\"](0);\n\t\t\t(cast d)[cast \"setUTCHours\"](k[0]);\n\t\t\t(cast d)[cast \"setUTCMinutes\"](k[1]);\n\t\t\t(cast d)[cast \"setUTCSeconds\"](k[2]);\n\t\t\treturn d;\n\t\tcase 10: // YYYY-MM-DD\n\t\t\tvar k = s.split(\"-\");\n\t\t\treturn new Date(cast k[0],(cast k[1]) - 1,cast k[2],0,0,0);\n\t\tcase 19: // YYYY-MM-DD hh:mm:ss\n\t\t\tvar k = s.split(\" \");\n\t\t\tvar y = k[0].split(\"-\");\n\t\t\tvar t = k[1].split(\":\");\n\t\t\treturn new Date(cast y[0],(cast y[1]) - 1,cast y[2],cast t[0],cast t[1],cast t[2]);\n\t\tdefault:\n\t\t\tthrow \"Invalid date format : \" + s;\n\t\t}\n\t}\n\n\t@:pure\n\tstatic function cca( s : String, index : Int ) : Null<Int> {\n\t\tvar x = (cast s).charCodeAt(index);\n\t\tif( x != x ) // fast isNaN\n\t\t\treturn js.Lib.undefined; // isNaN will still return true\n\t\treturn x;\n\t}\n\n\t@:pure\n\tstatic function substr( s : String, pos : Int, ?len : Int ) : String {\n\t\tif (len == null) {\n\t\t\tlen = s.length;\n\t\t} else if (len < 0) {\n\t\t\tif (pos == 0)\n\t\t\t\tlen = s.length + len;\n\t\t\telse\n\t\t\t\treturn \"\";\n\t\t}\n\n\t\t#if (js_es < 5)\n\t\tif (pos < 0) {\n\t\t\tpos = s.length + pos;\n\t\t\tif (pos < 0)\n\t\t\t\tpos = 0;\n\t\t}\n\t\t#end\n\n\t\treturn (cast s).substr(pos, len);\n\t}\n\n\t@:pure\n\tstatic function indexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i < 0) {\n\t\t\ti += len;\n\t\t\tif (i < 0) i = 0;\n\t\t}\n\t\twhile (i < len)\n\t\t{\n\t\t\tif (js.Syntax.strictEq(a[i], obj))\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\t@:pure\n\tstatic function lastIndexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i >= len)\n\t\t\ti = len - 1;\n\t\telse if (i < 0)\n\t\t\ti += len;\n\t\twhile (i >= 0)\n\t\t{\n\t\t\tif (js.Syntax.strictEq(a[i], obj))\n\t\t\t\treturn i;\n\t\t\ti--;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function remove<T>( a : Array<T>, obj : T ) {\n\t\tvar i = a.indexOf(obj);\n\t\tif( i == -1 ) return false;\n\t\ta.splice(i,1);\n\t\treturn true;\n\t}\n\n\t@:pure\n\tstatic function iter<T>( a : Array<T> ) : Iterator<T> untyped {\n\t\treturn {\n\t\t\tcur : 0,\n\t\t\tarr : a,\n\t\t\thasNext : function() {\n\t\t\t\treturn __this__.cur < __this__.arr.length;\n\t\t\t},\n\t\t\tnext : function() {\n\t\t\t\treturn __this__.arr[__this__.cur++];\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic function __init__() untyped {\n#if (js_es < 5)\n\t\t__feature__('HxOverrides.indexOf', if( Array.prototype.indexOf ) __js__(\"HxOverrides\").indexOf = function(a,o,i) return Array.prototype.indexOf.call(a, o, i));\n\t\t__feature__('HxOverrides.lastIndexOf', if( Array.prototype.lastIndexOf ) __js__(\"HxOverrides\").lastIndexOf = function(a,o,i) return Array.prototype.lastIndexOf.call(a, o, i));\n#end\n\t}\n\n}\n","import haxe.ds.List;\n/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tThe `Lambda` class is a collection of methods to support functional\n\tprogramming. It is ideally used with `using Lambda` and then acts as an\n\textension to Iterable types.\n\n\tOn static platforms, working with the Iterable structure might be slower\n\tthan performing the operations directly on known types, such as Array and\n\tList.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n\n\t@see https://haxe.org/manual/std-Lambda.html\n**/\n\nclass Lambda {\n\n\n\t/**\n\t\tCreates an Array from Iterable `it`.\n\n\t\tIf `it` is an Array, this function returns a copy of it.\n\t**/\n\tpublic static function array<A>( it : Iterable<A> ) : Array<A> {\n\t\tvar a = new Array<A>();\n\t\tfor(i in it)\n\t\t\ta.push(i);\n\t\treturn a;\n\t}\n\n\t/**\n\t\tCreates a List form Iterable `it`.\n\n\t\tIf `it` is a List, this function returns a copy of it.\n\t**/\n\tpublic static function list<A>( it : Iterable<A> ) : List<A> {\n\t\tvar l = new List<A>();\n\t\tfor(i in it)\n\t\t\tl.add(i);\n\t\treturn l;\n\t}\n\n\t/**\n\t\tCreates a new Array by applying function `f` to all elements of `it`.\n\t\tThe order of elements is preserved.\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static inline function map<A,B>( it : Iterable<A>, f : A -> B ) : Array<B> {\n\t\treturn [for (x in it) f(x)];\n\t}\n\n\t/**\n\t\tSimilar to map, but also passes the index of each element to `f`.\n\t\tThe order of elements is preserved.\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static inline function mapi<A,B>( it : Iterable<A>, f : Int -> A -> B ) : Array<B> {\n\t\tvar i = 0;\n\t\treturn [for (x in it) f(i++, x)];\n\t}\n\n\t/**\n\t\tConcatenate a list of iterables.\n\t\tThe order of elements is preserved.\n\t**/\n\tpublic static inline function flatten<A>( it : Iterable<Iterable<A>> ) : Array<A> {\n\t\treturn [for (e in it) for (x in e) x];\n\t}\n\n\t/**\n\t\tA composition of map and flatten.\n\t\tThe order of elements is preserved.\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static inline function flatMap<A,B>( it : Iterable<A>, f: A -> Iterable<B> ) : Array<B> {\n\t\treturn Lambda.flatten(Lambda.map(it, f));\n\t}\n\n\t/**\n\t\tTells if `it` contains `elt`.\n\n\t\tThis function returns true as soon as an element is found which is equal\n\t\tto `elt` according to the `==` operator.\n\n\t\tIf no such element is found, the result is false.\n\t**/\n\tpublic static function has<A>( it : Iterable<A>, elt : A ) : Bool {\n\t\tfor( x in it )\n\t\t\tif( x == elt )\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/**\n\t\tTells if `it` contains an element for which `f` is true.\n\n\t\tThis function returns true as soon as an element is found for which a\n\t\tcall to `f` returns true.\n\n\t\tIf no such element is found, the result is false.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function exists<A>( it : Iterable<A>, f : A -> Bool ) {\n\t\tfor( x in it )\n\t\t\tif( f(x) )\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/**\n\t\tTells if `f` is true for all elements of `it`.\n\n\t\tThis function returns false as soon as an element is found for which a\n\t\tcall to `f` returns false.\n\n\t\tIf no such element is found, the result is true.\n\n\t\tIn particular, this function always returns true if `it` is empty.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function foreach<A>( it : Iterable<A>, f : A -> Bool ) {\n\t\tfor( x in it )\n\t\t\tif( !f(x) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/**\n\t\tCalls `f` on all elements of `it`, in order.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function iter<A>( it : Iterable<A>, f : A -> Void ) {\n\t\tfor( x in it )\n\t\t\tf(x);\n\t}\n\n\t/**\n\t\tReturns a Array containing those elements of `it` for which `f` returned\n\t\ttrue.\n\t\tIf `it` is empty, the result is the empty Array even if `f` is null.\n\t\tOtherwise if `f` is null, the result is unspecified.\n\t**/\n\tpublic static function filter<A>( it : Iterable<A>, f : A -> Bool ) {\n\t\treturn [for (x in it) if (f(x)) x];\n\t}\n\n\t/**\n\t\tFunctional fold on Iterable `it`, using function `f` with start argument\n\t\t`first`.\n\n\t\tIf `it` has no elements, the result is `first`.\n\n\t\tOtherwise the first element of `it` is passed to `f` alongside `first`.\n\t\tThe result of that call is then passed to `f` with the next element of\n\t\t`it`, and so on until `it` has no more elements.\n\n\t\tIf `it` or `f` are null, the result is unspecified.\n\t**/\n\tpublic static function fold<A,B>( it : Iterable<A>, f : A -> B -> B, first : B ) : B {\n\t\tfor( x in it )\n\t\t\tfirst = f(x,first);\n\t\treturn first;\n\t}\n\n\t/**\n\t\tReturns the number of elements in `it` for which `pred` is true, or the\n\t\ttotal number of elements in `it` if `pred` is null.\n\n\t\tThis function traverses all elements.\n\t**/\n\tpublic static function count<A>( it : Iterable<A>, ?pred : A -> Bool ) {\n\t\tvar n = 0;\n\t\tif( pred == null )\n\t\t\tfor( _ in it )\n\t\t\t\tn++;\n\t\telse\n\t\t\tfor( x in it )\n\t\t\t\tif( pred(x) )\n\t\t\t\t\tn++;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tTells if Iterable `it` does not contain any element.\n\t**/\n\tpublic static function empty<T>( it : Iterable<T> ) : Bool {\n\t\treturn !it.iterator().hasNext();\n\t}\n\n\t/**\n\t\tReturns the index of the first element `v` within Iterable `it`.\n\n\t\tThis function uses operator `==` to check for equality.\n\n\t\tIf `v` does not exist in `it`, the result is -1.\n\t**/\n\tpublic static function indexOf<T>( it : Iterable<T>, v : T ) : Int {\n\t\tvar i = 0;\n\t\tfor( v2 in it ) {\n\t\t\tif( v == v2 )\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t\tReturns the first element of `it` for which `f` is true.\n\n\t\tThis function returns as soon as an element is found for which a call to\n\t\t`f` returns true.\n\n\t\tIf no such element is found, the result is null.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function find<T>( it : Iterable<T>, f : T -> Bool ) : Null<T> {\n\t\tfor( v in it ) {\n\t\t\tif(f(v)) return v;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t\tReturns a new Array containing all elements of Iterable `a` followed by\n\t\tall elements of Iterable `b`.\n\n\t\tIf `a` or `b` are null, the result is unspecified.\n\t**/\n\tpublic static function concat<T>( a : Iterable<T>, b : Iterable<T> ) : Array<T> {\n\t\tvar l = new Array();\n\t\tfor( x in a )\n\t\t\tl.push(x);\n\t\tfor( x in b )\n\t\t\tl.push(x);\n\t\treturn l;\n\t}\n\n}\n","package ;\r\nimport example.ExamplePbr;\r\nimport example.ExampleWater;\r\nimport example.ExampleStencil;\r\nimport example.ExamplePicking;\r\nimport tutorial.WorkingNormalMaps;\r\nimport tutorial.ApplyingAntialiasingEffect;\r\nimport example.ExampleSkybox;\r\nimport example.ExampleLightScattering;\r\nimport tutorial.WorkingSpotlights;\r\nimport tutorial.WorkingSpecularMaps;\r\nimport tutorial.WorkingPointlights;\r\nimport tutorial.WorkingEnvironmentMaps;\r\nimport minko.file.Gltf2Parser;\r\nimport minko.Canvas.CanvasManager;\r\nimport glm.Quat;\r\nimport minko.input.Mouse;\r\nimport minko.file.JPEGParser;\r\nimport minko.file.PNGParser;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.GLM;\r\nimport minko.component.Transform;\r\nimport minko.component.Renderer;\r\nimport minko.input.Keyboard;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.MasterAnimation;\r\nimport minko.component.DirectionalLight;\r\nimport minko.component.AmbientLight;\r\nimport minko.component.Surface;\r\nimport minko.scene.NodeSet;\r\nimport minko.scene.Node;\r\nimport minko.file.Loader;\r\nimport minko.file.ASSIMPParser;\r\nimport minko.component.Skinning.SkinningMethod;\r\nimport minko.component.SceneManager;\r\nimport minko.WebCanvas;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.signal.Signal.SignalSlot;\r\nimport minko.component.AbstractAnimation;\r\nimport assimp.format.Defs;\r\nimport assimp.format.Camera.AiCamera;\r\nimport assimp.format.Anim;\r\nimport assimp.format.Light;\r\nimport assimp.format.Material;\r\nimport assimp.format.Mesh;\r\nimport assimp.format.MetaData;\r\nimport assimp.format.Scene;\r\nimport assimp.format.Version;\r\nimport assimp.Types;\r\nimport assimp.StringUtil;\r\nimport assimp.ScenePreprocessor;\r\nimport assimp.ProgressHandler;\r\nimport assimp.ProcessHelper;\r\nimport assimp.IOSystem;\r\n\r\nimport assimp.AiPostProcessStep;\r\nimport assimp.Assimp;\r\nimport assimp.DefaultIOSystem;\r\nimport assimp.DefaultProgressHandler;\r\nimport assimp.Hash;\r\nimport assimp.ImporterDesc;\r\nimport assimp.ImporterPimpl;\r\nimport assimp.BaseImporter;\r\nimport assimp.postProcess.ValidateDSProcess;\r\nimport assimp.Importer;\r\nimport assimp.format.assbin.AssbinLoader;\r\nimport assimp.Config;\r\nimport minko.file.IOHandler;\r\nimport minko.file.AbstractASSIMPParser;\r\nimport assimp.format.gltf2.GLTF2;\r\n//import gltf.GLTF;\r\nimport assimp.format.gltf2.GlTF2Importer;\r\nclass Main {\r\n    //3k 40 fps\r\n    //3.5k 30fps\r\n    //2k 60fps\r\n    static public function main() {\r\n        new ExampleAssimp();\r\n    }\r\n}\r\n\r\nclass ExampleAssimp {\r\n    private static var WINDOW_WIDTH = 800;\r\n    private static var WINDOW_HEIGHT = 600;\r\n    //private static var MODEL_FILENAME = \"pg_stand.gltf\";\r\n     private static var MODEL_FILENAME = \"Sample_005339_08932_25_14.gltf\";\r\n   // private static var MODEL_FILENAME = \"leg-with-control-bones.gltf\";\r\n    private static var LABEL_RUN_START = \"run_start\";\r\n    private static var LABEL_RUN_STOP = \"run_stop\";\r\n    private static var LABEL_IDLE = \"idle\";\r\n    private static var LABEL_WALK_START = \"walk_start\";\r\n    private static var LABEL_WALK_STOP = \"walk_stop\";\r\n    private static var LABEL_PUNCH_START = \"punch_start\";\r\n    private static var LABEL_PUNCH_HIT = \"punch_hit\";\r\n    private static var LABEL_PUNCH_STOP = \"punch_stop\";\r\n    private static var LABEL_KICK_START = \"kick_start\";\r\n    private static var LABEL_KICK_HIT = \"kick_hit\";\r\n    private static var LABEL_KICK_STOP = \"kick_stop\";\r\n    private static var LABEL_STUN_START = \"stun_start\";\r\n    private static var LABEL_STUN_STOP = \"stun_stop\";\r\n\r\n    private function run(anim:AbstractAnimation):Void {\r\n        if (anim == null) {\r\n            return ;\r\n        }\r\n\r\n        anim.isLooping = (true);\r\n\r\n        anim.setPlaybackWindowbyName(LABEL_RUN_START, LABEL_RUN_STOP);\r\n        anim.play();\r\n    }\r\n\r\n    private function walk(anim:AbstractAnimation):Void {\r\n        if (anim == null) {\r\n            return  ;\r\n        }\r\n\r\n        anim.isLooping = (true);\r\n\r\n        anim.setPlaybackWindowbyName(LABEL_WALK_START, LABEL_WALK_STOP);\r\n        anim.play();\r\n    }\r\n\r\n    private function kick(anim:AbstractAnimation):Void {\r\n        if (anim == null) {\r\n            return ;\r\n        }\r\n\r\n        anim.isLooping = (false);\r\n\r\n        anim.setPlaybackWindowbyName(LABEL_KICK_START, LABEL_KICK_STOP, true);\r\n        anim.play();\r\n    }\r\n\r\n    private function punch(anim:AbstractAnimation):Void {\r\n        if (anim == null) {\r\n            return ;\r\n        }\r\n\r\n        anim.isLooping = (false);\r\n\r\n        anim.setPlaybackWindowbyName(LABEL_PUNCH_START, LABEL_PUNCH_STOP, true);\r\n        anim.play();\r\n    }\r\n\r\n    private function idle(anim:AbstractAnimation):Void {\r\n        if (anim == null) {\r\n            return ;\r\n        }\r\n\r\n        anim.isLooping=(false);\r\n\r\n        anim.resetPlaybackWindow();\r\n        anim.seekLabel(LABEL_IDLE);\r\n        anim.stop();\r\n    }\r\n\r\n    private function stun(anim:AbstractAnimation):Void {\r\n        if (anim == null) {\r\n            return ;\r\n        }\r\n\r\n        anim.isLooping = (true);\r\n\r\n        anim.setPlaybackWindowbyName(LABEL_STUN_START, LABEL_STUN_STOP);\r\n        anim.play();\r\n    }\r\n\r\n\r\n    private function printAnimationInfo(anim:AbstractAnimation):Void {\r\n        if (anim == null) {\r\n            return;\r\n        }\r\n\r\n        trace(\"Animation labels\\n--------------\");\r\n        trace(\"\\n\");\r\n\r\n        for (labelId in 0... anim.numLabels) {\r\n            trace(\"\\t'\");\r\n            trace(anim.labelName(labelId),\"'\\tat t = \",anim.labelTime(labelId));\r\n            trace(\"\\n\");\r\n        }\r\n\r\n        trace(\"Animation controls\\n--------------\\n\\t[up]\\trun\\n\\t[down]\\twalk\\n\\t[left]\\tpunch\\n\\t[right]\\tkick\\n\\t[space]\\tstun\\n\\t[end]\\tidle\");\r\n        trace(\"\\n\");\r\n        trace(\"\\t[r]\\treverse animation\\n\\t[1]\\tlow speed\\n\\t[2]\\tnormal speed\\n\\t[3]\\thigh speed\\n\");\r\n        trace(\"\\n\");\r\n    }\r\n\r\n    private var anim:AbstractAnimation ;\r\n    private var started:SignalSlot<AbstractAnimation>;\r\n    private var stopped:SignalSlot<AbstractAnimation>;\r\n    private var looped:SignalSlot<AbstractAnimation>;\r\n    private var labelHit:SignalSlot3<AbstractAnimation, String, Int> ;\r\n\r\n    public function new():Void {\r\n\r\n        var canvas =  CanvasManager.create(\"Minko Example - Assimp\", WINDOW_WIDTH, WINDOW_HEIGHT);\r\n        var sceneManager = SceneManager.create(canvas);\r\n        var defaultOptions = sceneManager.assets.loader.options;\r\n\r\n        // setup assets\r\n        defaultOptions.generateMipmaps = (true);\r\n        defaultOptions.skinningFramerate=(60);\r\n        defaultOptions.skinningMethod=(SkinningMethod.HARDWARE);\r\n        defaultOptions.startAnimation=(true);\r\n        defaultOptions.registerParser(\"assbin\", function()return new ASSIMPParser());\r\n        defaultOptions.registerParser(\"gltf\", function()return new Gltf2Parser());\r\n        defaultOptions.registerParser(\"png\", function()return new PNGParser());\r\n        defaultOptions.registerParser(\"jpg\", function()return new JPEGParser());\r\n\r\n        var fxLoader = Loader.createbyLoader(sceneManager.assets.loader);\r\n      //  fxLoader.options.loadAsynchronously=false;\r\n        fxLoader.queue(\"effect/Basic.effect\")\r\n       .queue(\"effect/PBR.effect\")\r\n       .queue(\"effect/Phong.effect\");\r\n\r\n\r\n        var fxComplete = fxLoader.complete.connect(function(l) {\r\n            sceneManager.assets.loader.options.effect=sceneManager.assets.effect(\"effect/Phong.effect\");\r\n            sceneManager.assets.loader.queue(MODEL_FILENAME);\r\n            sceneManager.assets.loader.load();\r\n        });\r\n        var beIdle = true;\r\n        var doPunch = false;\r\n        var doKick = false;\r\n        var doWalk = false;\r\n        var doRun = false;\r\n        var beStun = false;\r\n        var reverseAnim = false;\r\n        var speedId = 0;\r\n\r\n        var root = Node.create(\"root\");\r\n        root.addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\");\r\n        camera.addComponent(Renderer.create(0x7f7f7fff));\r\n        var mat4:Mat4=GLM.lookAt(new Vec3(0.25, 0.75, 2.5), new Vec3(0.0, 0.75, 0.0), new Vec3(0, 1, 0),new Mat4());\r\n        camera.addComponent(Transform.createbyMatrix4(Mat4.invert(mat4,new Mat4())));\r\n        camera.addComponent(PerspectiveCamera.create(canvas.aspectRatio));\r\n        root.addChild(camera);\r\n\r\n        var error = sceneManager.assets.loader.error.connect(function(loader, e) {\r\n            trace(\"error\");\r\n            trace(e);\r\n            trace(\"\\n\");\r\n        });\r\n\r\n        var _ = sceneManager.assets.loader.complete.connect(function(loader) {\r\n            var model = sceneManager.assets.symbol(MODEL_FILENAME);\r\n\r\n            var surfaceNodeSet = NodeSet.createbyNode(model).descendants(true).where(function(n:Node) {\r\n                return n.hasComponent(Surface);\r\n            });\r\n\r\n            root.addComponent(AmbientLight.create());\r\n            root.addComponent(DirectionalLight.create());\r\n\r\n            root.addChild(model);\r\n\r\n          //  var modelTransform:Transform = cast model.getComponent(Transform);\r\n           // modelTransform.matrix = GLM.rotate(Quat.axisAngle(new Vec3(1,0,0),180 ,new Quat()),new Mat4());\r\n\r\n            var skinnedNodes:NodeSet = NodeSet.createbyNode(model).descendants(true).where(function(n:Node) {\r\n                return n.hasComponent(MasterAnimation);\r\n            });\r\n\r\n            var skinnedNode:Node = skinnedNodes.nodes.iterator().hasNext() ? skinnedNodes.nodes.iterator().next() : null;\r\n/*\r\n            anim = cast skinnedNode.getComponent(MasterAnimation);\r\n\r\n            anim.addLabel(LABEL_RUN_START, 0);\r\n            anim.addLabel(LABEL_RUN_STOP, 800);\r\n            anim.addLabel(LABEL_IDLE, 900);\r\n            anim.addLabel(LABEL_WALK_START, 1400);\r\n            anim.addLabel(LABEL_WALK_STOP, 2300);\r\n            anim.addLabel(LABEL_PUNCH_START, 2333);\r\n            anim.addLabel(LABEL_PUNCH_HIT, 2600);\r\n            anim.addLabel(LABEL_PUNCH_STOP, 3000);\r\n            anim.addLabel(LABEL_KICK_START, 3033);\r\n            anim.addLabel(LABEL_KICK_HIT, 3316);\r\n            anim.addLabel(LABEL_KICK_STOP, 3600);\r\n            anim.addLabel(LABEL_STUN_START, 3633);\r\n            anim.addLabel(LABEL_STUN_STOP, 5033);\r\n\r\n            started = anim.started.connect(function(UnnamedParameter1) {\r\n                trace(\"\\nanimation started\");\r\n                trace(\"\\n\");\r\n            });\r\n            stopped = anim.stopped.connect(function(UnnamedParameter1) {\r\n                trace(\"animation stopped\");\r\n                trace(\"\\n\");\r\n            });\r\n            looped = anim.looped.connect(function(UnnamedParameter1) {\r\n                trace(\"\\nanimation looped\");\r\n                trace(\"\\n\");\r\n            });\r\n            labelHit = anim.labelHit.connect(function(UnnamedParameter1, name, time) {\r\n                trace(\"label '\");\r\n                trace(name);\r\n                trace(\"'\\thit at t = \");\r\n                trace(time);\r\n                trace(\"\\n\");\r\n            });\r\n\r\n            printAnimationInfo(anim);\r\n            idle(anim);\r\n            */\r\n\r\n\r\n        });\r\n\r\n        var resized = canvas.resized.connect(function(canvas, w, h) {\r\n            var perspectiveCamera:PerspectiveCamera = cast camera.getComponent(PerspectiveCamera);\r\n            perspectiveCamera.aspectRatio = ( w / h);\r\n        });\r\n\r\n        var keyDown = canvas.keyboard.keyDown.connect(function(k:Keyboard) {\r\n            if (anim == null) {\r\n                return;\r\n            }\r\n\r\n            if (k.keyIsDown(Key.UP)) {\r\n                beIdle = doPunch = doKick = doWalk = beStun = reverseAnim = false;\r\n                speedId = 0;\r\n                doRun = true;\r\n            }\r\n            else if (k.keyIsDown(Key.DOWN)) {\r\n                beIdle = doPunch = doRun = doKick = beStun = reverseAnim = false;\r\n                speedId = 0;\r\n                doWalk = true;\r\n            }\r\n            else if (k.keyIsDown(Key.LEFT)) {\r\n                beIdle = doRun = doKick = doWalk = beStun = reverseAnim = false;\r\n                speedId = 0;\r\n                doPunch = true;\r\n            }\r\n            else if (k.keyIsDown(Key.RIGHT)) {\r\n                beIdle = doPunch = doRun = doWalk = beStun = reverseAnim = false;\r\n                speedId = 0;\r\n                doKick = true;\r\n            }\r\n            else if (k.keyIsDown(Key.SPACE)) {\r\n                beIdle = doPunch = doRun = doKick = doWalk = reverseAnim = false;\r\n                speedId = 0;\r\n                beStun = true;\r\n            }\r\n            else if (k.keyIsDown(Key.END)) {\r\n                doPunch = doRun = doKick = doWalk = beStun = reverseAnim = false;\r\n                speedId = 0;\r\n                beIdle = true;\r\n            }\r\n            else if (k.keyIsDown(Key._1)) {\r\n                doPunch = doRun = doKick = doWalk = beStun = beIdle = reverseAnim = false;\r\n                speedId = 1;\r\n            }\r\n            else if (k.keyIsDown(Key._2)) {\r\n                doPunch = doRun = doKick = doWalk = beStun = beIdle = reverseAnim = false;\r\n                speedId = 2;\r\n            }\r\n            else if (k.keyIsDown(Key._3)) {\r\n                doPunch = doRun = doKick = doWalk = beStun = beIdle = reverseAnim = false;\r\n                speedId = 3;\r\n            }\r\n            else if (k.keyIsDown(Key.R)) {\r\n                doPunch = doRun = doKick = doWalk = beStun = beIdle = false;\r\n                reverseAnim = true;\r\n                speedId = 0;\r\n            }\r\n        });\r\n\r\n        var keyUp = canvas.keyboard.keyUp.connect(function(k:Keyboard) {\r\n            if (anim == null) {\r\n                return;\r\n            }\r\n\r\n            if (doWalk) {\r\n                walk(anim);\r\n            }\r\n            else if (doRun) {\r\n                run(anim);\r\n            }\r\n            else if (doKick) {\r\n                kick(anim);\r\n            }\r\n            else if (doPunch) {\r\n                punch(anim);\r\n            }\r\n            else if (beIdle) {\r\n                idle(anim);\r\n            }\r\n            else if (beStun) {\r\n                stun(anim);\r\n            }\r\n            else if (reverseAnim) {\r\n                anim.isReversed = (!anim.isReversed);\r\n                trace(\"animation is \");\r\n                trace((!anim.isReversed  ? \"not \" : \"\"));\r\n                trace(\"reversed\");\r\n                trace(\"\\n\");\r\n            }\r\n            else if (speedId > 0) {\r\n                if (speedId == 1) {\r\n                    anim.timeFunction = function(t) {\r\n                        return Math.floor(t / 2);\r\n                    };\r\n                    trace(\"animation's speed is decreased\");\r\n                    trace(\"\\n\");\r\n                }\r\n                else if (speedId == 2) {\r\n                    anim.timeFunction = function(t) {\r\n                        return t;\r\n                    };\r\n                    trace(\"animation is back to normal speed\");\r\n                    trace(\"\\n\");\r\n                }\r\n                else if (speedId == 3) {\r\n                    anim.timeFunction = function(t) {\r\n                        return t * 2;\r\n                    };\r\n                    trace(\"animation's speed is increased\");\r\n                    trace(\"\\n\");\r\n                }\r\n\r\n                speedId = 0;\r\n            }\r\n\r\n\r\n\r\n\r\n        });\r\n\r\n//       var enterFrame = canvas.enterFrame.connect(function(canvas, time, deltaTime) {\r\n//           sceneManager.nextFrame(time, deltaTime);\r\n//      });\r\n\r\n\r\n        var yaw = 0.3;\r\n        // float pitch = 1.3f;//float(M_PI) * .5f;\r\n        var pitch = Math.PI * .5;\r\n        var minPitch = 0.0 + 0.1;\r\n        // auto maxPitch = float(M_PI) * .5f - .1f;\r\n        var maxPitch = Math.PI - .1;\r\n        var lookAt = new Vec3(0.0, 2.0, 0.0);\r\n        var distance = 3.0;\r\n        var minDistance = 1.0;\r\n        var zoomSpeed = 0.0;\r\n\r\n        var mouseWheel = canvas.mouse.wheel.connect(function(m, h, v) {\r\n            zoomSpeed -= v * .1;\r\n        });\r\n\r\n        var mouseMove:SignalSlot3<Mouse, Int, Int> = null;\r\n        var cameraRotationXSpeed = 0.0;\r\n        var cameraRotationYSpeed = 0.0;\r\n\r\n        var mouseDown = canvas.mouse.leftButtonDown.connect(function(m) {\r\n            mouseMove = canvas.mouse.move.connect(function(UnnamedParameter1, dx, dy) {\r\n                cameraRotationYSpeed = dx * .01;\r\n                cameraRotationXSpeed = dy * -.01;\r\n            });\r\n        });\r\n\r\n        var mouseUp = canvas.mouse.leftButtonUp.connect(function(m) {\r\n            mouseMove.disconnect();\r\n           // mouseMove = null;\r\n        });\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, time, deltaTime) {\r\n            distance += zoomSpeed;\r\n            zoomSpeed *= 0.9;\r\n            if (distance < minDistance) {\r\n                distance = minDistance;\r\n            }\r\n\r\n            yaw += cameraRotationYSpeed;\r\n            cameraRotationYSpeed *= 0.9;\r\n\r\n            pitch += cameraRotationXSpeed;\r\n            cameraRotationXSpeed *= 0.9;\r\n\r\n            if (pitch > maxPitch) {\r\n                pitch = maxPitch;\r\n            }\r\n            else if (pitch < minPitch) {\r\n                pitch = minPitch;\r\n            }\r\n            var cameraTransform:Transform = cast camera.getComponent(Transform);\r\n            cameraTransform.matrix = (Mat4.invert(GLM.lookAt(\r\n                new Vec3(lookAt.x + distance * Math.cos(yaw) * Math.sin(pitch), lookAt.y + distance * Math.cos(pitch), lookAt.z + distance * Math.sin(yaw) * Math.sin(pitch)),\r\n                lookAt, new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4()));\r\n\r\n            sceneManager.nextFrame(time, deltaTime);\r\n        });\r\n\r\n\r\n        fxLoader.load();\r\n        canvas.run();\r\n\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) 2017 Kenton Hamaluik\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at:\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n*/\r\npackage glm;\r\n@:expose\r\n#if kha\r\nimport kha.math.FastMatrix4;\r\n#else\r\n@:dox(hide)\r\n@:allow(glm.Mat4)\r\nclass Mat4Base {\r\n   public function new() {}\r\n\r\n    public var _00: Float;\r\n    public var _10: Float;\r\n    public var _20: Float;\r\n    public var _30: Float;\r\n    public var _01: Float;\r\n    public var _11: Float;\r\n    public var _21: Float;\r\n    public var _31: Float;\r\n    public var _02: Float;\r\n    public var _12: Float;\r\n    public var _22: Float;\r\n    public var _32: Float;\r\n    public var _03: Float;\r\n    public var _13: Float;\r\n    public var _23: Float;\r\n    public var _33: Float;\r\n}\r\n#end\r\n@:expose(\"glm.Mat4Util\")\r\n/**\r\n  A 4x4 matrix\r\n */\r\n#if kha\r\nabstract Mat4(FastMatrix4) from FastMatrix4 to FastMatrix4  {\r\n#else\r\nabstract Mat4(Mat4Base) {\r\n#end\r\n    public inline function new(\r\n            _r0c0:Float = 0, _r0c1:Float = 0, _r0c2:Float = 0, _r0c3:Float = 0,\r\n            _r1c0:Float = 0, _r1c1:Float = 0, _r1c2:Float = 0, _r1c3:Float = 0,\r\n            _r2c0:Float = 0, _r2c1:Float = 0, _r2c2:Float = 0, _r2c3:Float = 0,\r\n            _r3c0:Float = 0, _r3c1:Float = 0, _r3c2:Float = 0, _r3c3:Float = 0) {\r\n        #if kha\r\n        this = new FastMatrix4(\r\n            _r0c0, _r0c1, _r0c2, _r0c3,\r\n            _r1c0, _r1c1, _r1c2, _r1c3,\r\n            _r2c0, _r2c1, _r2c2, _r2c3,\r\n            _r3c0, _r3c1, _r3c2, _r3c3\r\n        );\r\n        #else\r\n        this = new Mat4Base();\r\n        r0c0 = _r0c0;\r\n        r1c0 = _r1c0;\r\n        r2c0 = _r2c0;\r\n        r3c0 = _r3c0;\r\n\r\n        r0c1 = _r0c1;\r\n        r1c1 = _r1c1;\r\n        r2c1 = _r2c1;\r\n        r3c1 = _r3c1;\r\n\r\n        r0c2 = _r0c2;\r\n        r1c2 = _r1c2;\r\n        r2c2 = _r2c2;\r\n        r3c2 = _r3c2;\r\n\r\n        r0c3 = _r0c3;\r\n        r1c3 = _r1c3;\r\n        r2c3 = _r2c3;\r\n        r3c3 = _r3c3;\r\n        #end\r\n    }\r\n\r\n    /**\r\n      Accessor for the element in row 0 and column 0\r\n     */\r\n    public var r0c0(get, set):Float;\r\n    private inline function get_r0c0():Float return this._00;\r\n    private inline function set_r0c0(v:Float):Float return this._00 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 1 and column 0\r\n     */\r\n    public var r1c0(get, set):Float;\r\n    private inline function get_r1c0():Float return this._01;\r\n    private inline function set_r1c0(v:Float):Float return this._01 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 2 and column 0\r\n     */\r\n    public var r2c0(get, set):Float;\r\n    private inline function get_r2c0():Float return this._02;\r\n    private inline function set_r2c0(v:Float):Float return this._02 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 3 and column 0\r\n     */\r\n    public var r3c0(get, set):Float;\r\n    private inline function get_r3c0():Float return this._03;\r\n    private inline function set_r3c0(v:Float):Float return this._03 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 0 and column 1\r\n     */\r\n    public var r0c1(get, set):Float;\r\n    private inline function get_r0c1():Float return this._10;\r\n    private inline function set_r0c1(v:Float):Float return this._10 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 1 and column 1\r\n     */\r\n    public var r1c1(get, set):Float;\r\n    private inline function get_r1c1():Float return this._11;\r\n    private inline function set_r1c1(v:Float):Float return this._11 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 2 and column 1\r\n     */\r\n    public var r2c1(get, set):Float;\r\n    private inline function get_r2c1():Float return this._12;\r\n    private inline function set_r2c1(v:Float):Float return this._12 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 3 and column 1\r\n     */\r\n    public var r3c1(get, set):Float;\r\n    private inline function get_r3c1():Float return this._13;\r\n    private inline function set_r3c1(v:Float):Float return this._13 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 0 and column 2\r\n     */\r\n    public var r0c2(get, set):Float;\r\n    private inline function get_r0c2():Float return this._20;\r\n    private inline function set_r0c2(v:Float):Float return this._20 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 1 and column 2\r\n     */\r\n    public var r1c2(get, set):Float;\r\n    private inline function get_r1c2():Float return this._21;\r\n    private inline function set_r1c2(v:Float):Float return this._21 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 2 and column 2\r\n     */\r\n    public var r2c2(get, set):Float;\r\n    private inline function get_r2c2():Float return this._22;\r\n    private inline function set_r2c2(v:Float):Float return this._22 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 3 and column 2\r\n     */\r\n    public var r3c2(get, set):Float;\r\n    private inline function get_r3c2():Float return this._23;\r\n    private inline function set_r3c2(v:Float):Float return this._23 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 0 and column 3\r\n     */\r\n    public var r0c3(get, set):Float;\r\n    private inline function get_r0c3():Float return this._30;\r\n    private inline function set_r0c3(v:Float):Float return this._30 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 1 and column 3\r\n     */\r\n    public var r1c3(get, set):Float;\r\n    private inline function get_r1c3():Float return this._31;\r\n    private inline function set_r1c3(v:Float):Float return this._31 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 2 and column 3\r\n     */\r\n    public var r2c3(get, set):Float;\r\n    private inline function get_r2c3():Float return this._32;\r\n    private inline function set_r2c3(v:Float):Float return this._32 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 3 and column 3\r\n     */\r\n    public var r3c3(get, set):Float;\r\n    private inline function get_r3c3():Float return this._33;\r\n    private inline function set_r3c3(v:Float):Float return this._33 = v;\r\n\r\n    /**\r\n      Read an element using a column-major index\r\n      @param key the index to use\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function get(key:Int):Float {\r\n        return switch(key) {\r\n            case  0: r0c0;\r\n            case  1: r1c0;\r\n            case  2: r2c0;\r\n            case  3: r3c0;\r\n            case  4: r0c1;\r\n            case  5: r1c1;\r\n            case  6: r2c1;\r\n            case  7: r3c1;\r\n            case  8: r0c2;\r\n            case  9: r1c2;\r\n            case 10: r2c2;\r\n            case 11: r3c2;\r\n            case 12: r0c3;\r\n            case 13: r1c3;\r\n            case 14: r2c3;\r\n            case 15: r3c3;\r\n            case _: throw 'Index ${key} out of bounds (0-15)!';\r\n        };\r\n    }\r\n\r\n    /**\r\n      Write to an element using a column-major index\r\n      @param key the index to use\r\n      @param value the value to set\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function set(key:Int, value:Float):Float {\r\n        return switch(key) {\r\n            case  0: r0c0 = value;\r\n            case  1: r1c0 = value;\r\n            case  2: r2c0 = value;\r\n            case  3: r3c0 = value;\r\n            case  4: r0c1 = value;\r\n            case  5: r1c1 = value;\r\n            case  6: r2c1 = value;\r\n            case  7: r3c1 = value;\r\n            case  8: r0c2 = value;\r\n            case  9: r1c2 = value;\r\n            case 10: r2c2 = value;\r\n            case 11: r3c2 = value;\r\n            case 12: r0c3 = value;\r\n            case 13: r1c3 = value;\r\n            case 14: r2c3 = value;\r\n            case 15: r3c3 = value;\r\n            case _: throw 'Index ${key} out of bounds (0-15)!';\r\n        };\r\n    }\r\n\r\n    /**\r\n      Tests if two matrices are equal on an element-by-element basis\r\n      @param m the other matrix to check\r\n      @return Bool\r\n     */\r\n    public inline function equals(b:Mat4):Bool {\r\n        return !(\r\n               Math.abs(r0c0 - b.r0c0) >= glm.GLM.EPSILON\r\n            || Math.abs(r0c1 - b.r0c1) >= glm.GLM.EPSILON\r\n            || Math.abs(r0c2 - b.r0c2) >= glm.GLM.EPSILON\r\n            || Math.abs(r0c3 - b.r0c3) >= glm.GLM.EPSILON\r\n            || Math.abs(r1c0 - b.r1c0) >= glm.GLM.EPSILON\r\n            || Math.abs(r1c1 - b.r1c1) >= glm.GLM.EPSILON\r\n            || Math.abs(r1c2 - b.r1c2) >= glm.GLM.EPSILON\r\n            || Math.abs(r1c3 - b.r1c3) >= glm.GLM.EPSILON\r\n            || Math.abs(r2c0 - b.r2c0) >= glm.GLM.EPSILON\r\n            || Math.abs(r2c1 - b.r2c1) >= glm.GLM.EPSILON\r\n            || Math.abs(r2c2 - b.r2c2) >= glm.GLM.EPSILON\r\n            || Math.abs(r2c3 - b.r2c3) >= glm.GLM.EPSILON\r\n            || Math.abs(r3c0 - b.r3c0) >= glm.GLM.EPSILON\r\n            || Math.abs(r3c1 - b.r3c1) >= glm.GLM.EPSILON\r\n            || Math.abs(r3c2 - b.r3c2) >= glm.GLM.EPSILON\r\n            || Math.abs(r3c3 - b.r3c3) >= glm.GLM.EPSILON\r\n        );\r\n    }\r\n\r\n    /**\r\n      Gets a string representation of the matrix\r\n      @return String\r\n     */\r\n    public inline function toString():String {\r\n        return\r\n            '[${r0c0}, ${r0c1}, ${r0c2}, ${r0c3}]\\n' +\r\n            '[${r1c0}, ${r1c1}, ${r1c2}, ${r1c3}]\\n' +\r\n            '[${r2c0}, ${r2c1}, ${r2c2}, ${r2c3}]\\n' +\r\n            '[${r3c0}, ${r3c1}, ${r3c2}, ${r3c3}]\\n';\r\n    }\r\n\r\n    /**\r\n      Fill `dest` with an identity matrix\r\n      @param dest the matrix to fill out\r\n      @return Mat4\r\n     */\r\n    public inline static function identity(dest:Mat4):Mat4 {\r\n        dest.r0c0 = 1;\r\n        dest.r0c1 = 0;\r\n        dest.r0c2 = 0;\r\n        dest.r0c3 = 0;\r\n\r\n        dest.r1c0 = 0;\r\n        dest.r1c1 = 1;\r\n        dest.r1c2 = 0;\r\n        dest.r1c3 = 0;\r\n        \r\n        dest.r2c0 = 0;\r\n        dest.r2c1 = 0;\r\n        dest.r2c2 = 1;\r\n        dest.r2c3 = 0;\r\n        \r\n        dest.r3c0 = 0;\r\n        dest.r3c1 = 0;\r\n        dest.r3c2 = 0;\r\n        dest.r3c3 = 1;\r\n\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Copies one matrix into another\r\n      @param src The matrix to copy from\r\n      @param dest The matrix to copy into\r\n      @return Mat4\r\n     */\r\n    public inline static function copy(src:Mat4, dest:Mat4):Mat4 {\r\n        dest.r0c0 = src.r0c0;\r\n        dest.r0c1 = src.r0c1;\r\n        dest.r0c2 = src.r0c2;\r\n        dest.r0c3 = src.r0c3;\r\n        \r\n        dest.r1c0 = src.r1c0;\r\n        dest.r1c1 = src.r1c1;\r\n        dest.r1c2 = src.r1c2;\r\n        dest.r1c3 = src.r1c3;\r\n        \r\n        dest.r2c0 = src.r2c0;\r\n        dest.r2c1 = src.r2c1;\r\n        dest.r2c2 = src.r2c2;\r\n        dest.r2c3 = src.r2c3;\r\n        \r\n        dest.r3c0 = src.r3c0;\r\n        dest.r3c1 = src.r3c1;\r\n        dest.r3c2 = src.r3c2;\r\n        dest.r3c3 = src.r3c3;\r\n\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Transposes a matrix\r\n      @param src The matrix to transpose\r\n      @param dest The destination matrix. Call with `src == dest` to modify `src` in place\r\n      @return Mat4\r\n     */\r\n    public inline static function transpose(src:Mat4, dest:Mat4):Mat4 {\r\n        var src_r1c0 = src.r1c0;\r\n        var src_r2c0 = src.r2c0;\r\n        var src_r2c1 = src.r2c1;\r\n        var src_r3c0 = src.r3c0;\r\n        var src_r3c1 = src.r3c1;\r\n        var src_r3c2 = src.r3c2;\r\n\r\n        dest.r0c0 = src.r0c0;\r\n        dest.r1c0 = src.r0c1;\r\n        dest.r2c0 = src.r0c2;\r\n        dest.r3c0 = src.r0c3;\r\n\r\n        dest.r0c1 = src_r1c0;\r\n        dest.r1c1 = src.r1c1;\r\n        dest.r2c1 = src.r1c2;\r\n        dest.r3c1 = src.r1c3;\r\n\r\n        dest.r0c2 = src_r2c0;\r\n        dest.r1c2 = src_r2c1;\r\n        dest.r2c2 = src.r2c2;\r\n        dest.r3c2 = src.r2c3;\r\n\r\n        dest.r0c3 = src_r3c0;\r\n        dest.r1c3 = src_r3c1;\r\n        dest.r2c3 = src_r3c2;\r\n        dest.r3c3 = src.r3c3;\r\n\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Calculates the determinant of the matrix\r\n      @param src The matrix to calculate the determinant of\r\n      @return Float\r\n     */\r\n    public inline static function determinant(src:Mat4):Float {\r\n        var a00:Float = src.r0c0, a01:Float = src.r1c0, a02:Float = src.r2c0, a03:Float = src.r3c0,\r\n            a10:Float = src.r0c1, a11:Float = src.r1c1, a12:Float = src.r2c1, a13:Float = src.r3c1,\r\n            a20:Float = src.r0c2, a21:Float = src.r1c2, a22:Float = src.r2c2, a23:Float = src.r3c2,\r\n            a30:Float = src.r0c3, a31:Float = src.r1c3, a32:Float = src.r2c3, a33:Float = src.r3c3;\r\n\r\n        var b00:Float = a00 * a11 - a01 * a10,\r\n            b01:Float = a00 * a12 - a02 * a10,\r\n            b02:Float = a00 * a13 - a03 * a10,\r\n            b03:Float = a01 * a12 - a02 * a11,\r\n            b04:Float = a01 * a13 - a03 * a11,\r\n            b05:Float = a02 * a13 - a03 * a12,\r\n            b06:Float = a20 * a31 - a21 * a30,\r\n            b07:Float = a20 * a32 - a22 * a30,\r\n            b08:Float = a20 * a33 - a23 * a30,\r\n            b09:Float = a21 * a32 - a22 * a31,\r\n            b10:Float = a21 * a33 - a23 * a31,\r\n            b11:Float = a22 * a33 - a23 * a32;\r\n\r\n        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n    }\r\n\r\n    /**\r\n      Inverts the `src` matrix, storing the result in `dest`. If `src == dest`, modifies `src` in place.\r\n      @param src The source matrix\r\n      @param dest The matrix to store the result in\r\n      @return Mat4\r\n     */\r\n    public inline static function invert(src:Mat4, dest:Mat4):Mat4 {\r\n        var a00:Float = src.r0c0, a01:Float = src.r0c1, a02:Float = src.r0c2, a03:Float = src.r0c3;\r\n        var a10:Float = src.r1c0, a11:Float = src.r1c1, a12:Float = src.r1c2, a13:Float = src.r1c3;\r\n        var a20:Float = src.r2c0, a21:Float = src.r2c1, a22:Float = src.r2c2, a23:Float = src.r2c3;\r\n        var a30:Float = src.r3c0, a31:Float = src.r3c1, a32:Float = src.r3c2, a33:Float = src.r3c3;\r\n\r\n        var t00:Float = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;\r\n        var t01:Float = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;\r\n        var t02:Float = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;\r\n        var t03:Float = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;\r\n\r\n        var det:Float = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;\r\n        if (Math.abs(det) <= glm.GLM.EPSILON) {\r\n            throw 'Can\\'t invert matrix, det (${det}) is too small!';\r\n        }\r\n        var idet:Float = 1 / det;\r\n\r\n        dest.r0c0 = t00 * idet;\r\n        dest.r1c0 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;\r\n        dest.r2c0 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;\r\n        dest.r3c0 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;\r\n\r\n        dest.r0c1 = t01 * idet;\r\n        dest.r1c1 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;\r\n        dest.r2c1 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;\r\n        dest.r3c1 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;\r\n\r\n        dest.r0c2 = t02 * idet;\r\n        dest.r1c2 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;\r\n        dest.r2c2 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;\r\n        dest.r3c2 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;\r\n\r\n        dest.r0c3 = t03 * idet;\r\n        dest.r1c3 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;\r\n        dest.r2c3 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;\r\n        dest.r3c3 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Multiplies two matrices together, storing the result in `dest`. Caches `a` and `b` so `a == dest` and `b == dest` are valid.\r\n      @param a The left-hand matrix\r\n      @param b The right-hand matrix\r\n      @param dest The matrix to store the result in\r\n      @return Mat4\r\n     */\r\n    public inline static function multMat(a:Mat4, b:Mat4, dest:Mat4):Mat4 {\r\n        // cache what we need to do the calculations\r\n        var _a:Mat4;\r\n        var _b:Mat4;\r\n        if(dest == a) {\r\n            _a = Mat4.copy(a, new Mat4());\r\n            _b = b;\r\n        }\r\n        else if(dest == b) {\r\n            _a = a;\r\n            _b = Mat4.copy(b, new Mat4());\r\n        }\r\n        else {\r\n            _a = a;\r\n            _b = b;\r\n        }\r\n\r\n        dest.r0c0 = _a.r0c0*_b.r0c0 + _a.r0c1*_b.r1c0 + _a.r0c2*_b.r2c0 + _a.r0c3*_b.r3c0;\r\n        dest.r0c1 = _a.r0c0*_b.r0c1 + _a.r0c1*_b.r1c1 + _a.r0c2*_b.r2c1 + _a.r0c3*_b.r3c1;\r\n        dest.r0c2 = _a.r0c0*_b.r0c2 + _a.r0c1*_b.r1c2 + _a.r0c2*_b.r2c2 + _a.r0c3*_b.r3c2;\r\n        dest.r0c3 = _a.r0c0*_b.r0c3 + _a.r0c1*_b.r1c3 + _a.r0c2*_b.r2c3 + _a.r0c3*_b.r3c3;\r\n\r\n        dest.r1c0 = _a.r1c0*_b.r0c0 + _a.r1c1*_b.r1c0 + _a.r1c2*_b.r2c0 + _a.r1c3*_b.r3c0;\r\n        dest.r1c1 = _a.r1c0*_b.r0c1 + _a.r1c1*_b.r1c1 + _a.r1c2*_b.r2c1 + _a.r1c3*_b.r3c1;\r\n        dest.r1c2 = _a.r1c0*_b.r0c2 + _a.r1c1*_b.r1c2 + _a.r1c2*_b.r2c2 + _a.r1c3*_b.r3c2;\r\n        dest.r1c3 = _a.r1c0*_b.r0c3 + _a.r1c1*_b.r1c3 + _a.r1c2*_b.r2c3 + _a.r1c3*_b.r3c3;\r\n\r\n        dest.r2c0 = _a.r2c0*_b.r0c0 + _a.r2c1*_b.r1c0 + _a.r2c2*_b.r2c0 + _a.r2c3*_b.r3c0;\r\n        dest.r2c1 = _a.r2c0*_b.r0c1 + _a.r2c1*_b.r1c1 + _a.r2c2*_b.r2c1 + _a.r2c3*_b.r3c1;\r\n        dest.r2c2 = _a.r2c0*_b.r0c2 + _a.r2c1*_b.r1c2 + _a.r2c2*_b.r2c2 + _a.r2c3*_b.r3c2;\r\n        dest.r2c3 = _a.r2c0*_b.r0c3 + _a.r2c1*_b.r1c3 + _a.r2c2*_b.r2c3 + _a.r2c3*_b.r3c3;\r\n\r\n        dest.r3c0 = _a.r3c0*_b.r0c0 + _a.r3c1*_b.r1c0 + _a.r3c2*_b.r2c0 + _a.r3c3*_b.r3c0;\r\n        dest.r3c1 = _a.r3c0*_b.r0c1 + _a.r3c1*_b.r1c1 + _a.r3c2*_b.r2c1 + _a.r3c3*_b.r3c1;\r\n        dest.r3c2 = _a.r3c0*_b.r0c2 + _a.r3c1*_b.r1c2 + _a.r3c2*_b.r2c2 + _a.r3c3*_b.r3c2;\r\n        dest.r3c3 = _a.r3c0*_b.r0c3 + _a.r3c1*_b.r1c3 + _a.r3c2*_b.r2c3 + _a.r3c3*_b.r3c3;\r\n        \r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `multMat(a, b, new Mat4())`\r\n      @param a \r\n      @param b \r\n      @return Mat4\r\n     */\r\n    @:op(A * B)\r\n    inline static function multMatOp(a:Mat4, b:Mat4):Mat4 {\r\n        return multMat(a, b, new Mat4());\r\n    }\r\n\r\n    /**\r\n      Multiplies a vector `v` by a matrix `m`, storing the result in `dest`. Caches so `v == dest` is valid.\r\n      @param m The transforming matrix\r\n      @param v The vector to multiply with\r\n      @param dest The resulting vector\r\n      @return Vec4\r\n     */\r\n    public inline static function multVec(m:Mat4, v:Vec4, dest:Vec4):Vec4 {\r\n        var x:Float = v.x, y:Float = v.y, z:Float = v.z, w:Float = v.w;\r\n        dest.x = m.r0c0*x + m.r0c1*y + m.r0c2*z + m.r0c3*w;\r\n        dest.y = m.r1c0*x + m.r1c1*y + m.r1c2*z + m.r1c3*w;\r\n        dest.z = m.r2c0*x + m.r2c1*y + m.r2c2*z + m.r2c3*w;\r\n        dest.w = m.r3c0*x + m.r3c1*y + m.r3c2*z + m.r3c3*w;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut for `multVec(m, v, new Vec4())`\r\n      @param m \r\n      @param v \r\n      @return Vec4\r\n     */\r\n    @:op(A * B)\r\n    inline static function multVecOp(m:Mat4, v:Vec4):Vec4 {\r\n        return multVec(m, v, new Vec4());\r\n    }\r\n\r\n    /**\r\n      Construct a Mat4 from an array of floats in column-major order\r\n      @param arr an array with 16 elements\r\n      @return Mat4\r\n     */\r\n    @:from\r\n    public inline static function fromFloatArray(arr:Array<Float>):Mat4 {\r\n        return new Mat4(\r\n            arr[ 0], arr[ 4], arr[ 8], arr[12],\r\n            arr[ 1], arr[ 5], arr[ 9], arr[13],\r\n            arr[ 2], arr[ 6], arr[10], arr[14],\r\n            arr[ 3], arr[ 7], arr[11], arr[15]\r\n        );\r\n    }\r\n\r\n    //Row-major order is used in C/C++/\r\n\r\n    /**\r\n      Cast the matrix in an array of floats, in column-major order\r\n      @return Array<Float>\r\n     */\r\n    @:to\r\n    public inline function toFloatArray():Array<Float> {\r\n        return [\r\n            r0c0, r1c0, r2c0, r3c0,\r\n            r0c1, r1c1, r2c1, r3c1,\r\n            r0c2, r1c2, r2c2, r3c2,\r\n            r0c3, r1c3, r2c3, r3c3\r\n        ];\r\n    }\r\n\r\n    // OpenGL are stored in column major order\r\n\r\n\r\n   // 向量写为[1x3]矩阵形式： ，被称为行主序(Row Major)。\r\n    //向量写为[3x1]矩阵形式:，被称为列主序(Column Major)。\r\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class Reflect {\n\n\t@:pure\n\tpublic inline static function hasField( o : Dynamic, field : String ) : Bool {\n\t\treturn js.Object.prototype.hasOwnProperty.call(o, field);\n\t}\n\n\t@:pure\n\tpublic static function field( o : Dynamic, field : String ) : Dynamic {\n\t\ttry return o[cast field] catch( e : Dynamic ) return null;\n\t}\n\n\tpublic inline static function setField( o : Dynamic, field : String, value : Dynamic ) : Void {\n\t\to[cast field] = value;\n\t}\n\n\tpublic static function getProperty( o : Dynamic, field : String ) : Dynamic untyped {\n\t\tvar tmp;\n\t\treturn if( o == null ) __define_feature__(\"Reflect.getProperty\",null) else if( o.__properties__ && (tmp=o.__properties__[\"get_\"+field]) ) o[tmp]() else o[field];\n\t}\n\n\tpublic static function setProperty( o : Dynamic, field : String, value : Dynamic ) : Void untyped {\n\t\tvar tmp;\n\t\tif( o.__properties__ && (tmp=o.__properties__[\"set_\"+field]) ) o[tmp](value) else o[field] = __define_feature__(\"Reflect.setProperty\",value);\n\t}\n\n\tpublic inline static function callMethod( o : Dynamic, func : haxe.Constraints.Function, args : Array<Dynamic> ) : Dynamic {\n\t\treturn (cast func : js.Function).apply(o,args);\n\t}\n\n\tpublic static function fields( o : Dynamic ) : Array<String> {\n\t\tvar a = [];\n\t\tif (o != null) untyped {\n\t\t\tvar hasOwnProperty = js.Object.prototype.hasOwnProperty;\n\t\t\t__js__(\"for( var f in o ) {\");\n\t\t\tif( f != \"__id__\" && f != \"hx__closures__\" && hasOwnProperty.call(o, f) ) a.push(f);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a;\n\t}\n\n\t@:access(js.Boot)\n\tpublic static function isFunction( f : Dynamic ) : Bool {\n\t\treturn js.Syntax.typeof(f) == \"function\" && !(js.Boot.isClass(f) || js.Boot.isEnum(f));\n\t}\n\n\tpublic static function compare<T>( a : T, b : T ) : Int {\n\t\treturn ( a == b ) ? 0 : (((cast a) > (cast b)) ? 1 : -1);\n\t}\n\n\tpublic static function compareMethods( f1 : Dynamic, f2 : Dynamic ) : Bool {\n\t\tif( f1 == f2 )\n\t\t\treturn true;\n\t\tif( !isFunction(f1) || !isFunction(f2) )\n\t\t\treturn false;\n\t\treturn f1.scope == f2.scope && f1.method == f2.method && f1.method != null;\n\t}\n\n\t@:access(js.Boot)\n\tpublic static function isObject( v : Dynamic ) : Bool {\n\t\tif( v == null )\n\t\t\treturn false;\n\t\tvar t = js.Syntax.typeof(v);\n\t\treturn (t == \"string\" || (t == \"object\" && v.__enum__ == null)) || (t == \"function\" && (js.Boot.isClass(v) || js.Boot.isEnum(v)) != null);\n\t}\n\n\tpublic static function isEnumValue( v : Dynamic ) : Bool {\n\t\treturn v != null && v.__enum__ != null;\n\t}\n\n\tpublic static function deleteField( o : Dynamic, field : String ) : Bool {\n\t\tif( !hasField(o,field) ) return false;\n\t\tjs.Syntax.delete(o, field);\n\t\treturn true;\n\t}\n\n\tpublic static function copy<T>( o : T ) : T {\n\t\tvar o2 : Dynamic = {};\n\t\tfor( f in Reflect.fields(o) )\n\t\t\tReflect.setField(o2,f,Reflect.field(o,f));\n\t\treturn o2;\n\t}\n\n\t@:overload(function( f : Array<Dynamic> -> Void ) : Dynamic {})\n\tpublic static function makeVarArgs( f : Array<Dynamic> -> Dynamic ) : Dynamic {\n\t\treturn function() {\n\t\t\tvar a = untyped Array.prototype.slice.call(__js__(\"arguments\"));\n\t\t\treturn f(a);\n\t\t};\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport js.Boot;\n\n@:keepInit\n@:coreApi class Std {\n\n\tpublic static inline function is( v : Dynamic, t : Dynamic ) : Bool {\n\t\treturn @:privateAccess js.Boot.__instanceof(v,t);\n\t}\n\n\tpublic static inline function instance<T:{},S:T>( value : T, c : Class<S> ) : S {\n\t\treturn js.Syntax.instanceof(value, c) ? cast value : null;\n\t}\n\n\t@:pure\n\tpublic static function string( s : Dynamic ) : String {\n\t\treturn @:privateAccess js.Boot.__string_rec(s,\"\");\n\t}\n\n\tpublic static inline function int( x : Float ) : Int {\n\t\treturn (cast x) | 0;\n\t}\n\n\t@:pure\n\tpublic static function parseInt( x : String ) : Null<Int> {\n\t\tvar v = untyped __js__('parseInt({0}, {0} && {0}[0]==\"0\" && ({0}[1]==\"x\" || {0}[1]==\"X\") ? 16 : 10)', x);\n\t\tif( untyped __js__(\"isNaN\")(v) )\n\t\t\treturn null;\n\t\treturn cast v;\n\t}\n\n\tpublic static inline function parseFloat( x : String ) : Float {\n\t\treturn untyped __js__(\"parseFloat\")(x);\n\t}\n\n\tpublic static function random( x : Int ) : Int {\n\t\treturn x <= 0 ? 0 : Math.floor(Math.random()*x);\n\t}\n\n\tstatic function __init__() : Void untyped {\n\t\t__feature__(\"js.Boot.getClass\",String.prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"String\"] = String,String));\n\t\t__feature__(\"js.Boot.isClass\",String.__name__ = __feature__(\"Type.getClassName\",\"String\",true));\n\t\t__feature__(\"Type.resolveClass\",$hxClasses[\"Array\"] = Array);\n\t\t__feature__(\"js.Boot.isClass\",Array.__name__ = __feature__(\"Type.getClassName\",\"Array\",true));\n\t\t__feature__(\"Date.*\", {\n\t\t\t__feature__(\"js.Boot.getClass\",__js__('Date').prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"Date\"] = __js__('Date'),__js__('Date')));\n\t\t\t__feature__(\"js.Boot.isClass\",__js__('Date').__name__ = \"Date\");\n\t\t});\n\t\t__feature__(\"Int.*\",__js__('var Int = { };'));\n\t\t__feature__(\"Dynamic.*\",__js__('var Dynamic = { };'));\n\t\t__feature__(\"Float.*\",__js__('var Float = Number'));\n\t\t__feature__(\"Bool.*\",__js__('var Bool = Boolean'));\n\t\t__feature__(\"Class.*\",__js__('var Class = { };'));\n\t\t__feature__(\"Enum.*\",__js__('var Enum = { };'));\n\n#if (js_es < 5)\n\t\t__feature__(\"Array.map\",\n\t\t\tif( Array.prototype.map == null )\n\t\t\t\tArray.prototype.map = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length )\n\t\t\t\t\t\ta[i] = f(__this__[i]);\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n\t\t__feature__(\"Array.filter\",\n\t\t\tif( Array.prototype.filter == null )\n\t\t\t\tArray.prototype.filter = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length ) {\n\t\t\t\t\t\tvar e = __this__[i];\n\t\t\t\t\t\tif( f(e) ) a.push(e);\n\t\t\t\t\t}\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tA String buffer is an efficient way to build a big string by appending small\n\telements together.\n\n\tIts cross-platform implementation uses String concatenation internally, but\n\tStringBuf may be optimized for different targets.\n\n\tUnlike String, an instance of StringBuf is not immutable in the sense that\n\tit can be passed as argument to functions which modify it by appending more\n\tvalues. However, the internal buffer cannot be modified.\n**/\nclass StringBuf {\n\n\tvar b:String;\n\n\t/**\n\t\tThe length of `this` StringBuf in characters.\n\t**/\n\tpublic var length(get,never) : Int;\n\n\t/**\n\t\tCreates a new StringBuf instance.\n\n\t\tThis may involve initialization of the internal buffer.\n\t**/\n\tpublic inline function new() {\n\t\tb = \"\";\n\t}\n\n\tinline function get_length() : Int {\n\t\treturn b.length;\n\t}\n\n\t/**\n\t\tAppends the representation of `x` to `this` StringBuf.\n\n\t\tThe exact representation of `x` may vary per platform. To get more\n\t\tconsistent behavior, this function should be called with\n\t\tStd.string(x).\n\n\t\tIf `x` is null, the String \"null\" is appended.\n\t**/\n\tpublic inline function add<T>( x : T ) : Void {\n\t\tb += x;\n\t}\n\n\t/**\n\t\tAppends the character identified by `c` to `this` StringBuf.\n\n\t\tIf `c` is negative or has another invalid value, the result is\n\t\tunspecified.\n\t**/\n\tpublic inline function addChar( c : Int ) : Void {\n\t\tb += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tAppends a substring of `s` to `this` StringBuf.\n\n\t\tThis function expects `pos` and `len` to describe a valid substring of\n\t\t`s`, or else the result is unspecified. To get more robust behavior,\n\t\t`this.add(s.substr(pos,len))` can be used instead.\n\n\t\tIf `s` or `pos` are null, the result is unspecified.\n\n\t\tIf `len` is omitted or null, the substring ranges from `pos` to the end\n\t\tof `s`.\n\t**/\n\tpublic inline function addSub( s : String, pos : Int, ?len : Int) : Void {\n\t\tb += (len == null ? s.substr(pos) : s.substr(pos, len));\n\t}\n\n\t/**\n\t\tReturns the content of `this` StringBuf as String.\n\n\t\tThe buffer is not emptied by this operation.\n\t**/\n\tpublic inline function toString() : String {\n\t\treturn b;\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tThis class provides advanced methods on Strings. It is ideally used with\n\t`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)\n\tto the `String` class.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n**/\n#if cpp\nusing cpp.NativeString;\n#end\nclass StringTools {\n\t/**\n\t\tEncode an URL by using the standard format.\n\t**/\n\t#if (!java && !cpp && !lua && !eval) inline #end public static function urlEncode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"encodeURIComponent\"](s);\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlEncode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped encodeURIComponent(s);\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLEncode();\n\t\t#elseif java\n\t\t\treturn postProcessUrlEncode(java.net.URLEncoder.encode(s, \"UTF-8\"));\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.EscapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.quote(s, \"\");\n\t\t#elseif hl\n\t\t\tvar len = 0;\n\t\t\tvar b = @:privateAccess s.bytes.urlEncode(len);\n\t\t\treturn @:privateAccess String.__alloc__(b,len);\n\t\t#elseif lua\n\t\t\ts = lua.NativeStringTools.gsub(s, \"\\n\", \"\\r\\n\");\n\t\t\ts = lua.NativeStringTools.gsub(s, \"([^%w %-%_%.%~])\", function (c) {\n\t\t\t\treturn lua.NativeStringTools.format(\"%%%02X\", lua.NativeStringTools.byte(c) + '');\n\t\t\t});\n\t\t\ts = lua.NativeStringTools.gsub(s, \" \", \"+\");\n\t\t\treturn s;\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n#if java\n\tprivate static function postProcessUrlEncode( s : String ) : String {\n\t\tvar ret = new StringBuf();\n\t\tvar i = 0,\n\t\t    len = s.length;\n\t\twhile (i < len) {\n\t\t\tswitch(_charAt(s, i++)) {\n\t\t\tcase '+'.code:\n\t\t\t\tret.add('%20');\n\t\t\tcase '%'.code if (i <= len - 2):\n\t\t\t\tvar c1 = _charAt(s, i++),\n\t\t\t\t    c2 = _charAt(s, i++);\n\t\t\t\tswitch[c1, c2] {\n\t\t\t\tcase ['2'.code, '1'.code]:\n\t\t\t\t\tret.addChar('!'.code);\n\t\t\t\tcase ['2'.code, '7'.code]:\n\t\t\t\t\tret.addChar('\\''.code);\n\t\t\t\tcase ['2'.code, '8'.code]:\n\t\t\t\t\tret.addChar('('.code);\n\t\t\t\tcase ['2'.code, '9'.code]:\n\t\t\t\t\tret.addChar(')'.code);\n\t\t\t\tcase ['7'.code, 'E'.code] | ['7'.code, 'e'.code]:\n\t\t\t\t\tret.addChar('~'.code);\n\t\t\t\tcase _:\n\t\t\t\t\tret.addChar('%'.code);\n\t\t\t\t\tret.addChar(cast c1);\n\t\t\t\t\tret.addChar(cast c2);\n\t\t\t\t}\n\t\t\tcase var chr:\n\t\t\t\tret.addChar(cast chr);\n\t\t\t}\n\t\t}\n\t\treturn ret.toString();\n\t}\n#end\n\n\t/**\n\t\tDecode an URL using the standard format.\n\t**/\n\t#if (!java && !cpp && !lua && !eval) inline #end public static function urlDecode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"decodeURIComponent\"](s.split(\"+\").join(\" \"));\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlDecode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped decodeURIComponent(s.split(\"+\").join(\" \"));\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLDecode();\n\t\t#elseif java\n\t\t\ttry\n\t\t\t\treturn untyped __java__(\"java.net.URLDecoder.decode(s, \\\"UTF-8\\\")\")\n\t\t\tcatch (e:Dynamic) throw e;\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.UnescapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.unquote(s);\n\t\t#elseif hl\n\t\t\tvar len = 0;\n\t\t\tvar b = @:privateAccess s.bytes.urlDecode(len);\n\t\t\treturn @:privateAccess String.__alloc__(b,len);\n\t\t#elseif lua\n\t\t\ts = lua.NativeStringTools.gsub (s, \"+\", \" \");\n\t\t\ts = lua.NativeStringTools.gsub (s, \"%%(%x%x)\",\n\t\t\t\tfunction(h) {return lua.NativeStringTools.char(lua.Lua.tonumber(h,16));});\n\t\t\ts = lua.NativeStringTools.gsub (s, \"\\r\\n\", \"\\n\");\n\t\t\treturn s;\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n\t/**\n\t\tEscapes HTML special characters of the string `s`.\n\n\t\tThe following replacements are made:\n\n\t\t- `&` becomes `&amp`;\n\t\t- `<` becomes `&lt`;\n\t\t- `>` becomes `&gt`;\n\n\t\tIf `quotes` is true, the following characters are also replaced:\n\n\t\t- `\"` becomes `&quot`;\n\t\t- `'` becomes `&#039`;\n\t**/\n\tpublic static function htmlEscape( s : String, ?quotes : Bool ) : String {\n\t\tvar buf = new StringBuf();\n\t\tfor (code in new haxe.iterators.StringIteratorUnicode(s)) {\n\t\t\tswitch (code) {\n\t\t\t\tcase '&'.code: buf.add(\"&amp;\");\n\t\t\t\tcase '<'.code: buf.add(\"&lt;\");\n\t\t\t\tcase '>'.code: buf.add(\"&gt;\");\n\t\t\t\tcase '\"'.code if (quotes): buf.add(\"&quot;\");\n\t\t\t\tcase '\\''.code if (quotes): buf.add(\"&#039;\");\n\t\t\t\tcase _: buf.addChar(code);\n\t\t\t}\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n\t/**\n\t\tUnescapes HTML special characters of the string `s`.\n\n\t\tThis is the inverse operation to htmlEscape, i.e. the following always\n\t\tholds: `htmlUnescape(htmlEscape(s)) == s`\n\n\t\tThe replacements follow:\n\n\t\t- `&amp;` becomes `&`\n\t\t- `&lt;` becomes `<`\n\t\t- `&gt;` becomes `>`\n\t\t- `&quot;` becomes `\"`\n\t\t- `&#039;` becomes `'`\n\t**/\n\tpublic static function htmlUnescape( s : String ) : String {\n\t\treturn s.split(\"&gt;\").join(\">\").split(\"&lt;\").join(\"<\").split(\"&quot;\").join('\"').split(\"&#039;\").join(\"'\").split(\"&amp;\").join(\"&\");\n\t}\n\n\t/**\n\t\tTells if the string `s` starts with the string `start`.\n\n\t\tIf `start` is `null`, the result is unspecified.\n\n\t\tIf `start` is the empty String `\"\"`, the result is true.\n\t**/\n\tpublic static #if (cs || java || python) inline #end function startsWith( s : String, start : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.startsWith(start);\n\t\t#elseif cs\n\t\treturn untyped s.StartsWith(start);\n\t\t#elseif cpp\n\t\tif (s.length<start.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str();\n\t\tvar p1 = start.c_str();\n\t\tfor(i in 0...start.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#elseif hl\n\t\treturn @:privateAccess (s.length >= start.length && s.bytes.compare(0,start.bytes,0,start.length<<1) == 0);\n\t\t#elseif python\n\t\treturn python.NativeStringTools.startswith(s, start);\n\t\t#else\n\t\treturn( s.length >= start.length && s.substr(0, start.length) == start );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the string `s` ends with the string `end`.\n\n\t\tIf `end` is `null`, the result is unspecified.\n\n\t\tIf `end` is the empty String `\"\"`, the result is true.\n\t**/\n\tpublic static #if (cs || java || python) inline #end function endsWith( s : String, end : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.endsWith(end);\n\t\t#elseif cs\n\t\treturn untyped s.EndsWith(end);\n\t\t#elseif cpp\n\t\tif (s.length<end.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str().add( s.length-end.length );\n\t\tvar p1 = end.c_str();\n\t\tfor(i in 0...end.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#elseif hl\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn @:privateAccess (slen >= elen && s.bytes.compare((slen - elen) << 1, end.bytes, 0, elen << 1) == 0);\n\t\t#elseif python\n\t\treturn python.NativeStringTools.endswith(s, end);\n\t\t#else\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn( slen >= elen && s.substr(slen - elen, elen) == end );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the character in the string `s` at position `pos` is a space.\n\n\t\tA character is considered to be a space character if its character code\n\t\tis 9,10,11,12,13 or 32.\n\n\t\tIf `s` is the empty String `\"\"`, or if pos is not a valid position within\n\t\t`s`, the result is false.\n\t**/\n\tpublic static function isSpace( s : String, pos : Int ) : Bool {\n\t\t#if (python || lua)\n\t\tif (s.length == 0 || pos < 0 || pos >= s.length) return false;\n\t\t#end\n\t\tvar c = s.charCodeAt( pos );\n\t\treturn (c > 8 && c < 14) || c == 32;\n\t}\n\n\t/**\n\t\tRemoves leading space characters of `s`.\n\n\t\tThis function internally calls `isSpace()` to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String `\"\"` or consists only of space characters, the\n\t\tresult is the empty String `\"\"`.\n\t**/\n\tpublic #if cs inline #end static function ltrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimStart();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,r) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 )\n\t\t\treturn s.substr(r, l-r);\n\t\telse\n\t\t\treturn s;\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves trailing space characters of `s`.\n\n\t\tThis function internally calls `isSpace()` to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String `\"\"` or consists only of space characters, the\n\t\tresult is the empty String `\"\"`.\n\t**/\n\tpublic #if cs inline #end static function rtrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimEnd();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,l-r-1) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 ){\n\t\t\treturn s.substr(0, l-r);\n\t\t}else{\n\t\t\treturn s;\n\t\t}\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves leading and trailing space characters of `s`.\n\n\t\tThis is a convenience function for `ltrim(rtrim(s))`.\n\t**/\n\tpublic #if (cs || java) inline #end static function trim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.Trim();\n\t\t#elseif java\n\t\treturn untyped s.trim();\n\t\t#else\n\t\treturn ltrim(rtrim(s));\n\t\t#end\n\t}\n\n\t/**\n\t\tConcatenates `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function lpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\tvar buf = new StringBuf();\n\t\tl -= s.length;\n\t\twhile (buf.length < l) {\n\t\t\tbuf.add(c);\n\t\t}\n\t\tbuf.add(s);\n\t\treturn buf.toString();\n\t}\n\n\t/**\n\t\tAppends `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function rpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\tvar buf = new StringBuf();\n\t\tbuf.add(s);\n\t\twhile (buf.length < l) {\n\t\t\tbuf.add(c);\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n\t/**\n\t\tReplace all occurrences of the String `sub` in the String `s` by the\n\t\tString `by`.\n\n\t\tIf `sub` is the empty String `\"\"`, `by` is inserted after each character\n\t\tof `s` except the last one. If `by` is also the empty String `\"\"`, `s`\n\t\tremains unchanged.\n\n\t\tIf `sub` or `by` are null, the result is unspecified.\n\t**/\n\tpublic static function replace( s : String, sub : String, by : String ) : String {\n\t\t#if java\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.replace(sub, by);\n\t\t#elseif cs\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.Replace(sub, by);\n\t\t#else\n\t\treturn s.split(sub).join(by);\n\t\t#end\n\t}\n\n\t/**\n\t\tEncodes `n` into a hexadecimal representation.\n\n\t\tIf `digits` is specified, the resulting String is padded with \"0\" until\n\t\tits `length` equals `digits`.\n\t**/\n\tpublic static function hex( n : Int, ?digits : Int ) {\n\t\t#if flash\n\t\t\tvar n : UInt = n;\n\t\t\tvar s : String = untyped n.toString(16);\n\t\t\ts = s.toUpperCase();\n\t\t#else\n\t\t\tvar s = \"\";\n\t\t\tvar hexChars = \"0123456789ABCDEF\";\n\t\t\tdo {\n\t\t\t\ts = hexChars.charAt(n&15) + s;\n\t\t\t\tn >>>= 4;\n\t\t\t} while( n > 0 );\n\t\t#end\n\t\t#if python\n\t\tif (digits != null && s.length < digits) {\n\t\t\tvar diff = digits - s.length;\n\t\t\tfor (_ in 0...diff) {\n\t\t\t\ts = \"0\" + s;\n\t\t\t}\n\t\t}\n\t\t#else\n\t\tif( digits != null )\n\t\t\twhile( s.length < digits )\n\t\t\t\ts = \"0\"+s;\n\t\t#end\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReturns the character code at position `index` of String `s`, or an\n\t\tend-of-file indicator at if `position` equals `s.length`.\n\n\t\tThis method is faster than `String.charCodeAt()` on some platforms, but\n\t\tthe result is unspecified if `index` is negative or greater than\n\t\t`s.length`.\n\n\t\tEnd of file status can be checked by calling `StringTools.isEof()` with\n\t\tthe returned value as argument.\n\n\t\tThis operation is not guaranteed to work if `s` contains the `\\0`\n\t\tcharacter.\n\t**/\n\tpublic static #if !eval inline #end function fastCodeAt( s : String, index : Int ) : Int {\n\t\t#if neko\n\t\treturn untyped __dollar__sget(s.__s, index);\n\t\t#elseif cpp\n\t\treturn untyped s.cca(index);\n\t\t#elseif flash\n\t\treturn untyped s.cca(index);\n\t\t#elseif java\n\t\treturn ( index < s.length ) ? cast(_charAt(s, index), Int) : -1;\n\t\t#elseif cs\n\t\treturn ( cast(index, UInt) < s.length ) ? cast(s[index], Int) : -1;\n\t\t#elseif js\n\t\treturn (cast s).charCodeAt(index);\n\t\t#elseif python\n\t\treturn if (index >= s.length) -1 else python.internal.UBuiltins.ord(python.Syntax.arrayAccess(s, index));\n\t\t#elseif hl\n\t\treturn @:privateAccess s.bytes.getUI16(index << 1);\n\t\t#elseif lua\n\t\t\t#if lua_vanilla\n\t\t\treturn lua.NativeStringTools.byte(s,index+1);\n\t\t\t#else\n\t\t\treturn lua.lib.luautf8.Utf8.byte(s,index+1);\n\t\t\t#end\n\t\t#else\n\t\treturn untyped s.cca(index);\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if `c` represents the end-of-file (EOF) character.\n\t**/\n\t@:noUsing public static inline function isEof( c : Int ) : Bool {\n\t\t#if (flash || cpp || hl)\n\t\treturn c == 0;\n\t\t#elseif js\n\t\treturn c != c; // fast NaN\n\t\t#elseif (neko || lua || eval)\n\t\treturn c == null;\n\t\t#elseif cs\n\t\treturn c == -1;\n\t\t#elseif java\n\t\treturn c == -1;\n\t\t#elseif python\n\t\treturn c == -1;\n\t\t#else\n\t\treturn false;\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns a String that can be used as a single command line argument\n\t\ton Unix.\n\t\tThe input will be quoted, or escaped if necessary.\n\t**/\n\tpublic static function quoteUnixArg(argument:String):String {\n\t\t// Based on cpython's shlex.quote().\n\t\t// https://hg.python.org/cpython/file/a3f076d4f54f/Lib/shlex.py#l278\n\n\t\tif (argument == \"\")\n\t\t\treturn \"''\";\n\n\t\tif (!~/[^a-zA-Z0-9_@%+=:,.\\/-]/.match(argument))\n\t\t\treturn argument;\n\n\t\t// use single quotes, and put single quotes into double quotes\n\t\t// the string $'b is then quoted as '$'\"'\"'b'\n\t\treturn \"'\" + replace(argument, \"'\", \"'\\\"'\\\"'\") + \"'\";\n\t}\n\n\t/**\n\t\tCharacter codes of the characters that will be escaped by `quoteWinArg(_, true)`.\n\t**/\n\tpublic static var winMetaCharacters = [\" \".code, \"(\".code, \")\".code, \"%\".code, \"!\".code, \"^\".code, \"\\\"\".code, \"<\".code, \">\".code, \"&\".code, \"|\".code, \"\\n\".code, \"\\r\".code, \",\".code, \";\".code];\n\n\t/**\n\t\tReturns a String that can be used as a single command line argument\n\t\ton Windows.\n\t\tThe input will be quoted, or escaped if necessary, such that the output\n\t\twill be parsed as a single argument using the rule specified in\n\t\thttp://msdn.microsoft.com/en-us/library/ms880421\n\n\t\tExamples:\n\t\t```haxe\n\t\tquoteWinArg(\"abc\") == \"abc\";\n\t\tquoteWinArg(\"ab c\") == '\"ab c\"';\n\t\t```\n\t**/\n\tpublic static function quoteWinArg(argument:String, escapeMetaCharacters:Bool):String {\n\t\t// If there is no space, tab, back-slash, or double-quotes, and it is not an empty string.\n\t\tif (!~/^[^ \\t\\\\\"]+$/.match(argument)) {\n\n\t\t\t// Based on cpython's subprocess.list2cmdline().\n\t\t\t// https://hg.python.org/cpython/file/50741316dd3a/Lib/subprocess.py#l620\n\n\t\t\tvar result = new StringBuf();\n\t\t\tvar needquote = argument.indexOf(\" \") != -1 || argument.indexOf(\"\\t\") != -1 || argument == \"\";\n\n\t\t\tif (needquote)\n\t\t\t\tresult.add('\"');\n\n\t\t\tvar bs_buf = new StringBuf();\n\t\t\tfor (i in 0...argument.length) {\n\t\t\t\tswitch (argument.charCodeAt(i)) {\n\t\t\t\t\tcase \"\\\\\".code:\n\t\t\t\t\t\t// Don't know if we need to double yet.\n\t\t\t\t\t\tbs_buf.add(\"\\\\\");\n\t\t\t\t\tcase '\"'.code:\n\t\t\t\t\t\t// Double backslashes.\n\t\t\t\t\t\tvar bs = bs_buf.toString();\n\t\t\t\t\t\tresult.add(bs);\n\t\t\t\t\t\tresult.add(bs);\n\t\t\t\t\t\tbs_buf = new StringBuf();\n\t\t\t\t\t\tresult.add('\\\\\"');\n\t\t\t\t\tcase var c:\n\t\t\t\t\t\t// Normal char\n\t\t\t\t\t\tif (bs_buf.length > 0) {\n\t\t\t\t\t\t\tresult.add(bs_buf.toString());\n\t\t\t\t\t\t\tbs_buf = new StringBuf();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.addChar(c);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add remaining backslashes, if any.\n\t\t\tresult.add(bs_buf.toString());\n\n\t\t\tif (needquote) {\n\t\t\t\tresult.add(bs_buf.toString());\n\t\t\t\tresult.add('\"');\n\t\t\t}\n\n\t\t\targument = result.toString();\n\t\t}\n\n\t\tif (escapeMetaCharacters) {\n\t\t\tvar result = new StringBuf();\n\t\t\tfor (i in 0...argument.length) {\n\t\t\t\tvar c = argument.charCodeAt(i);\n\t\t\t\tif (winMetaCharacters.indexOf(c) >= 0) {\n\t\t\t\t\tresult.addChar(\"^\".code);\n\t\t\t\t}\n\t\t\t\tresult.addChar(c);\n\t\t\t}\n\t\t\treturn result.toString();\n\t\t} else {\n\t\t\treturn argument;\n\t\t}\n\t}\n\n\t#if java\n\tprivate static inline function _charAt(str:String, idx:Int):java.StdTypes.Char16 return untyped str._charAt(idx);\n\t#end\n\n\t#if neko\n\tprivate static var _urlEncode = neko.Lib.load(\"std\",\"url_encode\",1);\n\tprivate static var _urlDecode = neko.Lib.load(\"std\",\"url_decode\",1);\n\t#end\n\n}\n","package assimp;\r\nimport assimp.format.Mesh.AiAnimMesh;\r\nimport assimp.format.Mesh.AiMesh;\r\nclass Assimp {\r\n\r\n    static public var DEBUG = true;\r\n\r\n    static public var BLENDER_DEBUG = false;\r\n\r\n    static public var BLENDER_NO_STATS = false;\r\n    static public var NO = new No();\r\n    static public var PROCESS = new Process();\r\n    static public var AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE = \"PP_GSN_MAX_SMOOTHING_ANGLE\";\r\n    static public var AI_CONFIG_PP_RVC_FLAGS = \"PP_RVC_FLAGS\";\r\n    static public var AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS = \"IMPORT_FBX_PRESERVE_PIVOTS\";\r\n\r\n/**\r\n * Created by elect on 31/01/2017.\r\n */\r\n\r\n    static public function aiCreateAnimMesh(mesh:AiMesh):AiAnimMesh {\r\n\r\n        var animesh = new AiAnimMesh();\r\n        animesh.mVertices = mesh.vertices;\r\n        animesh.mNormals = mesh.normals;\r\n        animesh.mTangents = mesh.tangents;\r\n        animesh.mBitangents = mesh.bitangents;\r\n        animesh.mNumVertices = mesh.numVertices;\r\n\r\n        animesh.mColors = mesh.colors.copy();\r\n\r\n        animesh.mTextureCoords = mesh.textureCoords.copy();\r\n        return animesh;\r\n    }\r\n\r\n    public function new() {\r\n    }\r\n}\r\n\r\nclass Process {\r\n    public function new() {\r\n\r\n    }\r\n\r\n    public var MAKELEFTHANDED:Bool;\r\n    public var FLIPUVS:Bool;\r\n    public var FLIPWINDINGORDER:Bool;\r\n    public var REMOVEVC:Bool;\r\n    public var REMOVE_REDUNDANTMATERIALS:Bool;\r\n    public var EMBEDTEXTURES:Bool;\r\n    public var FINDINSTANCES:Bool;\r\n    public var OPTIMIZEGRAPH:Bool;\r\n    public var FINDDEGENERATES:Bool;\r\n    public var GENUVCOORDS:Bool;\r\n    public var TRANSFORMTEXCOORDS:Bool;\r\n    public var PRETRANSFORMVERTICES:Bool;\r\n    public var TRIANGULATE:Bool;\r\n    public var SORTBYPTYPE:Bool;\r\n    public var FINDINVALIDDATA:Bool;\r\n    public var OPTIMIZEMESHES:Bool;\r\n    public var FIXINFACINGNORMALS:Bool;\r\n    public var SPLITBYBONECOUNT:Bool;\r\n    public var SPLITLARGEMESHES:Bool;\r\n    public var GENFACENORMALS:Bool;\r\n}\r\n\r\nclass No {\r\n    public function new() {\r\n        VALIDATEDS_PROCESS = true;\r\n\r\n    }\r\n    public var VALIDATEDS_PROCESS:Bool;\r\n\r\n    public var X_IMPORTER:Bool;\r\n    public var OBJ_IMPORTER:Bool;\r\n    public var AMF_IMPORTER:Bool;\r\n    public var _3DS_IMPORTER:Bool;\r\n    public var MD3_IMPORTER:Bool;\r\n    public var MD2_IMPORTER:Bool;\r\n    public var PLY_IMPORTER:Bool;\r\n    public var MDL_IMPORTER:Bool;\r\n    public var ASE_IMPORTER:Bool;\r\n    public var HMP_IMPORTER:Bool;\r\n    public var SMD_IMPORTER:Bool;\r\n    public var MDC_IMPORTER:Bool;\r\n    public var MD5_IMPORTER:Bool;\r\n    public var STL_IMPORTER:Bool;\r\n    public var LWO_IMPORTER:Bool;\r\n    public var DXF_IMPORTER:Bool;\r\n    public var NFF_IMPORTER:Bool;\r\n    public var RAW_IMPORTER:Bool;\r\n    public var SIB_IMPORTER:Bool;\r\n    public var OFF_IMPORTER:Bool;\r\n    public var AC_IMPORTER:Bool;\r\n    public var BVH_IMPORTER:Bool;\r\n    public var IRRMESH_IMPORTER:Bool;\r\n    public var IRR_IMPORTER:Bool;\r\n    public var Q3D_IMPORTER:Bool;\r\n    public var B3D_IMPORTER:Bool;\r\n    public var COLLADA_IMPORTER:Bool;\r\n    public var TERRAGEN_IMPORTER:Bool;\r\n    public var CSM_IMPORTER:Bool;\r\n    public var _3D_IMPORTER:Bool;\r\n    public var LWS_IMPORTER:Bool;\r\n    public var OGRE_IMPORTER:Bool;\r\n    public var OPENGEX_IMPORTER:Bool;\r\n    public var MS3D_IMPORTER:Bool;\r\n    public var COB_IMPORTER:Bool;\r\n    public var BLEND_IMPORTER:Bool;\r\n    public var Q3BSP_IMPORTER:Bool;\r\n    public var NDO_IMPORTER:Bool;\r\n    public var IFC_IMPORTER:Bool;\r\n    public var XGL_IMPORTER:Bool;\r\n    public var FBX_IMPORTER:Bool;\r\n    public var ASSBIN_IMPORTER:Bool;\r\n    public var GLTF_IMPORTER:Bool;\r\n    public var C4D_IMPORTER:Bool;\r\n    public var _3MF_IMPORTER:Bool;\r\n    public var X3D_IMPORTER:Bool;\r\n\r\n}\r\n","package assimp;\r\n\r\nimport assimp.IOSystem.IOStream;\r\nimport assimp.format.Scene.AiScene;\r\nimport assimp.ImporterDesc.AiImporterDesc;\r\nclass BaseImporter {\r\n    static public function AI_MAKE_MAGIC(string:String) {\r\n        return (string.charCodeAt(0) << 24) + (string.charCodeAt(1) << 16) + (string.charCodeAt(2) << 8) + string.charCodeAt(3);\r\n    }\r\n\r\n\r\n    /** Called by Importer::GetImporterInfo to get a description of some loader features. Importers must provide this\r\n     *  information. */\r\n    public var info:AiImporterDesc;\r\n    /** The error description of the last error that occurred. An empty string if there was no error.    */\r\n    public var errorText:String;//= \"\"\r\n\r\n/** Currently set progress handler. */\r\n    public var progress:ProgressHandler;\r\n\r\n    public function new() {\r\n\r\n    }\r\n/** Returns whether the class can handle the format of the given file.\r\n     *.\r\n     *  The implementation should be as quick as possible. A check for the file extension is enough. If no suitable\r\n     *  loader is found with this strategy, canRead() is called again, the 'checkSig' parameter set to true this time.\r\n     *  Now the implementation is expected to perform a full check of the file structure, possibly searching the first\r\n     *  bytes of the file for magic identifiers or keywords.\r\n     *\r\n     *  @param file Path and file name of the file to be examined.\r\n     *  @param checkSig Set to true if this method is called a second time. This time, the implementation may take more\r\n     *  time to examine the contents of the file to be loaded for magic bytes, keywords, etc to be able to load files\r\n     *  with unknown/not existent file extensions.\r\n     *  @return true if the class can read this file, false if not. */\r\n    public function canRead(file:String, ioStream:IOStream, checkSig:Bool):Bool {\r\n        return false;\r\n    }\r\n\r\n    /** Imports the given file and returns the imported data.\r\n     *  If the import succeeds, ownership of the data is transferred to the caller. If the import fails, null is\r\n     *  returned. The function takes care that any partially constructed data is destroyed beforehand.\r\n     *\r\n     *  @param imp Importer object hosting this loader.\r\n     *  @param file Path of the file to be imported.\r\n     *  @return The imported data or null if failed. If it failed a human-readable error description can be retrieved\r\n     *  by accessing errorText\r\n     *\r\n     *  @note This function is not intended to be overridden. Implement internReadFile() to do the import. If an\r\n     *  exception is thrown somewhere in internReadFile(), this function will catch it and transform it into a suitable\r\n     *  response to the caller.\r\n     */\r\n    public function readFile(imp:ImporterPimpl, ioStream:IOStream, filePath:String, buffers:Array<IOStream>):Null<AiScene> {\r\n\r\n        progress = imp.progressHandler;\r\n///assert(progress != null)\r\n\r\n        // Gather configuration properties for this run\r\n        setupProperties(imp);\r\n\r\n        // create a scene object to hold the data\r\n        var sc = new AiScene();\r\n\r\n        // dispatch importing\r\n\r\n        internReadFile(filePath, ioStream, sc, buffers);\r\n\r\n        // return what we gathered from the import.\r\n        return sc;\r\n    }\r\n\r\n    /** Called prior to ReadFile().\r\n     *  The function is a request to the importer to update its configuration basing on the Importer's configuration\r\n     *  property list.\r\n     *  @param imp Importer instance\r\n     */\r\n    public function setupProperties(imp:ImporterPimpl) {\r\n\r\n    }\r\n\r\n\r\n    /** Called by Importer::GetExtensionList for each loaded importer.\r\n     *  Take the extension list contained in the structure returned by info and insert all file extensions into the\r\n     *  given set.\r\n     *  @param extension set to collect file extensions in*/\r\n    public function extensionList() {\r\n        return info.fileExtensions;\r\n    }\r\n\r\n    /** Imports the given file into the given scene structure. The function is expected to throw an ImportErrorException\r\n     *  if there is an error. If it terminates normally, the data in AiScene is expected to be correct. Override this\r\n     *  function to implement the actual importing.\r\n     * <br>\r\n     *  The output scene must meet the following requirements:<br>\r\n     * <ul>\r\n     * <li>At least a root node must be there, even if its only purpose is to reference one mesh.</li>\r\n     * <li>AiMesh.primitiveTypes may be 0. The types of primitives in the mesh are determined automatically in this\r\n     *  case.</li>\r\n     * <li>the vertex data is stored in a pseudo-indexed \"verbose\" format.\r\n     *  In fact this means that every vertex that is referenced by a face is unique. Or the other way round: a vertex\r\n     *  index may not occur twice in a single AiMesh.</li>\r\n     * <li>AiAnimation.duration may be -1. Assimp determines the length of the animation automatically in this case as\r\n     *  the length of the longest animation channel.</li>\r\n     * <li>AiMesh.bitangents may be null if tangents and normals are given. In this case bitangents are computed as the\r\n     *  cross product between normal and tangent.</li>\r\n     * <li>There needn't be a material. If none is there a default material is generated. However, it is recommended\r\n     *  practice for loaders to generate a default material for yourself that matches the default material setting for\r\n     *  the file format better than Assimp's generic default material. Note that default materials *should* be named\r\n     *  AI_DEFAULT_MATERIAL_NAME if they're just color-shaded or AI_DEFAULT_TEXTURED_MATERIAL_NAME if they define a\r\n     *  (dummy) texture. </li>\r\n     * </ul>\r\n     *  If the AI_SCENE_FLAGS_INCOMPLETE-Flag is <b>not</b> set:<ul>\r\n     * <li> at least one mesh must be there</li>\r\n     * <li> there may be no meshes with 0 vertices or faces</li>\r\n     * </ul>\r\n     *  This won't be checked (except by the validation step): Assimp will crash if one of the conditions is not met!\r\n     *\r\n     *  @param file Path of the file to be imported.\r\n     *  @param scene The scene object to hold the imported data. Null is not a valid parameter.\r\n     *  */\r\n    public function internReadFile(file:String, ioStream:IOStream, pScene:AiScene, buffers:Array<IOStream>):Void {\r\n\r\n    }\r\n\r\n    /** Extract file extension from a string\r\n         *  @param file Input file\r\n         *  @return extension without trailing dot, all lowercase\r\n         */\r\n    public function getExtension(file:String):String {\r\n        var pos = file.lastIndexOf('.');\r\n\r\n        // no file extension at all\r\n        if (pos == -1) return \"\";\r\n\r\n        return file.substring(pos + 1).toLowerCase(); // thanks to Andy Maloney for the hint\r\n    }\r\n}\r\n","package assimp;\r\n/*\r\nOpen Asset Import Library (assimp)\r\n----------------------------------------------------------------------\r\n\r\nCopyright (c) 2006-2017, assimp team\r\n\r\nAll rights reserved.\r\n\r\nRedistribution and use of this software in source and binary forms,\r\nwith or without modification, are permitted provided that the\r\nfollowing conditions are met:\r\n\r\n* Redistributions of source code must retain the above\r\n  copyright notice, this list of conditions and the\r\n  following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above\r\n  copyright notice, this list of conditions and the\r\n  following disclaimer in the documentation and/or other\r\n  materials provided with the distribution.\r\n\r\n* Neither the name of the assimp team, nor the names of its\r\n  contributors may be used to endorse or promote products\r\n  derived from this software without specific prior\r\n  written permission of the assimp team.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n----------------------------------------------------------------------\r\n*/\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Helper class to allow post-processing steps to interact with each other.\r\n *\r\n *  The class maintains a simple property list that can be used by pp-steps\r\n *  to provide additional information to other steps. This is primarily\r\n *  intended for cross-step optimizations.\r\n */\r\nimport assimp.format.Scene.AiScene;\r\nimport haxe.ds.IntMap;\r\nclass SharedPostProcessInfo {\r\n\r\n\r\n    /** Map of all stored properties    */\r\n    var map:IntMap<Any>;\r\n\r\n    /** Add a property to the list  */\r\n    public function addProperty(name:String, data:Any) {\r\n        // setGenericPropertyPtr(map, name, data)\r\n    }\r\n\r\n    /** Get a heap property */\r\n    public function getProperty(name:String) {\r\n        //getGenericProperty(map, name)\r\n    }\r\n\r\n    /** Remove a property of a specific type    */\r\n    public function removeProperty(name:String) {\r\n        //setGenericPropertyPtr(map, name)\r\n    }\r\n}\r\nclass BaseProcess {\r\n    public function new() {\r\n    }\r\n\r\n\r\n// ---------------------------------------------------------------------------\r\n/** The BaseProcess defines a common interface for all post processing steps.\r\n *  A post processing step is run after a successful import if the caller specified the corresponding flag when calling\r\n *  readFile().\r\n *  Enum AiPostProcessSteps defines which flags are available.\r\n *  After a successful import the Importer iterates over its internal array of processes and calls isActive()\r\n *  on each process to evaluate if the step should be executed. If the function returns true, the class' Execute()\r\n *  function is called subsequently.\r\n */\r\n/** Constructor to be privately used by Importer */\r\n\r\n    /** See the doc of #SharedPostProcessInfo for more details */\r\n    var shared:SharedPostProcessInfo;\r\n\r\n    /** Currently active progress handler */\r\n    var progress:ProgressHandler;\r\n\r\n    /** -------------------------------------------------------------------\r\n     *  Returns whether the processing step is present in the given flag.\r\n     *  @param flags The processing flags the importer was called with. A bitwise combination of AiPostProcessSteps.\r\n     *  @return true if the process is present in this flag fields, false if not.\r\n     */\r\n    public function isActive(flags:Int):Bool {\r\n        return false;\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    /** Check whether this step expects its input vertex data to be in verbose format. */\r\n    var requireVerboseFormat:Bool;// = true\r\n\r\n    // -------------------------------------------------------------------\r\n    /** Executes the post processing step on the given imported data.\r\n     *  The function deletes the scene if the postprocess step fails ( the object pointer will be set to null).\r\n     *  @param imp Importer instance (imp.scene must be valid)\r\n     */\r\n    public function executeOnScene(imp:ImporterPimpl) {\r\n//assert(imp.impl.scene != null)\r\n\r\n        progress = imp.progressHandler;\r\n\r\n        setupProperties(imp);\r\n\r\n        // catch exceptions thrown inside the PostProcess-Step\r\n\r\n        execute(imp.scene);\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    /** Called prior to executeOnScene().\r\n     *  The function is a request to the process to update its configuration basing\r\n     *  on the Importer's configuration property list.\r\n     */\r\n    public function setupProperties(imp:ImporterPimpl) {\r\n\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    /** Executes the post processing step on the given imported data.\r\n     *  A process should throw an ImportErrorException* if it fails.\r\n     *  This method must be implemented by deriving classes.\r\n     *  @param scene The imported data to work at.\r\n     */\r\n    public function execute(scene:AiScene) {\r\n\r\n    }\r\n}","package assimp;\r\nclass Config {\r\n\r\n    /** Remove a specific color channel 'n' */\r\n    static public function COLORSn(n:Int) return 1 << (n + 20);\r\n\r\n    /** Remove a specific UV channel 'n'    */\r\n    static public function TEXCOORDSn(n:Int) return 1 << (n + 25);\r\n}\r\n@:enum abstract UvTrafo( Int) from Int to Int{\r\n\r\n    /** TransformUVCoords evaluates UV scalings */\r\n    var SCALING = 0x1;\r\n    /** TransformUVCoords evaluates UV rotations */\r\n    var ROTATION = 0x2;\r\n    /** TransformUVCoords evaluates UV translation */\r\n    var TRANSLATION = 0x4;\r\n    /** Everything baked together -> default value */\r\n    var ALL = SCALING | ROTATION | TRANSLATION;\r\n}\r\n@:enum abstract AiComponent( Int) from Int to Int{\r\n    /** Normal vectors */\r\n    var NORMALS = (0x2);\r\n    /** Tangents and bitangents go always together ... */\r\n    var TANGENTS_AND_BITANGENTS = (0x4);\r\n    /** ALL color sets\r\n             * Use aiComponent_COLORn(N) to specify the N'th set */\r\n    var COLORS = (0x8);\r\n    /** ALL texture UV sets\r\n             * aiComponent_TEXCOORDn(N) to specify the N'th set  */\r\n    var TEXCOORDS = (0x10);\r\n    /** Removes all bone weights from all meshes.\r\n             *  The scenegraph nodes corresponding to the bones are NOT removed.\r\n             *  use the AiProcess_OptimizeGraph step to do this */\r\n    var BONEWEIGHTS = (0x20);\r\n    /** Removes all node animations (aiScene::mAnimations).\r\n             *  The corresponding scenegraph nodes are NOT removed.\r\n             *  use the AiProcess_OptimizeGraph step to do this */\r\n    var ANIMATIONS = (0x40);\r\n    /** Removes all embedded textures (aiScene::mTextures) */\r\n    var TEXTURES = (0x80);\r\n    /** Removes all light sources (aiScene::mLights).\r\n             *  The corresponding scenegraph nodes are NOT removed.\r\n             *  use the #aiProcess_OptimizeGraph step to do this */\r\n    var LIGHTS = (0x100);\r\n    /** Removes all cameras (aiScene::mCameras).\r\n             *  The corresponding scenegraph nodes are NOT removed.\r\n             *  use the #aiProcess_OptimizeGraph step to do this */\r\n    var CAMERAS = (0x200);\r\n    /** Removes all meshes (aiScene::mMeshes). */\r\n    var MESHES = (0x400);\r\n    /** Removes all materials. One default material will be generated, so aiScene::mNumMaterials will be 1. */\r\n    var MATERIALS = (0x800);\r\n\r\n\r\n}\r\n/** ###########################################################################\r\n *  LIBRARY SETTINGS\r\n *  General, global settings\r\n *  ########################################################################### */\r\nclass AiConfig {\r\n\r\n    /** @brief Enables time measurements.\r\n     *\r\n     *  If enabled, measures the time needed for each part of the loading process (i.e. IO time, importing,\r\n     *  postprocessing, ..) and dumps these timings to the DefaultLogger. See the @link perf Performance\r\n     *  Page@endlink for more information on this topic.\r\n     *\r\n     * Property type: bool. Default value: false.\r\n     */\r\n    static var GLOB_MEASURE_TIME = \"GLOB_MEASURE_TIME\";\r\n\r\n    /** @brief A hint to assimp to favour speed against import quality.\r\n     *\r\n     *  Enabling this option may result in faster loading, but it needn't.\r\n     *  It represents just a hint to loaders and post-processing steps to use faster code paths, if possible.\r\n     *  This property is expected to be an integer, != 0 stands for true. The default value is 0.\r\n     */\r\n    static var FAVOUR_SPEED = \"FAVOUR_SPEED\";\r\n\r\n    /** @brief Specifies whether the Android JNI asset extraction is supported.\r\n     *\r\n     *  Turn on this option if you want to manage assets in native Android application without having to keep\r\n     *  the internal directory and asset manager pointer.\r\n     */\r\n    static var ANDROID_JNI_ASSIMP_MANAGER_SUPPORT = false;\r\n\r\n    /** @brief Specifies the xfile use double for real values of float\r\n     *\r\n     *  Property type: Bool. Default value: false.\r\n     */\r\n    static var EXPORT_XFILE_64BIT = false;\r\n\r\n    /** ###########################################################################\r\n     *  POST PROCESSING SETTINGS\r\n     *  valious stuff to fine-tune the behavior of a specific post processing step.\r\n     *  ########################################################################### */\r\n    static var PP = {\r\n\r\n        /** @brief Maximum bone count per mesh for the SplitbyBoneCount step.\r\n         *\r\n         * Meshes are split until the maximum number of bones is reached. The default\r\n         * value is AI_SBBC_DEFAULT_MAX_BONES, which may be altered at\r\n         * compile-time.\r\n         * Property data type: integer.\r\n         */\r\n        SBBC_MAX_BONES : \"PP_SBBC_MAX_BONES\",\r\n\r\n        CT :{\r\n            /** @brief  Specifies the maximum angle that may be between two vertex tangents that their tangents and\r\n             *  bi-tangents are smoothed.\r\n             *\r\n             *  This applies to the CalcTangentSpace-Step. The angle is specified in degrees. The maximum value is 175.\r\n             *  Property type: float. Default value: 45 degrees\r\n             */\r\n            MAX_SMOOTHING_ANGLE: \"PP_CT_MAX_SMOOTHING_ANGLE\",\r\n\r\n            /** @brief Source UV channel for tangent space computation.\r\n             *\r\n             *  The specified channel must exist or an error will be raised.\r\n             *  Property type: integer. Default value: 0\r\n             */\r\n            TEXTURE_CHANNEL_INDEX : \"PP_CT_TEXTURE_CHANNEL_INDEX\"\r\n        },\r\n\r\n        /** @brief  Specifies the maximum angle that may be between two face normals at the same vertex position\r\n         *  that their are smoothed together.\r\n         *\r\n         *  Sometimes referred to as 'crease angle'.\r\n         *  This applies to the GenSmoothNormals-Step. The angle is specified in degrees, so 180 is PI.\r\n         *  The default value is 175 degrees (all vertex normals are smoothed). The maximum value is 175, too.\r\n         *  Property type: float.\r\n         *  Warning: setting this option may cause a severe loss of performance. The performance is unaffected if\r\n         *  the AI_CONFIG_FAVOUR_SPEED flag is set but the output quality may be reduced.\r\n         */\r\n        GSN_MAX_SMOOTHING_ANGLE :\"PP_GSN_MAX_SMOOTHING_ANGLE\",\r\n\r\n        /** @brief Configures the #aiProcess_RemoveRedundantMaterials step to keep materials matching a name in\r\n         *  a given list.\r\n         *\r\n         *  This is a list of 1 to n strings, ' ' serves as delimiter character.\r\n         *  Identifiers containing whitespaces must be enclosed in *single* quotation marks. For example:<tt>\r\n         * \"keep-me and_me_to anotherMaterialToBeKept \\'name with whitespace\\'\"</tt>.\r\n         *  If a material matches on of these names, it will not be modified or removed by the postprocessing step\r\n         *  nor will other materials be replaced by a reference to it. <br>\r\n         *  This option might be useful if you are using some magic material names to pass additional semantics through\r\n         *  the content pipeline. This ensures they won't be optimized away, but a general optimization is still\r\n         *  performed for materials not contained in the list.\r\n         *  Property type: String. Default value: n/a\r\n         *  @note Linefeeds, tabs or carriage returns are treated as whitespace.\r\n         *  Material names are case sensitive.\r\n         */\r\n        RRM_EXCLUDE_LIST : \"PP_RRM_EXCLUDE_LIST\",\r\n\r\n        PTV: {\r\n            /** @brief Configures the AiProcess_PreTransformVertices step to keep the scene hierarchy. Meshes are moved\r\n             *  to worldspace, but no optimization is performed (read: meshes with equal materials are not joined.\r\n             *  The total number of meshes won't change).\r\n             *\r\n             *  This option could be of use for you if the scene hierarchy contains important additional information which\r\n             *  you intend to parse.\r\n             *  For rendering, you can still render all meshes in the scene without any transformations.\r\n             * Property type: bool. Default value: false.\r\n             */\r\n            KEEP_HIERARCHY : \"PP_PTV_KEEP_HIERARCHY\",\r\n\r\n            /** @brief Configures the AiProcess_PreTransformVertices step to normalize all vertex components into\r\n             *  the [-1, 1] range. That is, a bounding box for the whole scene is computed, the maximum component is taken\r\n             *  and all meshes are scaled appropriately (uniformly of course!).\r\n             *  This might be useful if you don't know the spatial dimension of the input data  */\r\n            NORMALIZE : \"PP_PTV_NORMALIZE\",\r\n\r\n            /** @brief Configures the #aiProcess_PreTransformVertices step to use a users defined matrix as the scene root\r\n             *  node transformation before transforming vertices.\r\n             *  Property type: bool. Default value: false.\r\n             */\r\n            ADD_ROOT_TRANSFORMATION : \"PP_PTV_ADD_ROOT_TRANSFORMATION\",\r\n\r\n            /** @brief Configures the AiProcess_PreTransformVertices step to use a users defined matrix as the scene root\r\n             *  node transformation before transforming vertices. This property correspond to the 'a1' component\r\n             *  of the transformation matrix.\r\n             *  Property type: aiMatrix4x4.\r\n             */\r\n            ROOT_TRANSFORMATION :\"PP_PTV_ROOT_TRANSFORMATION\"\r\n        },\r\n\r\n        /** @brief Configures the AiProcess_FindDegenerates step to remove degenerated primitives from\r\n         *  the import - immediately.\r\n         *\r\n         *  The default behaviour converts degenerated triangles to lines and degenerated lines to points.\r\n         *  See the documentation to the AiProcess_FindDegenerates step for a detailed example of the valious ways\r\n         *  to get rid of these lines and points if you don't want them.\r\n         *  Property type: bool. Default value: false.\r\n         */\r\n        FD_REMOVE : \"PP_FD_REMOVE\",\r\n\r\n        /** @brief Configures the #aiProcess_OptimizeGraph step to preserve nodes matching a name in a given list.\r\n         *\r\n         *  This is a list of 1 to n strings, ' ' serves as delimiter character.\r\n         *  Identifiers containing whitespaces must be enclosed in *single* quotation marks. For example:<tt>\r\n         * \"keep-me and_me_to anotherNodeToBeKept \\'name with whitespace\\'\"</tt>.\r\n         *  If a node matches on of these names, it will not be modified or removed by the postprocessing step.<br>\r\n         *  This option might be useful if you are using some magic node names to pass additional semantics through\r\n         *  the content pipeline. This ensures they won't be optimized away, but a general optimization is still\r\n         *  performed for nodes not contained in the list.\r\n         *  Property type: String. Default value: n/a\r\n         *  @note Linefeeds, tabs or carriage returns are treated as whitespace. Node names are case sensitive.\r\n         */\r\n        OG_EXCLUDE_LIST : \"PP_OG_EXCLUDE_LIST\",\r\n\r\n        SLM :{\r\n            /** @brief  Set the maximum number of triangles in a mesh.\r\n             *\r\n             *  This is used by the \"SplitLargeMeshes\" PostProcess-Step to determine whether a mesh must be split or not.\r\n             *  @note The default value is 1_000_000. Property type: integer.\r\n             */\r\n            TRIANGLE_LIMIT : \"PP_SLM_TRIANGLE_LIMIT\",\r\n\r\n            /** @brief  Set the maximum number of vertices in a mesh.\r\n             *\r\n             *  This is used by the \"SplitLargeMeshes\" PostProcess-Step to determine whether a mesh must be split or not.\r\n             *  @note The default value is 1_000_000. Property type: integer.\r\n             */\r\n            VERTEX_LIMIT : \"PP_SLM_VERTEX_LIMIT\",\r\n        },\r\n\r\n        /** @brief Set the maximum number of bones affecting a single vertex\r\n         *\r\n         *  This is used by the #aiProcess_LimitBoneWeights PostProcess-Step.\r\n         *  @note The default value is 0x4\r\n         * Property type: integer.*/\r\n        LBW_MAX_WEIGHTS : \"PP_LBW_MAX_WEIGHTS\",\r\n\r\n        /** @brief Lower the deboning threshold in order to remove more bones.\r\n         *\r\n         *  This is used by the #aiProcess_Debone PostProcess-Step.\r\n         *  @note The default value is 1f\r\n         *  Property type: float.*/\r\n        DB_THRESHOLD : \"PP_DB_THRESHOLD\",\r\n\r\n        /** @brief Require all bones qualify for deboning before removing any\r\n         *\r\n         *  This is used by the #aiProcess_Debone PostProcess-Step.\r\n         *  @note The default value is 0\r\n         *  Property type: bool.*/\r\n        DB_ALL_OR_NONE : \"PP_DB_ALL_OR_NONE\",\r\n\r\n        /** @brief Set the size of the post-transform vertex cache to optimize the vertices for.\r\n         *  This configures the AiProcess_ImproveCacheLocality step.\r\n         *\r\n         *  The size is given in vertices. Of course you can't know how the vertex format will exactly look like after\r\n         *  the import returns, but you can still guess what your meshes will probably have.\r\n         *  @note The default value is 12. That results in slight performance improvements for most nVidia/AMD cards\r\n         *  since 2002.\r\n         *  Property type: integer.\r\n         */\r\n        ICL_PTCACHE_SIZE :\"PP_ICL_PTCACHE_SIZE\",\r\n\r\n        /** @brief Enumerates components of the aiScene and aiMesh data structures that can be excluded from the import\r\n         *  using the AiProcess_RemoveComponent step.\r\n         *\r\n         *  See the documentation to AiProcess_RemoveComponent for more details.\r\n         */\r\n\r\n\r\n        /** @brief Input parameter to the #aiProcess_RemoveComponent step:\r\n         *  Specifies the parts of the data structure to be removed.\r\n         *\r\n         *  See the documentation to this step for further details. The property is expected to be an integer,\r\n         *  a bitwise combination of the AiComponent flags defined above in this header. The default value is 0.\r\n         *  Important: if no valid mesh is remaining after the step has been executed (e.g you thought it was funny\r\n         *  to specify ALL of the flags defined above) the import FAILS. Mainly because there is no data to work\r\n         *  on anymore ...\r\n         */\r\n        RVC_FLAGS : \"PP_RVC_FLAGS\",\r\n\r\n        /** @brief Input parameter to the #aiProcess_SortByPType step:\r\n         *  Specifies which primitive types are removed by the step.\r\n         *\r\n         *  This is a bitwise combination of the aiPrimitiveType flags.\r\n         *  Specifying all of them is illegal, of course. A typical use would be to exclude all line and point meshes\r\n         *  from the import. This is an integer property, its default value is 0.\r\n         */\r\n        SBP_REMOVE : \"PP_SBP_REMOVE\",\r\n\r\n        /** @brief Input parameter to the AiProcess_FindInvalidData step:\r\n         *  Specifies the floating-point accuracy for animation values. The step checks for animation tracks where all\r\n         *  frame values are absolutely equal and removes them. This tweakable controls the epsilon for floating-point\r\n         *  comparisons - two keys are considered equal if the invaliant abs(n0 - n1) > epsilon holds true for\r\n         *  all vector respectively quaternion components. The default value is 0.f - comparisons are exact then.\r\n         */\r\n        FID_ANIM_ACCURACY : \"PP_FID_ANIM_ACCURACY\",\r\n\r\n\r\n        /** @brief Input parameter to the AiProcess_TransformUVCoords step:\r\n         *  Specifies which UV transformations are evaluated.\r\n         *\r\n         *  This is a bitwise combination of the AI_UVTR property, of course).\r\n         *  By default all transformations are enabled (AI_UVTRAFO.ALL).\r\n         */\r\n        TUV_EVALUATE : \"PP_TUV_EVALUATE\"\r\n    }\r\n\r\n    /** ###########################################################################\r\n     *  IMPORTER SETTINGS\r\n     *  valious stuff to fine-tune the behaviour of specific importer plugins.\r\n     *  ########################################################################### */\r\n    static public var Import = {\r\n\r\n        /** @brief Global setting to disable generation of skeleton dummy meshes\r\n         *\r\n         *  Skeleton dummy meshes are generated as a visualization aid in cases which the input data contains no geometry,\r\n         *  but only animation data.\r\n         *  Property data type: bool. Default value: false\r\n         */\r\n        NO_SKELETON_MESHES : \"IMPORT_NO_SKELETON_MESHES\",\r\n\r\n        /** @brief  Set the vertex animation keyframe to be imported\r\n         *\r\n         *  ASSIMP does not support vertex keyframes (only bone animation is supported).\r\n         *  The library reads only one frame of models with vertex animations.\r\n         *  By default this is the first frame.\r\n         *  \\note The default value is 0. This option applies to all importers.\r\n         *  However, it is also possible to override the global setting for a specific loader. You can use the\r\n         *  AI_CONFIG_IMPORT_*_KEYFRAME options (where * is a placeholder for the file format for which you\r\n         *  want to override the global setting).\r\n         *  Property type: integer.\r\n         */\r\n        GLOBAL_KEYFRAME : \"IMPORT_GLOBAL_KEYFRAME\",\r\n\r\n        Mdl :{\r\n            /** @brief Sets the colormap (= palette) to be used to decode embedded textures in MDL (Quake or 3DGS) files.\r\n             *\r\n             *  This must be a valid path to a file. The file is 768 (256*3) bytes large and contains RGB triplets\r\n             *  for each of the 256 palette entries.\r\n             *  The default value is colormap.lmp. If the file is not found, a default palette (from Quake 1) is used.\r\n             *  Property type: string.\r\n             */\r\n            COLORMAP : \"IMPORT_MDL_COLORMAP\",\r\n\r\n            KEYFRAME : \"IMPORT_MDL_KEYFRAME\"\r\n        },\r\n\r\n        Fbx :{\r\n\r\n            Read :{\r\n                /** @brief Set whether the fbx importer will merge all geometry layers present in the source file or\r\n                 *  take only the first.\r\n                 *\r\n                 * The default value is true (1). Property type: bool\r\n                 */\r\n                ALL_GEOMETRY_LAYERS : \"IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS\",\r\n\r\n                /** @brief Set whether the fbx importer will read all materials present in the source file or take only\r\n                 *  the referenced materials.\r\n                 *\r\n                 *  This is void unless IMPORT.FBX_READ_MATERIALS = true\r\n                 *\r\n                 *  The default value is false (0). Property type: bool\r\n                 */\r\n                ALL_MATERIALS : \"IMPORT_FBX_READ_ALL_MATERIALS\",\r\n\r\n                /** @brief Set whether the fbx importer will read materials.\r\n                 *\r\n                 * The default value is true (1). Property type: bool\r\n                 */\r\n                MATERIALS : \"IMPORT_FBX_READ_MATERIALS\",\r\n\r\n                /** @brief Set whether the fbx importer will read embedded textures.\r\n                 *\r\n                 *  The default value is true (1). Property type: bool\r\n                 */\r\n                TEXTURES : \"IMPORT_FBX_READ_TEXTURES\",\r\n\r\n                /** @brief Set whether the fbx importer will read cameras.\r\n                 *\r\n                 *  The default value is true (1). Property type: bool\r\n                 */\r\n                CAMERAS : \"IMPORT_FBX_READ_CAMERAS\",\r\n\r\n                /** @brief Set whether the fbx importer will read light sources.\r\n                 *\r\n                 *  The default value is true (1). Property type: bool\r\n                 */\r\n                LIGHTS: \"IMPORT_FBX_READ_LIGHTS\",\r\n\r\n                /** @brief Set whether the fbx importer will read animations.\r\n                 *\r\n                 *  The default value is true (1). Property type: bool\r\n                 */\r\n                ANIMATIONS : \"IMPORT_FBX_READ_ANIMATIONS\"\r\n            },\r\n\r\n            /** @brief Set whether the fbx importer will act in strict mode in which only FBX 2013 is supported and\r\n             *  any other sub formats are rejected. FBX 2013 is the primary target for the importer, so this format\r\n             *  is best supported and well-tested.\r\n             *\r\n             *  The default value is false (0). Property type: bool\r\n             */\r\n            STRICT_MODE : \"IMPORT_FBX_STRICT_MODE\",\r\n\r\n            /** @brief Set whether the fbx importer will preserve pivot points for transformations (as extra nodes).\r\n             *  If set to false, pivots and offsets will be evaluated whenever possible.\r\n             *\r\n             *  The default value is true (1). Property type: bool\r\n             */\r\n            PRESERVE_PIVOTS : \"IMPORT_FBX_PRESERVE_PIVOTS\",\r\n\r\n            /** @brief Specifies whether the importer will drop empty animation curves or animation curves which match\r\n             *  the bind pose transformation over their entire defined range.\r\n             *\r\n             *  The default value is true (1). Property type: bool\r\n             */\r\n            OPTIMIZE_EMPTY_ANIMATION_CURVES : \"IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES\",\r\n\r\n            /** @brief Set whether the fbx importer will search for embedded loaded textures, where no embedded texture\r\n             *  data is provided.\r\n             *\r\n             *  The default value is false (0). Property type: bool\r\n             */\r\n            SEARCH_EMBEDDED_TEXTURES :\"IMPORT_FBX_SEARCH_EMBEDDED_TEXTURES\"\r\n        },\r\n\r\n        Md3: {\r\n\r\n            KEYFRAME :\"IMPORT_MD3_KEYFRAME\",\r\n\r\n            /** @brief  Tells the MD3 loader which skin files to load.\r\n             *\r\n             *  When loading MD3 files, Assimp checks whether a file [md3_file_name]_[skin_name].skin is existing.\r\n             *  These files are used by Quake III to be able to assign different skins (e.g. red and blue team) to models.\r\n             *  'default', 'red', 'blue' are typical skin names.\r\n             *  Property type: String. Default value: \"default\".\r\n             */\r\n            SKIN_NAME : \"IMPORT_MD3_SKIN_NAME\",\r\n\r\n            /** @brief  Specify the Quake 3 shader file to be used for a particular MD3 file. This can also be a search path.\r\n             *\r\n             *  By default Assimp's behaviour is as follows:\r\n             *  If a MD3 file <tt>any_path/models/any_q3_subdir/model_name/file_name.md3</tt> is loaded, the library tries\r\n             *  to locate the corresponding shader file in <tt>any_path/scripts/model_name.shader</tt>. This property\r\n             *  overrides this behaviour. It can either specify a full path to the shader to be loaded or alternatively\r\n             *  the path (relative or absolute) to the directory where the shaders for all MD3s to be loaded reside.\r\n             *  Assimp attempts to open <tt>IMPORT_MD3_SHADER_SRC/model_name.shader</tt> first,\r\n             *  <tt>IMPORT_MD3_SHADER_SRC/file_name.shader</tt> is the fallback file. Note that IMPORT_MD3_SHADER_SRC should\r\n             *  have a terminal (back)slash.\r\n             *  Property type: String. Default value: n/a.\r\n             */\r\n            SHADER_SRC : \"IMPORT_MD3_SHADER_SRC\",\r\n\r\n            /** @brief  Configures the M3D loader to detect and process multi-part Quake player models.\r\n             *\r\n             *  These models usually consist of 3 files, lower.md3, upper.md3 and head.md3. If this property is set to true,\r\n             *  Assimp will try to load and combine all three files if one of them is loaded.\r\n             *  Property type: bool. Default value: true.\r\n             */\r\n            HANDLE_MULTIPART : \"IMPORT_MD3_HANDLE_MULTIPART\"\r\n        },\r\n\r\n        MD2_KEYFRAME : \"IMPORT_MD2_KEYFRAME\",\r\n        MDC_KEYFRAME : -1,\r\n        SMD_KEYFRAME : -1,\r\n\r\n        UNREAL_KEYFRAME : -1,\r\n\r\n        Ac: {\r\n\r\n            /** @brief  Configures the AC loader to collect all surfaces which have the \"Backface cull\" flag set\r\n             *  in separate meshes.\r\n             *\r\n             *  Property type: bool. Default value: true.\r\n             */\r\n            SEPARATE_BFCULL : \"IMPORT_AC_SEPARATE_BFCULL\",\r\n            /** @brief  Configures whether the AC loader evaluates subdivision surfaces ( indicated by the presence\r\n             *  of the 'subdiv' attribute in the file). By default, Assimp performs the subdivision using the standard\r\n             *  Catmull-Clark algorithm\r\n             *\r\n             * Property type: bool. Default value: true.\r\n             */\r\n            EVAL_SUBDIVISION: \"IMPORT_AC_EVAL_SUBDIVISION\"\r\n        },\r\n\r\n        /** @brief  Configures the UNREAL 3D loader to separate faces with different surface flags\r\n         *  (e.g. two-sided vs. single-sided).\r\n         *\r\n         * Property type: bool. Default value: true.\r\n         */\r\n        UNREAL_HANDLE_FLAGS : \"UNREAL_HANDLE_FLAGS\",\r\n\r\n        /** @brief Configures the terragen import plugin to compute uv's for terrains, if not given.\r\n         *  Furthermore a default texture is assigned.\r\n         *\r\n         *  UV coordinates for terrains are so simple to compute that you'll usually want to compute them on your own,\r\n         *  if you need them. This option is intended for model viewers which want to offer an easy way to apply\r\n         *  textures to terrains.\r\n         *  Property type: bool. Default value: false.\r\n         */\r\n        TER_MAKE_UVS :\"IMPORT_TER_MAKE_UVS\",\r\n\r\n        /** @brief  Configures the ASE loader to always reconstruct normal vectors basing on the smoothing groups loaded\r\n         *  from the file.\r\n         *\r\n         *  Some ASE files have carry invalid normals, other don't.\r\n         *  Property type: bool. Default value: true.\r\n         */\r\n        ASE_RECONSTRUCT_NORMALS : \"IMPORT_ASE_RECONSTRUCT_NORMALS\",\r\n\r\n\r\n        /** @brief  Configures the LWO loader to load just one layer from the model.\r\n         *\r\n         *  LWO files consist of layers and in some cases it could be useful to load only one of them. This property can\r\n         *  be either a string - which specifies the name of the layer - or an integer - the index of the layer. If the\r\n         *  property is not set the whole LWO model is loaded. Loading fails if the requested layer is not available.\r\n         *  The layer index is zero-based and the layer name may not be empty.<br>\r\n         *  Property type: Integer. Default value: all layers are loaded.\r\n         */\r\n        LWO_ONE_LAYER_ONLY : \"IMPORT_LWO_ONE_LAYER_ONLY\",\r\n\r\n        /** @brief  Configures the MD5 loader to not load the MD5ANIM file for a MD5MESH file automatically.\r\n         *\r\n         *  The default strategy is to look for a file with the same name but the MD5ANIM extension\r\n         *  in the same directory. If it is found, it is loaded and combined with the MD5MESH file.\r\n         *  This configuration option can be used to disable this behaviour.\r\n         *\r\n         *  Property type: bool. Default value: false.\r\n         */\r\n        MD5_NO_ANIM_AUTOLOAD : \"IMPORT_MD5_NO_ANIM_AUTOLOAD\",\r\n\r\n        Lws :{\r\n            /** @brief Defines the begin of the time range for which the LWS loader evaluates animations and computes\r\n             *  AiNodeAnim's.\r\n             *\r\n             *  Assimp provides full conversion of LightWave's envelope system, including pre and post conditions.\r\n             *  The loader computes linearly subsampled animation chanels with the frame rate given in the LWS file.\r\n             *  This property defines the start time. Note: animation channels are only generated if a node has at least\r\n             *  one envelope with more tan one key assigned. This property. is given in frames, '0' is the first frame.\r\n             *  By default, if this property is not set, the importer takes the animation start from the input LWS\r\n             *  file ('FirstFrame' line)<br>\r\n             *  Property type: Integer. Default value: taken from file.\r\n             *\r\n             *  @see AI_CONFIG_IMPORT_LWS_ANIM_END - end of the imported time range\r\n             */\r\n            LWS_ANIM_START : \"IMPORT_LWS_ANIM_START\",\r\n            LWS_ANIM_END :\"IMPORT_LWS_ANIM_END\"\r\n        },\r\n\r\n        /** @brief Defines the output frame rate of the IRR loader.\r\n         *\r\n         *  IRR animations are difficult to convert for Assimp and there will always be a loss of quality.\r\n         *  This setting defines how many keys per second are returned by the converter.<br>\r\n         *  Property type: integer. Default value: 100\r\n         */\r\n        IRR_ANIM_FPS : \"IMPORT_IRR_ANIM_FPS\",\r\n\r\n        Ogre :{\r\n            /** @brief Ogre Importer will try to find referenced materials from this file.\r\n             *\r\n             *  Ogre meshes reference with material names, this does not tell Assimp the file where it is located in.\r\n             *  Assimp will try to find the source file in the following order: <material-name>.material,\r\n             *  <mesh-filename-base>.material and lastly the material name defined by this config property. <br>\r\n             *  Property type: String. Default value: Scene.material.\r\n             */\r\n            MATERIAL_FILE : \"IMPORT_OGRE_MATERIAL_FILE\",\r\n\r\n            /** @brief Ogre Importer detect the texture usage from its filename.\r\n             *\r\n             *  Ogre material texture units do not define texture type, the textures usage depends on the used shader or\r\n             *  Ogre's fixed pipeline. If this config property is true Assimp will try to detect the type from the textures\r\n             *  filename postfix: _n, _nrm, _nrml, _normal, _normals and _normalmap for normal map, _s, _spec, _specular\r\n             *  and _specularmap for specular map, _l, _light, _lightmap, _occ and _occlusion for light map, _disp and\r\n             *  _displacement for displacement map.\r\n             *  The matching is case insensitive. Post fix is taken between the last underscore and the last period.\r\n             *  Default behavior is to detect type from lower cased texture unit name by matching against: normalmap,\r\n             *  specularmap, lightmap and displacementmap.\r\n             *  For both cases if no match is found aiTextureType_DIFFUSE is used. <br>\r\n             *  Property type: Bool. Default value: false.\r\n             */\r\n            OGRE_TEXTURETYPE_FROM_FILENAME : \"IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME\"\r\n        },\r\n\r\n        Ifc :{\r\n            /** @brief Specifies whether the IFC loader skips over IfcSpace elements.\r\n             *\r\n             *  IfcSpace elements (and their geometric representations) are used to represent, well, free space in a\r\n             *  building storey.<br>\r\n             *  Property type: Bool. Default value: true.\r\n             */\r\n            IFC_SKIP_SPACE_REPRESENTATIONS : \"IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS\",\r\n\r\n            /** @brief Specifies whether the IFC loader will use its own, custom triangulation algorithm to triangulate\r\n             *  wall and floor meshes.\r\n             *\r\n             *  If this property is set to false, walls will be either triangulated by AiProcess_Triangulate or\r\n             *  will be passed through as huge polygons with faked holes (i.e. holes that are connected with\r\n             *  the outer boundary using a dummy edge). It is highly recommended to set this property to true\r\n             *  if you want triangulated data because AiProcess_Triangulate is known to have problems with the kind\r\n             *  of polygons that the IFC loader spits out for complicated meshes.\r\n             *  Property type: Bool. Default value: true.\r\n             */\r\n            IFC_CUSTOM_TRIANGULATION: \"IMPORT_IFC_CUSTOM_TRIANGULATION\",\r\n\r\n            /** @brief  Set the tessellation conic angle for IFC smoothing curves.\r\n             *\r\n             *  This is used by the IFC importer to determine the tessellation parameter for smoothing curves.\r\n             *  @note The default value is 10f and the accepted values are in range [5f, 120f].\r\n             *  Property type: Float.\r\n             */\r\n            IFC_SMOOTHING_ANGLE : \"IMPORT_IFC_SMOOTHING_ANGLE\",\r\n\r\n            /** @brief  Set the tessellation for IFC cylindrical shapes.\r\n             *\r\n             *  This is used by the IFC importer to determine the tessellation parameter for cylindrical shapes,\r\n             *  i.e. the number of segments used to aproximate a circle.\r\n             *  @note The default value is 32 and the accepted values are in range [3, 180].\r\n             *  Property type: Integer.\r\n             */\r\n            IFC_CYLINDRICAL_TESSELLATION : \"IMPORT_IFC_CYLINDRICAL_TESSELLATION\"\r\n        },\r\n\r\n        /** @brief Specifies whether the Collada loader will ignore the provided up direction.\r\n         *\r\n         *  If this property is set to true, the up direction provided in the file header will be ignored and the file\r\n         *  will be loaded as is.\r\n         *  Property type: Bool. Default value: false.\r\n         */\r\n        COLLADA_IGNORE_UP_DIRECTION : \"IMPORT_COLLADA_IGNORE_UP_DIRECTION\"\r\n    }\r\n}\r\n\r\n","package assimp;\r\nimport assimp.format.Defs.AiColor4D;\r\nimport assimp.IOSystem.IOStream;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport haxe.io.BytesInput;\r\nimport haxe.io.Bytes;\r\nclass MemoryIOSystem extends IOSystem {\r\n    public var filename:String;\r\n    public var bytes:Bytes;\r\n\r\n    public function new(filename:String, bytes:Bytes) {\r\n        super();\r\n        this.filename = filename;\r\n        this.bytes = bytes;\r\n    }\r\n}\r\nclass MemoryIOStream extends IOStream {\r\n    public function new(b:Bytes, ?pos:Int, ?len:Int) {\r\n        super();\r\n\r\n        bytes = b;\r\n        bytesInput = new BytesInput(b, pos, len);\r\n    }\r\n}\r\nclass IOStream {\r\n    public var path:String;\r\n    public var filename:String;\r\n    public var parentPath:String;\r\n    /** The length of the stream in bytes. */\r\n    public var length(get, never):Int;\r\n\r\n    public var position(get, set):Int;\r\n\r\n    public var bytesInput:BytesInput;\r\n    public var bytes:Bytes ;\r\n\r\n    public function new() {\r\n    }\r\n\r\n    inline function get_length():Int {\r\n        return bytesInput.length;\r\n\r\n    }\r\n\r\n    inline function get_position():Int {\r\n\r\n        return bytesInput.position;\r\n    }\r\n\r\n    inline function set_position(p:Int):Int {\r\n\r\n        return bytesInput.position = p;\r\n    }\r\n\r\n    inline public function seek(n:Int) {\r\n        bytesInput.position += n;\r\n    }\r\n\r\n    inline public function readByte():Int {\r\n        return bytesInput.readByte();\r\n    }\r\n\r\n    inline public function readBytes(buf:Bytes, pos, len):Int {\r\n        return bytesInput.readBytes(buf, pos, len);\r\n    }\r\n\r\n    inline public function readFloat() {\r\n        return bytesInput.readFloat() ;\r\n    }\r\n\r\n    inline public function readDouble() {\r\n        return bytesInput.readDouble() ;\r\n    }\r\n\r\n    inline public function readInt8() {\r\n        return bytesInput.readInt8() ;\r\n    }\r\n\r\n    inline public function readInt16() {\r\n        return bytesInput.readInt16();\r\n    }\r\n\r\n    inline public function readUInt16():Int {\r\n        return bytesInput.readUInt16() ;\r\n    }\r\n\r\n    inline public function readInt32():Int {\r\n        return bytesInput.readInt32() ;\r\n    }\r\n\r\n    inline public function readString(len:Int) {\r\n        return bytesInput.readString(len) ;\r\n    }\r\n}\r\n\r\n\r\nclass IOSystem {\r\n    public function exists(file:String):Bool {\r\n        return false;\r\n    }\r\n\r\n    public function open(file:String):IOStream {\r\n        return null;\r\n    }\r\n\r\n    public function close(stream:IOStream) {\r\n\r\n    }\r\n\r\n    public function new() {\r\n    }\r\n}\r\n","package assimp;\r\nimport assimp.IOSystem.IOStream;\r\nclass DefaultIOSystem extends IOStream {\r\n    public function new() {\r\n        super();\r\n    }\r\n}\r\n","package assimp;\r\n\r\n\r\n// ------------------------------------------------------------------------------------\r\n/** @brief CPP-API: Abstract interface for custom progress report receivers.\r\n *\r\n *  Each Importer instance maintains its own ProgressHandler. The default implementation provided by Assimp\r\n *  doesn't do anything at all. */\r\nclass ProgressHandler {\r\n    public var _progressFunction:Float -> Void;\r\n\r\n    public function new() {\r\n        _progressFunction = function(v) {\r\n\r\n        }\r\n    }\r\n\r\n    public function progressFunction(f:Float -> Void) {\r\n        _progressFunction = f;\r\n    }\r\n    // -------------------------------------------------------------------\r\n    /** @brief Progress callback.\r\n     *  @param percentage An estimate of the current loading progress, in percent. Or -1f if such an estimate is not\r\n     *  available.\r\n     *\r\n     *  There are restriction on what you may do from within your implementation of this method: no exceptions may be\r\n     *  thrown and no non-const Importer methods may be called. It is not generally possible to predict the number of\r\n     *  callbacks fired during a single import.\r\n     *\r\n     *  @return Return false to abort loading at the next possible occasion (loaders and Assimp are generally allowed to\r\n     *  perform all needed cleanup tasks prior to returning control to the caller). If the loading is aborted,\r\n     *  Importer.readFile() returns always null.    */\r\n    public function update(percentage:Float = -1):Bool {\r\n        this._progressFunction(percentage);\r\n        return false;\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    /** @brief Progress callback for file loading steps\r\n     *  @param numberOfSteps The number of total post-processing steps\r\n     *  @param currentStep The index of the current post-processing step that will run, or equal to numberOfSteps if all\r\n     *  of them has finished. This number is always strictly monotone increasing, although not necessarily linearly.\r\n     *\r\n     *  @note This is currently only used at the start and the end of the file parsing. */\r\n    public function updateFileRead(currentStep:Int /*= 0*/, numberOfSteps:Int /*= 0*/) {\r\n        var f = if (numberOfSteps != 0) currentStep / numberOfSteps else 1 ;\r\n        update(f * 0.5);\r\n    }\r\n\r\n    // -------------------------------------------------------------------\r\n    /** @brief Progress callback for post-processing steps\r\n     *  @param numberOfSteps The number of total post-processing steps\r\n     *  @param currentStep The index of the current post-processing step that will run, or equal to numberOfSteps if all\r\n     *  of them has finished. This number is always strictly monotone increasing, although not necessarily linearly.    */\r\n    public function updatePostProcess(currentStep:Int /*= 0*/, numberOfSteps:Int /*= 0*/) {\r\n        var f = if (numberOfSteps != 0) currentStep / numberOfSteps else 1;\r\n        update(f * 0.5 + 0.5);\r\n    }\r\n\r\n}\r\n","package assimp;\r\nclass DefaultProgressHandler extends ProgressHandler {\r\n    public function new() {\r\n        super();\r\n    }\r\n}\r\n","package assimp;\r\nclass Hash {\r\n    public static function superFastHash(key:String, len:Int = 0, hash:Int = 0):Int {\r\n        if (len == 0) {\r\n            len = key.length;\r\n        }\r\n\r\n        inline function get16bits(key:String, index:Int) {\r\n            return (key.charCodeAt(index) | (key.charCodeAt(index + 1) << 8));\r\n        }\r\n        var length = len;\r\n        var hash = length;\r\n        var tmp = 0;\r\n        var rem = 0;\r\n\r\n        rem = length & 3;\r\n        length >>= 2;\r\n\r\n        // Mix function, iterates through input string in 4 byte chunks.\r\n        var i = 0;\r\n        while (i < length) {\r\n            hash += get16bits(key, i);\r\n            tmp = (get16bits(key, i + 2) << 11) ^ hash;\r\n            hash = (hash << 16) ^ tmp;\r\n            hash += hash >> 11;\r\n            i += 4;\r\n        }\r\n\r\n        switch (rem) {\r\n            case 3:\r\n                hash += get16bits(key, i);\r\n                hash ^= hash << 16;\r\n                hash ^= key.charCodeAt(i + 1);\r\n                hash += hash >> 11;\r\n\r\n            case 2:\r\n                hash += get16bits(key, i);\r\n                hash ^= hash << 11;\r\n                hash += hash >> 17;\r\n            case 1:\r\n                hash += key.charCodeAt(i);\r\n                hash ^= hash << 10;\r\n                hash += hash >> 1;\r\n        }\r\n\r\n        /* Force \"avalanching\" of final 127 bits */\r\n        hash ^= hash << 3;\r\n        hash += hash >> 5;\r\n        hash ^= hash << 4;\r\n        hash += hash >> 17;\r\n        hash ^= hash << 25;\r\n        hash += hash >> 6;\r\n\r\n        return hash;\r\n    }\r\n\r\n}\r\n","package assimp;\r\n\r\nimport haxe.io.BytesOutput;\r\nimport haxe.io.Bytes;\r\nimport assimp.format.Defs.AiColor3D;\r\nimport assimp.format.Anim.AiQuatKey;\r\nimport assimp.format.Anim.AiVectorKey;\r\nimport assimp.format.Defs.AiMatrix4x4;\r\nimport assimp.format.Mesh.AiVertexWeight;\r\nimport assimp.format.Defs.AiQuaternion;\r\nimport assimp.format.Defs.AiColor4D;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.IOSystem.IOStream;\r\ntypedef Read<T> = IOStream -> T ;\r\nclass IOStreamUtil {\r\n\r\n// -----------------------------------------------------------------------------------\r\n    inline static public function readT<T>(stream:IOStream, r:Read<T>) {\r\n        var t = r(stream);\r\n        return t;\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    static public function readAiVector3D(stream:IOStream) {\r\n        var v = new AiVector3D();\r\n        v.x = stream.readFloat();\r\n        v.y = stream.readFloat();\r\n        v.z = stream.readFloat();\r\n        return v;\r\n    }\r\n\r\n    static public function readAiColor3D(stream:IOStream) {\r\n        var c = new AiColor3D();\r\n        c.r = stream.readFloat();\r\n        c.g = stream.readFloat();\r\n        c.b = stream.readFloat();\r\n        return c;\r\n    }\r\n// -----------------------------------------------------------------------------------\r\n    static public function readAiColor4D(stream:IOStream) {\r\n        var c = new AiColor4D();\r\n        c.r = stream.readFloat();\r\n        c.g = stream.readFloat();\r\n        c.b = stream.readFloat();\r\n        c.a = stream.readFloat();\r\n        return c;\r\n    }\r\n\r\n    static public function writeAiColor4D(stream:BytesOutput, c:AiColor4D) {\r\n\r\n        stream.writeFloat(c.r);\r\n        stream.writeFloat(c.g);\r\n        stream.writeFloat(c.b);\r\n        stream.writeFloat(c.a);\r\n        return stream;\r\n    }\r\n// -----------------------------------------------------------------------------------\r\n    static public function readAiQuaternion(stream:IOStream) {\r\n        var v = new AiQuaternion();\r\n        v.w = stream.readFloat();\r\n        v.x = stream.readFloat();\r\n        v.y = stream.readFloat();\r\n        v.z = stream.readFloat();\r\n        return v;\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    static public function readAiString(stream:IOStream):String {\r\n        var len = stream.readInt32();\r\n        if (len > 0) {\r\n            var s = stream.readString(len);\r\n            return s;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static public function writeAiString(stream:BytesOutput, s:String):BytesOutput {\r\n        if (s == null) {\r\n            throw \"error null writeAiString str\";\r\n        }\r\n        var tmp = new BytesOutput();\r\n        tmp.writeString(s);\r\n        var len = tmp.length;\r\n        stream.writeInt32(len);\r\n        stream.writeString(s);\r\n        return stream;\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    static public function readAiVertexWeight(stream:IOStream) {\r\n        var w:AiVertexWeight = new AiVertexWeight();\r\n        w.vertexId = stream.readInt32(); //uint;\r\n        w.weight = stream.readFloat();\r\n        return w;\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    static public function readAiMatrix4x4(stream:IOStream) {\r\n        /* aiMatrix4x4 m;\r\n    for (unsigned int i = 0; i < 4;++i) {\r\n        for (unsigned int i2 = 0; i2 < 4;++i2) {\r\n            m[i][i2] = Read<float>(stream);\r\n            // Assimp aiMatrix4x4 are row-major meanwhile\r\n        }\r\n    }*/\r\n\r\n        // Assimp aiMatrix4x4 are row-major meanwhile\r\n\r\n        var arr:Array<Float> = [for (i in 0...16) stream.readFloat()];\r\n        // glm mat4 are column-major (so are OpenGL matrices)\r\n//        var m:AiMatrix4x4 = new AiMatrix4x4(\r\n//            arr[ 0], arr[ 1], arr[ 2], arr[3],\r\n//            arr[ 4], arr[ 5], arr[ 6], arr[7],\r\n//            arr[ 8], arr[ 9], arr[10], arr[11],\r\n//            arr[ 12], arr[ 13], arr[14], arr[15]\r\n//        );\r\n        var m:AiMatrix4x4 = arr;\r\n        return m;\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    static public function readAiVectorKey(stream:IOStream) {\r\n        var v:AiVectorKey = new AiVectorKey();\r\n        v.time = stream.readDouble();\r\n        v.value = readAiVector3D(stream);\r\n        return v;\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    static public function readAiQuatKey(stream:IOStream) {\r\n        var v = new AiQuatKey();\r\n        v.time = stream.readDouble();\r\n        v.value = readAiQuaternion(stream);\r\n        return v;\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    static public function readArray<T>(stream:IOStream, r:Read<T>, out:Array<T>, size:Int) {\r\n        for (i in 0...size) {\r\n            out[i] = readT(stream, r);\r\n        }\r\n        return out;\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    static public function readBounds(stream:IOStream, size:Any, n:Int) {\r\n        // not sure what to do here, the data isn't really useful.\r\n        //stream.seek(size * n);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) 2017 Kenton Hamaluik\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at:\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n*/\r\npackage glm;\r\n@:expose\r\n#if kha\r\nimport kha.math.FastVector3;\r\n#else\r\n@:dox(hide)\r\n@:allow(glm.Vec3)\r\nclass Vec3Base {\r\n    public  function new() {}\r\n\r\n    public var x:Float;\r\n    public var y:Float;\r\n    public  var z:Float;\r\n}\r\n#end\r\n@:expose(\"glm.Vec3Util\")\r\n/**\r\n  A three-element vector\r\n */\r\n#if kha\r\nabstract Vec3(FastVector3) from FastVector3 to FastVector3  {\r\n#else\r\nabstract Vec3(Vec3Base) {\r\n#end\r\n    /**\r\n      Accessor for the first element of the vector\r\n     */\r\n    public var x(get, set):Float;\r\n    private inline function get_x():Float return this.x;\r\n    private inline function set_x(v:Float):Float return this.x = v;\r\n\r\n    /**\r\n      Accessor for the second element of the vector\r\n     */\r\n    public var y(get, set):Float;\r\n    private inline function get_y():Float return this.y;\r\n    private inline function set_y(v:Float):Float return this.y = v;\r\n\r\n    /**\r\n      Accessor for the third element of the vector\r\n     */\r\n    public var z(get, set):Float;\r\n    private inline function get_z():Float return this.z;\r\n    private inline function set_z(v:Float):Float return this.z = v;\r\n    \r\n    /**\r\n      Accessor for the first element of the vector\r\n     */\r\n    public var r(get, set):Float;\r\n    private inline function get_r():Float return this.x;\r\n    private inline function set_r(v:Float):Float return this.x = v;\r\n\r\n    /**\r\n      Accessor for the second element of the vector\r\n     */\r\n    public var g(get, set):Float;\r\n    private inline function get_g():Float return this.y;\r\n    private inline function set_g(v:Float):Float return this.y = v;\r\n\r\n    /**\r\n      Accessor for the third element of the vector\r\n     */\r\n    public var b(get, set):Float;\r\n    private inline function get_b():Float return this.z;\r\n    private inline function set_b(v:Float):Float return this.z = v;\r\n\r\n    /**\r\n      Read an element using an index\r\n      @param key the index to use\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function get(key:Int):Float {\r\n        return switch(key) {\r\n            case 0: x;\r\n            case 1: y;\r\n            case 2: z;\r\n            case _: throw 'Index ${key} out of bounds (0-2)!';\r\n        };\r\n    }\r\n\r\n    /**\r\n      Write to an element using an index\r\n      @param key the index to use\r\n      @param value the value to set\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function set(key:Int, value:Float):Float {\r\n        return switch(key) {\r\n            case 0: x = value;\r\n            case 1: y = value;\r\n            case 2: z = value;\r\n            case _: throw 'Index ${key} out of bounds (0-2)!';\r\n        };\r\n    }\r\n\r\n    public inline function new(x:Float = 0, y:Float = 0, z:Float = 0) {\r\n        #if kha\r\n        this = new FastVector3();\r\n        #else\r\n        this = new Vec3Base();\r\n        #end\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n\r\n    /**\r\n      Checks if `this == v` on an element-by-element basis\r\n      @param v - The vector to check against\r\n      @return Bool\r\n     */\r\n    public inline function equals(b:Vec3):Bool {\r\n        return !(\r\n               Math.abs(x - b.x) >= glm.GLM.EPSILON\r\n            || Math.abs(y - b.y) >= glm.GLM.EPSILON\r\n            || Math.abs(z - b.z) >= glm.GLM.EPSILON\r\n        );\r\n    }\r\n\r\n    /**\r\n      Creates a string reprentation of `this`\r\n      @return String\r\n     */\r\n    public inline function toString():String {\r\n        return\r\n            '<${this.x}, ${this.y}, ${this.z}>';\r\n    }\r\n\r\n    /**\r\n      Calculates the square of the magnitude of the vector, to save calculation time if the actual magnitude isn't needed\r\n      @return Float\r\n     */\r\n    public inline function lengthSquared():Float {\r\n        return x*x + y*y + z*z;\r\n    }\r\n\r\n    /**\r\n      Calculates the magnitude of the vector\r\n      @return Float\r\n     */\r\n    public inline function length():Float {\r\n        return Math.sqrt(lengthSquared());\r\n    }\r\n\r\n    /**\r\n      Copies one vector into another\r\n      @param src The vector to copy from\r\n      @param dest The vector to copy into\r\n      @return Vec3\r\n     */\r\n    public inline static function copy(src:Vec3, dest:Vec3):Vec3 {\r\n        dest.x = src.x;\r\n        dest.y = src.y;\r\n        dest.z = src.z;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Utility for setting an entire vector at once\r\n      @param dest The vector to set values into\r\n      @param x \r\n      @param y \r\n      @param z \r\n      @return Vec3\r\n     */\r\n    public inline static function setComponents(dest:Vec3, x:Float = 0, y:Float = 0, z:Float = 0):Vec3 {\r\n        dest.x = x;\r\n        dest.y = y;\r\n        dest.z = z;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Adds two vectors on an element-by-element basis\r\n      @param a \r\n      @param b \r\n      @param dest The vector to store the result in\r\n      @return Vec3\r\n     */\r\n    public inline static function addVec(a:Vec3, b:Vec3, dest:Vec3):Vec3 {\r\n        dest.x = a.x + b.x;\r\n        dest.y = a.y + b.y;\r\n        dest.z = a.z + b.z;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Subtracts `b` from `a` on an element-by-element basis\r\n      @param a \r\n      @param b \r\n      @param dest The vector to store the result in\r\n      @return Vec3\r\n     */\r\n    public inline static function subtractVec(a:Vec3, b:Vec3, dest:Vec3):Vec3 {\r\n        dest.x = a.x - b.x;\r\n        dest.y = a.y - b.y;\r\n        dest.z = a.z - b.z;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `addVec(a, b, new Vec3())`\r\n      @param a \r\n      @param b \r\n      @return Vec3\r\n     */\r\n    @:op(A + B)\r\n    inline static function addVecOp(a:Vec3, b:Vec3):Vec3 {\r\n        return addVec(a, b, new Vec3());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `subtractVec(a, b, new Vec3())`\r\n      @param a \r\n      @param b \r\n      @return Vec3\r\n     */\r\n    @:op(A - B)\r\n    inline static function subtractVecOp(a:Vec3, b:Vec3):Vec3 {\r\n        return subtractVec(a, b, new Vec3());\r\n    }\r\n\r\n    /**\r\n      Adds a scalar to a vector\r\n      @param a The vector to add a scalar to\r\n      @param s A scalar to add\r\n      @param dest The vector to store the result in\r\n      @return Vec3\r\n     */\r\n    public inline static function addScalar(a:Vec3, s:Float, dest:Vec3):Vec3 {\r\n        dest.x = a.x + s;\r\n        dest.y = a.y + s;\r\n        dest.z = a.z + s;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Multiplies the elements of `a` by `s`, storing the result in `dest`\r\n      @param a \r\n      @param s \r\n      @param dest \r\n      @return Vec3\r\n     */\r\n    public inline static function multiplyScalar(a:Vec3, s:Float, dest:Vec3):Vec3 {\r\n        dest.x = a.x * s;\r\n        dest.y = a.y * s;\r\n        dest.z = a.z * s;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `addScalar(a, s, new Vec3())`\r\n      @param a \r\n      @param s \r\n      @return Vec3\r\n     */\r\n    @:op(A + B)\r\n    inline static function addScalarOp(a:Vec3, s:Float):Vec3 {\r\n        return addScalar(a, s, new Vec3());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `addScalar(a, -s, new Vec3())`\r\n      @param a \r\n      @param s \r\n      @return Vec3\r\n     */\r\n    @:op(A - B)\r\n    inline static function subtractScalarOp(a:Vec3, s:Float):Vec3 {\r\n        return addScalar(a, -s, new Vec3());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `multiplyScalar(a, s, new Vec3())`\r\n      @param a \r\n      @param s \r\n      @return Vec3\r\n     */\r\n    @:op(A * B)\r\n    inline static function multiplyScalarOp(a:Vec3, s:Float):Vec3 {\r\n        return multiplyScalar(a, s, new Vec3());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `multiplyScalar(a, 1/s, new Vec3())`\r\n      @param a \r\n      @param s \r\n      @return Vec3\r\n     */\r\n    @:op(A / B)\r\n    inline static function divideScalarOp(a:Vec3, s:Float):Vec3 {\r\n        return multiplyScalar(a, 1/s, new Vec3());\r\n    }\r\n\r\n    /**\r\n      Calculates the square of the distance between two vectors\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function distanceSquared(a:Vec3, b:Vec3):Float {\r\n        return (a.x - b.x) * (a.x - b.x) +\r\n            (a.y - b.y) * (a.y - b.y) +\r\n            (a.z - b.z) * (a.z - b.z);\r\n    }\r\n\r\n    /**\r\n      Calculates the distance (magnitude) between two vectors\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function distance(a:Vec3, b:Vec3):Float {\r\n        return Math.sqrt(distanceSquared(a, b));\r\n    }\r\n\r\n    /**\r\n      Calculates the dot product of two vectors\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function dot(a:Vec3, b:Vec3):Float {\r\n        return a.x * b.x +\r\n            a.y * b.y +\r\n            a.z * b.z;\r\n    }\r\n\r\n    /**\r\n      Calculates the cross product of `a` and `b`\r\n      @param a The left-hand side vector to cross\r\n      @param b The right-hand side vector to cross\r\n      @param dest Where to store the result\r\n      @return Vec3 `dest`\r\n     */\r\n    public inline static function cross(a:Vec3, b:Vec3, dest:Vec3):Vec3 {\r\n        // TODO: better caching?\r\n        dest = new Vec3(\r\n            a.y * b.z - a.z * b.y,\r\n            a.z * b.x - a.x * b.z,\r\n            a.x * b.y - a.y * b.x);\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Normalizes `v` such that `v.length() == 1`, and stores the result in `dest`\r\n      @param v \r\n      @param dest \r\n      @return Vec3\r\n     */\r\n    public inline static function normalize(v:Vec3, dest:Vec3):Vec3 {\r\n        var length:Float = v.length();\r\n        var mult:Float = 0;\r\n        if(length >= glm.GLM.EPSILON) {\r\n            mult = 1 / length;\r\n        }\r\n        return Vec3.multiplyScalar(v, mult, dest);\r\n    }\r\n\r\n    /**\r\n      Linearly interpolates between `a` and `b`.\r\n      @param a The value when `t == 0`\r\n      @param b The value when `t == 1`\r\n      @param t A value between `0` and `1`, not clamped by the function\r\n      @param dest The vector to store the result in\r\n      @return Vec3\r\n     */\r\n    public inline static function lerp(a:Vec3, b:Vec3, t:Float, dest:Vec3):Vec3 {\r\n        dest.x = glm.GLM.lerp(a.x, b.x, t);\r\n        dest.y = glm.GLM.lerp(a.y, b.y, t);\r\n        dest.z = glm.GLM.lerp(a.z, b.z, t);\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Construct a Vec3 from an array of floats\r\n      @param arr an array with 3 elements, corresponding to x, y, z\r\n      @return Vec3\r\n     */\r\n    @:from\r\n    public inline static function fromFloatArray(arr:Array<Float>):Vec3 {\r\n        return new Vec3(arr[0], arr[1], arr[2]);\r\n    }\r\n\r\n    /**\r\n      Converts this into a 3-element array of floats\r\n      @return Array<Float>\r\n     */\r\n    @:to\r\n    public inline function toFloatArray():Array<Float> {\r\n        return [x, y, z];\r\n    }\r\n}","/*\r\n * Copyright (c) 2017 Kenton Hamaluik\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at:\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n*/\r\npackage glm;\r\n@:expose\r\n#if kha\r\nimport kha.math.FastVector4;\r\n#else\r\n@:dox(hide)\r\n@:allow(glm.Vec4)\r\nclass Vec4Base {\r\n    public function new() {}\r\n\r\n    public  var x:Float;\r\n    public var y:Float;\r\n    public var z:Float;\r\n    public  var w:Float;\r\n}\r\n#end\r\n@:expose(\"glm.Vec4Util\")\r\n/**\r\n  A four-element vector\r\n */\r\n#if kha\r\nabstract Vec4(FastVector4) from FastVector4 to FastVector4  {\r\n#else\r\nabstract Vec4(Vec4Base) {\r\n#end\r\n    /**\r\n      Accessor for the first element of the vector\r\n     */\r\n    public var x(get, set):Float;\r\n    private inline function get_x():Float return this.x;\r\n    private inline function set_x(v:Float):Float return this.x = v;\r\n\r\n    /**\r\n      Accessor for the second element of the vector\r\n     */\r\n    public var y(get, set):Float;\r\n    private inline function get_y():Float return this.y;\r\n    private inline function set_y(v:Float):Float return this.y = v;\r\n\r\n    /**\r\n      Accessor for the third element of the vector\r\n     */\r\n    public var z(get, set):Float;\r\n    private inline function get_z():Float return this.z;\r\n    private inline function set_z(v:Float):Float return this.z = v;\r\n\r\n    /**\r\n      Accessor for the fourth element of the vector\r\n     */\r\n    public var w(get, set):Float;\r\n    private inline function get_w():Float return this.w;\r\n    private inline function set_w(v:Float):Float return this.w = v;\r\n    \r\n    /**\r\n      Accessor for the first element of the vector\r\n     */\r\n    public var r(get, set):Float;\r\n    private inline function get_r():Float return this.x;\r\n    private inline function set_r(v:Float):Float return this.x = v;\r\n\r\n    /**\r\n      Accessor for the second element of the vector\r\n     */\r\n    public var g(get, set):Float;\r\n    private inline function get_g():Float return this.y;\r\n    private inline function set_g(v:Float):Float return this.y = v;\r\n\r\n    /**\r\n      Accessor for the third element of the vector\r\n     */\r\n    public var b(get, set):Float;\r\n    private inline function get_b():Float return this.z;\r\n    private inline function set_b(v:Float):Float return this.z = v;\r\n\r\n    /**\r\n      Accessor for the fourth element of the vector\r\n     */\r\n    public var a(get, set):Float;\r\n    private inline function get_a():Float return this.w;\r\n    private inline function set_a(v:Float):Float return this.w = v;\r\n\r\n    /**\r\n      Read an element using an index\r\n      @param key the index to use\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function get(key:Int):Float {\r\n        return switch(key) {\r\n            case 0: x;\r\n            case 1: y;\r\n            case 2: z;\r\n            case 3: w;\r\n            case _: throw 'Index ${key} out of bounds (0-3)!';\r\n        };\r\n    }\r\n\r\n    /**\r\n      Write to an element using an index\r\n      @param key the index to use\r\n      @param value the value to set\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function set(key:Int, value:Float):Float {\r\n        return switch(key) {\r\n            case 0: x = value;\r\n            case 1: y = value;\r\n            case 2: z = value;\r\n            case 3: w = value;\r\n            case _: throw 'Index ${key} out of bounds (0-3)!';\r\n        };\r\n    }\r\n\r\n    public inline function new(x:Float = 0, y:Float = 0, z:Float = 0, w:Float = 0) {\r\n        #if kha\r\n        this = new FastVector4();\r\n        #else\r\n        this = new Vec4Base();\r\n        #end\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n\r\n    /**\r\n      Checks if `this == v` on an element-by-element basis\r\n      @param v - The vector to check against\r\n      @return Bool\r\n     */\r\n    public inline function equals(b:Vec4):Bool {\r\n        return !(\r\n               Math.abs(x - b.x) >= glm.GLM.EPSILON\r\n            || Math.abs(y - b.y) >= glm.GLM.EPSILON\r\n            || Math.abs(z - b.z) >= glm.GLM.EPSILON\r\n            || Math.abs(w - b.w) >= glm.GLM.EPSILON\r\n        );\r\n    }\r\n\r\n    /**\r\n      Creates a string reprentation of `this`\r\n      @return String\r\n     */\r\n    public inline function toString():String {\r\n        return\r\n            '<${this.x}, ${this.y}, ${this.z}, ${this.w}>';\r\n    }\r\n\r\n    /**\r\n      Calculates the square of the magnitude of the vector, to save calculation time if the actual magnitude isn't needed\r\n      @return Float\r\n     */\r\n    public inline function lengthSquared():Float {\r\n        return x*x + y*y + z*z + w*w;\r\n    }\r\n\r\n    /**\r\n      Calculates the magnitude of the vector\r\n      @return Float\r\n     */\r\n    public inline function length():Float {\r\n        return Math.sqrt(lengthSquared());\r\n    }\r\n\r\n    /**\r\n      Copies one vector into another\r\n      @param src The vector to copy from\r\n      @param dest The vector to copy into\r\n      @return Vec4\r\n     */\r\n    public inline static function copy(src:Vec4, dest:Vec4):Vec4 {\r\n        dest.x = src.x;\r\n        dest.y = src.y;\r\n        dest.z = src.z;\r\n        dest.w = src.w;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Utility for setting an entire vector at once\r\n      @param dest The vector to set values into\r\n      @param x \r\n      @param y \r\n      @param z \r\n      @param w \r\n      @return Vec4\r\n     */\r\n    public inline static function setComponents(dest:Vec4, x:Float = 0, y:Float = 0, z:Float = 0, w:Float = 0):Vec4 {\r\n        dest.x = x;\r\n        dest.y = y;\r\n        dest.z = z;\r\n        dest.w = w;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Adds two vectors on an element-by-element basis\r\n      @param a \r\n      @param b \r\n      @param dest The vector to store the result in\r\n      @return Vec4\r\n     */\r\n    public inline static function addVec(a:Vec4, b:Vec4, dest:Vec4):Vec4 {\r\n        dest.x = a.x + b.x;\r\n        dest.y = a.y + b.y;\r\n        dest.z = a.z + b.z;\r\n        dest.w = a.w + b.w;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Subtracts `b` from `a` on an element-by-element basis\r\n      @param a \r\n      @param b \r\n      @param dest The vector to store the result in\r\n      @return Vec4\r\n     */\r\n    public inline static function subtractVec(a:Vec4, b:Vec4, dest:Vec4):Vec4 {\r\n        dest.x = a.x - b.x;\r\n        dest.y = a.y - b.y;\r\n        dest.z = a.z - b.z;\r\n        dest.w = a.w - b.w;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `addVec(a, b, new Vec4())`\r\n      @param a \r\n      @param b \r\n      @return Vec4\r\n     */\r\n    @:op(A + B)\r\n    inline static function addVecOp(a:Vec4, b:Vec4):Vec4 {\r\n        return addVec(a, b, new Vec4());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `subtractVec(a, b, new Vec4())`\r\n      @param a \r\n      @param b \r\n      @return Vec4\r\n     */\r\n    @:op(A - B)\r\n    inline static function subtractVecOp(a:Vec4, b:Vec4):Vec4 {\r\n        return subtractVec(a, b, new Vec4());\r\n    }\r\n\r\n    /**\r\n      Adds a scalar to a vector\r\n      @param a The vector to add a scalar to\r\n      @param s A scalar to add\r\n      @param dest The vector to store the result in\r\n      @return Vec4\r\n     */\r\n    public inline static function addScalar(a:Vec4, s:Float, dest:Vec4):Vec4 {\r\n        dest.x = a.x + s;\r\n        dest.y = a.y + s;\r\n        dest.z = a.z + s;\r\n        dest.w = a.w + s;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Multiplies the elements of `a` by `s`, storing the result in `dest`\r\n      @param a \r\n      @param s \r\n      @param dest \r\n      @return Vec4\r\n     */\r\n    public inline static function multiplyScalar(a:Vec4, s:Float, dest:Vec4):Vec4 {\r\n        dest.x = a.x * s;\r\n        dest.y = a.y * s;\r\n        dest.z = a.z * s;\r\n        dest.w = a.w * s;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `addScalar(a, s, new Vec4())`\r\n      @param a \r\n      @param s \r\n      @return Vec4\r\n     */\r\n    @:op(A + B)\r\n    inline static function addScalarOp(a:Vec4, s:Float):Vec4 {\r\n        return addScalar(a, s, new Vec4());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `addScalar(a, -s, new Vec4())`\r\n      @param a \r\n      @param s \r\n      @return Vec4\r\n     */\r\n    @:op(A - B)\r\n    inline static function subtractScalarOp(a:Vec4, s:Float):Vec4 {\r\n        return addScalar(a, -s, new Vec4());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `multiplyScalar(a, s, new Vec4())`\r\n      @param a \r\n      @param s \r\n      @return Vec4\r\n     */\r\n    @:op(A * B)\r\n    inline static function multiplyScalarOp(a:Vec4, s:Float):Vec4 {\r\n        return multiplyScalar(a, s, new Vec4());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `multiplyScalar(a, 1/s, new Vec4())`\r\n      @param a \r\n      @param s \r\n      @return Vec4\r\n     */\r\n    @:op(A / B)\r\n    inline static function divideScalarOp(a:Vec4, s:Float):Vec4 {\r\n        return multiplyScalar(a, 1/s, new Vec4());\r\n    }\r\n\r\n    /**\r\n      Calculates the square of the distance between two vectors\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function distanceSquared(a:Vec4, b:Vec4):Float {\r\n        return (a.x - b.x) * (a.x - b.x) +\r\n            (a.y - b.y) * (a.y - b.y) +\r\n            (a.z - b.z) * (a.z - b.z) +\r\n            (a.w - b.w) * (a.w - b.w);\r\n    }\r\n\r\n    /**\r\n      Calculates the distance (magnitude) between two vectors\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function distance(a:Vec4, b:Vec4):Float {\r\n        return Math.sqrt(distanceSquared(a, b));\r\n    }\r\n\r\n    /**\r\n      Calculates the dot product of two vectors\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function dot(a:Vec4, b:Vec4):Float {\r\n        return a.x * b.x +\r\n            a.y * b.y +\r\n            a.z * b.z +\r\n            a.w * b.w;\r\n    }\r\n\r\n    /**\r\n      Normalizes `v` such that `v.length() == 1`, and stores the result in `dest`\r\n      @param v \r\n      @param dest \r\n      @return Vec4\r\n     */\r\n    public inline static function normalize(v:Vec4, dest:Vec4):Vec4 {\r\n        var length:Float = v.length();\r\n        var mult:Float = 0;\r\n        if(length >= glm.GLM.EPSILON) {\r\n            mult = 1 / length;\r\n        }\r\n        return Vec4.multiplyScalar(v, mult, dest);\r\n    }\r\n\r\n    /**\r\n      Linearly interpolates between `a` and `b`.\r\n      @param a The value when `t == 0`\r\n      @param b The value when `t == 1`\r\n      @param t A value between `0` and `1`, not clamped by the function\r\n      @param dest The vector to store the result in\r\n      @return Vec4\r\n     */\r\n    public inline static function lerp(a:Vec4, b:Vec4, t:Float, dest:Vec4):Vec4 {\r\n        dest.x = glm.GLM.lerp(a.x, b.x, t);\r\n        dest.y = glm.GLM.lerp(a.y, b.y, t);\r\n        dest.z = glm.GLM.lerp(a.z, b.z, t);\r\n        dest.w = glm.GLM.lerp(a.w, b.w, t);\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Construct a Vec4 from an array of floats\r\n      @param arr an array with 4 elements, corresponding to x, y, z, w\r\n      @return Vec4\r\n     */\r\n    @:from\r\n    public inline static function fromFloatArray(arr:Array<Float>):Vec4 {\r\n        return new Vec4(arr[0], arr[1], arr[2], arr[3]);\r\n    }\r\n\r\n    /**\r\n      Converts this into a 4-element array of floats\r\n      @return Array<Float>\r\n     */\r\n    @:to\r\n    public inline function toFloatArray():Array<Float> {\r\n        return [x, y, z, w];\r\n    }\r\n}","/*\r\n * Copyright (c) 2017 Kenton Hamaluik\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at:\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n*/\r\npackage glm;\r\n@:expose\r\n#if kha\r\nimport kha.math.FastVector4;\r\n#else\r\n@:dox(hide)\r\n@:allow(glm.Quat)\r\nclass QuatBase {\r\n    public  function new() {}\r\n\r\n    public  var x:Float;\r\n    public  var y:Float;\r\n    public  var z:Float;\r\n    public var w:Float;\r\n}\r\n#end\r\n@:expose(\"glm.QuatUtil\")\r\n/**\r\n  A quaternion\r\n */\r\n#if kha\r\nabstract Quat(FastVector4) from FastVector4 to FastVector4  {\r\n#else\r\nabstract Quat(QuatBase) {\r\n#end\r\n    /**\r\n      Accessor for the first element of the quaternion\r\n     */\r\n    public var x(get, set):Float;\r\n    private inline function get_x():Float return this.x;\r\n    private inline function set_x(v:Float):Float return this.x = v;\r\n\r\n    /**\r\n      Accessor for the second element of the quaternion\r\n     */\r\n    public var y(get, set):Float;\r\n    private inline function get_y():Float return this.y;\r\n    private inline function set_y(v:Float):Float return this.y = v;\r\n\r\n    /**\r\n      Accessor for the third element of the quaternion\r\n     */\r\n    public var z(get, set):Float;\r\n    private inline function get_z():Float return this.z;\r\n    private inline function set_z(v:Float):Float return this.z = v;\r\n\r\n    /**\r\n      Accessor for the fourth element of the quaternion\r\n     */\r\n    public var w(get, set):Float;\r\n    private inline function get_w():Float return this.w;\r\n    private inline function set_w(v:Float):Float return this.w = v;\r\n\r\n    /**\r\n      Read an element using an index\r\n      @param key the index to use\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function get(key:Int):Float {\r\n        return switch(key) {\r\n            case 0: x;\r\n            case 1: y;\r\n            case 2: z;\r\n            case 3: w;\r\n            case _: throw 'Index ${key} out of bounds (0-3)!';\r\n        };\r\n    }\r\n\r\n    /**\r\n      Write to an element using an index\r\n      @param key the index to use\r\n      @param value the value to set\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function set(key:Int, value:Float):Float {\r\n        return switch(key) {\r\n            case 0: x = value;\r\n            case 1: y = value;\r\n            case 2: z = value;\r\n            case 3: w = value;\r\n            case _: throw 'Index ${key} out of bounds (0-3)!';\r\n        };\r\n    }\r\n\r\n    public inline function new(x:Float = 0, y:Float = 0, z:Float = 0, w:Float = 1) {\r\n        #if kha\r\n        this = new FastVector4();\r\n        #else\r\n        this = new QuatBase();\r\n        #end\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n\r\n    /**\r\n      Checks if `this == v` on an element-by-element basis\r\n      @param v The quaternion to check against\r\n      @return Bool\r\n     */\r\n    public inline function equals(b:Quat):Bool {\r\n        return !(\r\n               Math.abs(x - b.x) >= glm.GLM.EPSILON\r\n            || Math.abs(y - b.y) >= glm.GLM.EPSILON\r\n            || Math.abs(z - b.z) >= glm.GLM.EPSILON\r\n            || Math.abs(w - b.w) >= glm.GLM.EPSILON\r\n        );\r\n    }\r\n\r\n    /**\r\n      Creates a string reprentation of `this`\r\n      @return String\r\n     */\r\n    public inline function toString():String {\r\n        return\r\n            '{${this.x}, ${this.y}, ${this.z}, ${this.w}}';\r\n    }\r\n\r\n    /**\r\n      Calculates the square of the magnitude of the quaternion, to save calculation time if the actual magnitude isn't needed\r\n      @return Float\r\n     */\r\n    public inline function lengthSquared():Float {\r\n        return x*x + y*y + z*z + w*w;\r\n    }\r\n\r\n    /**\r\n      Calculates the magnitude of the quaternion\r\n      @return Float\r\n     */\r\n    public inline function length():Float {\r\n        return Math.sqrt(lengthSquared());\r\n    }\r\n\r\n    /**\r\n      Normalizes `q` such that `q.length() == 1`, and stores the result in `dest`\r\n      @param q \r\n      @param dest \r\n      @return Quat\r\n     */\r\n    public inline static function normalize(q:Quat, dest:Quat):Quat {\r\n        var length:Float = q.length();\r\n        var mult:Float = 0;\r\n        if(length >= glm.GLM.EPSILON) {\r\n            mult = 1 / length;\r\n        }\r\n        return Quat.multiplyScalar(q, mult, dest);\r\n    }\r\n\r\n    /**\r\n      Calculates the dot product of two quaternions\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function dot(a:Quat, b:Quat):Float {\r\n        return\r\n            a.x * b.x +\r\n            a.y * b.y +\r\n            a.z * b.z +\r\n            a.w * b.w;\r\n    }\r\n\r\n    /**\r\n      Fills `dest` with an identity quat\r\n      @param dest \r\n      @return Quat\r\n     */\r\n    public inline static function identity(dest:Quat):Quat {\r\n        dest.x = 0;\r\n        dest.y = 0;\r\n        dest.z = 0;\r\n        dest.w = 1;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Copies one quaternion into another\r\n      @param src The quaternion to copy from\r\n      @param dest The quaternion to copy into\r\n      @return Quat\r\n     */\r\n    public inline static function copy(src:Quat, dest:Quat):Quat {\r\n        dest.x = src.x;\r\n        dest.y = src.y;\r\n        dest.z = src.z;\r\n        dest.w = src.w;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Creates a quaternion from an axis and an angle (in radians).\r\n      @param axis The axis to rotate about. Must be normalized first!\r\n      @param angle The angle to rotate by, in radians\r\n      @param dest Where to store the result\r\n      @return Quat\r\n     */\r\n    public inline static function axisAngle(axis:Vec3, angle:Float, dest:Quat):Quat {\r\n        angle *= 0.5;\r\n        var s:Float = Math.sin(angle);\r\n        dest.x = s * axis.x;\r\n        dest.y = s * axis.y;\r\n        dest.z = s * axis.z;\r\n        dest.w = Math.cos(angle);\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Multiplies two quaternions together, both inputs are cached so either can be used as the destination\r\n      @param a The left-hand side quaternion\r\n      @param b The right-hand side quaternion\r\n      @param dest Where to store the result\r\n      @return Quat\r\n     */\r\n    public inline static function multiplyQuats(a:Quat, b:Quat, dest:Quat):Quat {\r\n        var ax:Float = a.x, ay:Float = a.y, az:Float = a.z, aw:Float = a.w;\r\n        var bx:Float = b.x, by:Float = b.y, bz:Float = b.z, bw:Float = b.w;\r\n\r\n        dest.x = ax * bw + aw * bx + ay * bz - az * by;\r\n        dest.y = ay * bw + aw * by + az * bx - ax * bz;\r\n        dest.z = az * bw + aw * bz + ax * by - ay * bx;\r\n        dest.w = aw * bw - ax * bx - ay * by - az * bz;\r\n\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut for `multiplyQuats(a, b, new Quat())`\r\n      @param a The left-hand side quaternion\r\n      @param b The right-hand side quaternion\r\n      @return Quat\r\n     */\r\n    @:op(A * B)\r\n    inline static function multiplyQuatsOp(a:Quat, b:Quat):Quat {\r\n        return multiplyQuats(a, b, new Quat());\r\n    }\r\n\r\n    /**\r\n      Scales `a` by `s`, storing the result in `dest`\r\n      @param a \r\n      @param s \r\n      @param dest \r\n      @return Quat\r\n     */\r\n    public inline static function multiplyScalar(a:Quat, s:Float, dest:Quat):Quat {\r\n        dest.x = a.x * s;\r\n        dest.y = a.y * s;\r\n        dest.z = a.z * s;\r\n        dest.w = a.w * s;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut for `multiplyScalar(a, s, new Quat())`\r\n      @param a \r\n      @param s \r\n      @return Quat\r\n     */\r\n    @:op(A * B)\r\n    inline static function multiplyScalarOp(a:Quat, s:Float):Quat {\r\n        return multiplyScalar(a, s, new Quat());\r\n    }\r\n\r\n    /**\r\n      Linearly interpolates between `a` and `b`. Note: you probably want `slerp`!\r\n      @param a The value when `t == 0`\r\n      @param b The value when `t == 1`\r\n      @param t A value between `0` and `1`, not clamped by the function\r\n      @param dest The vector to store the result in\r\n      @return Quat\r\n     */\r\n    public inline static function lerp(a:Quat, b:Quat, t:Float, dest:Quat):Quat {\r\n        dest.x = glm.GLM.lerp(a.x, b.x, t);\r\n        dest.y = glm.GLM.lerp(a.y, b.y, t);\r\n        dest.z = glm.GLM.lerp(a.z, b.z, t);\r\n        dest.w = glm.GLM.lerp(a.w, b.w, t);\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Spherical-linear interpolates between `a` and `b`\r\n      @param a The value when `t == 0`\r\n      @param b The value when `t == 1`\r\n      @param t A value between `0` and `1`, not clamped by the function\r\n      @param dest The vector to store the result in\r\n      @return Quat\r\n     */\r\n    public inline static function slerp(a:Quat, b:Quat, t:Float, dest:Quat):Quat {\r\n        var bx:Float = b.x, by:Float = b.y, bz:Float = b.z, bw:Float = b.w;\r\n\r\n        // calculate cosine\r\n        var cosTheta:Float = dot(a, b);\r\n\r\n        // if cosTheta < 0, the interpolation will go the long way around\r\n        // invert \r\n        if(cosTheta < 0) {\r\n            cosTheta = -cosTheta;\r\n            bx = -bx;\r\n            by = -by;\r\n            bz = -bz;\r\n            bw = -bw;\r\n        }\r\n\r\n        // perform a linear interpolation when cosTheta is\r\n        // close to 1 to avoid side effect of sin(angle)\r\n        // becoming a zero denominator\r\n        if(cosTheta > 1 - glm.GLM.EPSILON) {\r\n            return lerp(a, b, t, dest);\r\n        }\r\n        else {\r\n            var angle:Float = Math.acos(cosTheta);\r\n            var sa:Float = 1 / Math.sin(angle);\r\n            var i:Float = Math.sin((1 - t) * angle);\r\n            var j:Float = Math.sin(t * angle);\r\n\r\n            dest.x = (i * a.x + j * bx) * sa;\r\n            dest.y = (i * a.y + j * by) * sa;\r\n            dest.z = (i * a.z + j * bz) * sa;\r\n            dest.w = (i * a.w + j * bw) * sa;\r\n            return dest;\r\n        }\r\n    }\r\n\r\n    /**\r\n      Inverts the quaterion `q`, storing the result in `dest`\r\n      @param q \r\n      @param dest \r\n      @return Quat\r\n     */\r\n    public inline static function invert(q:Quat, dest:Quat):Quat {\r\n        var x:Float = q.x, y:Float = q.y, z:Float = q.z, w:Float = q.w;\r\n        var d:Float = dot(q, q);\r\n        var oneOverD:Float = if(d < glm.GLM.EPSILON) 0; else 1 / d;\r\n\r\n        dest.x = -x * oneOverD;\r\n        dest.y = -y * oneOverD;\r\n        dest.z = -z * oneOverD;\r\n        dest.w =  w * oneOverD;\r\n\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Calculates the conjugate of `q`, storing the result in `dest`\r\n      @param q \r\n      @param dest \r\n      @return Quat\r\n     */\r\n    public inline static function conjugate(q:Quat, dest:Quat):Quat {\r\n        dest.x = -1 * q.x;\r\n        dest.y = -1 * q.y;\r\n        dest.z = -1 * q.z;\r\n        dest.w =      q.w;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Constructs a quaternion from roll, pitch, and yaw (x, y, and z axes)\r\n      @param x The angle to rotate around x\r\n      @param y The angle to rotate around y\r\n      @param z The angle to rotate around z\r\n      @param dest Where to store the result\r\n      @return Quat\r\n     */\r\n    public inline static function fromEuler(x:Float, y:Float, z:Float, dest:Quat):Quat {\r\n        var c1:Float = Math.cos(x / 2), c2:Float = Math.cos(y / 2), c3:Float = Math.cos(z / 2);\r\n        var s1:Float = Math.sin(x / 2), s2:Float = Math.sin(y / 2), s3:Float = Math.sin(z / 2);\r\n\r\n        dest.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n        dest.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n        dest.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n        dest.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Construct a Quat from an array of floats\r\n      @param arr an array with 4 elements, corresponding to x, y, z, w\r\n      @return Quat\r\n     */\r\n    @:from\r\n    public inline static function fromFloatArray(arr:Array<Float>):Quat {\r\n        return new Quat(arr[0], arr[1], arr[2], arr[3]);\r\n    }\r\n\r\n    /**\r\n      Converts this into a 4-element array of floats\r\n      @return Array<Float>\r\n     */\r\n    @:to\r\n    public inline function toFloatArray():Array<Float> {\r\n        return [x, y, z, w];\r\n    }\r\n}","package assimp;\r\nimport assimp.format.gltf2.GlTF2Importer;\r\nimport assimp.format.assbin.AssbinLoader;\r\nimport haxe.ds.IntMap;\r\nimport assimp.format.Scene.AiScene;\r\nclass ImporterPimpl {\r\n    /** Format-specific importer worker objects - one for each format we can read.*/\r\n    public var importer:Array<BaseImporter> ;\r\n\r\n    /** Post processing steps we can apply at the imported data. */\r\n    public var postProcessingSteps:Array<BaseProcess> ;\r\n\r\n\r\n/** Progress handler for feedback. */\r\n    public var progressHandler:ProgressHandler ;//= DefaultProgressHandler()\r\n    public var isDefaultProgressHandler:Bool;//= true\r\n\r\n    public var ioSystem:IOSystem;// = DefaultIOSystem()\r\n\r\n\r\n    /** The imported data, if ReadFile() was successful, NULL otherwise. */\r\n    public var scene:AiScene;// = null\r\n\r\n    /** The error description, if there was one. */\r\n    public var errorString:String;//= \"\"\r\n\r\n    public var properties:IntMap<Any>;\r\n\r\n    /** Used for testing - extra verbose mode causes the ValidateDataStructure-Step to be executed before and after\r\n     *  every single postprocess step\r\n     *  disable extra verbose mode by default    */\r\n    public var extraVerbose:Bool;// = false\r\n\r\n    /** Used by post-process steps to share data\r\n     *  Allocate a SharedPostProcessInfo object and store pointers to it in all post-process steps in the list. */\r\n    public var ppShared:Array<Any>;// = SharedPostProcessInfo().also { info -> postProcessingSteps.forEach { it.shared = info } }\r\n    public function new() {\r\n        properties = new IntMap<Any>();\r\n        ppShared = [];\r\n        importer = importerInstanceList();\r\n\r\n        postProcessingSteps = postProcessingStepInstanceList();\r\n    }\r\n\r\n    public function isDefaultHandler() return Std.is(ioSystem, DefaultIOSystem);\r\n\r\n    public function importerInstanceList():Array<BaseImporter> {\r\n        return [new AssbinLoader(), new GlTF2Importer()];\r\n    }\r\n\r\n    public function postProcessingStepInstanceList() {\r\n        return [];\r\n    }\r\n\r\n\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.ds;\n\n@:coreApi class IntMap<T> implements haxe.Constraints.IMap<Int,T> {\n\n\tprivate var h : Dynamic;\n\n\tpublic inline function new() : Void {\n\t\th = {};\n\t}\n\n\tpublic inline function set( key : Int, value : T ) : Void {\n\t\th[key] = value;\n\t}\n\n\tpublic inline function get( key : Int ) : Null<T> {\n\t\treturn h[key];\n\t}\n\n\tpublic inline function exists( key : Int ) : Bool {\n\t\treturn (cast h).hasOwnProperty(key);\n\t}\n\n\tpublic function remove( key : Int ) : Bool {\n\t\tif( !(cast h).hasOwnProperty(key) ) return false;\n\t\tjs.Syntax.delete(h, key);\n\t\treturn true;\n\t}\n\n\tpublic function keys() : Iterator<Int> {\n\t\tvar a = [];\n\t\tuntyped __js__(\"for( var key in {0} ) {1}\", h, if( h.hasOwnProperty(key) ) a.push(key|0));\n\t\treturn a.iterator();\n\t}\n\n\tpublic function iterator() : Iterator<T> {\n\t\treturn untyped {\n\t\t\tref : h,\n\t\t\tit : keys(),\n\t\t\thasNext : function() { return __this__.it.hasNext(); },\n\t\t\tnext : function() { var i = __this__.it.next(); return __this__.ref[i]; }\n\t\t};\n\t}\n\n\t@:runtime public inline function keyValueIterator() : KeyValueIterator<Int, T> {\n\t\treturn new haxe.iterators.MapKeyValueIterator(this);\n\t}\n\n\tpublic function copy() : IntMap<T> {\n\t\tvar copied = new IntMap();\n\t\tfor(key in keys()) copied.set(key, get(key));\n\t\treturn copied;\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar it = keys();\n\t\tfor( i in it ) {\n\t\t\ts.add(i);\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(i)));\n\t\t\tif( it.hasNext() )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n}\n","package assimp;\r\nimport assimp.IOSystem.MemoryIOStream;\r\nimport assimp.IOSystem.IOStream;\r\nimport assimp.IOSystem.MemoryIOSystem;\r\nimport haxe.io.Bytes;\r\nimport Lambda;\r\nimport Lambda;\r\nimport assimp.AiPostProcessStep;\r\nimport assimp.postProcess.ValidateDSProcess;\r\nimport assimp.format.Scene.AiScene;\r\nimport assimp.Types.AiReturn;\r\nimport assimp.AiPostProcessStep as Pps;\r\nclass Importer {\r\n    var prograssHandler:ProgressHandler;\r\n    static var impl = new ImporterPimpl(); // allocate the pimpl first\r\n\r\n    public function new() {\r\n    }\r\n\r\n    public function getErrorString():String {\r\n        return \"\";\r\n    }\r\n    /** Registers a new loader.\r\n     *\r\n     *  @param imp Importer to be added. The Importer instance takes ownership of the pointer, so it will be\r\n     *  automatically deleted with the Importer instance.\r\n     *  @return AI_SUCCESS if the loader has been added. The registration fails if there is already a loader for a\r\n     *  specific file extension.\r\n     */\r\n    public function registerLoader(imp:BaseImporter):AiReturn {\r\n        /*  --------------------------------------------------------------------\r\n            Check whether we would have two loaders for the same file extension\r\n            This is absolutely OK, but we should warn the developer of the new loader that his code will probably never\r\n            be called if the first loader is a bit too lazy in his file checking.\r\n            --------------------------------------------------------------------    */\r\n        var st:Array<String> = imp.extensionList();\r\n        var baked = \"\";\r\n        for (it in st) {\r\n            if (Assimp.DEBUG && isExtensionSupported(it))\r\n                trace(\"The file extension $it is already in use\");\r\n            baked += \"$it \";\r\n        }\r\n        // add the loader\r\n        impl.importer.push(imp);\r\n        trace(\"Registering custom importer for these file extensions: $baked\");\r\n        return AiReturn.SUCCESS;\r\n    }\r\n\r\n    /** Unregisters a loader.\r\n     *\r\n     *  @param imp Importer to be unregistered.\r\n     *  @return AI_SUCCESS if the loader has been removed. The function fails if the loader is currently in use (this\r\n     *  could happen if the Importer instance is used by more than one thread) or if it has not yet been registered.\r\n     */\r\n    public function unregisterLoader(imp:BaseImporter) {\r\n        return if (impl.importer.remove(imp)) {\r\n            trace(\"Unregistering custom importer: \");\r\n            AiReturn.SUCCESS;\r\n        } else {\r\n            trace(\"Unable to remove custom importer: I can't find you ...\");\r\n            AiReturn.FAILURE;\r\n        }\r\n    }\r\n\r\n    /** Registers a new post-process step.\r\n     *\r\n     *  At the moment, there's a small limitation: new post processing steps are added to end of the list, or in other\r\n     *  words, executed last, after all built-in steps.\r\n     *  @param imp Post-process step to be added. The Importer instance takes ownership of the pointer, so it will be\r\n     *  automatically deleted with the Importer instance.\r\n     *  @return AI_SUCCESS if the step has been added correctly.\r\n     */\r\n    public function registerPPStep(imp:BaseProcess):AiReturn {\r\n        impl.postProcessingSteps.push(imp);\r\n        trace(\"Registering custom post-processing step\");\r\n        return AiReturn.SUCCESS;\r\n    }\r\n\r\n    /** Unregisters a post-process step.\r\n     *\r\n     *  @param imp Step to be unregistered.\r\n     *  @return AI_SUCCESS if the step has been removed. The function fails if the step is currently in use (this could happen\r\n     *   if the #Importer instance is used by more than one thread) or\r\n     *   if it has not yet been registered.\r\n     */\r\n    public function unregisterPPStep(imp:BaseProcess) {\r\n        return if (impl.postProcessingSteps.remove(imp)) {\r\n            trace(\"Unregistering custom post-processing step\");\r\n            AiReturn.SUCCESS ;\r\n        }\r\n        else {\r\n            trace(\"Unable to remove custom post-processing step: I can't find you ..\");\r\n            AiReturn.FAILURE;\r\n        }\r\n    }\r\n\r\n    inline public function set<T>(szName:String, value:T) {\r\n        impl.properties.set(Hash.superFastHash(szName), value);\r\n    }\r\n\r\n    inline public function get<T>(szName:String):T {\r\n        return impl.properties.get(Hash.superFastHash(szName));\r\n    }\r\n\r\n    private function writeLogOpening(file:String) {\r\n    }\r\n\r\n    public var progressHandler(get, set):ProgressHandler;\r\n\r\n    function get_progressHandler() return impl.progressHandler;\r\n\r\n    function set_progressHandler(value) {\r\n        impl.progressHandler = value;\r\n        return value;\r\n    }\r\n\r\n    public var ioHandler(get, set):IOSystem;\r\n\r\n    function get_ioHandler() return impl.ioSystem;\r\n\r\n    function set_ioHandler(value) {\r\n        impl.ioSystem = value;\r\n        return value;\r\n    }\r\n\r\n    public function readFile(file:String, ioSystem:IOSystem, flags:Pps):AiScene {\r\n\r\n        writeLogOpening(file);\r\n\r\n        // Check whether this Importer instance has already loaded a scene. In this case we need to delete the old one\r\n        if (impl.scene != null) {\r\n            trace(\"(Deleting previous scene)\");\r\n            freeScene();\r\n        }\r\n\r\n        // First check if the file is accessible at all\r\n        // handled by exception in IOSystem\r\n        /*if (!file.exists()) {\r\n            impl.errorString = \"Unable to open file \\\"$file\\\".\"\r\n            logger.error { impl.errorString }\r\n            return null\r\n        }*/\r\n\r\n//        TODO std::unique_ptr<Profiler> profiler(GetPropertyInteger(AI_CONFIG_GLOB_MEASURE_TIME,0)?new Profiler():NULL);\r\n//        if (profiler) {\r\n//            profiler->BeginRegion(\"total\");\r\n//        }\r\n\r\n        // Find an worker class which can handle the file\r\n        var stream:IOStream = ioHandler.open(file);\r\n        readFileFromStream(file, stream, flags, []);\r\n        ioHandler.close(stream);\r\n        return impl.scene;\r\n    }\r\n\r\n    public function readFileFromMemory(buffer:Bytes, flags:Int, hint:String, buffers:Array<Bytes>):AiScene {\r\n        var MaxLenHint = 200;\r\n        if (buffer.length == 0 || hint != null && hint.length > MaxLenHint) {\r\n            impl.errorString = \"Invalid parameters passed to ReadFileFromMemory()\";\r\n            return null;\r\n        }\r\n        var AI_MEMORYIO_MAGIC_FILENAME = \"___magic___\";\r\n        var fileName = AI_MEMORYIO_MAGIC_FILENAME + \".\" + hint;\r\n        var stream = new MemoryIOStream( buffer);\r\n        if (impl.scene != null) {\r\n            trace(\"(Deleting previous scene)\");\r\n            freeScene();\r\n        }\r\n        var buffs:Array<IOStream> = cast buffers.map(function(b) return new MemoryIOStream( b));\r\n        return readFileFromStream(fileName, stream, flags, buffs);\r\n    }\r\n\r\n    function readFileFromStream(file:String, stream:IOStream, flags:Int, buffers:Array<IOStream>) {\r\n        var imp:BaseImporter = Lambda.find(impl.importer, function(it:BaseImporter)return it.canRead(file, stream, false));\r\n\r\n        if (imp == null) {\r\n            trace(\"Assimp could not find an importer for the file!\");\r\n            return null;\r\n            // not so bad yet ... try format auto detection.\r\n            // TODO()\r\n//            const std::string::size_type s = pFile.find_last_of('.');\r\n//            if (s != std::string::npos) {\r\n//                DefaultLogger::get()->info(\"File extension not known, trying signature-based detection\");\r\n//                for( unsigned int a = 0; a < pimpl->mImporter.size(); a++)  {\r\n//\r\n//                    if( pimpl->mImporter[a]->CanRead( pFile, pimpl->mIOHandler, true)) {\r\n//                    imp = pimpl->mImporter[a];\r\n//                    break;\r\n//                }\r\n//                }\r\n//            }\r\n//            // Put a proper error message if no suitable importer was found\r\n//            if( !imp)   {\r\n//                pimpl->mErrorString = \"No suitable reader found for the file format of file \\\"\" + pFile + \"\\\".\";\r\n//                DefaultLogger::get()->error(pimpl->mErrorString);\r\n//                return NULL;\r\n//            }\r\n        }\r\n\r\n        // Get file size for progress handler\r\n        var fileSize = stream.length;\r\n\r\n        // Dispatch the reading to the worker class for this format\r\n        var desc = imp.info;\r\n        var ext = desc.name;\r\n        trace(\"Found a matching importer for this file format: $ext.\");\r\n        impl.progressHandler.updateFileRead(0, fileSize);\r\n\r\n//        if (profiler) { TODO\r\n//            profiler->BeginRegion(\"import\");\r\n//        }\r\n\r\n        impl.scene = imp.readFile(impl, stream, file, buffers);\r\n        impl.progressHandler.updateFileRead(fileSize, fileSize);\r\n\r\n//        if (profiler) { TODO\r\n//            profiler->EndRegion(\"import\");\r\n//        }\r\n\r\n        // If successful, apply all active post processing steps to the imported data\r\n        if (impl.scene != null) {\r\n\r\n            if (!Assimp.NO.VALIDATEDS_PROCESS)\r\n                // The ValidateDS process is an exception. It is executed first, even before ScenePreprocessor is called.\r\n            if (flags & Pps.ValidateDataStructure != 0) {\r\n                new ValidateDSProcess().executeOnScene(impl);\r\n                if (impl.scene == null) return null;\r\n            }\r\n            // Preprocess the scene and prepare it for post-processing\r\n//            if (profiler) profiler.BeginRegion(\"preprocess\")\r\n\r\n            new ScenePreprocessor().processScene(impl.scene);\r\n\r\n//            if (profiler) profiler.EndRegion(\"preprocess\")\r\n\r\n            // Ensure that the validation process won't be called twice\r\n            applyPostProcessing(flags & ~ Pps.ValidateDataStructure);\r\n        }\r\n            // if failed, extract the error string\r\n        else if (impl.scene == null)\r\n            impl.errorString = imp.errorText;\r\n//        if (profiler) { profiler ->\r\n//            EndRegion(\"total\");\r\n//        }\r\n\r\n        return impl.scene;\r\n    }\r\n    /** Apply post-processing to an already-imported scene.\r\n     *\r\n     *  This is strictly equivalent to calling readFile() with the same flags. However, you can use this separate\r\n     *  function to inspect the imported scene first to fine-tune your post-processing setup.\r\n     *  @param flags_ Provide a bitwise combination of the AiPostProcessSteps flags.\r\n     *  @return A pointer to the post-processed data. This is still the same as the pointer returned by readFile().\r\n     *  However, if post-processing fails, the scene could now be null.\r\n     *  That's quite a rare case, post processing steps are not really designed to 'fail'. To be exact, the\r\n     *  AiProcess_ValidateDS flag is currently the only post processing step which can actually cause the scene to be\r\n     *  reset to null.\r\n     *\r\n     *  @note The method does nothing if no scene is currently bound to the Importer instance.  */\r\n    public function applyPostProcessing(flags_:Int):AiScene {\r\n        // Return immediately if no scene is active\r\n        if (impl.scene == null) return null;\r\n        // If no flags are given, return the current scene with no further action\r\n        if (flags_ == 0) return impl.scene ;\r\n        return impl.scene;\r\n    }\r\n\r\n    public function applyCustomizedPostProcessing(rootProcess:BaseProcess, requestValidation:Bool):AiScene {\r\n        // Return immediately if no scene is active\r\n        if (null == impl.scene) return null;\r\n        // If no flags are given, return the current scene with no further action\r\n        if (null == rootProcess) return impl.scene;\r\n        // In debug builds: run basic flag validation\r\n        trace(\"Entering customized post processing pipeline\");\r\n        if (!Assimp.NO.VALIDATEDS_PROCESS) {\r\n            // The ValidateDS process plays an exceptional role. It isn't contained in the global\r\n            // list of post-processing steps, so we need to call it manually.\r\n            if (requestValidation) {\r\n                new ValidateDSProcess().executeOnScene(impl);\r\n                if (impl.scene == null) return null;\r\n            }\r\n        }\r\n        if (Assimp.DEBUG && impl.extraVerbose && Assimp.NO.VALIDATEDS_PROCESS)\r\n            trace(\"Verbose Import is not available due to build settings\");\r\n        else if (impl.extraVerbose)\r\n            trace(\"Not a debug build, ignoring extra verbose setting\");\r\n\r\n//        std::unique_ptr<Profiler> profiler (GetPropertyInteger(AI_CONFIG_GLOB_MEASURE_TIME, 0) ? new Profiler() : NULL);\r\n//        if (profiler) { profiler ->\r\n//            BeginRegion(\"postprocess\");\r\n//        }\r\n        rootProcess.executeOnScene(impl);\r\n//        if (profiler) { profiler ->\r\n//            EndRegion(\"postprocess\")\r\n//        }\r\n        // If the extra verbose mode is active, execute the ValidateDataStructureStep again - after each step\r\n        if (impl.extraVerbose || requestValidation) {\r\n            trace(\"Verbose Import: revalidating data structures\");\r\n            new ValidateDSProcess().executeOnScene(impl);\r\n            if (impl.scene == null)\r\n                trace(\"Verbose Import: failed to revalidate data structures\");\r\n        }\r\n        trace(\"Leaving customized post processing pipeline\");\r\n        return impl.scene;\r\n    }\r\n\r\n    /** Frees the current scene.\r\n     *\r\n     *  The function does nothing if no scene has previously been read via readFile(). freeScene() is called\r\n     *  automatically by the destructor and readFile() itself.  */\r\n    public function freeScene() {\r\n        impl.scene = null;\r\n        impl.errorString = \"\";\r\n    }\r\n\r\n    /** Returns an error description of an error that occurred in ReadFile().\r\n     *\r\n     *  Returns an empty string if no error occurred.\r\n     *  @return A description of the last error, an empty string if no error occurred. The string is never null.\r\n     *\r\n     *  @note The returned function remains valid until one of the following methods is called: readFile(),\r\n     *  freeScene(). */\r\n    public function errorString() return impl.errorString;\r\n\r\n    /** Returns the scene loaded by the last successful call to readFile()\r\n     *\r\n     *  @return Current scene or null if there is currently no scene loaded */\r\n    public function scene() return impl.scene;\r\n\r\n    /** Returns whether a given file extension is supported by ASSIMP.\r\n     *\r\n     *  @param szExtension Extension to be checked.\r\n     *  Must include a trailing dot '.'. Example: \".3ds\", \".md3\". Cases-insensitive.\r\n     *  @return true if the extension is supported, false otherwise */\r\n    public function isExtensionSupported(szExtension:String) return null != getImporterExtension(szExtension);\r\n\r\n    /** Get a full list of all file extensions supported by ASSIMP.\r\n     *\r\n     *  If a file extension is contained in the list this does of course not mean that ASSIMP is able to load all files\r\n     *  with this extension --- it simply means there is an importer loaded which claims to handle files with this\r\n     *  file extension.\r\n     *  @return String containing the extension list.\r\n     *  Format of the list: \"*.3ds;*.obj;*.dae\". This is useful for use with the WinAPI call GetOpenFileName(Ex). */\r\n    public function extensionList():Array<String> return Lambda.flatten(impl.importer.map(function(e) return e.extensionList()));\r\n\r\n    /** Get the number of importers currently registered with Assimp. */\r\n    public function importerCount() return impl.importer.length;\r\n\r\n    /** Get meta data for the importer corresponding to a specific index..\r\n     *\r\n     *  @param index Index to query, must be within [0, importerCount)\r\n     *  @return Importer meta data structure, null if the index does not exist or if the importer doesn't offer meta\r\n     *  information (importers may do this at the cost of being hated by their peers).  TODO JVM DOESNT ALLOW THIS */\r\n    public function getImporterInfo(index:Int) return impl.importer[index].info;\r\n\r\n    /** Find the importer corresponding to a specific index.\r\n     *\r\n     *  @param index Index to query, must be within [0, importerCount)\r\n     *  @return Importer instance. null if the index does not exist. */\r\n    public function getImporter(index:Int) return impl.importer.length > index ? impl.importer[index] : null;\r\n\r\n    /** Find the importer corresponding to a specific file extension.\r\n     *\r\n     *  This is quite similar to `isExtensionSupported` except a BaseImporter instance is returned.\r\n     *  @param szExtension Extension to check for. The following formats are recognized (BAH being the file extension):\r\n     *  \"BAH\" (comparison is case-insensitive), \".bah\", \"*.bah\" (wild card and dot characters at the beginning of the\r\n     *  extension are skipped).\r\n     *  @return null if no importer is found*/\r\n    public function getImporterExtension(szExtension:String) return getImporter(getImporterIndex(szExtension));\r\n\r\n    /** Find the importer index corresponding to a specific file extension.\r\n     *\r\n     *  @param szExtension Extension to check for. The following formats are recognized (BAH being the file extension):\r\n     *  \"BAH\" (comparison is case-insensitive), \".bah\", \"*.bah\" (wild card and dot characters at the beginning of the\r\n     *  extension are skipped).\r\n     *  @return -1 if no importer is found */\r\n    public function getImporterIndex(szExtension:String):Int {\r\n//assert(szExtension.isNotEmpty())\r\n        // skip over wildcard and dot characters at string head --\r\n        var p = 0;\r\n        while (szExtension.charAt(p) == '*' || szExtension.charAt(p) == '.') ++p;\r\n        var ext = szExtension.substring(p);\r\n        if (ext == \"\") return -1;\r\n        ext = ext.toLowerCase();\r\n        return Lambda.indexOf(impl.importer, Lambda.find(impl.importer, function(i:BaseImporter) {\r\n            return Lambda.has(i.extensionList(), ext) ;\r\n        }));\r\n    }\r\n\r\n    private function _validateFlags(flags:Int) {\r\n        if (flags & Pps.GenSmoothNormals != 0 && flags & Pps.GenNormals != 0) {\r\n            trace(\"AiProcess_GenSmoothNormals and AiProcess_GenNormals are incompatible\");\r\n            return false;\r\n        }\r\n        if (flags & Pps.OptimizeGraph != 0 && flags & Pps.PreTransformVertices != 0) {\r\n            trace(\"AiProcess_OptimizeGraph and AiProcess_PreTransformVertices are incompatible\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n","package assimp;\r\n\r\n\r\n/**\r\n * Created by elect on 14/11/2016.\r\n */\r\n\r\n/** Mixed set of flags for #AiImporterDesc, indicating some features\r\n *  common to many importers*/\r\n@:enum abstract AiImporterFlags(Int) from Int to Int {\r\n    /** Indicates that there is a textual encoding of the file format; and that it is supported.*/\r\n    var SupportTextFlavour = (0x1);\r\n    /** Indicates that there is a binary encoding of the file format; and that it is supported.*/\r\n    var SupportBinaryFlavour = (0x2);\r\n    /** Indicates that there is a compressed encoding of the file format; and that it is supported.*/\r\n    var SupportCompressedFlavour = (0x4);\r\n    /** Indicates that the importer reads only a very particular subset of the file format. This happens commonly for\r\n     * declarative or procedural formats which cannot easily be mapped to #aiScene */\r\n    var LimitedSupport = (0x8);\r\n    /** Indicates that the importer is highly experimental and should be used with care. This only happens for trunk\r\n     * (i.e. SVN) versions, experimental code is not included in releases. */\r\n    var Experimental = (0x10);\r\n//infix fun or(other: AiImporterFlags) = i or other.i\r\n//infix fun or(other: Int) = i or other\r\n}\r\n\r\n/** Meta information about a particular importer. Importers need to fill this structure, but they can freely decide how\r\n *  talkative they are.\r\n *  A common use case for loader meta info is a user interface in which the user can choose between various\r\n *  import/export file formats. Building such an UI by hand means a lot of maintenance as importers/exporters are added\r\n *  to Assimp, so it might be useful to have a common mechanism to query some rough importer characteristics. */\r\nclass AiImporterDesc {\r\n    /** Full name of the importer (i.e. Blender3D importer)*/\r\n    public var name:String ;//= \"\",\r\n    /** Original author (left blank if unknown or whole assimp team) */\r\n    public var author:String ;//= \"\",\r\n    /** Current maintainer, left blank if the author maintains */\r\n    public var maintainer:String ;//= \"\",\r\n    /** Implementation comments, i.e. unimplemented features*/\r\n    public var comments:String ;//= \"\",\r\n    /** These flags indicate some characteristics common to many importers. */\r\n    public var flags:Int ;//= 0,\r\n    /** Minimum format version that can be loaded im major.minor format, both are set to 0 if there is either no\r\n         *  version scheme or if the loader doesn't care. */\r\n    public var minMajor:Int ;//= 0,\r\n    public var minMinor:Int ;//= 0,\r\n    /** Maximum format version that can be loaded im major.minor format, both are set to 0 if there is either no\r\n         *  version scheme or if the loader doesn't care. Loaders that expect to be forward-compatible to potential\r\n         *  future format versions should indicate  zero, otherwise they should specify the current maximum version.*/\r\n    public var maxMajor:Int ;//= 0,\r\n    public var maxMinor:Int ;//= 0,\r\n    /** List of file extensions this importer can handle.\r\n         *  All entries are lower case without a leading dot (i.e. [\"xml\",\"dae\"] would be a valid value. Note that\r\n         *  multiple importers may respond to the same file extension - assimp calls all importers in the order in which\r\n         *  they are registered and each importer gets the opportunity to load the file until one importer \"claims\" the\r\n         *  file.\r\n         *  Apart from file extension checks, importers typically use other methods to quickly reject files (i.e. magic\r\n         *  words) so this does not mean that common or generic file extensions such as XML would be tediously slow. */\r\n    public var fileExtensions:Array<String>;\r\n    // = ArrayList()\r\n    public function new() {\r\n\r\n    }\r\n}","package assimp;\r\nimport assimp.format.Mesh.AiMesh;\r\nclass ProcessHelper {\r\n    static public function getMeshVFormatUnique(pcMesh:AiMesh):Int {\r\n        //Assimp.ai_assert(pcMesh != 0);\r\n\r\n        // FIX: the hash may never be 0. Otherwise a comparison against\r\n        // nullptr could be successful\r\n        var iRet = 1;\r\n\r\n        // normals\r\n        if (pcMesh.hasNormals())\r\n            iRet = iRet | 0x2;\r\n        // tangents and bitangents\r\n        if (pcMesh.hasTangentsAndBitangents())\r\n            iRet = iRet | 0x4;\r\n\r\n        // texture coordinates\r\n        var p = 0;\r\n        while (pcMesh.hasTextureCoords(p)) {\r\n            iRet = iRet | (0x100 << p);\r\n            //if (3 == pcMesh.mNumUVComponents[p])\r\n            //iRet = iRet or (0x10000 shl p)\r\n\r\n            ++p;\r\n        }\r\n        // vertex colors\r\n        p = 0;\r\n        while (pcMesh.hasVertexColors(p))\r\n            iRet = iRet | (0x1000000 << p++);\r\n        return iRet;\r\n    }\r\n}\r\n","package assimp;\r\nimport assimp.format.AiMatKeys;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.format.Anim.AiVectorKey;\r\nimport assimp.format.Anim.AiQuatKey;\r\nimport assimp.format.Defs;\r\nimport assimp.format.Scene.AiNode;\r\nimport assimp.format.Defs.AiQuaternion;\r\nimport assimp.format.Anim.AiAnimation;\r\nimport glm.Vec3;\r\nimport Lambda;\r\nimport assimp.format.Mesh.AiPrimitiveType;\r\nimport assimp.format.Mesh.AiMesh;\r\nimport assimp.format.Material;\r\nimport assimp.format.Defs.AiColor3D;\r\nimport assimp.format.Material.Color;\r\nimport assimp.format.Material.AiMaterial;\r\nimport assimp.format.Scene.AiScene;\r\nclass ScenePreprocessor {\r\n    /** Scene we're currently working on    */\r\n    var scene:AiScene;\r\n\r\n    public function new() {\r\n\r\n    }\r\n    /** Preprocess the current scene     */\r\n    public function processScene(scene:AiScene) {\r\n\r\n        // scene cant be null\r\n        this.scene = scene;\r\n\r\n        // Process all meshes\r\n        for (it in scene.meshes) {\r\n            AiMesh_process(it);\r\n        }\r\n\r\n        // - nothing to do for nodes for the moment\r\n        // - nothing to do for textures for the moment\r\n        // - nothing to do for lights for the moment\r\n        // - nothing to do for cameras for the moment\r\n\r\n        // Process all animations\r\n        for (it in scene.animations) {\r\n            AiAnimation_process(it);\r\n        }\r\n\r\n        // Generate a default material if none was specified\r\n        if (scene.numMaterials == 0 && scene.numMeshes > 0) {\r\n            var tmp = new AiMaterial();\r\n            tmp.color = new Color();\r\n            tmp.color.diffuse = new AiColor3D(0.6);\r\n            // setup the default name to make this material identifiable\r\n            tmp.name = AiDefines.AI_DEFAULT_MATERIAL_NAME;\r\n            scene.materials.push(tmp);\r\n            trace(\"ScenePreprocessor: Adding default material '$ Material.AI_DEFAULT_MATERIAL_NAME'\");\r\n\r\n            for (it in scene.meshes) {\r\n                it.materialIndex = scene.numMaterials;\r\n            }\r\n\r\n            scene.numMaterials++;\r\n        }\r\n    }\r\n\r\n    function AiMesh_process(this1:AiMesh) {\r\n\r\n        // TODO change -> for in textureCoords\r\n        for (it in this1.textureCoords) {\r\n            // If aiMesh::mNumUVComponents is *not* set assign the default value of 2\r\n            for (i in 0...it.length)\r\n                if (Lambda.empty(it[i]))\r\n                    it[i] = new AiVector3D(0, 0, 0);\r\n            //todo\r\n\r\n            /*  Ensure unsued components are zeroed. This will make 1D texture channels work as if they were 2D channels..\r\n                just in case an application doesn't handle this case    */\r\n//            if (it[0].size == 2)\r\n//                for (uv in it)\r\n//                    uv[2] = 0f\r\n//            else if (it[0].size == 1)\r\n//                for (uv in it) {\r\n//                    uv[2] = 0f\r\n//                    uv[1] = 0f\r\n//                }\r\n//            else if (it[0].size == 3) {\r\n//                // Really 3D coordinates? Check whether the third coordinate is != 0 for at least one element\r\n//                var coord3d = false\r\n//                for (uv in it)\r\n//                    if (uv[2] != 0f)\r\n//                        coord3d = true\r\n//                if (!coord3d) {\r\n//                    logger.warn { \"ScenePreprocessor: UVs are declared to be 3D but they're obviously not. Reverting to 2D.\" }\r\n//                    for (i in 0 until it.size)\r\n//                        it[i] = FloatArray(2)\r\n//                }\r\n//            }\r\n        }\r\n\r\n        // If the information which primitive types are there in the mesh is currently not available, compute it.\r\n        if (this1.primitiveTypes == 0)\r\n            for (it in this1.faces) {\r\n                this1.primitiveTypes = switch (it.numIndices) {\r\n                    case 3 : this1.primitiveTypes | AiPrimitiveType.TRIANGLE;\r\n                    case 2 : this1.primitiveTypes | AiPrimitiveType.LINE;\r\n                    case 1 : this1.primitiveTypes | AiPrimitiveType.POINT;\r\n                    default: this1.primitiveTypes | AiPrimitiveType.POLYGON;\r\n                }\r\n            }\r\n\r\n        // If tangents and normals are given but no bitangents compute them\r\n        if (!Lambda.empty(this1.tangents) && !Lambda.empty(this1.normals) && Lambda.empty(this1.bitangents)) {\r\n            this1.bitangents = [for (i in 0...this1.numVertices) new AiVector3D()];\r\n            for (i in 0...this1.numVertices) {\r\n                Vec3.cross(this1.normals[i], this1.tangents[i], this1.bitangents[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function AiAnimation_process(this1:AiAnimation) {\r\n        var first = 10e10;\r\n        var last = -10e10;\r\n        for (channel in this1.channels) {\r\n\r\n            //  If the exact duration of the animation is not given compute it now.\r\n            if (this1.duration == -1.0) {\r\n                for (it in channel.positionKeys) {\r\n                    // Position keys\r\n                    first = Math.min(first, it.time);\r\n                    last = Math.max(last, it.time);\r\n                }\r\n                for (it in channel.scalingKeys) {\r\n                    // Scaling keys\r\n                    first = Math.min(first, it.time);\r\n                    last = Math.max(last, it.time);\r\n                }\r\n                for (it in channel.rotationKeys) {\r\n                    // Rotation keys\r\n                    first = Math.min(first, it.time);\r\n                    last = Math.max(last, it.time);\r\n                }\r\n            }\r\n            /*  Check whether the animation channel has no rotation or position tracks. In this case we generate a dummy\r\n             *  track from the information we have in the transformation matrix of the corresponding node.  */\r\n            if (channel.numRotationKeys == 0 || channel.numPositionKeys == 0 || channel.numScalingKeys == 0) {\r\n                // Find the node that belongs to this animation\r\n                var it:AiNode = scene.rootNode.findNode(channel.nodeName);\r\n                if (it != null) {\r\n                    // ValidateDS will complain later if 'node' is NULL\r\n                    // Decompose the transformation matrix of the node\r\n                    var scaling = new AiVector3D();\r\n                    var position = new AiVector3D();\r\n                    var rotation = new AiQuaternion();\r\n                    Defs.decompose(it.transformation, scaling, rotation, position);\r\n\r\n                    if (channel.numRotationKeys == 0) { // No rotation keys? Generate a dummy track\r\n                        channel.numRotationKeys = 1;\r\n                        channel.rotationKeys = [new AiQuatKey(0.0, rotation)];\r\n                        trace(\"ScenePreprocessor: Dummy rotation track has been generated\");\r\n                    }\r\n                    if (channel.numScalingKeys == 0) { // No scaling keys? Generate a dummy track\r\n                        channel.numScalingKeys = 1;\r\n                        channel.scalingKeys = [new AiVectorKey(0.0, scaling)];\r\n                        trace(\"ScenePreprocessor: Dummy scaling track has been generated\");\r\n                    }\r\n                    if (channel.numPositionKeys == 0) { // No position keys? Generate a dummy track\r\n                        channel.numPositionKeys = 1;\r\n                        channel.positionKeys = [new AiVectorKey(0.0, position)];\r\n                        trace(\"ScenePreprocessor: Dummy position track has been generated\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this1.duration == -1.0) {\r\n            trace(\"ScenePreprocessor: Setting animation duration\");\r\n            this1.duration = last - Math.min(first, 0.0);\r\n        }\r\n    }\r\n}\r\n","package assimp;\r\nclass StringUtil {\r\n    static public function formatString(s:String, d:Any) {\r\n        return StringTools.replace(s, \"%\", d + \"\");\r\n    }\r\n}\r\n","package assimp.format;\r\nimport assimp.format.Material.AiTextureType;\r\nclass AiMatKeys {\r\n\r\n    /// <summary>\r\n    /// Material name (String)\r\n    /// </summary>\r\n    static public var NAME_BASE = \"?mat.name\";\r\n\r\n/// <summary>\r\n/// Material name (String)\r\n/// </summary>\r\n    static public var NAME = \"?mat.name,0,0\";\r\n\r\n    /// <summary>\r\n    /// Two sided property (boolean)\r\n    /// </summary>\r\n    static public var TWOSIDED_BASE = \"$mat.twosided\";\r\n\r\n    /// <summary>\r\n    /// Two sided property (boolean)\r\n    /// </summary>\r\n    static public var TWOSIDED = \"$mat.twosided,0,0\";\r\n\r\n    /// <summary>\r\n    /// Shading mode property (ShadingMode)\r\n    /// </summary>\r\n    static public var SHADING_MODEL_BASE = \"$mat.shadingm\";\r\n\r\n    /// <summary>\r\n    /// Shading mode property (ShadingMode)\r\n    /// </summary>\r\n    static public var SHADING_MODEL = \"$mat.shadingm,0,0\";\r\n\r\n    /// <summary>\r\n    /// Enable wireframe property (boolean)\r\n    /// </summary>\r\n    static public var ENABLE_WIREFRAME_BASE = \"$mat.wireframe\";\r\n\r\n    /// <summary>\r\n    /// Enable wireframe property (boolean)\r\n    /// </summary>\r\n    static public var ENABLE_WIREFRAME = \"$mat.wireframe,0,0\";\r\n\r\n    /// <summary>\r\n    /// Blending function (BlendMode)\r\n    /// </summary>\r\n    static public var BLEND_FUNC_BASE = \"$mat.blend\";\r\n\r\n    /// <summary>\r\n    /// Blending function (BlendMode)\r\n    /// </summary>\r\n    static public var BLEND_FUNC = \"$mat.blend,0,0\";\r\n\r\n    /// <summary>\r\n    /// Opacity (float)\r\n    /// </summary>\r\n    static public var OPACITY_BASE = \"$mat.opacity\";\r\n\r\n    /// <summary>\r\n    /// Opacity (float)\r\n    /// </summary>\r\n    static public var OPACITY = \"$mat.opacity,0,0\";\r\n\r\n    /// <summary>\r\n    /// Bumpscaling (float)\r\n    /// </summary>\r\n    static public var BUMPSCALING_BASE = \"$mat.bumpscaling\";\r\n\r\n    /// <summary>\r\n    /// Bumpscaling (float)\r\n    /// </summary>\r\n    static public var BUMPSCALING = \"$mat.bumpscaling,0,0\";\r\n\r\n    /// <summary>\r\n    /// Shininess (float)\r\n    /// </summary>\r\n    static public var SHININESS_BASE = \"$mat.shininess\";\r\n\r\n    /// <summary>\r\n    /// Shininess (float)\r\n    /// </summary>\r\n    static public var SHININESS = \"$mat.shininess,0,0\";\r\n\r\n    /// <summary>\r\n    /// Reflectivity (float)\r\n    /// </summary>\r\n    static public var REFLECTIVITY_BASE = \"$mat.reflectivity\";\r\n\r\n    /// <summary>\r\n    /// Reflectivity (float)\r\n    /// </summary>\r\n    static public var REFLECTIVITY = \"$mat.reflectivity,0,0\";\r\n\r\n    /// <summary>\r\n    /// Shininess strength (float)\r\n    /// </summary>\r\n    static public var SHININESS_STRENGTH_BASE = \"$mat.shinpercent\";\r\n\r\n    /// <summary>\r\n    /// Shininess strength (float)\r\n    /// </summary>\r\n    static public var SHININESS_STRENGTH = \"$mat.shinpercent,0,0\";\r\n\r\n    /// <summary>\r\n    /// Refracti (float)\r\n    /// </summary>\r\n    static public var REFRACTI_BASE = \"$mat.refracti\";\r\n\r\n    /// <summary>\r\n    /// Refracti (float)\r\n    /// </summary>\r\n    static public var REFRACTI = \"$mat.refracti,0,0\";\r\n\r\n    /// <summary>\r\n    /// Diffuse color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_DIFFUSE_BASE = \"$clr.diffuse\";\r\n\r\n    /// <summary>\r\n    /// Diffuse color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_DIFFUSE = \"$clr.diffuse,0,0\";\r\n\r\n    /// <summary>\r\n    /// Ambient color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_AMBIENT_BASE = \"$clr.ambient\";\r\n\r\n    /// <summary>\r\n    /// Ambient color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_AMBIENT = \"$clr.ambient,0,0\";\r\n\r\n    /// <summary>\r\n    /// Specular color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_SPECULAR_BASE = \"$clr.specular\";\r\n\r\n    /// <summary>\r\n    /// Specular color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_SPECULAR = \"$clr.specular,0,0\";\r\n\r\n    /// <summary>\r\n    /// Emissive color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_EMISSIVE_BASE = \"$clr.emissive\";\r\n\r\n    /// <summary>\r\n    /// Emissive color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_EMISSIVE = \"$clr.emissive,0,0\";\r\n\r\n    /// <summary>\r\n    /// Transparent color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_TRANSPARENT_BASE = \"$clr.transparent\";\r\n\r\n    /// <summary>\r\n    /// Transparent color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_TRANSPARENT = \"$clr.transparent,0,0\";\r\n\r\n    /// <summary>\r\n    /// Reflective color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_REFLECTIVE_BASE = \"$clr.reflective\";\r\n\r\n    /// <summary>\r\n    /// Reflective color (Color4D)\r\n    /// </summary>\r\n    static public var COLOR_REFLECTIVE = \"$clr.reflective,0,0\";\r\n\r\n    /// <summary>\r\n    /// Background image (String)\r\n    /// </summary>\r\n    static public var GLOBAL_BACKGROUND_IMAGE_BASE = \"?bg.global\";\r\n\r\n    /// <summary>\r\n    /// Background image (String)\r\n    /// </summary>\r\n    static public var GLOBAL_BACKGROUND_IMAGE = \"?bg.global,0,0\";\r\n\r\n    /// <summary>\r\n    /// Texture base name\r\n    /// </summary>\r\n    static public var TEXTURE_BASE = \"$tex.file\";\r\n\r\n    /// <summary>\r\n    /// UVWSRC base name\r\n    /// </summary>\r\n    static public var UVWSRC_BASE = \"$tex.uvwsrc\";\r\n\r\n    /// <summary>\r\n    /// Texture op base name\r\n    /// </summary>\r\n    static public var TEXOP_BASE = \"$tex.op\";\r\n\r\n    /// <summary>\r\n    /// Mapping base name\r\n    /// </summary>\r\n    static public var MAPPING_BASE = \"$tex.mapping\";\r\n\r\n    /// <summary>\r\n    /// Texture blend base name.\r\n    /// </summary>\r\n    static public var TEXBLEND_BASE = \"$tex.blend\";\r\n\r\n    /// <summary>\r\n    /// Mapping mode U base name\r\n    /// </summary>\r\n    static public var MAPPINGMODE_U_BASE = \"$tex.mapmodeu\";\r\n\r\n    /// <summary>\r\n    /// Mapping mode V base name\r\n    /// </summary>\r\n    static public var MAPPINGMODE_V_BASE = \"$tex.mapmodev\";\r\n\r\n    /// <summary>\r\n    /// Texture map axis base name\r\n    /// </summary>\r\n    static public var TEXMAP_AXIS_BASE = \"$tex.mapaxis\";\r\n\r\n    /// <summary>\r\n    /// UV transform base name\r\n    /// </summary>\r\n    static public var UVTRANSFORM_BASE = \"$tex.uvtrafo\";\r\n\r\n    /// <summary>\r\n    /// Texture flags base name\r\n    /// </summary>\r\n    static public var TEXFLAGS_BASE = \"$tex.flags\";\r\n\r\n    /// <summary>\r\n    /// Helper function to get the fully qualified name of a texture property type name. Takes\r\n    /// in a base name constant, a texture type, and a texture index and outputs the name in the format:\r\n    /// <para>\"baseName,TextureType,texIndex\"</para>\r\n    /// </summary>\r\n    /// <param name=\"baseName\">Base name</param>\r\n    /// <param name=\"texType\">Texture type</param>\r\n    /// <param name=\"texIndex\">Texture index</param>\r\n    /// <returns>Fully qualified texture name</returns>\r\n    public static function getFullTextureName(baseName:String, texType:AiTextureType, texIndex:Int) {\r\n        return \"{$baseName},{$texType},{$texIndex}\" ;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper function to get the base name from a fully qualified name of a material property type name. The format\r\n    /// of such a string is:\r\n    /// <para>\"baseName,TextureType,texIndex\"</para>\r\n    /// </summary>\r\n    /// <param name=\"fullyQualifiedName\">Fully qualified material property name.</param>\r\n    /// <returns>Base name of the property type.</returns>\r\n    public static function getBaseName(fullyQualifiedName:String) {\r\n        if (fullyQualifiedName == null)\r\n            return \"\";\r\n\r\n        var substrings = fullyQualifiedName.split(',');\r\n        if (substrings != null && substrings.length == 3)\r\n            return substrings[0];\r\n\r\n        return \"\";\r\n    }\r\n\r\n    public function new() {\r\n    }\r\n}\r\nclass AiPbrmaterial {\r\n    static public var GLTF_TEXTURE_TEXCOORD_BASE = \"$tex.file.texCoord\";\r\n    static public var GLTF_MAPPINGNAME_BASE = \"$tex.mappingname\";\r\n    static public var GLTF_MAPPINGID_BASE = \"$tex.mappingid\";\r\n    static public var GLTF_MAPPINGFILTER_MAG_BASE = \"$tex.mappingfiltermag\";\r\n    static public var GLTF_MAPPINGFILTER_MIN_BASE = \"$tex.mappingfiltermin\";\r\n    static public var GLTF_TEXTURE_SCALE_BASE = \"$tex.scale\";\r\n    static public var GLTF_TEXTURE_STRENGTH_BASE = \"$tex.strength\";\r\n    static public var GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_FACTOR_BASE = \"$mat.gltf.pbrMetallicRoughness.baseColorFactor\";\r\n    static public var GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR_BASE = \"$mat.gltf.pbrMetallicRoughness.metallicFactor\";\r\n    static public var GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR_BASE = \"$mat.gltf.pbrMetallicRoughness.roughnessFactor\";\r\n    static public var GLTF_ALPHAMODE_BASE = \"$mat.gltf.alphaMode\";\r\n    static public var GLTF_ALPHACUTOFF_BASE = \"$mat.gltf.alphaCutoff\";\r\n    static public var GLTF_PBRSPECULARGLOSSINESS_BASE = \"$mat.gltf.pbrSpecularGlossiness\";\r\n    static public var GLTF_PBRSPECULARGLOSSINESS_GLOSSINESS_FACTOR_BASE = \"$mat.gltf.pbrMetallicRoughness.glossinessFactor\";\r\n    static public var GLTF_UNLIT_BASE = \"$mat.gltf.unlit\";\r\n\r\n\r\n    static public var GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_FACTOR = \"$mat.gltf.pbrMetallicRoughness.baseColorFactor, 0, 0\";\r\n    static public var GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR = \"$mat.gltf.pbrMetallicRoughness.metallicFactor, 0, 0\";\r\n    static public var GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR = \"$mat.gltf.pbrMetallicRoughness.roughnessFactor, 0, 0\";\r\n    static public var GLTF_ALPHAMODE = \"$mat.gltf.alphaMode, 0, 0\";\r\n    static public var GLTF_ALPHACUTOFF = \"$mat.gltf.alphaCutoff, 0, 0\";\r\n    static public var GLTF_PBRSPECULARGLOSSINESS = \"$mat.gltf.pbrSpecularGlossiness, 0, 0\";\r\n    static public var GLTF_PBRSPECULARGLOSSINESS_GLOSSINESS_FACTOR = \"$mat.gltf.pbrMetallicRoughness.glossinessFactor, 0, 0\";\r\n    static public var GLTF_UNLIT = \"$mat.gltf.unlit, 0, 0\";\r\n    static public var GLTF_TEXTURE_TEXCOORD = GLTF_TEXTURE_TEXCOORD_BASE+\", 0, 0\";\r\n    static public var GLTF_MAPPINGNAME = GLTF_MAPPINGNAME_BASE+\", 0, 0\";\r\n    static public var GLTF_MAPPINGID = GLTF_MAPPINGID_BASE+\", 0, 0\";\r\n    static public var GLTF_MAPPINGFILTER_MAG = GLTF_MAPPINGFILTER_MAG_BASE+\", 0, 0\";\r\n    static public var GLTF_MAPPINGFILTER_MIN = GLTF_MAPPINGFILTER_MIN_BASE+\", 0, 0\";\r\n    static public var GLTF_TEXTURE_SCALE = GLTF_TEXTURE_SCALE_BASE+\", 0, 0\";\r\n    static public var GLTF_TEXTURE_STRENGTH = GLTF_TEXTURE_STRENGTH_BASE+\", 0, 0\";\r\n\r\n    static public var GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_TEXTURE = AiTextureType.diffuse;//+\", 1\";\r\n    static public var GLTF_PBRMETALLICROUGHNESS_METALLICROUGHNESS_TEXTURE = AiTextureType.unknown;//+\", 0\";\r\n}","package assimp.format;\r\n\r\n/**\r\n * Created by elect on 29/01/2017.\r\n */\r\n\r\n// ---------------------------------------------------------------------------\r\n/** A time-value pair specifying a certain 3D vector for the given time. */\r\nimport assimp.format.Defs.AiQuaternion;\r\nimport assimp.format.Defs.AiVector3D;\r\ntypedef AiKey = {\r\n    var time:Float ;\r\n}\r\n\r\nclass AiVectorKey  {\r\n/** The time of this key */\r\n    public var time:Float ;\r\n\r\n    /** The value of this key */\r\n    public var value:AiVector3D ;\r\n\r\n    public function new(?t:Float, ?v:AiVector3D) {\r\n        this.time = t;\r\n        this.value = v != null ? v : new AiVector3D();\r\n    }\r\n\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------------\r\n/** A time-value pair specifying a rotation for the given time.\r\n *  Rotations are expressed with quaternions. */\r\nclass AiQuatKey  {\r\n/** The time of this key */\r\n    public var time:Float ;\r\n\r\n    /** The value of this key */\r\n    public var value:AiQuaternion ;\r\n\r\n    public function new(t:Float = 0, v = null) {\r\n        this.time = t;\r\n        this.value = v != null ? v : new AiQuaternion();\r\n    }\r\n\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Binds a anim mesh to a specific point in time. */\r\nclass AiMeshKey  {\r\n    /** The time of this key */\r\n    public var time:Float;\r\n\r\n    /** Index into the aiMesh::mAnimMeshes array of the mesh corresponding to the #aiMeshAnim hosting this key frame. The referenced anim mesh is evaluated\r\n         *  according to the rules defined in the docs for #aiAnimMesh.*/\r\n    public var value:Int ;\r\n\r\n    public function new() {\r\n        this.time = 0;\r\n        this.value = 0;\r\n    }\r\n}\r\n/** Binds a morph anim mesh to a specific point in time. */\r\nclass AiMeshMorphKey {\r\n/** The time of this key */\r\n    public var time:Float;\r\n    /** The values and weights at the time of this key */\r\n    public var values:Array<Int>;\r\n    public var weights:Array<Float>;\r\n/** The number of values and weights */\r\n    public var numValuesAndWeights:Int;\r\n\r\n    public function new() {\r\n\r\n    }\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Defines how an animation channel behaves outside the defined time\r\n *  range. This corresponds to aiNodeAnim::preState and\r\n *  aiNodeAnim::postState.*/\r\n@:enum abstract AiAnimBehaviour(Int) from Int to Int {\r\n    /** The value from the default node transformation is taken*/\r\n    var DEFAULT = (0x0);\r\n\r\n    /** The nearest key value is used without interpolation */\r\n    var CONSTANT = (0x1);\r\n\r\n    /** The value of the nearest two keys is linearly\r\n     *  extrapolated for the current time value.*/\r\n    var LINEAR = (0x2);\r\n\r\n    /** The animation is repeated.\r\n     *\r\n     *  If the animation key go from n to m and the current\r\n     *  time is t, use the value at (t-n) % (|m-n|).*/\r\n    var REPEAT = (0x3);\r\n\r\n\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Describes the animation of a single node. The name specifies the\r\n *  bone/node which is affected by this animation channel. The keyframes\r\n *  are given in three separate series of values, one each for position,\r\n *  rotation and scaling. The transformation matrix computed from these\r\n *  values replaces the node's original transformation matrix at a\r\n *  specific time.\r\n *  This means all keys are absolute and not relative to the bone default pose.\r\n *  The order in which the transformations are applied is\r\n *  - as usual - scaling, rotation, translation.\r\n *\r\n *  @note All keys are returned in their correct, chronological order.\r\n *  Duplicate keys don't pass the validation step. Most likely there\r\n *  will be no negative time values, but they are not forbidden also ( so\r\n *  implementations need to cope with them! ) */\r\nclass AiNodeAnim {\r\n/** The name of the node affected by this animation. The node\r\n         *  must exist and it must be unique.*/\r\n    public var nodeName:String ;\r\n\r\n    /** The number of position keys */\r\n    public var numPositionKeys:Int ;\r\n\r\n    /** The position keys of this animation channel. Positions are\r\n         * specified as 3D vector. The array is numPositionKeys in size.\r\n         *\r\n         * If there are position keys, there will also be at least one\r\n         * scaling and one rotation key.*/\r\n    public var positionKeys:Array<AiVectorKey>;\r\n\r\n    /** The number of rotation keys */\r\n    public var numRotationKeys:Int;\r\n\r\n    /** The rotation keys of this animation channel. Rotations are\r\n         *  given as quaternions,  which are 4D vectors. The array is\r\n         *  numRotationKeys in size.\r\n         *\r\n         * If there are rotation keys, there will also be at least one\r\n         * scaling and one position key. */\r\n    public var rotationKeys:Array<AiQuatKey>;\r\n\r\n    /** The number of scaling keys */\r\n    public var numScalingKeys:Int ;\r\n\r\n    /** The scaling keys of this animation channel. Scalings are\r\n         *  specified as 3D vector. The array is numScalingKeys in size.\r\n         *\r\n         * If there are scaling keys, there will also be at least one\r\n         * position and one rotation key.*/\r\n    public var scalingKeys:Array<AiVectorKey>;\r\n\r\n    /** Defines how the animation behaves before the first\r\n         *  key is encountered.\r\n         *\r\n         *  The default value is aiAnimBehaviour_DEFAULT (the original\r\n         *  transformation matrix of the affected node is used).*/\r\n    public var preState:AiAnimBehaviour ;\r\n\r\n    /** Defines how the animation behaves after the last\r\n         *  key was processed.\r\n         *\r\n         *  The default value is aiAnimBehaviour_DEFAULT (the original\r\n         *  transformation matrix of the affected node is taken).*/\r\n    public var postState:AiAnimBehaviour;\r\n\r\n    public function new() {\r\n        this.nodeName = \"\";\r\n        this.numPositionKeys = 0;\r\n        this.numRotationKeys = 0;\r\n        this.numScalingKeys = 0;\r\n        this.scalingKeys = [];\r\n        this.positionKeys = [];\r\n        this.rotationKeys = [];\r\n        this.preState = AiAnimBehaviour.DEFAULT;\r\n        this.postState = AiAnimBehaviour.DEFAULT;\r\n    }\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Describes vertex-based animations for a single mesh or a group of\r\n *  meshes. Meshes carry the animation data for each frame in their\r\n *  aiMesh::mAnimMeshes array. The purpose of aiMeshAnim is to\r\n *  define keyframes linking each mesh attachment to a particular\r\n *  point in time. */\r\nclass AiMeshAnim {\r\n/** Name of the mesh to be animated. An empty string is not allowed,\r\n         *  animated meshes need to be named (not necessarily uniquely,\r\n         *  the name can basically serve as wild-card to select a group\r\n         *  of meshes with similar animation setup)*/\r\n    public var mName:String ;\r\n\r\n    /** Size of the #keys array. Must be 1, at least. */\r\n    public var mNumKeys:Int ;\r\n\r\n    /** Key frames of the animation. May not be NULL. */\r\n    public var mKeys:Array<AiMeshKey> ;\r\n\r\n    public function new() {\r\n        this.mKeys = [] ;\r\n        this.mName = \"\";\r\n        this.mNumKeys = 0;\r\n    }\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Describes a morphing animation of a given mesh. */\r\nclass AiMeshMorphAnim {\r\n/** Name of the mesh to be animated. An empty string is not allowed, animated meshes need to be named\r\n         *  (not necessarily uniquely, the name can basically serve as wildcard to select a group of meshes\r\n         *  with similar animation setup)*/\r\n    public var name:String ;\r\n    /** Size of the #keys array. Must be 1, at least. */\r\n    public var numKeys:Int;\r\n    /** Key frames of the animation. May not be NULL. */\r\n    public var keys:Array<AiMeshMorphKey> ;\r\n\r\n    public function new() {\r\n        this.name = \"\";\r\n        this.numKeys = 0;\r\n        this.keys = [];\r\n    }\r\n\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** An animation consists of key-frame data for a number of nodes. For\r\n *  each node affected by the animation a separate series of data is given.*/\r\nclass AiAnimation {\r\n/** The name of the animation. If the modeling package this data was exported from does support only\r\n         *  a single animation channel, this name is usually empty (length is zero). */\r\n    public var name:String ;\r\n    /** Duration of the animation in ticks.  */\r\n    public var duration:Float;\r\n    /** Ticks per second. 0 if not specified in the imported file */\r\n    public var ticksPerSecond:Float ;\r\n    /** The number of bone animation channels. Each channel affects a single node. */\r\n    public var numChannels:Int ;\r\n    /** The node animation channels. Each channel affects a single node. The array is numChannels in size. */\r\n    public var channels:Array<AiNodeAnim> ;\r\n    /** The number of mesh animation channels. Each channel affects a single mesh and defines vertex-based animation. */\r\n    public var mNumMeshChannels:Int ;\r\n    /** The mesh animation channels. Each channel affects a single mesh. The array is mNumMeshChannels in size. */\r\n    public var mMeshChannels:Array<Array<AiMeshAnim>> ;\r\n    /** The number of mesh animation channels. Each channel affects a single mesh and defines morphing animation. */\r\n    public var numMorphMeshChannels:Int ;\r\n    /** The morph mesh animation channels. Each channel affects a single mesh. The array is numMorphMeshChannels in size. */\r\n    public var morphMeshChannels:Array<AiMeshMorphAnim> ;\r\n\r\n    public function new() {\r\n        this.name = \"\";\r\n        this.duration = -1.0;\r\n        this.ticksPerSecond = 0;\r\n        this.numChannels = 0;\r\n        this.mNumMeshChannels = 0;\r\n        this.numMorphMeshChannels = 0;\r\n        this.channels = [];\r\n        this.mMeshChannels = [];\r\n        this.morphMeshChannels = [];\r\n    }\r\n\r\n}\r\n","package assimp.format;\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Helper structure to describe a virtual camera.\r\n *\r\n * Cameras have a representation in the node graph and can be animated.\r\n * An important aspect is that the camera itself is also part of the scenegraph. This means, any values such as the look-at vector are not *absolute*, they're\r\n * <b>relative</b> to the coordinate system defined by the node which corresponds to the camera. This allows for camera animations. For static cameras parameters\r\n * like the 'look-at' or 'up' vectors are usually specified directly in aiCamera, but beware, they could also be encoded in the node transformation. The following\r\n * (pseudo)code sample shows how to do it: <br><br>\r\n * @code\r\n * // Get the camera matrix for a camera at a specific time\r\n * // if the node hierarchy for the camera does not contain\r\n * // at least one animated node this is a static computation\r\n * get-camera-matrix (node sceneRoot, camera cam) : matrix\r\n * {\r\n *    node   cnd = find-node-for-camera(cam)\r\n *    matrix cmt = identity()\r\n *\r\n *    // as usual - get the absolute camera transformation for this frame\r\n *    for each node nd in hierarchy from sceneRoot to cnd\r\n *      matrix cur\r\n *      if (is-animated(nd))\r\n *         cur = eval-animation(nd)\r\n *      else cur = nd->transformation;\r\n *      cmt = mult-matrices( cmt, cur )\r\n *    end for\r\n *\r\n *    // now multiply with the camera's own local transform\r\n *    cam = mult-matrices (cam, get-camera-matrix(cmt) )\r\n * }\r\n * @endcode\r\n *\r\n * @note some file formats (such as 3DS, ASE) export a \"target point\" -\r\n * the point the camera is looking at (it can even be animated). Assimp\r\n * writes the target point as a subnode of the camera's main node,\r\n * called \"<camName>.Target\". However this is just additional information\r\n * then the transformation tracks of the camera main node make the\r\n * camera already look in the right direction.\r\n *\r\n */\r\nimport assimp.format.Defs.AiVector3D;\r\nclass AiCamera {\r\n/** The name of the camera.\r\n         *\r\n         *  There must be a node in the scenegraph with the same name.\r\n         *  This node specifies the position of the camera in the scene\r\n         *  hierarchy and can be animated.\r\n         */\r\n    public var name:String ;\r\n\r\n    /** Position of the camera relative to the coordinate space\r\n         *  defined by the corresponding node.\r\n         *\r\n         *  The default value is 0|0|0.\r\n         */\r\n    public var position:AiVector3D;\r\n\r\n\r\n    /** 'Up' - vector of the camera coordinate system relative to\r\n         *  the coordinate space defined by the corresponding node.\r\n         *\r\n         *  The 'right' vector of the camera coordinate system is\r\n         *  the cross product of  the up and lookAt vectors.\r\n         *  The default value is 0|1|0. The vector\r\n         *  may be normalized, but it needn't.\r\n         */\r\n    public var up:AiVector3D ;\r\n\r\n\r\n    /** 'LookAt' - vector of the camera coordinate system relative to\r\n         *  the coordinate space defined by the corresponding node.\r\n         *\r\n         *  This is the viewing direction of the user.\r\n         *  The default value is 0|0|1. The vector\r\n         *  may be normalized, but it needn't.\r\n         */\r\n    public var lookAt:AiVector3D;\r\n\r\n\r\n    /** Half horizontal field of view angle, in radians.\r\n         *\r\n         *  The field of view angle is the angle between the center\r\n         *  line of the screen and the left or right border.\r\n         *  The default value is 1/4PI.\r\n         */\r\n    public var horizontalFOV:Float ;\r\n\r\n    /** Distance of the near clipping plane from the camera.\r\n         *\r\n         * The value may not be 0.f (for arithmetic reasons to prevent\r\n         * a division through zero). The default value is 0.1f.\r\n         */\r\n    public var clipPlaneNear:Float ;\r\n\r\n    /** Distance of the far clipping plane from the camera.\r\n         *\r\n         * The far clipping plane must, of course, be further away than the\r\n         * near clipping plane. The default value is 1000.f. The ratio\r\n         * between the near and the far plane should not be too\r\n         * large (between 1000-10000 should be ok) to avoid floating-point\r\n         * inaccuracies which could lead to z-fighting.\r\n         */\r\n    public var clipPlaneFar:Float ;\r\n\r\n\r\n    /** Screen aspect ratio.\r\n         *\r\n         * This is the ration between the width and the height of the\r\n         * screen. Typical values are 4/3, 1/2 or 1/1. This value is\r\n         * 0 if the aspect ratio is not defined in the source file.\r\n         * 0 is also the default value.\r\n         */\r\n    public var aspect:Float ;\r\n\r\n    public function new() {\r\n        this.name = \"\";\r\n        this.up = new AiVector3D(0, 1, 0);\r\n        this.position = new AiVector3D();\r\n        this.lookAt = new AiVector3D(0, 0, 1);\r\n        this.horizontalFOV = .25 * Defs.AI_MATH_HALF_PI;\r\n        this.clipPlaneNear = 0.1;\r\n        this.clipPlaneFar = 1000.0;\r\n    }\r\n\r\n}","package assimp.format;\r\n/**\r\n         * Created by elect on 14/11/2016.\r\n         */\r\n\r\nimport glm.Mat4;\r\nimport glm.Quat;\r\nimport glm.Vec2;\r\nimport glm.Mat4;\r\nimport glm.Mat3;\r\nimport glm.Vec4;\r\nimport glm.Vec3;\r\ntypedef Ai_real = Float;\r\ntypedef AiVector4D = Vec4;\r\ntypedef AiVector3D = Vec3;\r\ntypedef AiColor3D = Vec3;\r\ntypedef AiColor4D = Vec4;\r\ntypedef AiVector2D = Vec2;\r\ntypedef AiQuaternion = Quat;\r\ntypedef AiMatrix4x4 = Mat4;\r\ntypedef AiMatrix3x3 = Mat3;\r\n/*\r\n*\r\n\r\n\t\t\t_r0c0:Float = 0, _r0c1:Float = 0, _r0c2:Float = 0,\r\n            _r1c0:Float = 0, _r1c1:Float = 0, _r1c2:Float = 0,\r\n            _r2c0:Float = 0, _r2c1:Float = 0, _r2c2:Float = 0\r\n\r\n\r\naiMatrix4x4t (  TReal _a1, TReal _a2, TReal _a3, TReal _a4,\r\nTReal _b1, TReal _b2, TReal _b3, TReal _b4,\r\nTReal _c1, TReal _c2, TReal _c3, TReal _c4,\r\nTReal _d1, TReal _d2, TReal _d3, TReal _d4);\r\n            */\r\nclass AiDefines {\r\n\r\n/// <summary>\r\n/// Default value for <see cref=\"AiConfigs.AI_CONFIG_PP_SLM_TRIANGLE_LIMIT\"/>.\r\n/// </summary>\r\n    public static var AI_SLM_DEFAULT_MAX_TRIANGLES = 1000000;\r\n\r\n    /// <summary>\r\n    /// Default value for <see cref=\"AiConfigs.AI_CONFIG_PP_SLM_VERTEX_LIMIT\"/>.\r\n    /// </summary>\r\n    public static var AI_SLM_DEFAULT_MAX_VERTICES = 1000000;\r\n\r\n    /// <summary>\r\n    /// Default value for <see cref=\"AiConfigs.AI_CONFIG_PP_LBW_MAX_WEIGHTS\"/>.\r\n    /// </summary>\r\n    public static var AI_LBW_MAX_WEIGHTS = 0x4;\r\n\r\n    /// <summary>\r\n    /// Default value for <see cref=\"AiConfigs.AI_CONFIG_PP_ICL_PTCACHE_SIZE\"/>.\r\n    /// </summary>\r\n    public static var PP_ICL_PTCACHE_SIZE = 12;\r\n\r\n    /// <summary>\r\n    /// Default value for <see cref=\"AiConfigs.AI_CONFIG_PP_TUV_EVALUATE\"/>\r\n    /// </summary>\r\n//todo\r\n// public const int AI_UVTRAFO_ALL = (int) (UVTransformFlags.Rotation | UVTransformFlags.Scaling | UVTransformFlags.Translation);\r\n\r\n\r\n    /// <summary>\r\n    /// Defines the maximum number of indices per face (polygon).\r\n    /// </summary>\r\n    public static var AI_MAX_FACE_INDICES = 0x7fff;\r\n\r\n    /// <summary>\r\n    /// Defines the maximum number of bone weights.\r\n    /// </summary>\r\n    public static var AI_MAX_BONE_WEIGHTS = 0x7fffffff;\r\n\r\n    /// <summary>\r\n    /// Defines the maximum number of vertices per mesh.\r\n    /// </summary>\r\n    public static var AI_MAX_VERTICES = 0x7fffffff;\r\n\r\n    /// <summary>\r\n    /// Defines the maximum number of faces per mesh.\r\n    /// </summary>\r\n    public static var AI_MAX_FACES = 0x7fffffff;\r\n\r\n    /// <summary>\r\n    /// Defines the maximum number of vertex color sets per mesh.\r\n    /// </summary>\r\n    public static var AI_MAX_NUMBER_OF_COLOR_SETS = 0x8;\r\n\r\n    /// <summary>\r\n    /// Defines the maximum number of texture coordinate sets (UV(W) channels) per mesh.\r\n    /// </summary>\r\n    public static var AI_MAX_NUMBER_OF_TEXTURECOORDS = 0x8;\r\n\r\n    /// <summary>\r\n    /// Defines the default bone count limit.\r\n    /// </summary>\r\n    public static var AI_SBBC_DEFAULT_MAX_BONES = 60;\r\n\r\n    /// <summary>\r\n    /// Defines the deboning threshold.\r\n    /// </summary>\r\n    public static var AI_DEBONE_THRESHOLD = 1.0;\r\n\r\n\r\n    /// <summary>\r\n    /// Defines the maximum length of a string used in AiString.\r\n    /// </summary>\r\n    public static var MAX_LENGTH = 1024;\r\n\r\n\r\n    /// <summary>\r\n    /// Defines the default color material.\r\n    /// </summary>\r\n    public static var AI_DEFAULT_MATERIAL_NAME = \"DefaultMaterial\";\r\n\r\n    /// <summary>\r\n    /// Defines the default textured material (if the meshes have UV coords).\r\n    /// </summary>\r\n    public static var AI_DEFAULT_TEXTURED_MATERIAL_NAME = \"TexturedDefaultMaterial\";\r\n\r\n}\r\nclass Defs {\r\n\r\n\r\n/* To avoid running out of memory\r\n * This can be adjusted for specific use cases\r\n * It's NOT a total limit, just a limit for individual allocations\r\n */\r\n    public static function AI_MAX_ALLOC(size:Int) return (256 * 1024 * 1024) / size;\r\n/** Consider using extension property Float.rad */\r\n    public static function AI_DEG_TO_RAD(x:Float) return ((x) * 0.0174532925);\r\n/** Consider using extension property Float.deg */\r\n    public static function AI_RAD_TO_DEG(x:Float) return ((x) * 57.2957795);\r\n\r\n    public static function is_special_float(f:Float):Bool {\r\n        return f == (1 << 8) - 1;\r\n    }\r\n\r\n    public static function distance(this1:Vec3, other:Vec3):Float {\r\n        return Math.sqrt(Math.pow(this1.x + other.x, 2.0)\r\n        + Math.pow(this1.y + other.y, 2.0)\r\n        + Math.pow(this1.z + other.z, 2.0));\r\n    }\r\n\r\n    public static function squareLength(this1:Vec3) {\r\n        return Math.sqrt(Math.pow(this1.x, 2.0)\r\n        + Math.pow(this1.y, 2.0)\r\n        + Math.pow(this1.z, 2.0));\r\n    }\r\n\r\n/* This is PI. Hi PI. */\r\n    public static var AI_MATH_TWO_PI = Math.PI * 2;\r\n    public static var AI_MATH_TWO_PIf = Math.PI * 2;\r\n    public static var AI_MATH_HALF_PI = Math.PI;\r\n\r\n\r\n    /// <summary>\r\n    /// Constructs a new Quaternion from a rotation matrix.\r\n    /// </summary>\r\n    /// <param name=\"matrix\">Rotation matrix to create the Quaternion from.</param>\r\n    static function toQuaternion(matrix:AiMatrix3x3) {\r\n\r\n    }\r\n\r\n    public static function decompose(this1:Mat4, pScaling:AiVector3D, pRotation:AiQuaternion, pPosition:AiVector3D) {\r\n\r\n    }\r\n\r\n    static public function mat4_cast(q:Quat):Mat4 {\r\n        var result = new Mat4();\r\n        var qxx:Float = (q.x * q.x);\r\n        var qyy:Float = (q.y * q.y);\r\n        var qzz:Float = (q.z * q.z);\r\n        var qxz:Float = (q.x * q.z);\r\n        var qxy:Float = (q.x * q.y);\r\n        var qyz:Float = (q.y * q.z);\r\n        var qwx:Float = (q.w * q.x);\r\n        var qwy:Float = (q.w * q.y);\r\n        var qwz:Float = (q.w * q.z);\r\n        result.r0c0 = 1 - 2 * (qyy + qzz);\r\n        result.r1c0 = 2 * (qxy + qwz);\r\n        result.r2c0 = 2 * (qxz - qwy);\r\n\r\n        result.r0c1 = 2 * (qxy - qwz);\r\n        result.r1c1 = 1 - 2 * (qxx + qzz);\r\n        result.r2c1 = 2 * (qyz + qwx);\r\n\r\n        result.r0c2 = 2 * (qxz + qwy);\r\n        result.r1c2 = 2 * (qyz - qwx);\r\n        result.r2c2 = 1 - 2 * (qxx + qyy);\r\n        return result;\r\n    }\r\n\r\n    static public function mat3_cast(q:Quat):Mat3 {\r\n        var result = new Mat3();\r\n        var qxx:Float = (q.x * q.x);\r\n        var qyy:Float = (q.y * q.y);\r\n        var qzz:Float = (q.z * q.z);\r\n        var qxz:Float = (q.x * q.z);\r\n        var qxy:Float = (q.x * q.y);\r\n        var qyz:Float = (q.y * q.z);\r\n        var qwx:Float = (q.w * q.x);\r\n        var qwy:Float = (q.w * q.y);\r\n        var qwz:Float = (q.w * q.z);\r\n        result.r0c0 = 1 - 2 * (qyy + qzz);\r\n        result.r1c0 = 2 * (qxy + qwz);\r\n        result.r2c0 = 2 * (qxz - qwy);\r\n\r\n        result.r0c1 = 2 * (qxy - qwz);\r\n        result.r1c1 = 1 - 2 * (qxx + qzz);\r\n        result.r2c1 = 2 * (qyz + qwx);\r\n\r\n        result.r0c2 = 2 * (qxz + qwy);\r\n        result.r1c2 = 2 * (qyz - qwx);\r\n        result.r2c2 = 1 - 2 * (qxx + qyy);\r\n        return result;\r\n    }\r\n    static public function slerp(x:AiQuaternion, y:AiQuaternion, a:Float):AiQuaternion {\r\n        var z = y;\r\n        var cosTheta = Quat.dot(x, y);\r\n        if (cosTheta < 0) {\r\n            z.x = -y.x;\r\n            z.y = -y.y;\r\n            z.z = -y.z;\r\n            z.w = -y.w;\r\n            cosTheta = -cosTheta;\r\n        }\r\n        return if (cosTheta > 1 - Defs.epsilon) {\r\n            Quat.lerp(x, z, a, new Quat());\r\n        }\r\n        else {\r\n            var angle = Math.acos(cosTheta);\r\n            var sclp = Math.sin((1.0 - a) * angle) / Math.sin(angle) ;\r\n            var sclq = Math.sin(a * angle) / Math.sin(angle) ;\r\n            var o = new Quat();\r\n            o.x = sclp * x.x + sclq * z.x;\r\n            o.y = sclp * x.y + sclq * z.y;\r\n            o.z = sclp * x.z + sclq * z.z;\r\n            o.w = sclp * x.w + sclq * z.w;\r\n            o;\r\n        }\r\n    }\r\n\r\n\r\n    public static var epsilon = 1.401298E-45;\r\n\r\n    public static function isBlack(this1:Vec3) return Math.abs(this1.x) < epsilon && Math.abs(this1.y) < epsilon && Math.abs(this1.z) < epsilon;\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2017 Kenton Hamaluik\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at:\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n*/\r\npackage glm;\r\n@:expose\r\n#if kha\r\nimport kha.math.FastMatrix3;\r\n#else\r\n@:dox(hide)\r\n@:allow(glm.Mat3)\r\nclass Mat3Base {\r\n    public function new() {}\r\n\r\n    public  var _00: Float;public  var _10: Float;public  var _20: Float;\r\n    public var _01: Float; public var _11: Float;public  var _21: Float;\r\n    public var _02: Float;public  var _12: Float;public  var _22: Float;\r\n}\r\n#end\r\n@:expose(\"glm.Mat3Util\")\r\n/**\r\n  A 4x4 matrix\r\n */\r\n#if kha\r\nabstract Mat3(FastMatrix3) from FastMatrix3 to FastMatrix3  {\r\n#else\r\nabstract Mat3(Mat3Base) {\r\n#end\r\n    public inline function new(\r\n            _r0c0:Float = 0, _r0c1:Float = 0, _r0c2:Float = 0,\r\n            _r1c0:Float = 0, _r1c1:Float = 0, _r1c2:Float = 0,\r\n            _r2c0:Float = 0, _r2c1:Float = 0, _r2c2:Float = 0\r\n        ) {\r\n        #if kha\r\n        this = new FastMatrix3(\r\n            _r0c0, _r0c1, _r0c2,\r\n            _r1c0, _r1c1, _r1c2,\r\n            _r2c0, _r2c1, _r2c2\r\n        );\r\n        #else\r\n        this = new Mat3Base();\r\n        r0c0 = _r0c0;\r\n        r1c0 = _r1c0;\r\n        r2c0 = _r2c0;\r\n\r\n        r0c1 = _r0c1;\r\n        r1c1 = _r1c1;\r\n        r2c1 = _r2c1;\r\n\r\n        r0c2 = _r0c2;\r\n        r1c2 = _r1c2;\r\n        r2c2 = _r2c2;\r\n        #end\r\n    }\r\n\r\n    /**\r\n      Accessor for the element in row 0 and column 0\r\n     */\r\n    @:property\r\n    public var r0c0(get, set):Float;\r\n    private inline function get_r0c0():Float return this._00;\r\n    private inline function set_r0c0(v:Float):Float return this._00 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 1 and column 0\r\n     */\r\n    public var r1c0(get, set):Float;\r\n    private inline function get_r1c0():Float return this._01;\r\n    private inline function set_r1c0(v:Float):Float return this._01 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 2 and column 0\r\n     */\r\n    public var r2c0(get, set):Float;\r\n    private inline function get_r2c0():Float return this._02;\r\n    private inline function set_r2c0(v:Float):Float return this._02 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 0 and column 1\r\n     */\r\n    public var r0c1(get, set):Float;\r\n    private inline function get_r0c1():Float return this._10;\r\n    private inline function set_r0c1(v:Float):Float return this._10 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 1 and column 1\r\n     */\r\n    public var r1c1(get, set):Float;\r\n    private inline function get_r1c1():Float return this._11;\r\n    private inline function set_r1c1(v:Float):Float return this._11 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 2 and column 1\r\n     */\r\n    public var r2c1(get, set):Float;\r\n    private inline function get_r2c1():Float return this._12;\r\n    private inline function set_r2c1(v:Float):Float return this._12 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 0 and column 2\r\n     */\r\n    public var r0c2(get, set):Float;\r\n    private inline function get_r0c2():Float return this._20;\r\n    private inline function set_r0c2(v:Float):Float return this._20 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 1 and column 2\r\n     */\r\n    public var r1c2(get, set):Float;\r\n    private inline function get_r1c2():Float return this._21;\r\n    private inline function set_r1c2(v:Float):Float return this._21 = v;\r\n\r\n    /**\r\n      Accessor for the element in row 2 and column 2\r\n     */\r\n    public var r2c2(get, set):Float;\r\n    private inline function get_r2c2():Float return this._22;\r\n    private inline function set_r2c2(v:Float):Float return this._22 = v;\r\n\r\n    /**\r\n      Read an element using a column-major index\r\n      @param key the index to use\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function get(key:Int):Float {\r\n        return switch(key) {\r\n            case  0: r0c0;\r\n            case  1: r1c0;\r\n            case  2: r2c0;\r\n            case  3: r0c1;\r\n            case  4: r1c1;\r\n            case  5: r2c1;\r\n            case  6: r0c2;\r\n            case  7: r1c2;\r\n            case  8: r2c2;\r\n            case _: throw 'Index ${key} out of bounds (0-8)!';\r\n        };\r\n    }\r\n\r\n    /**\r\n      Write to an element using a column-major index\r\n      @param key the index to use\r\n      @param value the value to set\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function set(key:Int, value:Float):Float {\r\n        return switch(key) {\r\n            case  0: r0c0 = value;\r\n            case  1: r1c0 = value;\r\n            case  2: r2c0 = value;\r\n            case  3: r0c1 = value;\r\n            case  4: r1c1 = value;\r\n            case  5: r2c1 = value;\r\n            case  6: r0c2 = value;\r\n            case  7: r1c2 = value;\r\n            case  8: r2c2 = value;\r\n            case _: throw 'Index ${key} out of bounds (0-8)!';\r\n        };\r\n    }\r\n\r\n    /**\r\n      Tests if two matrices are equal on an element-by-element basis\r\n      @param m the other matrix to check\r\n      @return Bool\r\n     */\r\n    public inline function equals(b:Mat3):Bool {\r\n        return !(\r\n               Math.abs(r0c0 - b.r0c0) >= glm.GLM.EPSILON\r\n            || Math.abs(r0c1 - b.r0c1) >= glm.GLM.EPSILON\r\n            || Math.abs(r0c2 - b.r0c2) >= glm.GLM.EPSILON\r\n            || Math.abs(r1c0 - b.r1c0) >= glm.GLM.EPSILON\r\n            || Math.abs(r1c1 - b.r1c1) >= glm.GLM.EPSILON\r\n            || Math.abs(r1c2 - b.r1c2) >= glm.GLM.EPSILON\r\n            || Math.abs(r2c0 - b.r2c0) >= glm.GLM.EPSILON\r\n            || Math.abs(r2c1 - b.r2c1) >= glm.GLM.EPSILON\r\n            || Math.abs(r2c2 - b.r2c2) >= glm.GLM.EPSILON\r\n        );\r\n    }\r\n\r\n    /**\r\n      Gets a string representation of the matrix\r\n      @return String\r\n     */\r\n    public inline function toString():String {\r\n        return\r\n            '[${r0c0}, ${r0c1}, ${r0c2}]\\n' +\r\n            '[${r1c0}, ${r1c1}, ${r1c2}]\\n' +\r\n            '[${r2c0}, ${r2c1}, ${r2c2}]\\n';\r\n    }\r\n\r\n    /**\r\n      Fill `dest` with an identity matrix\r\n      @param dest the matrix to fill out\r\n      @return Mat3\r\n     */\r\n    public inline static function identity(dest:Mat3):Mat3 {\r\n        dest.r0c0 = 1;\r\n        dest.r0c1 = 0;\r\n        dest.r0c2 = 0;\r\n\r\n        dest.r1c0 = 0;\r\n        dest.r1c1 = 1;\r\n        dest.r1c2 = 0;\r\n        \r\n        dest.r2c0 = 0;\r\n        dest.r2c1 = 0;\r\n        dest.r2c2 = 1;\r\n\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Copies one matrix into another\r\n      @param src The matrix to copy from\r\n      @param dest The matrix to copy into\r\n      @return Mat3\r\n     */\r\n    public inline static function copy(src:Mat3, dest:Mat3):Mat3 {\r\n        dest.r0c0 = src.r0c0;\r\n        dest.r0c1 = src.r0c1;\r\n        dest.r0c2 = src.r0c2;\r\n        \r\n        dest.r1c0 = src.r1c0;\r\n        dest.r1c1 = src.r1c1;\r\n        dest.r1c2 = src.r1c2;\r\n        \r\n        dest.r2c0 = src.r2c0;\r\n        dest.r2c1 = src.r2c1;\r\n        dest.r2c2 = src.r2c2;\r\n\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Transposes a matrix\r\n      @param src The matrix to transpose\r\n      @param dest The destination matrix. Call with `src == dest` to modify `src` in place\r\n      @return Mat3\r\n     */\r\n    public inline static function transpose(src:Mat3, dest:Mat3):Mat3 {\r\n        var src_r1c0 = src.r1c0;\r\n        var src_r2c0 = src.r2c0;\r\n        var src_r2c1 = src.r2c1;\r\n\r\n        dest.r0c0 = src.r0c0;\r\n        dest.r1c0 = src.r0c1;\r\n        dest.r2c0 = src.r0c2;\r\n\r\n        dest.r0c1 = src_r1c0;\r\n        dest.r1c1 = src.r1c1;\r\n        dest.r2c1 = src.r1c2;\r\n\r\n        dest.r0c2 = src_r2c0;\r\n        dest.r1c2 = src_r2c1;\r\n        dest.r2c2 = src.r2c2;\r\n\r\n        return dest;\r\n    }\r\n\r\n    inline static function cofactor(a:Float, b:Float, c:Float, d:Float):Float {\r\n        return a * d - b * c;\r\n    }\r\n\r\n    /**\r\n      Calculates the determinant of the matrix\r\n      @param src The matrix to calculate the determinant of\r\n      @return Float\r\n     */\r\n    public inline static function determinant(src:Mat3):Float {\r\n        var c00 = cofactor(src.r1c1, src.r1c2, src.r2c1, src.r2c2);\r\n        var c01 = cofactor(src.r0c1, src.r0c2, src.r2c1, src.r2c2);\r\n        var c02 = cofactor(src.r0c1, src.r0c2, src.r1c1, src.r1c2);\r\n        return src.r0c0 * c00 - src.r1c0 * c01 + src.r2c0 * c02;\r\n    }\r\n\r\n    /**\r\n      Inverts the `src` matrix, storing the result in `dest`. If `src == dest`, modifies `src` in place.\r\n      @param src The source matrix\r\n      @param dest The matrix to store the result in\r\n      @return Mat3\r\n     */\r\n    public inline static function invert(src:Mat3, dest:Mat3):Mat3 {\r\n        var c00 = cofactor(src.r1c1, src.r1c2, src.r2c1, src.r2c2);\r\n        var c01 = cofactor(src.r0c1, src.r0c2, src.r2c1, src.r2c2);\r\n        var c02 = cofactor(src.r0c1, src.r0c2, src.r1c1, src.r1c2);\r\n\r\n        var det:Float = src.r0c0 * c00 - src.r1c0 * c01 + src.r2c0 * c02;\r\n        if (Math.abs(det) < glm.GLM.EPSILON) {\r\n            throw \"determinant is too small\";\r\n        }\r\n        \r\n        var c10 = cofactor(src.r1c0, src.r1c2, src.r2c0, src.r2c2);\r\n        var c11 = cofactor(src.r0c0, src.r0c2, src.r2c0, src.r2c2);\r\n        var c12 = cofactor(src.r0c0, src.r0c2, src.r1c0, src.r1c2);\r\n\r\n        var c20 = cofactor(src.r1c0, src.r1c1, src.r2c0, src.r2c1);\r\n        var c21 = cofactor(src.r0c0, src.r0c1, src.r2c0, src.r2c1);\r\n        var c22 = cofactor(src.r0c0, src.r0c1, src.r1c0, src.r1c1);\r\n\r\n        var invdet:Float = 1.0 / det;\r\n\r\n        dest.r0c0 = c00 * invdet;\r\n        dest.r1c0 = -c01 * invdet;\r\n        dest.r2c0 = c02 * invdet;\r\n        dest.r0c1 = -c10 * invdet;\r\n        dest.r1c1 = c11 * invdet;\r\n        dest.r2c1 = -c12 * invdet;\r\n        dest.r0c2 = c20 * invdet;\r\n        dest.r1c2 = -c21 * invdet;\r\n        dest.r2c2 = c22 * invdet;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Multiplies two matrices together, storing the result in `dest`. Caches `a` and `b` so `a == dest` and `b == dest` are valid.\r\n      @param a The left-hand matrix\r\n      @param b The right-hand matrix\r\n      @param dest The matrix to store the result in\r\n      @return Mat3\r\n     */\r\n    public inline static function multMat(a:Mat3, b:Mat3, dest:Mat3):Mat3 {\r\n        // cache what we need to do the calculations\r\n        var _a:Mat3;\r\n        var _b:Mat3;\r\n        if(dest == a) {\r\n            _a = Mat3.copy(a, new Mat3());\r\n            _b = b;\r\n        }\r\n        else if(dest == b) {\r\n            _a = a;\r\n            _b = Mat3.copy(b, new Mat3());\r\n        }\r\n        else {\r\n            _a = a;\r\n            _b = b;\r\n        }\r\n\r\n        dest.r0c0 = _a.r0c0*_b.r0c0 + _a.r0c1*_b.r1c0 + _a.r0c2*_b.r2c0;\r\n        dest.r0c1 = _a.r0c0*_b.r0c1 + _a.r0c1*_b.r1c1 + _a.r0c2*_b.r2c1;\r\n        dest.r0c2 = _a.r0c0*_b.r0c2 + _a.r0c1*_b.r1c2 + _a.r0c2*_b.r2c2;\r\n\r\n        dest.r1c0 = _a.r1c0*_b.r0c0 + _a.r1c1*_b.r1c0 + _a.r1c2*_b.r2c0;\r\n        dest.r1c1 = _a.r1c0*_b.r0c1 + _a.r1c1*_b.r1c1 + _a.r1c2*_b.r2c1;\r\n        dest.r1c2 = _a.r1c0*_b.r0c2 + _a.r1c1*_b.r1c2 + _a.r1c2*_b.r2c2;\r\n\r\n        dest.r2c0 = _a.r2c0*_b.r0c0 + _a.r2c1*_b.r1c0 + _a.r2c2*_b.r2c0;\r\n        dest.r2c1 = _a.r2c0*_b.r0c1 + _a.r2c1*_b.r1c1 + _a.r2c2*_b.r2c1;\r\n        dest.r2c2 = _a.r2c0*_b.r0c2 + _a.r2c1*_b.r1c2 + _a.r2c2*_b.r2c2;\r\n        \r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `multMat(a, b, new Mat3())`\r\n      @param a \r\n      @param b \r\n      @return Mat3\r\n     */\r\n    @:op(A * B)\r\n    inline static function multMatOp(a:Mat3, b:Mat3):Mat3 {\r\n        return multMat(a, b, new Mat3());\r\n    }\r\n\r\n    /**\r\n      Multiplies a vector `v` by a matrix `m`, storing the result in `dest`. Caches so `v == dest` is valid.\r\n      @param m The transforming matrix\r\n      @param v The vector to multiply with\r\n      @param dest The resulting vector\r\n      @return Vec4\r\n     */\r\n    public inline static function multVec(m:Mat3, v:Vec3, dest:Vec3):Vec3 {\r\n        var x:Float = v.x, y:Float = v.y, z:Float = v.z;\r\n        dest.x = m.r0c0*x + m.r0c1*y + m.r0c2*z;\r\n        dest.y = m.r1c0*x + m.r1c1*y + m.r1c2*z;\r\n        dest.z = m.r2c0*x + m.r2c1*y + m.r2c2*z;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut for `multVec(m, v, new Vec4())`\r\n      @param m \r\n      @param v \r\n      @return Vec4\r\n     */\r\n    @:op(A * B)\r\n    inline static function multVecOp(m:Mat3, v:Vec3):Vec3 {\r\n        return multVec(m, v, new Vec3());\r\n    }\r\n\r\n    /**\r\n      Construct a Mat3 from an array of floats in column-major order\r\n      @param arr an array with 16 elements\r\n      @return Mat3\r\n     */\r\n    @:from\r\n    public inline static function fromFloatArray(arr:Array<Float>):Mat3 {\r\n        return new Mat3(\r\n            arr[0], arr[3], arr[6],\r\n            arr[1], arr[4], arr[7],\r\n            arr[2], arr[5], arr[8]\r\n        );\r\n    }\r\n\r\n    /**\r\n      Cast the matrix in an array of floats, in column-major order\r\n      @return Array<Float>\r\n     */\r\n    @:to\r\n    public inline function toFloatArray():Array<Float> {\r\n        return [\r\n            r0c0, r1c0, r2c0,\r\n            r0c1, r1c1, r2c1,\r\n            r0c2, r1c2, r2c2\r\n        ];\r\n    }\r\n}","package assimp.format;\r\n\r\n/**\r\n * Created by elect on 29/01/2017.\r\n */\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Enumerates all supported types of light sources.\r\n */\r\n\r\nimport assimp.format.Defs.AiColor3D;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.format.Defs.AiColor3D;\r\nimport assimp.format.Defs.AiVector2D;\r\n@:enum abstract AiLightSourceType(Int) from Int to Int {\r\n    var UNDEFINED = (0x0);\r\n\r\n    //! A directional light source has a well-defined direction\r\n    //! but is infinitely far away. That's quite a good\r\n    //! approximation for sun light.\r\n    var DIRECTIONAL = (0x1);\r\n\r\n    //! A point light source has a well-defined position\r\n    //! in space but no direction - it emits light in all\r\n    //! directions. A normal bulb is a point light.\r\n    var POINT = (0x2);\r\n\r\n    //! A spot light source emits light in a specific\r\n    //! angle. It has a position and a direction it is pointing to.\r\n    //! A good example for a spot light is a light spot in\r\n    //! sport arenas.\r\n    var SPOT = (0x3);\r\n\r\n    //! The generic light level of the world, including the bounces\r\n    //! of all other light sources.\r\n    //! Typically, there's at most one ambient light in a scene.\r\n    //! This light type doesn't have a valid position, direction, or\r\n    //! other properties, just a color.\r\n    var AMBIENT = (0x4);\r\n\r\n    //! An area light is a rectangle with predefined size that uniformly\r\n    //! emits light from one of its sides. The position is center of the\r\n    //! rectangle and direction is its normal vector.\r\n    var AREA = (0x5);\r\n\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** Helper structure to describe a light source.\r\n *\r\n *  Assimp supports multiple sorts of light sources, including\r\n *  directional, point and spot lights. All of them are defined with just\r\n *  a single structure and distinguished by their parameters.\r\n *  Note - some file formats (such as 3DS, ASE) export a \"target point\" -\r\n *  the point a spot light is looking at (it can even be animated). Assimp\r\n *  writes the target point as a subnode of a spotlights's main node,\r\n *  called \"<spotName>.Target\". However, this is just additional information\r\n *  then, the transformation tracks of the main node make the\r\n *  spot light already point in the right direction.\r\n */\r\nclass AiLight {\r\n\r\n/** The name of the light source.\r\n         *\r\n         *  There must be a node in the scenegraph with the same name.\r\n         *  This node specifies the position of the light in the scene\r\n         *  hierarchy and can be animated.\r\n         */\r\n    public var name:String ;\r\n\r\n    /** The type of the light source.\r\n         *\r\n         * aiLightSource_UNDEFINED is not a valid value for this member.\r\n         */\r\n    public var type:AiLightSourceType ;\r\n\r\n    /** Position of the light source in space. Relative to the\r\n         *  transformation of the node corresponding to the light.\r\n         *\r\n         *  The position is undefined for directional lights.\r\n         */\r\n    public var position:AiVector3D ;\r\n\r\n    /** Direction of the light source in space. Relative to the\r\n         *  transformation of the node corresponding to the light.\r\n         *\r\n         *  The direction is undefined for point lights. The vector\r\n         *  may be normalized, but it needn't.\r\n         */\r\n    public var direction:AiVector3D ;\r\n\r\n    /** Up direction of the light source in space. Relative to the\r\n         *  transformation of the node corresponding to the light.\r\n         *\r\n         *  The direction is undefined for point lights. The vector\r\n         *  may be normalized, but it needn't.\r\n         */\r\n    public var up:AiVector3D ;\r\n\r\n    /** Constant light attenuation factor.\r\n         *\r\n         *  The intensity of the light source at a given distance 'd' from\r\n         *  the light's position is\r\n         *  @code\r\n         *  Atten = 1/( att0 + att1 * d + att2 * d*d)\r\n         *  @endcode\r\n         *  This member corresponds to the att0 variable in the equation.\r\n         *  Naturally undefined for directional lights.\r\n         */\r\n    public var attenuationConstant:Float ;\r\n\r\n    /** Linear light attenuation factor.\r\n         *\r\n         *  The intensity of the light source at a given distance 'd' from\r\n         *  the light's position is\r\n         *  @code\r\n         *  Atten = 1/( att0 + att1 * d + att2 * d*d)\r\n         *  @endcode\r\n         *  This member corresponds to the att1 variable in the equation.\r\n         *  Naturally undefined for directional lights.\r\n         */\r\n    public var attenuationLinear:Float ;\r\n\r\n    /** Quadratic light attenuation factor.\r\n         *\r\n         *  The intensity of the light source at a given distance 'd' from\r\n         *  the light's position is\r\n         *  @code\r\n         *  Atten = 1/( att0 + att1 * d + att2 * d*d)\r\n         *  @endcode\r\n         *  This member corresponds to the att2 variable in the equation.\r\n         *  Naturally undefined for directional lights.\r\n         */\r\n    public var attenuationQuadratic:Float ;\r\n\r\n    /** Diffuse color of the light source\r\n         *\r\n         *  The diffuse light color is multiplied with the diffuse\r\n         *  material color to obtain the final color that contributes\r\n         *  to the diffuse shading term.\r\n         */\r\n    public var colorDiffuse:AiColor3D ;\r\n\r\n    /** Specular color of the light source\r\n         *\r\n         *  The specular light color is multiplied with the specular\r\n         *  material color to obtain the final color that contributes\r\n         *  to the specular shading term.\r\n         */\r\n    public var colorSpecular:AiColor3D ;\r\n\r\n    /** Ambient color of the light source\r\n         *\r\n         *  The ambient light color is multiplied with the ambient\r\n         *  material color to obtain the final color that contributes\r\n         *  to the ambient shading term. Most renderers will ignore\r\n         *  this value it, is just a remaining of the fixed-function pipeline\r\n         *  that is still supported by quite many file formats.\r\n         */\r\n    public var colorAmbient:AiColor3D ;\r\n\r\n    /** Inner angle of a spot light's light cone.\r\n         *\r\n         *  The spot light has maximum influence on objects inside this\r\n         *  angle. The angle is given in radians. It is 2PI for point\r\n         *  lights and undefined for directional lights.\r\n         */\r\n    public var angleInnerCone:Float ;\r\n\r\n    /** Outer angle of a spot light's light cone.\r\n         *\r\n         *  The spot light does not affect objects outside this angle.\r\n         *  The angle is given in radians. It is 2PI for point lights and\r\n         *  undefined for directional lights. The outer angle must be\r\n         *  greater than or equal to the inner angle.\r\n         *  It is assumed that the application uses a smooth\r\n         *  interpolation between the inner and the outer cone of the\r\n         *  spot light.\r\n         */\r\n    public var angleOuterCone:Float ;\r\n\r\n    /** Size of area light source. */\r\n    public var size:AiVector2D ;\r\n\r\n    public function new() {\r\n        this.name = \"\";\r\n        this.type = AiLightSourceType.UNDEFINED;\r\n        this.position = new AiVector3D();\r\n        this.direction = new AiVector3D();\r\n        this.up = new AiVector3D();\r\n        this.attenuationConstant = 0;\r\n        this.attenuationLinear = 1;\r\n        this.attenuationQuadratic = 0;\r\n        this.colorDiffuse = new AiColor3D();\r\n        this.colorSpecular = new AiColor3D();\r\n        this.colorAmbient = new AiColor3D();\r\n        this.angleInnerCone = Defs.AI_MATH_TWO_PIf;\r\n        this.angleOuterCone = Defs.AI_MATH_TWO_PIf;\r\n        this.size = new AiVector2D();\r\n    }\r\n}","/*\r\n * Copyright (c) 2017 Kenton Hamaluik\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at:\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n*/\r\npackage glm;\r\n@:expose\r\n#if kha\r\nimport kha.math.FastVector2;\r\n#else\r\n@:dox(hide)\r\n@:allow(glm.Vec2)\r\nclass Vec2Base {\r\n    public  function new() {}\r\n\r\n    public  var x:Float;\r\n    public  var y:Float;\r\n}\r\n#end\r\n@:expose(\"glm.Vec2Util\")\r\n/**\r\n  A two-element vector\r\n */\r\n#if kha\r\nabstract Vec2(FastVector2) from FastVector2 to FastVector2  {\r\n#else\r\nabstract Vec2(Vec2Base) {\r\n#end\r\n    /**\r\n      Accessor for the first element of the vector\r\n     */\r\n    public var x(get, set):Float;\r\n    private inline function get_x():Float return this.x;\r\n    private inline function set_x(v:Float):Float return this.x = v;\r\n\r\n    /**\r\n      Accessor for the second element of the vector\r\n     */\r\n    public var y(get, set):Float;\r\n    private inline function get_y():Float return this.y;\r\n    private inline function set_y(v:Float):Float return this.y = v;\r\n    \r\n    /**\r\n      Accessor for the first element of the vector\r\n     */\r\n    public var i(get, set):Float;\r\n    private inline function get_i():Float return this.x;\r\n    private inline function set_i(v:Float):Float return this.x = v;\r\n\r\n    /**\r\n      Accessor for the second element of the vector\r\n     */\r\n    public var j(get, set):Float;\r\n    private inline function get_j():Float return this.y;\r\n    private inline function set_j(v:Float):Float return this.y = v;\r\n\r\n    /**\r\n      Read an element using an index\r\n      @param key the index to use\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function get(key:Int):Float {\r\n        return switch(key) {\r\n            case 0: x;\r\n            case 1: y;\r\n            case _: throw 'Index ${key} out of bounds (0-1)!';\r\n        };\r\n    }\r\n\r\n    /**\r\n      Write to an element using an index\r\n      @param key the index to use\r\n      @param value the value to set\r\n      @return Float\r\n     */\r\n    @:arrayAccess\r\n    public inline function set(key:Int, value:Float):Float {\r\n        return switch(key) {\r\n            case 0: x = value;\r\n            case 1: y = value;\r\n            case _: throw 'Index ${key} out of bounds (0-1)!';\r\n        };\r\n    }\r\n\r\n    public inline function new(x:Float = 0, y:Float = 0) {\r\n        #if kha\r\n        this = new FastVector2();\r\n        #else\r\n        this = new Vec2Base();\r\n        #end\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n      Checks if `this == v` on an element-by-element basis\r\n      @param v - The vector to check against\r\n      @return Bool\r\n     */\r\n    public inline function equals(b:Vec2):Bool {\r\n        return !(\r\n               Math.abs(x - b.x) >= glm.GLM.EPSILON\r\n            || Math.abs(y - b.y) >= glm.GLM.EPSILON\r\n        );\r\n    }\r\n\r\n    /**\r\n      Creates a string reprentation of `this`\r\n      @return String\r\n     */\r\n    public inline function toString():String {\r\n        return\r\n            '<${x}, ${y}>';\r\n    }\r\n\r\n    /**\r\n      Calculates the square of the magnitude of the vector, to save calculation time if the actual magnitude isn't needed\r\n      @return Float\r\n     */\r\n    public inline function lengthSquared():Float {\r\n        return x*x + y*y;\r\n    }\r\n\r\n    /**\r\n      Calculates the magnitude of the vector\r\n      @return Float\r\n     */\r\n    public inline function length():Float {\r\n        return Math.sqrt(lengthSquared());\r\n    }\r\n\r\n    /**\r\n      Copies one vector into another\r\n      @param src The vector to copy from\r\n      @param dest The vector to copy into\r\n      @return Vec2\r\n     */\r\n    public inline static function copy(src:Vec2, dest:Vec2):Vec2 {\r\n        dest.x = src.x;\r\n        dest.y = src.y;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Utility for setting an entire vector at once\r\n      @param dest The vector to set values into\r\n      @param x \r\n      @param y \r\n      @return Vec2\r\n     */\r\n    public inline static function setComponents(dest:Vec2, x:Float = 0, y:Float = 0):Vec2 {\r\n        dest.x = x;\r\n        dest.y = y;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Adds two vectors on an element-by-element basis\r\n      @param a \r\n      @param b \r\n      @param dest The vector to store the result in\r\n      @return Vec2\r\n     */\r\n    public inline static function addVec(a:Vec2, b:Vec2, dest:Vec2):Vec2 {\r\n        dest.x = a.x + b.x;\r\n        dest.y = a.y + b.y;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Subtracts `b` from `a` on an element-by-element basis\r\n      @param a \r\n      @param b \r\n      @param dest The vector to store the result in\r\n      @return Vec2\r\n     */\r\n    public inline static function subtractVec(a:Vec2, b:Vec2, dest:Vec2):Vec2 {\r\n        dest.x = a.x - b.x;\r\n        dest.y = a.y - b.y;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `addVec(a, b, new Vec2())`\r\n      @param a \r\n      @param b \r\n      @return Vec2\r\n     */\r\n    @:op(A + B)\r\n    inline static function addVecOp(a:Vec2, b:Vec2):Vec2 {\r\n        return addVec(a, b, new Vec2());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `subtractVec(a, b, new Vec2())`\r\n      @param a \r\n      @param b \r\n      @return Vec2\r\n     */\r\n    @:op(A - B)\r\n    inline static function subtractVecOp(a:Vec2, b:Vec2):Vec2 {\r\n        return subtractVec(a, b, new Vec2());\r\n    }\r\n\r\n    /**\r\n      Adds a scalar to a vector\r\n      @param a The vector to add a scalar to\r\n      @param s A scalar to add\r\n      @param dest The vector to store the result in\r\n      @return Vec2\r\n     */\r\n    public inline static function addScalar(a:Vec2, s:Float, dest:Vec2):Vec2 {\r\n        dest.x = a.x + s;\r\n        dest.y = a.y + s;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Multiplies the elements of `a` by `s`, storing the result in `dest`\r\n      @param a \r\n      @param s \r\n      @param dest \r\n      @return Vec2\r\n     */\r\n    public inline static function multiplyScalar(a:Vec2, s:Float, dest:Vec2):Vec2 {\r\n        dest.x = a.x * s;\r\n        dest.y = a.y * s;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `addScalar(a, s, new Vec2())`\r\n      @param a \r\n      @param s \r\n      @return Vec2\r\n     */\r\n    @:op(A + B)\r\n    inline static function addScalarOp(a:Vec2, s:Float):Vec2 {\r\n        return addScalar(a, s, new Vec2());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `addScalar(a, -s, new Vec2())`\r\n      @param a \r\n      @param s \r\n      @return Vec2\r\n     */\r\n    @:op(A - B)\r\n    inline static function subtractScalarOp(a:Vec2, s:Float):Vec2 {\r\n        return addScalar(a, -s, new Vec2());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `multiplyScalar(a, s, new Vec2())`\r\n      @param a \r\n      @param s \r\n      @return Vec2\r\n     */\r\n    @:op(A * B)\r\n    inline static function multiplyScalarOp(a:Vec2, s:Float):Vec2 {\r\n        return multiplyScalar(a, s, new Vec2());\r\n    }\r\n\r\n    /**\r\n      Shortcut operator for `multiplyScalar(a, 1/s, new Vec2())`\r\n      @param a \r\n      @param s \r\n      @return Vec2\r\n     */\r\n    @:op(A / B)\r\n    inline static function divideScalarOp(a:Vec2, s:Float):Vec2 {\r\n        return multiplyScalar(a, 1/s, new Vec2());\r\n    }\r\n\r\n    /**\r\n      Calculates the square of the distance between two vectors\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function distanceSquared(a:Vec2, b:Vec2):Float {\r\n        return (a.x - b.x) * (a.x - b.x) +\r\n            (a.y - b.y) * (a.y - b.y);\r\n    }\r\n\r\n    /**\r\n      Calculates the distance (magnitude) between two vectors\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function distance(a:Vec2, b:Vec2):Float {\r\n        return Math.sqrt(distanceSquared(a, b));\r\n    }\r\n\r\n    /**\r\n      Calculates the dot product of two vectors\r\n      @param a \r\n      @param b \r\n      @return Float\r\n     */\r\n    public inline static function dot(a:Vec2, b:Vec2):Float {\r\n        return a.x * b.x +\r\n            a.y * b.y;\r\n    }\r\n\r\n    /**\r\n      Calculates the cross product of `a` and `b`\r\n      @param a The left-hand side vector to cross\r\n      @param b The right-hand side vector to cross\r\n      @param dest Where to store the result\r\n      @return Vec3 `dest`\r\n     */\r\n    public inline static function cross(a:Vec2, b:Vec2, dest:Vec3):Vec3 {\r\n        dest = new Vec3(\r\n            0,\r\n            0,\r\n            a.x * b.y - a.y * b.x);\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Normalizes `v` such that `v.length() == 1`, and stores the result in `dest`\r\n      @param v \r\n      @param dest \r\n      @return Vec2\r\n     */\r\n    public inline static function normalize(v:Vec2, dest:Vec2):Vec2 {\r\n        var length:Float = v.length();\r\n        var mult:Float = 0;\r\n        if(length >= glm.GLM.EPSILON) {\r\n            mult = 1 / length;\r\n        }\r\n        return Vec2.multiplyScalar(v, mult, dest);\r\n    }\r\n\r\n    /**\r\n      Linearly interpolates between `a` and `b`.\r\n      @param a The value when `t == 0`\r\n      @param b The value when `t == 1`\r\n      @param t A value between `0` and `1`, not clamped by the function\r\n      @param dest The vector to store the result in\r\n      @return Vec2\r\n     */\r\n    public inline static function lerp(a:Vec2, b:Vec2, t:Float, dest:Vec2):Vec2 {\r\n        dest.x = glm.GLM.lerp(a.x, b.x, t);\r\n        dest.y = glm.GLM.lerp(a.y, b.y, t);\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Construct a Vec2 from an array of floats\r\n      @param arr an array with 2 elements, corresponding to x, y\r\n      @return Vec2\r\n     */\r\n    @:from\r\n    public inline static function fromFloatArray(arr:Array<Float>):Vec2 {\r\n        return new Vec2(arr[0], arr[1]);\r\n    }\r\n\r\n    /**\r\n      Converts this into a 2-element array of floats\r\n      @return Array<Float>\r\n     */\r\n    @:to\r\n    public inline function toFloatArray():Array<Float> {\r\n        return [x, y];\r\n    }\r\n}","package assimp.format;\r\nimport haxe.io.BytesOutput;\r\nimport assimp.IOSystem.MemoryIOStream;\r\nimport assimp.format.Defs.AiColor4D;\r\nimport haxe.io.BytesInput;\r\nimport assimp.IOStreamUtil;\r\nimport minko.render.WrapMode;\r\nimport Lambda;\r\nimport Lambda;\r\nimport assimp.Types.AiReturn;\r\nimport Lambda;\r\nimport assimp.format.Defs.AiVector2D;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.format.Defs.AiColor3D;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.format.Defs.AiColor3D;\r\nimport assimp.format.Defs.AiVector2D;\r\nimport haxe.io.Bytes;\r\n\r\n@:enum abstract PropertyType(Int) from Int to Int\r\n{\r\n    /// <summary>\r\n    /// Array of single-precision (32 bit) floats.\r\n    /// </summary>\r\n    var AiFloat = 0x1;\r\n\r\n/// <summary>\r\n/// Property is a string.\r\n/// </summary>\r\n    var AiString = 0x3;\r\n\r\n    /// <summary>\r\n    /// Array of 32 bit integers.\r\n    /// </summary>\r\n    var AiInteger = 0x4;\r\n\r\n    /// <summary>\r\n    /// Byte buffer where the content is undefined.\r\n    /// </summary>\r\n    var AiBuffer = 0x5;\r\n}\r\nclass AiMaterialProperty {\r\n    public var mKey:String;\r\n    public var mSemantic:Int;\r\n    public var mIndex:Int;\r\n\r\n    public var mDataLength:Int;\r\n    public var mType:Int;\r\n    public var mData:Bytes;\r\n    public var fullyQualifiedName(get, null):String;\r\n\r\n    function get_fullyQualifiedName() {\r\n        return AiMaterial.createFullyQualifiedName(mKey, mSemantic, mIndex);\r\n    }\r\n    /// <returns>Float</returns>\r\n    public function getFloatValue() {\r\n        if (mType == PropertyType.AiFloat || mType == PropertyType.AiInteger)\r\n            return new BytesInput(mData).readFloat();\r\n\r\n        return 0;\r\n    }\r\n\r\n    public function setProperty(baseName, texType, textureIndex):AiMaterialProperty {\r\n        this.mKey = baseName;\r\n        this.mSemantic = texType;\r\n        this.mIndex = textureIndex;\r\n        return this;\r\n    }\r\n\r\n    public function setStringValue(s:String):AiMaterialProperty {\r\n        mType = PropertyType.AiString;\r\n        var tmp = new BytesOutput();\r\n        IOStreamUtil.writeAiString(tmp, s);\r\n        mData = tmp.getBytes();\r\n        return this;\r\n    }\r\n\r\n    public function setIntegerValue(s:Int):AiMaterialProperty {\r\n        mType = PropertyType.AiInteger;\r\n        var tmp = new BytesOutput();\r\n        tmp.writeInt32(s);\r\n        mData = tmp.getBytes();\r\n        return this;\r\n    }\r\n\r\n    public function setFloatValue(s:Float):AiMaterialProperty {\r\n        mType = PropertyType.AiFloat;\r\n        var tmp = new BytesOutput();\r\n        tmp.writeFloat(s);\r\n        mData = tmp.getBytes();\r\n        return this;\r\n    }\r\n\r\n    public function setColor4DValue(s:AiColor4D) {\r\n        mType = PropertyType.AiFloat ;\r\n        var tmp = new BytesOutput();\r\n        IOStreamUtil.writeAiColor4D(tmp, s);\r\n        mData = tmp.getBytes();\r\n        return this;\r\n    }\r\n\r\n\r\n    public function getStringValue() {\r\n        if (mType != PropertyType.AiString)\r\n            return null;\r\n        var stream = new MemoryIOStream(mData);\r\n        return IOStreamUtil.readAiString(stream);\r\n    }\r\n\r\n    public function getIntegerValue() {\r\n        if (mType == PropertyType.AiFloat || mType == PropertyType.AiInteger)\r\n            return new BytesInput(mData).readInt32();\r\n\r\n        return 0;\r\n    }\r\n\r\n    public function getColor4DValue():AiColor4D {\r\n        if (mType != PropertyType.AiFloat || mData == null)\r\n            return new AiColor4D();\r\n\r\n        //We may have a Color that's RGB, so still read it and set alpha to 1.0\r\n\r\n\r\n        if (mData.length >= 4 * 4) {\r\n            var stream = new MemoryIOStream(mData);\r\n            return IOStreamUtil.readAiColor4D(stream);\r\n        }\r\n        else if (mData.length >= 3 * 4) {\r\n            var stream = new MemoryIOStream(mData);\r\n            var color3D:AiColor3D = IOStreamUtil.readAiColor3D(stream);\r\n            return new AiColor4D(color3D.r, color3D.g, color3D.b, 1.0);\r\n        }\r\n\r\n        return new AiColor4D();\r\n    }\r\n\r\n    public function new() {\r\n\r\n    }\r\n}\r\n\r\n\r\nclass AiTexture {\r\n\r\n    /** Width of the texture, in pixels\r\n     *\r\n     * If height is zero the texture is compressed in a format like JPEG. In this case width specifies the size of the memory area pcData is pointing to, in bytes.     */\r\n    public var width:Int;//= 0  // ColladaParser.findFilenameForEffectTexture lies on this to be 0 at start, if you have to change it, check it\r\n\r\n    /** Height of the texture, in pixels\r\n     *\r\n     * If this value is zero, pcData points to an compressed texture in any format (e.g. JPEG).      */\r\n    public var height:Int;//= 0\r\n\r\n    /** A hint from the loader to make it easier for applications to determine the type of embedded textures.\r\n     *\r\n     * If height != 0 this member is show how data is packed. Hint will consist of two parts: channel order and channel bitness (count of the bits for every color\r\n     * channel). For simple parsing by the viewer it's better to not omit absent color channel and just use 0 for bitness. For example:\r\n     * 1. Image contain RGBA and 8 bit per channel, achFormatHint == \"rgba8888\";\r\n     * 2. Image contain ARGB and 8 bit per channel, achFormatHint == \"argb8888\";\r\n     * 3. Image contain RGB and 5 bit for R and B channels and 6 bit for G channel, achFormatHint == \"rgba5650\";\r\n     * 4. One color image with B channel and 1 bit for it, achFormatHint == \"rgba0010\";\r\n     * If height == 0 then achFormatHint is set set to '\\\\0\\\\0\\\\0\\\\0' if the loader has no additional information about the texture file format used OR the file\r\n     * extension of the format without a trailing dot. If there are multiple file extensions for a format, the shortest extension is chosen (JPEG maps to 'jpg',\r\n     * not to 'jpeg').\r\n     * E.g. 'dds\\\\0', 'pcx\\\\0', 'jpg\\\\0'.  All characters are lower-case.\r\n     * The fourth character will always be '\\\\0'.        */\r\n    public var achFormatHint:String;// = \"\"// 8 for string + 1 for terminator.\r\n\r\n    /** Data of the texture.\r\n     *\r\n     * Points to an array of width * height aiTexel's.\r\n     * The format of the texture data is always ARGB8888 to\r\n     * make the implementation for user of the library as easy\r\n     * as possible. If height = 0 this is a pointer to a memory\r\n     * buffer of size width containing the compressed texture\r\n     * data. Good luck, have fun!\r\n     */\r\n    public var pcData:Null<Bytes>;\r\n\r\n    public function new() {\r\n\r\n    }\r\n}\r\n// ---------------------------------------------------------------------------\r\n/** @brief Defines how the Nth texture of a specific Type is combined with the result of all previous layers.\r\n     *\r\n     *  Example (left: key, right: value): <br>\r\n     *  @code\r\n     *  DiffColor0     - gray\r\n     *  DiffTextureOp0 - aiTextureOpMultiply\r\n     *  DiffTexture0   - tex1.png\r\n     *  DiffTextureOp0 - aiTextureOpAdd\r\n     *  DiffTexture1   - tex2.png\r\n     *  @endcode\r\n     *  Written as equation, the final diffuse term for a specific pixel would be:\r\n     *  @code\r\n     *  diffFinal = DiffColor0 * sampleTex(DiffTexture0,UV0) + sampleTex(DiffTexture1,UV0) * diffContrib;\r\n     *  @endcode\r\n     *  where 'diffContrib' is the intensity of the incoming light for that pixel.\r\n     */\r\n@:enum abstract Op(Int) from Int to Int {\r\n\r\n    /** T = T1 * T2 */\r\n    var multiply = (0x0);\r\n\r\n    /** T ( T1 + T2 */\r\n    var add = (0x1);\r\n\r\n    /** T ( T1 - T2 */\r\n    var subtract = (0x2);\r\n\r\n    /** T ( T1 / T2 */\r\n    var divide = (0x3);\r\n\r\n    /** T ( (T1 + T2) - (T1 * T2) */\r\n    var smoothAdd = (0x4);\r\n\r\n    /** T ( T1 + (T2-0.5) */\r\n    var signedAdd = (0x5);\r\n\r\n\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief Defines how UV coordinates outside the [0...1] range are handled.\r\n     *\r\n     *  Commonly referred to as 'wrapping mode'.\r\n     */\r\n@:enum abstract MapMode(Int) from Int to Int {\r\n\r\n    /** A texture coordinate u|v is translated to u%1|v%1     */\r\n    var wrap = (0x0);\r\n\r\n    /** Texture coordinates outside [0...1]\r\n         *  are clamped to the nearest valid value.     */\r\n    var clamp = (0x1);\r\n\r\n    /** If the texture coordinates for a pixel are outside [0...1]\r\n         *  the texture is not applied to that pixel     */\r\n    var decal = (0x3);\r\n\r\n    /** A texture coordinate u|v becomes u%1|v%1 if (u-(u%1))%2 is zero and\r\n         *  1-(u%1)|1-(v%1) otherwise     */\r\n    var mirror = (0x2);\r\n\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief Defines how the mapping coords for a texture are generated.\r\n     *\r\n     *  Real-time applications typically require full UV coordinates, so the use of the aiProcess_GenUVCoords step is highly\r\n     *  recommended. It generates proper UV channels for non-UV mapped objects, as long as an accurate description how the\r\n     *  mapping should look like (e.g spherical) is given.\r\n     *  See the #AI_MATKEY_MAPPING property for more details.\r\n     */\r\n@:enum abstract Mapping(Int) from Int to Int {\r\n\r\n    /** The mapping coordinates are taken from an UV channel.\r\n         *\r\n         *  The #AI_MATKEY_UVWSRC key specifies from which UV channel the texture coordinates are to be taken from\r\n         *  (remember, meshes can have more than one UV channel).\r\n         */\r\n    var uv = (0x0);\r\n\r\n    /** Spherical mapping */\r\n    var sphere = (0x1);\r\n\r\n    /** Cylindrical mapping */\r\n    var cylinder = (0x2);\r\n\r\n    /** Cubic mapping */\r\n    var box = (0x3);\r\n\r\n    /** Planar mapping */\r\n    var plane = (0x4);\r\n\r\n    /** Undefined mapping. Have fun. */\r\n    var other = (0x5);\r\n\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief Defines the purpose of a texture\r\n     *\r\n     *  This is a very difficult topic. Different 3D packages support different kinds of textures. For very common texture\r\n     *  types, such as bumpmaps, the rendering results depend on implementation details in the rendering pipelines of these\r\n     *  applications. Assimp loads all texture references from the model file and tries to determine which of the predefined\r\n     *  texture types below is the best choice to match the original use of the texture as closely as possible.<br>\r\n     *\r\n     *  In content pipelines you'll usually define how textures have to be handled, and the artists working on models have\r\n     *  to conform to this specification, regardless which 3D tool they're using. */\r\n@:enum abstract AiTextureType(Int) from Int to Int {\r\n\r\n    /** Dummy value.\r\n         *\r\n         *  No texture, but the value to be used as 'texture semantic' (#aiMaterialProperty::mSemantic) for all material\r\n         *  properties *not* related to textures.     */\r\n    var none = (0x0);\r\n\r\n\r\n    /** The texture is combined with the result of the diffuse lighting equation.     */\r\n    var diffuse = (0x1);\r\n\r\n    /** The texture is combined with the result of the specular lighting equation.     */\r\n    var specular = (0x2);\r\n\r\n    /** The texture is combined with the result of the ambient lighting equation.     */\r\n    var ambient = (0x3);\r\n\r\n    /** The texture is added to the result of the lighting calculation. It isn't influenced by incoming light.     */\r\n    var emissive = (0x4);\r\n\r\n    /** The texture is a height map.\r\n         *\r\n         *  By convention, higher gray-scale values stand for higher elevations from the base height.     */\r\n    var height = (0x5);\r\n\r\n    /** The texture is a (tangent space) normal-map.\r\n         *\r\n         *  Again, there are several conventions for tangent-space normal maps. Assimp does (intentionally) not distinguish\r\n         *  here.     */\r\n    var normals = (0x6);\r\n\r\n    /** The texture defines the glossiness of the material.\r\n         *\r\n         *  The glossiness is in fact the exponent of the specular (phong) lighting equation. Usually there is a conversion\r\n         *  function defined to map the linear color values in the texture to a suitable exponent. Have fun.     */\r\n    var shininess = (0x7);\r\n\r\n    /** The texture defines per-pixel opacity.\r\n         *\r\n         *  Usually 'white' means opaque and 'black' means 'transparency'. Or quite the opposite. Have fun.     */\r\n    var opacity = (0x8);\r\n\r\n    /** Displacement texture\r\n         *\r\n         *  The exact purpose and format is application-dependent.\r\n         *  Higher color values stand for higher vertex displacements.     */\r\n    var displacement = (0x9);\r\n\r\n    /** Lightmap texture (aka Ambient Occlusion)\r\n         *\r\n         *  Both 'Lightmaps' and dedicated 'ambient occlusion maps' are covered by this material property. The texture\r\n         *  contains a scaling value for the final color value of a pixel. Its intensity is not affected by incoming light.     */\r\n    var lightmap = (0xA);\r\n\r\n    /** Reflection texture\r\n         *\r\n         * Contains the color of a perfect mirror reflection.\r\n         * Rarely used, almost never for real-time applications.     */\r\n    var reflection = (0xB);\r\n\r\n    /** Unknown texture\r\n         *\r\n         *  A texture reference that does not match any of the definitions above is considered to be 'unknown'. It is still\r\n         *  imported, but is excluded from any further postprocessing.     */\r\n    var unknown = (0xC);\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief Defines some mixed flags for a particular texture.\r\n     *\r\n     *  Usually you'll instruct your cg artists how textures have to look like ... and how they will be processed in your\r\n     *  application. However, if you use Assimp for completely generic loading purposes you might also need to process these\r\n     *  flags in order to display as many 'unknown' 3D models as possible correctly.\r\n     *\r\n     *  This corresponds to the #AI_MATKEY_TEXFLAGS property. */\r\n@:enum abstract Flags(Int) from Int to Int {\r\n\r\n\r\n    /** The texture's color values have to be inverted (componentwise 1-n)     */\r\n    var invert = (0x1);\r\n\r\n    /** Explicit request to the application to process the alpha channel of the texture.\r\n         *\r\n         *  Mutually exclusive with #aiTextureFlags_IgnoreAlpha. These flags are set if the library can say for sure that\r\n         *  the alpha channel is used/is not used. If the model format does not define this, it is left to the application\r\n         *  to decide whether the texture alpha channel - if any - is evaluated or not.     */\r\n    var useAlpha = (0x2);\r\n\r\n    /** Explicit request to the application to ignore the alpha channel of the texture.\r\n         *\r\n         *  Mutually exclusive with #aiTextureFlags_UseAlpha.     */\r\n    var ignoreAlpha = (0x4);\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief Defines all shading models supported by the library\r\n *\r\n *  The list of shading modes has been taken from Blender.\r\n *  See Blender documentation for more information. The API does not distinguish between \"specular\" and \"diffuse\"\r\n *  shaders (thus the specular term for diffuse shading models like Oren-Nayar remains undefined). <br>\r\n *  Again, this value is just a hint. Assimp tries to select the shader whose most common implementation matches the\r\n *  original rendering results of the 3D modeller which wrote a particular model as closely as possible.     */\r\n@:enum abstract AiShadingMode(Int) from Int to Int {\r\n\r\n    /** Flat shading. Shading is done on per-face base, diffuse only. Also known as 'faceted shading'.     */\r\n    var flat = (0x1);\r\n\r\n    /** Simple Gouraud shading.     */\r\n    var gouraud = (0x2);\r\n\r\n    /** Phong-Shading -     */\r\n    var phong = (0x3);\r\n\r\n    /** Phong-Blinn-Shading     */\r\n    var blinn = (0x4);\r\n\r\n    /** Toon-Shading per pixel\r\n     *\r\n     *  Also known as 'comic' shader.     */\r\n    var toon = (0x5);\r\n\r\n    /** OrenNayar-Shading per pixel\r\n     *\r\n     *  Extension to standard Lambertian shading, taking the roughness of the material into account     */\r\n    var orenNayar = (0x6);\r\n\r\n    /** Minnaert-Shading per pixel\r\n     *\r\n     *  Extension to standard Lambertian shading, taking the \"darkness\" of the material into account     */\r\n    var minnaert = (0x7);\r\n\r\n    /** CookTorrance-Shading per pixel\r\n     *\r\n     *  Special shader for metallic surfaces.     */\r\n    var cookTorrance = (0x8);\r\n\r\n    /** No shading at all. Constant light influence of 1.0.     */\r\n    var noShading = (0x9);\r\n\r\n    /** Fresnel shading     */\r\n    var fresnel = (0xa);\r\n\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief Defines alpha-blend flags.\r\n *\r\n *  If you're familiar with OpenGL or D3D, these flags aren't new to you.\r\n *  They define *how* the final color value of a pixel is computed, basing on the previous color at that pixel and the\r\n *  new color value from the material.\r\n *  The blend formula is:\r\n *  @code\r\n *    SourceColor * SourceBlend + DestColor * DestBlend\r\n *  @endcode\r\n *  where DestColor is the previous color in the framebuffer at this position and SourceColor is the material color\r\n *  before the transparency calculation.<br>\r\n *  This corresponds to the #AI_MATKEY_BLEND_FUNC property. */\r\n\r\n@:enum abstract AiBlendMode(Int) {\r\n\r\n\r\n    /**\r\n     *  Formula:\r\n     *  @code\r\n     *  SourceColor*SourceAlpha + DestColor*(1-SourceAlpha)\r\n     *  @endcode     */\r\n    var alpha = 0;\r\n\r\n    /** Additive blending\r\n     *\r\n     *  Formula:\r\n     *  @code\r\n     *  SourceColor*1 + DestColor*1\r\n     *  @endcode     */\r\n    var additive = 1;\r\n\r\n\r\n    // we don't need more for the moment, but we might need them in future versions ...\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief Defines how an UV channel is transformed.\r\n *\r\n *  This is just a helper structure for the #AI_MATKEY_UVTRANSFORM key.\r\n *  See its documentation for more details.\r\n *\r\n *  Typically you'll want to build a matrix of this information. However, we keep separate scaling/translation/rotation\r\n *  values to make it easier to process and optimize UV transformations internally.\r\n */\r\nclass AiUVTransform {\r\n\r\n/** Translation on the u and v axes.\r\n         *\r\n         *  The default value is (0|0).         */\r\n    public var translation:AiVector2D;// = AiVector2D(),\r\n\r\n    /** Scaling on the u and v axes.\r\n         *\r\n         *  The default value is (1|1).         */\r\n    public var scaling:AiVector2D;// = AiVector2D(),\r\n\r\n    /** Rotation - in counter-clockwise direction.\r\n         *\r\n         *  The rotation angle is specified in radians. The rotation center is 0.5f|0.5f. The default value 0.f.         */\r\n    public var rotation:Float;// = 0f\r\n    public function new() {\r\n        this.translation = new AiVector2D();\r\n        this.scaling = new AiVector2D();\r\n        this.rotation = 0;\r\n    }\r\n}\r\nclass AiString {\r\n    public var data:String;\r\n\r\n    public function new(d):Void {\r\n        data = d;\r\n    }\r\n}\r\n\r\nclass Color {\r\n\r\n    public var diffuse:Null<AiColor3D>;\r\n\r\n    public var ambient:Null<AiColor3D>;\r\n    public var specular:Null<AiColor3D>;\r\n\r\n    public var emissive:Null<AiColor3D>;\r\n\r\n    public var transparent:Null<AiColor3D>;\r\n\r\n    public var reflective:Null<AiColor3D>;\r\n    // TODO unsure\r\n    public function new() {\r\n\r\n    }\r\n}\r\n\r\nclass AiMaterialTexture {\r\n\r\n    public var type:Null<AiTextureType>;\r\n    public var textureIndex:Int;\r\n    public var file:Null<String>; // HINT this is used as the index to reference textures in AiScene.textures\r\n\r\n    public var blend:Null<Float>;\r\n\r\n    public var op:Null<Op>;\r\n\r\n    public var mapping:Null<Mapping>;\r\n\r\n    public var uvwsrc:Null<Int>;\r\n\r\n    public var mapModeU:Null<MapMode>;\r\n\r\n    public var mapModeV:Null<MapMode>;\r\n\r\n    public var mapAxis:Null<AiVector3D>;\r\n\r\n    public var flags:Null<Int>;\r\n\r\n    public var uvTrafo:Null<AiUVTransform>;\r\n\r\n    public function new():Void {\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nclass AiMaterial {\r\n\r\n/**\r\n * Created by elect on 17/11/2016.\r\n */\r\n\r\n\r\n    public var name:Null<String>;\r\n\r\n    public var twoSided:Null<Bool>;\r\n\r\n    public var shadingModel:Null<AiShadingMode>;\r\n\r\n    public var wireframe:Null<Bool>;\r\n\r\n    public var blendFunc:Null<AiBlendMode>;\r\n\r\n    public var opacity:Null<Float>;\r\n\r\n    public var bumpScaling:Null<Float>;// TODO unsure\r\n\r\n    public var shininess:Null<Float>;\r\n\r\n    public var reflectivity:Null<Float>; // TODO unsure\r\n\r\n    public var shininessStrength:Null<Float>;\r\n\r\n    public var refracti:Null<Float>;\r\n\r\n    public var color:Null<Color>;\r\n\r\n    public var displacementScaling:Null<Float>;\r\n\r\n    public var textures:Array< AiMaterialTexture>;\r\n    public var numAllocated:Int;\r\n    public var numProperties:Int;\r\n    public var properties:Array<AiMaterialProperty>;\r\n\r\n    public function new() {\r\n        properties = [];\r\n        textures = [];\r\n        numAllocated = 0;\r\n        numProperties = 0;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper method to construct a fully qualified name from the input parameters. All the input parameters are combined into the fully qualified name: {baseName},{texType},{texIndex}. E.g.\r\n    /// \"$clr.diffuse,0,0\" or \"$tex.file,1,0\". This is the name that is used as the material dictionary key.\r\n    /// </summary>\r\n    /// <param name=\"baseName\">Key basename, this must not be null or empty</param>\r\n    /// <param name=\"texType\">Texture type; non-texture properties should leave this <see cref=\"TextureType.None\"/></param>\r\n    /// <param name=\"texIndex\">Texture index; non-texture properties should leave this zero.</param>\r\n    /// <returns>The fully qualified name</returns>\r\n    public static function createFullyQualifiedName(baseName:String, texType:Int, texIndex:Int) {\r\n        if (null == (baseName))\r\n            return null;\r\n\r\n        return baseName + \",\" + texType + \",\" + texIndex ;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets the non-texture properties contained in this Material. The name should be\r\n    /// the \"base name\", as in it should not contain texture type/texture index information. E.g. \"$clr.diffuse\" rather than \"$clr.diffuse,0,0\". The extra\r\n    /// data will be filled in automatically.\r\n    /// </summary>\r\n    /// <param name=\"baseName\">Key basename</param>\r\n    /// <returns>The material property, if it exists</returns>\r\n    public function getNonTextureProperty(baseName) {\r\n        if (null == (baseName)) {\r\n            return null;\r\n        }\r\n        var fullyQualifiedName = createFullyQualifiedName(baseName, AiTextureType.none, 0);\r\n        return getProperty(fullyQualifiedName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets the material property. All the input parameters are combined into the fully qualified name: {baseName},{texType},{texIndex}. E.g.\r\n    /// \"$clr.diffuse,0,0\" or \"$tex.file,1,0\".\r\n    /// </summary>\r\n    /// <param name=\"baseName\">Key basename</param>\r\n    /// <param name=\"texType\">Texture type; non-texture properties should leave this <see cref=\"TextureType.None\"/></param>\r\n    /// <param name=\"texIndex\">Texture index; non-texture properties should leave this zero.</param>\r\n    /// <returns>The material property, if it exists</returns>\r\n    public function getMaterialProperty(baseName, texType, texIndex) {\r\n        if (null == (baseName)) {\r\n            return null;\r\n        }\r\n        var fullyQualifiedName = createFullyQualifiedName(baseName, texType, texIndex);\r\n        return getProperty(fullyQualifiedName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets the material property by its fully qualified name. The format is: {baseName},{texType},{texIndex}. E.g.\r\n    /// \"$clr.diffuse,0,0\" or \"$tex.file,1,0\".\r\n    /// </summary>\r\n    /// <param name=\"fullyQualifiedName\">Fully qualified name of the property</param>\r\n    /// <returns>The material property, if it exists</returns>\r\n    public function getProperty(fullyQualifiedName):AiMaterialProperty {\r\n        if (null == (fullyQualifiedName)) {\r\n            return null;\r\n        }\r\n        return Lambda.find(properties, function(p:AiMaterialProperty)return p.fullyQualifiedName == fullyQualifiedName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Checks if the material has the specified non-texture property. The name should be\r\n    /// the \"base name\", as in it should not contain texture type/texture index information. E.g. \"$clr.diffuse\" rather than \"$clr.diffuse,0,0\". The extra\r\n    /// data will be filled in automatically.\r\n    /// </summary>\r\n    /// <param name=\"baseName\">Key basename</param>\r\n    /// <returns>True if the property exists, false otherwise.</returns>\r\n    public function hasNonTextureProperty(baseName) {\r\n        if (null == (baseName)) {\r\n            return false;\r\n        }\r\n        var fullyQualifiedName = createFullyQualifiedName(baseName, AiTextureType.none, 0);\r\n        return hasProperty(fullyQualifiedName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Checks if the material has the specified property. All the input parameters are combined into the fully qualified name: {baseName},{texType},{texIndex}. E.g.\r\n    /// \"$clr.diffuse,0,0\" or \"$tex.file,1,0\".\r\n    /// </summary>\r\n    /// <param name=\"baseName\">Key basename</param>\r\n    /// <param name=\"texType\">Texture type; non-texture properties should leave this <see cref=\"TextureType.None\"/></param>\r\n    /// <param name=\"texIndex\">Texture index; non-texture properties should leave this zero.</param>\r\n    /// <returns>True if the property exists, false otherwise.</returns>\r\n    public function hasMaterialProperty(baseName, texType, texIndex) {\r\n        if (null == (baseName)) {\r\n            return false;\r\n        }\r\n\r\n        var fullyQualifiedName = createFullyQualifiedName(baseName, texType, texIndex);\r\n        return hasProperty(fullyQualifiedName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Checks if the material has the specified property by looking up its fully qualified name. The format is: {baseName},{texType},{texIndex}. E.g.\r\n    /// \"$clr.diffuse,0,0\" or \"$tex.file,1,0\".\r\n    /// </summary>\r\n    /// <param name=\"fullyQualifiedName\">Fully qualified name of the property</param>\r\n    /// <returns>True if the property exists, false otherwise.</returns>\r\n    public function hasProperty(fullyQualifiedName):Bool {\r\n        if (null == (fullyQualifiedName)) {\r\n            return false;\r\n        }\r\n        return Lambda.exists(properties, function(p:AiMaterialProperty) {\r\n            return p.fullyQualifiedName == fullyQualifiedName;\r\n        });\r\n    }\r\n\r\n    /// <summary>\r\n    /// Adds a property to this material.\r\n    /// </summary>\r\n    /// <param name=\"matProp\">Material property</param>\r\n    /// <returns>True if the property was successfully added, false otherwise (e.g. null or key already present).</returns>\r\n    public function addProperty(matProp:AiMaterialProperty) {\r\n        if (matProp == null)\r\n            return false;\r\n\r\n        if (hasProperty(matProp.fullyQualifiedName))\r\n            return false;\r\n\r\n        properties.push(matProp);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Removes a non-texture property from the material.\r\n    /// </summary>\r\n    /// <param name=\"baseName\">Property name</param>\r\n    /// <returns>True if the property was removed, false otherwise</returns>\r\n    public function removeNonTextureProperty(baseName) {\r\n        if (null == (baseName))\r\n            return false;\r\n\r\n        return removeProperty(createFullyQualifiedName(baseName, AiTextureType.none, 0));\r\n    }\r\n\r\n    /// <summary>\r\n    /// Removes a property from the material.\r\n    /// </summary>\r\n    /// <param name=\"baseName\">Name of the property</param>\r\n    /// <param name=\"texType\">Property texture type</param>\r\n    /// <param name=\"texIndex\">Property texture index</param>\r\n    /// <returns>True if the property was removed, false otherwise</returns>\r\n    public function removeMaterialProperty(baseName, texType, texIndex) {\r\n        if (null == (baseName))\r\n            return false;\r\n\r\n        return removeProperty(createFullyQualifiedName(baseName, texType, texIndex));\r\n    }\r\n\r\n    /// <summary>\r\n    /// Removes a property from the material.\r\n    /// </summary>\r\n    /// <param name=\"fullyQualifiedName\">Fully qualified name of the property ({basename},{texType},{texIndex})</param>\r\n    /// <returns>True if the property was removed, false otherwise</returns>\r\n    public function removeProperty(fullyQualifiedName) {\r\n        if (null == (fullyQualifiedName))\r\n            return false;\r\n\r\n        properties = properties.filter(function(p:AiMaterialProperty) return p.fullyQualifiedName != fullyQualifiedName);\r\n        return true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Removes all properties from the material;\r\n    /// </summary>\r\n    public function clear() {\r\n        properties = [];\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets -all- properties contained in the Material.\r\n    /// </summary>\r\n    /// <returns>All properties in the material property map.</returns>\r\n    public function getAllProperties() {\r\n\r\n\r\n        return properties.copy();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets all the number of textures that are of the specified texture type.\r\n    /// </summary>\r\n    /// <param name=\"texType\">Texture type</param>\r\n    /// <returns>Texture count</returns>\r\n    public function getMaterialTextureCount(texType) {\r\n        var count = 0;\r\n        for (matProp in properties) {\r\n\r\n\r\n            if (matProp.mKey == AiMatKeys.TEXTURE_BASE && matProp.mSemantic == texType) {\r\n                count = Math.floor(Math.max(count, matProp.mIndex + 1));\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets a texture that corresponds to the type/index.\r\n    /// </summary>\r\n    /// <param name=\"texType\">Texture type</param>\r\n    /// <param name=\"texIndex\">Texture index</param>\r\n    /// <param name=\"texture\">Texture description</param>\r\n    /// <returns>True if the texture was found in the material</returns>\r\n    public function getMaterialTexture(texType, texIndex, texture:AiMaterialTexture) {\r\n\r\n        var texName = createFullyQualifiedName(AiMatKeys.TEXTURE_BASE, texType, texIndex);\r\n\r\n        var texNameProp = getProperty(texName);\r\n\r\n        //This one is necessary, the rest are optional\r\n        if (texNameProp == null)\r\n            return false;\r\n\r\n        var mappingName = createFullyQualifiedName(AiMatKeys.MAPPING_BASE, texType, texIndex);\r\n        var uvIndexName = createFullyQualifiedName(AiMatKeys.UVWSRC_BASE, texType, texIndex);\r\n        var blendFactorName = createFullyQualifiedName(AiMatKeys.TEXBLEND_BASE, texType, texIndex);\r\n        var texOpName = createFullyQualifiedName(AiMatKeys.TEXOP_BASE, texType, texIndex);\r\n        var uMapModeName = createFullyQualifiedName(AiMatKeys.MAPPINGMODE_U_BASE, texType, texIndex);\r\n        var vMapModeName = createFullyQualifiedName(AiMatKeys.MAPPINGMODE_V_BASE, texType, texIndex);\r\n        var texFlagsName = createFullyQualifiedName(AiMatKeys.TEXFLAGS_BASE, texType, texIndex);\r\n\r\n        var mappingNameProp = getProperty(mappingName);\r\n        var uvIndexNameProp = getProperty(uvIndexName);\r\n        var blendFactorNameProp = getProperty(blendFactorName);\r\n        var texOpNameProp = getProperty(texOpName);\r\n        var uMapModeNameProp = getProperty(uMapModeName);\r\n        var vMapModeNameProp = getProperty(vMapModeName);\r\n        var texFlagsNameProp = getProperty(texFlagsName);\r\n\r\n        texture.file = texNameProp.getStringValue();\r\n        texture.type = texType;\r\n        texture.textureIndex = texIndex;\r\n        texture.mapping = (mappingNameProp != null) ? mappingNameProp.getIntegerValue() : Mapping.uv;\r\n        texture.uvwsrc = (uvIndexNameProp != null) ? uvIndexNameProp.getIntegerValue() : 0;\r\n        texture.blend = (blendFactorNameProp != null) ? blendFactorNameProp.getFloatValue() : 0.0 ;\r\n        texture.op = (texOpNameProp != null) ? texOpNameProp.getIntegerValue() : 0;\r\n        texture.mapModeU = (uMapModeNameProp != null) ? uMapModeNameProp.getIntegerValue() : MapMode.wrap;\r\n        texture.mapModeV = (vMapModeNameProp != null) ? vMapModeNameProp.getIntegerValue() : MapMode.wrap;\r\n        texture.flags = (texFlagsNameProp != null) ? texFlagsNameProp.getIntegerValue() : 0;\r\n\r\n        return true;\r\n    }\r\n\r\n}","package assimp.format;\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief A single face in a mesh, referring to multiple vertices.\r\n *\r\n * If mNumIndices is 3, we call the face 'triangle', for mNumIndices > 3\r\n * it's called 'polygon' (hey, that's just a definition!).\r\n * <br>\r\n * aiMesh::primitiveTypes can be queried to quickly examine which types of primitive are actually present in a mesh.\r\n * The #aiProcess_SortByPType flag executes a special post-processing algorithm which splits meshes with *different*\r\n * primitive types mixed up (e.g. lines and triangles) in several 'clean' submeshes. Furthermore there is a\r\n * configuration option ( #AI_CONFIG_PP_SBP_REMOVE) to force #aiProcess_SortByPType to remove specific kinds of\r\n * primitives from the imported scene, completely and forever.\r\n * In many cases you'll probably want to set this setting to\r\n * @code\r\n * aiPrimitiveType_LINE|aiPrimitiveType_POINT\r\n * @endcode\r\n * Together with the #aiProcess_Triangulate flag you can then be sure that #aiFace::mNumIndices is always 3.\r\n * @note Take a look at the @link data Data Structures page @endlink for more information on the layout and winding\r\n * order of a face.  */\r\n//data class AiFace(\r\n//        //! Number of indices defining this face.\r\n//        //! The maximum value for this member is #AI_MAX_FACE_INDICES.\r\n//        var mNumIndices: Int = 0,\r\n//\r\n//        //! Pointer to the indices array. Size of the array is given in numIndices.\r\n//        var mIndices: MutableList<Int> = mutableListOf())\r\nimport assimp.format.Defs.AiVector3D;\r\nimport Lambda;\r\nimport Lambda;\r\nimport assimp.format.Defs.AiColor4D;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.format.Defs.AiMatrix4x4;\r\nclass AiFace {\r\n    public var numIndices:Int;\r\n    public var indices:Array<Int>;\r\n\r\n    public function new() {\r\n\r\n    }\r\n}\r\n\r\nclass Mesh {\r\n\r\n/**\r\n * Created by elect on 13/11/2016.\r\n */\r\n\r\n// TODO check long/int consts\r\n/** @def AI_MAX_FACE_INDICES\r\n *  Maximum number of indices per face (polygon). */\r\n    public static var AI_MAX_FACE_INDICES = 0x7fff;\r\n\r\n/** @def AI_MAX_BONE_WEIGHTS\r\n *  Maximum number of indices per face (polygon). */\r\n    public static var AI_MAX_BONE_WEIGHTS = 0x7fffffff;\r\n\r\n/** @def AI_MAX_VERTICES\r\n *  Maximum number of vertices per mesh.  */\r\n    public static var AI_MAX_VERTICES = 0x7fffffff;\r\n\r\n/** @def AI_MAX_FACES\r\n *  Maximum number of faces per mesh. */\r\n    public static var AI_MAX_FACES = 0x7fffffff;\r\n\r\n/** @def AI_MAX_NUMBER_OF_COLOR_SETS\r\n *  Supported number of vertex color sets per mesh. */\r\n\r\n    public static var AI_MAX_NUMBER_OF_COLOR_SETS = 0x8;\r\n\r\n/** @def AI_MAX_NUMBER_OF_TEXTURECOORDS\r\n *  Supported number of texture coord sets (UV(W) channels) per mesh */\r\n    public static var AI_MAX_NUMBER_OF_TEXTURECOORDS = 0x8;\r\n\r\n    public static function AI_PRIMITIVE_TYPE_FOR_N_INDICES(n:Int) {\r\n        return if (n > 3) AiPrimitiveType.POLYGON else (1 << (n - 1));\r\n    }\r\n\r\n    public function new() {\r\n    }\r\n}\r\n\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief A single influence of a bone on a vertex.\r\n */\r\nclass AiVertexWeight {\r\n//! Index of the vertex which is influenced by the bone.\r\n    public var vertexId:Int ;\r\n\r\n    //! The strength of the influence in the range (0...1).\r\n    //! The influence from all bones at one vertex amounts to 1.\r\n    public var weight:Float;\r\n\r\n    public function new() {\r\n        this.vertexId = 0;\r\n        this.weight = 0;\r\n    }\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief A single bone of a mesh.\r\n *\r\n *  A bone has a name by which it can be found in the frame hierarchy and by which it can be addressed by animations.\r\n *  In addition it has a number of influences on vertices.\r\n */\r\nclass AiBone {\r\n//! The name of the bone.\r\n    public var name:String ;//= \"\",\r\n\r\n    //! The number of vertices affected by this bone\r\n    //! The maximum value for this member is #AI_MAX_BONE_WEIGHTS.\r\n    public var numWeights:Int ;//= 0,\r\n\r\n    //! The vertices affected by this bone\r\n    public var weights:Array<AiVertexWeight> ;//= mutableListOf(),\r\n\r\n    //! Matrix that transforms from mesh space to bone space in bind pose\r\n    public var offsetMatrix:AiMatrix4x4 ;//= AiMatrix4x4()\r\n\r\n    public function new() {\r\n        this.name = \"\";\r\n        this.numWeights = 0;\r\n        this.weights = new Array<AiVertexWeight>();\r\n        this.offsetMatrix = new AiMatrix4x4();\r\n    }\r\n}\r\n\r\n/** @brief Enumerates the types of geometric primitives supported by Assimp.\r\n * 1 1\r\n *  @see aiFace Face data structure\r\n *  @see aiProcess_SortByPType Per-primitive sorting of meshes\r\n *  @see aiProcess_Triangulate Automatic triangulation\r\n *  @see AI_CONFIG_PP_SBP_REMOVE Removal of specific primitive types.\r\n */\r\n\r\n@:enum abstract AiPrimitiveType(Int) from Int to Int {\r\n    /** A point primitive.\r\n     *\r\n     * This is just a single vertex in the virtual world, #aiFace contains just one index for such a primitive.     */\r\n    var POINT = (0x1);\r\n\r\n    /** A line primitive.\r\n     *\r\n     * This is a line defined through a start and an end position.\r\n     * #aiFace contains exactly two indices for such a primitive.     */\r\n    var LINE = (0x2);\r\n\r\n    /** A triangular primitive.\r\n     *\r\n     * A triangle consists of three indices.     */\r\n    var TRIANGLE = (0x4);\r\n\r\n    /** A higher-level polygon with more than 3 edges.\r\n     *\r\n     * A triangle is a polygon, but polygon in this context means \"all polygons that are not triangles\". The\r\n     * \"Triangulate\"-Step is provided for your convenience, it splits all polygons in triangles (which are much easier\r\n     * to handle).     */\r\n    var POLYGON = (0x8);\r\n\r\n}\r\n\r\n//infix fun AiPrimitiveType.or(other: AiPrimitiveType) = i or other.i\r\n//infix fun Int.or(other: AiPrimitiveType) = or(other.i)  //|\r\n//infix fun Int.wo(other: AiPrimitiveType) = and(other.i.inv())  //&~\r\n//infix fun Int.has(other: AiPrimitiveType) = and(other.i) != 0  // &\r\n//infix fun Int.hasnt(other: AiPrimitiveType) = and(other.i) == 0\r\n\r\n\r\nclass AiAnimMesh {\r\n/** Weight of the AnimMesh. */\r\n    public var mWeight:Float ;\r\n    public var mVertices:Array<AiVector3D> ;\r\n    public var mNormals:Array<AiVector3D> ;\r\n    public var mTangents:Array<AiVector3D> ;\r\n    public var mBitangents:Array<AiVector3D> ;\r\n    public var mColors:Array<Array<AiColor4D>>;\r\n    public var mTextureCoords:Array<Array<AiVector3D>> ;\r\n    public var mNumVertices:Int;\r\n\r\n    public function new():Void {\r\n\r\n    }\r\n}\r\n\r\n/** Enumerates the methods of mesh morphing supported by Assimp.    */\r\n@:enum abstract AiMorphingMethod(Int) from Int to Int {\r\n    /** Interpolation between morph targets */\r\n    var VERTEX_BLEND = (0x1);\r\n\r\n    /** Normalized morphing between morph targets  */\r\n    var MORPH_NORMALIZED = (0x2);\r\n\r\n    /** Relative morphing between morph targets  */\r\n    var MORPH_RELATIVE = (0x3);\r\n}\r\n\r\n// ---------------------------------------------------------------------------\r\n/** @brief A mesh represents a geometry or model with a single material.\r\n *\r\n * It usually consists of a number of vertices and a series of primitives/faces referencing the vertices. In addition\r\n * there might be a series of bones, each of them addressing a number of vertices with a certain weight. Vertex data is\r\n * presented in channels with each channel containing a single per-vertex information such as a set of texture coords or\r\n * a normal vector.\r\n * If a data pointer is non-null, the corresponding data stream is present.\r\n * From C++-programs you can also use the comfort functions Has*() to test for the presence of various data streams.\r\n *\r\n * A Mesh uses only a single material which is referenced by a material ID.\r\n * @note The mPositions member is usually not optional. However, vertex positions *could* be missing if the\r\n * #AI_SCENE_FLAGS_INCOMPLETE flag is set in\r\n * @code\r\n * aiScene::flags\r\n * @endcode */\r\nclass AiMesh {\r\n\r\n/** Bitwise combination of the members of the #aiPrimitiveType enum.\r\n         * This specifies which types of primitives are present in the mesh.\r\n         * The \"SortByPrimitiveType\"-Step can be used to make sure the output meshes consist of one primitive Type each.         */\r\n    public var primitiveTypes:AiPrimitiveType ;// = 0,\r\n\r\n    /** The number of vertices in this mesh.\r\n         * This is also the size of all of the per-vertex data arrays.\r\n         * The maximum value for this member is #AI_MAX_VERTICES.         */\r\n    public var numVertices:Int ;//= 0,\r\n\r\n    /** The number of primitives (triangles, polygons, lines) in this  mesh.\r\n         * This is also the size of the faces array.\r\n         * The maximum value for this member is #AI_MAX_FACES.         */\r\n    public var numFaces:Int;// = 0,\r\n\r\n    /** Vertex positions.\r\n         * This array is always present in a mesh. The array is numVertices in size.         */\r\n    public var vertices:Array<AiVector3D> ;//= ArrayList(),\r\n\r\n    /** Vertex normals.\r\n         * The array contains normalized vectors, NULL if not present.\r\n         * The array is numVertices in size. Normals are undefined for point and line primitives. A mesh consisting of\r\n         * points and lines only may not have normal vectors. Meshes with mixed primitive types (i.e. lines and\r\n         * triangles) may have normals, but the normals for vertices that are only referenced by point or line\r\n         * primitives are undefined and set to QNaN (WARN: qNaN compares to inequal to *everything*, even to qNaN\r\n         * itself.\r\n         * Using code like this to check whether a field is qnan is:\r\n         * @code\r\n         * #define IS_QNAN(f) (f != f)\r\n         * @endcode\r\n         * still dangerous because even 1.f == 1.f could evaluate to false! ( remember the subtleties of IEEE754\r\n         * artithmetics). Use stuff like @c fpclassify instead.\r\n         * @note Normal vectors computed by Assimp are always unit-length.\r\n         * However, this needn't apply for normals that have been taken directly from the model file.         */\r\n    public var normals:Array<AiVector3D> ;//== ArrayList(),\r\n\r\n    /** Vertex tangents.\r\n         * The tangent of a vertex points in the direction of the positive X texture axis. The array contains normalized\r\n         * vectors, NULL if not present. The array is numVertices in size. A mesh consisting of points and lines only\r\n         * may not have normal vectors. Meshes with mixed primitive types (i.e. lines and triangles) may have normals,\r\n         * but the normals for vertices that are only referenced by point or line primitives are undefined and set to\r\n         * qNaN.  See the #normals member for a detailed discussion of qNaNs.\r\n         * @note If the mesh contains tangents, it automatically also contains bitangents.         */\r\n    public var tangents:Array<AiVector3D>;// = ArrayList(),\r\n\r\n    /** Vertex bitangents.\r\n         * The bitangent of a vertex points in the direction of the positive Y texture axis. The array contains\r\n         * normalized vectors, NULL if not present. The array is numVertices in size.\r\n         * @note If the mesh contains tangents, it automatically also contains bitangents.         */\r\n    public var bitangents:Array<AiVector3D> ;// = mutableListOf(),\r\n\r\n    /** Vertex color sets.\r\n         * A mesh may contain 0 to #AI_MAX_NUMBER_OF_COLOR_SETS vertex colors per vertex. NULL if not present. Each\r\n         * array is numVertices in size if present.         */\r\n    public var colors:Array<Array<AiColor4D>>;//  = mutableListOf(),\r\n\r\n    /** Vertex texture coords, also known as UV channels.\r\n         * A mesh may contain 0 to AI_MAX_NUMBER_OF_TEXTURECOORDS per vertex. NULL if not present. The array is\r\n         * numVertices in size. mNumUVComponents is not used.\r\n         * This is the order:\r\n         * [texture coordinate id][vertex][texture coordinate components]*/\r\n    public var textureCoords:Array<Array<AiVector3D>> ;//= mutableListOf(),\r\n\r\n    /** Specifies the number of components for a given UV channel.\r\n         * Up to three channels are supported (UVW, for accessing volume or cube maps). If the value is 2 for a given\r\n         * channel n, the component p.z of textureCoords[n][p] is set to 0.0f.\r\n         * If the value is 1 for a given channel, p.y is set to 0.0f, too.\r\n         * @note 4D coords are not supported         */\r\n    public var numUVComponents:Array<Int> ;//= IntArray(AI_MAX_NUMBER_OF_TEXTURECOORDS),\r\n\r\n    /** The faces the mesh is constructed from.\r\n         * Each face refers to a number of vertices by their indices.\r\n         * This array is always present in a mesh, its size is given in numFaces.\r\n         * If the #AI_SCENE_FLAGS_NON_VERBOSE_FORMAT is NOT set each face references an unique set of vertices.         */\r\n    public var faces:Array<AiFace> ;//= mutableListOf(),\r\n\r\n    /** The number of bones this mesh contains.\r\n         * Can be 0, in which case the bones array is NULL.\r\n         */\r\n    public var numBones:Int ;// = 0,\r\n\r\n    /** The bones of this mesh.\r\n         * A bone consists of a name by which it can be found in the frame hierarchy and a set of vertex weights.         */\r\n    public var bones:Array<AiBone> ;//= mutableListOf(),\r\n\r\n    /** The material used by this mesh.\r\n         * A mesh uses only a single material. If an imported model uses multiple materials, the import splits up the\r\n         * mesh. Use this value as index into the scene's material list.         */\r\n    public var materialIndex:Int ;//= 0,\r\n\r\n    /** Name of the mesh. Meshes can be named, but this is not a requirement and leaving this field empty is totally\r\n         * fine.\r\n         * There are mainly three uses for mesh names:\r\n         *   - some formats name nodes and meshes independently.\r\n         *   - importers tend to split meshes up to meet the one-material-per-mesh requirement. Assigning the same\r\n         *      (dummy) name to each of the result meshes aids the caller at recovering the original mesh partitioning.\r\n         *   - Vertex animations refer to meshes by their names.         **/\r\n    public var name:String ;//= \"\",\r\n\r\n    /** The number of attachment meshes. Note! Currently only works with Collada loader. */\r\n    public var numAnimMeshes:Int ;//= 0,\r\n\r\n    /** Attachment meshes for this mesh, for vertex-based animation.\r\n         *  Attachment meshes carry replacement data for some of the mesh'es vertex components (usually positions, normals).\r\n         *  Note! Currently only works with Collada loader.*/\r\n    public var animMeshes:Array<AiAnimMesh>;// = mutableListOf(),\r\n\r\n    /** Method of morphing when animeshes are specified. */\r\n    public var mMethod:Int ;//= 0    // TODO to enum AiMorphingMethod?\r\n\r\n    public function new():Void {\r\n        this.primitiveTypes = 0;\r\n        this.numVertices = 0;\r\n        this.numFaces = 0;\r\n\r\n        this.vertices = [];\r\n        this.normals = [];\r\n        this.tangents = [];\r\n\r\n        this.bitangents = [];\r\n        this.colors = [];\r\n        this.textureCoords = [];//:Array<Array<Array<Float>>>\r\n\r\n        this.faces = [];\r\n        this.numBones = 0;\r\n        this.bones = [];\r\n        this.materialIndex = 0;\r\n        this.name = \"\";\r\n\r\n        this.numAnimMeshes = 0;\r\n        this.animMeshes = [];\r\n        this.mMethod = 0 ; // TODO to enum AiMorphingMethod?\r\n        this.numUVComponents = [];\r\n    }\r\n    //! Check whether the mesh contains positions. Provided no special\r\n    //! scene flags are set, this will always be true\r\n    public function hasPositions() {\r\n        return numVertices > 0;\r\n    }\r\n\r\n    //! Check whether the mesh contains faces. If no special scene flags\r\n    //! are set this should always return true\r\n    public function hasFaces() {\r\n        return numFaces > 0;\r\n    }\r\n\r\n    //! Check whether the mesh contains normal vectors\r\n    public function hasNormals() {\r\n        return !Lambda.empty(normals) && numVertices > 0;\r\n    }\r\n\r\n    //! Check whether the mesh contains tangent and bitangent vectors\r\n    //! It is not possible that it contains tangents and no bitangents\r\n    //! (or the other way round). The existence of one of them\r\n    //! implies that the second is there, too.\r\n    public function hasTangentsAndBitangents() {\r\n        return !Lambda.empty(tangents) && !Lambda.empty(bitangents) && numVertices > 0;\r\n    }\r\n\r\n    //! Check whether the mesh contains a vertex color set\r\n    //! \\param index Index of the vertex color set\r\n    public function hasVertexColors(index:Int) {\r\n        return if (index >= Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {\r\n            false;\r\n        } else {\r\n            index < colors.length && numVertices > 0;\r\n        }\r\n    }\r\n    //! Check whether the mesh contains a texture coordinate set\r\n    //! \\param index Index of the texture coordinates set\r\n    public function hasTextureCoords(index:Int) {\r\n        return if (index >= Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS || index >= textureCoords.length) {\r\n            false;\r\n        } else {\r\n            !Lambda.empty(textureCoords[index]) && numVertices > 0;\r\n        }\r\n\r\n    }\r\n    //! Get the number of UV channels the mesh contains\r\n    public function getNumUVChannels():Int {\r\n        var n = 0;\r\n        while (n < Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS && n < textureCoords.length && !Lambda.empty(textureCoords[n]))\r\n            ++n;\r\n        return n;\r\n    }\r\n\r\n    //! Get the number of vertex color channels the mesh contains\r\n    public function getNumColorChannels():Int {\r\n        var n = 0;\r\n        while (n < Mesh.AI_MAX_NUMBER_OF_COLOR_SETS && n < colors.length)\r\n            ++n;\r\n        return n;\r\n    }\r\n\r\n    //! Check whether the mesh contains bones\r\n    public function hasBones() {\r\n        return !Lambda.empty(bones) && numBones > 0;\r\n    }\r\n\r\n}\r\n","package assimp.format;\r\n\r\n/** Enum used to distinguish data types */\r\nimport assimp.format.Defs.AiVector3D;\r\nimport Lambda;\r\nimport haxe.ds.StringMap;\r\n@:enum abstract AiMetadataType(Int) from Int to Int {\r\n    var BOOL = 0;\r\n    var INT32 = 1;\r\n    var UINT64 = 2;\r\n    var FLOAT = 3;\r\n    var DOUBLE = 4;\r\n    var AISTRING = 5;\r\n    var AIVECTOR3D = 6;\r\n}\r\n\r\n/**\r\n * Metadata entry\r\n *\r\n * The type field uniquely identifies the underlying type of the data field\r\n */\r\nclass AiMetadataEntry<T> {\r\n    public var type:AiMetadataType;\r\n    public var data:T;\r\n\r\n    public function new(t:AiMetadataType, value:T):Void {\r\n        this.data = value;\r\n        this.type = t;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Container for holding metadata.\r\n *\r\n * Metadata is a key-value store using string keys and values.\r\n */\r\nclass AiMetadata {\r\n    /** Arrays of keys, may not be NULL. Entries in this array may not be NULL as well.\r\n         *  Arrays of values, may not be NULL. Entries in this array may be NULL if the corresponding property key has no\r\n         *  assigned value. => JVM map  */\r\n    public var map:StringMap<AiMetadataEntry< Any>> ;\r\n\r\n    public function new():Void {\r\n        this.map = new StringMap<AiMetadataEntry< Any>>();\r\n    }\r\n    /** Length of the mKeys and mValues arrays, respectively */\r\n    public function numProperties() {\r\n        return Lambda.count(map);\r\n    }\r\n\r\n    public function keys() {\r\n        return map.keys();\r\n    }\r\n\r\n    public function set(key:String, value:AiMetadataEntry<Any>) {\r\n        // Ensure that we have a valid key.\r\n        return if (key == null) {\r\n            false;\r\n        }\r\n        else {\r\n            // Set metadata key\r\n            map.set(key, value);\r\n            true;\r\n        };\r\n    }\r\n\r\n    public function clear() {\r\n        this.map = new StringMap<AiMetadataEntry< Any>>();\r\n    }\r\n\r\n    public function isEmpty() {\r\n        return Lambda.empty(map);\r\n    }\r\n\r\n    public function isNotEmpty() {\r\n        return !Lambda.empty(map);\r\n    }\r\n\r\n    public function get(key:String):AiMetadataEntry< Any> {\r\n        return map.exists(key) ? map.get(key) : null;\r\n    }\r\n}\r\n\r\n","package assimp.format;\r\n\r\n/**\r\n * Created by elect on 13/11/2016.\r\n */\r\n\r\n// -------------------------------------------------------------------------------\r\n/**\r\n * A node in the imported hierarchy.\r\n *\r\n * Each node has name, a parent node (except for the root node), a transformation relative to its parent and possibly\r\n * several child nodes.\r\n * Simple file formats don't support hierarchical structures - for these formats the imported scene does consist of only\r\n * a single root node without children. */\r\n// -------------------------------------------------------------------------------\r\n\r\nimport glm.Mat4;\r\nimport assimp.format.Material.AiTexture;\r\nimport assimp.format.Defs.AiMatrix4x4;\r\nimport assimp.format.MetaData.AiMetadata;\r\nimport assimp.format.Mesh.AiMesh;\r\nimport assimp.format.Camera.AiCamera;\r\nimport assimp.format.Light.AiLight;\r\nimport haxe.ds.StringMap;\r\nimport assimp.format.Anim.AiAnimation;\r\nimport assimp.format.Material.AiMaterial;\r\nimport assimp.format.Mesh.AiMesh;\r\nimport assimp.format.MetaData.AiMetadata;\r\nimport assimp.format.Defs.AiMatrix4x4;\r\nclass Scene {\r\n\r\n// -------------------------------------------------------------------------------\r\n/**\r\n * Specifies that the scene data structure that was imported is not complete.\r\n * This flag bypasses some internal validations and allows the import of animation skeletons, material libraries or\r\n * camera animation paths using Assimp. Most applications won't support such data. */\r\n    public static var AI_SCENE_FLAGS_INCOMPLETE = 0x1;\r\n\r\n/**\r\n * This flag is set by the validation postprocess-step (aiPostProcess_ValidateDS) if the validation is successful. In a\r\n * validated scene you can be sure that any cross references in the data structure (e.g. vertex indices) are valid. */\r\n    public static var AI_SCENE_FLAGS_VALIDATED = 0x2;\r\n\r\n/**\r\n * This flag is set by the validation postprocess-step (aiPostProcess_ValidateDS) if the validation is successful but\r\n * some issues have been found.\r\n * This can for example mean that a texture that does not exist is referenced by a material or that the bone weights for\r\n * a vertex don't sum to 1.0 ... .\r\n * In most cases you should still be able to use the import. This flag could be useful for applications which don't\r\n * capture Assimp's log output. */\r\n    public static var AI_SCENE_FLAGS_VALIDATION_WARNING = 0x4;\r\n\r\n/**\r\n * This flag is currently only set by the aiProcess_JoinIdenticalVertices step.\r\n * It indicates that the vertices of the output meshes aren't in the internal verbose format anymore. In the verbose\r\n * format all vertices are unique, no vertex is ever referenced by more than one face. */\r\n    public static var AI_SCENE_FLAGS_NON_VERBOSE_FORMAT = 0x8;\r\n\r\n/**\r\n * Denotes pure height-map terrain data. Pure terrains usually consist of quads, sometimes triangles, in a regular grid.\r\n * The x,y coordinates of all vertex positions refer to the x,y coordinates on the terrain height map, the z-axis stores\r\n * the elevation at a specific point.\r\n *\r\n * TER (Terragen) and HMP (3D Game Studio) are height map formats.\r\n * @note Assimp is probably not the best choice for loading *huge* terrains - fully triangulated data takes extremely\r\n * much free store and should be avoided as long as possible (typically you'll do the triangulation when you actually\r\n * need to render it). */\r\n    public static var AI_SCENE_FLAGS_TERRAIN = 0x10;\r\n\r\n/**\r\n * Specifies that the scene data can be shared between structures. For example: one vertex in few faces.\r\n * \\ref AI_SCENE_FLAGS_NON_VERBOSE_FORMAT can not be used for this because \\ref AI_SCENE_FLAGS_NON_VERBOSE_FORMAT has\r\n * internal meaning about postprocessing steps. */\r\n    public static var AI_SCENE_FLAGS_ALLOW_SHARED = 0x20;\r\n}\r\nclass AiNode {\r\n\r\n    /** The name of the node.\r\n         *\r\n         * The name might be empty (length of zero) but all nodes which need to be referenced by either bones or\r\n         * animations are named.\r\n         * Multiple nodes may have the same name, except for nodes which are referenced by bones (see #aiBone and\r\n         * #aiMesh::bones). Their names *must* be unique.\r\n         *\r\n         * Cameras and lights reference a specific node by name - if there are multiple nodes with this name, they are\r\n         * assigned to each of them.\r\n         * <br>\r\n         * There are no limitations with regard to the characters contained in the name string as it is usually taken\r\n         * directly from the source file.\r\n         *\r\n         * Implementations should be able to handle tokens such as whitespace, tabs, line feeds, quotation marks,\r\n         * ampersands etc.\r\n         *\r\n         * Sometimes old introduces new nodes not present in the source file into the hierarchy (usually out of\r\n         * necessity because sometimes the source hierarchy format is simply not compatible). Their names are surrounded\r\n         * by @verbatim <> @endverbatim e.g.\r\n         *  @verbatim<DummyRootNode> @endverbatim.         */\r\n    public var name:String;\r\n\r\n    /** The transformation relative to the node's parent. */\r\n    public var transformation:AiMatrix4x4;// = AiMatrix4x4(),\r\n\r\n    /** Parent node. NULL if this node is the root node. */\r\n    public var parent:Null<AiNode>;// = null,\r\n\r\n    /** The number of child nodes of this node. */\r\n    public var numChildren:Int ;//= 0,\r\n\r\n    /** The child nodes of this node. NULL if numChildren is 0. */\r\n    public var children:Array<AiNode>;// = mutableListOf(),\r\n\r\n    /** The number of meshes of this node. */\r\n    public var numMeshes:Int;// = 0,\r\n\r\n    /** The meshes of this node. Each entry is an index into the mesh list of the #aiScene.     */\r\n    public var meshes:Array<Int>;// = intArrayOf(),\r\n\r\n    /** Metadata associated with this node or empty if there is no metadata.\r\n         *  Whether any metadata is generated depends on the source file format. See the @link importer_notes\r\n         *  @endlink page for more information on every source file format. Importers that don't document any metadata\r\n         *  don't write any.         */\r\n    public var metaData:AiMetadata;// = AiMetadata()\r\n\r\n\r\n    public function new() {\r\n        name = \"\";\r\n        transformation = Mat4.identity(new AiMatrix4x4());\r\n        parent = null;\r\n        numChildren = 0;\r\n        children = [];\r\n        numMeshes = 0;\r\n        meshes = [];\r\n        metaData = new AiMetadata();\r\n    }\r\n\r\n    public function findNode(name:String):Null<AiNode> {\r\n        if (this.name == name) return this;\r\n        var tmp = children.filter(function(it)return it.findNode(name) != null);\r\n        if (tmp.length > 0)return tmp[0];\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\n\r\n// -------------------------------------------------------------------------------\r\n/** The root structure of the imported data.\r\n *\r\n *  Everything that was imported from the given file can be accessed from here.\r\n *  Objects of this class are generally maintained and owned by Assimp, not by the caller. You shouldn't want to\r\n *  instance it, nor should you ever try to delete a given scene on your own. */\r\n// -------------------------------------------------------------------------------\r\n\r\nclass AiScene {\r\n\r\n    /** Any combination of the AI_SCENE_FLAGS_XXX flags. By default this value is 0, no flags are set. Most\r\n     * applications will want to reject all scenes with the AI_SCENE_FLAGS_INCOMPLETE bit set.         */\r\n    public var flags:Int;// = 0\r\n\r\n    /** The root node of the hierarchy.\r\n     *\r\n     * There will always be at least the root node if the import was successful (and no special flags have been set).\r\n     * Presence of further nodes depends on the format and content of the imported file.         */\r\n    public var rootNode:AiNode;//\r\n\r\n    /** The number of meshes in the scene. */\r\n    public var numMeshes:Int ;//= 0       // TODO shouldn't this just be a getter for `meshes.size`?, same for materials, lights, etc\r\n\r\n    /** The array of meshes.\r\n     *\r\n     * Use the indices given in the aiNode structure to access this array. The array is numMeshes in size. If the\r\n     * AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always be at least ONE material.         */\r\n    public var meshes:Array<AiMesh>;// = ArrayList()\r\n\r\n    /** The number of materials in the scene. */\r\n    public var numMaterials:Int ;//= 0\r\n\r\n    /** The array of materials.\r\n     *\r\n     * Use the index given in each aiMesh structure to access this array. The array is numMaterials in size. If the\r\n     * AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always be at least ONE material.         */\r\n    public var materials:Array<AiMaterial>;// = ArrayList()\r\n\r\n    /** The number of animations in the scene. */\r\n    public var numAnimations:Int ;// 0\r\n\r\n    /** The array of animations.\r\n     *\r\n     * All animations imported from the given file are listed here.\r\n     * The array is numAnimations in size.         */\r\n    public var animations:Array<AiAnimation>;// = ArrayList()\r\n\r\n    /** The number of textures embedded into the file */\r\n    public var numTextures:Int;//= 0\r\n\r\n    /** JVM ASSIMP CUSTOM, the array of the textures used in the scene.\r\n     *\r\n     * Not many file formats embed their textures into the file.\r\n     * An example is Quake's MDL format (which is also used by some GameStudio versions)\r\n     */\r\n    public var textures:Array<AiTexture> ;//= mutableMapOf<String, gli_.Texture>()     // The index is the file name\r\n\r\n    /** The number of light sources in the scene. Light sources are fully optional, in most cases this attribute\r\n     * will be 0         */\r\n    public var numLights:Int;//= 0\r\n\r\n    /** The array of light sources.\r\n     *\r\n     * All light sources imported from the given file are listed here. The array is numLights in size.         */\r\n    public var lights:Array<AiLight> ;//= ArrayList()\r\n\r\n    /** The number of cameras in the scene. Cameras are fully optional, in most cases this attribute will be 0         */\r\n    public var numCameras:Int;//= 0\r\n\r\n    /** The array of cameras.\r\n     *\r\n     * All cameras imported from the given file are listed here.\r\n     * The array is numCameras in size. The first camera in the array (if existing) is the default camera view into\r\n     * the scene.         */\r\n    public var cameras:Array<AiCamera>;// = ArrayList()\r\n\r\n    /** The global metadata assigned to the scene itself.\r\n     *\r\n     *  This data contains global metadata which belongs to the scene like unit-conversions, versions, vendors or\r\n     *  other model-specific data. This can be used to store format-specific metadata as well.     */\r\n    public var metaData:AiMetadata;//\r\n\r\n    public function new() {\r\n        flags = 0;\r\n        rootNode = new AiNode();\r\n        numMeshes = 0 ;\r\n        meshes = [];\r\n        numMaterials = 0;\r\n        materials = [];\r\n        numAnimations = 0;\r\n        animations = [];\r\n        numTextures = 0;\r\n        textures = [] ;// The index is the file name\r\n        numLights = 0;\r\n        lights = [];\r\n        numCameras = 0;\r\n        cameras = [];\r\n        metaData = new AiMetadata();\r\n    }\r\n    /** Check whether the scene contains meshes\r\n     *  Unless no special scene flags are set this will always be true. */\r\n    public function hasMeshes() {\r\n        return !Lambda.empty(meshes);\r\n    }\r\n\r\n    /** Check whether the scene contains materials\r\n     *  Unless no special scene flags are set this will always be true. */\r\n    public function hasMaterials() {\r\n        return !Lambda.empty(materials);\r\n    }\r\n\r\n    /** Check whether the scene contains lights */\r\n    public function hasLights() {\r\n        return !Lambda.empty(lights);\r\n    }\r\n\r\n    /** Check whether the scene contains textures   */\r\n    public function hasTextures() {\r\n        return !Lambda.empty(textures);\r\n    }\r\n\r\n    /** Check whether the scene contains cameras    */\r\n    public function hasCameras() {\r\n        return !Lambda.empty(cameras);\r\n    }\r\n\r\n    /** Check whether the scene contains animations */\r\n    public function hasAnimations() {\r\n        return !Lambda.empty(animations);\r\n    }\r\n\r\n}\r\n","package assimp.format;\r\nclass Version {\r\n\r\n/** @brief Returns a string with legal copyright and licensing information about Assimp. The string may include multiple\r\n *  lines.\r\n *  @return Pointer to static string.\r\n */\r\n    public static var legalString = \"\\\"\";\r\n/*\r\n    Open Asset Import Library (Assimp).\r\n    A free C/C++ library to import various 3D file formats into applications\r\n\r\n    (c) 2008-2017, assimp team\r\n    License under the terms and conditions of the 3-clause BSD license\r\n    http://assimp.sourceforge.net\\n\"\"\"\r\n*/\r\n/** @brief Returns the current minor version number of Assimp.\r\n *  @return Minor version of the Assimp runtime the application was linked/built against\r\n */\r\n    public static var versionMinor = 0;\r\n\r\n/** @brief Returns the current major version number of Assimp.\r\n *  @return Major version of the Assimp runtime the application was linked/built against\r\n */\r\n    public static var versionMajor = 4;\r\n\r\n/** @brief Returns the repository revision of the Assimp runtime.\r\n *  @return SVN Repository revision number of the Assimp runtime the application was linked/built against.\r\n */\r\n    public static var versionRevision = 0xee56ffa1;\r\n    public static var branch = \"master\";\r\n\r\n/** JVM custom */\r\n    public static var build = 14;\r\n\r\n/** @brief Returns assimp's compile flags\r\n *  @return Any bitwise combination of the ASSIMP_CFLAGS_xxx constants.\r\n */\r\n    public static var compileFlags = Assimp.DEBUG;\r\n\r\n/** JVM custom */\r\n    public static var version = \"$versionMajor.$versionMinor.$build\";\r\n\r\n    public function new() {\r\n    }\r\n}\r\n","package assimp.format.assbin;\r\nimport haxe.io.Bytes;\r\nimport assimp.format.Camera.AiCamera;\r\nimport assimp.format.Light.AiLightSourceType;\r\nimport assimp.format.Light.AiLight;\r\nimport haxe.io.Bytes;\r\nimport assimp.format.Material.AiTexture;\r\nimport assimp.format.Anim.AiAnimation;\r\nimport assimp.format.Anim.AiQuatKey;\r\nimport assimp.format.Anim.AiVectorKey;\r\nimport assimp.format.Anim.AiNodeAnim;\r\nimport assimp.format.Material.AiMaterial;\r\nimport assimp.format.Material.AiMaterialProperty;\r\nimport assimp.format.Mesh.AiFace;\r\nimport assimp.format.Defs.AiColor4D;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.format.Mesh.AiMesh;\r\nimport assimp.IOStreamUtil;\r\nimport assimp.format.Mesh.AiVertexWeight;\r\nimport assimp.format.Mesh.AiBone;\r\nimport assimp.format.MetaData.AiMetadataEntry;\r\nimport assimp.format.MetaData.AiMetadataType;\r\nimport assimp.format.MetaData.AiMetadata;\r\nimport assimp.format.Scene.AiNode;\r\nimport assimp.IOSystem.MemoryIOStream;\r\nimport assimp.format.Scene.AiScene;\r\nimport assimp.IOSystem.IOStream;\r\nimport assimp.ImporterDesc.AiImporterFlags;\r\nimport assimp.ImporterDesc.AiImporterDesc;\r\nusing assimp.IOStreamUtil;\r\nclass AssbinLoader extends BaseImporter {\r\n    private static var ASSBIN_VERSION_MINOR = 0;\r\n    private static var ASSBIN_VERSION_MAJOR = 1;\r\n    private static var ASSBIN_HEADER_LENGTH = 512;\r\n\r\n// these are the magic chunk identifiers for the binary ASS file format\r\n    private static var ASSBIN_CHUNK_AICAMERA = 0x1234;\r\n    private static var ASSBIN_CHUNK_AILIGHT = 0x1235;\r\n    private static var ASSBIN_CHUNK_AITEXTURE = 0x1236;\r\n    private static var ASSBIN_CHUNK_AIMESH = 0x1237;\r\n    private static var ASSBIN_CHUNK_AINODEANIM = 0x1238;\r\n    private static var ASSBIN_CHUNK_AISCENE = 0x1239;\r\n    private static var ASSBIN_CHUNK_AIBONE = 0x123a;\r\n    private static var ASSBIN_CHUNK_AIANIMATION = 0x123b;\r\n    private static var ASSBIN_CHUNK_AINODE = 0x123c;\r\n    private static var ASSBIN_CHUNK_AIMATERIAL = 0x123d;\r\n    private static var ASSBIN_CHUNK_AIMATERIALPROPERTY = 0x123e;\r\n\r\n    private static var ASSBIN_MESH_HAS_POSITIONS = 0x1;\r\n    private static var ASSBIN_MESH_HAS_NORMALS = 0x2;\r\n    private static var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 0x4;\r\n    private static var ASSBIN_MESH_HAS_TEXCOORD_BASE = 0x100;\r\n    private static var ASSBIN_MESH_HAS_COLOR_BASE = 0x10000;\r\n\r\n    private static function ASSBIN_MESH_HAS_TEXCOORD(n:Int) return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\r\n\r\n    private static function ASSBIN_MESH_HAS_COLOR(n:Int) return ASSBIN_MESH_HAS_COLOR_BASE << n;\r\n\r\n    var shortened:Bool;\r\n    var compressed:Bool;\r\n\r\n    public function new() {\r\n        super();\r\n        info = new AiImporterDesc();\r\n        info.name = \".assbin Importer\";\r\n        info.comments = \"Gargaj / Conspiracy\";\r\n        info.flags = AiImporterFlags.SupportBinaryFlavour | AiImporterFlags.SupportCompressedFlavour;\r\n        info.fileExtensions = [\"assbin\"];\r\n        shortened = false;\r\n        compressed = false;\r\n    }\r\n\r\n\r\n    override public function canRead(file:String, ioStream:IOStream, checkSig:Bool):Bool {\r\n        var s:String = ioStream.readString(32) ;\r\n        s = s.substr(0, 19);\r\n        return s == \"ASSIMP.binary-dump.\" ;\r\n    }\r\n\r\n    override public function internReadFile(file:String, ioStream:IOStream, pScene:AiScene, buffers:Array<IOStream>):Void {\r\n        ioStream.position = 0;\r\n        var stream:IOStream = ioStream;\r\n        if (null == stream) {\r\n            return;\r\n        }\r\n        // signature\r\n        stream.seek(44);\r\n        var versionMajor = stream.readInt32();\r\n        var versionMinor = stream.readInt32();\r\n        if (versionMinor != AssbinLoader.ASSBIN_VERSION_MINOR || versionMajor != AssbinLoader.ASSBIN_VERSION_MAJOR) {\r\n            throw ( \"Invalid version, data format not compatible!\" );\r\n        }\r\n        var versionRevision = stream.readInt32();\r\n        var compileFlags = stream.readInt32();\r\n        shortened = stream.readUInt16() > 0;\r\n        compressed = stream.readUInt16() > 0;\r\n        if (shortened)\r\n            throw ( \"Shortened binaries are not supported!\" );\r\n        stream.seek(256); // original filename\r\n        stream.seek(128); // options\r\n        stream.seek(64); // padding\r\n        if (compressed) {\r\n            var uncompressedSize = stream.readInt32();\r\n            var compressedSize = stream.length;\r\n            var compressedData = Bytes.alloc(compressedSize);\r\n            stream.readBytes(compressedData, stream.length, compressedSize);\r\n            var io:MemoryIOStream = new MemoryIOStream(haxe.zip.Uncompress.run(compressedData));\r\n            readBinaryScene(io, pScene);\r\n        } else {\r\n            readBinaryScene(stream, pScene);\r\n        }\r\n\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryNode(stream:IOStream, onode:AiNode, ?parent:AiNode = null) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AINODE)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n\r\n        var node:AiNode = onode;\r\n        node.name = stream.readAiString();\r\n        node.transformation = stream.readAiMatrix4x4();\r\n        var numChildren = stream.readInt32();\r\n        var numMeshes = stream.readInt32();\r\n        var nb_metadata = stream.readInt32();\r\n\r\n        if (parent != null) {\r\n            node.parent = parent;\r\n        }\r\n\r\n        if (numMeshes > 0) {\r\n            node.meshes = [for (i in 0... numMeshes) 0];// unsigned int[numMeshes];\r\n            for (i in 0... numMeshes) {\r\n                node.meshes[i] = stream.readInt32();\r\n                node.numMeshes++;\r\n            }\r\n        }\r\n\r\n        if (numChildren > 0) {\r\n            node.children = [for (i in 0... numChildren) new AiNode()];// aiNode*[numChildren];\r\n            for (i in 0... numChildren) {\r\n                readBinaryNode(stream, node.children[i], node);\r\n                node.numChildren++;\r\n            }\r\n        }\r\n\r\n        if (nb_metadata > 0) {\r\n            node.metaData = new AiMetadata() ;// aiMetadata::Alloc(nb_metadata);\r\n            for (i in 0... nb_metadata) {\r\n                var mKeys = stream.readAiString();\r\n                var mType:AiMetadataType = stream.readUInt16();\r\n                var data:Any = null ;\r\n\r\n                switch (mType) {\r\n                    case AiMetadataType.BOOL:\r\n                        data = stream.readByte() == 1;\r\n                    case AiMetadataType.INT32:\r\n                        data = stream.readInt32();\r\n                    case AiMetadataType.UINT64:\r\n                        data = stream.readDouble();\r\n                    case AiMetadataType.FLOAT:\r\n                        data = stream.readFloat();\r\n                    case AiMetadataType.DOUBLE:\r\n                        data = stream.readDouble();\r\n                    case AiMetadataType.AISTRING:\r\n                        data = stream.readAiString();\r\n                    case AiMetadataType.AIVECTOR3D:\r\n                        data = stream.readAiVector3D();\r\n                    default: {\r\n\r\n                    }\r\n                }\r\n                node.metaData.set(mKeys, new AiMetadataEntry(mType, data));\r\n            }\r\n        }\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryBone(stream:IOStream, b:AiBone) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AIBONE)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n        b.name = stream.readAiString();\r\n        b.numWeights = stream.readInt32();\r\n        b.offsetMatrix = stream.readAiMatrix4x4();\r\n        // for the moment we write dumb min/max values for the bones, too.\r\n        // maybe I'll add a better, hash-like solution later\r\n        if (shortened) {\r\n            //AiVertexWeight size int float\r\n            stream.readBounds(b.weights, b.numWeights);\r\n        } else {\r\n            // else write as usual\r\n            b.weights = [for (i in 0...b.numWeights) new AiVertexWeight()];//new aiVertexWeight[b->mNumWeights];\r\n            stream.readArray(IOStreamUtil.readAiVertexWeight, b.weights, b.numWeights);\r\n        }\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    static function fitsIntoUI16(mNumVertices) {\r\n        return ( mNumVertices < (1 << 16) );\r\n    }\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryMesh(stream:IOStream, mesh:AiMesh) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AIMESH)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n\r\n        mesh.primitiveTypes = stream.readInt32();\r\n        mesh.numVertices = stream.readInt32();\r\n        mesh.numFaces = stream.readInt32();\r\n        mesh.numBones = stream.readInt32();\r\n        mesh.materialIndex = stream.readInt32();\r\n\r\n        // first of all, write bits for all existent vertex components\r\n        var c = stream.readInt32();\r\n\r\n        if (c & AssbinLoader.ASSBIN_MESH_HAS_POSITIONS != 0) {\r\n            if (shortened) {\r\n                stream.readBounds(mesh.vertices, mesh.numVertices);\r\n            } else {\r\n                // else write as usual\r\n                mesh.vertices = [for (i in 0... mesh.numVertices) new AiVector3D()];// aiVector3D[mesh->mNumVertices];\r\n                stream.readArray(IOStreamUtil.readAiVector3D, mesh.vertices, mesh.numVertices);\r\n            }\r\n        }\r\n        if (c & AssbinLoader.ASSBIN_MESH_HAS_NORMALS != 0) {\r\n            if (shortened) {\r\n                stream.readBounds(mesh.normals, mesh.numVertices);\r\n            } else {\r\n                // else write as usual\r\n                mesh.normals = [for (i in 0... mesh.numVertices) new AiVector3D()];//new aiVector3D[mesh->mNumVertices];\r\n                stream.readArray(IOStreamUtil.readAiVector3D, mesh.normals, mesh.numVertices);\r\n            }\r\n        }\r\n        if (c & AssbinLoader.ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS != 0) {\r\n            if (shortened) {\r\n                stream.readBounds(mesh.tangents, mesh.numVertices);\r\n                stream.readBounds(mesh.bitangents, mesh.numVertices);\r\n            } else {\r\n                // else write as usual\r\n                mesh.tangents = [for (i in 0... mesh.numVertices) new AiVector3D()];// new aiVector3D[mesh->mNumVertices];\r\n                stream.readArray(IOStreamUtil.readAiVector3D, mesh.tangents, mesh.numVertices);\r\n                mesh.bitangents = [for (i in 0... mesh.numVertices) new AiVector3D()];//  new aiVector3D[mesh->mNumVertices];\r\n                stream.readArray(IOStreamUtil.readAiVector3D, mesh.bitangents, mesh.numVertices);\r\n            }\r\n        }\r\n\r\n        for (n in 0... Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {\r\n            if ((c & AssbinLoader.ASSBIN_MESH_HAS_COLOR(n)) == 0) {\r\n                break;\r\n            }\r\n\r\n            if (shortened) {\r\n                stream.readBounds(mesh.colors[n], mesh.numVertices);\r\n            } else {\r\n                // else write as usual\r\n                mesh.colors[n] = [for (i in 0... mesh.numVertices) new AiColor4D()];//new aiColor4D[mesh->mNumVertices];\r\n                stream.readArray(IOStreamUtil.readAiColor4D, mesh.colors[n], mesh.numVertices);\r\n            }\r\n        }\r\n\r\n        for (n in 0... Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS) {\r\n            if ((c & AssbinLoader.ASSBIN_MESH_HAS_TEXCOORD(n)) == 0) {\r\n                break;\r\n            }\r\n\r\n            // write number of UV components\r\n            mesh.numUVComponents[n] = stream.readInt32();\r\n\r\n            if (shortened) {\r\n                stream.readBounds(mesh.textureCoords[n], mesh.numVertices);\r\n            } else {\r\n                // else write as usual\r\n                mesh.textureCoords[n] = [for (i in 0... mesh.numVertices) new AiVector3D()];// new aiVector3D[mesh->mNumVertices];\r\n                stream.readArray(IOStreamUtil.readAiVector3D, mesh.textureCoords[n], mesh.numVertices);\r\n            }\r\n        }\r\n\r\n        // write faces. There are no floating-point calculations involved\r\n        // in these, so we can write a simple hash over the face data\r\n        // to the dump file. We generate a single 32 Bit hash for 512 faces\r\n        // using Assimp's standard hashing function.\r\n        if (shortened) {\r\n//Read<unsigned int>(stream);\r\n            stream.readInt32();\r\n        } else {\r\n            // else write as usual\r\n            // if there are less than 2^16 vertices, we can simply use 16 bit integers ...\r\n            mesh.faces = [for (i in 0... mesh.numFaces) new AiFace()];//new aiFace[mesh->mNumFaces];\r\n            for (i in 0...mesh.numFaces) {\r\n                var f = mesh.faces[i];\r\n\r\n//static_assert(Mesh.AI_MAX_FACE_INDICES <= 0xffff, \"AI_MAX_FACE_INDICES <= 0xffff\");\r\n                f.numIndices = stream.readUInt16();\r\n                f.indices = [for (i in 0...f.numIndices) 0];//new unsigned int[f.mNumIndices];\r\n\r\n                for (a in 0... f.numIndices) {\r\n                    // Check if unsigned  short ( 16 bit  ) are big enought for the indices\r\n                    if (fitsIntoUI16(mesh.numVertices)) {\r\n                        f.indices[a] = stream.readUInt16();\r\n                    } else {\r\n                        f.indices[a] = stream.readInt32();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // write bones\r\n        if (mesh.numBones > 0) {\r\n            mesh.bones = [for (i in 0...mesh.numBones) new AiBone()];//new   aiBone*[mesh->mNumBones];\r\n            for (a in 0...mesh.numBones) {\r\n                mesh.bones[a] = new AiBone();\r\n                readBinaryBone(stream, mesh.bones[a]);\r\n            }\r\n        }\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n\r\n    //todo\r\n    function readBinaryMaterialProperty(stream:IOStream, prop:AiMaterialProperty) {\r\n\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AIMATERIALPROPERTY)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n\r\n        prop.mKey = stream.readAiString();\r\n        prop.mSemantic = stream.readInt32();\r\n        prop.mIndex = stream.readInt32();\r\n\r\n        prop.mDataLength = stream.readInt32();\r\n        prop.mType = stream.readInt32();//(aiPropertyTypeInfo)Read<unsigned int>(stream);\r\n        prop.mData = Bytes.alloc(prop.mDataLength);\r\n        stream.readBytes(prop.mData, 0, prop.mDataLength);//todo\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryMaterial(stream:IOStream, mat:AiMaterial) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AIMATERIAL)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n\r\n        mat.numAllocated = mat.numProperties = stream.readInt32();\r\n        if (mat.numProperties > 0) {\r\n            if (mat.properties != null) {\r\n                mat.properties = [];\r\n            }\r\n            mat.properties = [for (i in 0...mat.numProperties) new AiMaterialProperty()];//new aiMaterialProperty*[mat->mNumProperties];\r\n            for (i in 0...mat.numProperties) {\r\n//mat.properties[i] = new AiMaterialProperty();\r\n                readBinaryMaterialProperty(stream, mat.properties[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryNodeAnim(stream:IOStream, nd:AiNodeAnim) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AINODEANIM)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n\r\n        nd.nodeName = stream.readAiString();\r\n        nd.numPositionKeys = stream.readInt32();\r\n        nd.numRotationKeys = stream.readInt32();\r\n        nd.numScalingKeys = stream.readInt32();\r\n        nd.preState = stream.readInt32();\r\n        nd.postState = stream.readInt32();\r\n\r\n        if (nd.numPositionKeys > 0) {\r\n            if (shortened) {\r\n                stream.readBounds(nd.positionKeys, nd.numPositionKeys);\r\n\r\n            } // else write as usual\r\n            else {\r\n                nd.positionKeys = [for (i in 0...nd.numPositionKeys) new AiVectorKey()];//new aiVectorKey[nd->mNumPositionKeys];\r\n                stream.readArray(IOStreamUtil.readAiVectorKey, nd.positionKeys, nd.numPositionKeys);\r\n            }\r\n        }\r\n        if (nd.numRotationKeys > 0) {\r\n            if (shortened) {\r\n                stream.readBounds(nd.rotationKeys, nd.numRotationKeys);\r\n\r\n            } else {\r\n                // else write as usual\r\n                nd.rotationKeys = [for (i in 0...nd.numRotationKeys) new AiQuatKey()];//new aiQuatKey[nd->mNumRotationKeys];\r\n                stream.readArray(IOStreamUtil.readAiQuatKey, nd.rotationKeys, nd.numRotationKeys);\r\n            }\r\n        }\r\n        if (nd.numScalingKeys > 0) {\r\n            if (shortened) {\r\n                stream.readBounds(nd.scalingKeys, nd.numScalingKeys);\r\n\r\n            } else {\r\n                // else write as usual\r\n                nd.scalingKeys = [for (i in 0...nd.numScalingKeys) new AiVectorKey()];// new aiVectorKey[nd->mNumScalingKeys];\r\n                stream.readArray(IOStreamUtil.readAiVectorKey, nd.scalingKeys, nd.numScalingKeys);\r\n            }\r\n        }\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryAnim(stream:IOStream, anim:AiAnimation) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AIANIMATION)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n        anim.name = stream.readAiString();\r\n        anim.duration = stream.readDouble();\r\n        anim.ticksPerSecond = stream.readDouble();\r\n        anim.numChannels = stream.readInt32();\r\n        if (anim.numChannels > 0) {\r\n            anim.channels = [for (i in 0...anim.numChannels) new AiNodeAnim()]; //new aiNodeAnim*[ anim->mNumChannels ];\r\n            for (a in 0... anim.numChannels) {\r\n                anim.channels[a] = new AiNodeAnim();\r\n                readBinaryNodeAnim(stream, anim.channels[a]);\r\n            }\r\n        }\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryTexture(stream:IOStream, tex:AiTexture) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AITEXTURE)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n\r\n        tex.width = stream.readInt32();\r\n        tex.height = stream.readInt32();\r\n        tex.achFormatHint = stream.readString(4); // stream->Read( tex->achFormatHint, sizeof(char), 4 );\r\n\r\n        if (!shortened) {\r\n            if (tex.height > 0) {\r\n                tex.pcData = Bytes.alloc(tex.width * 4);//new aiTexel[ tex->mWidth ];\r\n                stream.readBytes(tex.pcData, 0, tex.width * 4);\r\n            } else {\r\n                tex.pcData = Bytes.alloc(tex.width * tex.height * 4);//new aiTexel[ tex->mWidth*tex->mHeight ];\r\n                stream.readBytes(tex.pcData, 0, tex.width * tex.height * 4);\r\n            }\r\n        }\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryLight(stream:IOStream, l:AiLight) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AILIGHT)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n\r\n        l.name = stream.readAiString();\r\n        l.type = stream.readInt32();\r\n\r\n        if (l.type != AiLightSourceType.DIRECTIONAL) {\r\n            l.attenuationConstant = stream.readFloat();\r\n            l.attenuationLinear = stream.readFloat();\r\n            l.attenuationQuadratic = stream.readFloat();\r\n        }\r\n\r\n        l.colorDiffuse = stream.readAiColor3D();\r\n        l.colorSpecular = stream.readAiColor3D();\r\n        l.colorAmbient = stream.readAiColor3D();\r\n\r\n        if (l.type == AiLightSourceType.SPOT) {\r\n            l.angleInnerCone = stream.readFloat();\r\n            l.angleOuterCone = stream.readFloat();\r\n        }\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryCamera(stream:IOStream, cam:AiCamera) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AICAMERA)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n\r\n        cam.name = stream.readAiString();\r\n        cam.position = stream.readAiVector3D();\r\n        cam.lookAt = stream.readAiVector3D();\r\n        cam.up = stream.readAiVector3D();\r\n        cam.horizontalFOV = stream.readFloat();\r\n        cam.clipPlaneNear = stream.readFloat();\r\n        cam.clipPlaneFar = stream.readFloat();\r\n        cam.aspect = stream.readFloat();\r\n    }\r\n\r\n// -----------------------------------------------------------------------------------\r\n    function readBinaryScene(stream:IOStream, scene:AiScene) {\r\n        if (stream.readInt32() != AssbinLoader.ASSBIN_CHUNK_AISCENE)\r\n            throw (\"Magic chunk identifiers are wrong!\");\r\n        var size = stream.readInt32();\r\n\r\n        scene.flags = stream.readInt32();\r\n        scene.numMeshes = stream.readInt32();\r\n        scene.numMaterials = stream.readInt32();\r\n        scene.numAnimations = stream.readInt32();\r\n        scene.numTextures = stream.readInt32();\r\n        scene.numLights = stream.readInt32();\r\n        scene.numCameras = stream.readInt32();\r\n\r\n        // Read node graph\r\n        //scene->mRootNode = new aiNode[1];\r\n        readBinaryNode(stream, scene.rootNode, null);\r\n\r\n        // Read all meshes\r\n        if (scene.numMeshes > 0) {\r\n            scene.meshes = [for (i in 0...scene.numMeshes) new AiMesh()];//new aiMesh*[scene->mNumMeshes];\r\n            for (i in 0...scene.numMeshes) {\r\n                //  scene.meshes[i] = new AiMesh();\r\n                readBinaryMesh(stream, scene.meshes[i]);\r\n            }\r\n        }\r\n\r\n        // Read materials\r\n        if (scene.numMaterials > 0) {\r\n            scene.materials = [for (i in 0...scene.numMaterials) new AiMaterial()];// aiMaterial*[scene->mNumMaterials];\r\n            for (i in 0...scene.numMaterials) {\r\n//scene->mMaterials[i] = new aiMaterial();\r\n                readBinaryMaterial(stream, scene.materials[i]);\r\n            }\r\n        }\r\n\r\n        // Read all animations\r\n        if (scene.numAnimations > 0) {\r\n            scene.animations = [for (i in 0...scene.numAnimations) new AiAnimation()];//new aiAnimation*[scene->mNumAnimations];\r\n            for (i in 0...scene.numAnimations) {\r\n//scene->mAnimations[i] = new aiAnimation();\r\n\r\n                readBinaryAnim(stream, scene.animations[i]);\r\n            }\r\n        }\r\n\r\n        // Read all textures\r\n        if (scene.numTextures > 0) {\r\n            scene.textures = [for (i in 0...scene.numTextures) new AiTexture()];//new aiTexture*[scene->mNumTextures];\r\n            for (i in 0... scene.numTextures) {\r\n//scene->mTextures[i] = new aiTexture();\r\n                readBinaryTexture(stream, scene.textures[i]);\r\n            }\r\n        }\r\n\r\n        // Read lights\r\n        if (scene.numLights > 0) {\r\n\r\n            scene.lights = [for (i in 0...scene.numLights) new AiLight()];//new aiLight*[scene->mNumLights];\r\n            for (i in 0...scene.numLights) {\r\n//scene->mLights[i] = new aiLight();\r\n                readBinaryLight(stream, scene.lights[i]);\r\n            }\r\n        }\r\n\r\n        // Read cameras\r\n        if (scene.numCameras > 0) {\r\n            scene.cameras = [for (i in 0...scene.numCameras) new AiCamera()];//new aiCamera*[scene->mNumCameras];\r\n\r\n            for (i in 0...scene.numCameras) {\r\n//scene->mCameras[i] = new aiCamera();\r\n                readBinaryCamera(stream, scene.cameras[i]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","package assimp.format.gltf2;\r\n\r\nimport assimp.format.gltf2.types.Material;\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TTexture;\r\nimport assimp.format.gltf2.schema.GLTF.TSkin;\r\nimport assimp.format.gltf2.schema.GLTF.TSampler;\r\nimport assimp.format.gltf2.schema.GLTF.TMagFilter;\r\nimport assimp.format.gltf2.schema.GLTF.TMinFilter;\r\nimport assimp.format.gltf2.schema.GLTF.TWrapMode;\r\nimport assimp.format.gltf2.schema.GLTF.TScene;\r\nimport assimp.format.gltf2.schema.GLTF.TMesh;\r\nimport assimp.format.gltf2.schema.GLTF.TMeshPrimitive;\r\nimport assimp.format.gltf2.schema.GLTF.TMeshPrimitiveType;\r\nimport assimp.format.gltf2.schema.GLTF.TNode;\r\nimport assimp.format.gltf2.schema.GLTF.TBufferView;\r\nimport assimp.format.gltf2.schema.GLTF.TCamera;\r\nimport assimp.format.gltf2.schema.GLTF.TImage;\r\nimport assimp.format.gltf2.schema.GLTF.TMaterial;\r\nimport assimp.format.gltf2.schema.GLTF.TAnimation;\r\nimport assimp.format.gltf2.schema.GLTF.TAnimationInterpolation;\r\nimport assimp.format.gltf2.schema.GLTF.TBuffer;\r\nimport assimp.format.gltf2.schema.GLTF.TAccessor;\r\nimport haxe.ds.Vector;\r\nimport assimp.format.gltf2.types.Accessor;\r\nimport assimp.format.gltf2.types.Animation;\r\nimport assimp.format.gltf2.types.Buffer;\r\nimport assimp.format.gltf2.types.BufferView;\r\nimport assimp.format.gltf2.types.Camera;\r\nimport assimp.format.gltf2.types.Mesh;\r\nimport assimp.format.gltf2.types.Skin;\r\nimport assimp.format.gltf2.types.Node;\r\nimport assimp.format.gltf2.types.Scene;\r\nimport assimp.format.gltf2.types.Image;\r\nimport assimp.format.gltf2.types.Texture;\r\nimport assimp.format.gltf2.types.Sampler;\r\nimport haxe.io.Bytes;\r\n\r\n/**\r\n *  An object representing a glTF scene\r\n */\r\nclass GLTF2 {\r\n    public var accessors(default, null):Vector<Accessor> = new Vector<Accessor>(0);\r\n    public var animations(default, null):Vector<Animation> = new Vector<Animation>(0);\r\n    public var buffers(default, null):Vector<Buffer> = new Vector<Buffer>(0);\r\n    public var bufferViews(default, null):Vector<BufferView> = new Vector<BufferView>(0);\r\n    public var cameras(default, null):Vector<Camera> = new Vector<Camera>(0);\r\n    public var images(default, null):Vector<Image> = new Vector<Image>(0);\r\n    public var materials(default, null):Vector< Material> = new Vector< Material>(0);\r\n    public var meshes(default, null):Vector<Mesh> = new Vector<Mesh>(0);\r\n    public var samplers(default, null):Vector<Sampler> = new Vector<Sampler>(0);\r\n    public var skins(default, null):Vector<Skin> = new Vector<Skin>(0);\r\n    public var textures(default, null):Vector<Texture> = new Vector<Texture>(0);\r\n    public var nodes(default, null):Vector<Node> = new Vector<Node>(0);\r\n    public var defaultScene(default, null):Scene = null;\r\n    public var scenes(default, null):Vector<Scene> = new Vector<Scene>(0);\r\n\r\n    function new() {}\r\n\r\n    public inline static function parseAndLoad(src:String, buffers:Array<Bytes>):GLTF2 {\r\n        return load(parse(src), buffers);\r\n    }\r\n\r\n    public static function load(raw:TGlTf, buffers:Array<Bytes>):GLTF2 {\r\n        var gltf:GLTF2 = new GLTF2();\r\n\r\n        gltf.nodes = Node.preloadFromRaw(gltf, raw);\r\n        gltf.buffers = Buffer.loadFromRaw(gltf, raw, buffers);\r\n        gltf.bufferViews = BufferView.loadFromRaw(gltf, raw);\r\n        gltf.accessors = Accessor.loadFromRaw(gltf, raw);\r\n        gltf.animations = Animation.loadFromRaw(gltf, raw);\r\n        gltf.cameras = Camera.loadFromRaw(gltf, raw);\r\n        gltf.images = Image.loadFromRaw(gltf, raw);\r\n        gltf.samplers = Sampler.loadFromRaw(gltf, raw);\r\n        gltf.textures = Texture.loadFromRaw(gltf, raw);\r\n        gltf.materials = Material.loadFromRaw(gltf, raw);\r\n        gltf.meshes = Mesh.loadFromRaw(gltf, raw);\r\n        gltf.skins = Skin.loadFromRaw(gltf, raw);\r\n        gltf.nodes = Node.loadFromRaw(gltf, raw);\r\n        gltf.scenes = Scene.loadFromRaw(gltf, raw);\r\n        gltf.defaultScene = gltf.scenes[raw.scene];\r\n\r\n        return gltf;\r\n    }\r\n\r\n    /**\r\n     *  Parse a glTF json string into typedef'd structs\r\n     *  @param src The glTF source\r\n     *  @return TGLTF\r\n     */\r\n    public static function parse(src:String):TGlTf {\r\n        var gltf:TGlTf = cast(haxe.Json.parse(src));\r\n\r\n        if (gltf.accessors == null) gltf.accessors = new Array<TAccessor>();\r\n        for (accessor in gltf.accessors) {\r\n            if (accessor.bufferView == null) {} // TODO: initialize the accessor with zeros\r\n            if (accessor.byteOffset == null) accessor.byteOffset = 0;\r\n            if (accessor.normalized == null) accessor.normalized = false;\r\n            if (accessor.max == null) accessor.max = new Array<Float>();\r\n            if (accessor.min == null) accessor.min = new Array<Float>();\r\n\r\n            if (accessor.sparse != null) {\r\n                if (accessor.sparse.indices.byteOffset == null) accessor.sparse.indices.byteOffset = 0;\r\n                if (accessor.sparse.values.byteOffset == null) accessor.sparse.values.byteOffset = 0;\r\n            }\r\n        }\r\n\r\n        if (gltf.animations == null) gltf.animations = new Array<TAnimation>();\r\n        for (animation in gltf.animations) {\r\n            for (sampler in animation.samplers) {\r\n                if (sampler.interpolation == null) sampler.interpolation = TAnimationInterpolation.LINEAR;\r\n            }\r\n        }\r\n\r\n        if (gltf.buffers == null) gltf.buffers = new Array<TBuffer>();\r\n\r\n        if (gltf.bufferViews == null) gltf.bufferViews = new Array<TBufferView>();\r\n        for (bufferView in gltf.bufferViews) {\r\n            if (bufferView.byteOffset == null) bufferView.byteOffset = 0;\r\n        }\r\n\r\n        if (gltf.cameras == null) gltf.cameras = new Array<TCamera>();\r\n\r\n        if (gltf.images == null) gltf.images = new Array<TImage>();\r\n\r\n        if (gltf.materials == null) gltf.materials = new Array<TMaterial>();\r\n        for (material in gltf.materials) {\r\n            if (material.normalTexture != null) {\r\n                if (material.normalTexture.texCoord == null) material.normalTexture.texCoord = 0;\r\n                if (material.normalTexture.scale == null) material.normalTexture.scale = 1.0;\r\n            }\r\n\r\n            if (material.occlusionTexture != null) {\r\n                if (material.occlusionTexture.texCoord == null) material.occlusionTexture.texCoord = 0;\r\n                if (material.occlusionTexture.strength == null) material.occlusionTexture.strength = 1.0;\r\n            }\r\n\r\n            if (material.pbrMetallicRoughness != null) {\r\n                if (material.pbrMetallicRoughness.baseColorFactor == null) material.pbrMetallicRoughness.baseColorFactor = [1.0, 1.0, 1.0, 1.0];\r\n                if (material.pbrMetallicRoughness.baseColorTexture != null) {\r\n                    if (material.pbrMetallicRoughness.baseColorTexture.texCoord == null) material.pbrMetallicRoughness.baseColorTexture.texCoord = 0;\r\n                }\r\n                if (material.pbrMetallicRoughness.metallicFactor == null) material.pbrMetallicRoughness.metallicFactor = 1.0;\r\n                if (material.pbrMetallicRoughness.roughnessFactor == null) material.pbrMetallicRoughness.roughnessFactor = 1.0;\r\n                if (material.pbrMetallicRoughness.metallicRoughnessTexture != null) {\r\n                    if (material.pbrMetallicRoughness.metallicRoughnessTexture.texCoord == null) material.pbrMetallicRoughness.metallicRoughnessTexture.texCoord = 0;\r\n                }\r\n            }\r\n\r\n            if (material.emissiveTexture != null) {\r\n                if (material.emissiveTexture.texCoord == null) material.emissiveTexture.texCoord = 0;\r\n            }\r\n\r\n            if (material.emissiveFactor == null) material.emissiveFactor = [0.0, 0.0, 0.0];\r\n            if (material.alphaCutoff == null) material.alphaCutoff = 0.5;\r\n            if (material.doubleSided == null) material.doubleSided = false;\r\n        }\r\n\r\n        if (gltf.meshes == null) gltf.meshes = new Array<TMesh>();\r\n        for (mesh in gltf.meshes) {\r\n            if (mesh.primitives == null) mesh.primitives = new Array<TMeshPrimitive>();\r\n            for (primitive in mesh.primitives) {\r\n                if (primitive.mode == null) primitive.mode = TMeshPrimitiveType.TRIANGLES;\r\n            }\r\n        }\r\n\r\n        if (gltf.nodes == null) gltf.nodes = new Array<TNode>();\r\n//        for(node in gltf.nodes) {\r\n//            // if they all need filling in...\r\n//            if(node.matrix == null && node.rotation == null && node.scale == null && node.translation == null) {\r\n//                // use the identity matrix\r\n//                node.matrix = [\r\n//                    1, 0, 0, 0,\r\n//                    0, 1, 0, 0,\r\n//                    0, 0, 1, 0,\r\n//                    0, 0, 0, 1\r\n//                ];\r\n//            }\r\n//            // if the components need filling in...\r\n//            if(node.matrix != null) {\r\n//                var a:Array<Float> = node.matrix;\r\n//\r\n//                node.translation = new Array<Float>();\r\n//                node.translation.push(a[12]);\r\n//                node.translation.push(a[13]);\r\n//                node.translation.push(a[14]);\r\n//\r\n//                var sx:Float = Math.sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2] + a[3]*a[3]);\r\n//                var sy:Float = Math.sqrt(a[4]*a[4] + a[5]*a[5] + a[6]*a[6] + a[7]*a[7]);\r\n//                var sz:Float = Math.sqrt(a[8]*a[8] + a[9]*a[9] + a[10]*a[10] + a[11]*a[11]);\r\n//                node.scale = new Array<Float>();\r\n//                node.scale.push(sx); node.scale.push(sy); node.scale.push(sz);\r\n//\r\n//                var m00 = a[0] / sx; var m11 = a[5] / sy; var m22 = a[10] / sz;\r\n//                node.rotation = new Array<Float>();\r\n//                node.rotation.push(Math.sqrt(Math.max(0.0, 1.0 + m00 - m11 - m22)) / 2.0);\r\n//                node.rotation.push(Math.sqrt(Math.max(0.0, 1.0 - m00 + m11 - m22)) / 2.0);\r\n//                node.rotation.push(Math.sqrt(Math.max(0.0, 1.0 - m00 - m11 + m22)) / 2.0);\r\n//                node.rotation.push(Math.sqrt(Math.max(0.0, 1.0 + m00 + m11 + m22)) / 2.0);\r\n//            }\r\n//            // if the matrix needs filling in..\r\n//            else\r\n// if(node.matrix == null && (node.rotation != null || node.scale != null || node.translation != null)) {\r\n//                if(node.rotation == null) node.rotation = [ 0.0, 0.0, 0.0, 1.0 ];\r\n//                if(node.scale == null) node.scale = [ 1.0, 1.0, 1.0 ];\r\n//                if(node.translation == null) node.translation = [ 0.0, 0.0, 0.0 ];\r\n//\r\n//                var x2:Float = node.rotation[0] + node.rotation[0];\r\n//                var y2:Float = node.rotation[1] + node.rotation[1];\r\n//                var z2:Float = node.rotation[2] + node.rotation[2];\r\n//\r\n//                var xx:Float = node.rotation[0] * x2;\r\n//                var xy:Float = node.rotation[0] * y2;\r\n//                var xz:Float = node.rotation[0] * z2;\r\n//                var yy:Float = node.rotation[1] * y2;\r\n//                var yz:Float = node.rotation[1] * z2;\r\n//                var zz:Float = node.rotation[2] * z2;\r\n//                var wx:Float = node.rotation[3] * x2;\r\n//                var wy:Float = node.rotation[3] * y2;\r\n//                var wz:Float = node.rotation[3] * z2;\r\n//\r\n//                node.matrix = [\r\n//                    (1 - (yy + zz)) * node.scale[0],\r\n//                    (xy + wz) * node.scale[0],\r\n//                    (xz - wy) * node.scale[0],\r\n//                    0,\r\n//\r\n//                    (xy - wz) * node.scale[1],\r\n//                    (1 - (xx + zz)) * node.scale[1],\r\n//                    (yz + wx) * node.scale[1],\r\n//                    0,\r\n//\r\n//                    (xz + wy) * node.scale[2],\r\n//                    (yz - wx) * node.scale[2],\r\n//                    (1 - (xx + yy)) * node.scale[2],\r\n//                    0,\r\n//\r\n//                    node.translation[0],\r\n//                    node.translation[1],\r\n//                    node.translation[2],\r\n//                    1\r\n//                ];\r\n//            }\r\n//            else {\r\n//                throw 'Unhandled transform case: ${node.matrix == null} ${node.translation == null} ${node.rotation == null} ${node.scale == null}';\r\n//            }\r\n//        }\r\n\r\n        if (gltf.samplers == null) gltf.samplers = new Array<TSampler>();\r\n        for (sampler in gltf.samplers) {\r\n            if (sampler.magFilter == null) sampler.magFilter = TMagFilter.LINEAR;\r\n            if (sampler.minFilter == null) sampler.minFilter = TMinFilter.LINEAR;\r\n            if (sampler.wrapS == null) sampler.wrapS = TWrapMode.REPEAT;\r\n            if (sampler.wrapT == null) sampler.wrapT = TWrapMode.REPEAT;\r\n        }\r\n\r\n        if (gltf.scene == null) gltf.scene = 0;\r\n\r\n        if (gltf.scenes == null) gltf.scenes = new Array<TScene>();\r\n\r\n        if (gltf.skins == null) gltf.skins = new Array<TSkin>();\r\n\r\n        if (gltf.textures == null) gltf.textures = new Array<TTexture>();\r\n        for (texture in gltf.textures) {\r\n            if (texture.sampler == null) texture.sampler = -1; // TODO: better index to default sampler?\r\n        }\r\n\r\n        return gltf;\r\n    }\r\n}\r\n","package assimp.format.gltf2;\r\nimport haxe.ds.IntMap;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.format.gltf2.schema.GLTF.TMinFilter;\r\nimport glm.Vec3;\r\nimport assimp.format.Defs.AiDefines;\r\nimport assimp.format.gltf2.types.Accessor;\r\nimport assimp.format.Mesh.AiPrimitiveType;\r\nimport glm.Mat4;\r\nimport assimp.format.AiMatKeys;\r\nimport assimp.format.gltf2.schema.GLTF.TMagFilter;\r\nimport assimp.format.AiMatKeys.AiPbrmaterial;\r\nimport assimp.format.Anim.AiKey;\r\nimport assimp.format.Material.AiMaterialProperty;\r\nimport assimp.format.Material.AiTexture;\r\nimport assimp.format.gltf2.types.Image;\r\nimport assimp.format.Anim.AiQuatKey;\r\nimport assimp.format.Anim.AiVectorKey;\r\nimport assimp.format.gltf2.schema.GLTF.TAnimationChannelTargetPath;\r\nimport assimp.format.Anim.AiAnimation;\r\nimport haxe.ds.Vector;\r\nimport assimp.format.gltf2.types.CameraType;\r\nimport assimp.format.Camera.AiCamera;\r\nimport assimp.format.gltf2.types.Camera;\r\nimport assimp.format.Mesh.AiAnimMesh;\r\nimport assimp.IOSystem.IOStream;\r\nimport assimp.format.Defs.AiVector4D;\r\nimport minko.utils.MathUtil;\r\nimport assimp.format.gltf2.types.AnimationChannel;\r\nimport assimp.format.Mesh.AiBone;\r\nimport assimp.format.gltf2.schema.GLTF.TMeshPrimitiveType;\r\nimport assimp.format.Mesh.AiMesh;\r\nimport assimp.format.gltf2.types.Animation;\r\nimport assimp.format.Anim.AiNodeAnim;\r\nimport assimp.format.Scene.AiScene;\r\nimport assimp.format.Scene.AiNode;\r\nimport assimp.format.Mesh.AiVertexWeight;\r\nimport assimp.format.gltf2.types.MeshPrimitive;\r\nimport glm.GLM;\r\nimport assimp.format.gltf2.types.Node;\r\nimport assimp.format.Mesh.AiFace;\r\nimport assimp.format.gltf2.types.Material;\r\nimport assimp.format.gltf2.schema.GLTF.TWrapMode;\r\nimport assimp.format.gltf2.types.Material.NormalTextureInfo;\r\nimport assimp.format.Material.AiString;\r\nimport assimp.format.gltf2.types.Material.TextureInfo;\r\nimport assimp.format.gltf2.types.AnimationChannel.AnimationSample;\r\nimport assimp.format.Material.AiTextureType;\r\nimport assimp.format.Material.AiMaterial;\r\nimport assimp.format.Defs.AiMatrix4x4;\r\nimport assimp.format.Defs.AiQuaternion;\r\nimport assimp.format.Defs.AiColor4D;\r\nimport assimp.format.Material.MapMode;\r\nimport assimp.ImporterDesc.AiImporterFlags;\r\nimport assimp.ImporterDesc.AiImporterDesc;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.format.Defs.Ai_real;\r\n\r\ntypedef TVec3 = Array<Float>;//[3];\r\ntypedef TVec4 = Array<Float>;//[4];\r\ntypedef TMat4 = Array<Float>;//[16];\r\ntypedef Asset = GLTF2;\r\ntypedef Tangent = AiVector4D;\r\n\r\nclass AnimationSamplers {\r\n    public function new() {\r\n        this.translation = null;\r\n        this.rotation = null;\r\n        this.scale = null;\r\n    }\r\n    public var translation:Vector<AnimationSample>;\r\n    public var rotation:Vector<AnimationSample>;\r\n    public var scale:Vector<AnimationSample>;\r\n}\r\n\r\nclass GlTF2Importer extends BaseImporter {\r\n\r\n    var meshOffsets:Array<Int>;\r\n    var embeddedTexIdxs:Array<Int>;\r\n    var mScene:AiScene = null;\r\n\r\n\r\n    //\r\n    // glTF2Importer\r\n    //\r\n\r\n\r\n    public function new() {\r\n        this.meshOffsets = [];\r\n        this.embeddedTexIdxs = [];\r\n        this.mScene = null;\r\n        var desc:AiImporterDesc = new AiImporterDesc();\r\n        desc.name = \"glTF2 Importer\";\r\n        desc.flags = AiImporterFlags.SupportTextFlavour\r\n        | AiImporterFlags.SupportBinaryFlavour\r\n        | AiImporterFlags.LimitedSupport\r\n        | AiImporterFlags.Experimental;\r\n        desc.fileExtensions = [\"gltf\", \"glb\"];\r\n        info = desc;\r\n        // empty\r\n        super();\r\n    }\r\n\r\n    function ConvertWrappingMode(gltfWrapMode:TWrapMode):MapMode {\r\n        switch (gltfWrapMode)\r\n        {\r\n            case TWrapMode.MIRROR_REPEAT:\r\n                return MapMode.mirror;\r\n            case TWrapMode.CLAMP_TO_EDGE:\r\n                return MapMode.clamp;\r\n            case TWrapMode.REPEAT:\r\n                return MapMode.wrap;\r\n            default:\r\n                return MapMode.wrap;\r\n        }\r\n    }\r\n\r\n\r\n    function SetMaterialColorProperty(UnnamedParameter1:Asset, prop:TVec4, mat:AiMaterial, pKey:String, type:Int = 0, idx:Int = 0) {\r\n        var col:AiColor4D = prop;\r\n        var property = new AiMaterialProperty().setProperty(pKey, type, idx).setColor4DValue(col);\r\n        mat.addProperty(property);\r\n    }\r\n\r\n    function SetMaterialColorPropertyTVec3(UnnamedParameter1:Asset, prop:TVec3, mat:AiMaterial, pKey:String, type:Int = 0, idx:Int = 0) {\r\n        var tmp = prop.concat([1]);\r\n        SetMaterialColorProperty(UnnamedParameter1, tmp, mat, pKey, type, idx);\r\n    }\r\n\r\n    function SetMaterialTextureProperty(embeddedTexIdxs:Array<Int>, UnnamedParameter1:Asset, prop:TextureInfo, mat:AiMaterial, texType:AiTextureType, texSlot:Int = 0) {\r\n\r\n        if (prop.texture != null && prop.texture.image != null) {\r\n            var uri = (prop.texture.image.uri);\r\n            mat.addProperty(new AiMaterialProperty().setProperty(AiMatKeys.TEXTURE_BASE, texType, texSlot).setStringValue(uri));\r\n            // mat.addProperty(uri, AI_MATKEY_TEXTURE(texType, texSlot));\r\n            //  mat.addProperty(prop.texCoord, 1, _AI_MATKEY_GLTF_TEXTURE_TEXCOORD_BASE, texType, texSlot);\r\n            mat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_TEXTURE_TEXCOORD_BASE, texType, texSlot).setIntegerValue(prop.texCoord));\r\n            if (prop.texture.sampler != null) {\r\n                var sampler = prop.texture.sampler;\r\n                var name = (sampler.name != null ? sampler.name : sampler.id + \"\");\r\n                var id = (sampler.id) + \"\";\r\n                mat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_MAPPINGNAME_BASE, texType, texSlot).setStringValue(name));\r\n                mat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_MAPPINGID_BASE, texType, texSlot).setStringValue(id));\r\n                // mat.addProperty(name, AI_MATKEY_GLTF_MAPPINGNAME(texType, texSlot));\r\n                // mat.addProperty(id, AI_MATKEY_GLTF_MAPPINGID(texType, texSlot));\r\n\r\n                var wrapS = ConvertWrappingMode(sampler.wrapS);\r\n                var wrapT = ConvertWrappingMode(sampler.wrapT);\r\n\r\n                mat.addProperty(new AiMaterialProperty().setProperty(AiMatKeys.MAPPINGMODE_U_BASE, texType, texSlot).setIntegerValue(wrapS));\r\n                mat.addProperty(new AiMaterialProperty().setProperty(AiMatKeys.MAPPINGMODE_V_BASE, texType, texSlot).setIntegerValue(wrapT));\r\n\r\n//                mat.addProperty(wrapS, 1, AI_MATKEY_MAPPINGMODE_U(texType, texSlot));\r\n//                mat.addProperty(wrapT, 1, AI_MATKEY_MAPPINGMODE_V(texType, texSlot));\r\n\r\n                if (sampler.magFilter != TMagFilter.UNSET) {\r\n                    mat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_MAPPINGFILTER_MAG_BASE, texType, texSlot).setIntegerValue(sampler.magFilter));\r\n                    // mat.addProperty(sampler.magFilter, 1, AI_MATKEY_GLTF_MAPPINGFILTER_MAG(texType, texSlot));\r\n                }\r\n\r\n                if (sampler.minFilter != TMinFilter.UNSET) {\r\n                    mat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_MAPPINGFILTER_MIN_BASE, texType, texSlot).setIntegerValue(sampler.minFilter));\r\n                    //mat.addProperty(sampler.minFilter, 1, AI_MATKEY_GLTF_MAPPINGFILTER_MIN(texType, texSlot));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function SetMaterialTexturePropertyScale(embeddedTexIdxs:Array<Int>, r:Asset, prop:NormalTextureInfo, mat:AiMaterial, texType:AiTextureType, texSlot:Int = 0) {\r\n        SetMaterialTextureProperty(embeddedTexIdxs, r, prop, mat, texType, texSlot);\r\n\r\n        if (prop.texture != null && prop.texture.image != null) {\r\n            mat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_TEXTURE_SCALE_BASE, texType, texSlot).setFloatValue(prop.scale));\r\n            //  mat.addProperty(prop.scale, 1, AI_MATKEY_GLTF_TEXTURE_SCALE(texType, texSlot));\r\n        }\r\n    }\r\n\r\n    function SetMaterialTexturePropertyStrength(embeddedTexIdxs:Array<Int>, r:Asset, prop:OcclusionTextureInfo, mat:AiMaterial, texType:AiTextureType, texSlot:Int = 0) {\r\n        SetMaterialTextureProperty(embeddedTexIdxs, r, prop, mat, texType, texSlot);\r\n\r\n        if (prop.texture != null && prop.texture.image != null) {\r\n            mat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_TEXTURE_STRENGTH_BASE, texType, texSlot).setFloatValue(prop.strength));\r\n            //  mat.addProperty(prop.strength, 1, AI_MATKEY_GLTF_TEXTURE_STRENGTH(texType, texSlot));\r\n        }\r\n    }\r\n\r\n    function ImportMaterial(embeddedTexIdxs:Array<Int>, r:Asset, mat:Material):AiMaterial {\r\n        var aimat = new AiMaterial();\r\n\r\n        if (mat.name != null) {\r\n            var str = (mat.name);\r\n            aimat.addProperty(new AiMaterialProperty().setProperty(AiMatKeys.NAME_BASE, 0, 0).setStringValue(str));\r\n            // aimat.addProperty(str, AiMatKeys.NAME);\r\n        }\r\n\r\n        SetMaterialColorProperty(r, mat.pbrMetallicRoughness.baseColorFactor, aimat, AiMatKeys.COLOR_DIFFUSE_BASE);\r\n        SetMaterialColorProperty(r, mat.pbrMetallicRoughness.baseColorFactor, aimat, AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_FACTOR_BASE);\r\n\r\n        SetMaterialTextureProperty(embeddedTexIdxs, r, mat.pbrMetallicRoughness.baseColorTexture, aimat, AiTextureType.diffuse);\r\n        SetMaterialTextureProperty(embeddedTexIdxs, r, mat.pbrMetallicRoughness.baseColorTexture, aimat, AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_TEXTURE, 1);\r\n\r\n        SetMaterialTextureProperty(embeddedTexIdxs, r, mat.pbrMetallicRoughness.metallicRoughnessTexture, aimat, AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_METALLICROUGHNESS_TEXTURE, 0);\r\n\r\n        aimat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR_BASE, 0, 0).setFloatValue(mat.pbrMetallicRoughness.metallicFactor));\r\n        aimat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR_BASE, 0, 0).setFloatValue(mat.pbrMetallicRoughness.roughnessFactor));\r\n        //aimat.addProperty(mat.pbrMetallicRoughness.metallicFactor, 1, AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR);\r\n        //aimat.addProperty(mat.pbrMetallicRoughness.roughnessFactor, 1, AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR);\r\n\r\n        var roughnessAsShininess = 1 - mat.pbrMetallicRoughness.roughnessFactor;\r\n        roughnessAsShininess *= roughnessAsShininess * 1000;\r\n        aimat.addProperty(new AiMaterialProperty().setProperty(AiMatKeys.SHININESS_BASE, 0, 0).setFloatValue(roughnessAsShininess));\r\n        //aimat.addProperty(roughnessAsShininess, 1, AI_MATKEY_SHININESS);\r\n\r\n        SetMaterialTexturePropertyScale(embeddedTexIdxs, r, mat.normalTexture, aimat, AiTextureType.normals);\r\n        SetMaterialTexturePropertyStrength(embeddedTexIdxs, r, mat.occlusionTexture, aimat, AiTextureType.lightmap);\r\n        SetMaterialTextureProperty(embeddedTexIdxs, r, mat.emissiveTexture, aimat, AiTextureType.emissive);\r\n        SetMaterialColorProperty(r, mat.emissiveFactor, aimat, AiMatKeys.COLOR_EMISSIVE_BASE);\r\n        aimat.addProperty(new AiMaterialProperty().setProperty(AiMatKeys.TWOSIDED_BASE, 0, 0).setIntegerValue(mat.doubleSided ? 1 : 0));\r\n        // aimat.addProperty(mat.doubleSided, 1, AI_MATKEY_TWOSIDED);\r\n\r\n        aimat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_ALPHAMODE_BASE, 0, 0).setStringValue(mat.alphaMode));\r\n        aimat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_ALPHACUTOFF_BASE, 0, 0).setFloatValue(mat.alphaCutoff));\r\n        //  var alphaMode = new AiString(mat.alphaMode);\r\n//        aimat.addProperty(alphaMode, AI_MATKEY_GLTF_ALPHAMODE);\r\n//        aimat.addProperty(mat.alphaCutoff, 1, AI_MATKEY_GLTF_ALPHACUTOFF);\r\n\r\n\r\n        //pbrSpecularGlossiness\r\n        if (mat.pbrSpecularGlossiness != null) {\r\n            var pbrSG = mat.pbrSpecularGlossiness;\r\n            aimat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_PBRSPECULARGLOSSINESS_BASE, 0, 0).setIntegerValue(1));\r\n            //aimat.addProperty(mat.pbrSpecularGlossiness.isPresent, 1, AI_MATKEY_GLTF_PBRSPECULARGLOSSINESS);\r\n            SetMaterialColorProperty(r, pbrSG.diffuseFactor, aimat, AiMatKeys.COLOR_DIFFUSE_BASE);\r\n            SetMaterialColorProperty(r, pbrSG.specularFactor, aimat, AiMatKeys.COLOR_SPECULAR_BASE);\r\n\r\n            var glossinessAsShininess = pbrSG.glossinessFactor * 1000.0 ;\r\n            aimat.addProperty(new AiMaterialProperty().setProperty(AiMatKeys.SHININESS_BASE, 0, 0).setFloatValue(glossinessAsShininess));\r\n            aimat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_PBRSPECULARGLOSSINESS_GLOSSINESS_FACTOR_BASE, 0, 0).setFloatValue(pbrSG.glossinessFactor));\r\n//            aimat.addProperty(glossinessAsShininess, 1, AI_MATKEY_SHININESS);\r\n//            aimat.addProperty(pbrSG.glossinessFactor, 1, AI_MATKEY_GLTF_PBRSPECULARGLOSSINESS_GLOSSINESS_FACTOR);\r\n\r\n            SetMaterialTextureProperty(embeddedTexIdxs, r, pbrSG.diffuseTexture, aimat, AiTextureType.diffuse);\r\n            SetMaterialTextureProperty(embeddedTexIdxs, r, pbrSG.specularGlossinessTexture, aimat, AiTextureType.specular);\r\n        }\r\n        if (mat.unlit) {\r\n            aimat.addProperty(new AiMaterialProperty().setProperty(AiPbrmaterial.GLTF_UNLIT_BASE, 0, 0).setFloatValue(mat.unlit ? 1 : 0));\r\n//            aimat.addProperty(mat.unlit, 1, AI_MATKEY_GLTF_UNLIT);\r\n        }\r\n\r\n        return aimat;\r\n    }\r\n\r\n\r\n    function SetFace(face:AiFace, a:Int) {\r\n        face.numIndices = 1;\r\n        face.indices = [a];\r\n    }\r\n\r\n    function SetFace2(face:AiFace, a:Int, b:Int) {\r\n        face.numIndices = 2;\r\n        face.indices = [a, b];\r\n    }\r\n\r\n    function SetFace3(face:AiFace, a:Int, b:Int, c:Int) {\r\n        face.numIndices = 3;\r\n        face.indices = [a, b, c];\r\n    }\r\n\r\n\r\n    function CheckValidFacesIndices(faces:Array<AiFace>, nFaces:Int, nVerts:Int) {\r\n        for (i in 0... nFaces) {\r\n            for (j in 0...faces[i].numIndices) {\r\n                var idx = faces[i].indices[j];\r\n                if (idx >= nVerts) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function GetNodeTransform(node:Node) :AiMatrix4x4{\r\n        var matrix:Mat4 = Mat4.identity(new Mat4());\r\n        if (node.matrix != null) {\r\n            // glm mat4 are column-major (so are OpenGL matrices)\r\n            var arr:Array<Float> = node.matrix.toArray();\r\n\r\n            matrix = arr;\r\n            //todo\r\n        } else {\r\n//            if (node.translation != null) {\r\n//                var trans = new AiVector3D();\r\n//                trans = node.translation.toArray();\r\n//                GLM.translate(trans, matrix); //todo\r\n//            }\r\n//\r\n//            if (node.rotation != null) {\r\n//                var rot = new AiQuaternion();\r\n//                rot = node.rotation.toArray();\r\n//                //todo\r\n//                matrix = matrix * (Defs.mat4_cast(rot));\r\n//            }\r\n//\r\n//            if (node.scale != null) {\r\n//                var scal = new AiVector3D(1.0, 1, 1);\r\n//                scal = node.scale.toArray();\r\n//                var s = Mat4.identity(new AiMatrix4x4()); //todo\r\n//                GLM.scale(scal, matrix);\r\n//            }\r\n\r\n            var rotation=node.rotation ;\r\n            var translation=node.translation ;\r\n            var scale=node.scale ;\r\n            if(node.rotation == null) rotation = Vector.fromArrayCopy([ 0.0, 0.0, 0.0, 1.0 ]);\r\n            if(node.scale == null) scale = Vector.fromArrayCopy([ 1.0, 1.0, 1.0 ]);\r\n            if(node.translation == null) translation = Vector.fromArrayCopy([ 0.0, 0.0, 0.0 ]);\r\n\r\n            var x2:Float = rotation[0] + rotation[0];\r\n            var y2:Float = rotation[1] + rotation[1];\r\n            var z2:Float = rotation[2] + rotation[2];\r\n\r\n            var xx:Float = rotation[0] * x2;\r\n            var xy:Float = rotation[0] * y2;\r\n            var xz:Float = rotation[0] * z2;\r\n            var yy:Float = rotation[1] * y2;\r\n            var yz:Float = rotation[1] * z2;\r\n            var zz:Float = rotation[2] * z2;\r\n            var wx:Float = rotation[3] * x2;\r\n            var wy:Float = rotation[3] * y2;\r\n            var wz:Float = rotation[3] * z2;\r\n            // glm mat4 are column-major (so are OpenGL matrices)\r\n            matrix = [\r\n                (1 - (yy + zz)) * scale[0],\r\n                (xy + wz) * scale[0],\r\n                (xz - wy) * scale[0],\r\n                0,\r\n\r\n                (xy - wz) * scale[1],\r\n                (1 - (xx + zz)) * scale[1],\r\n                (yz + wx) * scale[1],\r\n                0,\r\n\r\n                (xz + wy) * scale[2],\r\n                (yz - wx) * scale[2],\r\n                (1 - (xx + yy)) * scale[2],\r\n                0,\r\n\r\n                translation[0],\r\n                translation[1],\r\n                translation[2],\r\n                1\r\n            ];\r\n        }\r\n\r\n        // Assimp aiMatrix4x4 are row-major meanwhile\r\n        return convertMat4(matrix);\r\n    }\r\n\r\n    public function convertMat4(matrix:AiMatrix4x4) {\r\n        // Assimp aiMatrix4x4 are row-major meanwhile\r\n        // glm mat4 are column-major (so are OpenGL matrices)\r\n\r\n\r\n        var arr = matrix.toFloatArray();\r\n\r\n        var m:AiMatrix4x4 = new AiMatrix4x4(\r\n        arr[ 0], arr[ 1], arr[ 2], arr[3],\r\n        arr[ 4], arr[ 5], arr[ 6], arr[7],\r\n        arr[ 8], arr[ 9], arr[10], arr[11],\r\n        arr[ 12], arr[ 13], arr[14], arr[15]\r\n        );\r\n        return m;\r\n    }\r\n\r\n    function BuildVertexWeightMapping(primitive:MeshPrimitive, map:Array<Array<AiVertexWeight>>) {\r\n        var attr:TAttributes = primitive.attributes;\r\n        if (attr.weight == null || attr.joint == null) {\r\n            return;\r\n        }\r\n        if (attr.weight[0].accessor.count != attr.joint[0].accessor.count) {\r\n            return;\r\n        }\r\n        var weight:TAttribute = attr.weight[0];\r\n        var joint:TAttribute = attr.joint[0];\r\n        var num_vertices = weight.accessor.count;\r\n\r\n        var weights:Array<Float> = weight.accessor.getFloats().toArray();\r\n        var indices :Array<Int> = joint.accessor.getInts().toArray();\r\n        for (i in 0... num_vertices) {\r\n            for (j in 0... 4) {\r\n                var index = i * 4 + j;\r\n                var bone = indices[index];\r\n                var weight = weights[index];\r\n                // if (weight > 0 && bone < map.length) {\r\n                if (weight > 0.0) {\r\n                    //  map[bone].Capacity = 8;\r\n                    var tmp = new AiVertexWeight();\r\n                    tmp.vertexId = i;\r\n                    tmp.weight = weight;\r\n                    map[bone].push(tmp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function ImportNode(pScene:AiScene, r:Asset, meshOffsets:Array<Int>, ptr:Node):AiNode {\r\n        var node = ptr;\r\n        var nameOrId = node.name == null ? node.id + \"\" : node.name;\r\n        var ainode = new AiNode();\r\n        ainode.name = nameOrId;\r\n        if (node.children != null) {\r\n            ainode.numChildren = node.children.length;\r\n            ainode.children = [];// new aiNode[ainode.mNumChildren];\r\n            for (i in 0... ainode.numChildren) {\r\n                var child = ImportNode(pScene, r, meshOffsets, node.children[i]);\r\n                child.parent = ainode;\r\n                ainode.children[i] = child;\r\n            }\r\n        }\r\n        ainode.transformation = GetNodeTransform(node);\r\n        if (node.mesh != null) {\r\n            // GLTF files contain at most 1 mesh per node.\r\n            //   Debug.Assert(node.meshes.size() == 1);\r\n            var mesh_idx = node.mesh.index;\r\n            var count = meshOffsets[mesh_idx + 1] - meshOffsets[mesh_idx];\r\n\r\n            ainode.numMeshes = count;\r\n            ainode.meshes = [];//new uint[count];\r\n\r\n            if (node.skin != null) {\r\n                for (primitiveNo in 0... count) {\r\n                    var mesh:AiMesh = pScene.meshes[meshOffsets[mesh_idx] + primitiveNo];\r\n                    mesh.numBones = node.skin.joints.length;\r\n                    mesh.bones = [];//new aiBone[mesh.mNumBones];\r\n\r\n                    // GLTF and Assimp choose to store bone weights differently.\r\n                    // GLTF has each vertex specify which bones influence the vertex.\r\n                    // Assimp has each bone specify which vertices it has influence over.\r\n                    // To convert this data, we first read over the vertex data and pull\r\n                    // out the bone-to-vertex mapping.  Then, when creating the aiBones,\r\n                    // we copy the bone-to-vertex mapping into the bone.  This is unfortunate\r\n                    // both because it's somewhat slow and because, for many applications,\r\n                    // we then need to reconvert the data back into the vertex-to-bone\r\n                    // mapping which makes things doubly-slow.\r\n                    var weighting = [for (i in 0...mesh.numBones) new Array<AiVertexWeight>()];//(mesh.mNumBones);\r\n                    BuildVertexWeightMapping(node.mesh.primitives[primitiveNo], weighting);\r\n\r\n                    for (i in 0...mesh.numBones) {\r\n                        var bone = new AiBone();\r\n\r\n                        var joint:Node = node.skin.joints[i];\r\n                        if (joint.name != null) {\r\n                            bone.name = joint.name;\r\n                        }\r\n                        else {\r\n                            // Assimp expects each bone to have a unique name.\r\n                            var kDefaultName = \"bone_\" + i;\r\n                            bone.name = kDefaultName ;\r\n                        }\r\n                        //todo\r\n                        //bone.offsetMatrix = GetNodeTransform(joint);\r\n                        var arr:Array<Float> = node.skin.inverseBindMatrices[i].toArray();\r\n                        bone.offsetMatrix =new AiMatrix4x4(\r\n                            arr[ 0], arr[ 1], arr[ 2], arr[3],\r\n                            arr[ 4], arr[ 5], arr[ 6], arr[7],\r\n                            arr[ 8], arr[ 9], arr[10], arr[11],\r\n                            arr[ 12], arr[ 13], arr[14], arr[15]\r\n                        );\r\n\r\n                        var weights:Array<AiVertexWeight> = weighting[i];\r\n\r\n\r\n                        if (weights != null && weights.length > 0) {\r\n                            bone.numWeights = weights.length;\r\n                            bone.weights = weights ;\r\n                        }\r\n                        else {\r\n                            // Assimp expects all bones to have at least 1 weight.\r\n                            bone.weights = [new AiVertexWeight()];//Arrays.InitializeWithDefaultInstances<aiVertexWeight>(1);\r\n                            bone.numWeights = 1;\r\n                        }\r\n                        mesh.bones[i] = bone;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var k = 0;\r\n            var j = meshOffsets[mesh_idx];\r\n            while (j < meshOffsets[mesh_idx + 1]) {\r\n                ainode.meshes[k] = j;\r\n                ++j;\r\n                ++k;\r\n            }\r\n        }\r\n\r\n        if (node.camera != null) {\r\n            pScene.cameras[node.camera.index].name = ainode.name;\r\n        }\r\n\r\n        return ainode;\r\n    }\r\n\r\n    function GatherSamplers(anim:Animation):IntMap< AnimationSamplers> {\r\n        var samplers = new IntMap<AnimationSamplers>();\r\n        for (c in 0... anim.channels.length) {\r\n            var channel:AnimationChannel = anim.channels[c];\r\n\r\n\r\n            var node_index = channel.node.index;\r\n            var sampler:AnimationSamplers = null;// samplers[node_index];\r\n            if (samplers.exists(node_index)) {\r\n                sampler = samplers.get(node_index);\r\n            } else {\r\n                sampler = new AnimationSamplers();// samplers[node_index];\r\n                samplers.set(node_index, sampler);\r\n            }\r\n\r\n            if (channel.path == TAnimationChannelTargetPath.TRANSLATION) {\r\n                sampler.translation = channel.samples;\r\n            }\r\n            else if (channel.path == TAnimationChannelTargetPath.ROTATION) {\r\n                sampler.rotation = channel.samples;\r\n            }\r\n            else if (channel.path == TAnimationChannelTargetPath.SCALE) {\r\n                sampler.scale = channel.samples;\r\n            }\r\n\r\n        }\r\n\r\n        return samplers;\r\n    }\r\n\r\n    function CreateNodeAnim(r:Asset, node:Node, samplers:AnimationSamplers):AiNodeAnim {\r\n        var anim = new AiNodeAnim();\r\n        anim.nodeName = node.name;\r\n        var kMillisecondsFromSeconds = 1;// 1000.0 ;\r\n        if (samplers.translation != null) {\r\n            anim.numPositionKeys = samplers.translation.length;\r\n            anim.positionKeys = [ for (i in 0...anim.numPositionKeys) new AiVectorKey()];//Arrays.InitializeWithDefaultInstances < aiVectorKey > (anim.mNumPositionKeys);\r\n            for (i in 0...anim.numPositionKeys) {\r\n                var sampler:AnimationSample = samplers.translation[i];\r\n                anim.positionKeys[i].time = sampler.input * kMillisecondsFromSeconds;\r\n                anim.positionKeys[i].value.x = sampler.output[0];\r\n                anim.positionKeys[i].value.y = sampler.output[1];\r\n                anim.positionKeys[i].value.z = sampler.output[2];\r\n            }\r\n        }\r\n        else if (node.translation != null) {\r\n            anim.numPositionKeys = 1;\r\n            var positionKeys = new AiVectorKey();\r\n            positionKeys.time = 0.0;\r\n            positionKeys.value.x = node.translation[0];\r\n            positionKeys.value.y = node.translation[1];\r\n            positionKeys.value.z = node.translation[2];\r\n            anim.positionKeys = [positionKeys];\r\n        }\r\n\r\n        if (samplers.rotation != null) {\r\n\r\n            anim.numRotationKeys = samplers.rotation.length;\r\n            anim.rotationKeys = [ for (i in 0... anim.numRotationKeys) new AiQuatKey()];//Arrays.InitializeWithDefaultInstances < aiQuatKey > (anim.mNumRotationKeys);\r\n            for (i in 0... anim.numRotationKeys) {\r\n                var sampler:AnimationSample = samplers.rotation[i];\r\n                anim.rotationKeys[i].time = sampler.input * kMillisecondsFromSeconds;\r\n                //todo\r\n                anim.rotationKeys[i].value.x = sampler.output[0];\r\n                anim.rotationKeys[i].value.y = sampler.output[1];\r\n                anim.rotationKeys[i].value.z = sampler.output[2];\r\n                anim.rotationKeys[i].value.w = sampler.output[3];\r\n            }\r\n        }\r\n        else if (node.rotation != null) {\r\n            anim.numRotationKeys = 1;\r\n            var rotationKeys = new AiQuatKey();\r\n            rotationKeys.time = 0.0;\r\n            rotationKeys.value.x = node.rotation[0];\r\n            rotationKeys.value.y = node.rotation[1];\r\n            rotationKeys.value.z = node.rotation[2];\r\n            rotationKeys.value.w = node.rotation[3];\r\n            anim.rotationKeys = [rotationKeys];\r\n        }\r\n\r\n        if (samplers.scale != null) {\r\n\r\n            anim.numScalingKeys = samplers.scale.length;\r\n            anim.scalingKeys = [for (i in 0 ...anim.numScalingKeys) new AiVectorKey()];//Arrays.InitializeWithDefaultInstances < aiVectorKey > (anim.mNumScalingKeys);\r\n            for (i in 0 ...anim.numScalingKeys) {\r\n                var sampler:AnimationSample = samplers.scale[i];\r\n                anim.scalingKeys[i].time = sampler.input * kMillisecondsFromSeconds;\r\n                anim.scalingKeys[i].value.x = sampler.output[0];\r\n                anim.scalingKeys[i].value.y = sampler.output[1];\r\n                anim.scalingKeys[i].value.z = sampler.output[2];\r\n            }\r\n        }\r\n        else if (node.scale != null) {\r\n            anim.numScalingKeys = 1;\r\n            var scalingKeys = new AiVectorKey();\r\n            scalingKeys.time = 0.0;\r\n            scalingKeys.value.x = node.scale[0];\r\n            scalingKeys.value.y = node.scale[1];\r\n            scalingKeys.value.z = node.scale[2];\r\n            anim.scalingKeys = [scalingKeys];\r\n        }\r\n\r\n        return anim;\r\n    }\r\n\r\n\r\n    public function dispose() {\r\n        // empty\r\n    }\r\n\r\n\r\n    override public function canRead(file:String, ioStream:IOStream, checkSig:Bool):Bool {\r\n        var extension = getExtension(file);\r\n\r\n        if (extension != \"gltf\" && extension != \"glb\") {\r\n            return false;\r\n        }\r\n\r\n        if (ioStream != null) {\r\n\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public function ImportMaterials(r:Asset) {\r\n        var numImportedMaterials = r.materials.length;\r\n        var defaultMaterial = new Material();\r\n\r\n        mScene.numMaterials = numImportedMaterials + 1;\r\n        mScene.materials = [];//new aiMaterial[mScene.mNumMaterials];\r\n        mScene.materials[numImportedMaterials] = ImportMaterial(embeddedTexIdxs, r, defaultMaterial);\r\n\r\n        for (i in 0 ... numImportedMaterials) {\r\n            mScene.materials[i] = ImportMaterial(embeddedTexIdxs, r, r.materials[i]);\r\n        }\r\n    }\r\n\r\n    function ExtractData2(acc:TAttribute) {\r\n        var t = acc.accessor.getFloats();\r\n        var tmp = [];\r\n        var i = 0;\r\n        while (i < t.length) {\r\n            tmp.push(new AiVector3D(t[i], t[i + 1], 0));\r\n            i += 2;\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    function ExtractData3(acc:TAttribute) {\r\n        var t = acc.accessor.getFloats();\r\n        var tmp = [];\r\n        var i = 0;\r\n        while (i < t.length) {\r\n            tmp.push(new AiVector3D(t[i], t[i + 1], t[i + 2]));\r\n            i += 3;\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    function ExtractData4(acc:TAttribute) {\r\n        var t = acc.accessor.getFloats();\r\n        var tmp = [];\r\n        var i = 0;\r\n        while (i < t.length) {\r\n            tmp.push(new AiVector4D(t[i], t[i + 1], t[i + 2], t[i + 3]));\r\n            i += 4;\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n\r\n    public function ImportMeshes(r:Asset) {\r\n\r\n        //cross product\r\n        inline function crossProduct(v1:Vec3, v2:Vec3):Vec3 {\r\n            return Vec3.cross(v1, v2, new Vec3()) ;\r\n        }\r\n\r\n        var meshes = new Array<AiMesh>();\r\n        var k = 0;\r\n        for (m in 0...r.meshes.length) {\r\n            var mesh:assimp.format.gltf2.types.Mesh = r.meshes[m];\r\n            meshOffsets.push(k);\r\n            k += mesh.primitives.length;\r\n            for (p in 0... mesh.primitives.length) {\r\n                var prim:MeshPrimitive = mesh.primitives[p];\r\n                var aim = new AiMesh();\r\n                meshes.push(aim);\r\n                aim.name = mesh.name == null ? mesh.id + \"\" : mesh.name;\r\n\r\n//        if (mesh.primitives.length > 1)\r\n//        {\r\n//\r\n//        var len = aim.name.length;\r\n//        aim.mName.data[len] = '-';\r\n//        len += 1 + ASSIMP_itoa10(aim.mName.data + len + 1, (uint)(MAXLEN - len - 1), p);\r\n//        }\r\n\r\n                switch (prim.mode)\r\n                {\r\n                    case TMeshPrimitiveType.POINTS:\r\n                        aim.primitiveTypes |= AiPrimitiveType.POINT;\r\n                    case TMeshPrimitiveType.LINES:\r\n                    case TMeshPrimitiveType.LINE_LOOP:\r\n                    case TMeshPrimitiveType.LINE_STRIP:\r\n                        aim.primitiveTypes |= AiPrimitiveType.LINE;\r\n                    case TMeshPrimitiveType.TRIANGLES:\r\n                    case TMeshPrimitiveType.TRIANGLE_STRIP:\r\n                    case TMeshPrimitiveType.TRIANGLE_FAN:\r\n                        aim.primitiveTypes |= AiPrimitiveType.TRIANGLE;\r\n                    default: trace(\"\");\r\n                }\r\n\r\n                var attr = prim.attributes;\r\n                if (attr.position.length > 0 && attr.position[0].accessor.count > 0) {\r\n                    aim.vertices = ExtractData3(attr.position[0]) ;\r\n                    aim.numVertices = aim.vertices.length;\r\n                }\r\n\r\n                if (attr.normal.length > 0 && attr.normal[0].accessor.count > 0) {\r\n                    aim.normals = ExtractData3(attr.normal[0]) ;\r\n                    // only extract tangents if normals are present\r\n                    if (attr.tangent.length > 0 && attr.tangent[0].accessor.count > 0) {\r\n\r\n                        // generate bitangents from normals and tangents according to spec\r\n                        var tangents:Array<Tangent> = ExtractData4(attr.tangent[0]) ;\r\n                        aim.tangents = [];//Arrays.InitializeWithDefaultInstances<aiVector3D>(aim.mNumVertices);\r\n                        aim.bitangents = [];//Arrays.InitializeWithDefaultInstances<aiVector3D>(aim.mNumVertices);\r\n                        for (i in 0... aim.numVertices) {\r\n                            aim.tangents[i] = MathUtil.vec4_vec3(tangents[i]) ;\r\n                            //todo\r\n                            aim.bitangents[i] = crossProduct(aim.normals[i], aim.tangents[i]) * tangents[i].w;\r\n                        }\r\n                        tangents = null;\r\n                    }\r\n                }\r\n                var c_num = Math.floor(Math.min(attr.color.length, AiDefines.AI_MAX_NUMBER_OF_COLOR_SETS));\r\n                for (c in 0...c_num) {\r\n                    if (attr.color[c].accessor.count != aim.numVertices) {\r\n                        trace(\"Color stream size in mesh \\\"\" + mesh.name + \"\\\" does not match the vertex count\");\r\n                        continue;\r\n                    }\r\n                    aim.colors[c] = ExtractData4(attr.color[c]);// Arrays.InitializeWithDefaultInstances<aiColor4D>(attr.color[c].count);\r\n                }\r\n\r\n                var tc_num = Math.floor(Math.min(attr.texcoord.length, AiDefines.AI_MAX_NUMBER_OF_TEXTURECOORDS));\r\n                for (tc in 0...tc_num) {\r\n                    if (attr.texcoord[tc].accessor.count != aim.numVertices) {\r\n                        trace(\"Texcoord stream size in mesh \\\"\" + mesh.name + \"\\\" does not match the vertex count\");\r\n                        continue;\r\n                    }\r\n                    //todo int\r\n\r\n                    var numUVCount = attr.texcoord[tc].accessor.getComponentSize();\r\n                    if (numUVCount == 3) {\r\n                        aim.textureCoords[tc] = ExtractData3(attr.texcoord[tc]);\r\n                    } else {\r\n                        aim.textureCoords[tc] = ExtractData2(attr.texcoord[tc]);\r\n\r\n                    }\r\n\r\n//                    var values = aim.textureCoords[tc];\r\n//                    for (i in 0... aim.numVertices) {\r\n//                        values[i].y = 1 - values[i].y; // Flip Y coords\r\n//                    }\r\n//                    aim.textureCoords[tc]=values;\r\n/// <summary>\r\n                    /// Flip the V component of the UV (1-V)\r\n                    /// </summary>\r\n                    /// <param name=\"array\">The array to copy from and modify</param>\r\n                    /// <returns>Copied Vector2 with coordinates in glTF space</returns>\r\n                    aim.numUVComponents[tc] = numUVCount;\r\n\r\n                }\r\n\r\n\r\n                //target ani\r\n                //todo\r\n                var targets = prim.targets;\r\n                if (targets != null && targets.length > 0) {\r\n                    aim.numAnimMeshes = targets.length;\r\n                    aim.animMeshes = [];// new aiAnimMesh[aim.mNumAnimMeshes];\r\n                    for (i in 0... targets.length) {\r\n                        aim.animMeshes[i] = Assimp.aiCreateAnimMesh(aim);\r\n                        var aiAnimMesh:AiAnimMesh = (aim.animMeshes[i]);\r\n                        var target:TTarget = targets[i];\r\n\r\n                        if (target.position.length > 0) {\r\n                            var positionDiff = ExtractData3(target.position[0]);\r\n                            for (vertexId in 0...aim.numVertices) {\r\n                                aiAnimMesh.mVertices[vertexId] += positionDiff[vertexId];\r\n                            }\r\n                            positionDiff = null;\r\n                        }\r\n                        if (target.normal.length > 0) {\r\n                            var normalDiff = ExtractData3(target.normal[0]);\r\n                            for (vertexId in 0...aim.numVertices) {\r\n                                aiAnimMesh.mNormals[vertexId] += normalDiff[vertexId];\r\n                            }\r\n                            normalDiff = null;\r\n                        }\r\n                        if (target.tangent.length > 0) {\r\n                            var tangent:Array<Tangent> = ExtractData4(attr.tangent[0]);\r\n\r\n                            var tangentDiff:Array<Tangent> = ExtractData4(target.tangent[0]);\r\n\r\n                            for (vertexId in 0...aim.numVertices) {\r\n                                tangent[vertexId].x += tangentDiff[vertexId].x;\r\n                                tangent[vertexId].y += tangentDiff[vertexId].y;\r\n                                tangent[vertexId].z += tangentDiff[vertexId].z;\r\n                                //todo\r\n                                aiAnimMesh.mTangents[vertexId] = new AiVector3D(tangent[vertexId].x, tangent[vertexId].y, tangent[vertexId].z);\r\n                                aiAnimMesh.mBitangents[vertexId] = crossProduct(aiAnimMesh.mNormals[vertexId], aiAnimMesh.mTangents[vertexId]) * tangent[vertexId].w;\r\n                            }\r\n                            tangent = null;\r\n                            tangentDiff = null;\r\n                        }\r\n                        if (mesh.weights.length > i) {\r\n                            aiAnimMesh.mWeight = mesh.weights[i];\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                var faces:Array<AiFace> = [];\r\n                var nFaces = 0;\r\n\r\n                if (prim.indices != null) {\r\n                    var count = prim.indices.count;\r\n\r\n                    var data = prim.indices.getInts();\r\n                    // ai_assert(data.IsValid());\r\n\r\n                    switch (prim.mode)\r\n                    {\r\n                        case TMeshPrimitiveType.POINTS:\r\n                            {\r\n                                nFaces = count;\r\n                                faces = [for (i in 0...nFaces) new AiFace()];// Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                for (i in 0...count) {\r\n                                    SetFace(faces[i], data[i]);\r\n                                }\r\n                            }\r\n\r\n                        case TMeshPrimitiveType.LINES:\r\n                            {\r\n                                nFaces = Math.floor(count / 2);\r\n                                faces = [for (i in 0...nFaces) new AiFace()];//Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                var i = 0;\r\n                                while (i < count) {\r\n                                    SetFace2(faces[ Math.floor(i / 2)], data[i], data[i + 1]);\r\n                                    i += 2;\r\n                                }\r\n                            }\r\n\r\n                        case TMeshPrimitiveType.LINE_LOOP:\r\n                        case TMeshPrimitiveType.LINE_STRIP:\r\n                            {\r\n                                nFaces = count - ((prim.mode == TMeshPrimitiveType.LINE_STRIP) ? 1 : 0);\r\n                                faces = [for (i in 0...nFaces) new AiFace()];//Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                SetFace2(faces[0], data[0], data[1]);\r\n                                for (i in 2... count) {\r\n                                    SetFace2(faces[i - 1], faces[i - 2].indices[1], data[i]);\r\n                                }\r\n                                if (prim.mode == TMeshPrimitiveType.LINE_LOOP) { // close the loop\r\n                                    SetFace2(faces[count - 1], faces[count - 2].indices[1], faces[0].indices[0]);\r\n                                }\r\n                            }\r\n\r\n                        case TMeshPrimitiveType.TRIANGLES:\r\n                            {\r\n                                nFaces = Math.floor(count / 3);\r\n                                faces = [for (i in 0...nFaces) new AiFace()];//Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                var i = 0;\r\n                                while (i < count) {\r\n                                    SetFace3(faces[Math.floor(i / 3)], data[i], data[i + 1], data[i + 2]);\r\n                                    i += 3;\r\n                                }\r\n                            }\r\n\r\n                        case TMeshPrimitiveType.TRIANGLE_STRIP:\r\n                            {\r\n                                nFaces = count - 2;\r\n                                faces = [for (i in 0...nFaces) new AiFace()];//Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                for (i in 0...nFaces) {\r\n                                    //The ordering is to ensure that the triangles are all drawn with the same orientation\r\n                                    if ((i + 1) % 2 == 0) {\r\n                                        //For even n, vertices n + 1, n, and n + 2 define triangle n\r\n                                        SetFace3(faces[i], data[i + 1], data[i], data[i + 2]);\r\n                                    }\r\n                                    else {\r\n                                        //For odd n, vertices n, n+1, and n+2 define triangle n\r\n                                        SetFace3(faces[i], data[i], data[i + 1], data[i + 2]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        case TMeshPrimitiveType.TRIANGLE_FAN:\r\n                            nFaces = count - 2;\r\n                            faces = [for (i in 0...nFaces) new AiFace()];//Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                            SetFace3(faces[0], data[0], data[1], data[2]);\r\n                            for (i in 1... nFaces) {\r\n                                SetFace3(faces[i], faces[0].indices[0], faces[i - 1].indices[2], data[i + 2]);\r\n                            }\r\n                    }\r\n                }\r\n                else { // no indices provided so directly generate from counts\r\n\r\n                    // use the already determined count as it includes checks\r\n                    var count = aim.numVertices;\r\n\r\n                    switch (prim.mode)\r\n                    {\r\n                        case TMeshPrimitiveType.POINTS:\r\n                            {\r\n                                nFaces = count;\r\n                                faces = [for (i in 0...nFaces) new AiFace()];// Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                for (i in 0... count) {\r\n                                    SetFace(faces[i], i);\r\n                                }\r\n                            }\r\n\r\n                        case TMeshPrimitiveType.LINES:\r\n                            {\r\n                                nFaces = Math.floor(count / 2);\r\n                                faces = [for (i in 0...nFaces) new AiFace()];// Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                var i = 0;\r\n                                while (i < count) {\r\n                                    SetFace2(faces[Math.floor(i / 2)], i, i + 1);\r\n                                    i += 2;\r\n                                }\r\n                            }\r\n\r\n                        case TMeshPrimitiveType.LINE_LOOP:\r\n                        case TMeshPrimitiveType.LINE_STRIP:\r\n                            {\r\n                                nFaces = count - ((prim.mode == TMeshPrimitiveType.LINE_STRIP) ? 1 : 0);\r\n                                faces = [for (i in 0...nFaces) new AiFace()];//Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                SetFace2(faces[0], 0, 1);\r\n                                for (i in 2 ...count) {\r\n                                    SetFace2(faces[i - 1], faces[i - 2].indices[1], i);\r\n                                }\r\n                                if (prim.mode == TMeshPrimitiveType.LINE_LOOP) { // close the loop\r\n                                    SetFace2(faces[count - 1], faces[count - 2].indices[1], faces[0].indices[0]);\r\n                                }\r\n                            }\r\n\r\n                        case TMeshPrimitiveType.TRIANGLES:\r\n                            {\r\n                                nFaces = Math.floor(count / 3);\r\n                                faces = [for (i in 0...nFaces) new AiFace()];//Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                var i = 0;\r\n                                while (i < count) {\r\n                                    SetFace3(faces[Math.floor(i / 3)], i, i + 1, i + 2);\r\n                                    i += 3;\r\n                                }\r\n                            }\r\n                        case TMeshPrimitiveType.TRIANGLE_STRIP:\r\n                            {\r\n                                nFaces = count - 2;\r\n                                faces = [for (i in 0...nFaces) new AiFace()];//Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                                for (i in 0...nFaces) {\r\n                                    //The ordering is to ensure that the triangles are all drawn with the same orientation\r\n                                    if ((i + 1) % 2 == 0) {\r\n                                        //For even n, vertices n + 1, n, and n + 2 define triangle n\r\n                                        SetFace3(faces[i], i + 1, i, i + 2);\r\n                                    }\r\n                                    else {\r\n                                        //For odd n, vertices n, n+1, and n+2 define triangle n\r\n                                        SetFace3(faces[i], i, i + 1, i + 2);\r\n                                    }\r\n                                }\r\n                            }\r\n                        case TMeshPrimitiveType.TRIANGLE_FAN:\r\n                            nFaces = count - 2;\r\n                            faces = [for (i in 0...nFaces) new AiFace()];//Arrays.InitializeWithDefaultInstances<aiFace>(nFaces);\r\n                            SetFace3(faces[0], 0, 1, 2);\r\n                            for (i in 1 ... nFaces) {\r\n                                SetFace3(faces[i], faces[0].indices[0], faces[i - 1].indices[2], i + 2);\r\n                            }\r\n                    }\r\n                }\r\n\r\n                if (faces != null) {\r\n                    aim.faces = faces;\r\n                    aim.numFaces = nFaces;\r\n                    ///ai_assert(CheckValidFacesIndices(faces, (uint)nFaces, aim.mNumVertices));\r\n                }\r\n\r\n                if (prim.material != null) {\r\n                    aim.materialIndex = prim.material.index;\r\n                }\r\n                else {\r\n                    aim.materialIndex = mScene.numMaterials - 1;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        meshOffsets.push(k);\r\n        mScene.meshes = meshes;//(meshes, mScene.meshes, mScene.numMeshes);\r\n        mScene.numMeshes = meshes.length;\r\n    }\r\n\r\n    public function ImportCameras(r:Asset) {\r\n        if (r.cameras.length == 0) {\r\n            return;\r\n        }\r\n\r\n        mScene.numCameras = r.cameras.length;\r\n        mScene.cameras = [];//new aiCamera[r.cameras.Size()];\r\n\r\n        for (i in 0...r.cameras.length) {\r\n            var cam:Camera = r.cameras[i];\r\n\r\n            var aicam:AiCamera = mScene.cameras[i] = new AiCamera();\r\n\r\n            // cameras point in -Z by default, rest is specified in node transform\r\n            aicam.lookAt = new AiVector3D(0.0, 0.0, -1.0 );\r\n\r\n            switch (cam.type )\r\n            {\r\n                case CameraType.Perspective(aspectRatio, yFov):{\r\n                    aicam.aspect = aspectRatio;\r\n                    aicam.horizontalFOV = yFov * aicam.aspect;\r\n                    aicam.clipPlaneFar = cam.zfar;\r\n                    aicam.clipPlaneNear = cam.znear;\r\n                }\r\n                case CameraType.Orthographic(xmag, ymag):{\r\n                    // assimp does not support orthographic cameras\r\n                }\r\n                default:{\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public function ImportNodes(r:Asset) {\r\n        if (r.defaultScene == null) {\r\n            return;\r\n        }\r\n        var rootNodes:Vector<Node> = r.defaultScene.nodes;\r\n\r\n        // The root nodes\r\n        var numRootNodes = rootNodes.length;\r\n        if (numRootNodes == 1) { // a single root node: use it\r\n            mScene.rootNode = ImportNode(mScene, r, meshOffsets, rootNodes[0]);\r\n        }\r\n        else if (numRootNodes > 1) { // more than one root node: create a fake root\r\n            var root = new AiNode();\r\n            root.name = \"ROOT\";\r\n            root.children = [];//new AiNode[numRootNodes];\r\n            for (i in 0...numRootNodes) {\r\n                var node = ImportNode(mScene, r, meshOffsets, rootNodes[i]);\r\n                node.parent = root;\r\n                root.children[root.numChildren++] = node;\r\n            }\r\n            mScene.rootNode = root;\r\n        }\r\n\r\n        //if (!mScene->mRootNode) {\r\n        //  mScene->mRootNode = new aiNode(\"EMPTY\");\r\n        //}\r\n    }\r\n\r\n    public function ImportAnimations(r:Asset) {\r\n        if (r.defaultScene == null) {\r\n            return;\r\n        }\r\n\r\n        mScene.numAnimations = r.animations.length;\r\n        if (mScene.numAnimations == 0) {\r\n            return;\r\n        }\r\n\r\n        mScene.animations = [];// new aiAnimation[mScene.mNumAnimations];\r\n        for (i in 0... r.animations.length) {\r\n            var anim:Animation = r.animations[i];\r\n\r\n            var ai_anim:AiAnimation = new AiAnimation();\r\n            ai_anim.name = anim.name;\r\n            ai_anim.duration = 0;\r\n            ai_anim.ticksPerSecond = 0;\r\n\r\n            var samplers = GatherSamplers(anim);\r\n\r\n            ai_anim.numChannels = Lambda.count(samplers);\r\n            if (ai_anim.numChannels > 0) {\r\n                ai_anim.channels = [];// new aiNodeAnim[ai_anim.mNumChannels];\r\n                var j = 0;\r\n                for (iter in samplers.keys()) {\r\n                    ai_anim.channels[j] = CreateNodeAnim(r, r.nodes[iter], samplers.get(iter));\r\n                    ++j;\r\n                }\r\n            }\r\n\r\n            // Use the latest keyframe for the duration of the animation\r\n            var maxDuration:Float = 0;\r\n            for (j in 0... ai_anim.numChannels) {\r\n                var chan = ai_anim.channels[j];\r\n                if (chan.numPositionKeys > 0) {\r\n                    var lastPosKey = chan.positionKeys[chan.numPositionKeys - 1];\r\n                    if (lastPosKey.time > maxDuration) {\r\n                        maxDuration = lastPosKey.time;\r\n                    }\r\n\r\n\r\n                }\r\n                if (chan.numRotationKeys > 0) {\r\n                    var lastRotKey = chan.rotationKeys[chan.numRotationKeys - 1];\r\n                    if (lastRotKey.time > maxDuration) {\r\n                        maxDuration = lastRotKey.time;\r\n                    }\r\n\r\n                }\r\n                if (chan.numScalingKeys > 0) {\r\n                    var lastScaleKey = chan.scalingKeys[chan.numScalingKeys - 1];\r\n                    if (lastScaleKey.time > maxDuration) {\r\n                        maxDuration = lastScaleKey.time;\r\n                    }\r\n\r\n                }\r\n            }\r\n            ai_anim.duration = maxDuration;\r\n            ai_anim.ticksPerSecond = 1;//fps\r\n\r\n            mScene.animations[i] = ai_anim;\r\n        }\r\n    }\r\n\r\n    public function ImportEmbeddedTextures(r:Asset) {\r\n        embeddedTexIdxs = [];//.resize(r.images.Size(), -1);\r\n\r\n        var numEmbeddedTexs = 0;\r\n        for (i in 0... r.images.length) {\r\n            var img:Image = r.images[i];\r\n            if (img.bufferView != null) {\r\n                numEmbeddedTexs += 1;\r\n            }\r\n        }\r\n\r\n        if (numEmbeddedTexs == 0) {\r\n            return;\r\n        }\r\n\r\n        mScene.textures = [];//new aiTexture[numEmbeddedTexs];\r\n\r\n        // Add the embedded textures\r\n        for (i in 0 ... r.images.length) {\r\n            var img:Image = r.images[i];\r\n            if (img.bufferView == null) {\r\n                continue;\r\n            }\r\n\r\n            var idx = mScene.numTextures++;\r\n            embeddedTexIdxs[i] = idx;\r\n\r\n            var tex:AiTexture = mScene.textures[idx] = new AiTexture();\r\n\r\n            var length = img.bufferView.byteLength;\r\n            var data = img.bufferView.data;\r\n\r\n            tex.width = length;\r\n            tex.height = 0;\r\n            tex.pcData = (data);\r\n\r\n            if (img.mimeType != null) {\r\n                var ext:String = img.mimeType;\r\n                ext = ext.substr(ext.indexOf('/') + 1) ;\r\n                if (ext != null) {\r\n                    if (ext == \"jpeg\") {\r\n                        ext = \"jpg\";\r\n                    }\r\n                    tex.achFormatHint = ext;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override public function internReadFile(file:String, ioStream:IOStream, pScene:AiScene, buffers:Array<IOStream>):Void {\r\n\r\n        this.mScene = pScene;\r\n\r\n        // read the asset file\r\n\r\n        var asset:GLTF2 = GLTF2.parseAndLoad(ioStream.bytes.toString(), buffers.map(function(b:IOStream) return b.bytes));\r\n        //\r\n        // Copy the data out\r\n        //\r\n        ImportEmbeddedTextures(asset);\r\n        trace(\"ImportEmbeddedTextures\");\r\n        ImportMaterials(asset);\r\n        trace(\"ImportMaterials\");\r\n        ImportMeshes(asset);\r\n        trace(\"ImportMeshes\");\r\n        ImportCameras(asset);\r\n        trace(\"ImportCameras\");\r\n        ImportNodes(asset);\r\n        trace(\"ImportNodes\");\r\n        ImportAnimations(asset);\r\n        trace(\"ImportAnimations\");\r\n\r\n       // trace(\"pScene\",pScene);\r\n        if (pScene.numMeshes == 0) {\r\n            //   pScene.flags |= AI_SCENE_FLAGS_INCOMPLETE;\r\n        }\r\n    }\r\n}","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TAccessor;\r\nimport assimp.format.gltf2.schema.GLTF.TAttributeType;\r\nimport assimp.format.gltf2.schema.GLTF.TComponentType;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Accessor {\r\n    public var bufferView(default, null):BufferView = null;\r\n    public var byteOffset(default, null):Int = 0;\r\n    public var count(default, null):Int = 0;\r\n    public var componentType(default, null):TComponentType = TComponentType.BYTE;\r\n    public var type(default, null):TAttributeType = TAttributeType.SCALAR;\r\n    // TODO: normalized\r\n    // TODO: min / max\r\n    // TODO: sparse accessors\r\n\r\n    function new() {}\r\n\r\n    function load(gltf:GLTF2, accessor:TAccessor):Void {\r\n        bufferView = gltf.bufferViews[accessor.bufferView];\r\n        byteOffset = accessor.byteOffset;\r\n        count = accessor.count;\r\n        componentType = accessor.componentType;\r\n        type = accessor.type;\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Accessor> {\r\n        var accessors:Vector<Accessor> = new Vector<Accessor>(raw.accessors.length);\r\n        for (i in 0...raw.accessors.length) {\r\n            accessors[i] = new Accessor();\r\n        }\r\n        for (i in 0...raw.accessors.length) {\r\n            accessors[i].load(gltf, raw.accessors[i]);\r\n        }\r\n        return accessors;\r\n    }\r\n\r\n    public function getComponentSize() {\r\n        var componentSize:Int = switch(this.type) {\r\n            case SCALAR: 1;\r\n            case VEC2: 2;\r\n            case VEC3: 3;\r\n            case VEC4: 4;\r\n            case MAT2: 4;\r\n            case MAT3: 9;\r\n            case MAT4: 16;\r\n        };\r\n        return componentSize;\r\n    }\r\n\r\n    public function getInts():Vector<Int> {\r\n        if (this.componentType == TComponentType.FLOAT) {\r\n            throw 'This accessor points to `float` data, use `getFloats()` instead of `getInts()`!';\r\n        }\r\n        var componentSize:Int = getComponentSize();\r\n\r\n\r\n        var data:Vector<Int> = new Vector<Int>(count * componentSize);\r\n\r\n        var pos:Int = byteOffset;\r\n        // TODO: signed / unsigned versions..\r\n        var accessor:Int -> Void = switch(this.componentType) {\r\n            case BYTE | UNSIGNED_BYTE: function(i:Int) { data[i] = bufferView.data.get(pos); pos++; }\r\n            case SHORT | UNSIGNED_SHORT: function(i:Int) { data[i] = bufferView.data.getUInt16(pos); pos += 2; }\r\n            case UNSIGNED_INT: function(i:Int) { data[i] = bufferView.data.getInt32(pos); pos += 4; }\r\n            case _: throw 'Floats aren\\'t supported with this function!';\r\n        }\r\n        for (i in 0...(count * componentSize)) accessor(i);\r\n\r\n        return data;\r\n    }\r\n\r\n\r\n    public function getFloats():Vector<Float> {\r\n        if (this.componentType != TComponentType.FLOAT) {\r\n            throw 'This accessor points to `int` data, use `getInts()` instead of `getFloats()`!';\r\n        }\r\n\r\n        var size:Int = getComponentSize();\r\n        var data:Vector<Float> = new Vector<Float>(count * size);\r\n\r\n        var pos:Int = byteOffset;\r\n        for (i in 0...(count * size)) {\r\n            data[i] = bufferView.data.getFloat(pos);\r\n            pos += 4;\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TAnimation;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Animation {\r\n    public var name(default, null):String = null;\r\n    public var channels(default, null):Vector<AnimationChannel> = null;\r\n\r\n    function new() {}\r\n\r\n    function load(gltf:GLTF2, animation:TAnimation):Void {\r\n        this.name = animation.name;\r\n        this.channels = new Vector<AnimationChannel>(animation.channels.length);\r\n\r\n        for (i in 0...animation.channels.length) {\r\n            var channel:AnimationChannel = new AnimationChannel();\r\n            channel.node = gltf.nodes[animation.channels[i].target.node];\r\n            channel.loadSampler(gltf, animation.samplers[animation.channels[i].sampler]);\r\n            channel.path = animation.channels[i].target.path;\r\n            channels[i] = channel;\r\n        }\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Animation> {\r\n        var animations:Vector<Animation> = new Vector<Animation>(raw.animations.length);\r\n        for (i in 0...raw.animations.length) {\r\n            animations[i] = new Animation();\r\n        }\r\n        for (i in 0...raw.animations.length) {\r\n            animations[i].load(gltf, raw.animations[i]);\r\n        }\r\n        return animations;\r\n    }\r\n}","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TAnimationSampler;\r\nimport assimp.format.gltf2.schema.GLTF.TAnimationChannelTargetPath;\r\nimport haxe.ds.Vector;\r\n@:allow(assimp.format.gltf2.types.AnimationChannel)\r\nclass AnimationSample {\r\n    public var input(default, null):Float = 0;\r\n    public var output(default, null):Vector<Float> = null;\r\n\r\n    private function new(input:Float, output:Vector<Float>) {\r\n        this.input = input;\r\n        this.output = output;\r\n    }\r\n}\r\n\r\n@:allow(assimp.format.gltf2.types.Animation)\r\nclass AnimationChannel {\r\n    public var node(default, null):Node = null;\r\n    public var samples(default, null):Vector<AnimationSample> = null;\r\n    public var path(default, null):TAnimationChannelTargetPath = null;\r\n\r\n    private function new() {}\r\n\r\n    private function loadSampler(gltf:GLTF2, sampler:TAnimationSampler):Void {\r\n        var inputSampler:Accessor = gltf.accessors[sampler.input];\r\n        var outputSampler:Accessor = gltf.accessors[sampler.output];\r\n\r\n        var inputs:Vector<Float> = inputSampler.getFloats();\r\n        var outputs:Vector<Float> = outputSampler.getFloats();\r\n        samples = new Vector<AnimationSample>(inputs.length);\r\n        for (i in 0...inputs.length) {\r\n            samples[i] = new AnimationSample(\r\n            inputs[i],\r\n            switch(outputSampler.type) {\r\n                case SCALAR: {\r\n                    var o:Vector<Float> = new Vector<Float>(1);\r\n                    o[0] = outputs[i];\r\n                    o;\r\n                }\r\n\r\n                case VEC2: {\r\n                    var o:Vector<Float> = new Vector<Float>(2);\r\n                    o[0] = outputs[(i * 2) + 0];\r\n                    o[1] = outputs[(i * 2) + 1];\r\n                    o;\r\n                }\r\n\r\n                case VEC3: {\r\n                    var o:Vector<Float> = new Vector<Float>(3);\r\n                    o[0] = outputs[(i * 3) + 0];\r\n                    o[1] = outputs[(i * 3) + 1];\r\n                    o[2] = outputs[(i * 3) + 2];\r\n                    o;\r\n                }\r\n\r\n                case VEC4: {\r\n                    var o:Vector<Float> = new Vector<Float>(4);\r\n                    o[0] = outputs[(i * 4) + 0];\r\n                    o[1] = outputs[(i * 4) + 1];\r\n                    o[2] = outputs[(i * 4) + 2];\r\n                    o[3] = outputs[(i * 4) + 3];\r\n                    o;\r\n                }\r\n\r\n                default: {\r\n                    throw 'Unhandled animation sampler accessor type: \\'' + outputSampler.type + '\\'!';\r\n                }\r\n            }\r\n            );\r\n        }\r\n    }\r\n}","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TBuffer;\r\nimport haxe.io.Bytes;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Buffer {\r\n    public var uri(default, null):String = \"\";\r\n    public var name(default, null):String = \"\";\r\n    public var data(default, null):Bytes = null;\r\n\r\n    function new() {}\r\n\r\n    function load(gltf:GLTF2, buffer:TBuffer, data:Bytes):Void {\r\n        this.uri = buffer.uri;//DataURI  // Local file\r\n        this.name = buffer.name;\r\n        this.data = data;\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf, loadedBuffers:Array<Bytes>):Vector<Buffer> {\r\n        var buffers:Vector<Buffer> = new Vector<Buffer>(raw.buffers.length);\r\n        for (i in 0...raw.buffers.length) {\r\n            buffers[i] = new Buffer();\r\n        }\r\n        for (i in 0...raw.buffers.length) {\r\n            buffers[i].load(gltf, raw.buffers[i], loadedBuffers[i]);\r\n        }\r\n        return buffers;\r\n    }\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TBufferView;\r\nimport assimp.format.gltf2.schema.GLTF.TBufferTarget;\r\nimport haxe.ds.Vector;\r\nimport haxe.io.Bytes;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass BufferView {\r\n    public var buffer(default, null):Buffer = null;\r\n    public var byteOffset(default, null):Int = 0;\r\n    public var byteLength(default, null):Int = 0;\r\n    public var byteStride(default, null):Int = 0;\r\n    public var target(default, null):TBufferTarget = TBufferTarget.ARRAY_BUFFER;\r\n\r\n    private var _data:Bytes = null;\r\n    public var data(get, never):Bytes;\r\n\r\n    private function get_data():Bytes {\r\n        // TODO: deal with byteStride (https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment)\r\n        if (_data == null) {\r\n            _data = buffer.data.sub(byteOffset, byteLength);\r\n        }\r\n        return _data;\r\n    }\r\n\r\n    function new() {}\r\n\r\n    function load(gltf:GLTF2, bufferView:TBufferView):Void {\r\n        this.buffer = gltf.buffers[bufferView.buffer];\r\n        this.byteOffset = bufferView.byteOffset;\r\n        this.byteLength = bufferView.byteLength;\r\n        this.byteStride = bufferView.byteStride;\r\n        this.target = bufferView.target;\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<BufferView> {\r\n        var views:Vector<BufferView> = new Vector<BufferView>(raw.bufferViews.length);\r\n        for (i in 0...raw.bufferViews.length) {\r\n            views[i] = new BufferView();\r\n        }\r\n        for (i in 0...raw.bufferViews.length) {\r\n            views[i].load(gltf, raw.bufferViews[i]);\r\n        }\r\n        return views;\r\n    }\r\n}\r\n","package assimp.format.gltf2.types;\r\nclass Ref {\r\n    static public var idCount:Int = 0;\r\n    public var id:Int;\r\n    public var index:Int;\r\n\r\n    public function new() {\r\n        id = idCount++;\r\n    }\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TCamera;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Camera extends Ref {\r\n    public var type(default, null):CameraType;\r\n    public var znear(default, null):Float;\r\n    public var zfar(default, null):Float;\r\n\r\n    function new() {\r\n        super();\r\n    }\r\n\r\n    function load(gltf:GLTF2, camera:TCamera):Void {\r\n        if (camera.perspective != null) {\r\n            type = CameraType.Perspective(camera.perspective.aspectRatio, camera.perspective.yfov);\r\n            znear = camera.perspective.znear;\r\n            zfar = camera.perspective.zfar;\r\n        }\r\n        else {\r\n            type = CameraType.Orthographic(camera.orthographic.xmag, camera.orthographic.ymag);\r\n            znear = camera.orthographic.znear;\r\n            zfar = camera.orthographic.zfar;\r\n        }\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Camera> {\r\n        var cameras:Vector<Camera> = new Vector<Camera>(raw.cameras.length);\r\n        for (i in 0...raw.cameras.length) {\r\n            cameras[i] = new Camera();\r\n            cameras[i].index = i;\r\n        }\r\n        for (i in 0...raw.cameras.length) {\r\n            cameras[i].load(gltf, raw.cameras[i]);\r\n        }\r\n        return cameras;\r\n    }\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TImage;\r\nimport assimp.format.gltf2.schema.GLTF.TImageMimeType;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Image extends Ref {\r\n    public var name(default, null):String = null;\r\n    public var uri(default, null):Null<String> = null;\r\n    public var mimeType(default, null):TImageMimeType = TImageMimeType.PNG;\r\n    public var bufferView(default, null):Null<BufferView> = null;\r\n\r\n    function new() {\r\n        super();\r\n    }\r\n\r\n    function load(gltf:GLTF2, image:TImage):Void {\r\n        this.name = image.name;\r\n        this.uri = image.uri; //DataURI  // Local file\r\n        this.mimeType = image.mimeType;\r\n        if (image.bufferView != null) this.bufferView = gltf.bufferViews[image.bufferView];\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Image> {\r\n        var images:Vector<Image> = new Vector<Image>(raw.images.length);\r\n        for (i in 0...raw.images.length) {\r\n            images[i] = new Image();\r\n            images[i].index = i;\r\n        }\r\n        for (i in 0...raw.images.length) {\r\n            images[i].load(gltf, raw.images[i]);\r\n        }\r\n        return images;\r\n    }\r\n}","package assimp.format.gltf2.types;\r\nimport assimp.format.gltf2.schema.GLTF.TMaterial;\r\nimport haxe.ds.Vector;\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nclass TextureInfo {\r\n    public var texture:Texture;\r\n    public var index:Int;\r\n    public var texCoord:Int ;\r\n\r\n    public function new():Void {\r\n\r\n        texCoord = 0;\r\n    }\r\n}\r\n\r\nclass NormalTextureInfo extends TextureInfo {\r\n    public var scale:Float;\r\n\r\n    public function new():Void {\r\n        super();\r\n        scale = 1;\r\n    }\r\n}\r\n\r\nclass OcclusionTextureInfo extends TextureInfo {\r\n    public var strength:Float;\r\n\r\n    public function new():Void {\r\n        super();\r\n        strength = 1;\r\n    }\r\n}\r\n\r\nclass PbrMetallicRoughness {\r\n    public var baseColorFactor:Array<Float>;//TVec3;\r\n    public var baseColorTexture:TextureInfo;\r\n    public var metallicRoughnessTexture:TextureInfo;\r\n    public var metallicFactor:Float;\r\n    public var roughnessFactor:Float;\r\n\r\n    public function new() {\r\n        baseColorTexture = new TextureInfo();\r\n        metallicRoughnessTexture = new TextureInfo();\r\n    }\r\n}\r\n\r\nclass PbrSpecularGlossiness {\r\n    public var diffuseFactor:Array<Float>;//TVec4;\r\n    public var specularFactor:Array<Float>;//TVec3;\r\n    public var glossinessFactor:Float;\r\n    public var diffuseTexture:TextureInfo;\r\n    public var specularGlossinessTexture:TextureInfo;\r\n\r\n    public function new():Void {\r\n        diffuseTexture = new TextureInfo();\r\n        specularGlossinessTexture = new TextureInfo();\r\n        SetDefaults();\r\n    }\r\n\r\n    function SetDefaults() {\r\n\r\n    }\r\n}\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Material extends Ref {\r\n\r\n    static public var defaultBaseColor:Array<Float> = [1, 1, 1, 1];\r\n    static public var defaultEmissiveFactor:Array<Float> = [0, 0, 0];\r\n    static public var defaultDiffuseFactor:Array<Float> = [1, 1, 1, 1];\r\n    static public var defaultSpecularFactor:Array<Float> = [1, 1, 1];\r\n    public var name:Null<String>;\r\n\r\n    //PBR metallic roughness properties\r\n    public var pbrMetallicRoughness:Null<PbrMetallicRoughness>;\r\n\r\n    //other basic material properties\r\n    public var normalTexture:NormalTextureInfo;\r\n    public var occlusionTexture:OcclusionTextureInfo;\r\n    public var emissiveTexture:TextureInfo;\r\n    public var emissiveFactor:Array<Float>;//vec3;\r\n    public var alphaMode:String;\r\n    public var alphaCutoff:Float;\r\n    public var doubleSided:Bool;\r\n\r\n    //extension: KHR_materials_pbrSpecularGlossiness\r\n    public var pbrSpecularGlossiness:Null<PbrSpecularGlossiness>;\r\n\r\n    //extension: KHR_materials_unlit\r\n    public var unlit:Bool;\r\n\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Material> {\r\n        var materials = new Vector< Material>(raw.materials.length);\r\n        for (i in 0...raw.materials.length) {\r\n            materials[i] = new Material();\r\n            materials[i].index = i;\r\n        }\r\n        for (i in 0...raw.materials.length) {\r\n            materials[i].load(gltf, raw.materials[i]);\r\n        }\r\n        return materials;\r\n    }\r\n\r\n    function load(gltf:GLTF2, material:TMaterial) {\r\n        if (material.pbrMetallicRoughness != null) {\r\n\r\n\r\n            this.pbrMetallicRoughness.baseColorFactor = material.pbrMetallicRoughness.baseColorFactor;\r\n\r\n            if (material.pbrMetallicRoughness.baseColorTexture != null) {\r\n                this.pbrMetallicRoughness.baseColorTexture.texture = gltf.textures[material.pbrMetallicRoughness.baseColorTexture.index];\r\n                this.pbrMetallicRoughness.baseColorTexture.texCoord = material.pbrMetallicRoughness.baseColorTexture.texCoord;\r\n            }\r\n\r\n            if (material.pbrMetallicRoughness.metallicRoughnessTexture != null) {\r\n                this.pbrMetallicRoughness.metallicRoughnessTexture.texture = gltf.textures[material.pbrMetallicRoughness.metallicRoughnessTexture.index];\r\n                this.pbrMetallicRoughness.metallicRoughnessTexture.texCoord = material.pbrMetallicRoughness.metallicRoughnessTexture.texCoord;\r\n            }\r\n\r\n\r\n            this.pbrMetallicRoughness.metallicFactor = material.pbrMetallicRoughness.metallicFactor;\r\n            this.pbrMetallicRoughness.roughnessFactor = material.pbrMetallicRoughness.roughnessFactor;\r\n        }\r\n        if (material.normalTexture != null) {\r\n            this.normalTexture.texture = gltf.textures[material.normalTexture.index];\r\n            this.normalTexture.texCoord = material.normalTexture.texCoord;\r\n        }\r\n\r\n        if (material.occlusionTexture != null) {\r\n            this.occlusionTexture.texture = gltf.textures[material.occlusionTexture.index];\r\n            this.occlusionTexture.texCoord = material.occlusionTexture.texCoord;\r\n        }\r\n        if (material.emissiveTexture != null) {\r\n            this.emissiveTexture.texture = gltf.textures[material.emissiveTexture.index];\r\n            this.emissiveTexture.texCoord = material.emissiveTexture.texCoord;\r\n        }\r\n\r\n\r\n        this.emissiveFactor = material.emissiveFactor;\r\n        doubleSided = material.doubleSided;\r\n        alphaCutoff = material.alphaCutoff;\r\n        if (material.alphaMode != null)\r\n            alphaMode = material.alphaMode;\r\n\r\n//        if (Value* extensions = FindObject(material, \"extensions\")) {\r\n//            if (r.extensionsUsed.KHR_materials_pbrSpecularGlossiness) {\r\n//                if (Value* pbrSpecularGlossiness = FindObject(*extensions, \"KHR_materials_pbrSpecularGlossiness\")) {\r\n//                    PbrSpecularGlossiness pbrSG;\r\n//\r\n//                    ReadMember(*pbrSpecularGlossiness, \"diffuseFactor\", pbrSG.diffuseFactor);\r\n//                    ReadTextureProperty(r, *pbrSpecularGlossiness, \"diffuseTexture\", pbrSG.diffuseTexture);\r\n//                    ReadTextureProperty(r, *pbrSpecularGlossiness, \"specularGlossinessTexture\", pbrSG.specularGlossinessTexture);\r\n//                    ReadMember(*pbrSpecularGlossiness, \"specularFactor\", pbrSG.specularFactor);\r\n//                    ReadMember(*pbrSpecularGlossiness, \"glossinessFactor\", pbrSG.glossinessFactor);\r\n//\r\n//                    this->pbrSpecularGlossiness = Nullable<PbrSpecularGlossiness>(pbrSG);\r\n//                }\r\n//            }\r\n//\r\n//            unlit = nullptr != FindObject(*extensions, \"KHR_materials_unlit\");\r\n\r\n\r\n            if(material.extensions!=null){\r\n\r\n            }\r\n\r\n    }\r\n\r\n    public function new():Void {\r\n        super();\r\n        normalTexture = new NormalTextureInfo();\r\n        occlusionTexture = new OcclusionTextureInfo();\r\n        emissiveTexture = new TextureInfo();\r\n        SetDefaults();\r\n    }\r\n\r\n    function SetDefaults() {\r\n        //pbr materials\r\n        pbrMetallicRoughness = new PbrMetallicRoughness();\r\n        pbrMetallicRoughness.baseColorFactor = defaultBaseColor.copy();\r\n        pbrMetallicRoughness.metallicFactor = 1.0;\r\n        pbrMetallicRoughness.roughnessFactor = 1.0;\r\n\r\n        emissiveFactor = defaultEmissiveFactor.copy();\r\n        alphaMode = \"OPAQUE\";\r\n        alphaCutoff = 0.5;\r\n        doubleSided = false;\r\n        unlit = false;\r\n    }\r\n\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TMesh;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Mesh extends Ref {\r\n    public var name(default, null):Null<String> = null;\r\n    public var primitives(default, null):Vector<MeshPrimitive> = new Vector<MeshPrimitive>(0);\r\n    public var weights(default, null):Vector<Float> = new Vector<Float>(0);\r\n\r\n    function new() {\r\n        super();\r\n    }\r\n\r\n    function load(gltf:GLTF2, mesh:TMesh):Void {\r\n        name = mesh.name;\r\n        primitives = new Vector<MeshPrimitive>(mesh.primitives.length);\r\n        for (i in 0...mesh.primitives.length) {\r\n            primitives[i] = new MeshPrimitive();\r\n            primitives[i].load(gltf, mesh.primitives[i]);\r\n        }\r\n\r\n        if (mesh.weights != null) weights = Vector.fromArrayCopy(mesh.weights);\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Mesh> {\r\n        var meshes:Vector<Mesh> = new Vector<Mesh>(raw.meshes.length);\r\n        for (i in 0...raw.meshes.length) {\r\n            meshes[i] = new Mesh();\r\n            meshes[i].index = i;\r\n        }\r\n        for (i in 0...raw.meshes.length) {\r\n            meshes[i].load(gltf, raw.meshes[i]);\r\n\r\n        }\r\n        return meshes;\r\n    }\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport String;\r\nimport String;\r\nimport assimp.format.gltf2.schema.GLTF.TMeshPrimitiveType;\r\nimport assimp.format.gltf2.schema.GLTF.TMeshPrimitive;\r\nimport haxe.ds.Vector;\r\n\r\ntypedef TAttribute = {\r\n    var name:String;\r\n    var accessor:Accessor;\r\n}\r\ntypedef TAccessorList = Array<TAttribute> ;\r\ntypedef TAccessorListAndIndex = {\r\n    var index:Int;\r\n    var list:Null<TAccessorList>;\r\n}\r\nclass TAttributes {\r\n    public var position:Null<TAccessorList>;\r\n    public var normal:Null<TAccessorList>;\r\n    public var tangent:Null<TAccessorList>;\r\n    public var texcoord:Null<TAccessorList>;\r\n    public var color:Null<TAccessorList>;\r\n    public var joint:Null<TAccessorList>;\r\n    public var jointmatrix:Null<TAccessorList>;\r\n    public var weight:Null<TAccessorList>;\r\n\r\n    public function new() {\r\n        position = new TAccessorList();\r\n        normal = new TAccessorList();\r\n        tangent = new TAccessorList();\r\n        texcoord = new TAccessorList();\r\n        color = new TAccessorList();\r\n        joint = new TAccessorList();\r\n        jointmatrix = new TAccessorList();\r\n        weight = new TAccessorList();\r\n    }\r\n}\r\n\r\nclass TTarget {\r\n    public var position:Null<TAccessorList>;\r\n    public var normal:Null<TAccessorList>;\r\n    public var tangent:Null<TAccessorList>;\r\n\r\n    public function new() {\r\n        position = new TAccessorList();\r\n        normal = new TAccessorList();\r\n        tangent = new TAccessorList();\r\n    }\r\n}\r\n@:allow(assimp.format.gltf2.types.Mesh)\r\nclass MeshPrimitive {\r\n\r\n    function getAttribVector(attr:String):TAccessorListAndIndex {\r\n        var name = attr;\r\n        var idx = 0;\r\n        if (attr.indexOf(\"_\") != -1) {\r\n            name = attr.substr(0, attr.indexOf(\"_\"));\r\n            idx = Std.parseInt(attr.substr(attr.indexOf(\"_\") + 1));\r\n        }\r\n\r\n        var aList:Null<TAccessorList> = switch(name){\r\n            case \"POSITION\": attributes.position;\r\n            case \"NORMAL\": attributes.normal;\r\n            case \"TANGENT\":attributes.tangent ;\r\n            case \"TEXCOORD\": attributes.texcoord;\r\n            case \"COLOR\":attributes.color;\r\n            case \"JOINTS\" | \"JOINT\":attributes.joint;\r\n            case \"JOINTMATRIX\":attributes.jointmatrix;\r\n            case \"WEIGHTS\" | \"WEIGHT\":attributes.weight;\r\n            default:null;\r\n        }\r\n\r\n        return {\r\n            index:idx,\r\n            list:aList\r\n        };\r\n\r\n\r\n    }\r\n\r\n    function getAttribTargetVector(targetIndex:Int, attr:String):TAccessorListAndIndex {\r\n        var target:TTarget = targets[targetIndex];\r\n        var name = attr;\r\n        var idx = 0;\r\n        if (attr.indexOf(\"_\") != -1) {\r\n            name = attr.substr(0, attr.indexOf(\"_\"));\r\n            idx = Std.parseInt(attr.substr(attr.indexOf(\"_\") + 1));\r\n        }\r\n\r\n        var aList:Null<TAccessorList> = switch(name){\r\n            case \"POSITION\":target.position;\r\n            case \"NORMAL\":target.normal;\r\n            case \"TANGENT\":target.tangent;\r\n            default:null;\r\n        }\r\n        return {\r\n            index:idx,\r\n            list:aList\r\n        };\r\n\r\n    }\r\n    public var attributes(default, null):TAttributes = null;\r\n    public var targets(default, null):Vector<TTarget> = null;\r\n\r\n    public var indices(default, null):Null<Accessor> = null;\r\n    public var material(default, null):Null<Material> = null;\r\n    public var mode(default, null):Null<TMeshPrimitiveType> = null;\r\n\r\n\r\n    function new() {\r\n\r\n    }\r\n\r\n    function load(gltf:GLTF2, primitive:TMeshPrimitive):Void {\r\n        // load the attributes\r\n        var names:Array<String> = Reflect.fields(primitive.attributes);\r\n        attributes = new TAttributes();//names.length);\r\n        for (i in 0...names.length) {\r\n            var aid:Int = Reflect.field(primitive.attributes, names[i]);\r\n            var vec:TAccessorListAndIndex = getAttribVector(names[i]);\r\n            vec.list[vec.index] = {\r\n                name: names[i],\r\n                accessor: gltf.accessors[aid]\r\n            };\r\n        }\r\n        // load the targets\r\n        if (primitive.targets != null) {\r\n            targets = new Vector<TTarget>(primitive.targets.length);//Vector<TAttribute>(targets_names.length);\r\n            for (targetIndex in 0...primitive.targets.length) {\r\n                var target = primitive.targets[targetIndex];\r\n                var targets_names:Array<String> = Reflect.fields(target);\r\n                for (i in 0...targets_names.length) {\r\n                    var aid:Int = Reflect.field(target, targets_names[i]);\r\n                    var vec:TAccessorListAndIndex = getAttribTargetVector(targetIndex, targets_names[i]);\r\n                    vec.list[vec.index] = {\r\n                        name: targets_names[i],\r\n                        accessor: gltf.accessors[aid]\r\n                    };\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        mode = primitive.mode != null ? primitive.mode : TMeshPrimitiveType.TRIANGLES;\r\n\r\n        if (primitive.indices != null) indices = gltf.accessors[primitive.indices];\r\n        if (primitive.material != null) material = gltf.materials[primitive.material];\r\n    }\r\n\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TNode;\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Node extends Ref {\r\n    public var name(default, null):Null<String> = null;\r\n    public var camera(default, null):Null<Camera> = null;\r\n    public var children(default, null):Vector<Node> = new Vector<Node>(0);\r\n    public var skin(default, null):Null<Skin> = null;\r\n    public var matrix(default, null):Null<Vector<Float>> = null;\r\n    public var mesh(default, null):Null<Mesh> = null;\r\n    public var rotation(default, null):Null<Vector<Float>> = null;\r\n    public var scale(default, null):Null<Vector<Float>> = null;\r\n    public var translation(default, null):Null<Vector<Float>> = null;\r\n    public var weights(default, null):Null<Vector<Float>> = null;\r\n\r\n    function new() {\r\n        super();\r\n    }\r\n\r\n    function load(gltf:GLTF2, node:TNode, existingNodes:Vector<Node>):Void {\r\n        name = node.name;\r\n        if (node.camera != null) camera = gltf.cameras[node.camera];\r\n        if (node.children != null) {\r\n            children = new Vector<Node>(node.children.length);\r\n            for (i in 0...node.children.length) {\r\n                children[i] = existingNodes[node.children[i]];\r\n            }\r\n        }\r\n        if (node.skin != null) skin = gltf.skins[node.skin];\r\n        if (node.matrix != null) matrix = Vector.fromArrayCopy(node.matrix);\r\n        if (node.mesh != null) mesh = gltf.meshes[node.mesh];\r\n        if (node.rotation != null) rotation = Vector.fromArrayCopy(node.rotation);\r\n        if (node.scale != null) scale = Vector.fromArrayCopy(node.scale);\r\n        if (node.translation != null) translation = Vector.fromArrayCopy(node.translation);\r\n        if (node.weights != null) weights = Vector.fromArrayCopy(node.weights);\r\n    }\r\n\r\n    static function preloadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Node> {\r\n        var existingNodes:Vector<Node> = new Vector<Node>(raw.nodes.length);\r\n        for (i in 0...raw.nodes.length) {\r\n            existingNodes[i] = new Node();\r\n            existingNodes[i].index = i;\r\n        }\r\n        return existingNodes;\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Node> {\r\n        for (i in 0...raw.nodes.length) {\r\n            gltf.nodes[i].load(gltf, raw.nodes[i], gltf.nodes);\r\n            gltf.nodes[i].index = i;\r\n        }\r\n        return gltf.nodes;\r\n    }\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TSampler;\r\nimport assimp.format.gltf2.schema.GLTF.TWrapMode;\r\nimport assimp.format.gltf2.schema.GLTF.TMinFilter;\r\nimport assimp.format.gltf2.schema.GLTF.TMagFilter;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Sampler extends Ref {\r\n    public var name(default, null):String;\r\n    public var magFilter(default, null):TMagFilter;\r\n    public var minFilter(default, null):TMinFilter;\r\n    public var wrapS(default, null):TWrapMode;\r\n    public var wrapT(default, null):TWrapMode;\r\n\r\n    function new() {\r\n        super();\r\n    }\r\n\r\n    function load(gltf:GLTF2, sampler:TSampler):Void {\r\n        this.name = sampler.name;\r\n        this.magFilter = sampler.magFilter;\r\n        this.minFilter = sampler.minFilter;\r\n        this.wrapS = sampler.wrapS;\r\n        this.wrapT = sampler.wrapT;\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Sampler> {\r\n        var samplers:Vector<Sampler> = new Vector<Sampler>(raw.samplers.length);\r\n        for (i in 0...raw.samplers.length) {\r\n            samplers[i] = new Sampler();\r\n            samplers[i].index = i;\r\n        }\r\n        for (i in 0...raw.samplers.length) {\r\n            samplers[i].load(gltf, raw.samplers[i]);\r\n        }\r\n        return samplers;\r\n    }\r\n}","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TScene;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Scene {\r\n    public var name(default, null):Null<String> = null;\r\n    public var nodes(default, null):Vector<Node> = new Vector<Node>(0);\r\n\r\n    function new() {}\r\n\r\n    function load(gltf:GLTF2, scene:TScene):Void {\r\n        name = scene.name;\r\n        nodes = new Vector<Node>(scene.nodes.length);\r\n        for (i in 0...scene.nodes.length) {\r\n            nodes[i] = gltf.nodes[scene.nodes[i]];\r\n        }\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Scene> {\r\n        var scenes:Vector<Scene> = new Vector<Scene>(raw.scenes.length);\r\n        for (i in 0...raw.scenes.length) {\r\n            scenes[i] = new Scene();\r\n        }\r\n        for (i in 0...raw.scenes.length) {\r\n            scenes[i].load(gltf, raw.scenes[i]);\r\n        }\r\n        return scenes;\r\n    }\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TSkin;\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport haxe.ds.Vector;\r\nimport assimp.format.gltf2.types.Accessor;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Skin {\r\n    public var skeleton(default, null):Node;\r\n    public var joints(default, null):Vector<Node>;\r\n    public var inverseBindMatrices(default, null):Vector<Vector<Float>>;\r\n\r\n    function new() {}\r\n\r\n    function load(gltf:GLTF2, skin:TSkin):Void {\r\n        skeleton = gltf.nodes[skin.skeleton];\r\n\r\n        joints = new Vector<Node>(skin.joints.length);\r\n        for (i in 0...skin.joints.length) {\r\n            joints[i] = gltf.nodes[skin.joints[i]];\r\n        }\r\n\r\n        inverseBindMatrices = new Vector<Vector<Float>>(skin.joints.length);\r\n        var accessor:Accessor = gltf.accessors[skin.inverseBindMatrices];\r\n        var matrices:Vector<Float> = accessor.getFloats();\r\n        for (i in 0...skin.joints.length) {\r\n            inverseBindMatrices[i] = new Vector<Float>(16);\r\n            for (j in 0...16) {\r\n                inverseBindMatrices[i][j] = matrices[i * 16 + j];\r\n            }\r\n        }\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Skin> {\r\n        var skins:Vector<Skin> = new Vector<Skin>(raw.skins.length);\r\n        for (i in 0...raw.skins.length) {\r\n            var skin:Skin = new Skin();\r\n            skin.load(gltf, raw.skins[i]);\r\n            skins[i] = skin;\r\n        }\r\n        return skins;\r\n    }\r\n}\r\n","package assimp.format.gltf2.types;\r\n\r\nimport assimp.format.gltf2.schema.GLTF.TGlTf;\r\nimport assimp.format.gltf2.schema.GLTF.TTexture;\r\nimport assimp.format.gltf2.types.Image;\r\nimport assimp.format.gltf2.types.Sampler;\r\nimport haxe.ds.Vector;\r\n\r\n@:allow(assimp.format.gltf2.GLTF2)\r\nclass Texture {\r\n    public var name(default, null):String = null;\r\n    public var image(default, null):Image = null;\r\n    public var sampler(default, null):Sampler = null;\r\n\r\n    function new() {}\r\n\r\n    function load(gltf:GLTF2, texture:TTexture):Void {\r\n        this.name = texture.name;\r\n        if (texture.source != null) this.image = gltf.images[texture.source];\r\n        if (texture.sampler != null) this.sampler = gltf.samplers[texture.sampler];\r\n    }\r\n\r\n    static function loadFromRaw(gltf:GLTF2, raw:TGlTf):Vector<Texture> {\r\n        var textures:Vector<Texture> = new Vector<Texture>(raw.textures.length);\r\n        for (i in 0...raw.textures.length) {\r\n            textures[i] = new Texture();\r\n        }\r\n        for (i in 0...raw.textures.length) {\r\n            textures[i].load(gltf, raw.textures[i]);\r\n        }\r\n        return textures;\r\n    }\r\n}","package assimp.postProcess;\r\nimport Lambda;\r\nimport assimp.Types;\r\nimport Lambda;\r\nusing assimp.StringUtil;\r\nimport assimp.format.Anim.AiNodeAnim;\r\nimport assimp.format.Camera.AiCamera;\r\nimport assimp.format.Defs;\r\nimport assimp.format.Defs;\r\nimport assimp.format.Light.AiLight;\r\nimport assimp.format.Light.AiLightSourceType;\r\nimport assimp.format.Material.AiTexture;\r\nimport assimp.format.Material.AiMaterial;\r\nimport assimp.format.Anim.AiAnimation;\r\nimport assimp.format.Mesh;\r\nimport assimp.format.Mesh.AiPrimitiveType;\r\nimport assimp.format.Mesh.AiMesh;\r\nimport assimp.format.Scene;\r\nimport assimp.Assimp;\r\nimport assimp.format.Scene.AiScene;\r\nimport assimp.AiPostProcessStep as Pps;\r\nimport assimp.format.Material.AiShadingMode as Sm;\r\nclass ValidateDSProcess extends BaseProcess {\r\n    public function new() {\r\n        super();\r\n    }\r\n\r\n    var scene:AiScene;\r\n\r\n    /** Report a validation error. This will throw an exception, control won't return.\r\n     *  @param msg Format string for sprintf().*/\r\n    function reportError(msg:String, ?args:Array<Any>) {\r\n        throw (\"Validation failed: $msg $args\");\r\n\r\n    }\r\n    /** Report a validation warning. This won't throw an exception, control will return to the caller.\r\n     * @param msg Format string for sprintf().*/\r\n    function reportWarning(msg:String, ? args:Array<Any>) {\r\n        trace(\"Validation warning: $msg $args\");\r\n    }\r\n\r\n    /** Returns whether the processing step is present in the given flag field. */\r\n    override public function isActive(flags:Int) return flags & Pps.ValidateDataStructure != 0;\r\n\r\n/** Executes the post processing step on the given imported data.   */\r\n    override public function execute(scene:AiScene) {\r\n        this.scene = scene;\r\n        trace(\"ValidateDataStructureProcess begin\");\r\n        // validate the node graph of the scene\r\n        validateAiNode(scene.rootNode);\r\n        // validate all meshes\r\n        if (scene.numMeshes != 0)\r\n            doValidation(scene.meshes, scene.numMeshes, \"meshes\", \"numMeshes\");\r\n        else if (scene.flags & Scene.AI_SCENE_FLAGS_INCOMPLETE == 0)\r\n            reportError(\"AiScene.numMeshes is 0. At least one mesh must be there\");\r\n        else if (!Lambda.empty(scene.meshes))\r\n            reportError(\"AiScene.meshes is not empty although there are no meshes\");\r\n\r\n        // validate all animations\r\n        if (scene.numAnimations != 0)\r\n            doValidation(scene.animations, scene.numAnimations, \"animations\", \"numAnimations\");\r\n        else if (!Lambda.empty(scene.animations))\r\n            reportError(\"AiScene.animations is not empty although there are no animations\");\r\n\r\n        // validate all cameras\r\n        if (scene.numCameras != 0)\r\n            doValidationWithNameCheck(scene.cameras, scene.numCameras, \"cameras\", \"numCameras\");\r\n        else if (!Lambda.empty(scene.cameras))\r\n            reportError(\"AiScene.cameras is not empty although there are no cameras\");\r\n\r\n        // validate all lights\r\n        if (scene.numLights > 0)\r\n            doValidationWithNameCheck(scene.lights, scene.numLights, \"lights\", \"numLights\");\r\n        else if (!Lambda.empty(scene.lights))\r\n            reportError(\"AiScene.lights is not empty although there are no lights\");\r\n\r\n        // validate all textures\r\n        if (scene.numTextures > 0) {\r\n            doValidation(Lambda.array(scene.textures), scene.numTextures, \"textures\", \"numTextures\");\r\n        }\r\n\r\n        else if (!Lambda.empty(scene.textures))\r\n            reportError(\"AiScene.textures is not empty although there are no textures\");\r\n\r\n        // validate all materials\r\n        if (scene.numMaterials > 0)\r\n            doValidation(scene.materials, scene.numMaterials, \"materials\", \"numMaterials\");\r\n        else if (!Lambda.empty(scene.materials))\r\n            reportError(\"AiScene.materials is not empty although there are no materials\");\r\n\r\n        trace(\"ValidateDataStructureProcess end\");\r\n    }\r\n\r\n    /** Validates a mesh\r\n     *  @param mesh Input mesh*/\r\n    function validateAiMesh(mesh:AiMesh) {\r\n        // validate the material index of the mesh\r\n        if (scene.numMaterials != 0 && mesh.materialIndex >= scene.numMaterials)\r\n            reportError(\"AiMesh.materialIndex is invalid (value: ${mesh.materialIndex} maximum: ${scene.numMaterials - 1})\");\r\n\r\n        validateString(mesh.name);\r\n\r\n        for (i in 0 ... mesh.numFaces) {\r\n            var face = mesh.faces[i];\r\n            if (mesh.primitiveTypes != 0)\r\n                switch (face.numIndices) {\r\n                    case 0 : reportError(\"AiMesh.faces[$i].numIndices is 0\");\r\n                    case 1 :{\r\n                        if (mesh.primitiveTypes & AiPrimitiveType.POINT == 0)\r\n                            reportError(\"AiMesh.faces[$i] is a POINT but AiMesh.primitiveTypes does not report the POINT flag\");\r\n                    }\r\n                    case 2 : {\r\n                        if (mesh.primitiveTypes & AiPrimitiveType.LINE == 0)\r\n                            reportError(\"AiMesh.faces[$i] is a LINE but AiMesh.primitiveTypes does not report the LINE flag\");\r\n                    }\r\n                    case 3 :{\r\n                        if (mesh.primitiveTypes & AiPrimitiveType.TRIANGLE == 0)\r\n                            reportError(\"AiMesh.faces[$i] is a TRIANGLE but AiMesh.primitiveTypes does not report the TRIANGLE flag\");\r\n                    }\r\n                    default: {\r\n                        if (mesh.primitiveTypes & AiPrimitiveType.POLYGON == 0)\r\n                            reportError(\"AiMesh.faces[$i] is a POLYGON but AiMesh.primitiveTypes does not report the POLYGON flag\");\r\n                    }\r\n                }\r\n            if (face.numIndices == 0) reportError(\"AiMesh.faces[$i] is empty\");\r\n        }\r\n        // positions must always be there ...\r\n        if (mesh.numVertices == 0 || (Lambda.empty(mesh.vertices) && scene.flags == 0))\r\n            reportError(\"The mesh contains no vertices\");\r\n        if (mesh.numVertices > Mesh.AI_MAX_VERTICES)\r\n            reportError(\"Mesh has too many vertices: ${mesh.numVertices}, but the limit is $AI_MAX_VERTICES\");\r\n        if (mesh.numFaces > Mesh.AI_MAX_FACES)\r\n            reportError(\"Mesh has too many faces: ${mesh.numFaces}, but the limit is $AI_MAX_FACES\");\r\n        // if tangents are there there must also be bitangent vectors ...\r\n        if ((!Lambda.empty(mesh.tangents)) != (!Lambda.empty(mesh.bitangents)))\r\n            reportError(\"If there are tangents, bitangent vectors must be present as well\");\r\n        // faces, too\r\n        if (mesh.numFaces == 0 || (Lambda.empty(mesh.faces) && scene.flags == 0))\r\n            reportError(\"Mesh contains no faces\");\r\n        // now check whether the face indexing layout is correct: unique vertices, pseudo-indexed.\r\n        var abRefList = [for (i in 0...mesh.numVertices) false];//BooleanArray(mesh.numVertices);\r\n        for (i in 0 ... mesh.numFaces) {\r\n            var face = mesh.faces[i];\r\n            if (face.numIndices > Mesh.AI_MAX_FACE_INDICES)\r\n                reportError(\"Face $i has too many faces: ${face.size}, but the limit is $AI_MAX_FACE_INDICES\");\r\n            for (a in 0 ... face.numIndices) {\r\n                if (face.indices[a] >= mesh.numVertices) reportError(\"AiMesh.faces[$i][$a] is out of range\");\r\n                abRefList[face.indices[a]] = true;\r\n            }\r\n        }\r\n        // check whether there are vertices that aren't referenced by a face\r\n        for (i in 0 ... mesh.numVertices) if (!abRefList[i]) reportWarning(\"There are unreferenced vertices\");\r\n\r\n        // texture channel 2 may not be set if channel 1 is zero ...\r\n        {\r\n            var i = 0;\r\n            while (i < Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS) {\r\n                if (!mesh.hasTextureCoords(i)) break;\r\n                ++i;\r\n            }\r\n            while (i < Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS) {\r\n                if (mesh.hasTextureCoords(i))\r\n                    reportError(\"Texture coordinate channel $i exists although the previous channel didn't exist.\");\r\n                ++i;\r\n            }\r\n        }\r\n        // the same for the vertex colors\r\n        {\r\n\r\n\r\n            var i = 0;\r\n            while (i < Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {\r\n                if (!mesh.hasVertexColors(i)) break;\r\n                ++i;\r\n            }\r\n            while (i < Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {\r\n                if (mesh.hasVertexColors(i))\r\n                    reportError(\"Vertex color channel $i is exists although the previous channel didn't exist.\");\r\n                ++i;\r\n            }\r\n        }\r\n        // now validate all bones\r\n        if (mesh.numBones > 0) {\r\n            if (Lambda.empty(mesh.bones))\r\n                reportError(\"AiMesh.bones is empty (AiMesh.numBones is ${mesh.numBones})\");\r\n            var afSum = [for (i in 0...mesh.numVertices) 0.0];// FloatArray(mesh.numVertices);\r\n            // check whether there are duplicate bone names\r\n            for (i in 0 ... mesh.numBones) {\r\n                var bone = mesh.bones[i];\r\n                if (bone.numWeights > Mesh.AI_MAX_BONE_WEIGHTS)\r\n                    reportError(\"Bone $i has too many weights: ${bone.numWeights}, but the limit is $Mesh.AI_MAX_BONE_WEIGHTS\");\r\n                if (i >= mesh.bones.length)\r\n                    reportError(\"AiMesh.bones[$i] doesn't exist (AiMesh.numBones is ${mesh.numBones})\");\r\n                validateAiBone(mesh, mesh.bones[i], afSum);\r\n                for (a in i + 1 ... mesh.numBones)\r\n                    if (mesh.bones[i].name == mesh.bones[a].name)\r\n                        reportError(\"AiMesh.bones[$i] has the same name as AiMesh.bones[$a]\");\r\n            }\r\n            // check whether all bone weights for a vertex sum to 1.0 ...\r\n            for (i in 0 ... mesh.numVertices)\r\n                if (afSum[i] != 0 && (afSum[i] <= 0.94 || afSum[i] >= 1.05))\r\n                    reportWarning(\"AiMesh.vertices[$i]: bone weight sum != 1f (sum is ${afSum[i]})\");\r\n        } else if (!Lambda.empty(mesh.bones))\r\n            reportError(\"AiMesh.bones is no empty although there are no bones\");\r\n    }\r\n\r\n    /** Validates a bone\r\n     *  @param mesh Input mesh\r\n     *  @param bone Input bone  */\r\n    public function validateAiBone(mesh:AiMesh, bone:AiBone, afSum:Array<Float>) {\r\n        validateString(bone.name);\r\n        if (bone.numWeights == 0) reportError(\"aiBone::mNumWeights is zero\");\r\n        // check whether all vertices affected by this bone are valid\r\n        for (i in 0 ... bone.numWeights) {\r\n            if (bone.weights[i].vertexId >= mesh.numVertices)\r\n                reportError(\"AiBone.weights[$i].vertexId is out of range\");\r\n            else if (bone.weights[i].weight == 0 || bone.weights[i].weight > 1)\r\n                reportWarning(\"AiBone.weights[$i].weight has an invalid value\");\r\n            afSum[bone.weights[i].vertexId] += bone.weights[i].weight;\r\n        }\r\n    }\r\n\r\n    /** Validates an animation\r\n     *  @param animation Input animation*/\r\n    public function validateAiAnimation(animation:AiAnimation) {\r\n        validateString(animation.name);\r\n        // validate all materials\r\n        if (animation.numChannels > 0) {\r\n            if (Lambda.empty(animation.channels))\r\n                reportError(\"AiAnimation.channels is empty (AiAnimation.numChannels is ${animation.numChannels})\");\r\n            for (i in 0 ... animation.numChannels) {\r\n                if (i >= animation.channels.length)\r\n                    reportError(\"AiAnimation.channels[$i] doesn't exist (AiAnimation.numChannels is ${animation.numChannels})\");\r\n                validateChannels(animation, animation.channels[i]);\r\n            }\r\n        } else reportError(\"aiAnimation::mNumChannels is 0. At least one node animation channel must be there.\");\r\n    }\r\n\r\n    /** Validates a material\r\n     *  @param material Input material*/\r\n    public function validateAiMaterial(material:AiMaterial) {\r\n        // make some more specific tests\r\n        var temp = 0;\r\n        if (material.shadingModel != null) {\r\n            switch (material.shadingModel) {\r\n                case Sm.blinn, Sm.cookTorrance, Sm.phong : {\r\n                    if (material.shininess == null)\r\n                        reportWarning(\"A specular shading model is specified but there is no Shininess key\");\r\n\r\n                    if (material.shininessStrength != null) {\r\n                        if (material.shininessStrength == 0)\r\n                            reportWarning(\"A specular shading model is specified but the value of the Shininess Strenght key is 0\");\r\n                    }\r\n                }\r\n                default:{\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        if (material.opacity != null) {\r\n            if (material.opacity == 0 || material.opacity > 1.01)\r\n                reportWarning(\"Invalid opacity value (must be 0 < opacity < 1f)\");\r\n        }\r\n\r\n        // Check whether there are invalid texture keys\r\n        // TODO: that's a relict of the past, where texture type and index were baked\r\n        // into the material string ... we could do that in one single pass.\r\n        searchForInvalidTextures(material) ;\r\n    }\r\n\r\n    /** Search the material data structure for invalid or corrupt texture keys.\r\n     *  @param material Input material  */\r\n    function searchForInvalidTextures(material:AiMaterial) {\r\n        var index = 0;\r\n        // Now check whether all UV indices are valid ...\r\n        var noSpecified = true;\r\n        for (texture in material.textures)\r\n            if (texture.uvwsrc != null) {\r\n                var it = texture.uvwsrc;\r\n                noSpecified = false;\r\n                // Ignore UV indices for texture channels that are not there ...\r\n                // Get the value\r\n                index = it;\r\n                // Check whether there is a mesh using this material which has not enough UV channels ...\r\n                for (a in 0 ... scene.numMeshes) {\r\n                    var mesh = scene.meshes[a];\r\n                    if (mesh.materialIndex == scene.materials.indexOf(material)) {\r\n                        var channels = 0;\r\n                        while (mesh.hasTextureCoords(channels)) ++channels;\r\n                        if (it >= channels)\r\n                            reportWarning(\"Invalid UV index: $it (key uvwsrc). Mesh $a has only $channels UV channels\");\r\n                    }\r\n                }\r\n            }\r\n        if (noSpecified)\r\n            for (a in 0 ... scene.numMeshes) { // Assume that all textures are using the first UV channel\r\n                var mesh = scene.meshes[a];\r\n                if (mesh.materialIndex == index && Lambda.empty(mesh.textureCoords[0]))\r\n                    // This is a special case ... it could be that the original mesh format intended the use of a special mapping here.\r\n                    reportWarning(\"UV-mapped texture, but there are no UV coords\");\r\n            }\r\n    }\r\n\r\n    /** Validates a texture\r\n     *  @param texture Input texture*/\r\n    public function validateAiTexture(texture:AiTexture) {\r\n        // the data section may NEVER be NULL\r\n        if (null == (texture.pcData))\r\n            reportError(\"AiTexture.pcData is empty\");\r\n        if (texture.height > 0 && texture.width == 0)\r\n            reportError(\"AiTexture.width is zero (AiTexture.height is ${texture.height}, uncompressed texture)\");\r\n        else {\r\n            if (texture.width == 0)\r\n                reportError(\"AiTexture.width is zero (compressed texture)\");\r\n            else if ('.' == texture.achFormatHint.charAt(0))\r\n                reportWarning(\"AiTexture.achFormatHint should contain a file extension  without a leading dot (format hint: ${texture.achFormatHint}).\");\r\n        }\r\n        if (texture.achFormatHint.toLowerCase() != texture.achFormatHint)\r\n            reportError(\"AiTexture.achFormatHint contains non-lowercase letters\");\r\n    }\r\n\r\n    /** Validates a light source\r\n     *  @param light Input light\r\n     */\r\n    public function validateAiLight(light:AiLight) {\r\n        if (light.type == AiLightSourceType.UNDEFINED)\r\n            reportWarning(\"AiLight.type is undefined\");\r\n        if (light.attenuationConstant == 0 && light.attenuationLinear == 0 && light.attenuationQuadratic == 0)\r\n            reportWarning(\"AiLight.attenuation* - all are zero\");\r\n        if (light.angleInnerCone > light.angleOuterCone)\r\n            reportError(\"AiLight.angleInnerCone is larger than AiLight.angleOuterCone\");\r\n        if (Defs.isBlack(light.colorDiffuse) && Defs.isBlack(light.colorAmbient) && Defs.isBlack(light.colorSpecular))\r\n            reportWarning(\"AiLight.color* - all are black and won't have any influence\");\r\n    }\r\n\r\n    /** Validates a camera\r\n     *  @param camera Input camera*/\r\n    public function validateAiCamera(camera:AiCamera) {\r\n        if (camera.clipPlaneFar <= camera.clipPlaneNear)\r\n            reportError(\"AiCamera.clipPlaneFar must be >= AiCamera.clipPlaneNear\");\r\n        // FIX: there are many 3ds files with invalid FOVs. No reason to reject them at all ... a warning is appropriate.\r\n        if (camera.horizontalFOV == 0 || camera.horizontalFOV >= Math.PI)\r\n            reportWarning(\"${camera.horizontalFOV} is not a valid value for AiCamera.horizontalFOV\");\r\n    }\r\n\r\n    /** Validates a bone animation channel\r\n     *  @param animation Animation channel.\r\n     *  @param boneAnim Input bone animation */\r\n    public function validateChannels(animation:AiAnimation, boneAnim:AiNodeAnim) {\r\n        validateString(boneAnim.nodeName);\r\n        if (boneAnim.numPositionKeys == 0 && Lambda.empty(boneAnim.scalingKeys) && boneAnim.numRotationKeys == 0)\r\n            reportError(\"Empty node animation channel\");\r\n        // otherwise check whether one of the keys exceeds the total duration of the animation\r\n        if (boneAnim.numPositionKeys > 0) {\r\n            if (Lambda.empty(boneAnim.positionKeys))\r\n                reportError(\"AiNodeAnim.positionKeys is empty (AiNodeAnim.numPositionKeys is ${boneAnim.numPositionKeys})\");\r\n            var last = -10e10;\r\n            for (i in 0 ... boneAnim.numPositionKeys) {\r\n                /*  ScenePreprocessor will compute the duration if still the default value\r\n                    (Aramis) Add small epsilon, comparison tended to fail if max_time == duration, seems to be due\r\n                    the compilers register usage/width. */\r\n                if (animation.duration > 0 && boneAnim.positionKeys[i].time > animation.duration + Defs.epsilon) {\r\n                    var t = boneAnim.positionKeys[i].time;\r\n                    var d = \"%.5f\".formatString(animation.duration);\r\n                    reportError(\"AiNodeAnim.positionKeys[$i].time ($t) is larger than AiAnimation.duration (which is $d)\");\r\n                }\r\n                if (i > 0 && boneAnim.positionKeys[i].time <= last) {\r\n                    var t = \"%.5f\".formatString(boneAnim.positionKeys[i].time);\r\n                    var l = \"%.5f\".formatString(last);\r\n                    reportWarning(\"AiNodeAnim.positionKeys[$i].time ($t) is smaller than AiAnimation.positionKeys[${i - 1}] (which is $l)\");\r\n                }\r\n                last = boneAnim.positionKeys[i].time;\r\n            }\r\n        }\r\n        // rotation keys\r\n        if (boneAnim.numRotationKeys > 0) {\r\n            if (Lambda.empty(boneAnim.rotationKeys))\r\n                reportError(\"AiNodeAnim.rotationKeys is empty (AiNodeAnim.numRotationKeys is ${boneAnim.numRotationKeys})\");\r\n            var last = -10e10;\r\n            for (i in 0 ... boneAnim.numRotationKeys) {\r\n                if (animation.duration > 0 && boneAnim.rotationKeys[i].time > animation.duration +  Defs.epsilon) {\r\n                    var t = \"%.5f\".formatString(boneAnim.rotationKeys[i].time);\r\n                    var d = \"%.5f\".formatString(animation.duration);\r\n                    reportError(\"aiNodeAnim::mRotationKeys[$i].time ($t) is larger than AiAnimation.duration (which is $d)\");\r\n                }\r\n                if (i > 0 && boneAnim.rotationKeys[i].time <= last) {\r\n                    var t = \"%.5f\".formatString(boneAnim.rotationKeys[i].time);\r\n                    var l = \"%.5f\".formatString(last);\r\n                    reportWarning(\"AiNodeAnim.rotationKeys[$i].time ($t) is smaller than AiAnimation.rotationKeys[${i - 1}] (which is $l)\");\r\n                }\r\n                last = boneAnim.rotationKeys[i].time;\r\n            }\r\n        }\r\n        // scaling keys\r\n        if (boneAnim.numScalingKeys > 0) {\r\n            if (Lambda.empty(boneAnim.scalingKeys))\r\n                reportError(\"AiNodeAnim.scalingKeys is empty (AiNodeAnim.numScalingKeys is ${boneAnim.numScalingKeys})\");\r\n            var last = -10e10;\r\n            for (i in 0 ... boneAnim.numScalingKeys) {\r\n                if (animation.duration > 0 && boneAnim.scalingKeys[i].time > animation.duration +  Defs.epsilon) {\r\n                    var t = boneAnim.scalingKeys[i].time;\r\n                    var d = animation.duration;\r\n                    reportError(\"AiNodeAnim.scalingKeys[$i].time ($t) is larger than AiAnimation.duration (which is $d)\");\r\n                }\r\n                if (i > 0 && boneAnim.scalingKeys[i].time <= last) {\r\n                    var t = \"%.5f\".formatString(boneAnim.scalingKeys[i].time);\r\n                    var l = \"%.5f\".formatString(last);\r\n                    reportWarning(\"AiNodeAnim.scalingKeys[$i].time ($t) is smaller than AiAnimation.scalingKeys[${i - 1}] (which is $l)\");\r\n                }\r\n                last = boneAnim.scalingKeys[i].time;\r\n            }\r\n        }\r\n        if (boneAnim.numScalingKeys == 0 && boneAnim.numRotationKeys == 0 && boneAnim.numPositionKeys == 0)\r\n            reportError(\"A node animation channel must have at least one subtrack\");\r\n    }\r\n\r\n    /** Validates a node and all of its subnodes\r\n     *  @param node Input node*/\r\n    public function validateAiNode(node:AiNode) {\r\n        if (node != scene.rootNode && node.parent == null)\r\n            reportError(\"A node has no valid parent (AiNode.parent is null)\");\r\n        validateString(node.name);\r\n        // validate all meshes\r\n        if (node.numMeshes > 0) {\r\n            if (Lambda.empty(node.meshes))\r\n                reportError(\"AiNode.meshes is empty (AiNode.numMeshes is ${node.numMeshes})\");\r\n            var abHadMesh = [for (i in 0...scene.numMeshes) false];\r\n            for (i in 0 ... node.numMeshes) {\r\n                if (node.meshes[i] >= scene.numMeshes)\r\n                    reportError(\"AiNode.meshes[${node.meshes[i]}] is out of range (maximum is ${scene.numMeshes - 1})\");\r\n                if (abHadMesh[node.meshes[i]])\r\n                    reportError(\"AiNode.meshes[$i] is already referenced by this node (value: ${node.meshes[i]})\");\r\n                abHadMesh[node.meshes[i]] = true;\r\n            }\r\n        }\r\n        if (node.numChildren > 0) {\r\n            if (Lambda.empty(node.children))\r\n                reportError(\"AiNode.children is empty (AiNode.numChildren is ${node.numChildren})\");\r\n            for (i in 0 ... node.numChildren)\r\n                validateAiNode(node.children[i]);\r\n        }\r\n    }\r\n\r\n    /** Validates a string\r\n     *  @param string Input string*/\r\n    public function validateString(string:String) {\r\n        if (string.length > Types.MAXLEN)\r\n            reportError(\"String.length is too large (${string.length}, maximum is $MAXLEN)\");\r\n        if (string.indexOf('\\u0000') != -1)\r\n            reportError(\"String data is invalid: it contains the terminal zero\");\r\n    }\r\n\r\n    /** template to validate one of the AiScene::XXX arrays    */\r\n    public function doValidation(array:Array<Dynamic>, size:Int, firstName:String, secondName:String) {\r\n        // validate all entries\r\n        if (size > 0) {\r\n            if (Lambda.empty(array))\r\n                reportError(\"AiScene.$firstName is empty (AiScene.$secondName is $size)\");\r\n            for (i in 0 ... size) {\r\n                var element = array[i];\r\n                if (Std.is(element, AiMesh)) validateAiMesh(cast element);\r\n                if (Std.is(element, AiAnimation)) validateAiAnimation(cast element);\r\n                if (Std.is(element, AiCamera)) validateAiCamera(cast element);\r\n                if (Std.is(element, AiLight)) validateAiLight(cast element);\r\n                if (Std.is(element, AiTexture)) validateAiTexture(cast element);\r\n                if (Std.is(element, AiMaterial)) validateAiMesh(cast element);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** extended version: checks whether T.name occurs twice   */\r\n    public function doValidationEx(array:Array<Dynamic>, size:Int, firstName:String, secondName:String) {\r\n        // validate all entries\r\n        if (size > 0) {\r\n            if (Lambda.empty(array))\r\n                reportError(\"AiScene.$firstName is empty (AiScene.$secondName is $size)\");\r\n            for (i in 0 ... size) {\r\n                var element = array[i];\r\n                if (Std.is(element, AiMesh)) validateAiMesh(cast element);\r\n                if (Std.is(element, AiAnimation)) validateAiAnimation(cast element);\r\n                if (Std.is(element, AiCamera)) validateAiCamera(cast element);\r\n                if (Std.is(element, AiLight)) validateAiLight(cast element);\r\n                if (Std.is(element, AiTexture)) validateAiTexture(cast element);\r\n                if (Std.is(element, AiMaterial)) validateAiMesh(cast element);\r\n\r\n                // check whether there are duplicate names\r\n///@Suppress(\"UNCHECKED_CAST\")\r\n                for (a in i + 1 ... size) {\r\n                    var nameI = Reflect.field(element, \"name\");\r\n                    var elementA = array[a] ;\r\n                    var nameA = Reflect.field(elementA, \"name\");\r\n                    if (nameI == nameA)\r\n                        reportError(\"AiScene.$firstName[$i] has the same name as AiScene.$secondName[$a]\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** extension to the first template which does also search the nodegraph for an item with the same name */\r\n    public function doValidationWithNameCheck(array:Array<Dynamic>, size:Int, firstName:String, secondName:String) {\r\n        // validate all entries\r\n        doValidationEx(array, size, firstName, secondName);\r\n        for (i in 0 ... size) {\r\n            var element = array[i];\r\n            var name = Reflect.field(element, \"name\");\r\n            var res = hasNameMatch(name, scene.rootNode);\r\n            if (res == 0)\r\n                reportError(\"AiScene$firstName[$i] has no corresponding node in the scene graph ($name)\");\r\n            else if (1 != res)\r\n                reportError(\"AiScene.$firstName[$i]: there are more than one nodes with $name as name\");\r\n        }\r\n    }\r\n\r\n    function hasNameMatch(sIn:String, node:AiNode):Int {\r\n        return (if (node.name == sIn) 1 else 0) + Lambda.fold(node.children, function(it, sum) return hasNameMatch(sIn, it) + sum, 0);\r\n    }\r\n\r\n}\r\n","package example;\r\nimport glm.Vec2;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Quat;\r\nimport glm.Vec2;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.Canvas;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.Loader;\r\nimport minko.geometry.CubeGeometry;\r\nimport minko.geometry.Geometry;\r\nimport minko.geometry.QuadGeometry;\r\nimport minko.geometry.SphereGeometry;\r\nimport minko.material.BasicMaterial;\r\nimport minko.render.Effect;\r\nimport minko.render.Texture;\r\nimport minko.scene.Layout.BuiltinLayout;\r\nimport minko.scene.Node;\r\nimport minko.utils.MathUtil;\r\nimport minko.WebCanvas;\r\nclass ExampleLightScattering {\r\n    public function new() {\r\n        init();\r\n    }\r\n\r\n    private function createRandomCube(geom:Geometry, effect:Effect) {\r\n        var r = MathUtil.sphericalRand(1.0);\r\n\r\n        var material = BasicMaterial.create();\r\n        material.diffuseColor =  MathUtil.vec3_vec4((r + 1.0) * .5, 1.0 ) ;\r\n\r\n        var node = Node.create()\r\n        .addComponent(Transform.createbyMatrix4(GLM.translate(r * 50.0,  new Mat4()) * GLM.scale(new Vec3(10.0, 10, 10), new Mat4())))\r\n        .addComponent(Surface.create(geom, material, effect));\r\n\r\n        return node;\r\n    }\r\n\r\n    public function init() {\r\n\r\n        var canvas = WebCanvas.create(\"Minko Example - Light Scattering\", 1024, 768);\r\n        var sceneManager = SceneManager.create(canvas);\r\n        var root = Node.create(\"root\");\r\n        var assets = sceneManager.assets;\r\n        var context = canvas.context;\r\n\r\n        root.addComponent(sceneManager) ;\r\n\r\n        context.errorsEnabled = (true);\r\n\r\n        // setup assets\r\n        assets.loader\r\n        .queue(\"effect/LightScattering/EmissionMap.effect\")\r\n        .queue(\"effect/LightScattering/LightScattering.effect\")\r\n        .queue(\"effect/Basic.effect\");\r\n\r\n        assets.setGeometry(\"cube\", CubeGeometry.create(context));\r\n\r\n        // standard\r\n        var renderer = Renderer.create();\r\n        renderer.layoutMask = (renderer.layoutMask & ~BuiltinLayout.DEBUG_ONLY);\r\n        renderer.backgroundColor = (0x23097aff);\r\n\r\n        // forward\r\n        var fwdRenderer = Renderer.create();\r\n        var fwdTarget = Texture.create(context, MathUtil.clp2(canvas.width), MathUtil.clp2(canvas.height), false, true);\r\n        fwdTarget.upload();\r\n\r\n        // post-processing\r\n        var ppRenderer = Renderer.create();\r\n        var ppScene = Node.create().addComponent(ppRenderer);\r\n        var ppTarget = Texture.create(context, MathUtil.clp2(canvas.width), MathUtil.clp2(canvas.height), false, true);\r\n\r\n        ppTarget.upload();\r\n\r\n        var ppMaterial = BasicMaterial.create().setbyKeyObject(\r\n            {\r\n                \"emissionMap\":fwdTarget,\r\n                \"backbuffer\": ppTarget,\r\n                \"decay\": 0.96815,\r\n                \"weight\": 0.58767,\r\n                \"exposure\": 0.2,\r\n                \"density\":0.926,\r\n                \"numSamples\": 128\r\n            });\r\n\r\n        // scene\r\n        var debugNode1 = Node.createbyLayout(\"debug1\", BuiltinLayout.DEBUG_ONLY);\r\n        var debugNode2 = Node.createbyLayout(\"debug2\", BuiltinLayout.DEBUG_ONLY);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Transform.createbyMatrix4(\r\n            Mat4.invert(GLM.lookAt(new Vec3(0.0), new Vec3(0.0, 0.0, 1.0), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())\r\n        ))\r\n        .addComponent(PerspectiveCamera.create(800.0 / 600.0, Math.PI * 0.25, .1, 1000.0))\r\n        .addComponent(renderer);\r\n        root.addChild(camera);\r\n\r\n        var helio = Node.create(\"helio\").addComponent(Transform.create());\r\n        root.addChild(helio);\r\n\r\n        var sun = Node.create(\"sun\");\r\n\r\n        var _ = assets.loader.complete.connect(function(loader:Loader) {\r\n            for (i in 0... 100) {\r\n                root.addChild(createRandomCube(assets.geometry(\"cube\"), assets.effect(\"effect/Basic.effect\")));\r\n            }\r\n\r\n            var sunMaterial = BasicMaterial.create().setbyKeyObject(\r\n                {\r\n                    \"diffuseColor\":new Vec4(1.0, 0.32, 0.05, 1.0),\r\n                    \"isLightSource\":1.0\r\n                });\r\n\r\n            helio.addChild(Node.create()\r\n                .addComponent(Transform.createbyMatrix4(\r\n                    GLM.translate(new Vec3(0.0, 0.0, 100.0), Mat4.identity(new Mat4()))\r\n                ))\r\n                .addChild(sun.addComponent(Transform.createbyMatrix4(\r\n                    GLM.scale(new Vec3(10.0, 10, 10), Mat4.identity(new Mat4())\r\n                    )))\r\n                .addComponent(Surface.create(\r\n                    SphereGeometry.create(context),\r\n                    sunMaterial,\r\n                    assets.effect(\"effect/Basic.effect\")\r\n                ))));\r\n\r\n            ppScene.addComponent(Surface.create(\r\n                QuadGeometry.create(context),\r\n            ppMaterial,\r\n                assets.effect(\"effect/LightScattering/LightScattering.effect\")));\r\n\r\n            // forward\r\n            fwdRenderer = Renderer.create(0x000000ff, fwdTarget, assets.effect(\"effect/LightScattering/EmissionMap.effect\"));\r\n            fwdRenderer.layoutMask=(fwdRenderer.layoutMask & ~BuiltinLayout.DEBUG_ONLY);\r\n            camera.addComponent(fwdRenderer);\r\n\r\n            var debugDisplay1 = TextureDebugDisplay.create();\r\n            debugDisplay1.initialize(assets, fwdTarget);\r\n            debugNode1.addComponent(debugDisplay1);\r\n            ppScene.addChild(debugNode1);\r\n\r\n            var debugDisplay2 = TextureDebugDisplay.create();\r\n            debugDisplay2.initialize(assets, ppTarget);\r\n            debugDisplay2.material.data.set(\"spritePosition\", new Vec2(10, 440));\r\n            debugNode2.addComponent(debugDisplay2);\r\n            ppScene.addChild(debugNode2);\r\n        });\r\n\r\n        var resized = canvas.resized.connect(function(canvas, w, h) {\r\n            var perspectiveCamera:PerspectiveCamera =cast camera.getComponent(PerspectiveCamera);\r\n            perspectiveCamera.aspectRatio = (w / h);\r\n        });\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, time, deltaTime) {\r\n            var cameraTransform:Transform =cast camera.getComponent(Transform);\r\n            cameraTransform.matrix = GLM.rotate(Quat.axisAngle(new Vec3(0.0, 1.0, 0.0), 0.001, new Quat()), new Mat4()) * cameraTransform.matrix;\r\n            var helioTransform:Transform =cast helio.getComponent(Transform);\r\n            helioTransform.matrix = GLM.rotate(Quat.axisAngle(new Vec3(0.0, 1.0, 0.0), 0.001, new Quat()), new Mat4()) * helioTransform.matrix;\r\n\r\n            var sunTransform:Transform =cast sun.getComponent(Transform);\r\n\r\n            var perspectiveCamera:PerspectiveCamera =cast camera.getComponent(PerspectiveCamera);\r\n\r\n            var worldSpaceLightPosition:Vec3 = new Vec3( sunTransform.modelToWorldMatrix.r0c3, sunTransform.modelToWorldMatrix.r1c3, sunTransform.modelToWorldMatrix.r2c3);\r\n            var screenSpaceLightPosition:Vec3 = perspectiveCamera.project(worldSpaceLightPosition);\r\n\r\n            screenSpaceLightPosition = new Vec3(screenSpaceLightPosition.x / canvas.width, screenSpaceLightPosition.y / canvas.height, 1.0);\r\n            // std::cout << glm::to_string(screenSpaceLightPosition) << std::endl;\r\n\r\n            ppMaterial.data.set(\"screenSpaceLightPosition\",  new Vec2(screenSpaceLightPosition.x,screenSpaceLightPosition.y));\r\n\r\n            // Rendering in \"black and white\" to fwdTarget.\r\n            fwdRenderer.render(context);\r\n\r\n            // Rendering the scene normally to ppTarget.\r\n            sceneManager.nextFrame(time, deltaTime, ppTarget);\r\n\r\n            // Blending fwdTarget with ppTarget, enabling light scattering.\r\n            ppRenderer.render(context);\r\n        });\r\n        /*\r\nvar onmessageSlot = overlay.onmessage().connect((minko.dom.AbstractDOM.Ptr dom, string message) =>\r\n{\r\nvar key = message.Substring(0, message.IndexOf(\"=\"));\r\nvar value = message.Substring(message.IndexOf(\"=\") + 1);\r\n\r\nif (key == \"numSamples\") // unsigned long\r\n{\r\nppMaterial.data().set(key, Convert.ToUInt32(value));\r\n}\r\nelse // float\r\n{\r\nppMaterial.data().set(key, Convert.ToSingle(value));\r\n}\r\n});\r\n\r\noverlay.load(\"html/interface.html\");\r\n*/\r\n        assets.loader.load();\r\n        canvas.run();\r\n\r\n    }\r\n\r\n}\r\n","package minko.utils;\r\nimport glm.Mat3;\r\nimport glm.Mat4;\r\nimport glm.Vec2;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.math.Random;\r\nclass MathUtil {\r\n    inline public static var pi = 3.14159265;\r\n    inline public static var half_pi = 1.57079637;\r\n\r\n\r\n    inline public static function lerp(from:Float, to:Float, t:Float) {\r\n        return from + (to - from) * clamp(t, 0, 1);\r\n    }\r\n    inline public static function fract(  x:Float)\r\n    {\r\n        return x - Math.floor(x);\r\n    }\r\n\r\n    inline public static function std_copy(s:Array<Float>, begin, size, d:Array<Float>, index) {\r\n        var g = 0;\r\n        for (k in begin...size) {\r\n            d[index + g] = s[k];\r\n            g++;\r\n        }\r\n    }\r\n\r\n    public static function make_vec2(a:Array<Float>, b :Int) {\r\n        return new Vec2(a[b],a[b+1]);\r\n    }\r\n    public static function make_vec3(a:Array<Float>, b :Int) {\r\n        return new Vec3(a[b],a[b+1],a[b+2]);\r\n    }\r\n    public static function make_vec4(a:Array<Float>, b :Int) {\r\n        return new Vec4(a[b],a[b+1],a[b+2],a[b+3]);\r\n    }\r\n\r\n\r\n    inline public static function isEpsilonEqual(a, b, EPSILON = 1.19209290e-007) {\r\n        return (Math.abs(a - b) < EPSILON);\r\n    }\r\n\r\n    inline public static function isEpsilonEqualVec3(a:Vec3, b:Vec3, EPSILON = 1.19209290e-007) {\r\n        return (Math.abs(Vec3.subtractVec(a, b, new Vec3()).lengthSquared()) < EPSILON);\r\n    }\r\n\r\n\r\n    inline public static function linearRand(from:Float, to:Float) {\r\n        return Random.toFloatRange(Random.makeRandomSeed(), from, to) ;\r\n    }\r\n\r\n    public static function sphericalRand(Radius) {\r\n        var z = linearRand(-1, 1);\r\n        var a = linearRand(0, 6.283185307179586476925286766559);\r\n\r\n        var r = Math.sqrt((1) - z * z);\r\n\r\n        var x = r * Math.cos(a);\r\n        var y = r * Math.sin(a);\r\n\r\n        return new Vec3(x, y, z) * Radius;\r\n\r\n    }\r\n\r\n    public static function diskRand(Radius:Float) {\r\n        var Result:Vec2 = null;\r\n        var LenRadius:Float = 0;\r\n        do {\r\n            Result = new Vec2(linearRand(-Radius, Radius), linearRand(-Radius, Radius));\r\n            LenRadius = Result.length();\r\n        }\r\n        while (LenRadius > Radius);\r\n\r\n        return Result;\r\n    }\r\n\r\n    inline public static function rand01() {\r\n        return Math.random() ;\r\n    }\r\n\r\n    inline public static function clamp(x, minVal, maxVal) {\r\n        return Math.min(Math.max(x, minVal), maxVal);\r\n    }\r\n\r\n\r\n\r\n\r\n    inline public static function mat4_mat3(a:Mat4) {\r\n        return new Mat3(a.r0c0, a.r0c1, a.r0c2,\r\n        a.r1c0, a.r1c1, a.r1c2,\r\n        a.r2c0, a.r2c2, a.r2c2);\r\n    }\r\n\r\n    inline public static function vec4_vec3(v:Vec4) {\r\n        return new Vec3(v.x, v.y, v.z);\r\n    }\r\n\r\n    inline public static function vec3_vec4(v:Vec3, z:Float) {\r\n        return new Vec4(v.x, v.y, v.z, z);\r\n    }\r\n\r\n\r\n    inline public static function mat4_copyFrom(a:Mat4, b:Mat4) {\r\n        Mat4.copy(b, a);\r\n    }\r\n\r\n     public static function getp2(x) {\r\n        var tmp = x;\r\n        var p = 0;\r\n        while ((tmp >>= 1)>0) {\r\n            ++p;\r\n        }\r\n\r\n\r\n        return p;\r\n    }\r\n\r\n    inline public static function mix(v:Float, n:Float, rt:Float) {\r\n        return n * rt + v * (1 - rt);\r\n    }\r\n\r\n    inline public static function clp2(x) {\r\n        x = x - 1;\r\n        x = x | (x >> 1);\r\n        x = x | (x >> 2);\r\n        x = x | (x >> 4);\r\n        x = x | (x >> 8);\r\n        x = x | (x >> 16);\r\n\r\n        return x + 1;\r\n    }\r\n\r\n    inline public static function rgba(x) {\r\n        return new Vec4(\r\n        ((x >> 24) & 0xff) / 255,\r\n        ((x >> 16) & 0xff) / 255,\r\n        ((x >> 8) & 0xff) / 255,\r\n        (x & 0xff) / 255\r\n        );\r\n    }\r\n\r\n\r\n    inline public static function vec2_equals(a:Vec2, b:Vec2):Bool {\r\n        return a.equals(b);\r\n    }\r\n\r\n    inline public static function vec3_equals(a:Vec3, b:Vec3):Bool {\r\n        return a.equals(b);\r\n    }\r\n\r\n    inline public static function vec4_equals(a:Vec4, b:Vec4):Bool {\r\n        return a.equals(b);\r\n    }\r\n\r\n    inline public static function vec3_max(a:Vec3, b:Vec3):Vec3 {\r\n        //todo\r\n        return a ;\r\n    }\r\n\r\n\r\n}\r\n","package example;\r\nimport minko.component.ShadowMappingTechnique;\r\nimport glm.Quat;\r\nimport glm.Mat4;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.Canvas;\r\nimport minko.component.AmbientLight;\r\nimport minko.component.DirectionalLight;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.JPEGParser;\r\nimport minko.file.Loader;\r\nimport minko.geometry.CubeGeometry;\r\nimport minko.geometry.QuadGeometry;\r\nimport minko.geometry.SphereGeometry;\r\nimport minko.input.Mouse;\r\nimport minko.material.Material;\r\nimport minko.scene.Layout.BuiltinLayout;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.WebCanvas;\r\nclass ExamplePbr {\r\n    static private var ENVMAP = \"cloudySea\";\r\n    static private var MAP_DIFFUSE = \"texture/\" + ENVMAP + \"/\" + ENVMAP + \"-diffuse.jpg\";\r\n    //irrSpecular\r\n    static private var MAP_RADIANCE = \"texture/\" + ENVMAP + \"/\" + ENVMAP + \"-radiance.jpg\";\r\n    //irrDiffuse\r\n    static private var MAP_IRRADIANCE = \"texture/\" + ENVMAP + \"/\" + ENVMAP + \"-irradiance.jpg\";\r\n\r\n      public function new() {\r\n          //MAP_DIFFUSE =\"texture/cloudySea/footprint_court.jpg\";\r\n       //  MAP_RADIANCE=\"texture/cloudySea/footprint_court.jpg\";\r\n          var canvas = WebCanvas.create(\"Minko Example - PBR\", 800, 600);\r\n        var sceneManager = SceneManager.create(canvas);\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n        var assets = sceneManager.assets;\r\n        var context = canvas.context;\r\n\r\n        context.errorsEnabled = (true);\r\n        //Console.Write(context.driverInfo());\r\n        // Console.Write(\"\\n\");\r\n\r\n        // setup assets\r\n        var options = assets.loader.options;\r\n          options.loadAsynchronously=false;\r\n        options.resizeSmoothly = (true);\r\n       // options.generateMipmaps = (true);\r\n\r\n        options.registerParser(\"jpg\", function() return new JPEGParser());\r\n        var tmp = options.clone();\r\n       //   tmp.generateMipmaps=(true);\r\n       // tmp.parseMipMaps=(true);\r\n         tmp.fixMipMaps = (true);\r\n        assets.loader.queue(MAP_DIFFUSE)\r\n        .queue(MAP_IRRADIANCE)\r\n        .setQueue(MAP_RADIANCE, tmp)\r\n        .queue(\"texture/ground.jpg\")\r\n        .queue(\"effect/Basic.effect\")\r\n        .queue(\"effect/Skybox/Skybox.effect\")\r\n        .queue(\"effect/PBR.effect\");\r\n        var mat4:Mat4 = GLM.lookAt(new Vec3(1.0, 1.0, 0.0), new Vec3(), new Vec3(0, 1, 0), new Mat4());\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(0x2f2f2fff))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(mat4, new Mat4())))\r\n        .addComponent(PerspectiveCamera.create(800.0 / 600.0, 0.785, 0.1, 50.0));\r\n        root.addChild(camera);\r\n        var mat4_2:Mat4 = GLM.lookAt(new Vec3(1.0, 10.0, 0.0), new Vec3(), new Vec3(0, 1, 0), new Mat4());\r\n        var light = Node.create(\"light\").addComponent(AmbientLight.create(1))\r\n        .addComponent(DirectionalLight.create(.5,.5))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(mat4_2, new Mat4())));\r\n\r\n      //  root.addComponent(ShadowMappingTechnique.create(Technique.ESM));\r\n\r\n       var directionalLight:DirectionalLight =cast light.getComponent(DirectionalLight);\r\n      // directionalLight.enableShadowMapping(1024);\r\n        root.addChild(light);\r\n        var _ = assets.loader.complete.connect(function(loader:Loader) {\r\n            var skyboxMaterial=Material.create().setbyKeyObject({ \"diffuseLatLongMap\":assets.texture(MAP_DIFFUSE), \"gammaCorrection\":2.2});\r\n\r\n            var skybox = Node.create(\"skybox\").addComponent(Surface.create(CubeGeometry.create(context), skyboxMaterial, assets.effect(\"effect/Skybox/Skybox.effect\")));\r\n            root.addChild(skybox);\r\n\r\n            var groundMaterial = Material.create();\r\n            groundMaterial.setbyKeyObject(\r\n                {\r\n                    \"roughness\": 1.0,\r\n                    \"metalness\": 0.0,\r\n                    \"specularColor\": new Vec4(0.0, 0.0, 0.0, 1.0),\r\n                    \"albedoMap\": assets.texture(\"texture/ground.jpg\"),\r\n                    \"albedoColor\": new Vec4(.8, .8, .8, 1.0),\r\n                    \"irradianceMap\": assets.texture(MAP_IRRADIANCE),\r\n                    \"radianceMap\": assets.texture(MAP_RADIANCE),\r\n                    \"gammaCorrection\":2.2\r\n                });\r\n\r\n            groundMaterial.set(\"radianceMap.maxAvailableLod\", 11.0);\r\n            var ground = Node.create(\"ground\");\r\n            ground.layout = BuiltinLayout.DEFAULT | 256;\r\n            ground.addComponent(Surface.create(QuadGeometry.create(sceneManager.canvas.context), groundMaterial, assets.effect(\"effect/PBR.effect\")));\r\n\r\n\r\n            ground.addComponent(Transform.createbyMatrix4(\r\n                GLM.translate(new Vec3(0.0, -0.5, 0.0),new Mat4())\r\n                * GLM.rotate(Quat.axisAngle( new Vec3(1.0, 0.0, 0.0),- Math.PI/2,new Quat()),new Mat4())\r\n                * GLM.scale(new Vec3(20.0,20.0,20.0),new Mat4())\r\n            ));\r\n\r\n\r\n            root.addChild(ground);\r\n\r\n\r\n            var sphereGeom:SphereGeometry = SphereGeometry.create(sceneManager.canvas.context, 40, 40);\r\n            sphereGeom.computeTangentSpace(false);\r\n            var meshes = Node.create(\"meshes\");\r\n            var numSpheres = 10;\r\n            for (i in 0...numSpheres) {\r\n                for (j in 0... numSpheres) {\r\n                    var mesh = Node.create(\"mesh\");\r\n                    mesh.layout = ( BuiltinLayout.DEFAULT | BuiltinLayout.CAST_SHADOW);\r\n                    var mat = Material.create().setbyKeyObject(\r\n                        {\r\n                            \"gammaCorrection\": 2.2,\r\n                            \"albedoColor\": new Vec4(1.0, 1.0, 1.0, 1.0),\r\n                            \"specularColor\": new Vec4(1.0, 1.0, 1.0, 1.0),\r\n                            \"metalness\": j / (numSpheres - 1),\r\n                            \"roughness\": i / (numSpheres - 1),\r\n                            \"irradianceMap\": assets.texture(MAP_IRRADIANCE),\r\n                            \"radianceMap.maxAvailableLod\": 11.0,\r\n                            \"radianceMap\": assets.texture(MAP_RADIANCE)\r\n                        }); //,\r\n\r\n                    mesh.addComponent(Surface.create(sphereGeom, mat, assets.effect(\"effect/PBR.effect\")));\r\n                    var mat4:Mat4 = GLM.translate(new Vec3((-(numSpheres - 1) * .5 + i) * 1.25, 0.0, ( -(numSpheres - 1) * .5 + j) * 1.25), new Mat4());\r\n                    mesh.addComponent(Transform.createbyMatrix4(mat4));\r\n                    meshes.addChild(mesh);\r\n                }\r\n            }\r\n            root.addChild(meshes);\r\n\r\n            var yaw = 0.0;\r\n            var pitch = Math.PI * .5;\r\n//            var minPitch = 0.0 + 0.1;\r\n//            var maxPitch = Math.PI * .5 - .1;\r\n            var minPitch = 0.0 + 0.1;\r\n            // auto maxPitch = float(M_PI) * .5f - .1f;\r\n            var maxPitch = Math.PI - .1;\r\n            var lookAt = new Vec3(0.0, 0.0, 0.0);\r\n            var distance = 10.0;\r\n\r\n            // handle mouse signals\r\n\r\n            var mouseWheel = canvas.mouse.wheel.connect(function(m, h, v) {\r\n                distance += v / 10.0;\r\n            });\r\n\r\n\r\n            var mouseMove:SignalSlot3<Mouse, Int, Int> = null;\r\n            var cameraRotationXSpeed = 0.000;\r\n            var cameraRotationYSpeed = 0.000;\r\n\r\n            var mouseDown = canvas.mouse.leftButtonDown.connect(function(m) {\r\n\r\n                mouseMove = canvas.mouse.move.connect(function(UnnamedParameter1, dx, dy) {\r\n                    cameraRotationYSpeed = dx * .01;\r\n                    cameraRotationXSpeed = dy * -.01;\r\n                });\r\n            });\r\n\r\n            var mouseUp = canvas.mouse.leftButtonUp.connect(function(m) {\r\n\r\n                mouseMove.disconnect();\r\n                mouseMove = null;\r\n            });\r\n\r\n            var enterFrame = canvas.enterFrame.connect(function(canvas, time, deltaTime) {\r\n                yaw += cameraRotationYSpeed;\r\n                cameraRotationYSpeed *= 0.9;\r\n\r\n                pitch += cameraRotationXSpeed;\r\n                cameraRotationXSpeed *= 0.9;\r\n\r\n                if (pitch > maxPitch) {\r\n                    pitch = maxPitch;\r\n                }\r\n                else if (pitch < minPitch) {\r\n                    pitch = minPitch;\r\n                }\r\n\r\n                var vec3=new Vec3(lookAt.x + distance * Math.cos(yaw) * Math.sin(pitch), lookAt.y + distance * Math.cos(pitch), lookAt.z + distance * Math.sin(yaw) * Math.sin(pitch));\r\n\r\n               var transform:Transform= cast camera.getComponent(Transform);\r\n                transform.matrix= Mat4.invert(GLM.lookAt(vec3, lookAt, new Vec3(0.0, 1.0, 0.0),new Mat4()),new Mat4());\r\n                var directionalLight:DirectionalLight=cast light.getComponent(DirectionalLight);\r\n                var perspectiveCamera:PerspectiveCamera=cast camera.getComponent(PerspectiveCamera);\r\n                directionalLight.computeShadowProjection(perspectiveCamera.viewMatrix,perspectiveCamera.projectionMatrix);\r\n\r\n                sceneManager.nextFrame(time, deltaTime);\r\n            });\r\n\r\n            canvas.run();\r\n        });\r\n\r\n        var resized = canvas.resized.connect(function(canvas, w, h) {\r\n            var perspectiveCamera:PerspectiveCamera = cast camera.getComponent(PerspectiveCamera);\r\n            perspectiveCamera.aspectRatio = (w / h);\r\n        });\r\n\r\n        sceneManager.assets.loader.load();\r\n\r\n    }\r\n\r\n}\r\n","package example;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Picking;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.Loader;\r\nimport minko.file.PNGParser;\r\nimport minko.geometry.CubeGeometry;\r\nimport minko.geometry.QuadGeometry;\r\nimport minko.geometry.SphereGeometry;\r\nimport minko.material.BasicMaterial;\r\nimport minko.scene.Layout.BuiltinLayout;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal.SignalSlot;\r\nimport minko.WebCanvas;\r\nclass ExamplePicking {\r\n    public function new() {\r\n        init();\r\n    }\r\n\r\n    private var pickingMouseClick:SignalSlot<Node>;\r\n    private var pickingMouseRightClick:SignalSlot<Node>;\r\n    private var pickingMouseOver:SignalSlot<Node>;\r\n    private var pickingMouseOut:SignalSlot<Node>;\r\n\r\n    function init() {\r\n        var canvas = WebCanvas.create(\"Minko Example - Picking\", 800, 600);\r\n\r\n        var sceneManager = SceneManager.create(canvas);\r\n\r\n        // Setup assets\r\n        sceneManager.assets.loader.options.resizeSmoothly = (true);\r\n        sceneManager.assets.loader.options.generateMipmaps = (true);\r\n        sceneManager.assets.loader.options.registerParser(\"png\", function() return new PNGParser());\r\n\r\n        sceneManager.assets.loader\r\n        .queue(\"effect/Basic.effect\")\r\n        .queue(\"effect/Picking.effect\");\r\n\r\n        var redMaterial:BasicMaterial = BasicMaterial.create();\r\n        redMaterial.diffuseColorRGBA(0xFF0000FF);\r\n\r\n        var greenMaterial = BasicMaterial.create();\r\n        greenMaterial.diffuseColorRGBA(0xF0FF00FF);\r\n\r\n        var blueMaterial = BasicMaterial.create();\r\n        blueMaterial.diffuseColorRGBA(0x0000FFFF);\r\n\r\n        sceneManager.assets.setMaterial(\"redMaterial\", redMaterial)\r\n        .setMaterial(\"greenMaterial\", greenMaterial)\r\n        .setMaterial(\"blueMaterial\", blueMaterial)\r\n        .setGeometry(\"cube\", CubeGeometry.create(sceneManager.assets.context))\r\n        .setGeometry(\"sphere\", SphereGeometry.create(sceneManager.assets.context))\r\n        .setGeometry(\"quad\", QuadGeometry.create(sceneManager.assets.context));\r\n\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(0.0, 0.0, 4.0), new Vec3(0.0), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())))\r\n        .addComponent(PerspectiveCamera.create(canvas.aspectRatio));\r\n\r\n        root.addChild(camera);\r\n\r\n        var _ = sceneManager.assets.loader.complete.connect(function(loader:Loader) {\r\n            var cube = Node.createbyLayout(\"cubeNode\", BuiltinLayout.DEFAULT | BuiltinLayout.PICKING)\r\n            .addComponent(Surface.create(sceneManager.assets.geometry(\"cube\"), sceneManager.assets.material(\"redMaterial\"), sceneManager.assets.effect(\"effect/Basic.effect\")))\r\n            .addComponent(Transform.createbyMatrix4(GLM.translate(new Vec3(-1.4, 0.0, 0.0) , new Mat4()))) ;\r\n\r\n            var sphere = Node.createbyLayout(\"sphereNode\", BuiltinLayout.DEFAULT | BuiltinLayout.PICKING)\r\n            .addComponent(Surface.create(sceneManager.assets.geometry(\"sphere\"), sceneManager.assets.material(\"greenMaterial\"), sceneManager.assets.effect(\"effect/Basic.effect\")))\r\n            .addComponent(Transform.create()) ;\r\n\r\n            var quad = Node.createbyLayout(\"quadNode\", BuiltinLayout.DEFAULT | BuiltinLayout.PICKING)\r\n            .addComponent(Surface.create(sceneManager.assets.geometry(\"quad\"), sceneManager.assets.material(\"blueMaterial\"), sceneManager.assets.effect(\"effect/Basic.effect\")))\r\n            .addComponent(Transform.createbyMatrix4(GLM.translate(new Vec3(1.4, 0.0, 0.0), new Mat4()))) ;\r\n\r\n            root.addChild(cube).addChild(sphere).addChild(quad);\r\n\r\n            root.addComponent(Picking.create(camera, false, true));\r\n\r\n            var picking:Picking = cast root.getComponent(Picking);\r\n            pickingMouseClick = picking.mouseClick.connect(function(node:Node) {\r\n                trace(\"Click: \");\r\n                trace(node.name);\r\n                trace(\"\\n\");\r\n            });\r\n\r\n            pickingMouseRightClick = picking.mouseRightClick.connect(function(node:Node) {\r\n                trace(\"Right Click: \");\r\n                trace(node.name);\r\n                trace(\"\\n\");\r\n            });\r\n\r\n            pickingMouseOver = picking.mouseOver.connect(function(node:Node) {\r\n                trace(\"Mouse In: \");\r\n                trace(node.name);\r\n                trace(\"\\n\");\r\n            });\r\n\r\n            pickingMouseOut = picking.mouseOut.connect(function(node:Node) {\r\n                trace(\"Mouse Out: \");\r\n                trace(node.name);\r\n                trace(\"\\n\");\r\n            });\r\n        });\r\n\r\n        camera.addComponent(Renderer.create(0x7f7f7fff));\r\n\r\n        var resized = canvas.resized.connect(function(canvas, w, h) {\r\n            var perspectiveCamera:PerspectiveCamera = cast camera.getComponent(PerspectiveCamera);\r\n            perspectiveCamera.aspectRatio = (w / h);\r\n        });\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, time, deltaTime) {\r\n            sceneManager.nextFrame(time, deltaTime);\r\n        });\r\n\r\n        sceneManager.assets.loader.load();\r\n        canvas.run();\r\n    }\r\n\r\n}\r\n","package example;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Quat;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.JPEGParser;\r\nimport minko.file.Loader;\r\nimport minko.geometry.CubeGeometry;\r\nimport minko.geometry.Geometry;\r\nimport minko.geometry.SphereGeometry;\r\nimport minko.input.Mouse;\r\nimport minko.material.BasicMaterial;\r\nimport minko.material.Material;\r\nimport minko.render.Effect;\r\nimport minko.render.TriangleCulling;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.utils.RandomNumbers;\r\nimport minko.WebCanvas;\r\nclass ExampleSkybox {\r\n    private static var SKYBOX_TEXTURE = \"texture/cloudySea-diffuse.jpg\";\r\n    private static var NUM_OBJECTS = 15;\r\n\r\n    public function new() {\r\n        init();\r\n    }\r\n\r\n    private function createTransparentObject(scale, rotationY, geom:Geometry, fx:Effect) {\r\n        // Debug.Assert(NUM_OBJECTS > 0);\r\n\r\n        var randomAxis = Vec3.normalize(new Vec3( RandomNumbers.nextNumber(), RandomNumbers.nextNumber(), RandomNumbers.nextNumber()), new Vec3());\r\n        var randomAng = 2.0 * Math.PI * RandomNumbers.nextNumber() ;\r\n        var rotateQuat = Quat.axisAngle(randomAxis, randomAng, new Quat());\r\n        var m = Mat4.identity(new Mat4());\r\n        m = GLM.rotate(rotateQuat, new Mat4()) * m;\r\n        m = GLM.translate(new Vec3(1.0, 0.0, 0.0), Mat4.identity(new Mat4())) * m;\r\n        m = GLM.scale(new Vec3(scale,scale,scale), Mat4.identity(new Mat4())) * m;\r\n        var rotateYQuat = Quat.axisAngle(new Vec3(0.0, 1.0, 0.0), rotationY, new Quat());\r\n        m = GLM.rotate(rotateYQuat, new Mat4()) * m;\r\n        var basicMaterial:BasicMaterial = BasicMaterial.create();\r\n        basicMaterial.diffuseColor = (new Vec4(rotationY / (2.0 * Math.PI) * 360, 1.0, 0.5, 0.5));\r\n        basicMaterial.triangleCulling = (TriangleCulling.BACK);\r\n        return Node.create()\r\n        .addComponent(Transform.createbyMatrix4(m))\r\n        .addComponent(Surface.create(geom, basicMaterial, fx));\r\n    }\r\n\r\n    function init() {\r\n        var canvas = WebCanvas.create(\"Minko Example - Skybox\");\r\n        var sceneManager = SceneManager.create(canvas);\r\n        var loader = sceneManager.assets.loader;\r\n        loader.options.loadAsynchronously=false;\r\n        loader.options.resizeSmoothly = (true);\r\n        loader.options.generateMipmaps = (true);\r\n        loader.options.registerParser(\"jpg\", function()return new JPEGParser());\r\n\r\n        loader.queue(SKYBOX_TEXTURE)\r\n        .queue(\"effect/Basic.effect\")\r\n        .queue(\"effect/Skybox/Skybox.effect\");\r\n\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(0x7f7f7fff))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(), new Vec3(0, 0, 3), new Vec3(0, 1, 0),  Mat4.identity(new Mat4())),  Mat4.identity(new Mat4()))))\r\n        .addComponent(PerspectiveCamera.create(canvas.aspectRatio));\r\n\r\n        var sky = Node.create(\"sky\")\r\n        .addComponent(Transform.createbyMatrix4(GLM.scale(new Vec3(100.0, 100.0, 100.0), new Mat4()) * Mat4.identity(new Mat4())));\r\n\r\n       var objects = Node.create(\"objects\").addComponent(Transform.create());\r\n        var _ = sceneManager.assets.loader.complete.connect(function(loader:Loader) {\r\n            var assets = sceneManager.assets;\r\n\r\n            sky.addComponent(Surface.create(SphereGeometry.create(assets.context, 16, 16), Material.create().setbyKeyObject(\r\n                {\r\n                    \"diffuseLatLongMap\": assets.texture(SKYBOX_TEXTURE)\r\n                }), assets.effect(\"effect/Skybox/Skybox.effect\")));\r\n\r\ntrace(\"NUM_OBJECTS > 0\",NUM_OBJECTS);\r\n\r\n            var scale = 1.25 * Math.PI / NUM_OBJECTS;\r\n            var dAngle = 2.0 * Math.PI / NUM_OBJECTS;\r\n\r\n           var cubeGeom = CubeGeometry.create(sceneManager.assets.context);\r\n            for (objId in 0...NUM_OBJECTS) {\r\n                objects.addChild(createTransparentObject(scale, objId * dAngle, cubeGeom, assets.effect(\"effect/Basic.effect\")));\r\n            }\r\n\r\n            root.addChild(camera)\r\n            .addChild(sky)\r\n            .addChild(objects);\r\n        });\r\n\r\n        var resized = canvas.resized.connect(function(canvas, w, h) {\r\n            var perspectiveCamera:PerspectiveCamera = cast camera.getComponent(PerspectiveCamera);\r\n            perspectiveCamera.aspectRatio = (w / h);\r\n        });\r\n\r\n        var yaw = 0.0;\r\n        var pitch = Math.PI * .5;\r\n        var minPitch = 0.1;\r\n        var maxPitch = Math.PI - .1;\r\n        var lookAt = new Vec3(0.0, 0.0, 0.0);\r\n        var distance = 4.0;\r\n        var mouse_=canvas.mouse;\r\n        var mouse_wheel=canvas.mouse.wheel;\r\n        var mouseWheel = mouse_wheel.connect(function(m, h, v) {\r\n            distance += v / 10.0 ;\r\n        });\r\n        var mouseMove:SignalSlot3<Mouse, Int, Int> = null;\r\n        var cameraRotationXSpeed = 0.000;\r\n        var cameraRotationYSpeed = 0.000;\r\n\r\n        var mouseDown = canvas.mouse.leftButtonDown.connect(function(m:Mouse) {\r\n\r\n            mouseMove = canvas.mouse.move.connect(function(UnnamedParameter1, dx, dy) {\r\n\r\n                cameraRotationYSpeed = dx * .01;\r\n                cameraRotationXSpeed = dy * -.01;\r\n            });\r\n        });\r\n        var mouseUp = canvas.mouse.leftButtonUp.connect(function(m:Mouse) {\r\n            mouseMove.disconnect();\r\n            mouseMove = null;\r\n        });\r\n        var skyRotation=Quat.axisAngle(new Vec3(0,1,0),0.01,new Quat());\r\n        var  objectsRotation=Quat.axisAngle(new Vec3(0,1,0),-0.02,new Quat());\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, time, deltaTime) {\r\n            yaw += cameraRotationYSpeed;\r\n            cameraRotationYSpeed *= 0.9;\r\n\r\n            pitch += cameraRotationXSpeed;\r\n            cameraRotationXSpeed *= 0.9;\r\n\r\n            if (pitch > maxPitch) {\r\n                pitch = maxPitch;\r\n            }\r\n            else if (pitch < minPitch) {\r\n                pitch = minPitch;\r\n            }\r\n            if (distance <= 0.0) {\r\n                distance = 0.1;\r\n            }\r\n            var cameraTransform:Transform = cast camera.getComponent(Transform);\r\n            // GLM.rotate(skyRotation, Mat4.identity(new Mat4()))*cameraTransform.matrix;\r\n            var mat4=Mat4.invert(GLM.lookAt(\r\n                new Vec3(lookAt.x + distance * Math.cos(yaw) * Math.sin(pitch),\r\n                lookAt.y + distance * Math.cos(pitch),\r\n                lookAt.z + distance * Math.sin(yaw) * Math.sin(pitch)\r\n                ),\r\n                lookAt,\r\n                new Vec3(0.0, 1.0, 0.0),\r\n                new Mat4()),\r\n            new Mat4());\r\n             cameraTransform.matrix = mat4 ;\r\n\r\n            var skyTransform:Transform = cast sky.getComponent(Transform);\r\n            var objectsTransform:Transform = cast objects.getComponent(Transform);\r\n\r\n           skyTransform.matrix = GLM.rotate(skyRotation, Mat4.identity(new Mat4()))*skyTransform.matrix;\r\n           objectsTransform.matrix = GLM.rotate(objectsRotation, Mat4.identity(new Mat4()))* objectsTransform.matrix;\r\n\r\n            sceneManager.nextFrame(time, deltaTime);\r\n        });\r\n\r\n        loader.load();\r\n        canvas.run();\r\n    }\r\n\r\n}\r\n","package example;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Quat;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.AbstractCanvas.Flags;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.AssetLibrary;\r\nimport minko.geometry.QuadGeometry;\r\nimport minko.material.BasicMaterial;\r\nimport minko.render.CompareMode;\r\nimport minko.render.StencilOperation;\r\nimport minko.render.TriangleCulling;\r\nimport minko.scene.Node;\r\nimport minko.utils.RandomNumbers;\r\nimport minko.WebCanvas;\r\nclass ExampleStencil {\r\n    public function new() {\r\n        init();\r\n    }\r\n\r\n    private function generateColor():Vec4 {\r\n        return new Vec4(RandomNumbers.nextNumber(), RandomNumbers.nextNumber(), RandomNumbers.nextNumber(), 0.5);\r\n    }\r\n\r\n    private function generateHexColor():Int {\r\n        var color = generateColor();\r\n\r\n        var r = Math.floor(255.0 * color.x);\r\n        var g = Math.floor(255.0 * color.y);\r\n        var b = Math.floor(255.0 * color.z);\r\n        var a = Math.floor(255.0 * color.w);\r\n\r\n        return ((r << 24) | (g << 16) | (b << 8) | a);\r\n    }\r\n\r\n    private function generateStars(numStars:Int, assets:AssetLibrary) {\r\n        if (assets == null) {\r\n            throw (\"assets\");\r\n        }\r\n\r\n       var starNodes:Array<Node>=[];\r\n\r\n        for (i in 0...numStars) {\r\n            var basicMaterial:BasicMaterial = BasicMaterial.create();\r\n            basicMaterial.diffuseColor = (generateColor());\r\n            basicMaterial.colorMask = (true);\r\n            basicMaterial.depthMask = (false);\r\n            basicMaterial.depthFunction = (CompareMode.ALWAYS);\r\n            basicMaterial.stencilFunction = (CompareMode.EQUAL);\r\n            basicMaterial.stencilReference = (1);\r\n            basicMaterial.stencilMask = (0xff);\r\n            basicMaterial.stencilFailOperation = (StencilOperation.KEEP);\r\n            starNodes[i] = Node.create(\"star_\" + (i))\r\n            .addComponent(Transform.create())\r\n            .addComponent(Surface.create(assets.geometry(\"smallStar\"), basicMaterial, assets.effect(\"effect/Basic.effect\")));\r\n\r\n            var minX = -1.0;\r\n            var rangeX = 1.0 - minX;\r\n            var minY = -1.0;\r\n            var rangeY = 1.0 - minY;\r\n            var starNodesTransform:Transform =cast starNodes[i].getComponent(Transform);\r\n\r\n             starNodesTransform.matrix = (GLM.translate(new Vec3(minX + (RandomNumbers.nextNumber()) * rangeX, minY + (RandomNumbers.nextNumber() ) * rangeY, 0.0), new Mat4())\r\n             * GLM.rotate(Quat.axisAngle(new Vec3(0.0, 0.0, 1.0), 2.0 * Math.PI * (RandomNumbers.nextNumber()), new Quat()), new Mat4())\r\n             * starNodesTransform.matrix * GLM.scale(new Vec3(0.25, 0.25, 0.25), new Mat4()));\r\n        }\r\n        return starNodes;\r\n    }\r\n\r\n    function init() {\r\n        var canvas = WebCanvas.create(\"Minko Example - Stencil\", 800, 600, Flags.RESIZABLE | Flags.STENCIL);\r\n        var sceneManager = SceneManager.create(canvas);\r\n        var assets = sceneManager.assets;\r\n\r\n        // setup assets\r\n        sceneManager.assets\r\n        .setGeometry(\"bigStar\", StarGeometry.create(sceneManager.assets.context, 5, 0.5, 0.325))\r\n        .setGeometry(\"smallStar\", StarGeometry.create(sceneManager.assets.context, 5, 0.5, 0.25))\r\n        .setGeometry(\"quad\", QuadGeometry.create(sceneManager.assets.context));\r\n\r\n        sceneManager.assets.loader.queue(\"effect/Basic.effect\");\r\n\r\n        var numSmallStars = 30;\r\n        var smallStars:Array<Node> = [];\r\n\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(generateHexColor()))\r\n        .addComponent(PerspectiveCamera.create(canvas.aspectRatio))\r\n        .addComponent(Transform.create());\r\n\r\n        var cameraTransform:Transform = cast camera.getComponent(Transform);\r\n        cameraTransform.matrix = (Mat4.invert(GLM.lookAt(new Vec3(0.0, 0.0, 3.0), new Vec3(0.0), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4()));\r\n\r\n\r\n        var bigStarNode = Node.create(\"bigStarNode\").addComponent(Transform.create());\r\n\r\n        var quadNode = Node.create(\"quadNode\").addComponent(Transform.create());\r\n\r\n        root.addChild(camera);\r\n\r\n        var _ = sceneManager.assets.loader.complete.connect(function(loader) {\r\n            var bigStarNodeBasicMaterial:BasicMaterial = BasicMaterial.create();\r\n            bigStarNodeBasicMaterial.diffuseColor = (new Vec4(1.0, 1.0, 1.0, 1.0));\r\n            bigStarNodeBasicMaterial.colorMask = (false);\r\n            bigStarNodeBasicMaterial.depthMask = (false);\r\n            bigStarNodeBasicMaterial.depthFunction = (CompareMode.ALWAYS);\r\n            bigStarNodeBasicMaterial.stencilFunction = (CompareMode.NEVER);\r\n            bigStarNodeBasicMaterial.stencilReference = (1);\r\n            bigStarNodeBasicMaterial.stencilMask = (0xff);\r\n            bigStarNodeBasicMaterial.stencilFailOperation = (StencilOperation.REPLACE);\r\n            bigStarNodeBasicMaterial.triangleCulling = (TriangleCulling.BACK);\r\n            bigStarNode.addComponent(Surface.create(assets.geometry(\"bigStar\"), bigStarNodeBasicMaterial, assets.effect(\"effect/Basic.effect\")));\r\n            var bigStarNodeTransform:Transform = cast bigStarNode.getComponent(Transform);\r\n            bigStarNodeTransform.matrix = (GLM.scale(new Vec3(2.5, 2.5, 2.5), new Mat4()) * bigStarNodeTransform.matrix);\r\n            var quadNodeBasicMaterial:BasicMaterial = BasicMaterial.create();\r\n            quadNodeBasicMaterial.diffuseColor = (generateColor());\r\n            quadNodeBasicMaterial.colorMask = (true);\r\n            quadNodeBasicMaterial.depthMask = (false);\r\n            quadNodeBasicMaterial.depthFunction = (CompareMode.ALWAYS);\r\n            quadNodeBasicMaterial.stencilFunction = (CompareMode.EQUAL);\r\n            quadNodeBasicMaterial.stencilReference = (1);\r\n            quadNodeBasicMaterial.stencilMask = (0xff);\r\n            quadNodeBasicMaterial.stencilFailOperation = (StencilOperation.KEEP);\r\n            quadNodeBasicMaterial.triangleCulling = (TriangleCulling.BACK);\r\n            quadNode.addComponent(Surface.create(assets.geometry(\"quad\"), quadNodeBasicMaterial, assets.effect(\"effect/Basic.effect\")));\r\n\r\n            var quadNodeTransform:Transform =cast quadNode.getComponent(Transform);\r\n            quadNodeTransform.matrix = (GLM.scale(new Vec3(4, 4, 4), new Mat4()) * bigStarNodeTransform.matrix);\r\n\r\n            smallStars= generateStars(numSmallStars, sceneManager.assets);\r\n\r\n            // stencil writing pass\r\n             root.addChild(bigStarNode);\r\n            // stencil fetching pass\r\n            root.addChild(quadNode);\r\n\r\n            for (star in smallStars) {\r\n               root.addChild(star);\r\n            }\r\n            var enterFrame = canvas.enterFrame.connect(function(canvas, time, deltaTime) {\r\n\r\n                var bigStarNodeTransform:Transform =cast bigStarNode.getComponent(Transform);\r\n                bigStarNodeTransform.matrix = GLM.rotate(Quat.axisAngle(new Vec3(0.0, 0.0, 1.0), .001, new Quat()), new Mat4()) * bigStarNodeTransform.matrix;\r\n\r\n                for (star in smallStars) {\r\n                    var starTransform:Transform =cast star.getComponent(Transform);\r\n                    starTransform.matrix = starTransform.matrix * GLM.rotate(Quat.axisAngle(new Vec3(0.0, 0.0, 1.0), -0.025, new Quat()), new Mat4());\r\n                }\r\n                sceneManager.nextFrame(time, deltaTime);\r\n            });\r\n        });\r\n\r\n\r\n\r\n        sceneManager.assets.loader.load();\r\n        canvas.run();\r\n    }\r\n\r\n}\r\n","package example;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Quat;\r\nimport glm.Vec2;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.component.AmbientLight;\r\nimport minko.component.DirectionalLight;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.AssetLibrary;\r\nimport minko.file.JPEGParser;\r\nimport minko.file.Loader;\r\nimport minko.file.PNGParser;\r\nimport minko.geometry.QuadGeometry;\r\nimport minko.geometry.SphereGeometry;\r\nimport minko.input.Keyboard;\r\nimport minko.input.Mouse;\r\nimport minko.material.FogTechnique;\r\nimport minko.material.Material;\r\nimport minko.material.WaterMaterial;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal.SignalSlot;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.WebCanvas;\r\nclass ExampleWater {\r\n    public function new() {\r\n        init();\r\n    }\r\n\r\n    private static var CAMERA_LIN_SPEED = 0.05 ;\r\n    private static var CAMERA_ANG_SPEED = Math.PI * 2.0 / 180.0;\r\n    private static var flowMapCycle = 0.25;\r\n\r\n    private var keyDown:SignalSlot<Keyboard>;\r\n\r\n// #define FLOW_MAP // comment to deactivate flowmap\r\n// #define ENABLE_REFLECTION // comment to deactivate reflections\r\n    function init() {\r\n        var canvas = WebCanvas.create(\"Minko Example - Water\");\r\n        var sceneManager = SceneManager.create(canvas);\r\n        var assets:AssetLibrary = sceneManager.assets;\r\n\r\n        canvas.context.errorsEnabled = (true);\r\n\r\n        assets.loader.options.resizeSmoothly = (true);\r\n        assets.loader.options.generateMipmaps = (true);\r\n        assets.loader.options.registerParser(\"png\", function() return new PNGParser());\r\n        assets.loader.options.registerParser(\"jpg\", function() return new JPEGParser());\r\n\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(0x7f7f7fff))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(), new Vec3(3.0, 3.0, 3.0), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())))\r\n        .addComponent(PerspectiveCamera.create(canvas.aspectRatio));\r\n\r\n        var fxLoader = Loader.createbyLoader(sceneManager.assets.loader).queue(\"effect/Phong.effect\");\r\n\r\n        var fxComplete = fxLoader.complete.connect(function(l:Loader) {\r\n            assets.loader.queue(\"texture/skybox_texture-diffuse.jpg\")\r\n            .queue(\"effect/Skybox/Skybox.effect\")\r\n            .queue(\"texture/normalmap.png\")\r\n            .queue(\"effect/Water/Water.effect\")\r\n            .load();\r\n            // ->queue(\"texture/flowmap.png\")\r\n            // ->queue(\"texture/water_dudv.jpg\")\r\n            // ->queue(\"texture/noise.png\")\r\n            // ->queue(\"effect/Reflection/PlanarReflection.effect\");\r\n        });\r\n\r\n\r\n        var _ = assets.loader.complete.connect(function(loader:Loader) {\r\n#if ENABLE_REFLECTION\r\n\t\tvar reflectionComponent = Reflection.create(sceneManager.assets(), 2048, 2048, 0x00000000);\r\n\t\tcamera.addComponent(reflectionComponent);\r\n#end\r\n\r\n            root.addChild(camera);\r\n\r\n            var fogColor = new Vec4(.9, .9, .9, 1.0);\r\n\r\n            var sky = Node.create()\r\n            .addComponent(Surface.create(\r\n                SphereGeometry.create(assets.context, 16, 16),\r\n                Material.create().setbyKeyObject({\r\n                    \"diffuseLatLongMap\": assets.texture(\"texture/skybox_texture-diffuse.jpg\"),\r\n                    \"gammaCorrection\": 2.2,\r\n                    \"fogColor\": fogColor,\r\n                    \"sunDirection\": new Vec3(1., 0., 0.),\r\n                    \"reileighCoefficient\": 1.,\r\n                    \"mieCoefficient\": .053,\r\n                    \"mieDirectionalG\": .75,\r\n                    \"turbidity\":1.\r\n                }),\r\n                assets.effect(\"effect/Skybox/Skybox.effect\")\r\n            ));\r\n            root.addChild(sky);\r\n\r\n\r\n            var waterMaterial:WaterMaterial = WaterMaterial.createWaves(5);\r\n\r\n\r\n// #ifdef FLOW_MAP\r\n//         waterMaterial->noiseMap(assets->texture(\"texture/noise.png\"));\r\n//         waterMaterial->flowMap(assets->texture(\"texture/flowmap.png\"));\r\n//         waterMaterial->flowMapCycle(flowMapCycle);\r\n//         waterMaterial->flowMapOffset1(0.f);\r\n//         waterMaterial->flowMapOffset2(flowMapCycle / 2.f);\r\n// #endif\r\n//\r\n// #ifdef ENABLE_REFLECTION\r\n//         waterMaterial->dudvMap(sceneManager->assets()->texture(\"texture/water_dudv.jpg\"));\r\n//         waterMaterial->reflectionMap(camera->components<Reflection>()[0]->getRenderTarget());\r\n//         waterMaterial->reflectivity(0.4f);\r\n//         waterMaterial->dudvFactor(0.02f);\r\n//         waterMaterial->dudvSpeed(0.00015f);\r\n//         waterMaterial->diffuseColor(0x052540FF);\r\n// #else\r\n//         waterMaterial->diffuseColor(0x306090D0);\r\n// #endif\r\n\r\n            waterMaterial.normalMap = (assets.texture(\"texture/normalmap.png\"));\r\n            waterMaterial.diffuseColorRGBA(0x001033FF);\r\n\r\n            // waterMaterial->flowMapScale(1.f);\r\n            waterMaterial.shininess = (64.0);\r\n            waterMaterial.specularColorRGBA(0xFFFFFF33);\r\n\r\n// #ifdef FLOW_MAP\r\n//         waterMaterial->setAmplitude(0, 0.06f);\r\n//         waterMaterial->setAmplitude(1, 0.0173f);\r\n//         waterMaterial->setAmplitude(2, 0.0312f);\r\n//         waterMaterial->setAmplitude(3, 0.0287f);\r\n//         waterMaterial->setAmplitude(4, 0.0457f);\r\n// #else\r\n            waterMaterial.setAmplitude(0, 1.43);\r\n            waterMaterial.setAmplitude(1, .373);\r\n            waterMaterial.setAmplitude(2, .112);\r\n            waterMaterial.setAmplitude(3, .187);\r\n            waterMaterial.setAmplitude(4, 1.0);\r\n// #endif\r\n            waterMaterial.setWaveLength(0, 50.0);\r\n            waterMaterial.setWaveLength(1, 17.7);\r\n            waterMaterial.setWaveLength(2, 13.13);\r\n            waterMaterial.setWaveLength(3, 40.17);\r\n            waterMaterial.setWaveLength(4, 100.0);\r\n\r\n            waterMaterial.setSpeed(0, 7.4);\r\n            waterMaterial.setSpeed(1, 8.8);\r\n            waterMaterial.setSpeed(2, 3.2);\r\n            waterMaterial.setSpeed(3, 4.6);\r\n            waterMaterial.setSpeed(4, 6.0);\r\n\r\n            waterMaterial.setDirection(0, new Vec2(1.0, 1.0));\r\n            waterMaterial.setDirection(1, new Vec2(0.1, 1.0));\r\n            waterMaterial.setCenter(2, new Vec2(1000.0, -1000.0));\r\n            waterMaterial.setCenter(3, new Vec2(1000.0, 1000.0));\r\n            waterMaterial.setDirection(4, new Vec2(1.0, 0.0));\r\n\r\n            waterMaterial.setSharpness(0, .5);\r\n            waterMaterial.setSharpness(1, .5);\r\n            waterMaterial.setSharpness(2, .3);\r\n            waterMaterial.setSharpness(3, .5);\r\n            waterMaterial.setSharpness(4, .5);\r\n\r\n            var waves = Node.create(\"waves\")\r\n            .addComponent(Transform.createbyMatrix4(GLM.rotate(Quat.axisAngle(new Vec3(1.0, 0.0, 0.0), -Math.PI / 2.0, new Quat()), new Mat4())))\r\n            .addComponent(Surface.create(QuadGeometry.create(assets.context, 200, 200, 1000, 1000), waterMaterial.setbyKeyObject(\r\n                {\r\n                    \"fogTechnique\": FogTechnique.LIN,\r\n                    \"fogBounds\":new Vec2(300.0, 500.0),\r\n                    \"fogColor\": fogColor,\r\n                    \"uvScale\":new Vec2(2.0, 2.0),\r\n                    \"environmentMap2d\": assets.texture(\"texture/skybox_texture-diffuse.jpg\"),\r\n                    \"gammaCorrection\": 2.2\r\n                }), assets.effect(\"effect/Water/Water.effect\")));\r\n            // { \"normalMap\", assets->texture(\"texture/normalmap.png\")->sampler() },\r\n            // assets->effect(\"effect/Phong.effect\")\r\n            root.addChild(waves);\r\n\r\n            root.addChild(Node.create().addComponent(DirectionalLight.create(0.8, .8))\r\n            .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(-.8, 1.0, 0.0), new Vec3(0.0), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4()))));\r\n            root.addChild(Node.create().addComponent(AmbientLight.create(0.1)));\r\n        });\r\n\r\n        var resized = canvas.resized.connect(function(canvas, w, h) {\r\n            var perspectiveCamera:PerspectiveCamera = cast camera.getComponent(PerspectiveCamera);\r\n            perspectiveCamera.aspectRatio = (w / h);\r\n        });\r\n\r\n        var yaw = 0.3;\r\n        // float pitch = 1.3f;//float(M_PI) * .5f;\r\n        var pitch = Math.PI * .5;\r\n        var minPitch = 0.0 + 0.1;\r\n        // auto maxPitch = float(M_PI) * .5f - .1f;\r\n        var maxPitch = Math.PI - .1;\r\n        var lookAt = new Vec3(0.0, 2.0, 0.0);\r\n        var distance = 3.0;\r\n        var minDistance = 1.0;\r\n        var zoomSpeed = 0.0;\r\n\r\n        var mouseWheel = canvas.mouse.wheel.connect(function(m, h, v) {\r\n            zoomSpeed -= v * .1;\r\n        });\r\n\r\n        var mouseMove:SignalSlot3<Mouse, Int, Int> = null;\r\n        var cameraRotationXSpeed = 0.0;\r\n        var cameraRotationYSpeed = 0.0;\r\n\r\n        var mouseDown = canvas.mouse.leftButtonDown.connect(function(m) {\r\n            mouseMove = canvas.mouse.move.connect(function(UnnamedParameter1, dx, dy) {\r\n                cameraRotationYSpeed = dx * .01;\r\n                cameraRotationXSpeed = dy * -.01;\r\n            });\r\n        });\r\n\r\n        var mouseUp = canvas.mouse.leftButtonUp.connect(function(m) {\r\n            mouseMove.disconnect();\r\n            mouseMove = null;\r\n        });\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, time, deltaTime) {\r\n            distance += zoomSpeed;\r\n            zoomSpeed *= 0.9;\r\n            if (distance < minDistance) {\r\n                distance = minDistance;\r\n            }\r\n\r\n            yaw += cameraRotationYSpeed;\r\n            cameraRotationYSpeed *= 0.9;\r\n\r\n            pitch += cameraRotationXSpeed;\r\n            cameraRotationXSpeed *= 0.9;\r\n\r\n            if (pitch > maxPitch) {\r\n                pitch = maxPitch;\r\n            }\r\n            else if (pitch < minPitch) {\r\n                pitch = minPitch;\r\n            }\r\n            var cameraTransform:Transform = cast camera.getComponent(Transform);\r\n            cameraTransform.matrix = (Mat4.invert(GLM.lookAt(\r\n                new Vec3(lookAt.x + distance * Math.cos(yaw) * Math.sin(pitch), lookAt.y + distance * Math.cos(pitch), lookAt.z + distance * Math.sin(yaw) * Math.sin(pitch)),\r\n                lookAt, new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4()));\r\n\r\n            sceneManager.nextFrame(time, deltaTime);\r\n        });\r\n\r\n        fxLoader.load();\r\n        canvas.run();\r\n    }\r\n\r\n}\r\n","package minko;\r\nimport minko.math.Random;\r\nusing Std;\r\nusing EReg;\r\nusing StringTools;\r\n@:expose(\"minko.Uuid\")\r\nclass Uuid {\r\n\r\n    private static var CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split(\"\");\r\n\r\n    public static function getUuid() {\r\n        var seed = Random.makeRandomSeed();\r\n        var chars = CHARS, uuid = new Array(), rnd = 0, r;\r\n        for (i in 0...36) {\r\n            if (i == 8 || i == 13 || i == 18 || i == 23) {\r\n                uuid[i] = \"-\";\r\n            } else if (i == 14) {\r\n                uuid[i] = \"4\";\r\n            } else {\r\n                if (rnd <= 0x02) rnd = 0x2000000 + Math.floor((seed = Random.nextParkMiller(seed)) * 0x1000000) | 0;\r\n                r = rnd & 0xf;\r\n                rnd = rnd >> 4;\r\n                uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\r\n            }\r\n        }\r\n        return uuid.join(\"\");\r\n    }\r\n}\r\n@:expose(\"minko.Has_uuid\")\r\nclass Has_uuid {\r\n    public function new() {\r\n\r\n    }\r\n    public var uuid(get, set):String ;\r\n    var _uuid:String;\r\n\r\n    function set_uuid(value) {\r\n        _uuid = (value);\r\n        return value;\r\n    }\r\n\r\n    function get_uuid() {\r\n        return _uuid;\r\n    }\r\n}\r\n@:expose(\"minko.Enable_uuid\")\r\nclass Enable_uuid extends Has_uuid {\r\n\r\n\r\n    public function enable_uuid() {\r\n        _uuid = Uuid.getUuid();\r\n    }\r\n\r\n}\r\n","package minko.geometry;\r\nimport glm.GLM;\r\nimport glm.Vec2;\r\nimport glm.Vec3;\r\nimport haxe.ds.IntMap;\r\nimport haxe.ds.ObjectMap;\r\nimport haxe.ds.StringMap;\r\nimport minko.data.Provider;\r\nimport minko.math.Ray;\r\nimport minko.render.IndexBuffer;\r\nimport minko.render.VertexAttribute;\r\nimport minko.render.VertexBuffer;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nimport minko.Uuid.Has_uuid;\r\n@:expose(\"minko.geometry.Geometry\")\r\nclass Geometry extends Has_uuid {\r\n    private var _data:Provider;\r\n    private var _vertexSize:Int;\r\n    private var _numVertices:Int;\r\n    private var _vertexBuffers:Array<VertexBuffer> ;\r\n    private var _indexBuffer:IndexBuffer;\r\n\r\n    private var _vbToVertexSizeChangedSlot:ObjectMap<VertexBuffer, SignalSlot2<VertexBuffer, Int>>;\r\n\r\n    public function new(name:String) {\r\n        super();\r\n        this._data = Provider.create() ;\r\n        this._vertexSize = 0;\r\n        this._numVertices = 0;\r\n        this._indexBuffer = null;\r\n        this._vertexBuffers = [];\r\n        _vbToVertexSizeChangedSlot = new ObjectMap<VertexBuffer, SignalSlot2<VertexBuffer, Int>>();\r\n        _data.set(\"name\", name);\r\n        _data.set(\"uuid\", _data.uuid);\r\n    }\r\n\r\n    public function dispose() {\r\n        _data = null;\r\n        _vertexBuffers = null;\r\n        _indexBuffer = null;\r\n    }\r\n    public static function create():Geometry {\r\n        return createbyName(\"\");\r\n    }\r\n    public static function createbyName(name:String = \"geometry\"):Geometry {\r\n        return new Geometry(name);\r\n    }\r\n\r\n    override function get_uuid() {\r\n        return _data.uuid;\r\n    }\r\n\r\n    public function clone() {\r\n        var geometry = new Geometry(\"\").copyFrom(this) ;\r\n\r\n        return geometry;\r\n    }\r\n\r\n    public var data(get, null):Provider;\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n\r\n    public var vertexBuffers(get, null):Array<VertexBuffer>;\r\n\r\n    function get_vertexBuffers() {\r\n        return _vertexBuffers;\r\n    }\r\n    public var name(get, null):String;\r\n\r\n    function get_name() {\r\n        return _data.get(\"name\");\r\n    }\r\n\r\n    public function vertexBuffer(vertexAttributeName:String):VertexBuffer {\r\n\r\n        var vertexBufferIt:VertexBuffer = Lambda.find(_vertexBuffers, function(vb:VertexBuffer) {\r\n            return vb.hasAttribute(vertexAttributeName);\r\n        });\r\n\r\n        if (vertexBufferIt == null) {\r\n            return null;\r\n        }\r\n\r\n        return vertexBufferIt;\r\n    }\r\n\r\n    public function hasVertexBuffer(vertexBuffer:VertexBuffer) {\r\n        return Lambda.has(_vertexBuffers, vertexBuffer);\r\n    }\r\n\r\n    public function hasVertexAttribute(vertexAttributeName:String) {\r\n        return _data.hasProperty(vertexAttributeName);\r\n    }\r\n    public var indices(get, set):IndexBuffer;\r\n\r\n    function set_indices(__indices:IndexBuffer) {\r\n        _indexBuffer = __indices;\r\n\r\n        if (__indices.isReady) {\r\n            _data.set(\"indices\", __indices.id);\r\n            _data.set(\"firstIndex\", 0);\r\n            _data.set(\"numIndices\", __indices.numIndices);\r\n        }\r\n        return __indices;\r\n    }\r\n\r\n    function get_indices() {\r\n        return _indexBuffer;\r\n    }\r\n\r\n    public function addVertexBuffer(vertexBuffer:VertexBuffer) {\r\n        if (hasVertexBuffer(vertexBuffer)) {\r\n            throw (\"vertexBuffer\");\r\n        }\r\n\r\n        var bufVertexSize = vertexBuffer.vertexSize;\r\n        var bufNumVertices = vertexBuffer.numVertices;\r\n\r\n        for (attribute in vertexBuffer.attributes) {\r\n            _data.set(attribute.name, attribute);\r\n        }\r\n        _vertexSize += bufVertexSize;\r\n        _data.set(\"vertex.size\", _vertexSize);\r\n\r\n        if (_vertexBuffers.length > 0 && _numVertices != bufNumVertices) {\r\n            throw (\"inconsistent number of vertices between the geometry's vertex streams.\");\r\n        }\r\n        else if (_vertexBuffers.length == 0) {\r\n            _numVertices = bufNumVertices;\r\n        }\r\n\r\n        _vertexBuffers.push(vertexBuffer);\r\n\r\n        _vbToVertexSizeChangedSlot.set(vertexBuffer, vertexBuffer.vertexSizeChanged.connect(vertexSizeChanged));\r\n\r\n        computeCenterPosition();\r\n    }\r\n\r\n    public function removeVertexBuffer(vertexBufferIt:VertexBuffer) {\r\n        if (!hasVertexBuffer(vertexBufferIt)) {\r\n            throw (\"vertexBuffer\");\r\n        }\r\n        var vertexBuffer:VertexBuffer = vertexBufferIt;\r\n\r\n\r\n        for (attribute in vertexBuffer.attributes) {\r\n            _data.unset(attribute.name);\r\n        }\r\n\r\n        _vertexSize -= vertexBuffer.vertexSize;\r\n        _data.set(\"vertex.size\", _vertexSize);\r\n\r\n        _vertexBuffers.remove(vertexBufferIt);\r\n\r\n        if (_vertexBuffers.length == 0) {\r\n            _numVertices = 0;\r\n        }\r\n        _vbToVertexSizeChangedSlot.get(vertexBuffer).dispose();\r\n        _vbToVertexSizeChangedSlot.remove(vertexBuffer);\r\n        vertexBuffer.dispose();\r\n    }\r\n\r\n\r\n    public function removeVertexBufferbyName(attributeName:String) {\r\n\r\n        var vertexBufferIt:VertexBuffer = Lambda.find(_vertexBuffers, function(vb:VertexBuffer) {\r\n            return vb.hasAttribute(attributeName);\r\n        });\r\n\r\n        if (vertexBufferIt == null) {\r\n            throw (\"attributeName = \" + attributeName);\r\n        }\r\n\r\n        removeVertexBuffer(vertexBufferIt);\r\n    }\r\n\r\n    public var numVertices(get, null):Int;\r\n\r\n    function get_numVertices() {\r\n        return _numVertices;\r\n    }\r\n\r\n    public var vertexSize(get, set):Int;\r\n\r\n    function get_vertexSize() {\r\n        return _vertexSize;\r\n    }\r\n\r\n    public function computeNormals() {\r\n\r\n        if (numVertices == 0) {\r\n            return this;\r\n        }\r\n        var normalBuffer:VertexBuffer = vertexBuffer(\"normal\");\r\n        // if (normalBuffer)\r\n        // throw std::logic_error(\"The geometry already stores precomputed normals.\");\r\n\r\n        var xyzBuffer:VertexBuffer = vertexBuffer(\"position\");\r\n        if (xyzBuffer == null) {\r\n            throw (\"Computation of normals requires positions.\");\r\n        }\r\n\r\n\r\n        var uintIndices:Array<Int> = indices.dataPointer ;\r\n\r\n        var numFaces = Math.floor(uintIndices.length / 3) ;\r\n\r\n        var vertexIds = [0, 0, 0];\r\n        var xyz = new Array<Vec3>();//3\r\n\r\n        var xyzAttribute:VertexAttribute = xyzBuffer.attribute(\"position\");\r\n        var xyzSize = xyzAttribute.vertexSize; // xyzBuffer->vertexSize();\r\n        var xyzOffset = xyzAttribute.offset;\r\n        var xyzData:Array<Float> = xyzBuffer.data;\r\n\r\n        var normalSize:Int;\r\n        var normalOffset:Int;\r\n        var normalsData:Array<Float>;\r\n\r\n        if (normalBuffer != null) {\r\n            normalsData = normalBuffer.data;\r\n            var normalAttribute:VertexAttribute = normalBuffer.attribute(\"normal\");\r\n            normalSize = normalAttribute.vertexSize;\r\n            normalOffset = normalAttribute.offset;\r\n        }\r\n        else {\r\n            normalsData = [for (i in 0...3 * numVertices) 0.0];\r\n            normalSize = 3;\r\n            normalOffset = 0;\r\n        }\r\n\r\n        for (i in 0...numVertices) {\r\n            var index = normalOffset + i * normalSize;\r\n\r\n            normalsData[index] = 0.0;\r\n            normalsData[index + 1] = 0.0;\r\n            normalsData[index + 2] = 0.0;\r\n        }\r\n        var offset = 0;\r\n        for (i in 0...numFaces) {\r\n\r\n            for (k in 0... 3) {\r\n                vertexIds[k] = uintIndices[offset++];\r\n                var index = xyzOffset + vertexIds[k] * xyzSize;\r\n                xyz[k] = new Vec3(xyzData[index], xyzData[index + 1], xyzData[index + 2]);\r\n            }\r\n\r\n            //math\r\n            var faceNormal = Vec3.cross(xyz[0] - xyz[1], xyz[0] - xyz[2], new Vec3());\r\n\r\n\r\n            for (k in 0... 3) {\r\n                var index = normalOffset + normalSize * vertexIds[k];\r\n\r\n                normalsData[index] += faceNormal.x;\r\n                normalsData[index + 1] += faceNormal.y;\r\n                normalsData[index + 2] += faceNormal.z;\r\n            }\r\n        }\r\n\r\n        for (i in 0... numVertices) {\r\n            var indexOffset = normalOffset + i * normalSize;\r\n\r\n            var x = normalsData[indexOffset];\r\n            var y = normalsData[indexOffset + 1];\r\n            var z = normalsData[indexOffset + 2];\r\n            var lengthSquared = x * x + y * y + z * z;\r\n            //todo\r\n            var invLength = lengthSquared > GLM.EPSILON ? 1.0 / Math.sqrt(lengthSquared) : 1.0;\r\n\r\n            normalsData[indexOffset] *= invLength;\r\n            normalsData[indexOffset + 1] *= invLength;\r\n            normalsData[indexOffset + 2] *= invLength;\r\n        }\r\n\r\n        if (normalBuffer == null) {\r\n            normalBuffer = VertexBuffer.createbyData(xyzBuffer.context, normalsData);\r\n            normalBuffer.addAttribute(\"normal\", normalSize, normalOffset);\r\n            addVertexBuffer(normalBuffer);\r\n\r\n            normalsData = null;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public function computeTangentSpace(doNormals:Bool) {\r\n        if (numVertices == 0) {\r\n            return this;\r\n        }\r\n        var xyzBuffer:VertexBuffer = vertexBuffer(\"position\");\r\n        if (xyzBuffer == null) {\r\n            throw (\"Computation of tangent space requires positions.\");\r\n        }\r\n        var uvBuffer:VertexBuffer = vertexBuffer(\"uv\");\r\n        if (uvBuffer == null) {\r\n            throw (\"Computation of tangent space requires uvs.\");\r\n        }\r\n        if (doNormals) {\r\n            computeNormals();\r\n        }\r\n\r\n\r\n        var uintIndices:Array<Int> = indices.dataPointer ;\r\n        var numFaces = Math.floor(uintIndices.length / 3);\r\n\r\n        var vertexIds = [0, 0, 0];\r\n        var xyz = new Array<Vec3>();//3\r\n        var uv = new Array<Vec2>();//3\r\n\r\n        var xyzSize = xyzBuffer.vertexSize;\r\n        var xyzOffset = xyzBuffer.attribute(\"position\").offset;\r\n        var xyzData:Array<Float> = xyzBuffer.data;\r\n\r\n        var uvSize = uvBuffer.vertexSize;\r\n        var uvOffset = uvBuffer.attribute(\"uv\").offset;\r\n        var uvData:Array<Float> = uvBuffer.data;\r\n\r\n        var tangentsData:Array<Float> = [ for (i in 0...3 * numVertices) 0.0];\r\n        var offset = 0;\r\n        for (i in 0...numFaces) {\r\n            for (k in 0...3) {\r\n                vertexIds[k] = uintIndices[offset++];\r\n                var index = xyzOffset + vertexIds[k] * xyzSize;\r\n                xyz[k] = new Vec3(xyzData[index], xyzData[index + 1], xyzData[index + 2]);\r\n                index = uvOffset + vertexIds[k] * uvSize;\r\n                uv[k] = new Vec2(uvData[index], uvData[index + 1]);\r\n            }\r\n\r\n            //math\r\n            var uv02:Vec2 = uv[0] - uv[2];\r\n            var uv12:Vec2 = uv[1] - uv[2];\r\n            var denom = uv02.x * uv12.y - uv12.x * uv02.y;\r\n            var invDenom = Math.abs(denom) > GLM.EPSILON ? 1.0 / denom : 1.0;\r\n\r\n            var faceTangent:Vec3 = ((xyz[0] - xyz[2]) * uv12.y - (xyz[1] - xyz[2]) * uv02.y) * invDenom;\r\n\r\n            for (k in 0... 3) {\r\n                var index = 3 * vertexIds[k];\r\n\r\n                tangentsData[index] += faceTangent.x;\r\n                tangentsData[index + 1] += faceTangent.y;\r\n                tangentsData[index + 2] += faceTangent.z;\r\n            }\r\n        }\r\n        var index = 0;\r\n        for (i in 0... numVertices) {\r\n            var x = tangentsData[index];\r\n            var y = tangentsData[index + 1];\r\n            var z = tangentsData[index + 2];\r\n            var lengthSquared = x * x + y * y + z * z;\r\n            //todo\r\n            var invLength = lengthSquared > GLM.EPSILON ? 1.0 / Math.sqrt(lengthSquared) : 1.0;\r\n\r\n            tangentsData[index] *= invLength;\r\n            tangentsData[index + 1] *= invLength;\r\n            tangentsData[index + 2] *= invLength;\r\n            index += 3;\r\n        }\r\n\r\n        var tangentsBuffer:VertexBuffer = VertexBuffer.createbyData(xyzBuffer.context, tangentsData);\r\n        tangentsBuffer.addAttribute(\"tangent\", 3, 0);\r\n        addVertexBuffer(tangentsBuffer);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function computeCenterPosition() {\r\n\r\n        if (numVertices == 0) {\r\n            return this;\r\n        }\r\n        var xyzBuffer:VertexBuffer = vertexBuffer(\"position\");\r\n        if (xyzBuffer == null) {\r\n            return this;\r\n        }\r\n\r\n        var xyzAttr:VertexAttribute = xyzBuffer.attribute(\"position\");\r\n        var xyzOffset = xyzAttr.offset;\r\n        var xyzSize = Math.floor(Math.max(0, Math.min(3, xyzAttr.size)));\r\n        var xyzData:Array<Float> = xyzBuffer.data ;\r\n\r\n        var minXYZ:Array<Float> = [Math.POSITIVE_INFINITY, Math.POSITIVE_INFINITY, Math.POSITIVE_INFINITY];\r\n        var maxXYZ:Array<Float> = [Math.NEGATIVE_INFINITY, Math.NEGATIVE_INFINITY, Math.NEGATIVE_INFINITY];\r\n\r\n        var vertexIndex = xyzOffset;\r\n        while (vertexIndex < xyzData.length) {\r\n            for (k in 0... xyzSize) {\r\n                var vk = xyzData[vertexIndex + k];\r\n\r\n                minXYZ[k] = Math.min(minXYZ[k], vk);\r\n                maxXYZ[k] = Math.max(maxXYZ[k], vk);\r\n            }\r\n\r\n            vertexIndex += xyzBuffer.vertexSize;\r\n        }\r\n\r\n        var minPosition = new Vec3(minXYZ[0], minXYZ[1], minXYZ[2]);\r\n        var maxPosition = new Vec3(maxXYZ[0], maxXYZ[1], maxXYZ[2]);\r\n\r\n        //math\r\n        var centerPosition = (minPosition - maxPosition) * .5;\r\n\r\n        _data.set(\"centerPosition\", centerPosition);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function removeDuplicatedVertices() {\r\n        var vertices = new Array<Array<Float>>();\r\n\r\n        for (vb in _vertexBuffers) {\r\n            vertices.push(vb.data);\r\n        }\r\n\r\n        removeDuplicateVertices(_indexBuffer.data, vertices, numVertices);\r\n    }\r\n\r\n    /*\r\n    * function removeDuplicateVertices(vertices) {\r\n    var positionLookup = [];\r\n    var final = [];\r\n\r\n    for( let i = 0; i < vertices.length-3; i += 3 ) {\r\n        var index = vertices[i] + vertices[i + 1] + vertices[i + 2];\r\n\r\n        if( positionLookup.indexOf( index ) == -1 ) {\r\n            positionLookup.push( index );\r\n            final.push(vertices[i])\r\n            final.push(vertices[i+1])\r\n            final.push(vertices[i+2])\r\n        }\r\n    }\r\n    return final;\r\n}*/\r\n    public function removeDuplicateVertices(indices:Array<Int>, vertices:Array<Array<Float>>, numVertices:Int) {\r\n        var newVertexCount = 0;\r\n        var newLimit = 0;\r\n\r\n        var hashToNewVertexId = new StringMap<Int>();\r\n        var oldVertexIdToNewVertexId = new IntMap<Int>();\r\n\r\n        for (oldVertexId in 0... numVertices) {\r\n            var hash = \"\";\r\n            for (vb in vertices) {\r\n                var vertexSize = Math.floor(vb.length / numVertices);\r\n                for (i in 0... vertexSize) {\r\n                    hash += (vb[oldVertexId * vertexSize + i]) + \" \";\r\n                }\r\n            }\r\n\r\n            var newVertexId = 0;\r\n\r\n            if (!hashToNewVertexId.exists(hash)) {\r\n                newVertexId = newVertexCount++;\r\n                hashToNewVertexId.set(hash, newVertexId);\r\n                newLimit = 1 + newVertexId;\r\n\r\n                if (newVertexId != oldVertexId) {\r\n                    for (vb in vertices) {\r\n                        var vertexSize = Math.floor(vb.length / numVertices);\r\n                        // vb_copy(vb,oldVertexId * vertexSize, (oldVertexId + 1) * vertexSize, vb, newVertexId * vertexSize);\r\n                        for (i in 0...vertexSize)\r\n                            vb[newVertexId * vertexSize + i] = vb[oldVertexId * vertexSize + i];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                newVertexId = hashToNewVertexId.get(hash);\r\n            }\r\n\r\n            oldVertexIdToNewVertexId.set(oldVertexId, newVertexId);\r\n        }\r\n\r\n        for (vb in vertices) {\r\n            var len = (newLimit * vb.length / numVertices);\r\n            //重建长度\r\n            while (vb.length > len) vb.pop();\r\n        }\r\n\r\n        for (i in 0...indices.length) {\r\n            var index = indices[i];\r\n            indices[i] = oldVertexIdToNewVertexId.get(index);\r\n        }\r\n    }\r\n\r\n\r\n    public function getVertexAttribute(attributeName:String) :VertexAttribute{\r\n        for (vertexBuffer in _vertexBuffers) {\r\n            if (vertexBuffer.hasAttribute(attributeName)) {\r\n                return vertexBuffer.attribute(attributeName);\r\n            }\r\n        }\r\n\r\n        throw (\"attributeName = \" + attributeName);\r\n    }\r\n\r\n    public function castRay(ray:Ray, distance:Float, triangle:Int, hitXyz:Vec3 = null, hitUv:Vec2 = null, hitNormal:Vec3 = null) {\r\n        var EPSILON = 0.00001 ;\r\n\r\n        var hit = false;\r\n        var indicesData:Array<Int> = _indexBuffer.data;\r\n        var numIndices = indicesData.length;\r\n\r\n        var xyzBuffer:VertexBuffer = vertexBuffer(\"position\");\r\n        var xyzData:Array<Float> = xyzBuffer.data ;\r\n        var xyzPtr = xyzData ;\r\n        var xyzVertexSize = xyzBuffer.vertexSize ;\r\n        var xyzOffset = xyzBuffer.attribute(\"position\").offset;\r\n\r\n        var minDistance = Math.POSITIVE_INFINITY;\r\n        var lambda = new Vec2();\r\n        var triangleIndice = -3;\r\n\r\n        var v0 = new Vec3();\r\n        var v1 = new Vec3();\r\n        var v2 = new Vec3();\r\n        var edge1 = new Vec3();\r\n        var edge2 = new Vec3();\r\n        var pvec = new Vec3();\r\n        var tvec = new Vec3();\r\n        var qvec = new Vec3();\r\n\r\n        var dot = 0.0;\r\n        var invDot = 0.0;\r\n        var u = 0.0;\r\n        var v = 0.0;\r\n        var t = 0.0;\r\n        var i = 0;\r\n        while (i < numIndices) {\r\n            var index:Int = indicesData[i] * xyzVertexSize;\r\n            v0 = new Vec3(xyzPtr[index], xyzPtr[index + 1], xyzPtr[index + 2] );\r\n            index = indicesData[i + 1] * xyzVertexSize;\r\n            v1 = new Vec3(xyzPtr[index], xyzPtr[index + 1], xyzPtr[index + 2] );\r\n            index = indicesData[i + 2] * xyzVertexSize;\r\n            v2 = new Vec3(xyzPtr[index], xyzPtr[index + 1], xyzPtr[index + 2] );\r\n\r\n            //math\r\n            edge1 = v1 - (v0) ;\r\n            edge2 = v2 - (v0);\r\n\r\n            pvec = Vec3.cross(ray.direction, edge2, new Vec3()) ;\r\n            dot = Vec3.dot(edge1, pvec);\r\n\r\n            if (dot > -EPSILON && dot < EPSILON) {\r\n                continue;\r\n            }\r\n\r\n            invDot = 1.0 / dot;\r\n            //math\r\n            tvec = ray.origin - v0;\r\n            u = Vec3.dot(tvec, pvec) * invDot;\r\n            if (u < 0.0 || u > 1.0) {\r\n                continue;\r\n            }\r\n\r\n            qvec = Vec3.cross(tvec, edge1, new Vec3());\r\n            v = Vec3.dot(ray.direction, qvec) * invDot;\r\n            if (v < 0.0 || u + v > 1.0) {\r\n                continue;\r\n            }\r\n\r\n            t = Vec3.dot(qvec, edge2) * invDot;\r\n            if (t < minDistance && t > 0) {\r\n                minDistance = t;\r\n                distance = t;\r\n                triangle = i;\r\n                hit = true;\r\n\r\n                if (hitUv != null) {\r\n                    lambda.x = u;\r\n                    lambda.y = v;\r\n                }\r\n\r\n                if (hitXyz != null) {\r\n                    hitXyz = new Vec3(ray.origin.x + minDistance * ray.direction.x,\r\n                    ray.origin.y + minDistance * ray.direction.y,\r\n                    ray.origin.z + minDistance * ray.direction.z);\r\n                }\r\n            }\r\n\r\n            if (hitUv != null) {\r\n                getHitUv(triangle, lambda, hitUv);\r\n            }\r\n\r\n            if (hitNormal != null) {\r\n                getHitNormal(triangle, hitNormal);\r\n            }\r\n            i += 3;\r\n        }\r\n\r\n        return hit;\r\n    }\r\n\r\n    public function upload() {\r\n        for (vb in _vertexBuffers) {\r\n            vb.upload();\r\n        }\r\n\r\n        _indexBuffer.upload();\r\n    }\r\n\r\n    public function disposeIndexBufferData() {\r\n        _indexBuffer.disposeData();\r\n    }\r\n\r\n    public function disposeVertexBufferData() {\r\n        for (vertexBuffer in _vertexBuffers) {\r\n            vertexBuffer.disposeData();\r\n        }\r\n    }\r\n\r\n//ORIGINAL LINE: bool equals(Geometry *geom) const;\r\n\r\n//\t\t\tbool equals(Geometry geom);\r\n\r\n\r\n    public function copyFrom(geometry:Geometry) {\r\n        this._data = Provider.createbyProvider(geometry._data);\r\n        this._vertexSize = geometry._vertexSize;\r\n        this._numVertices = geometry._numVertices;\r\n        this._vertexBuffers = geometry._vertexBuffers.concat([]);\r\n        this._indexBuffer = geometry._indexBuffer;\r\n        return this;\r\n    }\r\n\r\n\r\n    function set_vertexSize(value) {\r\n        _vertexSize = value;\r\n        return value;\r\n    }\r\n\r\n    public function vertexSizeChanged(vertexBuffer:VertexBuffer, offset:Int) {\r\n        _vertexSize += offset;\r\n    }\r\n\r\n    private function getHitUv(triangle:Int, lambda:Vec2, hitUv:Vec2) {\r\n        var uvBuffer:VertexBuffer = vertexBuffer(\"uv\");\r\n        var uvData = uvBuffer.data;\r\n        var uvPtr = uvData[0];\r\n        var uvVertexSize = uvBuffer.vertexSize;\r\n        var uvOffset = uvBuffer.attribute(\"uv\").offset;\r\n        var indicesData = _indexBuffer.data ;\r\n\r\n        var u0 = uvData[indicesData[triangle] * uvVertexSize + uvOffset];\r\n        var v0 = uvData[indicesData[triangle] * uvVertexSize + uvOffset + 1];\r\n\r\n        var u1 = uvData[indicesData[triangle + 1] * uvVertexSize + uvOffset];\r\n        var v1 = uvData[indicesData[triangle + 1] * uvVertexSize + uvOffset + 1];\r\n\r\n        var u2 = uvData[indicesData[triangle + 2] * uvVertexSize + uvOffset];\r\n        var v2 = uvData[indicesData[triangle + 2] * uvVertexSize + uvOffset + 1];\r\n\r\n        var z = 1.0 - lambda.x - lambda.y;\r\n\r\n        hitUv = new Vec2(z * u0 + lambda.x * u1 + lambda.y * u2, z * v0 + lambda.x * v1 + lambda.y * v2);\r\n    }\r\n\r\n    private function getHitNormal(triangle:Int, hitNormal:Vec3) {\r\n        var normalBuffer:VertexBuffer = vertexBuffer(\"normal\");\r\n        var normalData:Array<Float> = normalBuffer.data;\r\n\r\n        var normalVertexSize = normalBuffer.vertexSize;\r\n        var normalOffset = normalBuffer.attribute(\"normal\").offset;\r\n        var indicesData = _indexBuffer.data;\r\n\r\n        var index:Int = indicesData[triangle] * normalVertexSize + normalOffset;\r\n        var v0 = new Vec3(normalData[index], normalData[index + 1], normalData[index + 2]);\r\n        index = indicesData[triangle + 1] * normalVertexSize + normalOffset;\r\n        var v1 = new Vec3(normalData[index], normalData[index + 1], normalData[index + 2]);\r\n        index = indicesData[triangle + 2] * normalVertexSize + normalOffset;\r\n        var v2 = new Vec3(normalData[index], normalData[index + 1], normalData[index + 2]);\r\n\r\n        //math\r\n\r\n        var edge1 = Vec3.normalize(v1 - v0, new Vec3());\r\n        var edge2 = Vec3.normalize(v2 - v0, new Vec3());\r\n\r\n        hitNormal = Vec3.cross(edge2, edge1, new Vec3());\r\n    }\r\n\r\n}\r\n","package example;\r\nimport minko.geometry.Geometry;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.IndexBuffer;\r\nimport minko.render.VertexBuffer;\r\nimport minko.utils.VectorHelper;\r\nclass StarGeometry extends Geometry {\r\n    inline static public function create(context:AbstractContext, numBranches:Int, outerRadius:Float, innerRadius:Float) {\r\n        var ptr = new StarGeometry() ;\r\n        ptr.initialize(context, numBranches, outerRadius, innerRadius);\r\n\r\n        return ptr;\r\n    }\r\n\r\n    public function new() {\r\n        super(\"star\");\r\n    }\r\n\r\n    public function initialize(context:AbstractContext, numBranches:Int, outerRadius:Float, innerRadius:Float) {\r\n        if (context == null) {\r\n            throw (\"context\");\r\n        }\r\n\r\n        if (numBranches < 2) {\r\n            throw (\"numBranches\");\r\n        }\r\n\r\n        var outRadius = Math.abs(outerRadius);\r\n        var inRadius = Math.min(outRadius, Math.abs(innerRadius));\r\n\r\n        // vertex buffer initialization\r\n        var vertexSize = 3; // (x y z nx ny nz)\r\n        var numVertices = 1 + 2 * numBranches;\r\n        var vertexData:Array<Float> = VectorHelper.initializedList(numVertices * vertexSize, 0.0);\r\n\r\n        var step = Math.PI / numBranches;\r\n        var cStep = Math.cos(step);\r\n        var sStep = Math.sin(step);\r\n\r\n        var idx = vertexSize;\r\n        var cAng = 1.0;\r\n        var sAng = 0.0;\r\n\r\n        for (i in 0...numBranches) {\r\n            vertexData[idx] = outRadius * cAng;\r\n            vertexData[idx + 1] = outRadius * sAng;\r\n            idx += vertexSize;\r\n\r\n            var c = cAng * cStep - sAng * sStep;\r\n            var s = sAng * cStep + cAng * sStep;\r\n            cAng = c;\r\n            sAng = s;\r\n\r\n            vertexData[idx] = inRadius * cAng;\r\n            vertexData[idx + 1] = inRadius * sAng;\r\n            idx += vertexSize;\r\n\r\n            c = cAng * cStep - sAng * sStep;\r\n            s = sAng * cStep + cAng * sStep;\r\n            cAng = c;\r\n            sAng = s;\r\n        }\r\n\r\n        var vertexBuffer = VertexBuffer.createbyData(context, vertexData);\r\n\r\n        vertexBuffer.addAttribute(\"position\", 3, 0);\r\n        addVertexBuffer(vertexBuffer);\r\n\r\n        // index buffer initialization\r\n        var numTriangles = 2 * numBranches;\r\n\r\n        var indexData:Array<Int> = [];// new List<ushort>(3 * numTriangles);\r\n\r\n        idx = 0;\r\n\r\n        for (i in 0... numTriangles) {\r\n            indexData[idx++] = 0;\r\n            indexData[idx++] = i + 1;\r\n            indexData[idx++] = (i + 2 < numVertices)   ? i + 2 : 1;\r\n        }\r\n\r\n        indices = (IndexBuffer.createbyData(context, indexData));\r\n    }\r\n}\r\n\r\n","package minko.component;\r\nimport haxe.ds.ObjectMap;\r\nimport minko.scene.Layout.LayoutMask;\r\nimport minko.scene.Layout;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal;\r\nimport minko.Uuid.Enable_uuid;\r\n@:expose(\"minko.component.AbstractComponent\")\r\nclass AbstractComponent extends Enable_uuid {\r\n    public function new(layoutMask = LayoutMask.EVERYTHING) {\r\n        super();\r\n        this._layoutMask = layoutMask;\r\n        this._layoutMaskChanged = new Signal<AbstractComponent>();\r\n    }\r\n    private var _target:Node;\r\n    private var _layoutMask:Layout;\r\n    private var _layoutMaskChanged:Signal<AbstractComponent>;\r\n\r\n\r\n    public function dispose() {\r\n        _target = null;\r\n    }\r\n\r\n    public function clone(option:CloneOption) {\r\n        throw (\"Missing clone function for a component.\");\r\n        return null;\r\n    }\r\n\r\n    public var target(get, set):Node;\r\n\r\n    function get_target() {\r\n        return _target;\r\n    }\r\n\r\n    public var layoutMask(get, set):Int;\r\n\r\n    function get_layoutMask() {\r\n        return _layoutMask;\r\n    }\r\n\r\n    function set_layoutMask(value:Layout) {\r\n        if (_layoutMask != value) {\r\n            _layoutMask = value;\r\n            _layoutMaskChanged.execute(this);\r\n        }\r\n        return value;\r\n    }\r\n    public var layoutMaskChanged(get, null):Signal<AbstractComponent>;\r\n\r\n    function get_layoutMaskChanged() {\r\n        return _layoutMaskChanged;\r\n    }\r\n\r\n    function set_target(v) {\r\n        if (_target != v) {\r\n            if (v == null) {\r\n                var oldTarget = _target;\r\n\r\n                targetRemoved(oldTarget);\r\n                _target = null;\r\n            }\r\n            else {\r\n                _target = v;\r\n                targetAdded(_target);\r\n            }\r\n        }\r\n        return v;\r\n    }\r\n\r\n    public function targetAdded(node:Node) {\r\n\r\n    }\r\n\r\n    public function targetRemoved(node:Node) {\r\n\r\n    }\r\n\r\n    public function rebindDependencies(componentsMap:ObjectMap<AbstractComponent, AbstractComponent>, nodeMap:ObjectMap<Node, Node>, option:Int) {\r\n\r\n    }\r\n\r\n}\r\n","package example;\r\n\r\nimport minko.file.Loader;\r\nimport minko.render.Texture;\r\nimport minko.scene.Node;\r\nimport minko.scene.Layout.BuiltinLayout;\r\nimport minko.geometry.QuadGeometry;\r\nimport minko.file.AssetLibrary;\r\nimport minko.material.Material;\r\nimport minko.component.Surface;\r\nimport minko.component.AbstractComponent;\r\nclass TextureDebugDisplay extends AbstractComponent {\r\n\r\n    private var _surface:Surface;\r\n    private var _material:Material;\r\n    public var surface(get,null):Surface;\r\n    function get_surface(){\r\n        return _surface;\r\n    }\r\n    public var material(get,null):Material;\r\n    function get_material(){\r\n        return _material;\r\n    }\r\n    public function new() {\r\n        super();\r\n    }\r\n\r\n    public static function create() :TextureDebugDisplay{\r\n        return new TextureDebugDisplay();\r\n    }\r\n\r\n    public function initialize(assets:AssetLibrary, texture:Texture) {\r\n        if (texture == null) {\r\n            throw (\"texture\");\r\n        }\r\n\r\n        var geom = assets.geometry(\"debug-quad\");\r\n\r\n        if (geom==null) {\r\n            geom = QuadGeometry.create(assets.context);\r\n            assets.setGeometry(\"debug-quad\", geom);\r\n        }\r\n\r\n        var fx = assets.effect(\"effect/debug/TextureDebugDisplay.effect\");\r\n\r\n        if (fx==null) {\r\n            var loader =Loader.createbyLoader(assets.loader);\r\n\r\n            loader.options.loadAsynchronously = (false);\r\n            loader.queue(\"effect/debug/TextureDebugDisplay.effect\");\r\n            var _ = loader.complete.connect(function(loader) {\r\n                fx = assets.effect(\"effect/debug/TextureDebugDisplay.effect\");\r\n            });\r\n            loader.load();\r\n        }\r\n\r\n        _material = Material.create();\r\n        _material.data.set(\"texture\", texture);\r\n\r\n        _surface = Surface.create(geom, _material, fx);\r\n        _surface.layoutMask = (BuiltinLayout.DEBUG_ONLY);\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        target.addComponent(_surface);\r\n        target.layout = (target.layout | BuiltinLayout.DEBUG_ONLY);\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        target.removeComponent(_surface);\r\n    }\r\n\r\n\r\n}","/*\r\n * Copyright (c) 2017 Kenton Hamaluik\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at:\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n*/\r\npackage glm;\r\n\r\nusing glm.Mat4;\r\nusing glm.Vec3;\r\n\r\n/**\r\n  Utility functions for 3D math\r\n */\r\n@:expose\r\nclass GLM {\r\n    /**\r\n      Minimum absolute value difference of floats before they are considered equal\r\n     */\r\n    public static var EPSILON:Float =  1.401298E-45;\r\n\r\n    /**\r\n      Utility for linearly interpolating between two values\r\n      @param a The value when `t == 0`\r\n      @param b The value when `t == 1`\r\n      @param t A value between `0` and `1`, not clamped by the function\r\n      @return Float\r\n     */\r\n    public inline static function lerp(a:Float, b:Float, t:Float):Float {\r\n        return a + t * (b - a);\r\n    }\r\n\r\n    /**\r\n      Constructs a 3D translation matrix\r\n      @param translation How far to move in each of the directions\r\n      @param dest Where the result will be stored\r\n      @return Mat4\r\n     */\r\n    public inline static function translate(translation:Vec3, dest:Mat4):Mat4 {\r\n        dest.identity();\r\n        dest.r0c3 = translation.x;\r\n        dest.r1c3 = translation.y;\r\n        dest.r2c3 = translation.z;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Constructs a 3D rotation matrix\r\n      @param rotation The quaternion to use as rotation\r\n      @param dest Where the result will be stored\r\n      @return Mat4\r\n     */\r\n    public inline static function rotate(rotation:Quat, dest:Mat4):Mat4 {\r\n        var x2:Float = rotation.x+rotation.x, y2:Float = rotation.y+rotation.y, z2:Float = rotation.z+rotation.z;\r\n        var xx:Float = rotation.x * x2, xy:Float = rotation.x * y2, xz:Float = rotation.x * z2;\r\n        var yy:Float = rotation.y * y2, yz:Float = rotation.y * z2, zz:Float = rotation.z * z2;\r\n        var wx:Float = rotation.w * x2, wy:Float = rotation.w * y2, wz:Float = rotation.w * z2;\r\n\r\n        dest.r0c0 = 1 - (yy + zz);\r\n        dest.r0c1 = xy - wz;\r\n        dest.r0c2 = xz + wy;\r\n        dest.r0c3 = 0;\r\n\r\n        dest.r1c0 = xy + wz;\r\n        dest.r1c1 = 1 - (xx + zz);\r\n        dest.r1c2 = yz - wx;\r\n        dest.r1c3 = 0;\r\n        \r\n        dest.r2c0 = xz - wy;\r\n        dest.r2c1 = yz + wx;\r\n        dest.r2c2 = 1 - (xx + yy);\r\n        dest.r2c3 = 0;\r\n\r\n        dest.r3c0 = 0;\r\n        dest.r3c1 = 0;\r\n        dest.r3c2 = 0;\r\n        dest.r3c3 = 1;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Constructs a 3D scale matrix\r\n      @param amount How much to scale by in each of the three directions\r\n      @param dest Where the result will be stored\r\n      @return Mat4\r\n     */\r\n    public inline static function scale(amount:Vec3, dest:Mat4):Mat4 {\r\n        dest.identity();\r\n        dest.r0c0 = amount.x;\r\n        dest.r1c1 = amount.y;\r\n        dest.r2c2 = amount.z;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Constructs a complete transformation matrix from translation, rotation, and scale components.\r\n      It should be a fair bit faster than constructing each on their own and multiplying together.\r\n      @param translation The translation vector\r\n      @param rotation The rotation quaternion\r\n      @param scale The scale vector\r\n      @param dest Where to store the result\r\n      @return Mat4\r\n     */\r\n    public inline static function transform(translation:Vec3, rotation:Quat, scale:Vec3, dest:Mat4):Mat4 {\r\n        var x2:Float = rotation.x + rotation.x;\r\n        var y2:Float = rotation.y + rotation.y;\r\n        var z2:Float = rotation.z + rotation.z;\r\n\r\n        var xx:Float = rotation.x * x2;\r\n        var xy:Float = rotation.x * y2;\r\n        var xz:Float = rotation.x * z2;\r\n        var yy:Float = rotation.y * y2;\r\n        var yz:Float = rotation.y * z2;\r\n        var zz:Float = rotation.z * z2;\r\n        var wx:Float = rotation.w * x2;\r\n        var wy:Float = rotation.w * y2;\r\n        var wz:Float = rotation.w * z2;\r\n\r\n        dest.r0c0 = (1 - (yy + zz)) * scale.x;\r\n        dest.r1c0 = (xy + wz) * scale.x;\r\n        dest.r2c0 = (xz - wy) * scale.x;\r\n        dest.r3c0 = 0;\r\n        dest.r0c1 = (xy - wz) * scale.y;\r\n        dest.r1c1 = (1 - (xx + zz)) * scale.y;\r\n        dest.r2c1 = (yz + wx) * scale.y;\r\n        dest.r3c1 = 0;\r\n        dest.r0c2 = (xz + wy) * scale.z;\r\n        dest.r1c2 = (yz - wx) * scale.z;\r\n        dest.r2c2 = (1 - (xx + yy)) * scale.z;\r\n        dest.r3c2 = 0;\r\n        dest.r0c3 = translation.x;\r\n        dest.r1c3 = translation.y;\r\n        dest.r2c3 = translation.z;\r\n        dest.r3c3 = 1;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Constructs a lookat matrix to position a view matrix at `eye`, looking at `centre`, with `up` orienting the view\r\n      @param eye Where the viewer is located\r\n      @param centre Where the viewer is looking at\r\n      @param up A vector pointing `up` for the view\r\n      @param dest Where to store the result\r\n      @return Mat4\r\n     */\r\n    public static function lookAt(eye:Vec3, centre:Vec3, up:Vec3, dest:Mat4):Mat4 {\r\n        var f:Vec3 = Vec3.subtractVec(centre , eye,new Vec3());\r\n        f.normalize(f);\r\n        var s:Vec3 = Vec3.cross(f, up, new Vec3());\r\n        s.normalize(s);\r\n        var u:Vec3 = Vec3.cross(s, f, new Vec3());\r\n\r\n        dest.identity();\r\n        dest.r0c0 = s.x;\r\n        dest.r0c1 = s.y;\r\n        dest.r0c2 = s.z;\r\n        dest.r1c0 = u.x;\r\n        dest.r1c1 = u.y;\r\n        dest.r1c2 = u.z;\r\n        dest.r2c0 =-f.x;\r\n        dest.r2c1 =-f.y;\r\n        dest.r2c2 =-f.z;\r\n        dest.r0c3 = -Vec3.dot(s, eye);\r\n        dest.r1c3 = -Vec3.dot(u, eye);\r\n        dest.r2c3 =  Vec3.dot(f, eye);\r\n\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Constructs a perspective projection matrix\r\n      @see https://github.com/toji/gl-matrix/blob/7fc31d5d292fb65b10aa98186b218a0bdef3a207/src/gl-matrix/mat4.js#L1241-L1271\r\n      @param fovy The vertical field of view in radians\r\n      @param aspectRatio The aspect ratio of the view\r\n      @param near The near clipping plane\r\n      @param far The far clipping plane\r\n      @param dest Where to store the result\r\n      @return Mat4\r\n     */\r\n    public inline static function perspective(fovy:Float, aspectRatio:Float, near:Float, far:Float, dest:Mat4):Mat4 {\r\n        var f:Float = 1 / Math.tan(fovy / 2);\r\n        var nf:Float = 1 / (near - far);\r\n\r\n        dest.r0c0 = f / aspectRatio;\r\n        dest.r1c0 = 0;\r\n        dest.r2c0 = 0;\r\n        dest.r3c0 = 0;\r\n\r\n        dest.r0c1 = 0;\r\n        dest.r1c1 = f;\r\n        dest.r2c1 = 0;\r\n        dest.r3c1 = 0;\r\n        \r\n        dest.r0c2 = 0;\r\n        dest.r1c2 = 0;\r\n        dest.r2c2 = (far + near) * nf;\r\n        dest.r3c2 = -1;\r\n\r\n        dest.r0c3 = 0;\r\n        dest.r1c3 = 0;\r\n        dest.r2c3 = (2 * far * near) * nf;\r\n        dest.r3c3 = 0;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Constructs an orthographic projection matrix\r\n      @param left \r\n      @param right \r\n      @param bottom \r\n      @param top \r\n      @param near \r\n      @param far \r\n      @param dest Where to store the result\r\n      @return Mat4\r\n     */\r\n    public inline static function orthographic(left:Float, right:Float, bottom:Float, top:Float, near:Float=-1, far:Float=1, dest:Mat4):Mat4 {\r\n        var rl:Float = 1 / (right - left);\r\n        var tb:Float = 1 / (top - bottom);\r\n        var fn:Float = 1 / (far - near);\r\n\r\n        dest.r0c0 = 2 * rl;\r\n        dest.r0c1 = 0;\r\n        dest.r0c2 = 0;\r\n        dest.r0c3 = -1 * (left + right) * rl;\r\n\r\n        dest.r1c0 = 0;\r\n        dest.r1c1 = 2 * tb;\r\n        dest.r1c2 = 0;\r\n        dest.r1c3 = -1 * (top + bottom) * tb;\r\n\r\n        dest.r2c0 = 0;\r\n        dest.r2c1 = 0;\r\n        dest.r2c2 = -2 * fn;\r\n        dest.r2c3 = -1 * (far + near) * fn;\r\n\r\n        dest.r3c0 = 0;\r\n        dest.r3c1 = 0;\r\n        dest.r3c2 = 0;\r\n        dest.r3c3 = 1;\r\n        return dest;\r\n    }\r\n\r\n    /**\r\n      Constructs an orthographic projection matrix\r\n      @see https://github.com/toji/gl-matrix/blob/7fc31d5d292fb65b10aa98186b218a0bdef3a207/src/gl-matrix/mat4.js#L1206-L1239\r\n      @param left \r\n      @param right \r\n      @param bottom \r\n      @param top \r\n      @param near \r\n      @param far \r\n      @param dest Where to store the result\r\n      @return Mat4\r\n     */\r\n    public inline static function frustum(left:Float, right:Float, bottom:Float, top:Float, near:Float=-1, far:Float=1, dest:Mat4):Mat4 {\r\n        var rl:Float = 1 / (right - left);\r\n        var tb:Float = 1 / (top - bottom);\r\n        var nf:Float = 1 / (near - far);\r\n\r\n        dest.r0c0 = (near * 2) * rl;\r\n        dest.r1c0 = 0;\r\n        dest.r2c0 = 0;\r\n        dest.r3c0 = 0;\r\n\r\n        dest.r0c1 = 0;\r\n        dest.r1c1 = (near * 2) * tb;\r\n        dest.r2c1 = 0;\r\n        dest.r3c1 = 0;\r\n        \r\n        dest.r0c2 = (right + left) * tb;\r\n        dest.r1c2 = (top + bottom) * tb;\r\n        dest.r2c2 = (far + near) * nf;\r\n        dest.r3c2 = -1;\r\n\r\n        dest.r0c3 = 0;\r\n        dest.r1c3 = 0;\r\n        dest.r2c3 = (far * near * 2) * nf;\r\n        dest.r3c3 = 0;\r\n        return dest;\r\n    }\r\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tLog primarily provides the `trace()` method, which is invoked upon a call to\n\t`trace()` in Haxe code.\n**/\nclass Log {\n\n\t/**\n\t\tFormat the output of `trace` before printing it.\n\t**/\n\tpublic static function formatOutput( v : Dynamic, infos : PosInfos ) : String {\n\t\tvar str = Std.string(v);\n\t\tif( infos == null )\n\t\t\treturn str;\n\t\tvar pstr = infos.fileName + \":\" + infos.lineNumber;\n\t\tif( infos != null && infos.customParams != null ) for( v in infos.customParams ) str += \", \" + Std.string(v);\n\t\treturn pstr+\": \"+str;\n\t}\n\n\t/**\n\t\tOutputs `v` in a platform-dependent way.\n\n\t\tThe second parameter `infos` is injected by the compiler and contains\n\t\tinformation about the position where the `trace()` call was made.\n\n\t\tThis method can be rebound to a custom function:\n\t\t\n\t\t\tvar oldTrace = haxe.Log.trace; // store old function\n\t\t\thaxe.Log.trace = function(v, ?infos) {\n\t\t\t  // handle trace\n\t\t\t}\n\t\t\t...\n\t\t\thaxe.Log.trace = oldTrace;\n\n\t\tIf it is bound to null, subsequent calls to `trace()` will cause an\n\t\texception.\n\t**/\n\tpublic static dynamic function trace( v : Dynamic, ?infos : PosInfos ) : Void {\n\t\tvar str = formatOutput(v,infos);\n\t\t#if js\n\t\tif( js.Syntax.typeof(untyped console) != \"undefined\" && (untyped console).log != null )\n\t\t\t(untyped console).log(str);\n\t\t#elseif lua\n\t\tuntyped __define_feature__(\"use._hx_print\",_hx_print(str));\n\t\t#elseif sys\n\t\tSys.println(str);\n\t\t#else\n\t\tthrow \"Not implemented\"\n\t\t#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tThe Timer class allows you to create asynchronous timers on platforms that\n\tsupport events.\n\n\tThe intended usage is to create an instance of the Timer class with a given\n\tinterval, set its run() method to a custom function to be invoked and\n\teventually call stop() to stop the Timer.\n\n\tNote that a running Timer may or may not prevent the program to exit\n\tautomatically when main() returns.\n\n\tIt is also possible to extend this class and override its run() method in\n\tthe child class.\n**/\nclass Timer {\n\n\t#if (flash || js)\n\t\tprivate var id : Null<Int>;\n\t#elseif java\n\t\tprivate var timer : java.util.Timer;\n\t\tprivate var task : java.util.TimerTask;\n\t#else\n\t\tprivate var event : MainLoop.MainEvent;\n\t#end\n\n\t/**\n\t\tCreates a new timer that will run every `time_ms` milliseconds.\n\n\t\tAfter creating the Timer instance, it calls `this.run` repeatedly,\n\t\twith delays of `time_ms` milliseconds, until `this.stop` is called.\n\n\t\tThe first invocation occurs after `time_ms` milliseconds, not\n\t\timmediately.\n\n\t\tThe accuracy of this may be platform-dependent.\n\t**/\n\tpublic function new( time_ms : Int ){\n\t\t#if flash\n\t\t\tvar me = this;\n\t\t\tid = untyped __global__[\"flash.utils.setInterval\"](function() { me.run(); },time_ms);\n\t\t#elseif js\n\t\t\tvar me = this;\n\t\t\tid = untyped setInterval(function() me.run(),time_ms);\n\t\t#elseif java\n\t\t\ttimer = new java.util.Timer();\n\t\t\ttimer.scheduleAtFixedRate(task = new TimerTask(this), haxe.Int64.ofInt(time_ms), haxe.Int64.ofInt(time_ms));\n\t\t#else\n\t\t\tvar dt = time_ms / 1000;\n\t\t\tevent = MainLoop.add(function() {\n\t\t\t\t@:privateAccess event.nextRun += dt;\n\t\t\t\trun();\n\t\t\t});\n\t\t\tevent.delay(dt);\n\t\t#end\n\t}\n\n\t/**\n\t\tStops `this` Timer.\n\n\t\tAfter calling this method, no additional invocations of `this.run`\n\t\twill occur.\n\n\t\tIt is not possible to restart `this` Timer once stopped.\n\t**/\n\tpublic function stop() {\n\t\t#if (flash || js)\n\t\t\tif( id == null )\n\t\t\t\treturn;\n\t\t\t#if flash\n\t\t\t\tuntyped __global__[\"flash.utils.clearInterval\"](id);\n\t\t\t#elseif js\n\t\t\t\tuntyped clearInterval(id);\n\t\t\t#end\n\t\t\tid = null;\n\t\t#elseif java\n\t\t\tif(timer != null) {\n\t\t\t\ttimer.cancel();\n\t\t\t\ttimer = null;\n\t\t\t}\n\t\t\ttask = null;\n\t\t#else\n\t\t\tif( event != null ) {\n\t\t\t\tevent.stop();\n\t\t\t\tevent = null;\n\t\t\t}\n\t\t#end\n\t}\n\n\t/**\n\t\tThis method is invoked repeatedly on `this` Timer.\n\n\t\tIt can be overridden in a subclass, or rebound directly to a custom\n\t\tfunction:\n\t\t\tvar timer = new haxe.Timer(1000); // 1000ms delay\n\t\t\ttimer.run = function() { ... }\n\n\t\tOnce bound, it can still be rebound to different functions until `this`\n\t\tTimer is stopped through a call to `this.stop`.\n\t**/\n\tpublic dynamic function run() {\n\n\t}\n\n\t/**\n\t\tInvokes `f` after `time_ms` milliseconds.\n\n\t\tThis is a convenience function for creating a new Timer instance with\n\t\t`time_ms` as argument, binding its run() method to `f` and then stopping\n\t\t`this` Timer upon the first invocation.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function delay( f : Void -> Void, time_ms : Int ) {\n\t\tvar t = new haxe.Timer(time_ms);\n\t\tt.run = function() {\n\t\t\tt.stop();\n\t\t\tf();\n\t\t};\n\t\treturn t;\n\t}\n\n\t/**\n\t\tMeasures the time it takes to execute `f`, in seconds with fractions.\n\n\t\tThis is a convenience function for calculating the difference between\n\t\tTimer.stamp() before and after the invocation of `f`.\n\n\t\tThe difference is passed as argument to Log.trace(), with \"s\" appended\n\t\tto denote the unit. The optional `pos` argument is passed through.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function measure<T>( f : Void -> T, ?pos : PosInfos ) : T {\n\t\tvar t0 = stamp();\n\t\tvar r = f();\n\t\tLog.trace((stamp() - t0) + \"s\", pos);\n\t\treturn r;\n\t}\n\n\t/**\n\t\tReturns a timestamp, in seconds with fractions.\n\n\t\tThe value itself might differ depending on platforms, only differences\n\t\tbetween two values make sense.\n\t**/\n\tpublic static inline function stamp() : Float {\n\t\t#if flash\n\t\t\treturn flash.Lib.getTimer() / 1000;\n\t\t#elseif (neko || php)\n\t\t\treturn Sys.time();\n\t\t#elseif js\n\t\t\treturn js.Date.now() / 1000;\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__time_stamp();\n\t\t#elseif python\n\t\t\treturn Sys.cpuTime();\n\t\t#elseif sys\n\t\t\treturn Sys.time();\n\n\t\t#else\n\t\t\treturn 0;\n\t\t#end\n\t}\n\n}\n\n#if java\n@:nativeGen\nprivate class TimerTask extends java.util.TimerTask {\n\tvar timer:Timer;\n\tpublic function new(timer:Timer):Void {\n\t\tsuper();\n\t\tthis.timer = timer;\n\t}\n\n\t@:overload override public function run():Void {\n\t\ttimer.run();\n\t}\n}\n#end\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.crypto;\n\n/**\n    Calculates the Adler32 of the given Bytes.\n*/\nclass Adler32 {\n\n\tvar a1 : Int;\n\tvar a2 : Int;\n\n\tpublic function new() {\n\t\ta1 = 1;\n\t\ta2 = 0;\n\t}\n\n\tpublic function get() {\n\t\treturn (a2 << 16) | a1;\n\t}\n\n\tpublic function update( b : haxe.io.Bytes, pos, len ) {\n\t\tvar a1 = a1, a2 = a2;\n\t\tfor( p in pos...pos + len ) {\n\t\t\tvar c = b.get(p);\n\t\t\ta1 = (a1 + c) % 65521;\n\t\t\ta2 = (a2 + a1) % 65521;\n\t\t}\n\t\tthis.a1 = a1;\n\t\tthis.a2 = a2;\n\t}\n\n\tpublic function equals( a : Adler32 ) {\n\t\treturn a.a1 == a1 && a.a2 == a2;\n\t}\n\n\tpublic function toString() {\n\t\treturn StringTools.hex(a2,8) + StringTools.hex(a1,8);\n\t}\n\n\tpublic static function read( i : haxe.io.Input ) {\n\t\tvar a = new Adler32();\n\t\tvar a2a = i.readByte();\n\t\tvar a2b = i.readByte();\n\t\tvar a1a = i.readByte();\n\t\tvar a1b = i.readByte();\n\t\ta.a1 = (a1a << 8) | a1b;\n\t\ta.a2 = (a2a << 8) | a2b;\n\t\treturn a;\n\t}\n\n\tpublic static function make( b : haxe.io.Bytes ) {\n\t\tvar a = new Adler32();\n\t\ta.update(b,0,b.length);\n\t\treturn a.get();\n\t}\n\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n@:coreApi\nclass Bytes {\n\n\tpublic var length(default,null) : Int;\n\tvar b : js.lib.Uint8Array;\n\tvar data : js.lib.DataView;\n\n\tfunction new(data:BytesData) {\n\t\tthis.length = data.byteLength;\n\t\tthis.b = new js.lib.Uint8Array(data);\n\t\tuntyped {\n\t\t\tb.bufferValue = data; // some impl does not return the same instance in .buffer\n\t\t\tdata.hxBytes = this;\n\t\t\tdata.bytes = this.b;\n\t\t}\n\t}\n\n\tpublic inline function get( pos : Int ) : Int {\n\t\treturn b[pos];\n\t}\n\n\tpublic inline function set( pos : Int, v : Int ) : Void {\n\t\tb[pos] = v;\n\t}\n\n\tpublic function blit( pos : Int, src : Bytes, srcpos : Int, len : Int ) : Void {\n\t\tif( pos < 0 || srcpos < 0 || len < 0 || pos + len > length || srcpos + len > src.length ) throw Error.OutsideBounds;\n\t\tif( srcpos == 0 && len == src.b.byteLength )\n\t\t\tb.set(src.b,pos);\n\t\telse\n\t\t\tb.set(src.b.subarray(srcpos,srcpos+len),pos);\n\t}\n\n\tpublic function fill( pos : Int, len : Int, value : Int ) : Void {\n\t\tfor( i in 0...len )\n\t\t\tset(pos++, value);\n\t}\n\n\tpublic function sub( pos : Int, len : Int ) : Bytes {\n\t\tif( pos < 0 || len < 0 || pos + len > length ) throw Error.OutsideBounds;\n\t\treturn new Bytes(b.buffer.slice(pos+b.byteOffset,pos+b.byteOffset+len));\n\t}\n\n\tpublic function compare( other : Bytes ) : Int {\n\t\tvar b1 = b;\n\t\tvar b2 = other.b;\n\t\tvar len = (length < other.length) ? length : other.length;\n\t\tfor( i in 0...len )\n\t\t\tif( b1[i] != b2[i] )\n\t\t\t\treturn b1[i] - b2[i];\n\t\treturn length - other.length;\n\t}\n\n\tinline function initData() : Void {\n\t\tif( data == null ) data = new js.lib.DataView(b.buffer, b.byteOffset, b.byteLength);\n\t}\n\n\tpublic function getDouble( pos : Int ) : Float {\n\t\tinitData();\n\t\treturn data.getFloat64(pos, true);\n\t}\n\n\tpublic function getFloat( pos : Int ) : Float {\n\t\tinitData();\n\t\treturn data.getFloat32(pos, true);\n\t}\n\n\tpublic function setDouble( pos : Int, v : Float ) : Void {\n\t\tinitData();\n\t\tdata.setFloat64(pos, v, true);\n\t}\n\n\tpublic function setFloat( pos : Int, v : Float ) : Void {\n\t\tinitData();\n\t\tdata.setFloat32(pos, v, true);\n\t}\n\n\tpublic function getUInt16( pos : Int ) : Int {\n\t\tinitData();\n\t\treturn data.getUint16(pos, true);\n\t}\n\n\tpublic function setUInt16( pos : Int, v : Int ) : Void {\n\t\tinitData();\n\t\tdata.setUint16(pos, v, true);\n\t}\n\n\tpublic function getInt32( pos : Int ) : Int {\n\t\tinitData();\n\t\treturn data.getInt32(pos, true);\n\t}\n\n\tpublic function setInt32( pos : Int, v : Int ) : Void {\n\t\tinitData();\n\t\tdata.setInt32(pos, v, true);\n\t}\n\n\tpublic function getInt64( pos : Int ) : haxe.Int64 {\n\t\treturn Int64.make(getInt32(pos + 4),getInt32(pos));\n\t}\n\n\tpublic function setInt64( pos : Int, v : haxe.Int64 ) : Void {\n\t\tsetInt32(pos, v.low);\n\t\tsetInt32(pos + 4, v.high);\n\t}\n\n\tpublic function getString( pos : Int, len : Int, ?encoding : Encoding ) : String {\n\t\tif( pos < 0 || len < 0 || pos + len > length ) throw Error.OutsideBounds;\n\t\tif( encoding == null ) encoding = UTF8;\n\t\tvar s = \"\";\n\t\tvar b = b;\n\t\tvar i = pos;\n\t\tvar max = pos+len;\n\t\tswitch( encoding ) {\n\t\tcase UTF8:\n\t\t\tvar debug = pos > 0;\n\t\t\t// utf8-decode and utf16-encode\n\t\t\twhile( i < max ) {\n\t\t\t\tvar c = b[i++];\n\t\t\t\tif( c < 0x80 ) {\n\t\t\t\t\tif( c == 0 ) break;\n\t\t\t\t\ts += String.fromCharCode(c);\n\t\t\t\t} else if( c < 0xE0 )\n\t\t\t\t\ts += String.fromCharCode( ((c & 0x3F) << 6) | (b[i++] & 0x7F) );\n\t\t\t\telse if( c < 0xF0 ) {\n\t\t\t\t\tvar c2 = b[i++];\n\t\t\t\t\ts += String.fromCharCode( ((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (b[i++] & 0x7F) );\n\t\t\t\t} else {\n\t\t\t\t\tvar c2 = b[i++];\n\t\t\t\t\tvar c3 = b[i++];\n\t\t\t\t\tvar u = ((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 & 0x7F) << 6) | (b[i++] & 0x7F);\n\t\t\t\t\ts += String.fromCharCode(u);\n\t\t\t\t}\n\t\t\t}\n\t\tcase RawNative:\n\t\t\twhile( i < max ) {\n\t\t\t\tvar c = b[i++] | (b[i++] << 8);\n\t\t\t\ts += String.fromCharCode(c);\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\n\t@:deprecated(\"readString is deprecated, use getString instead\")\n\t@:noCompletion\n\tpublic inline function readString(pos:Int, len:Int):String {\n\t\treturn getString(pos, len);\n\t}\n\n\tpublic function toString() : String {\n\t\treturn getString(0,length);\n\t}\n\n\tpublic function toHex() : String {\n\t\tvar s = new StringBuf();\n\t\tvar chars = [];\n\t\tvar str = \"0123456789abcdef\";\n\t\tfor( i in 0...str.length )\n\t\t\tchars.push(str.charCodeAt(i));\n\t\tfor( i in 0...length ) {\n\t\t\tvar c = get(i);\n\t\t\ts.addChar(chars[c >> 4]);\n\t\t\ts.addChar(chars[c & 15]);\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\tpublic inline function getData() : BytesData {\n\t\treturn untyped b.bufferValue;\n\t}\n\n\tpublic static inline function alloc( length : Int ) : Bytes {\n\t\treturn new Bytes(new BytesData(length));\n\t}\n\n\tpublic static function ofString( s : String, ?encoding : Encoding ) : Bytes {\n\t\tif( encoding == RawNative ) {\n\t\t\tvar buf = new js.lib.Uint8Array(s.length << 1);\n\t\t\tfor( i in 0...s.length ) {\n\t\t\t\tvar c : Int = StringTools.fastCodeAt(s,i);\n\t\t\t\tbuf[i << 1] = c & 0xFF;\n\t\t\t\tbuf[(i << 1)|1] = c >> 8;\n\t\t\t}\n\t\t\treturn new Bytes(buf.buffer);\n\t\t}\n\t\tvar a = new Array();\n\t\t// utf16-decode and utf8-encode\n\t\tvar i = 0;\n\t\twhile( i < s.length ) {\n\t\t\tvar c : Int = StringTools.fastCodeAt(s,i++);\n\t\t\t// surrogate pair\n\t\t\tif( 0xD800 <= c && c <= 0xDBFF )\n\t\t\t    c = (c - 0xD7C0 << 10) | (StringTools.fastCodeAt(s,i++) & 0x3FF);\n\t\t\tif( c <= 0x7F )\n\t\t\t\ta.push(c);\n\t\t\telse if( c <= 0x7FF ) {\n\t\t\t\ta.push( 0xC0 | (c >> 6) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t} else if( c <= 0xFFFF ) {\n\t\t\t\ta.push( 0xE0 | (c >> 12) );\n\t\t\t\ta.push( 0x80 | ((c >> 6) & 63) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t} else {\n\t\t\t\ta.push( 0xF0 | (c >> 18) );\n\t\t\t\ta.push( 0x80 | ((c >> 12) & 63) );\n\t\t\t\ta.push( 0x80 | ((c >> 6) & 63) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t}\n\t\t}\n\t\treturn new Bytes(new js.lib.Uint8Array(a).buffer);\n\t}\n\n\tpublic static function ofData( b : BytesData ) : Bytes {\n\t\tvar hb = untyped b.hxBytes;\n\t\tif( hb != null ) return hb;\n\t\treturn new Bytes(b);\n\t}\n\t\n\tpublic static function ofHex( s : String ) : Bytes {\t\t\n\t\tif ( (s.length & 1) != 0 ) throw \"Not a hex string (odd number of digits)\";\n\t\tvar a = new Array();\n\t\tvar i = 0;\n\t\tvar len = s.length >> 1;\n\t\twhile( i < len ) {\n\t\t\tvar high = StringTools.fastCodeAt(s, i*2);\n\t\t\tvar low = StringTools.fastCodeAt(s, i*2 + 1);\n\t\t\thigh = (high & 0xF) + ( (high & 0x40) >> 6 ) * 9;\n\t\t\tlow = (low & 0xF) + ( (low & 0x40) >> 6 ) * 9;\n\t\t\ta.push( ( (high << 4) | low)  & 0xFF );\n\t\t\ti++;\n\t\t}\n\n\t\treturn new Bytes(new js.lib.Uint8Array(a).buffer);\n\t}\n\n\tpublic inline static function fastGet( b : BytesData, pos : Int ) : Int {\n\t\t// this requires that we have wrapped it with haxe.io.Bytes beforehand\n\t\treturn untyped b.bytes[pos];\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.crypto;\n\n/**\n\tAllows one to encode/decode String and bytes using Base64 encoding.\n**/\nclass Base64 {\n\n\tpublic static var CHARS(default,null) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\tpublic static var BYTES(default,null) = haxe.io.Bytes.ofString(CHARS);\n\n\tpublic static function encode( bytes : haxe.io.Bytes, complement = true ) : String {\n\t\tvar str = new BaseCode(BYTES).encodeBytes(bytes).toString();\n\t\tif( complement )\n\t\t\tswitch (bytes.length % 3) {\n\t\t\tcase 1:\n\t\t\t\tstr += \"==\";\n\t\t\tcase 2:\n\t\t\t\tstr += \"=\";\n\t\t\tdefault:\n\t\t\t}\n\t\treturn str;\n\t}\n\n\tpublic static function decode( str : String, complement = true ) : haxe.io.Bytes {\n\t\tif( complement )\n\t\t\twhile( str.charCodeAt(str.length-1) == \"=\".code )\n\t\t\t\tstr = str.substr(0,-1);\n\t\treturn new BaseCode(BYTES).decodeBytes(haxe.io.Bytes.ofString(str));\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.crypto;\n\n/**\n\tAllows one to encode/decode String and bytes using a power of two base dictionary.\n**/\nclass BaseCode {\n\n\tvar base : haxe.io.Bytes;\n\tvar nbits : Int;\n\tvar tbl : Array<Int>;\n\n\tpublic function new( base : haxe.io.Bytes ) {\n\t\tvar len = base.length;\n\t\tvar nbits = 1;\n\t\twhile( len > 1 << nbits )\n\t\t\tnbits++;\n\t\tif( nbits > 8 || len != 1 << nbits )\n\t\t\tthrow \"BaseCode : base length must be a power of two.\";\n\t\tthis.base = base;\n\t\tthis.nbits = nbits;\n\t}\n\n\tpublic function encodeBytes( b : haxe.io.Bytes ) : haxe.io.Bytes {\n\t\t#if (neko && !interp)\n\t\treturn haxe.io.Bytes.ofData( base_encode(b.getData(),base.getData()) );\n\t\t#else\n\t\tvar nbits = this.nbits;\n\t\tvar base = this.base;\n\t\tvar size = Std.int(b.length * 8 / nbits);\n\t\tvar out = haxe.io.Bytes.alloc(size + (((b.length * 8) % nbits == 0) ? 0 : 1) );\n\t\tvar buf = 0;\n\t\tvar curbits = 0;\n\t\tvar mask = (1 << nbits) - 1;\n\t\tvar pin = 0;\n\t\tvar pout = 0;\n\t\twhile( pout < size ) {\n\t\t\twhile( curbits < nbits ) {\n\t\t\t\tcurbits += 8;\n\t\t\t\tbuf <<= 8;\n\t\t\t\tbuf |= b.get(pin++);\n\t\t\t}\n\t\t\tcurbits -= nbits;\n\t\t\tout.set(pout++,base.get((buf >> curbits) & mask));\n\t\t}\n\t\tif( curbits > 0 )\n\t\t\tout.set(pout++,base.get((buf << (nbits - curbits)) & mask));\n\t\treturn out;\n\t\t#end\n\t}\n\n\tfunction initTable() {\n\t\tvar tbl = new Array();\n\t\tfor( i in 0...256 )\n\t\t\ttbl[i] = -1;\n\t\tfor( i in 0...base.length )\n\t\t\ttbl[base.get(i)] = i;\n\t\tthis.tbl = tbl;\n\t}\n\n\tpublic function decodeBytes( b : haxe.io.Bytes ) : haxe.io.Bytes {\n\t\t#if (neko && !interp)\n\t\treturn haxe.io.Bytes.ofData( base_decode(b.getData(),base.getData()) );\n\t\t#else\n\t\tvar nbits = this.nbits;\n\t\tvar base = this.base;\n\t\tif( this.tbl == null ) initTable();\n\t\tvar tbl = this.tbl;\n\t\tvar size = (b.length * nbits) >> 3;\n\t\tvar out = haxe.io.Bytes.alloc(size);\n\t\tvar buf = 0;\n\t\tvar curbits = 0;\n\t\tvar pin = 0;\n\t\tvar pout = 0;\n\t\twhile( pout < size ) {\n\t\t\twhile( curbits < 8 ) {\n\t\t\t\tcurbits += nbits;\n\t\t\t\tbuf <<= nbits;\n\t\t\t\tvar i = tbl[b.get(pin++)];\n\t\t\t\tif( i == -1 )\n\t\t\t\t\tthrow \"BaseCode : invalid encoded char\";\n\t\t\t\tbuf |= i;\n\t\t\t}\n\t\t\tcurbits -= 8;\n\t\t\tout.set(pout++,(buf >> curbits) & 0xFF);\n\t\t}\n\t\treturn out;\n\t\t#end\n\t}\n\n\tpublic function encodeString( s : String ) {\n\t\t#if (neko && !interp)\n\t\treturn neko.NativeString.toString( base_encode(neko.NativeString.ofString(s),base.getData()) );\n\t\t#else\n\t\treturn encodeBytes(haxe.io.Bytes.ofString(s)).toString();\n\t\t#end\n\t}\n\n\tpublic function decodeString( s : String ) {\n\t\t#if (neko && !interp)\n\t\treturn neko.NativeString.toString( base_decode(neko.NativeString.ofString(s),base.getData()) );\n\t\t#else\n\t\treturn decodeBytes(haxe.io.Bytes.ofString(s)).toString();\n\t\t#end\n\t}\n\n\tpublic static function encode( s : String, base : String ) {\n\t\tvar b = new BaseCode(haxe.io.Bytes.ofString(base));\n\t\treturn b.encodeString(s);\n\t}\n\n\tpublic static function decode( s : String, base : String ) {\n\t\tvar b = new BaseCode(haxe.io.Bytes.ofString(base));\n\t\treturn b.decodeString(s);\n\t}\n\n\t#if neko\n\tprivate static var base_encode = neko.Lib.load(\"std\",\"base_encode\",2);\n\tprivate static var base_decode = neko.Lib.load(\"std\",\"base_decode\",2);\n\t#end\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.ds;\n\n/**\n\tA linked-list of elements. The list is composed of element container objects\n\tthat are chained together. It is optimized so that adding or removing an\n\telement does not imply copying the whole list content every time.\n\n\t@see https://haxe.org/manual/std-List.html\n**/\nclass List<T> {\n\n\tprivate var h : ListNode<T>;\n\tprivate var q : ListNode<T>;\n\n\t/**\n\t\tThe length of `this` List.\n\t**/\n\tpublic var length(default,null) : Int;\n\n\t/**\n\t\tCreates a new empty list.\n\t**/\n\tpublic function new() {\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tAdds element `item` at the end of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function add( item : T ) {\n\t\tvar x = ListNode.create(item, null);\n\t\tif( h == null )\n\t\t\th = x;\n\t\telse\n\t\t\tq.next = x;\n\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tAdds element `item` at the beginning of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function push( item : T ) {\n\t\tvar x = ListNode.create(item, h);\n\t\th = x;\n\t\tif( q == null )\n\t\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function first() : Null<T> {\n\t\treturn if( h == null ) null else h.item;\n\t}\n\n\t/**\n\t\tReturns the last element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function last() : Null<T> {\n\t\treturn if( q == null ) null else q.item;\n\t}\n\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThe element is removed from `this` List.\n\t**/\n\tpublic function pop() : Null<T> {\n\t\tif( h == null )\n\t\t\treturn null;\n\t\tvar x = h.item;\n\t\th = h.next;\n\t\tif( h == null )\n\t\t\tq = null;\n\t\tlength--;\n\t\treturn x;\n\t}\n\n\t/**\n\t\tTells if `this` List is empty.\n\t**/\n\tpublic function isEmpty() : Bool {\n\t\treturn (h == null);\n\t}\n\n\t/**\n\t\tEmpties `this` List.\n\n\t\tThis function does not traverse the elements, but simply sets the\n\t\tinternal references to null and `this.length` to 0.\n\t**/\n\tpublic function clear() : Void {\n\t\th = null;\n\t\tq = null;\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tRemoves the first occurrence of `v` in `this` List.\n\n\t\tIf `v` is found by checking standard equality, it is removed from `this`\n\t\tList and the function returns true.\n\n\t\tOtherwise, false is returned.\n\t**/\n\tpublic function remove( v : T ) : Bool {\n\t\tvar prev:ListNode<T> = null;\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tif( l.item == v ) {\n\t\t\t\tif( prev == null )\n\t\t\t\t\th = l.next;\n\t\t\t\telse\n\t\t\t\t\tprev.next = l.next;\n\t\t\t\tif( q == l )\n\t\t\t\t\tq = prev;\n\t\t\t\tlength--;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tprev = l;\n\t\t\tl = l.next;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tReturns an iterator on the elements of the list.\n\t**/\n\tpublic inline function iterator() : ListIterator<T> {\n\t\treturn new ListIterator<T>(h);\n\t}\n\n\t/**\n\t\tReturns an iterator of the List indices and values.\n\t**/\n\t@:pure @:runtime public inline function keyValueIterator() : ListKeyValueIterator<T> {\n\t\treturn new ListKeyValueIterator(h);\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List.\n\n\t\tThe result is enclosed in { } with the individual elements being\n\t\tseparated by a comma.\n\t**/\n\tpublic function toString() {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\ts.add(\"{\");\n\t\twhile( l != null ) {\n\t\t\tif( first )\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(\", \");\n\t\t\ts.add(Std.string(l.item));\n\t\t\tl = l.next;\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List, with `sep` separating\n\t\teach element.\n\t**/\n\tpublic function join(sep : String) {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tif( first )\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(sep);\n\t\t\ts.add(l.item);\n\t\t\tl = l.next;\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a list filtered with `f`. The returned list will contain all\n\t\telements for which `f(x) == true`.\n\t**/\n\tpublic function filter( f : T -> Bool ) {\n\t\tvar l2 = new List();\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tvar v = l.item;\n\t\t\tl = l.next;\n\t\t\tif( f(v) )\n\t\t\t\tl2.add(v);\n\t\t}\n\t\treturn l2;\n\t}\n\n\t/**\n\t\tReturns a new list where all elements have been converted by the\n\t\tfunction `f`.\n\t**/\n\tpublic function map<X>(f : T -> X) : List<X> {\n\t\tvar b = new List();\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tvar v = l.item;\n\t\t\tl = l.next;\n\t\t\tb.add(f(v));\n\t\t}\n\t\treturn b;\n\t}\n\n}\n\n#if neko\nprivate extern class ListNode<T> extends neko.NativeArray<Dynamic> {\n\tvar item(get,set):T;\n\tvar next(get,set):ListNode<T>;\n\tprivate inline function get_item():T return this[0];\n\tprivate inline function set_item(v:T):T return this[0] = v;\n\tprivate inline function get_next():ListNode<T> return this[1];\n\tprivate inline function set_next(v:ListNode<T>):ListNode<T> return this[1] = v;\n\tinline static function create<T>(item:T, next:ListNode<T>):ListNode<T> {\n\t\treturn untyped __dollar__array(item, next);\n\t}\n}\n#else\nprivate class ListNode<T> {\n\tpublic var item:T;\n\tpublic var next:ListNode<T>;\n\tpublic function new(item:T, next:ListNode<T>) {\n\t\tthis.item = item;\n\t\tthis.next = next;\n\t}\n\textern public inline static function create<T>(item:T, next:ListNode<T>):ListNode<T> {\n\t\treturn new ListNode(item, next);\n\t}\n}\n#end\n\nprivate class ListIterator<T> {\n\tvar head:ListNode<T>;\n\n\tpublic inline function new(head:ListNode<T>) {\n\t\tthis.head = head;\n\t}\n\n\tpublic inline function hasNext():Bool {\n\t\treturn head != null;\n\t}\n\n\tpublic inline function next():T {\n\t\tvar val = head.item;\n\t\thead = head.next;\n\t\treturn val;\n\t}\n}\n\nprivate class ListKeyValueIterator<T> {\n\tvar idx:Int;\n\tvar head:ListNode<T>;\n\n\tpublic inline function new(head:ListNode<T>) {\n\t\tthis.head = head;\n\t\tthis.idx = 0;\n\t}\n\n\tpublic inline function hasNext():Bool {\n\t\treturn head != null;\n\t}\n\n\tpublic inline function next():{key:Int,value:T} {\n\t\tvar val = head.item;\n\t\thead = head.next;\n\t\treturn {value: val, key:idx++};\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of h software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and h permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n@:coreApi\nclass ObjectMap<K:{ }, V> implements haxe.Constraints.IMap<K,V> {\n\n\tstatic var count:Int;\n\n\t// initialize count through __init__ magic, because these are generated\n\t// before normal static initializations for which ObjectMap should be ready to use\n\t// see https://github.com/HaxeFoundation/haxe/issues/6792\n\tstatic inline function __init__():Void count = 0;\n\n\tstatic inline function assignId(obj: { } ):Int {\n\t\treturn untyped obj.__id__ = ++count;\n\t}\n\n\tstatic inline function getId(obj: { } ):Int {\n\t\treturn untyped obj.__id__;\n\t}\n\n\tvar h : { };\n\n\tpublic function new() : Void {\n\t\th = { __keys__: {} };\n\t}\n\n\tpublic function set(key:K, value:V):Void untyped {\n\t\tvar id : Int = getId(key) || assignId(key);\n\t\th[id] = value;\n\t\th.__keys__[id] = key;\n\t}\n\n\tpublic inline function get(key:K):Null<V> {\n\t\treturn untyped h[getId(key)];\n\t}\n\n\tpublic inline function exists(key:K):Bool {\n\t\treturn untyped h.__keys__[getId(key)] != null;\n\t}\n\n\tpublic function remove( key : K ) : Bool {\n\t\tvar id = getId(key);\n\t\tif ( untyped h.__keys__[id] == null ) return false;\n\t\tuntyped  __js__(\"delete\")(h[id]);\n\t\tuntyped  __js__(\"delete\")(h.__keys__[id]);\n\t\treturn true;\n\t}\n\n\tpublic function keys() : Iterator<K> {\n\t\tvar a = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h.__keys__ ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\ta.push(h.__keys__[key]);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a.iterator();\n\t}\n\n\tpublic function iterator() : Iterator<V> {\n\t\treturn untyped {\n\t\t\tref : h,\n\t\t\tit : keys(),\n\t\t\thasNext : function() { return __this__.it.hasNext(); },\n\t\t\tnext : function() { var i = __this__.it.next(); return __this__.ref[getId(i)]; }\n\t\t};\n\t}\n\n\t@:runtime public inline function keyValueIterator() : KeyValueIterator<K, V> {\n\t\treturn new haxe.iterators.MapKeyValueIterator(this);\n\t}\n\n\tpublic function copy() : ObjectMap<K,V> {\n\t\tvar copied = new ObjectMap();\n\t\tfor(key in keys()) copied.set(key, get(key));\n\t\treturn copied;\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar it = keys();\n\t\tfor( i in it ) {\n\t\t\ts.add(Std.string(i));\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(i)));\n\t\t\tif( it.hasNext() )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n}","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.ds;\n\nprivate class StringMapIterator<T> {\n\tvar map : StringMap<T>;\n\tvar keys : Array<String>;\n\tvar index : Int;\n\tvar count : Int;\n\tpublic inline function new(map:StringMap<T>, keys:Array<String>) {\n\t\tthis.map = map;\n\t\tthis.keys = keys;\n\t\tthis.index = 0;\n\t\tthis.count = keys.length;\n\t}\n\tpublic inline function hasNext() {\n\t\treturn index < count;\n\t}\n\tpublic inline function next() {\n\t\treturn map.get(keys[index++]);\n\t}\n}\n\n@:coreApi class StringMap<T> implements haxe.Constraints.IMap<String,T> {\n\n\tprivate var h : Dynamic;\n\tprivate var rh : Dynamic;\n\n\tpublic inline function new() : Void {\n\t\th = {};\n\t}\n\n\tinline function isReserved(key:String) : Bool {\n\t\treturn untyped __js__(\"__map_reserved\")[key] != null;\n\t}\n\n\tpublic inline function set( key : String, value : T ) : Void {\n\t\tif( isReserved(key) )\n\t\t\tsetReserved(key, value);\n\t\telse\n\t\t\th[cast key] = value;\n\t}\n\n\tpublic inline function get( key : String ) : Null<T> {\n\t\tif( isReserved(key) )\n\t\t\treturn getReserved(key);\n\t\treturn h[cast key];\n\t}\n\n\tpublic inline function exists( key : String ) : Bool {\n\t\tif( isReserved(key) )\n\t\t\treturn existsReserved(key);\n\t\treturn h.hasOwnProperty(key);\n\t}\n\n\tfunction setReserved( key : String, value : T ) : Void {\n\t\tif( rh == null ) rh = {};\n\t\trh[cast \"$\"+key] = value;\n\t}\n\n\tfunction getReserved( key : String ) : Null<T> {\n\t\treturn rh == null ? null : rh[cast \"$\"+key];\n\t}\n\n\tfunction existsReserved( key : String ) : Bool {\n\t\tif( rh == null ) return false;\n\t\treturn (cast rh).hasOwnProperty(\"$\"+key);\n\t}\n\n\tpublic function remove( key : String ) : Bool {\n\t\tif( isReserved(key) ) {\n\t\t\tkey = \"$\" + key;\n\t\t\tif( rh == null || !rh.hasOwnProperty(key) ) return false;\n\t\t\tjs.Syntax.delete(rh, key);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif( !h.hasOwnProperty(key) )\n\t\t\t\treturn false;\n\t\t\tjs.Syntax.delete(h, key);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function keys() : Iterator<String> {\n\t\treturn arrayKeys().iterator();\n\t}\n\n\tfunction arrayKeys() : Array<String> {\n\t\tvar out = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\tout.push(key);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\tif( rh != null ) untyped {\n\t\t\t__js__(\"for( var key in this.rh ) {\");\n\t\t\t\tif( key.charCodeAt(0) == \"$\".code )\n\t\t\t\t\tout.push(key.substr(1));\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn out;\n\t}\n\n\tpublic inline function iterator() : Iterator<T> {\n\t\treturn new StringMapIterator(this, arrayKeys());\n\t}\n\n\t@:runtime public inline function keyValueIterator() : KeyValueIterator<String, T> {\n\t\treturn new haxe.iterators.MapKeyValueIterator(this);\n\t}\n\n\tpublic function copy() : StringMap<T> {\n\t\tvar copied = new StringMap();\n\t\tfor(key in keys()) copied.set(key, get(key));\n\t\treturn copied;\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar keys = arrayKeys();\n\t\tfor( i in 0...keys.length ) {\n\t\t\tvar k = keys[i];\n\t\t\ts.add(k);\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(k)));\n\t\t\tif( i < keys.length-1 )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\tstatic function __init__() : Void {\n\t\tuntyped __js__(\"var __map_reserved = {};\");\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.format;\n\n/**\n\tAn implementation of JSON parser in Haxe.\n\n\tThis class is used by `haxe.Json` when native JSON implementation\n\tis not available.\n\n\t@see https://haxe.org/manual/std-Json-parsing.html\n**/\nclass JsonParser {\n\n\t/**\n\t\tParses given JSON-encoded `str` and returns the resulting object.\n\n\t\tJSON objects are parsed into anonymous structures and JSON arrays\n\t\tare parsed into `Array<Dynamic>`.\n\n\t\tIf given `str` is not valid JSON, an exception will be thrown.\n\n\t\tIf `str` is null, the result is unspecified.\n\t**/\n\tstatic public inline function parse(str : String) : Dynamic {\n\t\treturn new JsonParser(str).doParse();\n\t}\n\n\tvar str : String;\n\tvar pos : Int;\n\n\tfunction new( str : String ) {\n\t\tthis.str = str;\n\t\tthis.pos = 0;\n\t}\n\n\tfunction doParse() : Dynamic {\n\t\tvar result = parseRec();\n\t\tvar c;\n\t\twhile( !StringTools.isEof(c = nextChar()) ) {\n\t\t\tswitch( c ) {\n\t\t\t\tcase ' '.code, '\\r'.code, '\\n'.code, '\\t'.code:\n\t\t\t\t\t// allow trailing whitespace\n\t\t\t\tdefault:\n\t\t\t\t\tinvalidChar();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction parseRec() : Dynamic {\n\t\twhile( true ) {\n\t\t\tvar c = nextChar();\n\t\t\tswitch( c ) {\n\t\t\tcase ' '.code, '\\r'.code, '\\n'.code, '\\t'.code:\n\t\t\t\t// loop\n\t\t\tcase '{'.code:\n\t\t\t\tvar obj = {}, field = null, comma : Null<Bool> = null;\n\t\t\t\twhile( true ) {\n\t\t\t\t\tvar c = nextChar();\n\t\t\t\t\tswitch( c ) {\n\t\t\t\t\tcase ' '.code, '\\r'.code, '\\n'.code, '\\t'.code:\n\t\t\t\t\t\t// loop\n\t\t\t\t\tcase '}'.code:\n\t\t\t\t\t\tif( field != null || comma == false )\n\t\t\t\t\t\t\tinvalidChar();\n\t\t\t\t\t\treturn obj;\n\t\t\t\t\tcase ':'.code:\n\t\t\t\t\t\tif( field == null )\n\t\t\t\t\t\t\tinvalidChar();\n\t\t\t\t\t\tReflect.setField(obj,field,parseRec());\n\t\t\t\t\t\tfield = null;\n\t\t\t\t\t\tcomma = true;\n\t\t\t\t\tcase ','.code:\n\t\t\t\t\t\tif( comma ) comma = false else invalidChar();\n\t\t\t\t\tcase '\"'.code:\n\t\t\t\t\t\tif( field != null || comma ) invalidChar();\n\t\t\t\t\t\tfield = parseString();\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tinvalidChar();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase '['.code:\n\t\t\t\tvar arr = [], comma : Null<Bool> = null;\n\t\t\t\twhile( true ) {\n\t\t\t\t\tvar c = nextChar();\n\t\t\t\t\tswitch( c ) {\n\t\t\t\t\tcase ' '.code, '\\r'.code, '\\n'.code, '\\t'.code:\n\t\t\t\t\t\t// loop\n\t\t\t\t\tcase ']'.code:\n\t\t\t\t\t\tif( comma == false ) invalidChar();\n\t\t\t\t\t\treturn arr;\n\t\t\t\t\tcase ','.code:\n\t\t\t\t\t\tif( comma ) comma = false else invalidChar();\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif( comma ) invalidChar();\n\t\t\t\t\t\tpos--;\n\t\t\t\t\t\tarr.push(parseRec());\n\t\t\t\t\t\tcomma = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase 't'.code:\n\t\t\t\tvar save = pos;\n\t\t\t\tif( nextChar() != 'r'.code || nextChar() != 'u'.code || nextChar() != 'e'.code ) {\n\t\t\t\t\tpos = save;\n\t\t\t\t\tinvalidChar();\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\tcase 'f'.code:\n\t\t\t\tvar save = pos;\n\t\t\t\tif( nextChar() != 'a'.code || nextChar() != 'l'.code || nextChar() != 's'.code || nextChar() != 'e'.code ) {\n\t\t\t\t\tpos = save;\n\t\t\t\t\tinvalidChar();\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\tcase 'n'.code:\n\t\t\t\tvar save = pos;\n\t\t\t\tif( nextChar() != 'u'.code || nextChar() != 'l'.code || nextChar() != 'l'.code ) {\n\t\t\t\t\tpos = save;\n\t\t\t\t\tinvalidChar();\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\tcase '\"'.code:\n\t\t\t\treturn parseString();\n\t\t\tcase '0'.code, '1'.code,'2'.code,'3'.code,'4'.code,'5'.code,'6'.code,'7'.code,'8'.code,'9'.code,'-'.code:\n\t\t\t\treturn parseNumber(c);\n\t\t\tdefault:\n\t\t\t\tinvalidChar();\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction parseString() {\n\t\tvar start = pos;\n\t\tvar buf = null;\n\t\twhile( true ) {\n\t\t\tvar c = nextChar();\n\t\t\tif( c == '\"'.code )\n\t\t\t\tbreak;\n\t\t\tif( c == '\\\\'.code ) {\n\t\t\t\tif (buf == null) {\n\t\t\t\t\tbuf = new StringBuf();\n\t\t\t\t}\n\t\t\t\tbuf.addSub(str,start, pos - start - 1);\n\t\t\t\tc = nextChar();\n\t\t\t\tswitch( c ) {\n\t\t\t\tcase \"r\".code: buf.addChar(\"\\r\".code);\n\t\t\t\tcase \"n\".code: buf.addChar(\"\\n\".code);\n\t\t\t\tcase \"t\".code: buf.addChar(\"\\t\".code);\n\t\t\t\tcase \"b\".code: buf.addChar(8);\n\t\t\t\tcase \"f\".code: buf.addChar(12);\n\t\t\t\tcase \"/\".code, '\\\\'.code, '\"'.code: buf.addChar(c);\n\t\t\t\tcase 'u'.code:\n\t\t\t\t\tvar uc = Std.parseInt(\"0x\" + str.substr(pos, 4));\n\t\t\t\t\tpos += 4;\n\t\t\t\t\t#if (neko || (cpp&&!hxcpp_smart_strings))\n\t\t\t\t\tif( uc <= 0x7F )\n\t\t\t\t\t\tbuf.addChar(uc);\n\t\t\t\t\telse if( uc <= 0x7FF ) {\n\t\t\t\t\t\tbuf.addChar(0xC0 | (uc >> 6));\n\t\t\t\t\t\tbuf.addChar(0x80 | (uc & 63));\n\t\t\t\t\t} else if( uc <= 0xFFFF ) {\n\t\t\t\t\t\tbuf.addChar(0xE0 | (uc >> 12));\n\t\t\t\t\t\tbuf.addChar(0x80 | ((uc >> 6) & 63));\n\t\t\t\t\t\tbuf.addChar(0x80 | (uc & 63));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuf.addChar(0xF0 | (uc >> 18));\n\t\t\t\t\t\tbuf.addChar(0x80 | ((uc >> 12) & 63));\n\t\t\t\t\t\tbuf.addChar(0x80 | ((uc >> 6) & 63));\n\t\t\t\t\t\tbuf.addChar(0x80 | (uc & 63));\n\t\t\t\t\t}\n\t\t\t\t\t#else\n\t\t\t\t\tbuf.addChar(uc);\n\t\t\t\t\t#end\n\t\t\t\tdefault:\n\t\t\t\t\tthrow \"Invalid escape sequence \\\\\" + String.fromCharCode(c) + \" at position \" + (pos - 1);\n\t\t\t\t}\n\t\t\t\tstart = pos;\n\t\t\t}\n\t\t\t#if (neko || (cpp&&!hxcpp_smart_strings) )\n\t\t\t// ensure utf8 chars are not cut\n\t\t\telse if( c >= 0x80 ) {\n\t\t\t\tpos++;\n\t\t\t\tif( c >= 0xFC ) pos += 4;\n\t\t\t\telse if( c >= 0xF8 ) pos += 3;\n\t\t\t\telse if( c >= 0xF0 ) pos += 2;\n\t\t\t\telse if( c >= 0xE0 ) pos++;\n\t\t\t}\n\t\t\t#end\n\t\t\telse if( StringTools.isEof(c) )\n\t\t\t\tthrow \"Unclosed string\";\n\t\t}\n\t\tif (buf == null) {\n\t\t\treturn str.substr(start, pos - start - 1);\n\t\t}\n\t\telse {\n\t\t\tbuf.addSub(str,start, pos - start - 1);\n\t\t\treturn buf.toString();\n\t\t}\n\t}\n\n\tinline function parseNumber( c : Int ) : Dynamic {\n\t\tvar start = pos - 1;\n\t\tvar minus = c == '-'.code, digit = !minus, zero = c == '0'.code;\n\t\tvar point = false, e = false, pm = false, end = false;\n\t\twhile( true ) {\n\t\t\tc = nextChar();\n\t\t\tswitch( c ) {\n\t\t\t\tcase '0'.code :\n\t\t\t\t\tif (zero && !point) invalidNumber(start);\n\t\t\t\t\tif (minus) {\n\t\t\t\t\t\tminus = false; zero = true;\n\t\t\t\t\t}\n\t\t\t\t\tdigit = true;\n\t\t\t\tcase '1'.code,'2'.code,'3'.code,'4'.code,'5'.code,'6'.code,'7'.code,'8'.code,'9'.code :\n\t\t\t\t\tif (zero && !point) invalidNumber(start);\n\t\t\t\t\tif (minus) minus = false;\n\t\t\t\t\tdigit = true; zero = false;\n\t\t\t\tcase '.'.code :\n\t\t\t\t\tif (minus || point || e) invalidNumber(start);\n\t\t\t\t\tdigit = false; point = true;\n\t\t\t\tcase 'e'.code, 'E'.code :\n\t\t\t\t\tif (minus || zero || e) invalidNumber(start);\n\t\t\t\t\tdigit = false; e = true;\n\t\t\t\tcase '+'.code, '-'.code :\n\t\t\t\t\tif (!e || pm) invalidNumber(start);\n\t\t\t\t\tdigit = false; pm = true;\n\t\t\t\tdefault :\n\t\t\t\t\tif (!digit) invalidNumber(start);\n\t\t\t\t\tpos--;\n\t\t\t\t\tend = true;\n\t\t\t}\n\t\t\tif (end) break;\n\t\t}\n\n\t\tvar f = Std.parseFloat(str.substr(start, pos - start));\n\t\tvar i = Std.int(f);\n\t\treturn if( i == f ) i else f;\n\t}\n\n\tinline function nextChar() {\n\t\treturn StringTools.fastCodeAt(str,pos++);\n\t}\n\n\tfunction invalidChar() {\n\t\tpos--; // rewind\n\t\tthrow \"Invalid char \"+StringTools.fastCodeAt(str,pos)+\" at position \"+pos;\n\t}\n\n\tfunction invalidNumber( start : Int ) {\n\t\tthrow \"Invalid number at position \"+start+\": \" + str.substr(start, pos - start);\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n@:coreApi\nclass BytesBuffer {\n\n\tvar buffer : js.lib.ArrayBuffer;\n\tvar view : js.lib.DataView;\n\tvar u8 : js.lib.Uint8Array;\n\tvar pos : Int;\n\tvar size : Int;\n\n\tpublic var length(get,never) : Int;\n\n\tpublic function new() {\n\t\tpos = 0;\n\t\tsize = 0;\n\t}\n\n\tinline function get_length() : Int {\n\t\treturn pos;\n\t}\n\n\tpublic function addByte( byte : Int ) : Void {\n\t\tif( pos == size ) grow(1);\n\t\tview.setUint8(pos++, byte);\n\t}\n\n\tpublic function add( src : Bytes ) : Void {\n\t\tif( pos + src.length > size ) grow(src.length);\n\t\tif( size == 0 ) return;\n\t\tvar sub = new js.lib.Uint8Array(@:privateAccess src.b.buffer, @:privateAccess src.b.byteOffset, src.length);\n\t\tu8.set(sub, pos);\n\t\tpos += src.length;\n\t}\n\n\tpublic function addString( v : String, ?encoding : Encoding ) : Void {\n\t\tadd(Bytes.ofString(v,encoding));\n\t}\n\n\tpublic function addInt32( v : Int ) : Void {\n\t\tif( pos + 4 > size ) grow(4);\n\t\tview.setInt32(pos, v, true);\n\t\tpos += 4;\n\t}\n\n\tpublic function addInt64( v : haxe.Int64 ) : Void {\n\t\tif( pos + 8 > size ) grow(8);\n\t\tview.setInt32(pos, v.low, true);\n\t\tview.setInt32(pos + 4, v.high, true);\n\t\tpos += 8;\n\t}\n\n\tpublic function addFloat( v : Float ) : Void {\n\t\tif( pos + 4 > size ) grow(4);\n\t\tview.setFloat32(pos, v, true);\n\t\tpos += 4;\n\t}\n\n\tpublic function addDouble( v : Float ) : Void {\n\t\tif( pos + 8 > size ) grow(8);\n\t\tview.setFloat64(pos, v, true);\n\t\tpos += 8;\n\t}\n\n\tpublic function addBytes( src : Bytes, pos : Int, len : Int ) : Void {\n\t\tif( pos < 0 || len < 0 || pos + len > src.length ) throw Error.OutsideBounds;\n\t\tif( this.pos + len > size ) grow(len);\n\t\tif( size == 0 ) return;\n\t\tvar sub = new js.lib.Uint8Array(@:privateAccess src.b.buffer, @:privateAccess src.b.byteOffset + pos, len);\n\t\tu8.set(sub, this.pos);\n\t\tthis.pos += len;\n\t}\n\n\tfunction grow( delta : Int ) : Void {\n\t\tvar req = pos + delta;\n\t\tvar nsize = size == 0 ? 16 : size;\n\t\twhile( nsize < req )\n\t\t\tnsize = (nsize * 3) >> 1;\n\t\tvar nbuf = new js.lib.ArrayBuffer(nsize);\n\t\tvar nu8 = new js.lib.Uint8Array(nbuf);\n\t\tif( size > 0 )\n\t\t\tnu8.set(u8);\n\t\tsize = nsize;\n\t\tbuffer = nbuf;\n\t\tu8 = nu8;\n\t\tview = new js.lib.DataView(buffer);\n\t}\n\n\tpublic function getBytes() : Bytes @:privateAccess {\n\t\tif( size == 0 )\n\t\t\treturn haxe.io.Bytes.alloc(0);\n\t\tvar b = new Bytes(buffer);\n\t\tb.length = pos;\n\t\treturn b;\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tAn Input is an abstract reader. See other classes in the `haxe.io` package\n\tfor several possible implementations.\n\n\tAll functions which read data throw `Eof` when the end of the stream\n\tis reached.\n**/\nclass Input {\n\n\t/**\n\t\tEndianness (word byte order) used when reading numbers.\n\n\t\tIf `true`, big-endian is used, otherwise `little-endian` is used.\n\t**/\n\tpublic var bigEndian(default,set) : Bool;\n\n\t#if cs\n\tprivate var helper:BytesData;\n\t#elseif java\n\tprivate var helper:java.nio.ByteBuffer;\n\t#end\n\n\t/**\n\t\tRead and return one byte.\n\t**/\n\tpublic function readByte() : Int {\n\t#if cpp\n\t\tthrow \"Not implemented\";\n\t#else\n\t\treturn throw \"Not implemented\";\n\t#end\n\t}\n\n\t/**\n\t\tRead `len` bytes and write them into `s` to the position specified by `pos`.\n\n\t\tReturns the actual length of read data that can be smaller than `len`.\n\n\t\tSee `readFullBytes` that tries to read the exact amount of specified bytes.\n\t**/\n\tpublic function readBytes( s : Bytes, pos : Int, len : Int ) : Int {\n\t\tvar k = len;\n\t\tvar b = #if (js || hl) @:privateAccess s.b #else s.getData() #end;\n\t\tif( pos < 0 || len < 0 || pos + len > s.length )\n\t\t\tthrow Error.OutsideBounds;\n\t\ttry {\n\t\t\twhile( k > 0 ) {\n\t\t\t\t#if neko\n\t\t\t\t\tuntyped __dollar__sset(b,pos,readByte());\n\t\t\t\t#elseif php\n\t\t\t\t\tb.set(pos, readByte());\n\t\t\t\t#elseif cpp\n\t\t\t\t\tb[pos] = untyped readByte();\n\t\t\t\t#else\n\t\t\t\t\tb[pos] = cast readByte();\n\t\t\t\t#end\n\t\t\t\tpos++;\n\t\t\t\tk--;\n\t\t\t}\n\t\t} catch (eof: haxe.io.Eof){}\n\t\treturn len-k;\n\t}\n\n\t/**\n\t\tClose the input source.\n\n\t\tBehaviour while reading after calling this method is unspecified.\n\t**/\n\tpublic function close() : Void {\n\t}\n\n\tfunction set_bigEndian( b : Bool ) : Bool {\n\t\tbigEndian = b;\n\t\treturn b;\n\t}\n\n\t/* ------------------ API ------------------ */\n\n\t/**\n\t\tRead and return all available data.\n\n\t\tThe `bufsize` optional argument specifies the size of chunks by\n\t\twhich data is read. Its default value is target-specific.\n\t**/\n\tpublic function readAll( ?bufsize : Int ) : Bytes {\n\t\tif( bufsize == null )\n\t\t#if php\n\t\t\tbufsize = 8192; // default value for PHP and max under certain circumstances\n\t\t#else\n\t\t\tbufsize = (1 << 14); // 16 Ko\n\t\t#end\n\n\t\tvar buf = Bytes.alloc(bufsize);\n\t\tvar total = new haxe.io.BytesBuffer();\n\t\ttry {\n\t\t\twhile( true ) {\n\t\t\t\tvar len = readBytes(buf,0,bufsize);\n\t\t\t\tif( len == 0 )\n\t\t\t\t\tthrow Error.Blocked;\n\t\t\t\ttotal.addBytes(buf,0,len);\n\t\t\t}\n\t\t} catch( e : Eof ) { }\n\t\treturn total.getBytes();\n\t}\n\n\t/**\n\t\tRead `len` bytes and write them into `s` to the position specified by `pos`.\n\n\t\tUnlike `readBytes`, this method tries to read the exact `len` amount of bytes.\n\t**/\n\tpublic function readFullBytes( s : Bytes, pos : Int, len : Int ) : Void {\n\t\twhile( len > 0 ) {\n\t\t\tvar k = readBytes(s,pos,len);\n\t\t\tif (k == 0)\n\t\t\t\tthrow Error.Blocked;\n\t\t\tpos += k;\n\t\t\tlen -= k;\n\t\t}\n\t}\n\n\t/**\n\t\tRead and return `nbytes` bytes.\n\t**/\n\tpublic function read( nbytes : Int ) : Bytes {\n\t\tvar s = Bytes.alloc(nbytes);\n\t\tvar p = 0;\n\t\twhile( nbytes > 0 ) {\n\t\t\tvar k = readBytes(s,p,nbytes);\n\t\t\tif( k == 0 ) throw Error.Blocked;\n\t\t\tp += k;\n\t\t\tnbytes -= k;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tRead a string until a character code specified by `end` is occurred.\n\n\t\tThe final character is not included in the resulting string.\n\t**/\n\tpublic function readUntil( end : Int ) : String {\n\t\tvar buf = new BytesBuffer();\n\t\tvar last : Int;\n\t\twhile( (last = readByte()) != end )\n\t\t\tbuf.addByte( last );\n\t\treturn buf.getBytes().toString();\n\t}\n\n\t/**\n\t\tRead a line of text separated by CR and/or LF bytes.\n\n\t\tThe CR/LF characters are not included in the resulting string.\n\t**/\n\tpublic function readLine() : String {\n\t\tvar buf = new BytesBuffer();\n\t\tvar last : Int;\n\t\tvar s;\n\t\ttry {\n\t\t\twhile( (last = readByte()) != 10 )\n\t\t\t\tbuf.addByte( last );\n\t\t\ts = buf.getBytes().toString();\n\t\t\tif( s.charCodeAt(s.length-1) == 13 ) s = s.substr(0,-1);\n\t\t} catch( e : Eof ) {\n\t\t\ts = buf.getBytes().toString();\n\t\t\tif( s.length == 0 )\n\t\t\t\t#if neko neko.Lib.rethrow #else throw #end (e);\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tRead a 32-bit floating point number.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readFloat() : Float {\n\t\treturn FPHelper.i32ToFloat(readInt32());\n\t}\n\n\t/**\n\t\tRead a 64-bit double-precision floating point number.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readDouble() : Float {\n\t\tvar i1 = readInt32();\n\t\tvar i2 = readInt32();\n\t\treturn bigEndian ? FPHelper.i64ToDouble(i2,i1) : FPHelper.i64ToDouble(i1,i2);\n\t}\n\n\t/**\n\t\tRead a 8-bit signed integer.\n\t**/\n\tpublic function readInt8() : Int {\n\t\tvar n = readByte();\n\t\tif( n >= 128 )\n\t\t\treturn n - 256;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tRead a 16-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readInt16() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\tvar n = bigEndian ? ch2 | (ch1 << 8) : ch1 | (ch2 << 8);\n\t\tif( n & 0x8000 != 0 )\n\t\t\treturn n - 0x10000;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tRead a 16-bit unsigned integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readUInt16() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\treturn bigEndian ? ch2 | (ch1 << 8) : ch1 | (ch2 << 8);\n\t}\n\n\t/**\n\t\tRead a 24-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readInt24() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\tvar ch3 = readByte();\n\t\tvar n = bigEndian ? ch3 | (ch2 << 8) | (ch1 << 16) : ch1 | (ch2 << 8) | (ch3 << 16);\n\t\tif( n & 0x800000 != 0 )\n\t\t\treturn n - 0x1000000;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tRead a 24-bit unsigned integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readUInt24() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\tvar ch3 = readByte();\n\t\treturn bigEndian ? ch3 | (ch2 << 8) | (ch1 << 16) : ch1 | (ch2 << 8) | (ch3 << 16);\n\t}\n\n\t/**\n\t\tRead a 32-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function readInt32() : Int {\n\t\tvar ch1 = readByte();\n\t\tvar ch2 = readByte();\n\t\tvar ch3 = readByte();\n\t\tvar ch4 = readByte();\n#if (php || python)\n\t\t// php will overflow integers.  Convert them back to signed 32-bit ints.\n\t\tvar n = bigEndian ? ch4 | (ch3 << 8) | (ch2 << 16) | (ch1 << 24) : ch1 | (ch2 << 8) | (ch3 << 16) | (ch4 << 24);\n\t\tif (n & 0x80000000 != 0)\n\t\t\treturn ( n | 0x80000000);\n\t\telse return n;\n#elseif lua\n\t\tvar n = bigEndian ? ch4 | (ch3 << 8) | (ch2 << 16) | (ch1 << 24) : ch1 | (ch2 << 8) | (ch3 << 16) | (ch4 << 24);\n\t\treturn lua.Boot.clamp(n);\n#else\n\t\treturn bigEndian ? ch4 | (ch3 << 8) | (ch2 << 16) | (ch1 << 24) : ch1 | (ch2 << 8) | (ch3 << 16) | (ch4 << 24);\n#end\n\t}\n\n\t/**\n\t\tRead and `len` bytes as a string.\n\t**/\n\tpublic function readString( len : Int, ?encoding : Encoding ) : String {\n\t\tvar b = Bytes.alloc(len);\n\t\treadFullBytes(b,0,len);\n\t\t#if neko\n\t\treturn neko.Lib.stringReference(b);\n\t\t#else\n\t\treturn b.getString(0, len, encoding);\n\t\t#end\n\t}\n\n#if neko\n\tstatic var _float_of_bytes = neko.Lib.load(\"std\",\"float_of_bytes\",2);\n\tstatic var _double_of_bytes = neko.Lib.load(\"std\",\"double_of_bytes\",2);\n\tstatic function __init__() untyped {\n\t\tInput.prototype.bigEndian = false;\n\t}\n#end\n\n#if (flash || js || python)\n\tfunction getDoubleSig(bytes:Array<Int>)\n\t{\n\t\treturn (((bytes[1]&0xF) << 16) | (bytes[2] << 8) | bytes[3] ) * 4294967296. +\n\t\t\t(bytes[4] >> 7) * 2147483648 +\n\t\t\t(((bytes[4]&0x7F) << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7]);\n\t}\n#end\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\nclass BytesInput extends Input {\n\tvar b : #if js js.lib.Uint8Array #elseif hl hl.Bytes #else BytesData #end;\n\t#if !flash\n\tvar pos : Int;\n\tvar len : Int;\n\tvar totlen : Int;\n\t#end\n\n\t/** The current position in the stream in bytes. */\n\tpublic var position(get,set) : Int;\n\n\t/** The length of the stream in bytes. */\n\tpublic var length(get,never) : Int;\n\n\tpublic function new( b : Bytes, ?pos : Int, ?len : Int ) {\n\t\tif( pos == null ) pos = 0;\n\t\tif( len == null ) len = b.length - pos;\n\t\tif( pos < 0 || len < 0 || pos + len > b.length ) throw Error.OutsideBounds;\n\t\t#if flash\n\t\tvar ba = b.getData();\n\t\tba.position = pos;\n\t\tif( len != ba.bytesAvailable ) {\n\t\t\t// truncate\n\t\t\tthis.b = new flash.utils.ByteArray();\n\t\t\tba.readBytes(this.b,0,len);\n\t\t} else\n\t\t\tthis.b = ba;\n\t\tthis.b.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t#else\n\t\tthis.b = #if (js || hl) @:privateAccess b.b #else b.getData() #end;\n\t\tthis.pos = pos;\n\t\tthis.len = len;\n\t\tthis.totlen = len;\n\t\t#end\n\t\t#if python\n\t\tbigEndian = false;\n\t\t#end\n\t}\n\n\tinline function get_position() : Int {\n\t\t#if flash\n\t\treturn b.position;\n\t\t#else\n\t\treturn pos;\n\t\t#end\n\t}\n\n\tinline function get_length() : Int {\n\t\t#if flash\n\t\treturn b.length;\n\t\t#else\n\t\treturn totlen;\n\t\t#end\n\t}\n\n\tfunction set_position( p : Int ) : Int {\n\t\tif( p < 0 ) p = 0;\n\t\telse if( p > length ) p = length;\n\t\t#if flash\n\t\treturn b.position = p;\n\t\t#else\n\t\tlen = totlen - p;\n\t\treturn pos = p;\n\t\t#end\n\t}\n\n\tpublic override function readByte() : Int {\n\t\t#if flash\n\t\t\treturn try b.readUnsignedByte() catch( e : Dynamic ) throw new Eof();\n\t\t#else\n\t\t\tif( this.len == 0 )\n\t\t\t\tthrow new Eof();\n\t\t\tlen--;\n\t\t\t#if neko\n\t\t\treturn untyped __dollar__sget(b,pos++);\n\t\t\t#elseif cpp\n\t\t\treturn untyped b[pos++];\n\t\t\t#elseif java\n\t\t\treturn untyped b[pos++] & 0xFF;\n\t\t\t#else\n\t\t\treturn b[pos++];\n\t\t\t#end\n\t\t#end\n\t}\n\n\tpublic override function readBytes( buf : Bytes, pos : Int, len : Int ) : Int {\n\t\t#if !neko\n\t\t\tif( pos < 0 || len < 0 || pos + len > buf.length )\n\t\t\t\tthrow Error.OutsideBounds;\n\t\t#end\n\t\t#if flash\n\t\t\tvar avail : Int = b.bytesAvailable;\n\t\t\tif( len > avail && avail > 0 ) len = avail;\n\t\t\ttry b.readBytes(buf.getData(),pos,len) catch( e : Dynamic ) throw new Eof();\n\t\t#elseif java\n\t\t\tvar avail : Int = this.len;\n\t\t\tif ( len > avail ) len = avail;\n\t\t\tif (len == 0)\n\t\t\t\tthrow new Eof();\n\t\t\tjava.lang.System.arraycopy(this.b, this.pos, buf.getData(), pos, len);\n\t\t\tthis.pos += len;\n\t\t\tthis.len -= len;\n\t\t#elseif cs\n\t\t\tvar avail : Int = this.len;\n\t\t\tif ( len > avail ) len = avail;\n\t\t\tif (len == 0)\n\t\t\t\tthrow new Eof();\n\t\t\tcs.system.Array.Copy(this.b,this.pos, buf.getData(), pos, len);\n\t\t\tthis.pos += len;\n\t\t\tthis.len -= len;\n\t\t#else\n\t\t\tif( this.len == 0 && len > 0 )\n\t\t\t\tthrow new Eof();\n\t\t\tif( this.len < len )\n\t\t\t\tlen = this.len;\n\t\t\t#if neko\n\t\t\ttry untyped __dollar__sblit(buf.getData(),pos,b,this.pos,len) catch( e : Dynamic ) throw Error.OutsideBounds;\n\t\t\t#elseif hl\n\t\t\t@:privateAccess buf.b.blit(pos, b, this.pos, len);\n\t\t\t#else\n\t\t\tvar b1 = b;\n\t\t\tvar b2 = #if js @:privateAccess buf.b #else buf.getData() #end;\n\t\t\tfor( i in 0...len )\n\t\t\t\tb2[pos+i] = b1[this.pos+i];\n\t\t\t#end\n\t\t\tthis.pos += len;\n\t\t\tthis.len -= len;\n\t\t#end\n\t\treturn len;\n\t}\n\n\t#if flash\n\t@:dox(hide)\n\toverride function set_bigEndian(e) {\n\t\tbigEndian = e;\n\t\tb.endian = e ? flash.utils.Endian.BIG_ENDIAN : flash.utils.Endian.LITTLE_ENDIAN;\n\t\treturn e;\n\t}\n\n\t@:dox(hide)\n\toverride function readFloat() {\n\t\treturn try b.readFloat() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readDouble() {\n\t\treturn try b.readDouble() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readInt8() {\n\t\treturn try b.readByte() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readInt16() {\n\t\treturn try b.readShort() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readUInt16() : Int {\n\t\treturn try b.readUnsignedShort() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readInt32() : Int {\n\t\treturn try b.readInt() catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t@:dox(hide)\n\toverride function readString( len : Int, ?encoding : Encoding ) {\n\t\treturn try encoding == RawNative ? b.readMultiByte(len,\"unicode\") : b.readUTFBytes(len) catch( e : Dynamic ) throw new Eof();\n\t}\n\n\t#end\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tAn Output is an abstract write. A specific output implementation will only\n\thave to override the `writeByte` and maybe the `write`, `flush` and `close`\n\tmethods. See `File.write` and `String.write` for two ways of creating an\n\tOutput.\n**/\nclass Output {\n\n\t/**\n\t\tEndianness (word byte order) used when writing numbers.\n\n\t\tIf `true`, big-endian is used, otherwise `little-endian` is used.\n\t**/\n\tpublic var bigEndian(default, set) : Bool;\n\n\t#if java\n\tprivate var helper:java.nio.ByteBuffer;\n\t#end\n\n\t/**\n\t\tWrite one byte.\n\t**/\n\tpublic function writeByte( c : Int ) : Void {\n\t\tthrow \"Not implemented\";\n\t}\n\n\t/**\n\t\tWrite `len` bytes from `s` starting by position specified by `pos`.\n\n\t\tReturns the actual length of written data that can differ from `len`.\n\n\t\tSee `writeFullBytes` that tries to write the exact amount of specified bytes.\n\t**/\n\tpublic function writeBytes( s : Bytes, pos : Int, len : Int ) : Int {\n\t\t#if !neko\n\t\tif( pos < 0 || len < 0 || pos + len > s.length )\n\t\t\tthrow Error.OutsideBounds;\n\t\t#end\n\t\tvar b = #if js @:privateAccess s.b #else s.getData() #end;\n\t\tvar k = len;\n\t\twhile( k > 0 ) {\n\t\t\t#if neko\n\t\t\t\twriteByte(untyped __dollar__sget(b,pos));\n\t\t\t#elseif php\n\t\t\t\twriteByte(b.get(pos));\n\t\t\t#elseif cpp\n\t\t\t\twriteByte(untyped b[pos]);\n\t\t\t#elseif hl\n\t\t\t\twriteByte(b[pos]);\n\t\t\t#else\n\t\t\t\twriteByte(untyped b[pos]);\n\t\t\t#end\n\t\t\tpos++;\n\t\t\tk--;\n\t\t}\n\t\treturn len;\n\t}\n\n\t/**\n\t\tFlush any buffered data.\n\t**/\n\tpublic function flush() {\n\t}\n\n\t/**\n\t\tClose the output.\n\n\t\tBehaviour while writing after calling this method is unspecified.\n\t**/\n\tpublic function close() {\n\t}\n\n\tfunction set_bigEndian( b ) {\n\t\tbigEndian = b;\n\t\treturn b;\n\t}\n\n\t/* ------------------ API ------------------ */\n\n\t/**\n\t\tWrite all bytes stored in `s`.\n\t**/\n\tpublic function write( s : Bytes ) : Void {\n\t\tvar l = s.length;\n\t\tvar p = 0;\n\t\twhile( l > 0 ) {\n\t\t\tvar k = writeBytes(s,p,l);\n\t\t\tif( k == 0 ) throw Error.Blocked;\n\t\t\tp += k;\n\t\t\tl -= k;\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `len` bytes from `s` starting by position specified by `pos`.\n\n\t\tUnlike `writeBytes`, this method tries to write the exact `len` amount of bytes.\n\t**/\n\tpublic function writeFullBytes( s : Bytes, pos : Int, len : Int ) {\n\t\twhile( len > 0 ) {\n\t\t\tvar k = writeBytes(s,pos,len);\n\t\t\tpos += k;\n\t\t\tlen -= k;\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `x` as 32-bit floating point number.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeFloat( x : Float ) {\n\t\twriteInt32(FPHelper.floatToI32(x));\n\t}\n\n\t/**\n\t\tWrite `x` as 64-bit double-precision floating point number.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeDouble( x : Float ) {\n\t\tvar i64 = FPHelper.doubleToI64(x);\n\t\tif( bigEndian ) {\n\t\t\twriteInt32(i64.high);\n\t\t\twriteInt32(i64.low);\n\t\t} else {\n\t\t\twriteInt32(i64.low);\n\t\t\twriteInt32(i64.high);\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `x` as 8-bit signed integer.\n\t**/\n\tpublic function writeInt8( x : Int ) {\n\t\tif( x < -0x80 || x >= 0x80 )\n\t\t\tthrow Error.Overflow;\n\t\twriteByte(x & 0xFF);\n\t}\n\n\t/**\n\t\tWrite `x` as 16-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeInt16( x : Int ) {\n\t\tif( x < -0x8000 || x >= 0x8000 ) throw Error.Overflow;\n\t\twriteUInt16(x & 0xFFFF);\n\t}\n\n\t/**\n\t\tWrite `x` as 16-bit unsigned integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeUInt16( x : Int ) {\n\t\tif( x < 0 || x >= 0x10000 ) throw Error.Overflow;\n\t\tif( bigEndian ) {\n\t\t\twriteByte(x >> 8);\n\t\t\twriteByte(x & 0xFF);\n\t\t} else {\n\t\t\twriteByte(x & 0xFF);\n\t\t\twriteByte(x >> 8);\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `x` as 24-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeInt24( x : Int ) {\n\t\tif( x < -0x800000 || x >= 0x800000 ) throw Error.Overflow;\n\t\twriteUInt24(x & 0xFFFFFF);\n\t}\n\n\t/**\n\t\tWrite `x` as 24-bit unsigned integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeUInt24( x : Int ) {\n\t\tif( x < 0 || x >= 0x1000000 ) throw Error.Overflow;\n\t\tif( bigEndian ) {\n\t\t\twriteByte(x >> 16);\n\t\t\twriteByte((x >> 8) & 0xFF);\n\t\t\twriteByte(x & 0xFF);\n\t\t} else {\n\t\t\twriteByte(x & 0xFF);\n\t\t\twriteByte((x >> 8) & 0xFF);\n\t\t\twriteByte(x >> 16);\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `x` as 32-bit signed integer.\n\n\t\tEndianness is specified by the `bigEndian` property.\n\t**/\n\tpublic function writeInt32( x : Int ) {\n\t\tif( bigEndian ) {\n\t\t\twriteByte( x >>> 24 );\n\t\t\twriteByte( (x >> 16) & 0xFF );\n\t\t\twriteByte( (x >> 8) & 0xFF );\n\t\t\twriteByte( x & 0xFF );\n\t\t} else {\n\t\t\twriteByte( x & 0xFF );\n\t\t\twriteByte( (x >> 8) & 0xFF );\n\t\t\twriteByte( (x >> 16) & 0xFF );\n\t\t\twriteByte( x >>> 24 );\n\t\t}\n\t}\n\n\t/**\n\t\tInform that we are about to write at least `nbytes` bytes.\n\n\t\tThe underlying implementation can allocate proper working space depending\n\t\ton this information, or simply ignore it. This is not a mandatory call\n\t\tbut a tip and is only used in some specific cases.\n\t**/\n\tpublic function prepare( nbytes : Int ) {\n\t}\n\n\t/**\n\t\tRead all available data from `i` and write it.\n\n\t\tThe `bufsize` optional argument specifies the size of chunks by\n\t\twhich data is read and written. Its default value is 4096.\n\t**/\n\tpublic function writeInput( i : Input, ?bufsize : Int ) {\n\t\tif( bufsize == null )\n\t\t\tbufsize = 4096;\n\t\tvar buf = Bytes.alloc(bufsize);\n\t\ttry {\n\t\t\twhile( true ) {\n\t\t\t\tvar len = i.readBytes(buf,0,bufsize);\n\t\t\t\tif( len == 0 )\n\t\t\t\t\tthrow Error.Blocked;\n\t\t\t\tvar p = 0;\n\t\t\t\twhile( len > 0 ) {\n\t\t\t\t\tvar k = writeBytes(buf,p,len);\n\t\t\t\t\tif( k == 0 )\n\t\t\t\t\t\tthrow Error.Blocked;\n\t\t\t\t\tp += k;\n\t\t\t\t\tlen -= k;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch( e : Eof ) {\n\t\t}\n\t}\n\n\t/**\n\t\tWrite `s` string.\n\t**/\n\tpublic function writeString( s : String, ?encoding : Encoding ) {\n\t\t#if neko\n\t\tvar b = untyped new Bytes(s.length,s.__s);\n\t\t#else\n\t\tvar b = Bytes.ofString(s, encoding);\n\t\t#end\n\t\twriteFullBytes(b,0,b.length);\n\t}\n\n#if neko\n\tstatic function __init__() untyped {\n\t\tOutput.prototype.bigEndian = false;\n\t}\n#end\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\nclass BytesOutput extends Output {\n\n\t#if flash\n\tvar b : flash.utils.ByteArray;\n\t#else\n\tvar b : BytesBuffer;\n\t#end\n\n\t/** The length of the stream in bytes. **/\n\tpublic var length(get,never) : Int;\n\n\tpublic function new() {\n\t\t#if flash\n\t\tb = new flash.utils.ByteArray();\n\t\tb.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t#else\n\t\tb = new BytesBuffer();\n\t\t#end\n\t\t#if python\n\t\tbigEndian = false;\n\t\t#end\n\t}\n\n\tinline function get_length() : Int {\n\t\treturn b.length;\n\t}\n\n\toverride function writeByte(c) {\n\t\t#if flash\n\t\tb.writeByte(c);\n\t\t#else\n\t\tb.addByte(c);\n\t\t#end\n\t}\n\n\toverride function writeBytes( buf : Bytes, pos, len ) : Int {\n\t\t#if flash\n\t\tif( pos < 0 || len < 0 || pos + len > buf.length ) throw Error.OutsideBounds;\n\t\tb.writeBytes(buf.getData(),pos,len);\n\t\t#else\n\t\tb.addBytes(buf,pos,len);\n\t\t#end\n\t\treturn len;\n\t}\n\n\t#if flash\n\t// optimized operations\n\n\t@:dox(hide)\n\toverride function set_bigEndian(e) {\n\t\tbigEndian = e;\n\t\tb.endian = e ? flash.utils.Endian.BIG_ENDIAN : flash.utils.Endian.LITTLE_ENDIAN;\n\t\treturn e;\n\t}\n\n\t@:dox(hide)\n\toverride function writeFloat( f : Float ) {\n\t\tb.writeFloat(f);\n\t}\n\n\t@:dox(hide)\n\toverride function writeDouble( f : Float ) {\n\t\tb.writeDouble(f);\n\t}\n\n\t@:dox(hide)\n\toverride function writeInt8( x : Int ) {\n\t\tif( x < -0x80 || x >= 0x80 )\n\t\t\tthrow Error.Overflow;\n\t\tb.writeByte(x);\n\t}\n\n\t@:dox(hide)\n\toverride function writeInt16( x : Int ) {\n\t\tif( x < -0x8000 || x >= 0x8000 ) throw Error.Overflow;\n\t\tb.writeShort(x);\n\t}\n\n\t@:dox(hide)\n\toverride function writeUInt16( x : Int ) {\n\t\tif( x < 0 || x >= 0x10000 ) throw Error.Overflow;\n\t\tb.writeShort(x);\n\t}\n\n\t@:dox(hide)\n\toverride function writeInt32( x : Int ) {\n\t\tb.writeInt(x);\n\t}\n\n\t@:dox(hide)\n\toverride function prepare( size : Int ) {\n\t\tif( size > 0 ) b[size-1] = b[size-1];\n\t}\n\n\t@:dox(hide)\n\toverride function writeString( s : String, ?encoding : Encoding ) {\n\t\tif( encoding == RawNative )\n\t\t\tb.writeMultiByte(s, \"unicode\");\n\t\telse\n\t\t\tb.writeUTFBytes(s);\n\t}\n\n\t#end\n\n\t/**\n\t\tReturns the `Bytes` of this output.\n\n\t\tThis function should not be called more than once on a given\n\t\t`BytesOutput` instance.\n\t**/\n\tpublic function getBytes() : Bytes {\n\t\t#if flash\n\t\tvar bytes = b;\n\t\tb = null;\n\t\treturn untyped new Bytes(bytes.length,bytes);\n\t\t#else\n\t\treturn b.getBytes();\n\t\t#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tThis exception is raised when reading while data is no longer available in the `haxe.io.Input`.\n**/\nclass Eof {\n\tpublic function new() {\n\t}\n\n\t@:ifFeature(\"haxe.io.Eof.*\")\n\tfunction toString() {\n\t\treturn \"Eof\";\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tHelper that converts between floating point and binary representation.\n\tAlways works in low-endian encoding.\n**/\nclass FPHelper {\n\n\t#if neko_v21\n\t// stored in helper\n\t#elseif neko\n\tstatic var i64tmp = new sys.thread.Tls<Int64>();\n\t#elseif !(java || cs || cpp)\n\tstatic var i64tmp = Int64.ofInt(0);\n\n\tstatic inline var LN2 = 0.6931471805599453; // Math.log(2)\n\n\tstatic inline function _i32ToFloat(i: Int): Float {\n\t\tvar sign = 1 - ((i >>> 31) << 1);\n\t\tvar e = (i >> 23) & 0xff;\n\t\tif (e == 255)\n\t\t\treturn i & 0x7fffff == 0\n\t\t\t\t? (sign > 0 ? Math.POSITIVE_INFINITY : Math.NEGATIVE_INFINITY)\n\t\t\t\t: Math.NaN;\n\t\tvar m = e == 0 ? (i & 0x7fffff) << 1 : (i & 0x7fffff) | 0x800000;\n\t\treturn sign * m * Math.pow(2, e - 150);\n\t}\n\n\tstatic inline function _i64ToDouble(lo: Int, hi: Int): Float {\n\t\tvar sign = 1 - ((hi >>> 31) << 1);\n\t\tvar e = (hi >> 20) & 0x7ff;\n\t\tif (e == 2047)\n\t\t\treturn lo == 0 && (hi & 0xFFFFF) == 0\n\t\t\t\t? (sign > 0 ? Math.POSITIVE_INFINITY : Math.NEGATIVE_INFINITY)\n\t\t\t\t: Math.NaN;\n\t\tvar m = 2.220446049250313e-16 * ((hi & 0xFFFFF) * 4294967296. + (lo >>> 31) * 2147483648. + (lo & 0x7FFFFFFF));\n\t\tm = e == 0 ? m * 2.0 : m + 1.0;\n\t\treturn sign * m * Math.pow(2, e - 1023);\n\t}\n\n\tstatic inline function _floatToI32(f: Float): Int {\n\t\tif( f == 0 ) return 0;\n\t\tvar af = f < 0 ? -f : f;\n\t\tvar exp = Math.floor(Math.log(af) / LN2);\n\t\tif (exp > 127) {\n\t\t\treturn 0x7F800000;\n\t\t} else {\n\t\t\tif (exp <= -127 ) {\n\t\t\t\texp = -127;\n\t\t\t\taf *= 7.1362384635298e+44;  // af * 0.5 * 0x800000 / Math.pow(2, -127)\n\t\t\t} else {\n\t\t\t\taf = (af / Math.pow(2, exp) - 1.0) * 0x800000;\n\t\t\t}\n\t\t\treturn (f < 0 ? 0x80000000 : 0) | ((exp + 127) << 23) | Math.round(af);\n\t\t}\n\t}\n\n\tstatic inline function _doubleToI64(v: Float): Int64 @:privateAccess {\n\t\tvar i64 = i64tmp;\n\t\tif( v == 0 ) {\n\t\t\ti64.set_low(0);\n\t\t\ti64.set_high(0);\n\t\t} else if (!Math.isFinite(v))  {\n\t\t\ti64.set_low(0);\n\t\t\ti64.set_high(v > 0 ? 0x7FF00000 : 0xFFF00000);\n\t\t} else {\n\t\t\tvar av = v < 0 ? -v : v;\n\t\t\tvar exp = Math.floor(Math.log(av) / LN2);\n\t\t\tif (exp > 1023) {\n\t\t\t\ti64.set_low(0xFFFFFFFF);\n\t\t\t\ti64.set_high(0x7FEFFFFF);\n\t\t\t} else {\n\t\t\t\tif (exp <= -1023) {\n\t\t\t\t\texp = -1023;\n\t\t\t\t\tav = av / 2.2250738585072014e-308;\n\t\t\t\t} else {\n\t\t\t\t\tav = av / Math.pow(2, exp) - 1.0;\n\t\t\t\t}\n\t\t\t\tvar sig = Math.fround(av * 4503599627370496.); // 2^52\n\t\t\t\t// Note: If \"sig\" is outside of the signed Int32 range, the result is unspecified in HL, C#, Java and Neko,\n\t\t\t\tvar sig_l = Std.int(sig);\n\t\t\t\tvar sig_h = Std.int(sig / 4294967296.0);\n\t\t\t\ti64.set_low(sig_l);\n\t\t\t\ti64.set_high((v < 0 ? 0x80000000 : 0) | ((exp + 1023) << 20) | sig_h);\n\t\t\t}\n\t\t}\n\t\treturn i64;\n\t}\n\t#end\n\n\t#if neko\n\t\t#if neko_v21\n\t\tstatic var helpers = new sys.thread.Tls<neko.NativeArray<Dynamic>>();\n\t\t#else\n\t\tstatic var helperf = new sys.thread.Tls<neko.NativeString>();\n\t\tstatic var helperd = new sys.thread.Tls<neko.NativeString>();\n\t\tstatic var _float_of_bytes = neko.Lib.load(\"std\",\"float_of_bytes\",2);\n\t\tstatic var _double_of_bytes = neko.Lib.load(\"std\",\"double_of_bytes\",2);\n\t\tstatic var _float_bytes = neko.Lib.load(\"std\",\"float_bytes\",2);\n\t\tstatic var _double_bytes = neko.Lib.load(\"std\",\"double_bytes\",2);\n\t\t#end\n\t#elseif flash\n\t\tstatic var helper = {\n\t\t\tvar b = new flash.utils.ByteArray();\n\t\t\tb.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t\tb;\n\t\t}\n\t#elseif js\n\t\tstatic var helper = new js.lib.DataView(new js.lib.ArrayBuffer(8));\n\t#end\n\n\t#if neko_v21 inline #end\n\tpublic static function i32ToFloat( i : Int ) : Float {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $itof(i,false);\n\t\t\t#else\n\t\t\tvar helper = helperf.value;\n\t\t\tif( helper == null )\n\t\t\t\thelperf.value = helper = neko.NativeString.alloc(4);\n\t\t\tuntyped $sset(helper,0,i&0xFF);\n\t\t\tuntyped $sset(helper,1,(i>>8)&0xFF);\n\t\t\tuntyped $sset(helper,2,(i>>16)&0xFF);\n\t\t\tuntyped $sset(helper,3,i>>>24);\n\t\t\treturn _float_of_bytes(helper,false);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_le_int32_as_float32(i);\n\t\t#elseif cs\n\t\t\tvar helper = new SingleHelper(0);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\thelper.i = i;\n\t\t\t} else {\n\t\t\t\thelper.i = ((i >>> 24) & 0xFF) | (((i >> 16) & 0xFF) << 8) | (((i >> 8) & 0xFF) << 16) | ((i & 0xFF) << 24);\n\t\t\t}\n\n\t\t\treturn helper.f;\n\t\t#elseif java\n\t\t\treturn java.lang.Float.FloatClass.intBitsToFloat(i);\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeUnsignedInt(i);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readFloat();\n\t\t#elseif js\n\t\t\thelper.setInt32(0, i, true);\n\t\t\treturn helper.getFloat32(0, true);\n\t\t#else\n\t\t\treturn _i32ToFloat(i);\n\t\t#end\n\t}\n\n\t#if neko_v21 inline #end\n\tpublic static function floatToI32( f : Float ) : Int {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $ftoi(f,false);\n\t\t\t#else\n\t\t\tvar r = _float_bytes(f,false);\n\t\t\treturn untyped $sget(r,0) | ($sget(r,1)<<8) | ($sget(r,2)<<16) | ($sget(r,3)<<24);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_float32_as_le_int32(f);\n\t\t#elseif cs\n\t\t\tvar helper = new SingleHelper(f);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\treturn helper.i;\n\t\t\t} else {\n\t\t\t\tvar i = helper.i;\n\t\t\t\treturn ((i >>> 24) & 0xFF) | (((i >> 16) & 0xFF) << 8) | (((i >> 8) & 0xFF) << 16) | ((i & 0xFF) << 24);\n\t\t\t}\n\t\t#elseif java\n\t\t\treturn java.lang.Float.FloatClass.floatToRawIntBits(f);\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeFloat(f);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readUnsignedInt();\n\t\t#elseif js\n\t\t\thelper.setFloat32(0, f, true);\n\t\t\treturn helper.getInt32(0,true);\n\t\t#else\n\t\t\treturn _floatToI32(f);\n\t\t#end\n\t}\n\n\t#if neko_v21 inline #end\n\tpublic static function i64ToDouble( low : Int, high : Int ) : Float {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $itod(low,high,false);\n\t\t\t#else\n\t\t\tvar helper = helperd.value;\n\t\t\tif( helper == null )\n\t\t\t\thelperd.value = helper = neko.NativeString.alloc(8);\n\t\t\tuntyped $sset(helper,0,low&0xFF);\n\t\t\tuntyped $sset(helper,1,(low>>8)&0xFF);\n\t\t\tuntyped $sset(helper,2,(low>>16)&0xFF);\n\t\t\tuntyped $sset(helper,3,low>>>24);\n\t\t\tuntyped $sset(helper,4,high&0xFF);\n\t\t\tuntyped $sset(helper,5,(high>>8)&0xFF);\n\t\t\tuntyped $sset(helper,6,(high>>16)&0xFF);\n\t\t\tuntyped $sset(helper,7,high>>>24);\n\t\t\treturn _double_of_bytes(helper,false);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_le_int32s_as_float64(low,high);\n\t\t#elseif cs\n\t\t\tvar helper = new FloatHelper(0);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\thelper.i = haxe.Int64.make(high,low);\n\t\t\t} else {\n\t\t\t\tvar i1 = high,\n\t\t\t\t    i2 = low;\n\t\t\t\tvar j2 = ((i1 >>> 24) & 0xFF) | (((i1 >> 16) & 0xFF) << 8) | (((i1 >> 8) & 0xFF) << 16) | ((i1 & 0xFF) << 24);\n\t\t\t\tvar j1 = ((i2 >>> 24) & 0xFF) | (((i2 >> 16) & 0xFF) << 8) | (((i2 >> 8) & 0xFF) << 16) | ((i2 & 0xFF) << 24);\n\t\t\t\thelper.i = haxe.Int64.make(j1,j2);\n\t\t\t}\n\t\t\treturn helper.f;\n\t\t#elseif java\n\t\t\treturn java.lang.Double.DoubleClass.longBitsToDouble( Int64.make(high,low) );\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeUnsignedInt(low);\n\t\t\thelper.writeUnsignedInt(high);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readDouble();\n\t\t#elseif js\n\t\t\thelper.setInt32(0, low , true);\n\t\t\thelper.setInt32(4, high, true);\n\t\t\treturn helper.getFloat64(0,true);\n\t\t#else\n\t\t\treturn _i64ToDouble(low, high);\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns an Int64 representing the bytes representation of the double precision IEEE float value.\n\t\tWARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.\n\t\tWe still ensure that this is safe to use in a multithread environment\n\t**/\n\tpublic static function doubleToI64( v : Float ) : Int64 {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\tvar helper = helpers.value;\n\t\t\tif( helper == null ) {\n\t\t\t\thelpers.value = helper = neko.NativeArray.alloc(2);\n\t\t\t\thelper[0] = neko.NativeArray.alloc(2);\n\t\t\t\thelper[1] = haxe.Int64.ofInt(0);\n\t\t\t}\n\t\t\tvar i64 : haxe.Int64 = helper[1], int2 = helper[0];\n\t\t\tuntyped $dtoi(v,int2,false);\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(int2[0]);\n\t\t\t\ti64.set_high(int2[1]);\n\t\t\t}\n\t\t\treturn i64;\n\t\t\t#else\n\t\t\tvar r = _double_bytes(v,false), i64 = i64tmp.value;\n\t\t\tif( i64 == null )\n\t\t\t\ti64 = i64tmp.value = haxe.Int64.ofInt(0);\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(untyped $sget(r,0) | ($sget(r,1)<<8) | ($sget(r,2)<<16) | ($sget(r,3)<<24));\n\t\t\t\ti64.set_high(untyped $sget(r,4) | ($sget(r,5)<<8) | ($sget(r,6)<<16) | ($sget(r,7)<<24));\n\t\t\t}\n\t\t\treturn i64;\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn Int64.make(untyped __global__.__hxcpp_reinterpret_float64_as_le_int32_high(v),\n\t\t\t\t               untyped __global__.__hxcpp_reinterpret_float64_as_le_int32_low(v) );\n\t\t#elseif java\n\t\t\treturn java.lang.Double.DoubleClass.doubleToRawLongBits(v);\n\t\t#elseif cs\n\t\t\tvar helper = new FloatHelper(v);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\treturn helper.i;\n\t\t\t} else {\n\t\t\t\tvar i = helper.i;\n\t\t\t\tvar i1 = haxe.Int64.getHigh(i),\n\t\t\t\t    i2 = haxe.Int64.getLow(i);\n\t\t\t\tvar j2 = ((i1 >>> 24) & 0xFF) | (((i1 >> 16) & 0xFF) << 8) | (((i1 >> 8) & 0xFF) << 16) | ((i1 & 0xFF) << 24);\n\t\t\t\tvar j1 = ((i2 >>> 24) & 0xFF) | (((i2 >> 16) & 0xFF) << 8) | (((i2 >> 8) & 0xFF) << 16) | ((i2 & 0xFF) << 24);\n\n\t\t\t\treturn haxe.Int64.make(j1,j2);\n\t\t\t}\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeDouble(v);\n\t\t\thelper.position = 0;\n\t\t\tvar i64 = i64tmp;\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(cast helper.readUnsignedInt());\n\t\t\t\ti64.set_high(cast helper.readUnsignedInt());\n\t\t\t}\n\t\t\treturn i64;\n\t\t#elseif js\n\t\t\tvar i64 = i64tmp;\n\t\t\thelper.setFloat64(0, v, true);\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(helper.getInt32(0,true));\n\t\t\t\ti64.set_high(helper.getInt32(4,true));\n\t\t\t}\n\t\t\treturn i64;\n\t\t#else\n\t\t\treturn _doubleToI64(v);\n\t\t#end\n\t}\n\n}\n\n#if cs\n@:meta(System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit))\n@:nativeGen @:struct private class SingleHelper\n{\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var i:Int;\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var f:Single;\n\n\tpublic function new(f:Single)\n\t{\n\t\tthis.i = 0;\n\t\tthis.f = f;\n\t}\n}\n\n@:meta(System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit))\n@:nativeGen @:struct private class FloatHelper\n{\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var i:haxe.Int64;\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var f:Float;\n\n\tpublic function new(f:Float)\n\t{\n\t\tthis.i = haxe.Int64.ofInt(0);\n\t\tthis.f = f;\n\t}\n}\n\n#end\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.zip;\n\nenum Huffman {\n\tFound( i : Int );\n\tNeedBit( left : Huffman, right : Huffman );\n\tNeedBits( n : Int, table : Array<Huffman> );\n}\n\nclass HuffTools {\n\n\tpublic function new() {\n\t}\n\n\tfunction treeDepth(t) {\n\t\treturn switch(t) {\n\t\tcase Found(_): 0;\n\t\tcase NeedBits(_,_): throw \"assert\";\n\t\tcase NeedBit(a,b):\n\t\t\tvar da = treeDepth(a);\n\t\t\tvar db = treeDepth(b);\n\t\t\t1 + ((da < db) ? da : db);\n\t\t}\n\t}\n\n\tfunction treeCompress(t) {\n\t\tvar d = treeDepth(t);\n\t\tif( d == 0 )\n\t\t\treturn t;\n\t\tif( d == 1 )\n\t\t\treturn switch( t ) {\n\t\t\tcase NeedBit(a,b): NeedBit(treeCompress(a),treeCompress(b));\n\t\t\tdefault: throw \"assert\";\n\t\t\t}\n\t\tvar size = 1 << d;\n\t\tvar table = new Array();\n\t\tfor( i in 0...size )\n\t\t\ttable.push(Found(-1));\n\t\ttreeWalk(table,0,0,d,t);\n\t\treturn NeedBits(d,table);\n\t}\n\n\tfunction treeWalk(table,p,cd,d,t) {\n\t\tswitch( t ) {\n\t\tcase NeedBit(a,b):\n\t\t\tif( d > 0 ) {\n\t\t\t\ttreeWalk(table,p,cd+1,d-1,a);\n\t\t\t\ttreeWalk(table,p|(1<<cd),cd+1,d-1,b);\n\t\t\t} else\n\t\t\t\ttable[p] = treeCompress(t);\n\t\tdefault:\n\t\t\ttable[p] = treeCompress(t);\n\t\t}\n\t}\n\n\tfunction treeMake( bits : haxe.ds.IntMap<Int>, maxbits : Int, v : Int, len : Int ) {\n\t\tif( len > maxbits ) throw \"Invalid huffman\";\n\t\tvar idx = (v << 5) | len;\n\t\tif( bits.exists(idx) )\n\t\t\treturn Found(bits.get(idx));\n\t\tv <<= 1;\n\t\tlen += 1;\n\t\treturn NeedBit(treeMake(bits,maxbits,v,len),treeMake(bits,maxbits,v|1,len));\n\t}\n\n\tpublic function make(lengths,pos,nlengths,maxbits) {\n\t\tvar counts = new Array();\n\t\tvar tmp = new Array();\n\t\tif( maxbits > 32 ) throw \"Invalid huffman\";\n\t\tfor( i in 0...maxbits ) {\n\t\t\tcounts.push(0);\n\t\t\ttmp.push(0);\n\t\t}\n\t\tfor( i in 0...nlengths ) {\n\t\t\tvar p = lengths[i+pos];\n\t\t\tif( p >= maxbits ) throw \"Invalid huffman\";\n\t\t\tcounts[p]++;\n\t\t}\n\t\tvar code = 0;\n\t\tfor( i in 1...maxbits-1 ) {\n\t\t\tcode = (code + counts[i]) << 1;\n\t\t\ttmp[i] = code;\n\t\t}\n\t\tvar bits = new haxe.ds.IntMap();\n\t\tfor( i in 0...nlengths ) {\n\t\t\tvar l = lengths[i + pos];\n\t\t\tif( l != 0 ) {\n\t\t\t\tvar n = tmp[l-1];\n\t\t\t\ttmp[l-1] = n + 1;\n\t\t\t\tbits.set((n << 5) | l,i);\n\t\t\t}\n\t\t}\n\t\treturn treeCompress(NeedBit(treeMake(bits,maxbits,0,1),treeMake(bits,maxbits,1,1)));\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.zip;\nimport haxe.zip.Huffman;\nimport haxe.crypto.Adler32;\n\nprivate class Window {\n\n\tpublic static inline var SIZE = 1 << 15;\n\tpublic static inline var BUFSIZE = 1 << 16;\n\n\tpublic var buffer : haxe.io.Bytes;\n\tpublic var pos : Int;\n\tvar crc : Adler32;\n\n\tpublic function new(hasCrc) {\n\t\tbuffer = haxe.io.Bytes.alloc(BUFSIZE);\n\t\tpos = 0;\n\t\tif( hasCrc ) crc = new Adler32();\n\t}\n\n\tpublic function slide() {\n\t\tif( crc != null ) crc.update(buffer,0,SIZE);\n\t\tvar b = haxe.io.Bytes.alloc(BUFSIZE);\n\t\tpos -= SIZE;\n\t\tb.blit(0,buffer,SIZE,pos);\n\t\tbuffer = b;\n\t}\n\n\tpublic function addBytes(b,p,len) {\n\t\tif( pos + len > BUFSIZE ) slide();\n\t\tbuffer.blit(pos,b,p,len);\n\t\tpos += len;\n\t}\n\n\tpublic function addByte(c) {\n\t\tif( pos == BUFSIZE ) slide();\n\t\tbuffer.set(pos,c);\n\t\tpos++;\n\t}\n\n\tpublic function getLastChar() {\n\t\treturn buffer.get(pos - 1);\n\t}\n\n\tpublic function available() {\n\t\treturn pos;\n\t}\n\n\tpublic function checksum() {\n\t\tif( crc != null ) crc.update(buffer,0,pos);\n\t\treturn crc;\n\t}\n\n}\n\nprivate enum State {\n\tHead;\n\tBlock;\n\tCData;\n\tFlat;\n\tCrc;\n\tDist;\n\tDistOne;\n\tDone;\n}\n\n/**\n\tA pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.\n**/\nclass InflateImpl {\n\n\tstatic var LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];\n\tstatic var LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];\n\tstatic var DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];\n\tstatic var DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];\n\tstatic var CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n\n\tvar nbits : Int;\n\tvar bits : Int;\n\tvar state : State;\n\tvar isFinal : Bool;\n\tvar huffman : Huffman;\n\tvar huffdist : Null<Huffman>;\n\tvar htools : HuffTools;\n\tvar len : Int;\n\tvar dist : Int;\n\tvar needed : Int;\n\tvar output : haxe.io.Bytes;\n\tvar outpos : Int;\n\tvar input : haxe.io.Input;\n\tvar lengths : Array<Int>;\n\tvar window : Window;\n\n\tstatic var FIXED_HUFFMAN = null;\n\n\tpublic function new( i, ?header = true, ?crc = true ) {\n\t\tisFinal = false;\n\t\thtools = new HuffTools();\n\t\thuffman = buildFixedHuffman();\n\t\thuffdist = null;\n\t\tlen = 0;\n\t\tdist = 0;\n\t\tstate = header ? Head : Block;\n\t\tinput = i;\n\t\tbits = 0;\n\t\tnbits = 0;\n\t\tneeded = 0;\n\t\toutput = null;\n\t\toutpos = 0;\n\t\tlengths = new Array();\n\t\tfor( i in 0...19 )\n\t\t\tlengths.push(-1);\n\t\twindow = new Window(crc);\n\t}\n\n\tfunction buildFixedHuffman() {\n\t\tif( FIXED_HUFFMAN != null )\n\t\t\treturn FIXED_HUFFMAN;\n\t\tvar a = new Array();\n\t\tfor( n in 0...288 )\n\t\t\ta.push(if( n <= 143 ) 8 else if( n <= 255 ) 9 else if( n <= 279 ) 7 else 8);\n\t\tFIXED_HUFFMAN = htools.make(a,0,288,10);\n\t\treturn FIXED_HUFFMAN;\n\t}\n\n\tpublic function readBytes(b,pos,len) {\n\t\tneeded = len;\n\t\toutpos = pos;\n\t\toutput = b;\n\t\tif( len > 0 )\n\t\t\twhile( inflateLoop() ) {\n\t\t\t}\n\t\treturn len - needed;\n\t}\n\n\tfunction getBits(n) {\n\t\twhile( nbits < n ) {\n\t\t\tbits |= input.readByte() << nbits;\n\t\t\tnbits += 8;\n\t\t}\n\t\tvar b = bits & ((1 << n) - 1);\n\t\tnbits -= n;\n\t\tbits >>= n;\n\t\treturn b;\n\t}\n\n\tfunction getBit() {\n\t\tif( nbits == 0 ) {\n\t\t\tnbits = 8;\n\t\t\tbits = input.readByte();\n\t\t}\n\t\tvar b = bits & 1 == 1;\n\t\tnbits--;\n\t\tbits >>= 1;\n\t\treturn b;\n\t}\n\n\tfunction getRevBits(n) {\n\t\treturn if( n == 0 )\n\t\t\t0\n\t\telse if( getBit() )\n\t\t\t(1 << (n - 1)) | getRevBits(n-1)\n\t\telse\n\t\t\tgetRevBits(n-1);\n\t}\n\n\tfunction resetBits() {\n\t\tbits = 0;\n\t\tnbits = 0;\n\t}\n\n\tfunction addBytes(b,p,len) {\n\t\twindow.addBytes(b,p,len);\n\t\toutput.blit(outpos,b,p,len);\n\t\tneeded -= len;\n\t\toutpos += len;\n\t}\n\n\tfunction addByte(b) {\n\t\twindow.addByte(b);\n\t\toutput.set(outpos,b);\n\t\tneeded--;\n\t\toutpos++;\n\t}\n\n\tfunction addDistOne(n) {\n\t\tvar c = window.getLastChar();\n\t\tfor( i in 0...n )\n\t\t\taddByte(c);\n\t}\n\n\tfunction addDist(d,len) {\n\t\taddBytes(window.buffer,window.pos - d,len);\n\t}\n\n\tfunction applyHuffman(h) {\n\t\treturn switch(h) {\n\t\tcase Found(n): n;\n\t\tcase NeedBit(a,b): applyHuffman(getBit()?b:a);\n\t\tcase NeedBits(n,tbl): applyHuffman(tbl[getBits(n)]);\n\t\t}\n\t}\n\n\tfunction inflateLengths(a,max) {\n\t\tvar i = 0;\n\t\tvar prev = 0;\n\t\twhile( i < max ) {\n\t\t\tvar n = applyHuffman(huffman);\n\t\t\tswitch( n ) {\n\t\t\tcase 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15:\n\t\t\t\tprev = n;\n\t\t\t\ta[i] = n;\n\t\t\t\ti++;\n\t\t\tcase 16:\n\t\t\t\tvar end = i + 3 + getBits(2);\n\t\t\t\tif( end > max ) throw \"Invalid data\";\n\t\t\t\twhile( i < end ) {\n\t\t\t\t\ta[i] = prev;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\tcase 17:\n\t\t\t\ti += 3 + getBits(3);\n\t\t\t\tif( i > max ) throw \"Invalid data\";\n\t\t\tcase 18:\n\t\t\t\ti += 11 + getBits(7);\n\t\t\t\tif( i > max ) throw \"Invalid data\";\n\t\t\tdefault:\n\t\t\t\tthrow \"Invalid data\";\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction inflateLoop() {\n\t\tswitch( state ) {\n\t\tcase Head:\n\t\t\tvar cmf = input.readByte();\n\t\t\tvar cm = cmf & 15;\n\t\t\tvar cinfo = cmf >> 4;\n\t\t\tif( cm != 8 ) throw \"Invalid data\";\n\t\t\tvar flg = input.readByte();\n\t\t\t//var fcheck = flg & 31;\n\t\t\tvar fdict = flg & 32 != 0;\n\t\t\t//var flevel = flg >> 6;\n\t\t\tif( ((cmf << 8) + flg) % 31 != 0 ) throw \"Invalid data\";\n\t\t\tif( fdict ) throw \"Unsupported dictionary\";\n\t\t\tstate = Block;\n\t\t\treturn true;\n\t\tcase Crc:\n\t\t\tvar calc = window.checksum();\n\t\t\tif( calc == null ) {\n\t\t\t\tstate = Done;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvar crc = Adler32.read(input);\n\t\t\tif( !calc.equals(crc) ) throw \"Invalid CRC\";\n\t\t\tstate = Done;\n\t\t\treturn true;\n\t\tcase Done:\n\t\t\t// nothing\n\t\t\treturn false;\n\t\tcase Block:\n\t\t\tisFinal = getBit();\n\t\t\tswitch( getBits(2) ) {\n\t\t\tcase 0: // no compression\n\t\t\t\tlen = input.readUInt16();\n\t\t\t\tvar nlen = input.readUInt16();\n\t\t\t\tif( nlen != 0xFFFF - len ) throw \"Invalid data\";\n\t\t\t\tstate = Flat;\n\t\t\t\tvar r = inflateLoop();\n\t\t\t\tresetBits();\n\t\t\t\treturn r;\n\t\t\tcase 1: // fixed Huffman\n\t\t\t\thuffman = buildFixedHuffman();\n\t\t\t\thuffdist = null;\n\t\t\t\tstate = CData;\n\t\t\t\treturn true;\n\t\t\tcase 2: // dynamic Huffman\n\t\t\t\tvar hlit = getBits(5) + 257;\n\t\t\t\tvar hdist = getBits(5) + 1;\n\t\t\t\tvar hclen = getBits(4) + 4;\n\t\t\t\tfor( i in 0...hclen )\n\t\t\t\t\tlengths[CODE_LENGTHS_POS[i]] = getBits(3);\n\t\t\t\tfor( i in hclen...19 )\n\t\t\t\t\tlengths[CODE_LENGTHS_POS[i]] = 0;\n\t\t\t\thuffman = htools.make(lengths,0,19,8);\n\t\t\t\tvar lengths = new Array();\n\t\t\t\tfor( i in 0...hlit + hdist )\n\t\t\t\t\tlengths.push(0);\n\t\t\t\tinflateLengths(lengths,hlit + hdist);\n\t\t\t\thuffdist = htools.make(lengths,hlit,hdist,16);\n\t\t\t\thuffman = htools.make(lengths,0,hlit,16);\n\t\t\t\tstate = CData;\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\tthrow \"Invalid data\";\n\t\t\t}\n\t\tcase Flat:\n\t\t\tvar rlen = (len < needed) ? len : needed;\n\t\t\tvar bytes = input.read(rlen);\n\t\t\tlen -= rlen;\n\t\t\taddBytes(bytes,0,rlen);\n\t\t\tif( len == 0 ) state = isFinal ? Crc : Block;\n\t\t\treturn needed > 0;\n\t\tcase DistOne:\n\t\t\tvar rlen = (len < needed) ? len : needed;\n\t\t\taddDistOne(rlen);\n\t\t\tlen -= rlen;\n\t\t\tif( len == 0 ) state = CData;\n\t\t\treturn needed > 0;\n\t\tcase Dist:\n\t\t\twhile( len > 0 && needed > 0 ) {\n\t\t\t\tvar rdist = (len < dist) ? len : dist;\n\t\t\t\tvar rlen = (needed < rdist) ? needed : rdist;\n\t\t\t\taddDist(dist,rlen);\n\t\t\t\tlen -= rlen;\n\t\t\t}\n\t\t\tif( len == 0 ) state = CData;\n\t\t\treturn needed > 0;\n\t\tcase CData:\n\t\t\tvar n = applyHuffman(huffman);\n\t\t\tif( n < 256 ) {\n\t\t\t\taddByte(n);\n\t\t\t\treturn needed > 0;\n\t\t\t} else if( n == 256 ) {\n\t\t\t\tstate = isFinal ? Crc : Block;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tn -= 257;\n\t\t\t\tvar extra_bits = LEN_EXTRA_BITS_TBL[n];\n\t\t\t\tif( extra_bits == -1 ) throw \"Invalid data\";\n\t\t\t\tlen = LEN_BASE_VAL_TBL[n] + getBits(extra_bits);\n\t\t\t\tvar dist_code = if( huffdist == null ) getRevBits(5) else applyHuffman(huffdist);\n\t\t\t\textra_bits = DIST_EXTRA_BITS_TBL[dist_code];\n\t\t\t\tif( extra_bits == -1 ) throw \"Invalid data\";\n\t\t\t\tdist = DIST_BASE_VAL_TBL[dist_code] + getBits(extra_bits);\n\t\t\t\tif( dist > window.available() ) throw \"Invalid data\";\n\t\t\t\tstate = (dist == 1) ? DistOne : Dist;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static function run( i : haxe.io.Input, ?bufsize = 65536 ) {\n\t\tvar buf = haxe.io.Bytes.alloc(bufsize);\n\t\tvar output = new haxe.io.BytesBuffer();\n\t\tvar inflate = new InflateImpl(i);\n\t\twhile( true ) {\n\t\t\tvar len = inflate.readBytes(buf,0,bufsize);\n\t\t\toutput.addBytes(buf,0,len);\n\t\t\tif( len < bufsize )\n\t\t\t\tbreak;\n\t\t}\n\t\treturn output.getBytes();\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.zip;\n\nclass Uncompress {\n\n\tpublic function new( ?windowBits : Int ) {\n\t\tthrow \"Not implemented for this platform\";\n\t}\n\n\tpublic function execute( src : haxe.io.Bytes, srcPos : Int, dst : haxe.io.Bytes, dstPos : Int ) : { done : Bool, read : Int, write : Int } {\n\t\treturn null;\n\t}\n\n\tpublic function setFlushMode( f : FlushMode ) {\n\t}\n\n\tpublic function close() {\n\t}\n\n\tpublic static function run( src : haxe.io.Bytes, ?bufsize : Int ) : haxe.io.Bytes {\n\t\treturn InflateImpl.run(new haxe.io.BytesInput(src),bufsize);\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js;\n\nimport js.Syntax; // import it here so it's always available in the compiler\n\nprivate class HaxeError extends js.Error {\n\tvar val:Dynamic;\n\n\t@:pure\n\tpublic function new(val:Dynamic) {\n\t\tsuper();\n\t\tthis.val = val;\n\t\tif ((cast js.Error).captureStackTrace) (cast js.Error).captureStackTrace(this, HaxeError);\n\t}\n\n\tpublic static function wrap(val:Dynamic):js.Error {\n\t\treturn if (js.Syntax.instanceof(val, js.Error)) val else new HaxeError(val);\n\t}\n\n\tstatic function __init__() {\n\t\tjs.Object.defineProperty((cast HaxeError).prototype, \"message\", {get: () -> (cast String)(js.Lib.nativeThis.val)});\n\t}\n}\n\n@:dox(hide)\nclass Boot {\n\n\tstatic inline function isClass(o:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isClass\", o.__name__);\n\t}\n\n\tstatic inline function isEnum(e:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isEnum\", e.__ename__);\n\t}\n\n\tstatic function getClass(o:Dynamic) : Dynamic {\n\t\tif (Std.is(o, Array))\n\t\t\treturn Array;\n\t\telse {\n\t\t\tvar cl = untyped __define_feature__(\"js.Boot.getClass\", o.__class__);\n\t\t\tif (cl != null)\n\t\t\t\treturn cl;\n\t\t\tvar name = __nativeClassName(o);\n\t\t\tif (name != null)\n\t\t\t\treturn __resolveNativeClass(name);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@:ifFeature(\"has_enum\")\n\tprivate static function __string_rec(o,s:String) {\n\t\tuntyped {\n\t\t\tif( o == null )\n\t\t\t    return \"null\";\n\t\t\tif( s.length >= 5 )\n\t\t\t\treturn \"<...>\"; // too much deep recursion\n\t\t\tvar t = js.Syntax.typeof(o);\n\t\t\tif( t == \"function\" && (isClass(o) || isEnum(o)) )\n\t\t\t\tt = \"object\";\n\t\t\tswitch( t ) {\n\t\t\tcase \"object\":\n\t\t\t\t#if !js_enums_as_arrays\n\t\t\t\tif (o.__enum__) {\n\t\t\t\t\tvar e = $hxEnums[o.__enum__];\n\t\t\t\t\tvar n = e.__constructs__[o._hx_index];\n\t\t\t\t\tvar con = e[n];\n\t\t\t\t\tif (con.__params__) {\n\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\treturn n + \"(\" +\n\t\t\t\t\t\t\t[for (p in (con.__params__:Array<String>)) __string_rec(o[p],s)].join(\",\") + \")\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn n;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#end\n\t\t\t\tif( js.Syntax.instanceof(o, Array) ) {\n\t\t\t\t\t#if js_enums_as_arrays\n\t\t\t\t\tif( o.__enum__ ) {\n\t\t\t\t\t\tif( o.length == 2 )\n\t\t\t\t\t\t\treturn o[0];\n\t\t\t\t\t\tvar str = o[0]+\"(\";\n\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\tfor( i in 2...o.length ) {\n\t\t\t\t\t\t\tif( i != 2 )\n\t\t\t\t\t\t\t\tstr += \",\" + __string_rec(o[i],s);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tstr += __string_rec(o[i],s);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + \")\";\n\t\t\t\t\t}\n\t\t\t\t\t#end\n\t\t\t\t\tvar l = o.length;\n\t\t\t\t\tvar i;\n\t\t\t\t\tvar str = \"[\";\n\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\tfor( i in 0...l )\n\t\t\t\t\t\tstr += (if (i > 0) \",\" else \"\")+__string_rec(o[i],s);\n\t\t\t\t\tstr += \"]\";\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t\tvar tostr;\n\t\t\t\ttry {\n\t\t\t\t\ttostr = untyped o.toString;\n\t\t\t\t} catch( e : Dynamic ) {\n\t\t\t\t\t// strange error on IE\n\t\t\t\t\treturn \"???\";\n\t\t\t\t}\n\t\t\t\tif( tostr != null && tostr != __js__(\"Object.toString\") && js.Syntax.typeof(tostr) == \"function\" ) {\n\t\t\t\t\tvar s2 = o.toString();\n\t\t\t\t\tif( s2 != \"[object Object]\")\n\t\t\t\t\t\treturn s2;\n\t\t\t\t}\n\t\t\t\tvar k : String = null;\n\t\t\t\tvar str = \"{\\n\";\n\t\t\t\ts += \"\\t\";\n\t\t\t\tvar hasp = (o.hasOwnProperty != null);\n\t\t\t\t__js__(\"for( var k in o ) {\");\n\t\t\t\t\tif( hasp && !o.hasOwnProperty(k) )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\" )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( str.length != 2 )\n\t\t\t\t\t\tstr += \", \\n\";\n\t\t\t\t\tstr += s + k + \" : \"+__string_rec(o[k],s);\n\t\t\t\t__js__(\"}\");\n\t\t\t\ts = s.substring(1);\n\t\t\t\tstr += \"\\n\" + s + \"}\";\n\t\t\t\treturn str;\n\t\t\tcase \"function\":\n\t\t\t\treturn \"<function>\";\n\t\t\tcase \"string\":\n\t\t\t\treturn o;\n\t\t\tdefault:\n\t\t\t\treturn String(o);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static function __interfLoop(cc : Dynamic,cl : Dynamic) {\n\t\tif( cc == null )\n\t\t\treturn false;\n\t\tif( cc == cl )\n\t\t\treturn true;\n\t\tif( js.Object.prototype.hasOwnProperty.call(cc, \"__interfaces__\") ) {\n\t\t\tvar intf : Dynamic = cc.__interfaces__;\n\t\t\tfor( i in 0...intf.length ) {\n\t\t\t\tvar i : Dynamic = intf[i];\n\t\t\t\tif( i == cl || __interfLoop(i,cl) )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn __interfLoop(cc.__super__,cl);\n\t}\n\n\t@:ifFeature(\"typed_catch\") @:pure private static function __instanceof(o : Dynamic,cl : Dynamic) {\n\t\tif( cl == null )\n\t\t\treturn false;\n\t\tswitch( cl ) {\n\t\tcase Int:\n\t\t\treturn js.Syntax.typeof(o) == \"number\" && js.Syntax.strictEq(o | 0, o);\n\t\tcase Float:\n\t\t\treturn js.Syntax.typeof(o) == \"number\";\n\t\tcase Bool:\n\t\t\treturn js.Syntax.typeof(o) == \"boolean\";\n\t\tcase String:\n\t\t\treturn js.Syntax.typeof(o) == \"string\";\n\t\tcase Array:\n\t\t\treturn js.Syntax.instanceof(o, Array) #if js_enums_as_arrays && o.__enum__ == null #end;\n\t\tcase Dynamic:\n\t\t\treturn o != null;\n\t\tdefault:\n\t\t\tif( o != null ) {\n\t\t\t\t// Check if o is an instance of a Haxe class or a native JS object\n\t\t\t\tif( js.Syntax.typeof(cl) == \"function\" ) {\n\t\t\t\t\tif( js.Syntax.instanceof(o, cl) )\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tif( __interfLoop(getClass(o),cl) )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if ( js.Syntax.typeof(cl) == \"object\" && __isNativeObj(cl) ) {\n\t\t\t\t\tif( js.Syntax.instanceof(o, cl) )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// do not use isClass/isEnum here\n\t\t\tuntyped __feature__(\"Class.*\",if( cl == Class && o.__name__ != null ) return true);\n\t\t\tuntyped __feature__(\"Enum.*\",if( cl == Enum && o.__ename__ != null ) return true);\n\t\t\t#if js_enums_as_arrays\n\t\t\treturn o.__enum__ == cl;\n\t\t\t#else\n\t\t\treturn if (o.__enum__ != null) (untyped $hxEnums[o.__enum__]) == cl else false;\n\t\t\t#end\n\t\t}\n\t}\n\n\t@:ifFeature(\"typed_cast\") private static function __cast(o : Dynamic, t : Dynamic) {\n\t\tif (o == null || __instanceof(o, t)) return o;\n\t\telse throw \"Cannot cast \" +Std.string(o) + \" to \" +Std.string(t);\n\t}\n\n\tstatic var __toStr:js.Function;\n\tstatic function __init__() {\n\t\tBoot.__toStr = (cast {}).toString;\n\t}\n\n\t// get native JS [[Class]]\n\tstatic function __nativeClassName(o:Dynamic):String {\n\t\tvar name:String = __toStr.call(o).slice(8, -1);\n\t\t// exclude general Object and Function\n\t\t// also exclude Math and JSON, because instanceof cannot be called on them\n\t\tif (name == \"Object\" || name == \"Function\" || name == \"Math\" || name == \"JSON\")\n\t\t\treturn null;\n\t\treturn name;\n\t}\n\n\t// check for usable native JS object\n\tstatic function __isNativeObj(o:Dynamic):Bool {\n\t\treturn __nativeClassName(o) != null;\n\t}\n\n\t// resolve native JS class in the global scope:\n\tstatic function __resolveNativeClass(name:String) {\n\t\treturn js.Lib.global[cast name];\n\t}\n\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\HTMLCanvasElement.webidl. Do not edit!\n\npackage js.html;\n\n/**\n\tThe `HTMLCanvasElement` interface provides properties and methods for manipulating the layout and presentation of canvas elements. The `HTMLCanvasElement` interface also inherits the properties and methods of the `HTMLElement` interface.\n\n\tDocumentation [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n\n\t@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement>\n**/\n@:native(\"HTMLCanvasElement\")\nextern class CanvasElement extends Element {\n\t\n\t/**\n\t\tIs a positive `integer` reflecting the `width` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `300` is used.\n\t**/\n\tvar width : Int;\n\t\n\t/**\n\t\tIs a positive `integer` reflecting the `height` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `150` is used.\n\t**/\n\tvar height : Int;\n\t\n\t\n\t/**\n\t\tReturns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with `\"2d\"` returns a `CanvasRenderingContext2D` object, whereas calling it with `\"webgl\"` (or `\"experimental-webgl\"`) returns a `WebGLRenderingContext` object. This context is only available on browsers that implement WebGL.\n\t\t@throws DOMError\n\t**/\n\tfunction getContext( contextId : String, ?contextOptions : Dynamic ) : Dynamic;\n\t\n\t/**\n\t\tReturns a data-URL containing a representation of the image in the format specified by the `type` parameter (defaults to `png`). The returned image is in a resolution of 96dpi.\n\t\t@throws DOMError\n\t**/\n\tfunction toDataURL( type : String = \"\", ?encoderOptions : Dynamic ) : String;\n\t\n\t/**\n\t\tCreates a `Blob` object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.\n\t\t@throws DOMError\n\t**/\n\tfunction toBlob( callback : Blob -> Void, type : String = \"\", ?encoderOptions : Dynamic ) : Void;\n\t\n\t/**\n\t\tReturns a `CanvasCaptureMediaStream` that is a real-time video capture of the surface of the canvas.\n\t\t@throws DOMError\n\t**/\n\tfunction captureStream( ?frameRate : Float ) : CanvasCaptureMediaStream;\n\t\n\t/** Shorthand for getting a CanvasRenderingContext2D. */\n\tinline function getContext2d( ?attribs : {} ) : CanvasRenderingContext2D {\n\t\treturn cast getContext(\"2d\", attribs);\n\t}\n\t/** Shorthand for getting a js.html.webgl.RenderingContext. */\n\tinline function getContextWebGL( ?attribs : js.html.webgl.ContextAttributes ) : js.html.webgl.RenderingContext {\n\t\treturn CanvasUtil.getContextWebGL(this, attribs);\n\t}\n\t/** Shorthand for getting a js.html.webgl.WebGL2RenderingContext. */\n\tinline function getContextWebGL2( ?attribs : js.html.webgl.ContextAttributes ) : js.html.webgl.WebGL2RenderingContext {\n\t\treturn this.getContext('webgl2', attribs);\n\t}\n}\n\nprivate class CanvasUtil {\n\tpublic static function getContextWebGL( canvas :CanvasElement, attribs :{} ) {\n\t\tfor (name in [\"webgl\", \"experimental-webgl\"]) {\n\t\t\tvar ctx = canvas.getContext(name, attribs);\n\t\t\tif (ctx != null) return ctx;\n\t\t}\n\t\treturn null;\n\t}\n}\n","package minko;\r\n@:expose(\"minko.AbstractBackend\")\r\nclass AbstractBackend {\r\n    static public function create() {\r\n        return new AbstractBackend();\r\n    }\r\n\r\n    public function new() {\r\n    }\r\n\r\n    public function initialize(canvas) {\r\n\r\n    }\r\n\r\n    public function swapBuffers(canvas) {\r\n    }\r\n\r\n    public function run(canvas:AbstractCanvas) {\r\n        if(canvas.active) {\r\n            canvas.step();\r\n        }\r\n    }\r\n\r\n    public function wait(canvas, ms) {\r\n    }\r\n}\r\n","package minko;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport haxe.ds.IntMap;\r\nimport haxe.ds.StringMap;\r\nimport minko.async.Worker;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.Transform;\r\nimport minko.data.Provider;\r\nimport minko.input.Joystick;\r\nimport minko.input.Keyboard;\r\nimport minko.input.Mouse;\r\nimport minko.input.Touch;\r\nimport minko.render.AbstractContext;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal3;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.Flags\")\r\n@:enum abstract Flags(Int) from Int to Int\r\n{\r\n    var FULLSCREEN = (1 << 0);\r\n    var RESIZABLE = (1 << 1);\r\n    var HIDDEN = (1 << 2);\r\n    var CHROMELESS = (1 << 3);\r\n    var STENCIL = (1 << 4);\r\n}\r\n@:expose(\"minko.AbstractCanvas\")\r\nclass AbstractCanvas {\r\n\r\n\r\n    private var _active:Bool;\r\n\r\n    private var _swapBuffersAtEnterFrame:Bool;\r\n\r\n    // Events\r\n    private var _enterFrame:Signal3<AbstractCanvas, Float, Float>;\r\n    private var _resized:Signal3<AbstractCanvas, Int, Int>;\r\n    private var _resizedSlot:SignalSlot3<AbstractCanvas, Int, Int>;\r\n    // File dropped\r\n    private var _fileDropped:Signal<String>;\r\n    // Joystick events\r\n    private var _joystickAdded:Signal2<AbstractCanvas, Joystick>;\r\n    private var _joystickRemoved:Signal2<AbstractCanvas, Joystick>;\r\n\r\n    private var _suspended:Signal<AbstractCanvas>;\r\n    private var _resumed:Signal<AbstractCanvas>;\r\n\r\n    private var _activeWorkers:Array<Worker> ;\r\n    private var _workerCompleteSlots:Array<Any>;\r\n\r\n    private var _onWindow:Bool;\r\n    private var _camera:Node;\r\n    private var _enableRendering:Bool;\r\n\r\n    private var _context:AbstractContext;\r\n    private var _backend:AbstractBackend;\r\n\r\n\r\n    private var _mouse:Mouse;\r\n    private var _joysticks:IntMap<Joystick> ;\r\n    private var _keyboard:Keyboard;\r\n    private var _touch:Touch;\r\n\r\n    private var _name:String;\r\n    private var _x:Int;\r\n    private var _y:Int;\r\n    private var _width:Int;\r\n    private var _height:Int;\r\n    private var _data:Provider;\r\n    private var _flags:Int;\r\n\r\n    public var framerate(get, null):Float;\r\n    public var active(get, null):Bool;\r\n    public var x(get, set):Int;\r\n    public var y(get, set):Int;\r\n    public var width(get, set):Int;\r\n    public var height(get, set):Int;\r\n    public var aspectRatio(get, null):Float;\r\n    public var data(get, null):Provider;\r\n    public var context(get, null):AbstractContext;\r\n    public var mouse(get, null):Mouse;\r\n    public var keyboard(get, null):Keyboard;\r\n    public var touch(get, null):Touch;\r\n    public var numJoysticks(get, null):Int;\r\n    public var enterFrame(get, null):Signal3<AbstractCanvas, Float, Float>;\r\n    public var resized(get, null):Signal3<AbstractCanvas, Int, Int>;\r\n    public var joystickAdded(get, null):Signal2<AbstractCanvas, Joystick >;\r\n    public var joystickRemoved(get, null):Signal2<AbstractCanvas, Joystick >;\r\n    public var suspended(get, null):Signal<AbstractCanvas >;\r\n    public var resumed(get, null):Signal<AbstractCanvas >;\r\n    var _workers:StringMap<String -> Worker> = new StringMap<String -> Worker>();\r\n\r\n    function get_framerate():Float {\r\n        return Timer.fps();\r\n    }\r\n    public function getJoystickAxis(joystick:Joystick, axis:Int):Int {\r\n        return 0;\r\n    }\r\n\r\n\r\n    public function isWorkerRegistered(name:String):Bool {\r\n        return false;\r\n    }\r\n\r\n    //todo\r\n    public function registerWorker(name:String, cls:String -> Worker) {\r\n        var key = name.toString();\r\n        _workers.set(key, cls);\r\n    }\r\n\r\n\r\n    static var _defaultCanvas:AbstractCanvas;\r\n    public static var defaultCanvas(get, set):AbstractCanvas;\r\n\r\n\r\n    static function get_defaultCanvas() {\r\n        return _defaultCanvas;\r\n    }\r\n\r\n    static function set_defaultCanvas(value) {\r\n        _defaultCanvas = value;\r\n        return value;\r\n    }\r\n\r\n\r\n    public function new(name, width, height, flags) {\r\n        this._name = name;\r\n        this._flags = flags;\r\n        this._data = Provider.create();\r\n        this._active = false;\r\n\r\n        this._swapBuffersAtEnterFrame = true;\r\n        this._enterFrame = new Signal3<AbstractCanvas, Float, Float>();\r\n        this._resized = new Signal3<AbstractCanvas, Int, Int>();\r\n        this._fileDropped = new Signal<String>();\r\n        this._joystickAdded = new Signal2<AbstractCanvas, Joystick>();\r\n        this._joystickRemoved = new Signal2<AbstractCanvas, Joystick>();\r\n        this._suspended = new Signal<AbstractCanvas>();\r\n        this._resumed = new Signal<AbstractCanvas>();\r\n        this._width = width;\r\n        this._height = height;\r\n        this._x = 0;\r\n        this._y = 0;\r\n        this._onWindow = false;\r\n        this._enableRendering = true;\r\n        this._activeWorkers = [];\r\n        _data.set(\"viewport\", new Vec4(0.0, 0.0, width, height));\r\n    }\r\n\r\n    public function initialize() {\r\n    }\r\n\r\n    function get_enterFrame() {\r\n        return _enterFrame;\r\n    }\r\n\r\n    public function joystick(id) {\r\n        return id < numJoysticks ? _joysticks.get(id) : null;\r\n    }\r\n\r\n    function get_aspectRatio() {\r\n        return width / height;\r\n    }\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n\r\n    function get_context() {\r\n        return _context;\r\n    }\r\n\r\n    function get_mouse() {\r\n        return _mouse;\r\n    }\r\n\r\n    function get_keyboard() {\r\n        return _keyboard;\r\n    }\r\n\r\n    function get_touch() {\r\n        return _touch;\r\n    }\r\n\r\n\r\n    function get_numJoysticks() {\r\n        return Lambda.count(_joysticks);\r\n    }\r\n\r\n    function get_resized() {\r\n        return _resized;\r\n    }\r\n\r\n    function get_joystickAdded() {\r\n        return _joystickAdded;\r\n    }\r\n\r\n    function get_joystickRemoved() {\r\n        return _joystickRemoved;\r\n    }\r\n\r\n    function get_suspended() {\r\n        return _suspended;\r\n    }\r\n\r\n    function get_resumed() {\r\n        return _resumed;\r\n    }\r\n\r\n    function get_active() {\r\n        return _active;\r\n    }\r\n\r\n\r\n    public function createScene() {\r\n        var sceneManager = SceneManager.create(this);\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera_mat:Mat4 = GLM.lookAt(new Vec3(0.0, 0.0, 3.0), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4());\r\n        camera_mat = Mat4.invert(camera_mat, new Mat4());\r\n\r\n        _camera = Node.create(\"camera\").addComponent(Renderer.create(0x7f7f7fff))\r\n        .addComponent(Transform.createbyMatrix4(camera_mat))\r\n        .addComponent(PerspectiveCamera.create(this.aspectRatio));\r\n        root.addChild(_camera);\r\n        _resizedSlot = _resized.connect(function(canvas, w, h) {\r\n            var perspectiveCamera:PerspectiveCamera = cast _camera.getComponent(PerspectiveCamera);\r\n            perspectiveCamera.aspectRatio = (w / h);\r\n        });\r\n        return root;\r\n    }\r\n\r\n\r\n\r\n\r\n    function get_x() {\r\n        return _x;\r\n    }\r\n\r\n\r\n    function get_y() {\r\n        return _y;\r\n    }\r\n\r\n\r\n    function get_width() {\r\n        return _width;\r\n    }\r\n\r\n\r\n    function get_height() {\r\n        return _height;\r\n    }\r\n\r\n    function set_x(value) {\r\n        if (value != _x) {\r\n            var viewport:Vec4 = cast _data.get(\"viewport\");\r\n\r\n            _x = value;\r\n            viewport.x = value;\r\n            _data.set(\"viewport\", viewport);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function set_y(value) {\r\n        if (value != _y) {\r\n            var viewport:Vec4 = cast _data.get(\"viewport\");\r\n\r\n            _y = value;\r\n            viewport.y = value;\r\n            _data.set(\"viewport\", viewport);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function set_width(value) {\r\n        if (value != _width) {\r\n            var viewport:Vec4 = cast _data.get(\"viewport\");\r\n\r\n            _width = value;\r\n            viewport.z = value;\r\n            _data.set(\"viewport\", viewport);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function set_height(value) {\r\n        if (value != _height) {\r\n            var viewport:Vec4 = cast _data.get(\"viewport\");\r\n\r\n            _height = value;\r\n            viewport.w = value;\r\n            _data.set(\"viewport\", viewport);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public function step() {\r\n        // framerate in seconds\r\n        var that = this;\r\n\r\n\r\n#if MINKO_PLATFORM != MINKO_PLATFORM_HTML5\r\n\t\tfor (  worker in _activeWorkers)\r\n\t\t{\r\n\t\t\tworker.poll();\r\n\t\t}\r\n\t#end\r\n\r\n\r\n        Timer.update();\r\n\r\n        if (_enableRendering) {\r\n            _enterFrame.execute(that, (Timer.lastTimeStamp-Timer.startTimeStamp) * 1000.0, Timer.dt * 1000.0);\r\n\r\n            if (_swapBuffersAtEnterFrame) {\r\n                swapBuffers();\r\n            }\r\n        }\r\n\r\n\r\n        if (Timer.remainingTime > 0) {\r\n            _backend.wait(that, (Timer.remainingTime ));\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public function run() {\r\n        _active = true;\r\n\r\n        _backend.run(this);\r\n    }\r\n\r\n    public function quit() {\r\n        _active = false;\r\n\r\n    }\r\n\r\n    public function getWorker(name:String):Worker {\r\n        if (!_workers.exists(name)) {\r\n            return null;\r\n        }\r\n\r\n        var worker = _workers.get(name)(name);\r\n\r\n        _activeWorkers.push(worker);\r\n\r\n        return worker;\r\n    }\r\n\r\n\r\n    public function swapBuffers() {\r\n        _backend.swapBuffers(this);\r\n    }\r\n\r\n\r\n\r\n    public function resetInputs() {\r\n        while (_touch.numTouches > 0) {\r\n            var id = _touch.identifiers[0];\r\n            var touch = _touch.touches.get(id);\r\n\r\n            var x = touch.x;\r\n            var y = touch.y;\r\n\r\n            _touch.updateTouch(id, x, y, 0, 0);\r\n            _touch.touchMove.execute(_touch, id, 0, 0);\r\n\r\n            _touch.removeTouch(id);\r\n            _touch.touchUp.execute(_touch, id, x, y);\r\n        }\r\n\r\n        _mouse.dX = (0);\r\n        _mouse.dY = (0);\r\n\r\n        if (_mouse.leftButtonIsDown) {\r\n            _mouse.leftButtonUp.execute(_mouse);\r\n        }\r\n        if (_mouse.rightButtonIsDown) {\r\n            _mouse.rightButtonUp.execute(_mouse);\r\n        }\r\n        if (_mouse.middleButtonIsDown) {\r\n            _mouse.middleButtonUp.execute(_mouse);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","package minko;\r\nimport minko.AbstractCanvas.Flags;\r\nenum EventKind {\r\n    EPush;\r\n    ERelease;\r\n    EMove;\r\n    EOver;\r\n    EOut;\r\n    EWheel;\r\n    EFocus;\r\n    EFocusLost;\r\n    EKeyDown;\r\n    EKeyUp;\r\n    EReleaseOutside;\r\n    ETextInput;\r\n    /**\r\n\t\tUsed to check if we are still on the interactive if no EMove was triggered this frame.\r\n\t**/\r\n    ECheck;\r\n}\r\n\r\nclass Event {\r\n\r\n    public var kind:EventKind;\r\n    public var relX:Float;\r\n    public var relY:Float;\r\n    public var relZ:Float;\r\n    /**\r\n\t\tWill propagate the event to other interactives that are below the current one.\r\n\t**/\r\n    public var propagate:Bool;\r\n    /**\r\n\t\tWill cancel the default behavior for this event as if it had happen outside of the interactive zone.\r\n\t**/\r\n    public var cancel:Bool;\r\n    public var button:Int = 0;\r\n    public var touchId:Int;\r\n    public var keyCode:Int;\r\n    public var charCode:Int;\r\n    public var wheelDelta:Float;\r\n\r\n    public function new(k, x = 0., y = 0.) {\r\n        kind = k;\r\n        this.relX = x;\r\n        this.relY = y;\r\n    }\r\n\r\n    public function toString() {\r\n        return kind + \"[\" + Std.int(relX) + \",\" + Std.int(relY) + \"]\" + switch( kind ) {\r\n            case EventKind.EPush, EventKind.ERelease, EventKind.EReleaseOutside: \",button=\" + button;\r\n            case EventKind.EMove, EventKind.EOver, EventKind.EOut, EventKind.EFocus, EventKind.EFocusLost, EventKind.ECheck: \"\";\r\n            case EventKind.EWheel: \",wheelDelta=\" + wheelDelta;\r\n            case EventKind.EKeyDown, EventKind.EKeyUp: \",keyCode=\" + keyCode;\r\n            case EventKind.ETextInput: \",charCode=\" + charCode;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n#if js\r\n@:expose(\"minko.Canvas\")\r\ntypedef Canvas =WebCanvas;\r\n#end\r\n\r\nclass CanvasManager {\r\n    static public function create(name,\r\n                                  width = 800,\r\n                                  height = 600,\r\n                                  flags = Flags.RESIZABLE):Canvas {\r\n        var canvas= new Canvas(name,\r\n        width ,\r\n        height ,\r\n        flags );\r\n        canvas.initialize();\r\n\r\n        if (AbstractCanvas.defaultCanvas == null)\r\n            AbstractCanvas.defaultCanvas = canvas;\r\n\r\n        return canvas;\r\n    }\r\n}\r\n","package minko;\r\n\r\nimport minko.utils.MathUtil;\r\nclass Timer {\r\n\r\n    /**\r\n\t\tThe FPS on which \"tmod\" have values are based on.\r\n\t\tCan be freely configured if your gameplay runs at a different speed.\r\n\t\tDefault : 60\r\n\t**/\r\n    public static var wantedFPS = 60.;\r\n\r\n    /**\r\n\t\tThe maximum amount of time between two frames (in seconds).\r\n\t\tIf the time exceed this amount, Timer will consider these lags are to be ignored.\r\n\t\tDefault : 0.5\r\n\t**/\r\n    public static var maxDeltaTime = 0.5;\r\n\r\n    /**\r\n\t\tThe smoothing done between frames. A smoothing of 0 gives \"real time\" values, higher values will smooth\r\n\t\tthe results for tmod/dt/fps over frames using the formula   dt = lerp(dt, elapsedTime, smoothFactor)\r\n\t\tDefault : 0 on HashLink, 0.95 on other platforms\r\n\t**/\r\n    public static var smoothFactor = 0.95;\r\n\r\n    /**\r\n\t\tThe last timestamp in which update() function was called.\r\n\t**/\r\n    public static var lastTimeStamp(default,null) = haxe.Timer.stamp();\r\n    public static var startTimeStamp(default,null) = haxe.Timer.stamp();\r\n    /**\r\n\t\tThe amount of time (unsmoothed) that was spent since the last frame.\r\n\t**/\r\n    public static var elapsedTime(default,null) = 0.;\r\n\r\n    /**\r\n\t\tA frame counter, increases on each call to update()\r\n\t**/\r\n    public static var frameCount = 0;\r\n\r\n    /**\r\n\t\tThe smoothed elapsed time (in seconds).\r\n\t**/\r\n    public static var dt : Float = 1 / wantedFPS;\r\n\r\n    /**\r\n\t\tThe smoothed frame modifier, based on wantedFPS. Its value is the same as dt/wantedFPS\r\n\t\tAllows to express movements in terms of pixels-per-frame-at-wantedFPS instead of per second.\r\n\t**/\r\n    public static var tmod(get,set) : Float;\r\n\r\n    static var currentDT : Float = 1 / wantedFPS;\r\n    public static var remainingTime : Float = 1 / wantedFPS;\r\n\r\n    /**\r\n\t\tUpdate the timer calculus on each frame. This is automatically called by hxd.App\r\n\t**/\r\n    public static function update() {\r\n        frameCount++;\r\n        var newTime = haxe.Timer.stamp();\r\n        elapsedTime = newTime - lastTimeStamp;\r\n        lastTimeStamp = newTime;\r\n        if( elapsedTime < maxDeltaTime ){\r\n            currentDT = MathUtil.lerp(elapsedTime, currentDT, smoothFactor);\r\n            remainingTime=1 / wantedFPS-currentDT;\r\n        }\r\n        else{\r\n            elapsedTime = 1 / wantedFPS;\r\n            remainingTime=0;\r\n        }\r\n\r\n        dt = currentDT;\r\n\r\n    }\r\n\r\n    inline static function get_tmod() {\r\n        return dt * wantedFPS;\r\n    }\r\n\r\n    inline static function set_tmod(v:Float) {\r\n        dt = v / wantedFPS;\r\n        return v;\r\n    }\r\n\r\n    /**\r\n\t\tThe current smoothed FPS.\r\n\t**/\r\n    public static function fps() : Float {\r\n        // use currentDT to prevent gameplay change of dt to affect the displayed fps\r\n        return 1. / currentDT;\r\n    }\r\n\r\n    /**\r\n\t\tAfter some loading / long processing, call skip() in order to prevent\r\n\t\tit from impacting your smoothed values.\r\n\t**/\r\n    public static function skip() {\r\n        lastTimeStamp = haxe.Timer.stamp();\r\n    }\r\n\r\n    /**\r\n\t\tSimilar as skip() but also reset dt to default value.\r\n\t\tCan be used when starting a new game if you want to discard any previous measurement.\r\n\t**/\r\n    public static function reset() {\r\n        startTimeStamp=lastTimeStamp = haxe.Timer.stamp();\r\n        dt = currentDT = 1. / wantedFPS;\r\n    }\r\n}","package minko;\r\n@:expose(\"minko.Tuple\")\r\nclass Tuple<T, K> {\r\n    public var first:T;\r\n    public var second:K;\r\n\r\n    public function new(f, s) {\r\n        first = f;\r\n        second = s;\r\n    }\r\n}\r\n@:expose(\"minko.Tuple3\")\r\nclass Tuple3<A, B, C> {\r\n    public var first:A;\r\n    public var second:B;\r\n    public var thiree:C;\r\n\r\n    public function new(f, s, t) {\r\n        first = f;\r\n        second = s;\r\n        thiree = t;\r\n    }\r\n}\r\n@:expose(\"minko.Tuple4\")\r\nclass Tuple4<A, B, C, D> {\r\n    public var first:A;\r\n    public var second:B;\r\n    public var thiree:C;\r\n    public var four:D;\r\n\r\n    public function new(a, b, c, d) {\r\n        first = a;\r\n        second = b;\r\n        thiree = c;\r\n        four = d;\r\n    }\r\n}\r\n@:expose(\"minko.Tuple5\")\r\nclass Tuple5<A, B, C, D, E> {\r\n    public var first:A;\r\n    public var second:B;\r\n    public var thiree:C;\r\n    public var four:D;\r\n    public var five:E;\r\n\r\n    public function new(a, b, c, d, e) {\r\n        first = a;\r\n        second = b;\r\n        thiree = c;\r\n        four = d;\r\n        five = e;\r\n    }\r\n}\r\n@:expose(\"minko.Tuple6\")\r\nclass Tuple6<A, B, C, D, E, F> {\r\n    public var first:A;\r\n    public var second:B;\r\n    public var thiree:C;\r\n    public var four:D;\r\n    public var five:E;\r\n    public var six:F;\r\n\r\n    public function new(a, b, c, d, e, f) {\r\n        first = a;\r\n        second = b;\r\n        thiree = c;\r\n        four = d;\r\n        five = e;\r\n        six = f;\r\n    }\r\n}\r\n","package minko;\r\n@:expose(\"minko.WebBackend\")\r\nclass WebBackend extends AbstractBackend {\r\n    public var currentCanvas:AbstractCanvas ;\r\n    public var canvasHidden:Int;\r\n\r\n    static public function create() {\r\n        return new WebBackend();\r\n    }\r\n\r\n    public function new() {\r\n        super();\r\n    }\r\n\r\n    override public function initialize(canvas) {\r\n        // Nothing, because we already have the browser.\r\n    }\r\n\r\n    override public function swapBuffers(canvas) {\r\n    }\r\n\r\n    override public function run(canvas:AbstractCanvas) {\r\n        currentCanvas = canvas;\r\n\r\n        setLoop(emscriptenMainLoop);\r\n    }\r\n\r\n    override public function wait(canvas, ms) {\r\n        // Nothing, because emscripten_set_main_loop calls step on a timer.\r\n    }\r\n\r\n\r\n    public function emscriptenMainLoop() {\r\n\r\n        currentCanvas.step( );\r\n    }\r\n    static var loopFunc:Void -> Void;\r\n\r\n    // JS\r\n    static var loopInit = false;\r\n\r\n    public static function getCurrentLoop():Void -> Void {\r\n        return loopFunc;\r\n    }\r\n\r\n    public static function setLoop(f:Void -> Void):Void {\r\n        if (!loopInit) {\r\n            loopInit = true;\r\n            browserLoop();\r\n        }\r\n        loopFunc = f;\r\n    }\r\n\r\n    static function browserLoop() {\r\n        var window:Dynamic = js.Browser.window;\r\n        var rqf:Dynamic = window.requestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame ||\r\n        window.mozRequestAnimationFrame;\r\n        rqf(browserLoop);\r\n        if (loopFunc != null) loopFunc();\r\n    }\r\n\r\n\r\n}\r\n","package minko;\r\nimport js.html.webgl.GL;\r\nimport minko.AbstractCanvas.Flags;\r\nimport minko.Canvas.Event;\r\nimport minko.Canvas.EventKind;\r\nimport minko.file.Options;\r\nimport minko.input.Keyboard;\r\nimport minko.input.Mouse;\r\nimport minko.input.Keyboard;\r\nimport minko.input.Touch;\r\nimport minko.net.WebHTTPProtocol;\r\nimport minko.render.GlContext;\r\n@:expose(\"minko.WebCanvas\")\r\nclass WebCanvas extends AbstractCanvas {\r\n    static public function create(name,\r\n                                  width = 800,\r\n                                  height = 600,\r\n                                  flags = Flags.RESIZABLE):WebCanvas {\r\n        var canvas = new WebCanvas(name, width, height, flags);\r\n\r\n        canvas.initialize();\r\n\r\n        if (AbstractCanvas.defaultCanvas == null)\r\n            AbstractCanvas.defaultCanvas = canvas;\r\n\r\n        return canvas;\r\n\r\n    }\r\n    var events:Array<Event>;\r\n\r\n    public function new(name, width, height, flags) {\r\n        super(name, width, height, flags);\r\n        events = [];\r\n    }\r\n\r\n    override public function initialize() :Void{\r\n        Options.registerDefaultProtocol(\"file\", function() return new WebHTTPProtocol());\r\n        initializeInputs();\r\n        initializeWindow();\r\n        initializeContext();\r\n    }\r\n\r\n    public function initializeInputs() {\r\n        Stage.getInstance().addEventTarget(onEvent);\r\n        // Stage.getInstance().addResizeEvent(onResize);\r\n    }\r\n\r\n    public function initializeWindow() {\r\n        _keyboard = Keyboard.create();\r\n        _mouse = Mouse.create(this);\r\n        _touch = Touch.create(this);\r\n\r\n    }\r\n\r\n    public function initializeContext() {\r\n        _backend = WebBackend.create();\r\n        _backend.initialize(this);\r\n        var context:GlContext = GlContext.create();\r\n        if (context == null) {\r\n            throw (\"Could not create context\");\r\n        }\r\n        var antiAlias = 0;\r\n        var canvas:js.html.CanvasElement = @:privateAccess Stage.getInstance().canvas;\r\n       //  var gl =   canvas.getContext(\"webgl2\");\r\n       // var gl = canvas.getContextWebGL({alpha:false, stencil:true, antialias:antiAlias > 0});\r\n        var gl = canvas.getContextWebGL({alpha:false, stencil:true, antialias:false});\r\n        if (gl == null) throw \"Could not acquire GL context\";\r\n        @:privateAccess context.gl = gl;\r\n        var reg = ~/[0-9]+\\.[0-9]+/;\r\n        var version : String = gl.getParameter(GL.SHADING_LANGUAGE_VERSION);\r\n//        gl.getExtension(\"OES_standard_derivatives\");\r\n//        gl.getExtension(\"EXT_shader_texture_lod\");\r\n        if( reg.match(version) ) {\r\n            var glES = Std.parseFloat(reg.matched(0));\r\n            var version2 = Math.round( Std.parseFloat(reg.matched(0)) * 100 );\r\n            trace(glES,version2);\r\n        }\r\n        context.initialize();\r\n        _context = context;\r\n\r\n    }\r\n\r\n    function onResize() {\r\n        this.width = Stage.getInstance().width;\r\n        this.height = Stage.getInstance().height;\r\n        _context.configureViewport(x, y, width, height);\r\n        _resized.execute(this, width, height);\r\n    }\r\n\r\n    function onEvent(e:Event) {\r\n        events.push(e);\r\n    }\r\n\r\n    function stepEvent() {\r\n        var ee:Array<Event> = events.concat([]);\r\n        events = [];\r\n        var executeMouseMove = false;\r\n        var mouseDX = 0;\r\n        var mouseDY = 0;\r\n        for (e in ee) {\r\n            var kind = e.kind;\r\n            switch( kind ) {\r\n                case EventKind.EPush:\r\n                    _mouse.x = Math.floor(e.relX);\r\n                    _mouse.y = Math.floor(e.relY);\r\n                    switch (e.button)\r\n                    {\r\n                        case 0:\r\n                            _mouse.leftButtonDown.execute(_mouse);\r\n                            break;\r\n                        case 1:\r\n                            _mouse.rightButtonDown.execute(_mouse);\r\n                            break;\r\n                        case 2:\r\n                            _mouse.middleButtonDown.execute(_mouse);\r\n                            break;\r\n                    }\r\n                case EventKind.ERelease:\r\n                    _mouse.x = Math.floor(e.relX);\r\n                    _mouse.y = Math.floor(e.relY);\r\n                    switch (e.button)\r\n                    {\r\n                        case 0:\r\n                            _mouse.leftButtonUp.execute(_mouse);\r\n                            break;\r\n                        case 1:\r\n                            _mouse.rightButtonUp.execute(_mouse);\r\n                            break;\r\n                        case 2:\r\n                            _mouse.middleButtonUp.execute(_mouse);\r\n                            break;\r\n                    }\r\n                case EventKind.EReleaseOutside:\r\n                case EventKind.EMove:\r\n                    var dX:Int = Math.floor(e.relX) - mouse.x;\r\n                    var dY:Int = Math.floor(e.relY) - mouse.y;\r\n                    mouse.x = Math.floor(e.relX);\r\n                    mouse.y = Math.floor(e.relY);\r\n                    mouseDX += dX;\r\n                    mouseDY += dY;\r\n                    executeMouseMove = true;\r\n                case EventKind.EOver:\r\n                case EventKind.EOut:\r\n                case EventKind.EFocus:\r\n                case EventKind.EFocusLost:\r\n                case EventKind.ECheck:\r\n\r\n                case EventKind.EWheel:\r\n                    _mouse.wheel.execute(_mouse, e.wheelDelta, e.wheelDelta);\r\n                case EventKind.EKeyDown:\r\n                    var keyCode = e.keyCode;\r\n                    _keyboard.setKeyboardState(keyCode, 1);\r\n                    _keyboard.keyDown.execute(_keyboard);\r\n\r\n                    for (i in 0... Keyboard.NUM_KEYS) {\r\n                        var code:Key = (i);\r\n                        if (!_keyboard.hasKeyDownSignal(code))\r\n                            continue;\r\n                        if (KeyMap.keyToKeyCodeMap.exists(code) && KeyMap.keyToKeyCodeMap.get(code) == keyCode)\r\n                            _keyboard.getKeyDown(code).execute(_keyboard, i);\r\n                    }\r\n                case EventKind.EKeyUp:\r\n                    var keyCode = e.keyCode;\r\n                    _keyboard.setKeyboardState(keyCode, 0);\r\n                    _keyboard.keyUp.execute(_keyboard);\r\n\r\n                    for (i in 0... Keyboard.NUM_KEYS) {\r\n                        var code:Key = (i);\r\n                        if (!_keyboard.hasKeyUpSignal(code))\r\n                            continue;\r\n                        if (KeyMap.keyToKeyCodeMap.exists(code) && KeyMap.keyToKeyCodeMap.get(code) == keyCode)\r\n                            _keyboard.getKeyUp(code).execute(_keyboard, i);\r\n                    }\r\n                    for (i in 0... Keyboard.NUM_KEYS) {\r\n                        var code:Key = (i);\r\n                        if (_keyboard.hasKeyUpSignal(code))\r\n                            _keyboard.getKeyUp(code).execute(_keyboard, i);\r\n                    }\r\n                case EventKind.ETextInput:\r\n                    var c = e.charCode;\r\n                    _keyboard.textInput.execute(_keyboard, c);\r\n            }\r\n            if (executeMouseMove) {\r\n                _mouse.move.execute(_mouse, mouseDX, mouseDY);\r\n            }\r\n        }\r\n    }\r\n\r\n    override public function step() {\r\n        stepEvent();\r\n        super.step();\r\n    }\r\n}\r\nclass Stage {\r\n\r\n    var resizeEvents:List<Void -> Void>;\r\n    var eventTargets:List<Event -> Void>;\r\n\r\n    public var width(get, never):Int;\r\n    public var height(get, never):Int;\r\n    public var mouseX(get, never):Int;\r\n    public var mouseY(get, never):Int;\r\n    public var mouseLock(get, set):Bool;\r\n    public var vsync(get, set):Bool;\r\n\r\n    var curMouseX:Float = 0.;\r\n    var curMouseY:Float = 0.;\r\n\r\n    var canvas:js.html.CanvasElement;\r\n    var element:js.html.EventTarget;\r\n    var canvasPos:{ var width(default, never):Float; var height(default, never):Float; var left(default, never):Float; var top(default, never):Float; };\r\n    var timer:haxe.Timer;\r\n\r\n    var curW:Int;\r\n    var curH:Int;\r\n\r\n    function new(?canvas:js.html.CanvasElement):Void {\r\n        eventTargets = new List();\r\n        resizeEvents = new List();\r\n\r\n        element = canvas == null ? js.Browser.window : canvas;\r\n        if (canvas == null) {\r\n            canvas = cast js.Browser.document.getElementById(\"webgl\");\r\n            if (canvas == null) throw \"Missing canvas #webgl\";\r\n        }\r\n        this.canvas = canvas;\r\n        canvasPos = canvas.getBoundingClientRect();\r\n        element.addEventListener(\"mousedown\", onMouseDown);\r\n        element.addEventListener(\"mousemove\", onMouseMove);\r\n        element.addEventListener(\"mouseup\", onMouseUp);\r\n        element.addEventListener(\"mousewheel\", onMouseWheel);\r\n        element.addEventListener(\"touchstart\", onTouchStart);\r\n        element.addEventListener(\"touchmove\", onTouchMove);\r\n        element.addEventListener(\"touchend\", onTouchEnd);\r\n        element.addEventListener(\"keydown\", onKeyDown);\r\n        element.addEventListener(\"keyup\", onKeyUp);\r\n        element.addEventListener(\"keypress\", onKeyPress);\r\n        if (element == canvas) {\r\n            canvas.setAttribute(\"tabindex\", \"1\"); // allow focus\r\n            canvas.style.outline = 'none';\r\n        } else {\r\n            canvas.addEventListener(\"mousedown\", function(e) {\r\n                onMouseDown(e);\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n            });\r\n            canvas.oncontextmenu = function(e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                return false;\r\n            };\r\n        }\r\n        curW = this.width;\r\n        curH = this.height;\r\n        timer = new haxe.Timer(100);\r\n        timer.run = checkResize;\r\n    }\r\n\r\n    function checkResize() {\r\n        canvasPos = canvas.getBoundingClientRect();\r\n        var cw = this.width, ch = this.height;\r\n        if (curW != cw || curH != ch) {\r\n            curW = cw;\r\n            curH = ch;\r\n            onResize(null);\r\n        }\r\n    }\r\n\r\n    public function dispose() {\r\n        timer.stop();\r\n    }\r\n\r\n    public dynamic function onClose():Bool {\r\n        return true;\r\n    }\r\n\r\n    public function event(e:Event):Void {\r\n        for (et in eventTargets)\r\n            et(e);\r\n    }\r\n\r\n    public function addEventTarget(et:Event -> Void):Void {\r\n        eventTargets.add(et);\r\n    }\r\n\r\n    public function removeEventTarget(et:Event -> Void):Void {\r\n        eventTargets = eventTargets.filter(function(e) {\r\n            return !Reflect.compareMethods(e, et);\r\n        });\r\n\r\n    }\r\n\r\n    public function addResizeEvent(f:Void -> Void):Void {\r\n        resizeEvents.push(f);\r\n    }\r\n\r\n    public function removeResizeEvent(f:Void -> Void):Void {\r\n        resizeEvents = resizeEvents.filter(function(e) {\r\n            return !Reflect.compareMethods(e, f);\r\n        });\r\n\r\n    }\r\n\r\n    function onResize(e:Dynamic):Void {\r\n        for (r in resizeEvents)\r\n            r();\r\n    }\r\n\r\n    public function resize(width:Int, height:Int):Void {\r\n    }\r\n\r\n    public function setFullScreen(v:Bool):Void {\r\n    }\r\n\r\n    public function setCurrent() {\r\n        inst = this;\r\n    }\r\n\r\n    static var inst:Stage = null;\r\n\r\n    public static function getInstance():Stage {\r\n        if (inst == null) inst = new Stage();\r\n        return inst;\r\n    }\r\n\r\n    function get_width() {\r\n        return Math.round(canvasPos.width * js.Browser.window.devicePixelRatio);\r\n    }\r\n\r\n    function get_height() {\r\n        return Math.round(canvasPos.height * js.Browser.window.devicePixelRatio);\r\n    }\r\n\r\n    function get_mouseX() {\r\n        return Math.round((curMouseX - canvasPos.left) * js.Browser.window.devicePixelRatio);\r\n    }\r\n\r\n    function get_mouseY() {\r\n        return Math.round((curMouseY - canvasPos.top) * js.Browser.window.devicePixelRatio);\r\n    }\r\n\r\n    function get_mouseLock():Bool {\r\n        return false;\r\n    }\r\n\r\n    function set_mouseLock(v:Bool):Bool {\r\n        if (v) throw \"Not implemented\";\r\n        return false;\r\n    }\r\n\r\n    function get_vsync():Bool return true;\r\n\r\n    function set_vsync(b:Bool):Bool {\r\n        if (!b) throw \"Can't disable vsync on this platform\";\r\n        return true;\r\n    }\r\n/*\r\n 0：主按键被按下，通常指鼠标左键 or the un-initialized state\r\n1：辅助按键被按下，通常指鼠标滚轮 or the middle button (if present)\r\n2：次按键被按下，通常指鼠标右键\r\n3：第四个按钮被按下，通常指浏览器后退按钮\r\n4：第五个按钮被按下，通常指浏览器的前进按钮\r\n*/\r\n    function onMouseDown(e:js.html.MouseEvent) {\r\n        var ev = new Event(EventKind.EPush, mouseX, mouseY);\r\n        ev.button = switch( e.button ) {\r\n            case 1: 2;\r\n            case 2: 1;\r\n            case x: x;\r\n        };\r\n        event(ev);\r\n    }\r\n\r\n    function onMouseUp(e:js.html.MouseEvent) {\r\n        var ev = new Event(EventKind.ERelease, mouseX, mouseY);\r\n        ev.button = switch( e.button ) {\r\n            case 1: 2;\r\n            case 2: 1;\r\n            case x: x;\r\n        };\r\n        event(ev);\r\n    }\r\n\r\n    function onMouseMove(e:js.html.MouseEvent) {\r\n        curMouseX = e.clientX;\r\n        curMouseY = e.clientY;\r\n        event(new Event(EventKind.EMove, mouseX, mouseY));\r\n    }\r\n\r\n    function onMouseWheel(e:js.html.MouseEvent) {\r\n        var ev = new Event(EventKind.EWheel, mouseX, mouseY);\r\n        ev.wheelDelta = untyped -e.wheelDelta / 30.0;\r\n        event(ev);\r\n    }\r\n\r\n    function onTouchStart(e:js.html.TouchEvent) {\r\n        e.preventDefault();\r\n        var x, y, ev;\r\n        for (touch in e.changedTouches) {\r\n            x = Math.round((touch.clientX - canvasPos.left) * js.Browser.window.devicePixelRatio);\r\n            y = Math.round((touch.clientY - canvasPos.top) * js.Browser.window.devicePixelRatio);\r\n            ev = new Event(EventKind.EPush, x, y);\r\n            ev.touchId = touch.identifier;\r\n            event(ev);\r\n        }\r\n    }\r\n\r\n    function onTouchMove(e:js.html.TouchEvent) {\r\n        e.preventDefault();\r\n        var x, y, ev;\r\n        for (touch in e.changedTouches) {\r\n            x = Math.round((touch.clientX - canvasPos.left) * js.Browser.window.devicePixelRatio);\r\n            y = Math.round((touch.clientY - canvasPos.top) * js.Browser.window.devicePixelRatio);\r\n            ev = new Event(EventKind.EMove, x, y);\r\n            ev.touchId = touch.identifier;\r\n            event(ev);\r\n        }\r\n    }\r\n\r\n    function onTouchEnd(e:js.html.TouchEvent) {\r\n        e.preventDefault();\r\n        var x, y, ev;\r\n        for (touch in e.changedTouches) {\r\n            x = Math.round((touch.clientX - canvasPos.left) * js.Browser.window.devicePixelRatio);\r\n            y = Math.round((touch.clientY - canvasPos.top) * js.Browser.window.devicePixelRatio);\r\n            ev = new Event(EventKind.ERelease, x, y);\r\n            ev.touchId = touch.identifier;\r\n            event(ev);\r\n        }\r\n    }\r\n\r\n    function onKeyUp(e:js.html.KeyboardEvent) {\r\n        var ev = new Event(EventKind.EKeyUp, mouseX, mouseY);\r\n        ev.keyCode = e.keyCode;\r\n        event(ev);\r\n    }\r\n\r\n    function onKeyDown(e:js.html.KeyboardEvent) {\r\n        var ev = new Event(EventKind.EKeyDown, mouseX, mouseY);\r\n        ev.keyCode = e.keyCode;\r\n        event(ev);\r\n    }\r\n\r\n    function onKeyPress(e:js.html.KeyboardEvent) {\r\n        var ev = new Event(EventKind.ETextInput, mouseX, mouseY);\r\n        ev.charCode = e.charCode;\r\n        event(ev);\r\n    }\r\n\r\n}","package minko.animation;\r\nimport minko.data.Store;\r\n@:expose\r\nclass AbstractTimeline {\r\n\r\n\r\n    private var _propertyName:String;\r\n    private var _duration:Int;\r\n    private var _isLocked:Bool;\r\n\r\n    public function clone() {\r\n        throw (\"Missing clone function for a component.\");\r\n        return null;\r\n    }\r\n\r\n    public var propertyName(get, set):String;\r\n\r\n    function get_propertyName() {\r\n        return _propertyName;\r\n    }\r\n\r\n    function set_propertyName(value) {\r\n        _propertyName = value;\r\n        return value;\r\n    }\r\n    public var duration(get, set):Int;\r\n\r\n    function get_duration() {\r\n        return _duration;\r\n    }\r\n\r\n    function set_duration(value) {\r\n        _duration = value;\r\n        return value;\r\n    }\r\n\r\n    public var isLocked(get, set):Bool;\r\n\r\n    function get_isLocked() {\r\n        return _isLocked;\r\n    }\r\n\r\n    function set_isLocked(value) {\r\n        _isLocked = value;\r\n        return value;\r\n    }\r\n\r\n    public function update(time:Int, data:Store, ?skipPropertyNameFormatting:Bool = true) {\r\n\r\n    }\r\n\r\n    public function new(propertyName, duration) {\r\n        this._propertyName = propertyName;\r\n        this._duration = duration;\r\n        this._isLocked = false;\r\n\r\n    }\r\n\r\n    public function dispose():Void {\r\n        \r\n    }\r\n}\r\n","package minko.animation;\r\nimport glm.Mat4;\r\nimport minko.data.Store;\r\n@:expose\r\nclass TimelineLookup {\r\n    public var timetable:Int;\r\n    public var mat4:Mat4;\r\n\r\n    public function new() {\r\n\r\n    }\r\n\r\n    public static function interpolate(thisMat:Mat4, toMat:Mat4, percent:Float):Mat4 {\r\n\r\n        var m:Mat4 = new Mat4();\r\n        m.r0c0 = thisMat.r0c0 + (toMat.r0c0 - thisMat.r0c0) * percent;\r\n        m.r0c1 = thisMat.r0c1 + (toMat.r0c1 - thisMat.r0c1) * percent;\r\n        m.r0c2 = thisMat.r0c2 + (toMat.r0c2 - thisMat.r0c2) * percent;\r\n        m.r0c3 = thisMat.r0c3 + (toMat.r0c3 - thisMat.r0c3) * percent;\r\n\r\n        m.r1c0 = thisMat.r1c0 + (toMat.r1c0 - thisMat.r1c0) * percent;\r\n        m.r1c1 = thisMat.r1c1 + (toMat.r1c1 - thisMat.r1c1) * percent;\r\n        m.r1c2 = thisMat.r1c2 + (toMat.r1c2 - thisMat.r1c2) * percent;\r\n        m.r1c3 = thisMat.r1c3 + (toMat.r1c3 - thisMat.r1c3) * percent;\r\n\r\n        m.r2c0 = thisMat.r2c0 + (toMat.r2c0 - thisMat.r2c0) * percent;\r\n        m.r2c1 = thisMat.r2c1 + (toMat.r2c1 - thisMat.r2c1) * percent;\r\n        m.r2c2 = thisMat.r2c2 + (toMat.r2c2 - thisMat.r2c2) * percent;\r\n        m.r2c3 = thisMat.r2c3 + (toMat.r2c3 - thisMat.r2c3) * percent;\r\n\r\n\r\n        m.r3c0 = thisMat.r3c0 + (toMat.r3c0 - thisMat.r3c0) * percent;\r\n        m.r3c1 = thisMat.r3c1 + (toMat.r3c1 - thisMat.r3c1) * percent;\r\n        m.r3c2 = thisMat.r3c2 + (toMat.r3c2 - thisMat.r3c2) * percent;\r\n        m.r3c3 = thisMat.r3c3 + (toMat.r3c3 - thisMat.r3c3) * percent;\r\n\r\n\r\n        return m;\r\n\r\n    }\r\n\r\n    static public function getTimeInRange(time:Int, duration:Int) {\r\n        var t =\r\n        if (duration > 0) {\r\n            if (time >= 0) {\r\n                time % duration;\r\n            } else {\r\n                ((time % duration) + duration) % duration;\r\n            }\r\n        } else {\r\n            0;\r\n        }\r\n\r\n\r\n        //assert(t < duration);\r\n\r\n        return t;\r\n    }\r\n\r\n    static public function getIndexForTime(time:Int, timetable:Array<TimelineLookup>) {\r\n        var numKeys = timetable.length;\r\n        if (numKeys == 0)\r\n            return 0;\r\n\r\n        var id = 0;\r\n        var lowerId = 0;\r\n        var upperId = numKeys;\r\n\r\n        while (upperId - lowerId > 1) {\r\n            id = (lowerId + upperId) >> 1;\r\n            if (timetable[id].timetable > time)\r\n                upperId = id;\r\n            else\r\n                lowerId = id;\r\n        }\r\n\r\n        // assert(lowerId < numKeys);\r\n\r\n        return lowerId;\r\n    }\r\n}\r\n@:expose\r\nclass Matrix4x4Timeline extends AbstractTimeline {\r\n\r\n    private var _matrices:Array<TimelineLookup>;\r\n    private var _interpolate:Bool;\r\n\r\n    public function new(propertyName:String, duration:Int, ?timetable:Array<Int>, ?matrices:Array<Mat4>, ?interpolate:Bool = false) {\r\n        super(propertyName, duration);\r\n        this._matrices = new Array<TimelineLookup>();\r\n        this._interpolate = interpolate;\r\n        initializeMatrixTimetable(timetable, matrices);\r\n    }\r\n\r\n    public static  function create(propertyName:String, duration:Int, ?timetable:Array<Int>, ?matrices:Array<Mat4>, ?interpolate:Bool = false) {\r\n        var ptr = new Matrix4x4Timeline(propertyName, duration, timetable, matrices, interpolate);\r\n\r\n        return ptr;\r\n    }\r\n\r\n    public static function createbyMatrix4x4Timeline(matrix:Matrix4x4Timeline) {\r\n        var ptr = new Matrix4x4Timeline(matrix._propertyName, matrix._duration);\r\n\r\n        ptr._matrices = new Array<TimelineLookup>();\r\n        ptr._interpolate = matrix._interpolate;\r\n        for (keyId in 0... matrix._matrices.length) {\r\n            ptr._matrices[keyId] = matrix._matrices[keyId];\r\n        }\r\n\r\n\r\n        return ptr;\r\n    }\r\n\r\n    override public function clone() {\r\n        return Matrix4x4Timeline.createbyMatrix4x4Timeline(this);\r\n    }\r\n\r\n    public var matrices(get, null):Array<TimelineLookup>;\r\n\r\n    function get_matrices() {\r\n        return _matrices;\r\n    }\r\n    public var interpolate(get, null):Bool;\r\n\r\n    function get_interpolate() {\r\n        return _interpolate;\r\n    }\r\n\r\n    override public function update(time:Int, data:Store, ?skipPropertyNameFormatting:Bool = true) {\r\n        if (_isLocked || _duration == 0 || _matrices.length == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_interpolate) {\r\n            data.set(_propertyName, interpolateTime(time));\r\n        }\r\n        else {\r\n            var t = TimelineLookup.getTimeInRange(time, _duration + 1);\r\n            var keyId = TimelineLookup.getIndexForTime(t, _matrices);\r\n\r\n            data.set(_propertyName, _matrices[keyId].mat4);\r\n        }\r\n    }\r\n\r\n\r\n    public function interpolateTime(time:Int) {\r\n        var t = TimelineLookup.getTimeInRange(time, _duration + 1);\r\n        var keyId = TimelineLookup.getIndexForTime(t, _matrices);\r\n\r\n        // all matrices are sorted in order of increasing time\r\n        if (t < _matrices[0].timetable || t >= _matrices[_matrices.length - 1].timetable) {\r\n            return _matrices[keyId].mat4;\r\n        }\r\n\r\n#if DEBUG\r\n\t\t\t\tDebug.Assert(keyId + 1 < (int)_matrices.Count);\r\n#end\r\n\r\n        var current = _matrices[keyId];\r\n        var next = _matrices[keyId + 1];\r\n        var ratio = current.timetable < next.timetable ? (t - current.timetable) / (next.timetable - current.timetable) : 0.0 ;\r\n\r\n        return TimelineLookup.interpolate(current.mat4, next.mat4, ratio);\r\n    }\r\n\r\n\r\n    private function initializeMatrixTimetable(timetable:Array<Int>, matrices:Array<Mat4>) {\r\n        if (timetable.length == 0) {\r\n            throw (\"timetable\");\r\n        }\r\n        if (matrices.length == 0) {\r\n            throw (\"matrices\");\r\n        }\r\n        if (timetable.length != matrices.length) {\r\n            throw (\"The number of keys must match in both the 'timetable' and 'matrices' parameters.\");\r\n        }\r\n\r\n        var numKeys = timetable.length;\r\n\r\n        _matrices = [for (i in 0...numKeys)new TimelineLookup()];\r\n\r\n        for (keyId in 0...numKeys) {\r\n            _matrices[keyId].timetable = timetable[keyId];\r\n            _matrices[keyId].mat4 = matrices[keyId];\r\n        }\r\n        _matrices.sort(function(a:TimelineLookup, b:TimelineLookup) {\r\n            return a.timetable - b.timetable;\r\n        });\r\n    }\r\n\r\n    override public function dispose():Void {\r\n    }\r\n\r\n}\r\n","package minko.async;\r\nimport haxe.io.Bytes;\r\nimport minko.async.WorkerImpl.Message;\r\nimport minko.signal.Signal2;\r\n@:expose\r\nclass Worker {\r\n\r\n    public function start(input:Bytes) {\r\n        _impl.start(input);\r\n    }\r\n\r\n    public var message(get, null):Signal2<Worker, Message>;\r\n\r\n    function get_message() {\r\n        return _impl.message ;\r\n    }\r\n\r\n\r\n    public function post(message) {\r\n        _impl.post(message);\r\n    }\r\n\r\n\r\n    public function run(input:Bytes) {\r\n\r\n    }\r\n\r\n    public function poll() {\r\n        _impl.poll();\r\n    }\r\n\r\n    public function dispose() {\r\n    }\r\n\r\n    public function new(name:String) {\r\n        _impl = new WorkerImpl(this, name);\r\n    }\r\n\r\n    private var _impl:WorkerImpl;\r\n\r\n}\r\n","package minko.async;\r\nimport haxe.io.Bytes;\r\nimport minko.signal.Signal2;\r\n\r\n@:expose\r\nclass Message{\r\n    public var type:String;\r\n    public var data:Any;\r\n    public function new(){\r\n\r\n    }\r\n}\r\n@:expose\r\nclass WorkerImpl {\r\n\r\n    public function start(input:Bytes) {\r\n\r\n    }\r\n\r\n\r\n    public function poll() {\r\n\r\n    }\r\n\r\n    public function post(message:Message) {\r\n\r\n    }\r\n\r\n    public var message(get, null):Signal2<Worker, Message>;\r\n\r\n    function get_message() {\r\n        return null;\r\n    }\r\n\r\n    public function dispose() {\r\n        //std::cout << \"ThreadWorkerImpl::~ThreadWorkerImpl()\" << std::endl;\r\n    }\r\n\r\n    public function new(that, name) {\r\n    }\r\n}\r\n","package minko.audio;\r\n@:expose\r\nclass Sound {\r\n    public function new() {\r\n    }\r\n\r\n    public function dispose() {\r\n    }\r\n}\r\n","package minko.component;\r\nimport minko.utils.TimeUtil;\r\nimport Lambda;\r\nimport haxe.ds.StringMap;\r\nimport minko.scene.Node;\r\nimport minko.scene.NodeSet;\r\nimport minko.signal.Signal.SignalSlot;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.signal.Signal3;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.component.AnimationLabel\")\r\nclass AnimationLabel {\r\n    public var name:String;\r\n    public var time:Int ; // label time in milliseconds\r\n\r\n    public function new(n, t) {\r\n        this.name = n;\r\n        this.time = t;\r\n    }\r\n}\r\n@:expose(\"minko.component.AbstractAnimation\")\r\nclass AbstractAnimation extends AbstractComponent {\r\n\r\n    private var _maxTime:Int;\r\n    private var _currentTime:Int; // relative to animation\r\n    private var _targetAddedSlot:SignalSlot2<AbstractComponent, Node> ;\r\n    private var _targetRemovedSlot:SignalSlot2<AbstractComponent, Node>;\r\n    private var _addedSlot:SignalSlot3<Node, Node, Node >;\r\n    private var _removedSlot:SignalSlot3<Node, Node, Node >;\r\n    private var _loopMinTime:Int;\r\n    private var _loopMaxTime:Int;\r\n    private var _loopTimeRange:Int;\r\n    private var _previousTime:Int;\r\n    private var _previousGlobalTime:Int;\r\n    private var _isPlaying:Bool;\r\n    private var _isLooping:Bool;\r\n    private var _isReversed:Bool;\r\n    private var _mustUpdateOnce:Bool;\r\n    private var _clockStart:Float;\r\n    private var _timeFunction:Int -> Int;\r\n    private var _labels:Array<AnimationLabel>;\r\n    private var _nextLabelIds:Array<Int>;\r\n    private var _sceneManager:SceneManager;\r\n    private var _started:Signal<AbstractAnimation>;\r\n    private var _looped:Signal<AbstractAnimation>;\r\n    private var _stopped:Signal<AbstractAnimation>;\r\n    private var _labelHit:Signal3<AbstractAnimation, String, Int>;\r\n    private var _frameBeginSlot:SignalSlot3<SceneManager, Float, Float>;\r\n\r\n\r\n    public function play():Void {\r\n        _previousGlobalTime = _timeFunction(_sceneManager != null ? Math.floor(_sceneManager.time) : 0);\r\n        _isPlaying = true;\r\n        _started.execute(this);\r\n        checkLabelHit(_currentTime, _currentTime);\r\n\r\n    }\r\n\r\n    public function stop():Void  {\r\n        if (_isPlaying) {\r\n            updateNextLabelIds(_currentTime);\r\n            checkLabelHit(_currentTime, _currentTime);\r\n        }\r\n\r\n        _isPlaying = false;\r\n        _stopped.execute((this));\r\n        _mustUpdateOnce = true;\r\n        _previousGlobalTime = _timeFunction(_sceneManager != null ? Std.int(_sceneManager.time) : 0);\r\n\r\n\r\n    }\r\n\r\n    override public function clone(option:CloneOption) {\r\n        return null;\r\n    }\r\n    public function seekLabel(labelName)  :Void{\r\n        return seek(labelTimebyName(labelName));\r\n    }\r\n    public function seek(currentTime:Int):Void  {\r\n        if (!isInPlaybackWindow(currentTime)) {\r\n            throw (\"Provided time value is outside of playback window. In order to reset playback window, call resetPlaybackWindow().\");\r\n        }\r\n\r\n        _currentTime = currentTime;\r\n\r\n        updateNextLabelIds(_currentTime);\r\n\r\n    }\r\n\r\n\r\n\r\n    public var currentTime(get, null):Int;\r\n\r\n    function get_currentTime() {\r\n        return _currentTime;\r\n    }\r\n\r\n    public var loopStartTime(get, null):Int;\r\n\r\n    function get_loopStartTime() {\r\n        return !_isReversed ? _loopMinTime : _loopMaxTime;\r\n    }\r\n    public var loopEndTime(get, null):Int;\r\n\r\n    function get_loopEndTime() {\r\n        return !_isReversed ? _loopMaxTime : _loopMinTime;\r\n    }\r\n\r\n    public function hasLabel(name:String):Bool {\r\n        return  Lambda.exists(_labels ,function(l:AnimationLabel) return l.name ==name) ;\r\n    }\r\n    public function getLabel(name:String):AnimationLabel {\r\n        return  Lambda.find(_labels ,function(l:AnimationLabel) return l.name ==name) ;\r\n    }\r\n    public function addLabel(name:String, time:Int) :Void {\r\n        if (hasLabel(name)) {\r\n            throw (\"A label called '\" + name + \"' already exists.\");\r\n        }\r\n\r\n\r\n        _labels.push(new AnimationLabel(name, time));\r\n\r\n        updateNextLabelIds(_currentTime);\r\n\r\n    }\r\n\r\n    public function changeLabel(name:String, newName:String) :Void {\r\n        var foundLabelIt = hasLabel(name);\r\n        if (foundLabelIt == false) {\r\n            throw (\"No label called '\" + name + \"' currently exists.\");\r\n        }\r\n\r\n\r\n        var label = getLabel(name);\r\n        label.name = newName;\r\n\r\n    }\r\n\r\n    public function setTimeForLabel(name:String, newTime:Int):Void {\r\n        var foundLabelIt = hasLabel(name);\r\n        if (foundLabelIt == false) {\r\n            throw (\"No label called '\" + name + \"' currently exists.\");\r\n        }\r\n        var label = getLabel(name);\r\n\r\n        label.time = newTime;\r\n\r\n    }\r\n\r\n    public function removeLabel(name:String):Void {\r\n        var foundLabelIt = hasLabel(name);\r\n        if (foundLabelIt == false) {\r\n            throw (\"No label called '\" + name + \"' currently exists.\");\r\n        }\r\n        _labels=_labels.filter(function(l:AnimationLabel) return l.name!=name);\r\n    }\r\n\r\n    public function setPlaybackWindow(beginTime:Int, endTime:Int, ? forceRestart:Bool = false):Void {\r\n        _loopMinTime = beginTime;\r\n        _loopMaxTime = endTime;\r\n\r\n        if (_loopMinTime > _loopMaxTime) {\r\n            _loopMinTime = endTime;\r\n            _loopMaxTime = beginTime;\r\n        }\r\n\r\n        _loopTimeRange = _loopMaxTime - _loopMinTime + 1;\r\n\r\n        if (!isInPlaybackWindow(_currentTime) || forceRestart) {\r\n            _currentTime = loopStartTime;\r\n        }\r\n\r\n        updateNextLabelIds(_currentTime);\r\n\r\n    }\r\n\r\n    public function setPlaybackWindowbyName(beginLabelName:String, endLabelName:String, ?forceRestart = false) :Void{\r\n          setPlaybackWindow(labelTimeLabel(beginLabelName), labelTimeLabel(endLabelName), forceRestart);\r\n    }\r\n\r\n    public function resetPlaybackWindow() :Void{\r\n          setPlaybackWindow(0, _maxTime);\r\n    }\r\n\r\n    public var numLabels(get, null):Int;\r\n\r\n    function get_numLabels() {\r\n        return _labels.length;\r\n    }\r\n\r\n\r\n    inline   function labelTimeLabel(labelId:String):Int {\r\n        return getLabel(labelId).time;\r\n    }\r\n    public function labelName(  labelId:Int)  :String\r\n    {\r\n        return _labels[labelId].name;\r\n    }\r\n\r\n    public  function labelTime(  labelId:Int) :Int\r\n    {\r\n        return _labels[labelId].time;\r\n    }\r\n\r\n    public function labelTimebyName(name:String):Int {\r\n        var foundLabelIt = hasLabel(name);\r\n        if (foundLabelIt == false) {\r\n            throw (\"No label called '\" + name + \"' currently exists.\");\r\n        }\r\n\r\n        return labelTimeLabel( name);\r\n    }\r\n\r\n    public var isPlaying(get, set):Bool;\r\n\r\n    function get_isPlaying() {\r\n        return _isPlaying;\r\n    }\r\n\r\n    function set_isPlaying(value) {\r\n        _isPlaying = value;\r\n        return value;\r\n    }\r\n\r\n    public var isLooping(get, set):Bool;\r\n\r\n    function get_isLooping() {\r\n        return _isLooping;\r\n    }\r\n\r\n    function set_isLooping(value) {\r\n        _isLooping = value;\r\n        return value;\r\n    }\r\n\r\n    public var isReversed(get, set):Bool;\r\n\r\n    function get_isReversed() {\r\n        return _isReversed;\r\n    }\r\n\r\n    function set_isReversed(value) {\r\n        _isReversed = value;\r\n        return value;\r\n    }\r\n\r\n    public var maxTime(get, null):Int;\r\n\r\n    function get_maxTime() {\r\n        return _maxTime;\r\n    }\r\n    public var timeFunction(null, set):Int -> Int;\r\n\r\n    function set_timeFunction(func) {\r\n        _timeFunction = func;\r\n        return func;\r\n    }\r\n\r\n    public var started(get, null):Signal<AbstractAnimation>;\r\n\r\n    function get_started() {\r\n        return _started;\r\n    }\r\n\r\n    public var looped(get, null):Signal<AbstractAnimation>;\r\n\r\n    function get_looped() {\r\n        return _looped;\r\n    }\r\n\r\n    public var stopped(get, null):Signal<AbstractAnimation>;\r\n\r\n    function get_stopped() {\r\n        return _stopped;\r\n    }\r\n\r\n    public var labelHit(get, null):Signal3<AbstractAnimation, String, Int>;\r\n\r\n    function get_labelHit() {\r\n        return _labelHit;\r\n    }\r\n\r\n    public function new(isLooping) {\r\n        super();\r\n        this._maxTime = 0;\r\n        this._loopMinTime = 0;\r\n        this._loopMaxTime = 0;\r\n        this._loopTimeRange = 0;\r\n        this._currentTime = 0;\r\n        this._previousTime = 0;\r\n        this._previousGlobalTime = 0;\r\n        this._isPlaying = false;\r\n        this._isLooping = isLooping;\r\n        this._isReversed = false;\r\n        this._mustUpdateOnce = false;\r\n        this._clockStart = TimeUtil.getTimerMilliseconds();\r\n        this._timeFunction = null;\r\n        this._labels = new Array<AnimationLabel>();\r\n\r\n        this._nextLabelIds = new Array<Int>();\r\n        this._sceneManager = null;\r\n        this._started = new Signal<AbstractAnimation>();\r\n        this._looped = new Signal<AbstractAnimation>();\r\n        this._stopped = new Signal<AbstractAnimation>();\r\n        this._labelHit = new Signal3<AbstractAnimation, String, Int>();\r\n        this._targetAddedSlot = null;\r\n        this._targetRemovedSlot = null;\r\n        this._addedSlot = null;\r\n        this._removedSlot = null;\r\n        this._frameBeginSlot = null;\r\n        _timeFunction = function(t) return t;\r\n    }\r\n\r\n    public function copyFrom(absAnimation:AbstractAnimation, option:CloneOption):AbstractAnimation {\r\n\r\n        this._maxTime = absAnimation._maxTime;\r\n        this._loopMinTime = absAnimation._loopMinTime;\r\n        this._loopMaxTime = absAnimation._loopMaxTime;\r\n        this._loopTimeRange = absAnimation._loopTimeRange;\r\n        this._currentTime = 0;\r\n        this._previousTime = 0;\r\n        this._previousGlobalTime = 0;\r\n        this._isPlaying = false;\r\n        this._isLooping = absAnimation._isLooping;\r\n        this._isReversed = absAnimation._isReversed;\r\n        this._mustUpdateOnce = absAnimation._mustUpdateOnce;\r\n        this._clockStart = TimeUtil.getTimerMilliseconds();\r\n        this._timeFunction = null;\r\n        this._labels = new Array<AnimationLabel>();\r\n        this._nextLabelIds = new Array<Int>();\r\n        this._sceneManager = null;\r\n        this._started = new Signal<AbstractAnimation>();\r\n        this._looped = new Signal<AbstractAnimation>();\r\n        this._stopped = new Signal<AbstractAnimation>();\r\n        this._labelHit = new Signal3<AbstractAnimation, String, Int>();\r\n        this._targetAddedSlot = null;\r\n        this._targetRemovedSlot = null;\r\n        this._addedSlot = null;\r\n        this._removedSlot = null;\r\n        this._frameBeginSlot = null;\r\n        if (option == CloneOption.DEEP) {\r\n            _currentTime = absAnimation._currentTime;\r\n            _previousTime = absAnimation._previousTime;\r\n            _previousGlobalTime = absAnimation._previousGlobalTime;\r\n            _isPlaying = absAnimation._isPlaying;\r\n        }\r\n        _timeFunction = function(t) return t;\r\n        return this;\r\n    }\r\n\r\n    override public function dispose():Void {\r\n\r\n        _targetAddedSlot = null;\r\n        _targetRemovedSlot = null;\r\n        _addedSlot = null;\r\n        _removedSlot = null;\r\n        _frameBeginSlot = null;\r\n    }\r\n\r\n    public function initialize() :Void{\r\n    }\r\n\r\n    override public function targetAdded(node:Node):Void {\r\n        _addedSlot = node.added.connect(addedHandler);\r\n\r\n        _removedSlot = node.removed.connect(removedHandler);\r\n\r\n        _target = node;\r\n    }\r\n\r\n    override public function targetRemoved(node:Node) :Void{\r\n        _addedSlot = null;\r\n        _removedSlot = null;\r\n    }\r\n\r\n    public function addedHandler(node:Node, target:Node, parent:Node):Void {\r\n        findSceneManager();\r\n    }\r\n\r\n    public function removedHandler(node:Node, target:Node, parent:Node):Void {\r\n        findSceneManager();\r\n    }\r\n\r\n    public function componentAddedHandler(node:Node, target:Node, component:AbstractComponent):Void {\r\n\r\n    }\r\n\r\n    public function componentRemovedHandler(node:Node, target:Node, component:AbstractComponent) :Void{\r\n\r\n    }\r\n\r\n    public function findSceneManager() {\r\n        var roots:NodeSet = NodeSet.createbyNode(target).roots().where(function(node:Node) {\r\n            return node.hasComponent(SceneManager);\r\n        });\r\n\r\n        if (roots.nodes.length > 1) {\r\n            throw (\"Renderer cannot be in two separate scenes.\");\r\n        }\r\n        else if (roots.nodes.length == 1) {\r\n            setSceneManager(cast roots.nodes[0].getComponent(SceneManager));\r\n        }\r\n        else {\r\n            setSceneManager(null);\r\n        }\r\n    }\r\n\r\n    public function setSceneManager(sceneManager:SceneManager) :Void{\r\n        if (sceneManager != null && sceneManager != _sceneManager) {\r\n            _frameBeginSlot = sceneManager.frameBegin.connect(frameBeginHandler);\r\n\r\n            if (_sceneManager == null) {\r\n                _previousGlobalTime = _timeFunction(Math.floor(sceneManager.time));\r\n            }\r\n        }\r\n        else if (_frameBeginSlot != null && sceneManager == null) {\r\n            stop();\r\n            _frameBeginSlot.dispose();\r\n            _frameBeginSlot = null;\r\n        }\r\n\r\n        _sceneManager = sceneManager;\r\n    }\r\n\r\n    public function frameBeginHandler(sceneManager:SceneManager, time:Float, UnnamedParameter1:Float) {\r\n        updateRaw(Math.floor(time));\r\n    }\r\n    // record the indices of the labels that lie directly after the specified time value\r\n    // in the animation.\r\n    public function updateNextLabelIds(time) {\r\n        _nextLabelIds = new Array<Int>();\r\n\r\n        if (_labels.length == 0) {\r\n            return;\r\n        }\r\n\r\n        //  _nextLabelIds.Capacity = _labels.length;\r\n\r\n        var UINT_MAX = 10000;\r\n        var nextLabelTime = !_isReversed ? UINT_MAX : 0;\r\n\r\n        for (labelId in 0... _labels.length) {\r\n            var labelTime = _labels[labelId].time;\r\n\r\n            if (!isInPlaybackWindow(labelTime)) {\r\n                continue;\r\n            }\r\n\r\n            if (!_isReversed && time < labelTime) {\r\n                if (labelTime < nextLabelTime) {\r\n                    nextLabelTime = labelTime;\r\n\r\n                    _nextLabelIds = new Array<Int>();\r\n                    _nextLabelIds.push(labelId);\r\n                }\r\n                else if (labelTime == nextLabelTime) {\r\n                    _nextLabelIds.push(labelId);\r\n                }\r\n            }\r\n            else if (_isReversed && labelTime < time) {\r\n                if (nextLabelTime < labelTime) {\r\n                    nextLabelTime = labelTime;\r\n\r\n                    _nextLabelIds = new Array<Int>();\r\n                    _nextLabelIds.push(labelId);\r\n                }\r\n                else if (labelTime == nextLabelTime) {\r\n                    _nextLabelIds.push(labelId);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_nextLabelIds.length == 0) {\r\n            if (time != loopStartTime) {\r\n                updateNextLabelIds(loopStartTime);\r\n            }\r\n        }\r\n        else if (_isLooping && nextLabelTime == loopEndTime) {\r\n            for (labelId in 0..._labels.length) {\r\n                if (_labels[labelId].time == loopStartTime && _nextLabelIds.indexOf(labelId) == -1) {\r\n                    _nextLabelIds.push(labelId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public function checkLabelHit(previousTime:Int, newTime:Int) :Void{\r\n        if (!_isPlaying || _nextLabelIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        var nextLabel = _labels[_nextLabelIds[0]];\r\n        var nextLabelTime = nextLabel.time;\r\n\r\n//Debug.Assert(isInPlaybackWindow(nextLabelTime));\r\n\r\n        var trigger = false;\r\n\r\n        if (!_isReversed) {\r\n            if (previousTime <= newTime) {\r\n                if ((newTime == nextLabelTime) || (previousTime < nextLabelTime && nextLabelTime <= newTime)) {\r\n                    trigger = true;\r\n                }\r\n            }\r\n            else {// newTime < previousTime\r\n                if (previousTime < nextLabelTime) {\r\n                    trigger = true;\r\n                }\r\n                else if (nextLabelTime < newTime) {\r\n                    trigger = true;\r\n                }\r\n            }\r\n        }\r\n        else { // reversed animation\r\n            if (newTime <= previousTime) {\r\n                if ((newTime == nextLabelTime) || (newTime <= nextLabelTime != null && nextLabelTime < previousTime)) {\r\n                    trigger = true;\r\n                }\r\n            }\r\n            else {// previousTime < newTime\r\n                if (nextLabelTime < previousTime) {\r\n                    trigger = true;\r\n                }\r\n                else if (newTime < nextLabelTime) {\r\n                    trigger = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (trigger) {\r\n            var nextLabelIds = _nextLabelIds;\r\n\r\n            for (labelId in nextLabelIds) {\r\n                var label = _labels[labelId];\r\n\r\n                _labelHit.execute((this), label.name, label.time);\r\n            }\r\n\r\n            updateNextLabelIds(getNewLoopTime(_currentTime, !_isReversed ? 1 : -1));\r\n        }\r\n    }\r\n\r\n    public function isInPlaybackWindow(time:Int):Bool {\r\n//Debug.Assert(_loopMinTime <= _loopMaxTime);\r\n\r\n        return _loopMinTime <= time && time <= _loopMaxTime;\r\n    }\r\n\r\n    public function update():Void {\r\n\r\n    }\r\n    /*virtual*/\r\n    public function updateRaw(rawGlobalTime:Int = 0):Bool {\r\n        if (!_isPlaying && !_mustUpdateOnce) {\r\n            return false;\r\n        }\r\n\r\n        _mustUpdateOnce = false;\r\n\r\n        var globalTime = _timeFunction(rawGlobalTime);\r\n        var globalDeltaTime = globalTime - _previousGlobalTime;\r\n        var deltaTime = Std.int(!_isReversed ? globalDeltaTime : -globalDeltaTime);\r\n\r\n        _previousTime = _currentTime;\r\n        if (_isPlaying) {\r\n            _currentTime = getNewLoopTime(_currentTime, deltaTime);\r\n        }\r\n        _previousGlobalTime = globalTime;\r\n\r\n        var looped = (!_isReversed && _currentTime < _previousTime) || (_isReversed && _previousTime < _currentTime);\r\n\r\n        if (looped) {\r\n            if (_isLooping) {\r\n                _looped.execute((this));\r\n            }\r\n            else {\r\n                _currentTime = loopEndTime;\r\n                stop();\r\n            }\r\n        }\r\n\r\n        update();\r\n\r\n        checkLabelHit(_previousTime, _currentTime);\r\n\r\n        return _isPlaying || _mustUpdateOnce;\r\n    }\r\n\r\n\r\n\r\n\r\n    public function getNewLoopTime(time:Int, deltaTime:Int):Int {\r\n        var relTime = (time - _loopMinTime) + deltaTime;\r\n        var timeOffset = (Std.int(relTime + _loopTimeRange) % _loopTimeRange);\r\n\r\n        return _loopMinTime + timeOffset;\r\n    }\r\n}\r\n","package minko.component;\r\nimport minko.data.Collection;\r\nimport minko.data.Provider;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal3.SignalSlot3;\r\n@:expose(\"minko.component.AbstractRootDataComponent\")\r\nclass AbstractRootDataComponent extends AbstractComponent {\r\n\r\n\r\n    private var _provider:Provider;\r\n    private var _collectionName:String;\r\n    private var _enabled:Bool;\r\n    private var _root:Node;\r\n\r\n    private var _addedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _removedSlot:SignalSlot3<Node, Node, Node>;\r\n\r\n    override public function dispose() {\r\n        _provider = null;\r\n        _root = null;\r\n        _addedSlot = null;\r\n        _removedSlot = null;\r\n        super.dispose();\r\n    }\r\n\r\n    public var provider(get, null):Provider;\r\n\r\n    function get_provider() {\r\n        return _provider;\r\n    }\r\n    public var root(get, null):Node;\r\n\r\n    function get_root() {\r\n        return _root;\r\n    }\r\n\r\n    public function new(collectionName) {\r\n        super();\r\n        this._provider = new Provider();\r\n        this._collectionName = collectionName;\r\n        this._enabled = true;\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n\r\n        _addedSlot = target.added.connect(this.addedOrRemovedHandler);\r\n        _removedSlot = target.removed.connect(this.addedOrRemovedHandler);\r\n\r\n        updateRoot(target.root);\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        _addedSlot.dispose();\r\n        _addedSlot = null;\r\n        _removedSlot.dispose();\r\n        _removedSlot = null;\r\n\r\n        updateRoot(null);\r\n    }\r\n\r\n    public function addedOrRemovedHandler(node:Node, target:Node, ancestor:Node) {\r\n        updateRoot(node.root);\r\n    }\r\n\r\n    public function updateRoot(root) {\r\n        if (root == _root) {\r\n            return;\r\n        }\r\n\r\n        if (_root != null) {\r\n            var collections:Array<Collection> = _root.data.collections;\r\n            var collectionIt = Lambda.find(collections, function(c:Collection) {\r\n                return c.name == _collectionName;\r\n            });\r\n            var collection:Collection = collectionIt;\r\n\r\n            collection.remove(_provider);\r\n        }\r\n\r\n        _root = root;\r\n\r\n        if (_root != null) {\r\n            var collections:Array<Collection> = _root.data.collections;\r\n            var collectionIt:Collection = Lambda.find(collections, function(c:Collection) {\r\n                return c.name == _collectionName;\r\n            });\r\n\r\n            if (collectionIt == null) {\r\n                var collection:Collection = Collection.create(_collectionName);\r\n\r\n                collection.pushBack(_provider);\r\n                _root.data.addCollection(collection);\r\n            }\r\n            else {\r\n                collectionIt.pushBack(_provider);\r\n            }\r\n        }\r\n    }\r\n}\r\n","package minko.component;\r\nimport glm.Vec3;\r\nimport minko.data.Provider;\r\n@:expose(\"minko.component.AbstractLight\")\r\nclass AbstractLight extends AbstractRootDataComponent {\r\n\r\n\r\n    private var _color:Vec3;\r\n\r\n    public var data(get, null):Provider;\r\n\r\n    function get_data() {\r\n        return provider;\r\n    }\r\n\r\n    public override function dispose() {\r\n        super.dispose();\r\n    }\r\n\r\n    public var color(get, set):Vec3;\r\n\r\n    function get_color() {\r\n        return _color;\r\n    }\r\n\r\n    function set_color(value) {\r\n        if (value != _color) {\r\n            _color = value;\r\n            data.set(\"color\", _color);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    override function get_layoutMask() {\r\n        return super.layoutMask;\r\n    }\r\n\r\n    override function set_layoutMask(value) {\r\n        data.set(\"layoutMask\", value);\r\n        super.layoutMask = (value);\r\n        return value;\r\n    }\r\n\r\n    public function new(collectionName) {\r\n        super(collectionName);\r\n        this._color = new Vec3(1.0, 1.0, 1.0);\r\n        data.set(\"color\", _color);\r\n    }\r\n}\r\n","package minko.component;\r\nimport glm.Mat4;\r\nimport minko.data.Provider;\r\nimport minko.data.Store;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal3.SignalSlot3;\r\n@:expose(\"minko.component.AbstractDiscreteLight\")\r\nclass AbstractDiscreteLight extends AbstractLight {\r\n\r\n    private var _modelToWorldChangedSlot:SignalSlot3<Store, Provider, String>;\r\n    public var diffuse(get, set):Float;\r\n\r\n    function get_diffuse() {\r\n        return data.get(\"diffuse\");\r\n    }\r\n\r\n    function set_diffuse(diffuse) {\r\n        data.set(\"diffuse\", diffuse);\r\n\r\n        return diffuse;\r\n    }\r\n\r\n    public var specular(get, set):Float;\r\n\r\n    function get_specular() {\r\n        return data.get(\"specular\");\r\n    }\r\n\r\n    function set_specular(specular) {\r\n        data.set(\"specular\", specular);\r\n        return specular;\r\n    }\r\n\r\n    public function new(arrayName, diffuse = 1.0, specular = 1.0) {\r\n        super(arrayName);\r\n        data.set(\"diffuse\", diffuse).set(\"specular\", specular);\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        super.targetAdded(target);\r\n        _modelToWorldChangedSlot = target.data.getPropertyChanged(\"modelToWorldMatrix\").connect(function(_1, _2, _3) {\r\n            modelToWorldMatrixChangedHandler(_1, _3);\r\n        });\r\n\r\n        if (target.data.hasProperty(\"modelToWorldMatrix\")) {\r\n            updateModelToWorldMatrix(target.data.get(\"modelToWorldMatrix\"));\r\n        }\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        super.targetRemoved(target);\r\n        _modelToWorldChangedSlot = null;\r\n    }\r\n\r\n    public function modelToWorldMatrixChangedHandler(container:Store, propertyName:String) {\r\n        updateModelToWorldMatrix(container.get(propertyName));\r\n    }\r\n\r\n    public function updateModelToWorldMatrix(modelToWorld:Mat4) {\r\n\r\n    }\r\n}\r\n","package minko.component;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nimport minko.signal.Signal3.SignalSlot3;\r\n@:expose(\"minko.component.AbstractScript\")\r\nclass AbstractScript extends AbstractComponent {\r\n    private var _enabled:Bool;\r\n    private var _started:Bool;\r\n    private var _time:Float;\r\n    private var _deltaTime:Float;\r\n\r\n    private var _targetAddedSlot:SignalSlot2<AbstractComponent, Node> ;\r\n    private var _targetRemovedSlot:SignalSlot2<AbstractComponent, Node> ;\r\n    private var _addedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _removedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _componentAddedSlot:SignalSlot3<Node, Node, AbstractComponent>;\r\n    private var _componentRemovedSlot:SignalSlot3<Node, Node, AbstractComponent>;\r\n    private var _frameBeginSlot:SignalSlot3<SceneManager, Float, Float>;\r\n    private var _frameEndSlot:SignalSlot3<SceneManager, Float, Float>;\r\n    public var enabled(get, set):Bool;\r\n\r\n    function get_enabled() {\r\n        return _enabled;\r\n    }\r\n\r\n    function set_enabled(v) {\r\n        if (v != _enabled) {\r\n            _enabled = v;\r\n            _started = !v;\r\n\r\n            if (target != null) {\r\n                setSceneManager(cast target.root.getComponent(SceneManager));\r\n            }\r\n        }\r\n        return v;\r\n    }\r\n\r\n    public function new() {\r\n        super();\r\n        this._enabled = true;\r\n        this._started = false;\r\n        this._time = 0.0;\r\n        this._deltaTime = 0.0;\r\n        this._targetAddedSlot = null;\r\n        this._targetRemovedSlot = null;\r\n        this._addedSlot = null;\r\n        this._removedSlot = null;\r\n        this._componentAddedSlot = null;\r\n        this._componentRemovedSlot = null;\r\n        this._frameBeginSlot = null;\r\n        this._frameEndSlot = null;\r\n    }\r\n    public var time(get, null):Float;\r\n\r\n    function get_time() {\r\n        return _time;\r\n    }\r\n    public var deltaTime(get, null):Float;\r\n\r\n    function get_deltaTime() {\r\n        return _deltaTime;\r\n    }\r\n\r\n    public function start(target:Node) {\r\n        // nothing\r\n    }\r\n\r\n    public function update(target:Node) {\r\n        // nothing\r\n    }\r\n\r\n    public function end(target:Node) {\r\n        // nothing\r\n    }\r\n\r\n    public function stop(target:Node) {\r\n        // nothing\r\n    }\r\n    public var ready(get, null):Bool;\r\n\r\n    function get_ready() {\r\n        return true;\r\n    }\r\n    public var priority(get, null):Float;\r\n\r\n    function get_priority() {\r\n        return 0.0;\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        _componentAddedSlot = target.componentAdded.connect(componentAddedHandler);\r\n        _componentRemovedSlot = target.componentRemoved.connect(componentRemovedHandler);\r\n        _addedSlot = target.added.connect(addedOrRemovedHandler);\r\n        _removedSlot = target.removed.connect(addedOrRemovedHandler);\r\n        _started = false;\r\n        if (target.root.hasComponent(SceneManager)) {\r\n            setSceneManager(cast target.root.getComponent(SceneManager));\r\n        }\r\n    }\r\n\r\n    public function addedOrRemovedHandler(node:Node, target:Node, parent:Node) {\r\n        if (node.root != target.root) {\r\n            return;\r\n        }\r\n\r\n        setSceneManager(cast target.root.getComponent(SceneManager));\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        _componentAddedSlot = null;\r\n        _componentRemovedSlot = null;\r\n        _frameBeginSlot = null;\r\n        _frameEndSlot = null;\r\n        if (_started) {\r\n            _started = false;\r\n            stop(target);\r\n        }\r\n    }\r\n\r\n    public function componentAddedHandler(nod:Node, target:Node, component:AbstractComponent) {\r\n        var sceneManager:SceneManager = cast(component, SceneManager);\r\n        if (sceneManager != null) {\r\n            setSceneManager(sceneManager);\r\n        }\r\n    }\r\n\r\n    public function componentRemovedHandler(nod:Node, target:Node, component:AbstractComponent) {\r\n        var sceneManager:SceneManager = cast(component, SceneManager);\r\n\r\n        if (sceneManager != null) {\r\n            setSceneManager(null);\r\n        }\r\n    }\r\n\r\n    public function frameBeginHandler(sceneManager:SceneManager, time, deltaTime) {\r\n        var target = this.target;\r\n\r\n        _time = time;\r\n        _deltaTime = deltaTime;\r\n\r\n        if (!_started && ready && target != null) {\r\n            _started = true;\r\n            start(target);\r\n        }\r\n\r\n        if (_started) {\r\n            update(target);\r\n        }\r\n\r\n        if (!_started) {\r\n            stop(target);\r\n        }\r\n    }\r\n\r\n    public function frameEndHandler(sceneManager:SceneManager, time, deltaTime) {\r\n        if (_started) {\r\n            end(target);\r\n        }\r\n    }\r\n\r\n    function setSceneManager(sceneManager:SceneManager = null) {\r\n        if (sceneManager != null && _enabled) {\r\n            if (_frameBeginSlot == null) {\r\n                _frameBeginSlot = sceneManager.frameBegin.connect(frameBeginHandler, priority);\r\n                if (_frameEndSlot == null) {\r\n                    _frameEndSlot = sceneManager.frameEnd.connect(frameEndHandler, priority);\r\n                }\r\n                else if (_frameBeginSlot != null) {\r\n                    if (_started) {\r\n                        _started = false;\r\n                        stop(target);\r\n                    }\r\n\r\n                    _frameBeginSlot = null;\r\n                    _frameEndSlot = null;\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}\r\n","package minko.component;\r\n@:expose(\"minko.component.AmbientLight\")\r\nclass AmbientLight extends AbstractLight {\r\n\r\n    private var _ambient:Float;\r\n\r\n    public static function create(ambient = .2):AmbientLight {\r\n        return new AmbientLight(ambient);\r\n    }\r\n\r\n    override public function clone(option:CloneOption) {\r\n        var al = create().copyFrom(this, option);\r\n\r\n        return cast al;\r\n    }\r\n    public var ambient(get, set):Float;\r\n\r\n    function get_ambient() {\r\n        return _ambient;\r\n    }\r\n\r\n    function set_ambient(ambient) {\r\n        _ambient = ambient;\r\n        data.set(\"ambient\", ambient);\r\n\r\n        return ambient;\r\n    }\r\n\r\n    public function new(ambient = .2) {\r\n        super(\"ambientLight\");\r\n        this._ambient = ambient;\r\n        data.set(\"ambient\", ambient);\r\n    }\r\n\r\n    public function copyFrom(ambientLight:AmbientLight, option:CloneOption) {\r\n        this._ambient = ambientLight._ambient;\r\n        data.set(\"ambient\", ambientLight._ambient);\r\n        return this;\r\n    }\r\n}\r\n","package minko.component;\r\nimport haxe.ds.ObjectMap;\r\nimport minko.animation.AbstractTimeline;\r\nimport minko.scene.Node;\r\n@:expose(\"minko.component.Animation\")\r\nclass Animation extends AbstractAnimation {\r\n    private var _timelines:Array<AbstractTimeline> ;\r\n\r\n\r\n    public static function create(timelines:Array<AbstractTimeline>, isLooping = true) {\r\n        var ptr = new Animation(timelines, isLooping);\r\n\r\n        ptr.initialize();\r\n\r\n        return ptr;\r\n    }\r\n\r\n    public function new(timelines, isLooping) {\r\n        super(isLooping);\r\n        this._timelines = (timelines);\r\n    }\r\n\r\n    override public function clone(option:CloneOption) {\r\n        var anim = new Animation(this._timelines, this.isLooping);\r\n        anim.copyFromAnimation(this, option);\r\n        anim.initialize();\r\n\r\n        return anim;\r\n    }\r\n\r\n    override public function rebindDependencies(componentsMap:ObjectMap<AbstractComponent, AbstractComponent>, nodeMap:ObjectMap<Node, Node>, option:Int) {\r\n\r\n        // FIXME: Implement when animation clones are tested (without skinning).\r\n    }\r\n\r\n    public var numTimelines(get, null):Int;\r\n\r\n    function get_numTimelines() {\r\n        return _timelines.length;\r\n    }\r\n\r\n    public function getTimeline(timelineId) {\r\n        return _timelines[timelineId];\r\n    }\r\n\r\n    private var timelines(get, null):Array<AbstractTimeline> ;\r\n\r\n    function get_timelines() {\r\n        return _timelines;\r\n    }\r\n\r\n    override public function initialize() {\r\n        super.initialize();\r\n\r\n        _maxTime = 0;\r\n\r\n        for (timeline in _timelines) {\r\n            _maxTime = Math.floor(Math.max(_maxTime, timeline.duration));\r\n        }\r\n\r\n        setPlaybackWindow(0, _maxTime);\r\n        seek(0);\r\n    }\r\n\r\n\r\n    public function copyFromAnimation(anim:Animation, option:CloneOption) {\r\n        copyFrom(anim, option);\r\n        this._timelines = [];\r\n        for (i in 0...anim._timelines.length) {\r\n            var clone = anim._timelines[i].clone();\r\n            _timelines[i] = clone;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    override public function update() {\r\n        super.update();\r\n        for (timeline in _timelines) {\r\n            var currentTime = _currentTime % (timeline.duration + 1); // Warning: bounds!\r\n            timeline.update(currentTime, target.data);\r\n\r\n        }\r\n    }\r\n\r\n    override public function frameBeginHandler(manager:SceneManager, time, deltaTime) {\r\n        super.frameBeginHandler(manager, time, deltaTime);\r\n    }\r\n\r\n    override public function updateNextLabelIds(time) {\r\n        super.updateNextLabelIds(time);\r\n    }\r\n\r\n    override public function checkLabelHit(previousTime, newTime) {\r\n        super.checkLabelHit(previousTime, newTime);\r\n    }\r\n}\r\n","package minko.component;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.component.ShadowMappingTechnique.Technique;\r\nimport minko.file.Loader;\r\nimport minko.render.Priority;\r\nimport minko.render.Texture;\r\nimport minko.scene.Layout.BuiltinLayout;\r\nimport minko.scene.Node;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.component.DirectionalLight\")\r\nclass DirectionalLight extends AbstractDiscreteLight {\r\n    public static inline var MAX_NUM_SHADOW_CASCADES = 4;\r\n    public static inline var DEFAULT_NUM_SHADOW_CASCADES = 4;\r\n    public static inline var MIN_SHADOWMAP_SIZE = 32;\r\n    public static inline var MAX_SHADOWMAP_SIZE = 1024;\r\n    public static inline var DEFAULT_SHADOWMAP_SIZE = 512;\r\n\r\n    private var _worldDirection:Vec3;\r\n    private var _shadowMappingEnabled:Bool;\r\n    private var _shadowMapSize:Int;\r\n    private var _shadowMap:Texture;\r\n    private var _numShadowCascades:Int;\r\n    private var _shadowRenderers:Array<Renderer>;// Renderer[4];\r\n    private var _shadowProjections:Array<Mat4>;//mat4[4];\r\n    private var _view:Mat4;\r\n\r\n    public static function create(diffuse = 1.0, specular = 1.0):DirectionalLight {\r\n        return new DirectionalLight(diffuse, specular);\r\n    }\r\n\r\n    override public function clone(option:CloneOption) {\r\n        return create(diffuse, specular);\r\n    }\r\n\r\n    public var shadowMap(get, null):Texture;\r\n\r\n    function get_shadowMap() {\r\n        return _shadowMap;\r\n    }\r\n    public var shadowSpread(null, set):Float;\r\n\r\n    function set_shadowSpread(spread) {\r\n        data.set(\"shadowSpread\", spread);\r\n        return spread;\r\n    }\r\n    public var shadowProjections(get, null):Array<Mat4>;\r\n\r\n    function get_shadowProjections() {\r\n        return _shadowProjections;\r\n    }\r\n\r\n    public var shadowMappingEnabled(get, null):Bool;\r\n\r\n    function get_shadowMappingEnabled() {\r\n        return _shadowMappingEnabled;\r\n    }\r\n\r\n    public var numShadowCascades(get, null):Int;\r\n\r\n    function get_numShadowCascades() {\r\n        return _numShadowCascades;\r\n    }\r\n//Math.POSITIVE_INFINITY\r\n    public function computeShadowProjection(view:Mat4, projection:Mat4, zFar = 100000.0, fitToCascade = false) {\r\n        if (!_shadowMappingEnabled) {\r\n            return;\r\n        }\r\n\r\n        var invProjection:Mat4 = Mat4.invert(projection, new Mat4());\r\n        var v:Array<Vec4> = [invProjection * (new Vec4(-1.0, 1.0, -1.0, 1.0)),\r\n        invProjection * (new Vec4(1.0, 1.0, -1.0, 1.0)),\r\n        invProjection * (new Vec4(1.0, -1.0, -1.0, 1.0)),\r\n        invProjection * (new Vec4(-1.0, -1.0, -1.0, 1.0)),\r\n        invProjection * (new Vec4(-1.0, 1.0, 1.0, 1.0)),\r\n        invProjection * (new Vec4(1.0, 1.0, 1.0, 1.0)),\r\n        invProjection * (new Vec4(1.0, -1.0, 1.0, 1.0)),\r\n        invProjection * (new Vec4(-1.0, -1.0, 1.0, 1.0))];\r\n\r\n        zFar = Math.floor(Math.min(zFar, -(v[4].z / v[4].w)));\r\n\r\n        var zNear = -(v[0] / v[0].w).z;\r\n        var fov = Math.atan(1.0 / projection.r1c1) * 2.0 ;\r\n        var ratio = projection.r1c1 / projection.r0c0;\r\n\r\n        // http://developer.download.nvidia.com/SDK/10.5/opengl/src/cascaded_shadow_maps/doc/cascaded_shadow_maps.pdf\r\n        // page 7\r\n        var splitFar:Array<Float> = [zFar, zFar, zFar, zFar];\r\n        var splitNear:Array<Float> = [zNear, zNear, zNear, zNear];\r\n        var lambda = .5;\r\n        var j = 1.0;\r\n        for (i in 0..._numShadowCascades - 1) {\r\n            splitFar[i] = ( MathUtil.mix(zNear + (j / _numShadowCascades) * (zFar - zNear), zNear * Math.pow(zFar / zNear, j / _numShadowCascades), lambda));\r\n            splitNear[i + 1] = splitFar[i];\r\n            j += 1.0;\r\n        }\r\n\r\n        for (i in 0..._numShadowCascades) {\r\n            var cameraViewProjection:Mat4 = GLM.perspective(fov, ratio, zNear, splitFar[i], new Mat4()) * (view);\r\n            var box = computeBox(cameraViewProjection);\r\n\r\n            _shadowProjections[i] = GLM.orthographic(box.first.x, box.second.x, box.first.y, box.second.y, -box.second.z, -box.first.z, new Mat4());\r\n\r\n            if (fitToCascade) {\r\n                zNear = splitFar[i];\r\n            }\r\n        }\r\n\r\n        for (i in _numShadowCascades...MAX_NUM_SHADOW_CASCADES) {\r\n            splitFar[i] = Math.NEGATIVE_INFINITY;\r\n            splitNear[i] = Math.POSITIVE_INFINITY;\r\n        }\r\n\r\n        data.set(\"shadowSplitFar\", new Vec4(splitFar[0], splitFar[1], splitFar[2], splitFar[3]));\r\n        data.set(\"shadowSplitNear\", new Vec4(splitNear[0], splitNear[1], splitNear[2], splitNear[3]));\r\n\r\n        updateWorldToScreenMatrix();\r\n    }\r\n\r\n    public function enableShadowMapping(shadowMapSize = DEFAULT_SHADOWMAP_SIZE, numCascades = DEFAULT_NUM_SHADOW_CASCADES) {\r\n        if (!_shadowMappingEnabled || shadowMapSize != _shadowMapSize || numCascades != _numShadowCascades) {\r\n            if (_shadowMap == null || shadowMapSize != _shadowMapSize || numCascades != _numShadowCascades) {\r\n                _numShadowCascades = numCascades;\r\n                // FIXME: do not completely re-init shadow mapping when just the shadow map size changes\r\n                _shadowMapSize = shadowMapSize;\r\n                initializeShadowMapping();\r\n            }\r\n            else {\r\n                for (renderer in _shadowRenderers) {\r\n                    if (renderer != null) {\r\n                        renderer.enabled = (true);\r\n                    }\r\n                }\r\n\r\n                data.set(\"shadowMap\", _shadowMap);\r\n            }\r\n\r\n            _shadowMappingEnabled = true;\r\n        }\r\n    }\r\n\r\n    public function disableShadowMapping(disposeResources = false) {\r\n        if (_shadowMappingEnabled) {\r\n            for (renderer in _shadowRenderers) {\r\n                if (renderer != null) {\r\n                    renderer.enabled = (false);\r\n                }\r\n            }\r\n            data.unset(\"shadowMap\");\r\n\r\n            if (disposeResources) {\r\n                _shadowMap = null;\r\n\r\n                for (renderer in _shadowRenderers) {\r\n                    if (renderer != null && target.existsComponent(renderer)) {\r\n                        target.removeComponent(renderer);\r\n                        renderer = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            _shadowMappingEnabled = false;\r\n        }\r\n    }\r\n\r\n    override public function updateModelToWorldMatrix(modelToWorld:Mat4) {\r\n        var tmp:Vec4 = modelToWorld * (new Vec4(0.0, 0.0, -1.0, 0));\r\n        _worldDirection = MathUtil.vec4_vec3(tmp);\r\n        _worldDirection = Vec3.normalize(_worldDirection, new Vec3()) ;\r\n        data.set(\"direction\", _worldDirection);\r\n\r\n        updateWorldToScreenMatrix();\r\n    }\r\n\r\n    override public function updateRoot(root:Node) {\r\n        super.updateRoot(root);\r\n\r\n        if (root != null && _shadowMappingEnabled && _shadowMap == null) {\r\n            initializeShadowMapping();\r\n        }\r\n    }\r\n\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        super.targetRemoved(target);\r\n        for (renderer in _shadowRenderers)\r\n            if (renderer != null && target.existsComponent(renderer))\r\n                target.removeComponent(renderer);\r\n    }\r\n\r\n    public function new(diffuse, specular) {\r\n        super(\"directionalLight\", diffuse, specular);\r\n        this._shadowMappingEnabled = false;\r\n        this._numShadowCascades = 0;\r\n        this._shadowMap = null;\r\n        this._shadowMapSize = 0;\r\n        this._shadowRenderers = [for (i in 0...4) null];\r\n        this._shadowProjections = [for (i in 0...4) Mat4.identity(new Mat4())];//mat4[4];\r\n        updateModelToWorldMatrix(Mat4.identity(new Mat4()));\r\n    }\r\n\r\n    public function copyFrom(directionalLight:DirectionalLight, option:CloneOption) {\r\n        // : base(\"directionalLight\", directionalLight.diffuse(), directionalLight.specular())\r\n        updateModelToWorldMatrix(Mat4.identity(new Mat4()));\r\n    }\r\n\r\n    private function initializeShadowMapping() {\r\n        if (target == null || !target.root.hasComponent(SceneManager)) {\r\n            return false;\r\n        }\r\n        var sm:SceneManager = cast target.root.getComponent(SceneManager);\r\n        var assets = sm.assets;\r\n        var effectName = \"effect/ShadowMap.effect\";\r\n        var fx = assets.effect(effectName);\r\n\r\n        var smTechnique = target.root.hasComponent(ShadowMappingTechnique) ? target.root.data.get(\"shadowMappingTechnique\") : ShadowMappingTechnique.Technique.DEFAULT;\r\n\r\n        if (fx == null) {\r\n//            throw \"no effect/ShadowMap.effect\";\r\n//            /*\r\n            var texture:Texture = assets.texture(\"shadow-map-tmp\");\r\n\r\n            if (texture == null) {\r\n                // This texture is used only for ESM, but loading ShadowMap.effect will throw if the asset does not exist.\r\n                // Thus, we create a dummy texture that we simply don't upload on the GPU.\r\n                texture = Texture.create(assets.context, _shadowMapSize, _shadowMapSize, false, true);\r\n                if (smTechnique == Technique.ESM) {\r\n                    texture.upload();\r\n                }\r\n                assets.setTexture(\"shadow-map-tmp\", texture);\r\n            }\r\n\r\n            texture = assets.texture(\"shadow-map-tmp-2\");\r\n            if (texture == null) {\r\n                texture = Texture.create(assets.context, _shadowMapSize, _shadowMapSize, false, true);\r\n                if (smTechnique == Technique.ESM) {\r\n                    texture.upload();\r\n                }\r\n                assets.setTexture(\"shadow-map-tmp-2\", texture);\r\n            }\r\n\r\n            var loader:Loader = Loader.createbyLoader(assets.loader);\r\n            // FIXME: support async loading of the ShadowMapping.effect file\r\n            loader.options.loadAsynchronously = (false);\r\n            loader.queue(effectName);\r\n            loader.load();\r\n            fx = assets.effect(effectName);\r\n//            */\r\n        }\r\n\r\n        _shadowMap = Texture.create(assets.context, _shadowMapSize * 2, _shadowMapSize * 2, false, true);\r\n        _shadowMap.upload();\r\n        data.set(\"shadowMap\", _shadowMap)\r\n        .set(\"shadowMaxDistance\", 0.9)\r\n        .set(\"shadowSpread\", 1.0)\r\n        .set(\"shadowBias\", -0.001)\r\n        .set(\"shadowMapSize\", _shadowMapSize * 2.0);\r\n\r\n        var viewports:Array<Vec4> = [new Vec4(0, _shadowMapSize, _shadowMapSize, _shadowMapSize),\r\n        new Vec4(_shadowMapSize, _shadowMapSize, _shadowMapSize, _shadowMapSize),\r\n        new Vec4(0, 0, _shadowMapSize, _shadowMapSize),\r\n        new Vec4(_shadowMapSize, 0, _shadowMapSize, _shadowMapSize)];\r\n\r\n        for (i in 0... _numShadowCascades) {\r\n            var techniqueName = \"shadow-map-cascade\" + i;\r\n            if (smTechnique == ShadowMappingTechnique.Technique.ESM) {\r\n                techniqueName += \"-esm\";\r\n            }\r\n\r\n            var renderer:Renderer = Renderer.create(0xffffffff, _shadowMap, fx, techniqueName, Priority.FIRST - i);\r\n\r\n            renderer.clearBeforeRender = (i == 0);\r\n            renderer.viewport = (viewports[i]);\r\n            renderer.effectVariables.push(new Tuple<String, String>(\"lightUuid\", data.uuid));\r\n            // renderer->effectVariables()[\"shadowProjectionId\"] = std::to_string(i);\r\n            renderer.layoutMask = (BuiltinLayout.CAST_SHADOW);\r\n            target.addComponent(renderer);\r\n\r\n            _shadowRenderers[i] = renderer;\r\n        }\r\n\r\n        computeShadowProjection(Mat4.identity(new Mat4()), GLM.perspective(0.785, 1.0, 0.1, 1000.0, new Mat4()));\r\n\r\n        return true;\r\n    }\r\n\r\n    private function updateWorldToScreenMatrix() {\r\n        if (target != null && target.data.hasProperty(\"modelToWorldMatrix\")) {\r\n            _view = Mat4.invert(cast target.data.get(\"modelToWorldMatrix\"), new Mat4());\r\n        }\r\n        else {\r\n            _view = Mat4.identity(new Mat4());\r\n        }\r\n\r\n        var zFar:Array<Float> = [0.0, 0.0, 0.0, 0.0];\r\n        var zNear:Array<Float> = [0.0, 0.0, 0.0, 0.0];\r\n        var viewProjections:Array<Mat4> = new Array<Mat4>();\r\n\r\n        for (i in 0... _numShadowCascades) {\r\n            var projection:Mat4 = _shadowProjections[i];\r\n            var istr = Std.string(i);\r\n            var farMinusNear = 2.0 / projection.r2c2;\r\n            var farPlusNear = projection.r2c3 * farMinusNear;\r\n\r\n            zNear[i] = (farMinusNear + farPlusNear) / 2.0 ;\r\n            zFar[i] = farPlusNear - zNear[i];\r\n            var mat4 = projection * _view;\r\n            viewProjections.push(mat4);\r\n        }\r\n\r\n        data.set(\"viewProjection\", viewProjections).set(\"zNear\", zNear).set(\"zFar\", zFar);\r\n    }\r\n\r\n    private function computeBox(viewProjection:Mat4):Tuple<Vec3, Vec3> {\r\n        var t:Mat4 = _view * Mat4.invert(viewProjection, new Mat4());\r\n        var v:Array<Vec4> = [t * (new Vec4(-1.0, 1.0, -1.0, 1.0)),\r\n        t * (new Vec4(1.0, 1.0, -1.0, 1.0)),\r\n        t * (new Vec4(1.0, -1.0, -1.0, 1.0)),\r\n        t * (new Vec4( -1.0, -1.0, -1.0, 1.0)),\r\n        t * (new Vec4( -1.0, 1.0, 1.0, 1.0)),\r\n        t * (new Vec4(1.0, 1.0, 1.0, 1.0)),\r\n        t * (new Vec4(1.0, -1.0, 1.0, 1.0)),\r\n        t * (new Vec4( -1.0, -1.0, 1.0, 1.0))];\r\n\r\n        for (i in 0...v.length) {\r\n            var p = v[i];\r\n            v[i] = p / p.w ;\r\n        }\r\n\r\n        var bottomLeft:Vec3 = new Vec3(Math.POSITIVE_INFINITY, Math.POSITIVE_INFINITY, Math.POSITIVE_INFINITY);\r\n        var topRight:Vec3 = new Vec3( Math.NEGATIVE_INFINITY, Math.NEGATIVE_INFINITY, Math.NEGATIVE_INFINITY);\r\n\r\n        for (p in v) {\r\n            if (p.x < bottomLeft.x) {\r\n                bottomLeft.x = p.x;\r\n            }\r\n            if (p.x > topRight.x) {\r\n                topRight.x = p.x;\r\n            }\r\n            if (p.y < bottomLeft.y) {\r\n                bottomLeft.y = p.y;\r\n            }\r\n            if (p.y > topRight.y) {\r\n                topRight.y = p.y;\r\n            }\r\n            if (p.z < bottomLeft.z) {\r\n                bottomLeft.z = p.z;\r\n            }\r\n            if (p.z > topRight.z) {\r\n                topRight.z = p.z;\r\n            }\r\n        }\r\n\r\n        return new Tuple<Vec3, Vec3>(bottomLeft, topRight);\r\n    }\r\n\r\n    private function computeBoundingSphere(view:Mat4, projection:Mat4) {\r\n        var invProj = _view * (Mat4.invert(projection * view, new Mat4()));\r\n\r\n        var center:Vec4 = invProj * (new Vec4(0.0, 0.0, 0.0, 1.0));\r\n        center = center * (1 / center.w);\r\n\r\n        var max:Vec4 = invProj * (new Vec4(1.0, 1.0, 1.0, 1.0));\r\n        var min:Vec4 = invProj * (new Vec4( -1.0, -1.0, -1.0, 1.0));\r\n        max = max * (1 / max.w);\r\n        min = min * (1 / min.w);\r\n\r\n        var radius = Math.max(Vec4.distanceSquared(max, center), Vec4.distanceSquared(min, center));\r\n\r\n        // center = _view * center;\r\n\r\n        return {\r\n            first:new Vec3(center.x, center.y, center.z), second:radius\r\n        };\r\n    }\r\n\r\n    public function minSphere(pt:Array<Vec3>, np:Int, bnd:Array<Vec3>, nb:Int) {\r\n\r\n    }\r\n\r\n}\r\n","package minko.component;\r\nimport haxe.ds.ObjectMap;\r\nimport minko.scene.Node;\r\nimport minko.scene.NodeSet;\r\n@:expose(\"minko.component.MasterAnimation\")\r\nclass MasterAnimation extends AbstractAnimation {\r\n    private var _animations:Array<AbstractAnimation> ;\r\n\r\n    public static function create(isLooping = true) {\r\n        var ptr = new MasterAnimation(isLooping) ;\r\n\r\n        return ptr;\r\n    }\r\n\r\n\r\n\r\n    override public function play():Void {\r\n        super.play();\r\n\r\n        for (animation in _animations) {\r\n            animation.play();\r\n        }\r\n\r\n    }\r\n\r\n    override public function stop() :Void{\r\n        super.stop();\r\n\r\n        for (animation in _animations) {\r\n            animation.stop();\r\n        }\r\n\r\n    }\r\n\r\n    override public function seek(time:Int)  :Void{\r\n        super.seek(time);\r\n\r\n        for (animation in _animations) {\r\n            animation.seek(time);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    override public function clone(option:CloneOption) {\r\n        var anim:MasterAnimation = new MasterAnimation(this.isLooping);\r\n        anim.copyFrom(this, option);\r\n        return anim;\r\n    }\r\n\r\n    override public function addLabel(name, time):Void {\r\n        super.addLabel(name, time);\r\n\r\n        for (animation in _animations) {\r\n            animation.addLabel(name, time);\r\n        }\r\n\r\n    }\r\n\r\n    override public function changeLabel(name, newName):Void {\r\n        super.changeLabel(name, newName);\r\n\r\n        for (animation in _animations) {\r\n            animation.changeLabel(name, newName);\r\n        }\r\n\r\n    }\r\n\r\n    override public function setTimeForLabel(name, newTime):Void  {\r\n        super.setTimeForLabel(name, newTime);\r\n\r\n        for (animation in _animations) {\r\n            animation.setTimeForLabel(name, newTime);\r\n        }\r\n\r\n    }\r\n\r\n    override public function removeLabel(name):Void  {\r\n        super.removeLabel(name);\r\n\r\n        for (animation in _animations) {\r\n            animation.removeLabel(name);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    override public function setPlaybackWindow(beginLabelName, endLabelName, ?forceRestart = false):Void {\r\n        super.setPlaybackWindow(beginLabelName, endLabelName, forceRestart);\r\n\r\n        for (animation in _animations) {\r\n            animation.setPlaybackWindow(beginLabelName, endLabelName, forceRestart);\r\n        }\r\n    }\r\n\r\n    override public function resetPlaybackWindow():Void {\r\n        super.resetPlaybackWindow();\r\n\r\n        for (animation in _animations) {\r\n            animation.resetPlaybackWindow();\r\n        }\r\n\r\n    }\r\n\r\n    public function initAnimations() {\r\n        var target = this.target;\r\n        var targetParent = target.parent;\r\n\r\n        var rootNode = targetParent != null ? targetParent : target;\r\n\r\n        var descendants:NodeSet = NodeSet.createbyNode(rootNode).descendants(true);\r\n        var nodes:Array<Node> = descendants.nodes;\r\n        for (descendant in nodes) {\r\n            for (skinning in descendant.getComponents(Skinning)) {\r\n                _animations.push(cast skinning);\r\n            }\r\n\r\n            for (animation in descendant.getComponents(Animation)) {\r\n                _animations.push(cast animation);\r\n            }\r\n        }\r\n\r\n        _maxTime = 0;\r\n\r\n        for (animation in _animations) {\r\n            _maxTime = Math.floor(Math.max(_maxTime, animation.maxTime));\r\n        }\r\n\r\n        setPlaybackWindow(0, _maxTime);\r\n        seek(0);\r\n        play();\r\n    }\r\n\r\n    override public function rebindDependencies(componentsMap:ObjectMap<AbstractComponent, AbstractComponent>, nodeMap:ObjectMap<Node, Node>, option:Int) {\r\n        var newAnimations = new Array<AbstractAnimation>();\r\n        for (animation in _animations) {\r\n            var it:AbstractAnimation = cast componentsMap.get(animation);\r\n            if (it != null) {\r\n                newAnimations.push(animation);\r\n            }\r\n        }\r\n\r\n        _animations = (newAnimations);\r\n    }\r\n\r\n    override function set_timeFunction(func:Int -> Int) {\r\n        super.set_timeFunction(func);\r\n\r\n        for (animation in _animations) {\r\n            animation.timeFunction = (func);\r\n        }\r\n        return func;\r\n    }\r\n\r\n    override function set_isReversed(value) {\r\n        super.set_isReversed(value);\r\n\r\n        for (animation in _animations) {\r\n            animation.set_isReversed(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public function new(isLooping) {\r\n        super(isLooping);\r\n        this._animations = [];\r\n        /*\r\n\t\t\t\t_maxTime = 0;\r\n\r\n\t\t\t\tfor (auto& animation : _animations)\r\n\t\t\t\t{\r\n\t\t\t\t\tanimation->_master = std::dynamic_pointer_cast<MasterAnimation>(shared_from_this());\r\n\t\t\t\t\t_maxTime = std::max(_maxTime, animation->_maxTime);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetPlaybackWindow(0, _maxTime)->seek(0)->play();\r\n\t\t\t\t*/\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        _addedSlot = target.added.connect(addedHandler);\r\n\r\n        _removedSlot = target.removed.connect(removedHandler);\r\n\r\n        _target = target;\r\n\r\n        initAnimations();\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n    }\r\n\r\n\r\n    /*virtual*/\r\n    override public function update() {\r\n        for (animation in _animations) {\r\n            var anim:Animation = cast(animation);\r\n            if (anim != null) {\r\n                anim._currentTime = _currentTime;\r\n                anim.update();\r\n            }\r\n        }\r\n    }\r\n}\r\n","package minko.component;\r\nimport haxe.ds.StringMap;\r\n@:expose(\"minko.component.Metadata\")\r\nclass Metadata extends AbstractComponent {\r\n    public function new() {\r\n        super();\r\n        _data=new StringMap<String>();\r\n    }\r\n    private var _data:StringMap<String>;\r\n\r\n\r\n    public static function create(data) {\r\n        var m=  new Metadata();\r\n        m.data=data;\r\n        return m;\r\n    }\r\n    public var data(get, set):StringMap<String>;\r\n    function set_data(__data) {\r\n        _data = __data;\r\n        return _data;\r\n    }\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n\r\n    inline public function keys(){\r\n        return _data.keys();\r\n    }\r\n    public function get(propertyName) {\r\n        return _data.get(propertyName) ;\r\n    }\r\n\r\n\r\n    public function set(propertyName,value) {\r\n        return _data.set(propertyName,value) ;\r\n    }\r\n\r\n\r\n    public function has(propertyName) {\r\n        return _data.exists(propertyName) ;\r\n    }\r\n\r\n\r\n}\r\n","package minko.component;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.data.Provider;\r\nimport minko.data.Store;\r\nimport minko.math.Ray;\r\nimport minko.render.AbstractContext;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.component.PerspectiveCamera\")\r\nclass PerspectiveCamera extends AbstractComponent {\r\n    private var _data:Provider;\r\n    private var _fov:Float;\r\n    private var _aspectRatio:Float;\r\n    private var _zNear:Float;\r\n    private var _zFar:Float;\r\n\r\n    private var _view:Mat4;\r\n    private var _projection:Mat4;\r\n    private var _viewProjection:Mat4;\r\n    private var _position:Vec3;\r\n    private var _direction:Vec3;\r\n    private var _postProjection:Mat4;\r\n\r\n    private var _modelToWorldChangedSlot:SignalSlot3<Store, Provider, String>;\r\n\r\n    public static function create(aspectRatio, fov = .785, zNear = 0.1, zFar = 1000.0, postProjection:Mat4 = null) {\r\n        return new PerspectiveCamera(fov, aspectRatio, zNear, zFar, postProjection == null ? Mat4.identity(new Mat4()) : postProjection);\r\n    }\r\n\r\n    // TODO #Clone\r\n    /*\r\n\t\t\tAbstractComponent::Ptr\r\n\t\t\tclone(const CloneOption& option);\r\n\t\t\t*/\r\n    public var fieldOfView(get, set):Float;\r\n\r\n    function get_fieldOfView() {\r\n        return _fov;\r\n    }\r\n\r\n    function set_fieldOfView(fov) {\r\n        if (fov != _fov) {\r\n            _fov = fov;\r\n            updateProjection(_fov, _aspectRatio, _zNear, _zFar);\r\n        }\r\n        return fov;\r\n    }\r\n    public var aspectRatio(get, set):Float;\r\n\r\n    function get_aspectRatio() {\r\n        return _aspectRatio;\r\n    }\r\n\r\n    function set_aspectRatio(v) {\r\n        if (v != _aspectRatio) {\r\n            _aspectRatio = v;\r\n            updateProjection(_fov, _aspectRatio, _zNear, _zFar);\r\n        }\r\n        return v;\r\n    }\r\n    public var zNear(get, set):Float;\r\n\r\n    function get_zNear() {\r\n        return _zNear;\r\n    }\r\n\r\n    function set_zNear(v) {\r\n        if (v != _zNear) {\r\n            _zNear = v;\r\n            updateProjection(_fov, _aspectRatio, _zNear, _zFar);\r\n        }\r\n        return v;\r\n    }\r\n    public var zFar(get, set):Float;\r\n\r\n    function get_zFar() {\r\n        return _zFar;\r\n    }\r\n\r\n    function set_zFar(v) {\r\n        if (v != _zFar) {\r\n            _zFar = v;\r\n            updateProjection(_fov, _aspectRatio, _zNear, _zFar);\r\n        }\r\n        return v;\r\n    }\r\n    public var data(get, null):Provider;\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n    public var viewMatrix(get, null):Mat4;\r\n\r\n    function get_viewMatrix() {\r\n        return _view;\r\n    }\r\n    public var projectionMatrix(get, null):Mat4;\r\n\r\n    function get_projectionMatrix() {\r\n        return _projection;\r\n    }\r\n    public var viewProjectionMatrix(get, null):Mat4;\r\n\r\n    function get_viewProjectionMatrix() {\r\n        return _viewProjection;\r\n    }\r\n\r\n\r\n    public function updateProjection(fov, aspectRatio, zNear, zFar) {\r\n        _fov = fov;\r\n        _aspectRatio = aspectRatio;\r\n        _zNear = zNear;\r\n        _zFar = zFar;\r\n\r\n        //math\r\n        _projection = _postProjection * (GLM.perspective(fov, aspectRatio, zNear, zFar, new Mat4()));\r\n        _viewProjection = _projection * (_view);\r\n\r\n        _data.set(\"fov\", _fov)\r\n        .set(\"aspectRatio\", _aspectRatio)\r\n        .set(\"zNear\", _zNear)\r\n        .set(\"zFar\", _zFar)\r\n        .set(\"projectionMatrix\", _projection)\r\n        .set(\"worldToScreenMatrix\", _viewProjection);\r\n    }\r\n\r\n    public function unproject(x:Float, y:Float) {\r\n        var fovDiv2 = _fov * .5 ;\r\n        var dx = Math.tan(fovDiv2) * x * _aspectRatio;\r\n        var dy = -Math.tan(fovDiv2) * y;\r\n        var origin:Vec3 = new Vec3(dx * _zNear, dy * _zNear, -_zNear);\r\n        var direction:Vec3 = new Vec3(dx * _zNear, dy * _zNear, -_zNear) ;\r\n        direction = Vec3.normalize(direction, new Vec3());\r\n        var t:Transform = cast target.getComponent(Transform);\r\n        if (t != null) {\r\n            var tModelToWorld:Mat4 = t.modelToWorldMatrix;\r\n            //math\r\n            var tmp:Vec4 = tModelToWorld * (MathUtil.vec3_vec4(origin, 1));\r\n            origin = MathUtil.vec4_vec3(tmp);\r\n            direction =  (MathUtil.mat4_mat3(tModelToWorld)*direction);\r\n            direction = Vec3.normalize(direction, new Vec3());\r\n        }\r\n        return Ray.createbyVector3(origin, direction);\r\n    }\r\n\r\n    public function project(worldPosition:Vec3) {\r\n        var sm:SceneManager = cast target.root.getComponent(SceneManager);\r\n        var context:AbstractContext = sm.assets.context;\r\n\r\n        return projectWorldPosition(worldPosition, context.viewportWidth, context.viewportHeight, _view, _viewProjection);\r\n    }\r\n\r\n    public static function projectWorldPosition(worldPosition:Vec3, viewportWidth:Int, viewportHeight:Int, viewMatrix:Mat4, viewProjectionMatrix:Mat4) {\r\n        var width = viewportWidth;\r\n        var height = viewportHeight;\r\n        var pos:Vec4 = new Vec4(worldPosition.x, worldPosition.y, worldPosition.z, 1.0 );\r\n        //math\r\n        var vector:Vec4 = viewProjectionMatrix * (pos);\r\n\r\n        vector = vector / vector.w;\r\n        pos = (viewMatrix * pos);\r\n\r\n        return new Vec3(width * (vector.x + 1.0) * .5, height * (1.0 - ((vector.y + 1.0) * .5)), -pos.z);\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        target.data.addProvider(_data);\r\n        _modelToWorldChangedSlot = target.data.getPropertyChanged(\"modelToWorldMatrix\").connect(function(s, p, s1) {\r\n            localToWorldChangedHandler(s);\r\n        });\r\n\r\n        if (target.data.hasProperty(\"modelToWorldMatrix\"))\r\n            updateMatrices(target.data.get(\"modelToWorldMatrix\"));\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        target.data.removeProvider(_data);\r\n    }\r\n\r\n    public function new(fov:Float, aspectRatio:Float, zNear:Float, zFar:Float, postPerspective:Mat4) {\r\n        super();\r\n        this._data = Provider.create();\r\n        this._fov = fov;\r\n        this._aspectRatio = aspectRatio;\r\n        this._zNear = zNear;\r\n        this._zFar = zFar;\r\n        this._view = Mat4.identity(new Mat4());\r\n        this._projection = GLM.perspective(fov, aspectRatio, zNear, zFar, new Mat4());\r\n        this._viewProjection = _projection;\r\n        this._position = new Vec3();\r\n        this._direction = new Vec3(0.0, 0.0, 1.0);\r\n        this._postProjection = postPerspective;\r\n        _data.set(\"eyeDirection\", _direction)\r\n        .set(\"eyePosition\", _position)\r\n        .set(\"viewMatrix\", _view)\r\n        .set(\"projectionMatrix\", _projection)\r\n        .set(\"worldToScreenMatrix\", _viewProjection)\r\n        .set(\"fov\", _fov)\r\n        .set(\"aspectRatio\", _aspectRatio)\r\n        .set(\"zNear\", _zNear)\r\n        .set(\"zFar\", _zFar);\r\n    }\r\n\r\n\r\n    private function localToWorldChangedHandler(data:Store) {\r\n        updateMatrices(data.get(\"modelToWorldMatrix\"));\r\n    }\r\n\r\n    private function updateMatrices(modelToWorldMatrix:Mat4) {\r\n        //math\r\n        var tmp:Vec4 = modelToWorldMatrix * (new Vec4(0.0, 0.0, 0.0, 1.0));\r\n        _position = MathUtil.vec4_vec3(tmp);\r\n        _direction =  (MathUtil.mat4_mat3(modelToWorldMatrix)*new Vec3(0.0, 0.0, 1.0));\r\n        _direction = Vec3.normalize(_direction, new Vec3());\r\n        _view = Mat4.invert(modelToWorldMatrix, new Mat4());\r\n\r\n        _data.set(\"eyeDirection\", _direction)\r\n        .set(\"eyePosition\", _position)\r\n        .set(\"viewMatrix\", _view);\r\n\r\n        updateProjection(_fov, _aspectRatio, _zNear, _zFar);\r\n    }\r\n\r\n}\r\n","package minko.component;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport haxe.ds.IntMap;\r\nimport haxe.ds.ObjectMap;\r\nimport haxe.io.Bytes;\r\nimport minko.component.Picking;\r\nimport minko.data.Provider;\r\nimport minko.input.Mouse;\r\nimport minko.input.Touch;\r\nimport minko.math.Ray;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.Effect;\r\nimport minko.render.Texture;\r\nimport minko.scene.Layout.BuiltinLayout;\r\nimport minko.scene.Node;\r\nimport minko.scene.NodeSet;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.signal.Signal4.SignalSlot4;\r\nimport minko.signal.Signal;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.component.Picking\")\r\nclass Picking extends AbstractComponent {\r\n    private var _renderTarget:Texture;\r\n    private var _renderer:Renderer;\r\n    private var _sceneManager:SceneManager;\r\n    private var _mouse:Mouse;\r\n    private var _touch:Touch;\r\n    private var _camera:Node;\r\n    private var _pickingProjection:Mat4;\r\n    private var _surfaceToPickingId:ObjectMap<Surface, Int> ;\r\n    private var _pickingIdToSurface:IntMap<Surface> ;\r\n    private var _pickingId:Int;\r\n    private var _context:AbstractContext;\r\n    private var _pickingProvider:Provider;\r\n\r\n    private var _pickingEffect:Effect;\r\n    private var _pickingDepthEffect:Effect;\r\n    private var _depthRenderer:Renderer;\r\n    private var _descendants:Array<Node>;\r\n\r\n    private var _addedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _removedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _renderingBeginSlot:SignalSlot<Renderer>;\r\n    private var _renderingEndSlot:SignalSlot<Renderer>;\r\n    private var _depthRenderingBeginSlot:SignalSlot<Renderer>;\r\n    private var _depthRenderingEndSlot:SignalSlot<Renderer>;\r\n    private var _frameBeginSlot:SignalSlot3<SceneManager, Float, Float>;\r\n    private var _componentAddedSlot:SignalSlot3<Node, Node, AbstractComponent>;\r\n    private var _componentRemovedSlot:SignalSlot3<Node, Node, AbstractComponent>;\r\n\r\n    private var _mouseOver:Signal<Node>;\r\n    private var _mouseRightDown:Signal<Node>;\r\n    private var _mouseLeftDown:Signal<Node>;\r\n    private var _mouseRightUp:Signal<Node>;\r\n    private var _mouseLeftUp:Signal<Node>;\r\n    private var _mouseRightClick:Signal<Node>;\r\n    private var _mouseLeftClick:Signal<Node>;\r\n    private var _mouseOut:Signal<Node>;\r\n    private var _mouseMove:Signal<Node>;\r\n    private var _mouseWheel:Signal<Node>;\r\n\r\n    private var _touchDown:Signal<Node>;\r\n    private var _touchUp:Signal<Node>;\r\n    private var _touchMove:Signal<Node>;\r\n    private var _tap:Signal<Node>;\r\n    private var _doubleTap:Signal<Node>;\r\n    private var _longHold:Signal<Node>;\r\n\r\n    private var _lastColor:Bytes;//= new byte[4];\r\n    private var _lastPickedSurface:Surface;\r\n    private var _lastDepth:Bytes;// = new byte[4];\r\n    private var _lastDepthValue:Float;\r\n    private var _lastMergingMask:Int;\r\n\r\n    private var _mouseMoveSlot:SignalSlot3<Mouse, Int, Int>;\r\n    private var _mouseRightDownSlot:SignalSlot<Mouse> ;\r\n    private var _mouseLeftDownSlot:SignalSlot<Mouse> ;\r\n    private var _mouseRightUpSlot:SignalSlot<Mouse> ;\r\n    private var _mouseLeftUpSlot:SignalSlot<Mouse> ;\r\n    private var _mouseRightClickSlot:SignalSlot<Mouse> ;\r\n    private var _mouseLeftClickSlot:SignalSlot<Mouse> ;\r\n    private var _mouseWheelSlot:SignalSlot3<Mouse, Float, Float> ;\r\n    private var _touchDownSlot:SignalSlot4<Touch, Int, Float, Float>;\r\n    private var _touchUpSlot:SignalSlot4<Touch, Int, Float, Float>;\r\n    private var _touchMoveSlot:SignalSlot4<Touch, Int, Float, Float>;\r\n    private var _touchTapSlot:SignalSlot3<Touch, Float, Float>;\r\n    private var _touchDoubleTapSlot:SignalSlot3<Touch, Float, Float>;\r\n    private var _touchLongHoldSlot:SignalSlot3<Touch, Float, Float>;\r\n\r\n    private var _executeMoveHandler:Bool;\r\n    private var _executeRightClickHandler:Bool;\r\n    private var _executeLeftClickHandler:Bool;\r\n    private var _executeRightDownHandler:Bool;\r\n    private var _executeLeftDownHandler:Bool;\r\n    private var _executeRightUpHandler:Bool;\r\n    private var _executeLeftUpHandler:Bool;\r\n    private var _executeMouseWheel:Bool;\r\n    private var _executeTouchDownHandler:Bool;\r\n    private var _executeTouchUpHandler:Bool;\r\n    private var _executeTouchMoveHandler:Bool;\r\n    private var _executeTapHandler:Bool;\r\n    private var _executeDoubleTapHandler:Bool;\r\n    private var _executeLongHoldHandler:Bool;\r\n\r\n    private var _wheelX:Int;\r\n    private var _wheelY:Int;\r\n\r\n    private var _addPickingLayout:Bool;\r\n    private var _emulateMouseWithTouch:Bool;\r\n\r\n    private var _enabled:Bool;\r\n    private var _renderDepth:Bool;\r\n\r\n    private var _debug:Bool;\r\n\r\n    public static function create(camera, addPickingLayoutToNodes = true, emulateMouseWithTouch = true, pickingEffect = null, pickingDepthEffect = null) {\r\n        var picking = new Picking();\r\n\r\n        picking.initialize(camera, addPickingLayoutToNodes, emulateMouseWithTouch, pickingEffect, pickingDepthEffect);\r\n\r\n        return picking;\r\n    }\r\n    public var mouseOver(get, null):Signal<Node>;\r\n\r\n    function get_mouseOver() {\r\n        return _mouseOver;\r\n    }\r\n    public var mouseRightDown(get, null):Signal<Node>;\r\n\r\n    function get_mouseRightDown() {\r\n        return _mouseRightDown;\r\n    }\r\n    public var mouseRightUp(get, null):Signal<Node>;\r\n\r\n    function get_mouseRightUp() {\r\n        return _mouseRightUp;\r\n    }\r\n    public var mouseDown(get, null):Signal<Node>;\r\n\r\n    function get_mouseDown() {\r\n        return _mouseLeftDown;\r\n    }\r\n    public var mouseUp(get, null):Signal<Node>;\r\n\r\n    function get_mouseUp() {\r\n        return _mouseLeftUp;\r\n    }\r\n    public var mouseRightClick(get, null):Signal<Node>;\r\n\r\n    function get_mouseRightClick() {\r\n        return _mouseRightClick;\r\n    }\r\n    public var mouseClick(get, null):Signal<Node>;\r\n\r\n    function get_mouseClick() {\r\n        return _mouseLeftClick;\r\n    }\r\n    public var mouseOut(get, null):Signal<Node>;\r\n\r\n    function get_mouseOut() {\r\n        return _mouseOut;\r\n    }\r\n    public var mouseMove(get, null):Signal<Node>;\r\n\r\n    function get_mouseMove() {\r\n        return _mouseMove;\r\n    }\r\n    public var mouseWheel(get, null):Signal<Node>;\r\n\r\n    function get_mouseWheel() {\r\n        return _mouseWheel;\r\n    }\r\n    public var touchDown(get, null):Signal<Node>;\r\n\r\n    function get_touchDown() {\r\n        return _touchDown;\r\n    }\r\n    public var touchMove(get, null):Signal<Node>;\r\n\r\n    function get_touchMove() {\r\n        return _touchMove;\r\n    }\r\n    public var touchUp(get, null):Signal<Node>;\r\n\r\n    function get_touchUp() {\r\n        return _touchUp;\r\n    }\r\n    public var touchTap(get, null):Signal<Node>;\r\n\r\n    function get_touchTap() {\r\n        return _tap;\r\n    }\r\n    public var touchDoubleTap(get, null):Signal<Node>;\r\n\r\n    function get_touchDoubleTap() {\r\n        return _doubleTap;\r\n    }\r\n    public var touchLongHold(get, null):Signal<Node>;\r\n\r\n    function get_touchLongHold() {\r\n        return _longHold;\r\n    }\r\n    public var pickedSurface(get, null):Surface;\r\n\r\n    function get_pickedSurface() {\r\n        return _lastPickedSurface;\r\n    }\r\n\r\n    public var renderDepth(get, set):Bool;\r\n\r\n    function get_renderDepth() {\r\n        return _renderDepth;\r\n    }\r\n\r\n    function set_renderDepth(value) {\r\n        _renderDepth = value;\r\n        return value;\r\n    }\r\n\r\n    public var pickedDepth(get, null):Float;\r\n\r\n    function get_pickedDepth() {\r\n        return _lastDepthValue;\r\n    }\r\n\r\n    public var pickedMergingMask(get, null):Int;\r\n\r\n    function get_pickedMergingMask() {\r\n        return _lastMergingMask;\r\n    }\r\n    public var debug(null, set):Bool;\r\n\r\n    function set_debug(v) {\r\n        _debug = v;\r\n        return v;\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        unbindSignals();\r\n\r\n        if (target.existsComponent(_renderer)) {\r\n            target.removeComponent(_renderer);\r\n        }\r\n        if (target.existsComponent(_depthRenderer)) {\r\n            target.removeComponent(_depthRenderer);\r\n        }\r\n\r\n        _renderer = null;\r\n        _depthRenderer = null;\r\n        _sceneManager = null;\r\n        _enabled = false;\r\n\r\n        removedHandler(target.root, target, target.parent);\r\n    }\r\n\r\n\r\n    public function initialize(camera:Node, addPickingLayout:Bool, emulateMouseWithTouch:Bool, pickingEffect:Effect, pickingDepthEffect:Effect) {\r\n        _camera = camera;\r\n        _addPickingLayout = addPickingLayout;\r\n        _emulateMouseWithTouch = emulateMouseWithTouch;\r\n        _pickingEffect = pickingEffect;\r\n        _pickingDepthEffect = pickingDepthEffect;\r\n\r\n        _pickingProvider.set(\"pickingProjection\", _pickingProjection);\r\n        _pickingProvider.set(\"pickingOrigin\", new Vec3());\r\n    }\r\n\r\n    private function bindSignals() {\r\n        _mouseMoveSlot = _mouse.move.connect(this.mouseMoveHandler);\r\n\r\n        _mouseLeftDownSlot = _mouse.leftButtonDown.connect(this.mouseLeftDownHandler);\r\n\r\n        _mouseRightDownSlot = _mouse.rightButtonDown.connect(this.mouseRightDownHandler);\r\n\r\n        _mouseLeftClickSlot = _mouse.leftButtonClick.connect(this.mouseLeftClickHandler);\r\n\r\n        _mouseRightClickSlot = _mouse.rightButtonClick.connect(this.mouseRightClickHandler);\r\n\r\n        _mouseLeftUpSlot = _mouse.leftButtonUp.connect(this.mouseLeftUpHandler);\r\n\r\n        _mouseRightUpSlot = _mouse.rightButtonUp.connect(this.mouseRightUpHandler);\r\n\r\n        _mouseWheelSlot = _mouse.wheel.connect(this.mouseWheelHandler);\r\n\r\n        _touchDownSlot = _touch.touchDown.connect(this.touchDownHandler);\r\n\r\n        _touchUpSlot = _touch.touchUp.connect(this.touchUpHandler);\r\n\r\n        _touchMoveSlot = _touch.touchMove.connect(this.touchMoveHandler);\r\n\r\n        _touchTapSlot = _touch.tap.connect(this.touchTapHandler);\r\n\r\n        _touchDoubleTapSlot = _touch.doubleTap.connect(this.touchDoubleTapHandler);\r\n\r\n        _touchLongHoldSlot = _touch.longHold.connect(this.touchLongHoldHandler);\r\n\r\n        _executeMoveHandler = false;\r\n        _executeRightClickHandler = false;\r\n        _executeLeftClickHandler = false;\r\n        _executeRightDownHandler = false;\r\n        _executeLeftDownHandler = false;\r\n        _executeRightUpHandler = false;\r\n        _executeLeftUpHandler = false;\r\n        _executeTouchDownHandler = false;\r\n        _executeTouchUpHandler = false;\r\n        _executeTouchMoveHandler = false;\r\n        _executeTapHandler = false;\r\n        _executeDoubleTapHandler = false;\r\n        _executeLongHoldHandler = false;\r\n    }\r\n\r\n    private function unbindSignals() {\r\n        _mouseMoveSlot = null;\r\n        _mouseLeftDownSlot = null;\r\n        _mouseRightDownSlot = null;\r\n        _mouseLeftClickSlot = null;\r\n        _mouseRightClickSlot = null;\r\n        _mouseLeftUpSlot = null;\r\n        _mouseRightUpSlot = null;\r\n        _touchDownSlot = null;\r\n        _touchUpSlot = null;\r\n        _touchMoveSlot = null;\r\n        _touchTapSlot = null;\r\n        _touchDoubleTapSlot = null;\r\n        _touchLongHoldSlot = null;\r\n\r\n        _frameBeginSlot = null;\r\n        _renderingBeginSlot = null;\r\n        _renderingEndSlot = null;\r\n        _depthRenderingBeginSlot = null;\r\n        _depthRenderingEndSlot = null;\r\n        _componentAddedSlot = null;\r\n        _componentRemovedSlot = null;\r\n\r\n        _addedSlot = null;\r\n        _removedSlot = null;\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        _sceneManager = cast target.root.getComponent(SceneManager);\r\n        var canvas:AbstractCanvas = _sceneManager.canvas;\r\n\r\n        _mouse = canvas.mouse;\r\n        _touch = canvas.touch;\r\n        _context = canvas.context;\r\n\r\n        bindSignals();\r\n\r\n        if (_pickingEffect == null) {\r\n            _pickingEffect = _sceneManager.assets.effect(\"effect/Picking.effect\");\r\n        }\r\n\r\n        var priority = _debug ? -1000.0 : 1000.0;\r\n\r\n        _renderer = Renderer.create(0xFFFF00FF, null, _pickingEffect, \"default\", priority, \"Picking Renderer\");\r\n        if (!_debug) {\r\n            _renderer.scissorBox(0, 0, 1, 1);\r\n        }\r\n        _renderer.layoutMask = (BuiltinLayout.PICKING);\r\n        if (!_debug) {\r\n            _renderer.enabled = (false);\r\n        }\r\n\r\n        if (_pickingDepthEffect == null) {\r\n            _pickingDepthEffect = _sceneManager.assets.effect(\"effect/PickingDepth.effect\");\r\n        }\r\n\r\n        _depthRenderer = Renderer.create(0xFFFF00FF, null, _pickingDepthEffect, \"default\", 999.0, \"Depth Picking Renderer\");\r\n        _depthRenderer.scissorBox(0, 0, 1, 1);\r\n        _depthRenderer.layoutMask = (BuiltinLayout.PICKING_DEPTH);\r\n        _depthRenderer.enabled = (false);\r\n\r\n        updateDescendants(target);\r\n\r\n        _addedSlot = target.added.connect(addedHandler);\r\n\r\n        _removedSlot = target.removed.connect(removedHandler);\r\n\r\n        if (target.parent != null || target.hasComponent(SceneManager)) {\r\n            addedHandler(target, target, target.parent);\r\n        }\r\n\r\n        target.addComponent(_renderer);\r\n        target.addComponent(_depthRenderer);\r\n\r\n        var perspectiveCamera:PerspectiveCamera = cast _camera.getComponent(PerspectiveCamera);\r\n\r\n        target.data.addProvider(_pickingProvider);\r\n        target.data.addProvider(perspectiveCamera.data);\r\n\r\n        addSurfacesForNode(target);\r\n    }\r\n\r\n\r\n    public function addedHandler(target:Node, child:Node, parent:Node) {\r\n        updateDescendants(target);\r\n\r\n        if (Lambda.has(_descendants, child) == false) {\r\n            return;\r\n        }\r\n\r\n        if (child == target && _renderingBeginSlot == null) {\r\n            _renderingBeginSlot = _renderer.renderingBegin.connect(renderingBegin);\r\n\r\n            _renderingEndSlot = _renderer.beforePresent.connect(renderingEnd);\r\n\r\n            _depthRenderingBeginSlot = _depthRenderer.renderingBegin.connect(depthRenderingBegin);\r\n\r\n            _depthRenderingEndSlot = _depthRenderer.beforePresent.connect(depthRenderingEnd);\r\n\r\n            _componentAddedSlot = child.componentAdded.connect(componentAddedHandler);\r\n\r\n            _componentRemovedSlot = child.componentRemoved.connect(componentRemovedHandler);\r\n        }\r\n\r\n        if (Lambda.has(_descendants, child)) {\r\n            addSurfacesForNode(child);\r\n        }\r\n    }\r\n\r\n    public function componentAddedHandler(target:Node, node:Node, ctrl:AbstractComponent) {\r\n        if (Lambda.has(_descendants, node)) {\r\n            return;\r\n        }\r\n\r\n\r\n        if (Std.is(ctrl, Surface)) {\r\n            var surfaceCtrl:Surface = cast(ctrl, Surface);\r\n            addSurface(surfaceCtrl);\r\n        }\r\n    }\r\n\r\n    public function componentRemovedHandler(target:Node, node:Node, ctrl:AbstractComponent) {\r\n        if (Lambda.has(_descendants, node) == false) {\r\n            return;\r\n        }\r\n        if (Std.is(ctrl, Surface)) {\r\n            var surfaceCtrl:Surface = cast(ctrl, Surface);\r\n            removeSurface(surfaceCtrl, node);\r\n        }\r\n\r\n        if (!node.hasComponent(Surface) && _addPickingLayout) {\r\n            node.layout = (node.layout & ~BuiltinLayout.PICKING);\r\n        }\r\n    }\r\n\r\n    public function addSurface(surface:Surface) {\r\n        if (_surfaceToPickingId.exists(surface) == false) {\r\n            _pickingId += 2;\r\n\r\n            _surfaceToPickingId.set(surface, _pickingId);\r\n            _pickingIdToSurface.set(_pickingId, surface);\r\n\r\n            surface.data.set(\"pickingColor\", new Vec4(((_pickingId >> 16) & 0xff) / 255.0, ((_pickingId >> 8) & 0xff) / 255.0, ((_pickingId) & 0xff) / 255.0, 1));\r\n\r\n            if (_addPickingLayout) {\r\n                surface.target.layout = (target.layout | BuiltinLayout.PICKING);\r\n            }\r\n\r\n            surface.layoutMask = (surface.layoutMask & ~BuiltinLayout.PICKING_DEPTH);\r\n        }\r\n    }\r\n\r\n    public function removeSurface(surface:Surface, node:Node) {\r\n        if (_surfaceToPickingId.exists(surface) == false) {\r\n            return;\r\n        }\r\n\r\n        surface.data.unset(\"pickingColor\");\r\n\r\n        var surfacePickingId = _surfaceToPickingId.get(surface);\r\n\r\n        _surfaceToPickingId.remove(surface);\r\n        _pickingIdToSurface.remove(surfacePickingId);\r\n    }\r\n\r\n    public function removedHandler(target:Node, child:Node, parent:Node) {\r\n\r\n        if (Lambda.has(_descendants, child) == false) {\r\n            return;\r\n        }\r\n\r\n        removeSurfacesForNode(child);\r\n\r\n        updateDescendants(target);\r\n    }\r\n\r\n    public function addSurfacesForNode(node:Node) {\r\n        var surfaces:NodeSet = NodeSet.createbyNode(node).descendants(true).where(function(node:Node) {\r\n            return node.hasComponent(Surface);\r\n        });\r\n\r\n        for (surfaceNode in surfaces.nodes) {\r\n            var surfaces:Array<Surface> = cast surfaceNode.getComponents(Surface);\r\n            for (surface in surfaces) {\r\n                addSurface(surface);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function removeSurfacesForNode(node:Node) {\r\n        var surfaces:NodeSet = NodeSet.createbyNode(node).descendants(true).where(function(node:Node) {\r\n            return node.hasComponent(Surface);\r\n        });\r\n\r\n        for (surfaceNode in surfaces.nodes) {\r\n            surfaceNode.layout = (surfaceNode.layout & ~BuiltinLayout.PICKING);\r\n            var surfaces:Array<Surface> = cast surfaceNode.getComponents(Surface);\r\n            for (surface in surfaces) {\r\n                removeSurface(surface, surfaceNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function updateDescendants(target:Node) {\r\n        var nodeSet:NodeSet = NodeSet.createbyNode(target).descendants(true);\r\n\r\n        _descendants = nodeSet.nodes;\r\n    }\r\n\r\n    public var enabled(null, set):Bool;\r\n\r\n    function set_enabled(v) {\r\n        if (v && _frameBeginSlot == null) {\r\n            v = true;\r\n\r\n            _frameBeginSlot = _sceneManager.frameBegin.connect(frameBeginHandler, 1000.0);\r\n        }\r\n        else if (!v && _frameBeginSlot != null) {\r\n            _frameBeginSlot = null;\r\n        }\r\n\r\n        _enabled = v;\r\n        return v;\r\n    }\r\n\r\n    public function frameBeginHandler(UnnamedParameter1:SceneManager, UnnamedParameter2:Float, UnnamedParameter3:Float) {\r\n        if (_debug) {\r\n            return;\r\n        }\r\n\r\n        _renderer.enabled = (true);\r\n        _renderer.render(_sceneManager.canvas.context);\r\n        _renderer.enabled = (false);\r\n    }\r\n\r\n    public function renderingBegin(renderer:Renderer) {\r\n        if (!_enabled) {\r\n            return;\r\n        }\r\n\r\n        updatePickingProjection();\r\n    }\r\n\r\n    function doRenderDepth(renderer:Renderer, pickedSurface:Surface) {\r\n        if (!_enabled)\r\n            return;\r\n\r\n        var pickedSurfaceTarget = pickedSurface.target;\r\n\r\n        pickedSurfaceTarget.layout = (pickedSurfaceTarget.layout | BuiltinLayout.PICKING_DEPTH);\r\n        pickedSurface.layoutMask = (pickedSurface.layoutMask | BuiltinLayout.PICKING_DEPTH);\r\n\r\n        renderer.enabled = (true);\r\n        renderer.render(_sceneManager.canvas.context);\r\n        renderer.enabled = (false);\r\n\r\n        pickedSurfaceTarget.layout = (pickedSurfaceTarget.layout & ~BuiltinLayout.PICKING_DEPTH);\r\n        pickedSurface.layoutMask = (pickedSurface.layoutMask & ~ BuiltinLayout.PICKING_DEPTH);\r\n    }\r\n\r\n    public function renderingEnd(renderer:Renderer) {\r\n        if (!_enabled) {\r\n            return;\r\n        }\r\n\r\n        _context.readRectPixels(0, 0, 1, 1, _lastColor);\r\n\r\n        var pickedSurfaceId = (_lastColor.get(0) << 16) + (_lastColor.get(1) << 8) + _lastColor.get(2);\r\n\r\n        var surfaceIt = _pickingIdToSurface.exists(pickedSurfaceId);\r\n\r\n        if (surfaceIt != false) {\r\n            var pickedSurface = _pickingIdToSurface.get(pickedSurfaceId);\r\n\r\n            if (_renderDepth) {\r\n                doRenderDepth(_depthRenderer, pickedSurface);\r\n            }\r\n            else {\r\n                dispatchEvents(pickedSurface, _lastDepthValue);\r\n            }\r\n        }\r\n        else {\r\n            dispatchEvents(null, _lastDepthValue);\r\n        }\r\n    }\r\n\r\n\r\n    public function depthRenderingBegin(renderer:Renderer) {\r\n        if (!_enabled) {\r\n            return;\r\n        }\r\n\r\n        updatePickingOrigin();\r\n    }\r\n\r\n    static inline function unpack(depth:Vec3) {\r\n        return Vec3.dot(depth, new Vec3(1.0, 1.0 / 255.0, 1.0 / 65025.0));\r\n    }\r\n\r\n\r\n    public function depthRenderingEnd(renderer:Renderer) {\r\n        if (!_enabled) {\r\n            return;\r\n        }\r\n\r\n        var pickedSurfaceId = (_lastColor.get(0) << 16) + (_lastColor.get(1) << 8) + _lastColor.get(2);\r\n\r\n        var surfaceIt = _pickingIdToSurface.exists(pickedSurfaceId);\r\n\r\n        if (surfaceIt != false) {\r\n            var pickedSurface = _pickingIdToSurface.get(pickedSurfaceId);\r\n\r\n            _context.readRectPixels(0, 0, 1, 1, _lastDepth);\r\n\r\n            var zFar = _camera.data.get(\"zFar\");\r\n\r\n            var normalizedDepth = Picking.unpack( (new Vec3(_lastDepth.get(0), _lastDepth.get(1), _lastDepth.get(2))/ 255.0)) * zFar;\r\n\r\n            _lastDepthValue = normalizedDepth;\r\n\r\n            _lastMergingMask = _lastDepth.get(3);\r\n\r\n            dispatchEvents(pickedSurface, _lastDepthValue);\r\n        }\r\n    }\r\n\r\n    public function updatePickingProjection() {\r\n        var mouseX = _mouse.x;\r\n        var mouseY = _mouse.y;\r\n\r\n        var perspectiveCamera:PerspectiveCamera = cast _camera.getComponent(PerspectiveCamera);\r\n\r\n        var projection:Mat4 = GLM.perspective(perspectiveCamera.fieldOfView, perspectiveCamera.aspectRatio, perspectiveCamera.zNear, perspectiveCamera.zFar, new Mat4());\r\n\r\n        projection.r0c2 = mouseX / _context.viewportWidth * 2.0;\r\n        projection.r1c2 = (_context.viewportHeight - mouseY) / _context.viewportHeight * 2.0;\r\n\r\n        _pickingProvider.set(\"pickingProjection\", projection);\r\n    }\r\n\r\n    public function updatePickingOrigin() {\r\n        var perspectiveCamera:PerspectiveCamera = cast _camera.getComponent(PerspectiveCamera);\r\n\r\n        var normalizedMouseX = _mouse.normalizedX;\r\n        var normalizedMouseY = _mouse.normalizedY;\r\n\r\n        var pickingRay:Ray = perspectiveCamera.unproject(normalizedMouseX, normalizedMouseY);\r\n\r\n        _pickingProvider.set(\"pickingOrigin\", pickingRay.origin);\r\n    }\r\n\r\n    public function dispatchEvents(pickedSurface:Surface, depth:Float) {\r\n        if (_lastPickedSurface != pickedSurface) {\r\n            if (_lastPickedSurface != null && _mouseOut.numCallbacks > 0) {\r\n                _mouseOut.execute(_lastPickedSurface.target);\r\n            }\r\n\r\n            _lastPickedSurface = pickedSurface;\r\n\r\n            if (_lastPickedSurface != null && _mouseOver.numCallbacks > 0) {\r\n                _mouseOver.execute(_lastPickedSurface.target);\r\n            }\r\n        }\r\n\r\n        if (_executeMoveHandler && _lastPickedSurface != null) {\r\n            _mouseMove.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeRightDownHandler && _lastPickedSurface != null) {\r\n            _mouseRightDown.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeLeftDownHandler && _lastPickedSurface != null) {\r\n            _mouseLeftDown.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeRightClickHandler && _lastPickedSurface != null) {\r\n            _mouseRightClick.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeLeftClickHandler && _lastPickedSurface != null) {\r\n            _mouseLeftClick.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeRightUpHandler && _lastPickedSurface != null) {\r\n            _mouseRightUp.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeLeftUpHandler && _lastPickedSurface != null) {\r\n            _mouseLeftUp.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeMouseWheel && _lastPickedSurface != null) {\r\n            _mouseWheel.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeTouchDownHandler && _lastPickedSurface != null) {\r\n            _touchDown.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeTouchUpHandler && _lastPickedSurface != null) {\r\n            _touchUp.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeTouchMoveHandler && _lastPickedSurface != null) {\r\n            _touchMove.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeTapHandler && _lastPickedSurface != null) {\r\n            _tap.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeDoubleTapHandler && _lastPickedSurface != null) {\r\n            _doubleTap.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (_executeLongHoldHandler && _lastPickedSurface != null) {\r\n            _longHold.execute(_lastPickedSurface.target);\r\n        }\r\n\r\n        if (!(_mouseOver.numCallbacks > 0 || _mouseOut.numCallbacks > 0)) {\r\n            enabled = (false);\r\n        }\r\n\r\n        _executeMoveHandler = false;\r\n        _executeRightDownHandler = false;\r\n        _executeLeftDownHandler = false;\r\n        _executeRightClickHandler = false;\r\n        _executeLeftClickHandler = false;\r\n        _executeRightUpHandler = false;\r\n        _executeLeftUpHandler = false;\r\n    }\r\n\r\n    public function mouseMoveHandler(mouse:Mouse, dx:Int, dy:Int) {\r\n        if (_mouseOver.numCallbacks > 0 || _mouseOut.numCallbacks > 0) {\r\n            _executeMoveHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function mouseRightUpHandler(mouse:Mouse) {\r\n        if (_mouseRightUp.numCallbacks > 0) {\r\n            _executeRightUpHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function mouseLeftUpHandler(mouse:Mouse) {\r\n        if (_mouseLeftUp.numCallbacks > 0) {\r\n            _executeLeftUpHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function mouseRightClickHandler(mouse:Mouse) {\r\n        if (_mouseRightClick.numCallbacks > 0) {\r\n            _executeRightClickHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function mouseLeftClickHandler(mouse:Mouse) {\r\n        if (_mouseLeftClick.numCallbacks > 0) {\r\n            _executeLeftClickHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function mouseRightDownHandler(mouse:Mouse) {\r\n        if (_mouseRightDown.numCallbacks > 0) {\r\n            _executeRightDownHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function mouseLeftDownHandler(mouse:Mouse) {\r\n        if (_mouseLeftDown.numCallbacks > 0) {\r\n            _executeLeftDownHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function mouseWheelHandler(mouse:Mouse, x:Float, y:Float) {\r\n        if (_mouseWheel.numCallbacks > 0) {\r\n            _executeMouseWheel = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function touchDownHandler(touch:Touch, identifier:Int, x:Float, y:Float) {\r\n        if (_touchDown.numCallbacks > 0) {\r\n            _executeTouchDownHandler = true;\r\n            enabled = (true);\r\n        }\r\n        if (_emulateMouseWithTouch && _touch.numTouches == 1 && _mouseLeftDown.numCallbacks > 0) {\r\n            _executeLeftDownHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function touchUpHandler(touch:Touch, identifier:Int, x:Float, y:Float) {\r\n        if (_touchUp.numCallbacks > 0) {\r\n            _executeTouchUpHandler = true;\r\n            enabled = (true);\r\n        }\r\n        if (_emulateMouseWithTouch && _touch.numTouches == 1 && _mouseLeftUp.numCallbacks > 0) {\r\n            _executeLeftUpHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function touchMoveHandler(touch:Touch, identifier:Int, x:Float, y:Float) {\r\n        if (_touchMove.numCallbacks > 0) {\r\n            _executeTouchMoveHandler = true;\r\n            enabled = (true);\r\n        }\r\n        if (_emulateMouseWithTouch && _touch.numTouches == 1 && _mouseMove.numCallbacks > 0) {\r\n            _executeMoveHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function touchTapHandler(touch:Touch, x:Float, y:Float) {\r\n        if (_tap.numCallbacks > 0) {\r\n            _executeTapHandler = true;\r\n            enabled = (true);\r\n        }\r\n        if (_emulateMouseWithTouch && _mouseLeftClick.numCallbacks > 0) {\r\n            _executeLeftClickHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function touchDoubleTapHandler(touch:Touch, x:Float, y:Float) {\r\n        if (_doubleTap.numCallbacks > 0) {\r\n            _executeDoubleTapHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function touchLongHoldHandler(touch:Touch, x:Float, y:Float) {\r\n        if (_doubleTap.numCallbacks > 0) {\r\n            _executeDoubleTapHandler = true;\r\n            enabled = (true);\r\n        }\r\n        if (_emulateMouseWithTouch && _mouseRightClick.numCallbacks > 0) {\r\n            _executeRightClickHandler = true;\r\n            enabled = (true);\r\n        }\r\n    }\r\n\r\n    public function new() {\r\n        super();\r\n        this._sceneManager = null;\r\n        this._context = null;\r\n        this._mouse = null;\r\n        this._touch = null;\r\n        this._camera = null;\r\n        this._pickingId = 0;\r\n        this._pickingProjection = Mat4.identity(new Mat4());\r\n        this._pickingProvider = Provider.create();\r\n        this._pickingEffect = null;\r\n        this._pickingDepthEffect = null;\r\n        this._mouseMove = new Signal<Node>();\r\n        this._mouseLeftClick = new Signal<Node>();\r\n        this._mouseRightClick = new Signal<Node>();\r\n        this._mouseLeftDown = new Signal<Node>();\r\n        this._mouseRightDown = new Signal<Node>();\r\n        this._mouseLeftUp = new Signal<Node>();\r\n        this._mouseRightUp = new Signal<Node>();\r\n        this._mouseOut = new Signal<Node>();\r\n        this._mouseOver = new Signal<Node>();\r\n        this._mouseWheel = new Signal<Node>();\r\n        this._touchDown = new Signal<Node>();\r\n        this._touchMove = new Signal<Node>();\r\n        this._touchUp = new Signal<Node>();\r\n        this._tap = new Signal<Node>();\r\n        this._doubleTap = new Signal<Node>();\r\n        this._longHold = new Signal<Node>();\r\n        this._lastDepthValue = 0.0;\r\n        this._lastMergingMask = 0;\r\n        this._addPickingLayout = true;\r\n        this._emulateMouseWithTouch = true;\r\n        this._frameBeginSlot = null;\r\n        this._enabled = false;\r\n        this._renderDepth = true;\r\n        this._debug = false;\r\n        this._lastColor = Bytes.alloc(4);//= new byte[4];\r\n        this._lastDepth = Bytes.alloc(4);// = new byte[4];\r\n        this._surfaceToPickingId = new ObjectMap<Surface, Int>() ;\r\n        this._pickingIdToSurface = new IntMap<Surface>() ;\r\n    }\r\n}\r\n","package minko.component;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\n@:expose(\"minko.component.PointLight\")\r\nclass PointLight extends AbstractDiscreteLight {\r\n    private var _attenuationCoeffs:Vec3;\r\n    private var _worldPosition:Vec3;\r\n\r\n    public static function create(diffuse = 1.0, specular = 1.0, attenuationConstant = -1.0, attenuationLinear = -1.0, attenuationQuadratic = -1.0):PointLight {\r\n        return new PointLight(diffuse, specular, attenuationConstant, attenuationLinear, attenuationQuadratic);\r\n    }\r\n\r\n    override public function clone(option:CloneOption) {\r\n        var light = create().copyFrom(this, option);\r\n        return light;\r\n    }\r\n\r\n    public var attenuationEnabled(get, null):Bool;\r\n\r\n    function get_attenuationEnabled() {\r\n        return !(_attenuationCoeffs.x < 0.0 || _attenuationCoeffs.y < 0.0 || _attenuationCoeffs.z < 0.0);\r\n    }\r\n\r\n    public var attenuationCoefficients(get, set):Vec3;\r\n\r\n    function get_attenuationCoefficients() {\r\n        return _attenuationCoeffs;\r\n    }\r\n\r\n    public function setAttenuationCoefficients(constant, linear, quadratic) {\r\n        return attenuationCoefficients = (new Vec3(constant, linear, quadratic));\r\n    }\r\n\r\n    function set_attenuationCoefficients(value) {\r\n        data.set(\"attenuationCoeffs\", _attenuationCoeffs = value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var position(get, null):Vec3;\r\n\r\n    function get_position() {\r\n        return data.get(\"position\");\r\n    }\r\n\r\n    override public function updateModelToWorldMatrix(modelToWorld:Mat4) {\r\n        var tmp:Vec4 = modelToWorld * (new Vec4(0.0, 0.0, 0.0, 1.0));\r\n        data.set(\"position\", new Vec3(tmp.x, tmp.y, tmp.z));\r\n    }\r\n\r\n    public function new(diffuse, specular, attenuationConstant, attenuationLinear, attenuationQuadratic) {\r\n        super(\"pointLight\", diffuse, specular);\r\n        this._attenuationCoeffs = new Vec3(attenuationConstant, attenuationLinear, attenuationQuadratic);\r\n        this._worldPosition = new Vec3();\r\n        data.set(\"attenuationCoeffs\", _attenuationCoeffs);\r\n        updateModelToWorldMatrix(Mat4.identity(new Mat4()));\r\n    }\r\n\r\n    public function copyFrom(pointLight:PointLight, option:CloneOption) {\r\n        data.set(\"diffuse\", pointLight.diffuse).set(\"specular\", pointLight.specular);\r\n        this._attenuationCoeffs = pointLight.attenuationCoefficients;\r\n        updateModelToWorldMatrix(Mat4.identity(new Mat4()));\r\n        return this;\r\n    }\r\n\r\n}\r\n","package minko.component;\r\nimport Array;\r\nimport glm.Vec4;\r\nimport haxe.ds.ObjectMap;\r\nimport minko.data.AbstractFilter;\r\nimport minko.data.Binding.Source;\r\nimport minko.data.Binding;\r\nimport minko.data.Provider;\r\nimport minko.data.Store;\r\nimport minko.geometry.Geometry;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.AbstractTexture;\r\nimport minko.render.DrawCall;\r\nimport minko.render.DrawCallPool;\r\nimport minko.render.Effect;\r\nimport minko.render.VertexBuffer;\r\nimport minko.scene.Layout.BuiltinLayout;\r\nimport minko.scene.Layout;\r\nimport minko.scene.Node;\r\nimport minko.scene.NodeSet;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.signal.Signal4;\r\nimport minko.signal.Signal;\r\ntypedef EffectVariables = Array<Tuple<String, String>>;\r\n@:expose(\"minko.component.Renderer\")\r\nclass Renderer extends AbstractComponent {\r\n    private var _name:String;\r\n\r\n    private var _backgroundColor:Int;\r\n    private var _viewportBox:Vec4;\r\n    private var _scissorBox:Vec4 ;\r\n    private var _sceneManager:SceneManager;\r\n    private var _renderingBegin:Signal<Renderer>;\r\n    private var _renderingEnd:Signal<Renderer>;\r\n    private var _beforePresent:Signal<Renderer>;\r\n    private var _renderTarget:AbstractTexture;\r\n    private var _clearBeforeRender:Bool;\r\n    private var _variables:EffectVariables;\r\n\r\n    private var _toCollect:Array<Surface>;\r\n    private var _effect:Effect;\r\n    private var _effectTechnique:String;\r\n    private var _priority:Float;\r\n    private var _enabled:Bool;\r\n    private var _postProcessingGeom:Geometry;\r\n    private var _mustZSort:Bool;\r\n\r\n    private var _drawCallToZSortNeededSlot:ObjectMap<DrawCall, SignalSlot<DrawCall>>;\r\n\r\n    private var _addedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _removedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _rootDescendantAddedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _rootDescendantRemovedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _componentAddedSlot:SignalSlot3<Node, Node, AbstractComponent>;\r\n    private var _componentRemovedSlot:SignalSlot3<Node, Node, AbstractComponent>;\r\n    private var _renderingBeginSlot:SignalSlot3<SceneManager, Int, AbstractTexture>;\r\n    private var _surfaceChangedSlots:ObjectMap<Surface, Array<SignalSlot<Surface>>>;\r\n    private var _worldToScreenMatrixPropertyChangedSlot:SignalSlot3<Store, Provider, String>;\r\n\r\n    private var _drawCallPool:DrawCallPool;\r\n    private var _surfaceToDrawCallIterator:ObjectMap<Surface, Int>;\r\n\r\n    /*std::set<AbsFilterPtr>\t\t\t\t\t\t\t\t\t\t        _targetDataFilters;\r\n\t\t\tstd::set<AbsFilterPtr>\t\t\t\t\t\t\t\t\t\t            _rendererDataFilters;\r\n\t\t\tstd::set<AbsFilterPtr>\t\t\t\t\t\t\t\t\t\t            _rootDataFilters;\r\n\t\t\tstd::shared_ptr<data::LightMaskFilter>\t\t\t\t\t\t            _lightMaskFilter;*/\r\n\r\n    /*std::unordered_map<AbsFilterPtr, FilterChangedSlot>\t\t\t        _targetDataFilterChangedSlots;\r\n\t\t\tstd::unordered_map<AbsFilterPtr, FilterChangedSlot>\t\t\t            _rendererDataFilterChangedSlots;\r\n\t\t\tstd::unordered_map<AbsFilterPtr, FilterChangedSlot>\t\t\t            _rootDataFilterChangedSlots;*/\r\n\r\n    private var _filterChanged:Signal4<Renderer, AbstractFilter, Source, Surface>;\r\n    private var _nodeLayoutChangedSlot:ObjectMap<Node, SignalSlot2<Node, Node>>;\r\n    private var _surfaceLayoutMaskChangedSlot:ObjectMap<Surface, SignalSlot<AbstractComponent>> ;\r\n\r\n    private var _numDrawCalls:Int;\r\n    private var _numTriangles:Int;\r\n\r\n    public function new(renderTarget:AbstractTexture, effect:Effect, effectTechnique:String, priority:Float)\r\n        //_surfaceTechniqueChangedSlot(),\r\n        /*_targetDataFilters(),\r\n\t\t_rendererDataFilters(),\r\n\t\t_rootDataFilters(),\r\n\t\t_targetDataFilterChangedSlots(),\r\n\t\t_rendererDataFilterChangedSlots(),\r\n\t\t_rootDataFilterChangedSlots(),\r\n\t\t_lightMaskFilter(data::LightMaskFilter::create()),*/ {\r\n        enable_uuid();\r\n        super(cast BuiltinLayout.DEFAULT);\r\n        this._backgroundColor = 0;\r\n        this._viewportBox = new Vec4(0, 0, -1, -1);\r\n        this._scissorBox = new Vec4(0, 0, -1, -1);\r\n        this._enabled = true;\r\n        this._mustZSort = true;\r\n        this._renderingBegin = new Signal<Renderer>();\r\n        this._renderingEnd = new Signal<Renderer>();\r\n        this._beforePresent = new Signal<Renderer>();\r\n        this._effect = effect;\r\n        this._effectTechnique = effectTechnique;\r\n        this._clearBeforeRender = true;\r\n        this._priority = priority;\r\n        this._renderTarget = renderTarget;\r\n        this._postProcessingGeom = null;\r\n        this._filterChanged = new Signal4<Renderer, AbstractFilter, Source, Surface>();\r\n        this._numDrawCalls = 0;\r\n        this._numTriangles = 0;\r\n        this._drawCallPool = new DrawCallPool();\r\n\r\n        this._name = \"\";\r\n        this._sceneManager = null;\r\n        this._variables = new EffectVariables();\r\n\r\n        this._toCollect = new Array<Surface>();\r\n\r\n\r\n        this._drawCallToZSortNeededSlot = new ObjectMap<DrawCall, SignalSlot<DrawCall>>();\r\n\r\n\r\n        this._surfaceChangedSlots = new ObjectMap<Surface, Array<SignalSlot<Surface>>>();\r\n\r\n        this._surfaceToDrawCallIterator = new ObjectMap<Surface, Int>();\r\n\r\n\r\n        this._filterChanged = new Signal4<Renderer, AbstractFilter, Source, Surface>();\r\n        this._nodeLayoutChangedSlot = new ObjectMap<Node, SignalSlot2<Node, Node>>();\r\n        this._surfaceLayoutMaskChangedSlot = new ObjectMap<Surface, SignalSlot<AbstractComponent>>() ;\r\n\r\n    }\r\n\r\n    static public function create(backgroundColor = 0x000000,\r\n                                  renderTarget = null,\r\n                                  effect = null,\r\n                                  effectTechnique = \"default\",\r\n                                  priority = 0.0,\r\n                                  name = \"\"):Renderer {\r\n        var ctrl:Renderer = new Renderer(renderTarget, effect, effectTechnique, priority) ;\r\n\r\n        ctrl.backgroundColor = (backgroundColor);\r\n        ctrl.name = (name);\r\n\r\n        return ctrl;\r\n    }\r\n\r\n    public var effect(get, set):Effect;\r\n\r\n    function get_effect() {\r\n        return _effect;\r\n    }\r\n\r\n    function set_effect(v:Effect) {\r\n        changeEffectOrTechnique(v, _effectTechnique);\r\n        return v;\r\n    }\r\n\r\n    public function setEffect(effect, technique) {\r\n        changeEffectOrTechnique(effect, technique);\r\n    }\r\n    public var numDrawCalls(get, null):Int;\r\n\r\n    function get_numDrawCalls() {\r\n        return _numDrawCalls;\r\n    }\r\n    public var numTriangles(get, null):Int;\r\n\r\n    function get_numTriangles() {\r\n        return _numTriangles;\r\n    }\r\n    public var backgroundColor(get, set):Int;\r\n\r\n    function get_backgroundColor() {\r\n        return _backgroundColor;\r\n    }\r\n\r\n    function set_backgroundColor(value) {\r\n        _backgroundColor = value;\r\n        return value;\r\n    }\r\n    public var name(get, set):String;\r\n\r\n    function set_name(value) {\r\n        _name = value;\r\n        return value;\r\n    }\r\n\r\n    function get_name() {\r\n        return _name;\r\n    }\r\n    public var priority(get, set):Float;\r\n\r\n    function get_priority() {\r\n        return _priority;\r\n    }\r\n\r\n    function set_priority(value) {\r\n        _priority = value;\r\n        return value;\r\n    }\r\n    public var viewport(null, set):Vec4;\r\n\r\n    function set_viewport(value) {\r\n        _viewportBox = value;\r\n        return value;\r\n    }\r\n\r\n    public function scissorBox(x, y, w, h) {\r\n        _scissorBox.x = x;\r\n        _scissorBox.y = y;\r\n        _scissorBox.z = w;\r\n        _scissorBox.w = h;\r\n    }\r\n    public var renderTarget(get, set):AbstractTexture;\r\n\r\n    function get_renderTarget() {\r\n        return _renderTarget;\r\n    }\r\n\r\n    function set_renderTarget(target) {\r\n        _renderTarget = target;\r\n        return target;\r\n    }\r\n    public var clearBeforeRender(get, set):Bool;\r\n\r\n    function get_clearBeforeRender() {\r\n        return _clearBeforeRender;\r\n    }\r\n\r\n    function set_clearBeforeRender(value) {\r\n        _clearBeforeRender = value;\r\n        return value;\r\n    }\r\n    public var effectVariables(get, null):EffectVariables;\r\n\r\n    function get_effectVariables() {\r\n        return _variables;\r\n    }\r\n\r\n    public var effectTechnique(get, set):String;\r\n\r\n    function get_effectTechnique() {\r\n        return _effectTechnique;\r\n    }\r\n\r\n    function set_effectTechnique(value) {\r\n        changeEffectOrTechnique(_effect, value);\r\n        return value;\r\n    }\r\n\r\n\r\n    public var enabled(get, set):Bool;\r\n\r\n    function get_enabled() {\r\n        return _enabled;\r\n    }\r\n\r\n    function set_enabled(value) {\r\n        _enabled = value;\r\n        return value;\r\n    }\r\n    public var drawCallPool(get, null):DrawCallPool;\r\n\r\n    function get_drawCallPool() {\r\n        return _drawCallPool;\r\n    }\r\n\r\n    public var renderingBegin(get, null):Signal<Renderer>;\r\n\r\n    function get_renderingBegin() {\r\n        return _renderingBegin;\r\n    }\r\n    public var beforePresent(get, null):Signal<Renderer>;\r\n\r\n    function get_beforePresent() {\r\n        return _beforePresent;\r\n    }\r\n    public var renderingEnd(get, null):Signal<Renderer>;\r\n\r\n    function get_renderingEnd() {\r\n        return _renderingEnd;\r\n    }\r\n\r\n\r\n    /*const std::set<AbsFilterPtr>&\r\n\t\t\tfilters(data::BindingSource source) const\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t\tsource == data::BindingSource::TARGET\r\n\t\t\t\t? _targetDataFilters\r\n\t\t\t\t: source == data::BindingSource::RENDERER\r\n\t\t\t\t\t? _rendererDataFilters\r\n\t\t\t\t\t: _rootDataFilters;\r\n\t\t\t}*/\r\n\r\n    /*Ptr\r\n\t\t\tsetFilterSurface(SurfacePtr);*/\r\n\r\n    /*inline\r\n\t\t\tstd::shared_ptr<RendererFilterChangedSignal>\r\n\t\t\tfilterChanged() const\r\n\t\t\t{\r\n\t\t\t\treturn _filterChanged;\r\n\t\t\t}*/\r\n\r\n\r\n    public function reset() {\r\n        _toCollect = new Array<Surface>();\r\n        for(s in _surfaceToDrawCallIterator.keys()){\r\n            removeSurface(s);\r\n        }\r\n        _surfaceToDrawCallIterator = new ObjectMap<Surface, Int>();\r\n        _drawCallPool.clear();\r\n    }\r\n\r\n    public function initializePostProcessingGeometry() {\r\n        var context = _sceneManager.assets.context;\r\n        var vb:VertexBuffer = VertexBuffer.createbyData(context, [ -1.0, 1.0, 0.0, 1.0, -1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 1.0, 0.0]);\r\n        vb.addAttribute(\"position\", 2);\r\n        vb.addAttribute(\"uv\", 2, 2);\r\n\r\n        var p:Provider = Provider.create();\r\n        p.set(\"postProcessingPosition\", vb.attribute(\"position\"));\r\n        p.set(\"postProcessingUV\", vb.attribute(\"uv\"));\r\n\r\n        _postProcessingGeom = Geometry.createbyName();\r\n        _postProcessingGeom.addVertexBuffer(vb);\r\n        // _postProcessingGeom->indices(render::IndexBuffer::create(context, { 0, 2, 1, 1, 2, 3 }));\r\n\r\n        target.data.addProvider(p);\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        // Comment due to reflection component\r\n        //if (target->components<Renderer>().size() > 1)\r\n        //\tthrow std::logic_error(\"There cannot be two Renderer on the same node.\");\r\n\r\n        if (_effect != null) {\r\n            target.data.addProviderbyName(_effect.data, Surface.EFFECT_COLLECTION_NAME);\r\n        }\r\n\r\n        _addedSlot = target.added.connect(addedHandler);\r\n\r\n        _removedSlot = target.removed.connect(removedHandler);\r\n\r\n\r\n        addedHandler(target.root, target, target.parent);\r\n    }\r\n\r\n    public function addedHandler(node:Node, target:Node, parent:Node) {\r\n\r\n        findSceneManager();\r\n        removeRootSlot();\r\n        _rootDescendantAddedSlot = target.root.added.connect(rootDescendantAddedHandler, Math.POSITIVE_INFINITY);\r\n        _rootDescendantRemovedSlot = target.root.removed.connect(rootDescendantRemovedHandler, Math.POSITIVE_INFINITY);\r\n        _componentAddedSlot = target.root.componentAdded.connect(componentAddedHandler, Math.POSITIVE_INFINITY);\r\n        _componentRemovedSlot = target.root.componentRemoved.connect(componentRemovedHandler, Math.POSITIVE_INFINITY);\r\n        //_lightMaskFilter->root(target->root());\r\n        reset();\r\n\r\n        rootDescendantAddedHandler(null, target.root, null);\r\n    }\r\n\r\n    function removeRootSlot() {\r\n        if (_rootDescendantAddedSlot != null)_rootDescendantAddedSlot.dispose();\r\n        if (_rootDescendantRemovedSlot != null)_rootDescendantRemovedSlot.dispose();\r\n        if (_componentAddedSlot != null)_componentAddedSlot.dispose();\r\n        if (_componentRemovedSlot != null)_componentRemovedSlot.dispose();\r\n        _rootDescendantAddedSlot = null;\r\n        _rootDescendantRemovedSlot = null;\r\n        _componentAddedSlot = null;\r\n        _componentRemovedSlot = null;\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n\r\n        removeRootSlot();\r\n\r\n        if (_addedSlot != null)_addedSlot.dispose();\r\n        if (_removedSlot != null)_removedSlot.dispose();\r\n        if (_renderingBeginSlot != null)_renderingBeginSlot.dispose();\r\n        _addedSlot = null;\r\n        _removedSlot = null;\r\n        _renderingBeginSlot = null;\r\n\r\n        _surfaceChangedSlots = null;\r\n\r\n\r\n        _drawCallPool.clear();\r\n\r\n        if (_effect != null) {\r\n            target.data.removeProviderbyName(_effect.data, Surface.EFFECT_COLLECTION_NAME);\r\n        }\r\n    }\r\n\r\n\r\n    public function removedHandler(node:Node, target:Node, parent:Node) {\r\n        findSceneManager();\r\n        removeRootSlot();\r\n        rootDescendantRemovedHandler(null, target.root, null);\r\n    }\r\n\r\n    public function rootDescendantAddedHandler(node:Node, target:Node, parent:Node) {\r\n        var surfaceNodes:NodeSet = NodeSet.createbyNode(target).descendants(true).where(function(node:Node) {\r\n            return node.hasComponent(Surface);\r\n        });\r\n\r\n        for (surfaceNode in surfaceNodes.nodes) {\r\n            for (surface in surfaceNode.getComponents(Surface)) {\r\n\r\n                addToCollect(cast surface);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function rootDescendantRemovedHandler(node:Node, target:Node, parent:Node) {\r\n        var surfaceNodes:NodeSet = NodeSet.createbyNode(target).descendants(true).where(function(node:Node) {\r\n            return node.hasComponent(Surface);\r\n        });\r\n\r\n        for (surfaceNode in surfaceNodes.nodes) {\r\n            for (surface in surfaceNode.getComponents(Surface)) {\r\n                unwatchSurface(cast surface, surfaceNode,true);\r\n                removeSurface(cast surface);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function componentAddedHandler(node:Node, target:Node, ctrl:AbstractComponent) {\r\n        //todo\r\n\r\n\r\n        if (Std.is(ctrl, Surface)) {\r\n            var surfaceCtrl:Surface = cast(ctrl, Surface);\r\n            addToCollect(surfaceCtrl);\r\n        }\r\n        else if (Std.is(ctrl, SceneManager)) {\r\n            var sceneManager:SceneManager = cast(ctrl, SceneManager);\r\n            setSceneManager(sceneManager);\r\n        }\r\n        else if (Std.is(ctrl, PerspectiveCamera)) {\r\n            var perspectiveCamera:PerspectiveCamera = cast(ctrl, PerspectiveCamera);\r\n            _worldToScreenMatrixPropertyChangedSlot = perspectiveCamera.target.data.getPropertyChanged(\"worldToScreenMatrix\").connect(\r\n                function(UnnamedParameter1, UnnamedParameter2, UnnamedParameter3) {\r\n                    _mustZSort = true;\r\n                });\r\n        }\r\n    }\r\n\r\n    public function addToCollect(surfaceCtrl:Surface):Void {\r\n        if(!Lambda.has(_toCollect,surfaceCtrl))\r\n            _toCollect.push(surfaceCtrl);\r\n    }\r\n\r\n    public function componentRemovedHandler(node:Node, target:Node, cmp:AbstractComponent) {\r\n        //todo\r\n\r\n        if (Std.is(cmp, Surface)) {\r\n            var surface:Surface = cast(cmp, Surface);\r\n            unwatchSurface(surface, target,false);\r\n            removeSurface(surface);\r\n        }\r\n        else if (Std.is(cmp, SceneManager)) {\r\n            var sceneManager:SceneManager = cast(cmp, SceneManager);\r\n            setSceneManager(null);\r\n        }\r\n        else if (Std.is(cmp, PerspectiveCamera)) {\r\n            var perspectiveCamera:PerspectiveCamera = cast(cmp, PerspectiveCamera);\r\n            _worldToScreenMatrixPropertyChangedSlot.dispose();\r\n            _worldToScreenMatrixPropertyChangedSlot = null;\r\n        }\r\n    }\r\n\r\n    public function addSurface(surface:Surface) {\r\n        if (_surfaceToDrawCallIterator.exists(surface)) {\r\n            throw (\"surface\");\r\n            return;\r\n        }\r\n        if (_surfaceChangedSlots.exists(surface) == false) {\r\n            _surfaceChangedSlots.set(surface, []);\r\n        }\r\n        if (_effect != null || surface.effect != null) {\r\n            if (!checkSurfaceLayout(surface)) {\r\n                return;\r\n            }\r\n\r\n            var variables:EffectVariables = _variables.concat([]);\r\n\r\n            variables.push(new Tuple<String, String>(\"surfaceUuid\", surface.uuid));\r\n            variables.push(new Tuple<String, String>(\"geometryUuid\", surface.geometry.uuid));\r\n            variables.push(new Tuple<String, String>(\"materialUuid\", surface.material.uuid));\r\n            variables.push(new Tuple<String, String>(\"effectUuid\", _effect != null ? _effect.uuid : surface.effect.uuid));\r\n\r\n           // target.layout\r\n            //这里区分 动态静态\r\n            var drawCalls = _drawCallPool.addDrawCalls(_effect != null ? _effect : surface.effect, _effect != null ? _effectTechnique : surface.technique, variables,\r\n\r\n            surface.target.root.data, target.data, surface.target.data);\r\n            // rootData:Store, rendererData:Store, targetData:Store\r\n            _surfaceToDrawCallIterator.set(surface, drawCalls);\r\n            _surfaceChangedSlots.get(surface).push(surface.geometryChanged.connect(surfaceGeometryOrMaterialChangedHandler));\r\n            _surfaceChangedSlots.get(surface).push(surface.materialChanged.connect(surfaceGeometryOrMaterialChangedHandler));\r\n        }\r\n\r\n        _surfaceChangedSlots.get(surface).push(surface.effectChanged.connect(surfaceEffectChangedHandler));\r\n    }\r\n\r\n    public function removeSurface(surface:Surface) {\r\n\r\n        _toCollect.remove(surface) ;\r\n        if (_surfaceToDrawCallIterator.exists(surface) == true) {\r\n            _drawCallPool.removeDrawCalls(_surfaceToDrawCallIterator.get(surface));\r\n\r\n            _surfaceToDrawCallIterator.remove(surface);\r\n\r\n            var changedSlots:Array<SignalSlot<Surface>> = _surfaceChangedSlots.get(surface);\r\n            for (s in changedSlots) {\r\n                s.dispose();\r\n            }\r\n            _surfaceChangedSlots.remove(surface);\r\n        }\r\n    }\r\n\r\n    public function surfaceGeometryOrMaterialChangedHandler(surface:Surface) {\r\n        // The surface's material, geometry or effect is different\r\n        // we completely remove the surface and re-add it again because\r\n        // it's way simpler than just updating what has changed.\r\n\r\n        var variables:EffectVariables =_variables.concat([]);\r\n        variables.push(new Tuple<String, String>(\"surfaceUuid\", surface.uuid));\r\n        variables.push(new Tuple<String, String>(\"geometryUuid\", surface.geometry.uuid));\r\n        variables.push(new Tuple<String, String>(\"materialUuid\", surface.material.uuid));\r\n        variables.push(new Tuple<String, String>(\"effectUuid\", _effect != null ? _effect.uuid : surface.effect.uuid));\r\n\r\n        _drawCallPool.invalidateDrawCalls(_surfaceToDrawCallIterator.get(surface), variables);\r\n        //removeSurface(surface);\r\n        //_toCollect.push(surface);\r\n    }\r\n\r\n    public function surfaceEffectChangedHandler(surface:Surface) {\r\n        removeSurface(surface);\r\n        addToCollect(surface);\r\n    }\r\n\r\n    public function render(context:AbstractContext, ?renderTarget:AbstractTexture = null) {\r\n        if (!_enabled) {\r\n            return;\r\n        }\r\n        var forceSort = !Lambda.empty(_toCollect);\r\n\r\n        // some surfaces have been added during the frame and collected\r\n        // in _toCollect: we now have to take them into account to build\r\n        // the corresponding draw calls before rendering\r\n\r\n        for (surface in _toCollect) {\r\n            watchSurface(surface);\r\n            addSurface(surface);\r\n        }\r\n        _toCollect = [];\r\n\r\n        _renderingBegin.execute((this));\r\n\r\n        var rt:AbstractTexture = _renderTarget != null ? _renderTarget : renderTarget;\r\n\r\n        if (_scissorBox.z >= 0 && _scissorBox.w >= 0) {\r\n            context.setScissorTest(true, _scissorBox);\r\n        }\r\n        else {\r\n            context.setScissorTest(false, _scissorBox);\r\n        }\r\n\r\n        if (rt != null) {\r\n            context.setRenderToTexture(rt.id, true);\r\n        }\r\n        else {\r\n            context.setRenderToBackBuffer();\r\n        }\r\n\r\n        if (_viewportBox.z >= 0 && _viewportBox.w >= 0) {\r\n            context.configureViewport(Math.floor(_viewportBox.x), Math.floor(_viewportBox.y), Math.floor(_viewportBox.z), Math.floor(_viewportBox.w));\r\n        }\r\n\r\n        if (_clearBeforeRender) {\r\n            context.clear(((_backgroundColor >> 24) & 0xff) / 255.0, ((_backgroundColor >> 16) & 0xff) / 255.0, ((_backgroundColor >> 8) & 0xff) / 255.0, (_backgroundColor & 0xff) / 255.0);\r\n        }\r\n\r\n        _drawCallPool.update(forceSort, _mustZSort);\r\n\r\n        _mustZSort = false;\r\n        var drawCallKeys = _drawCallPool.drawCallsKeys;\r\n        var drawCalls = _drawCallPool.drawCalls ;\r\n\r\n        _numDrawCalls = 0;\r\n        _numTriangles = 0;\r\n        inline function _render(drawCalls:Array<DrawCall>) {\r\n            for (drawCall in drawCalls) {\r\n                if (drawCall.enabled) {\r\n                    drawCall.render(context, rt, _viewportBox, _backgroundColor);\r\n                    ++_numDrawCalls;\r\n                    _numTriangles += drawCall.numTriangles ;\r\n                }\r\n            }\r\n        }\r\n        for (dk in drawCallKeys) {\r\n            var priorityToDrawCalls = drawCalls.get(dk);\r\n            _render(priorityToDrawCalls.first);\r\n            _render(priorityToDrawCalls.second);\r\n        }\r\n\r\n        _beforePresent.execute((this));\r\n\r\n        context.present();\r\n\r\n        _renderingEnd.execute((this));\r\n    }\r\n\r\n\r\n    public function clear(canvas:AbstractCanvas) {\r\n        var backgroundColor = new Vec4(((_backgroundColor >> 24) & 0xff) / 255.0, ((_backgroundColor >> 16) & 0xff) / 255.0, ((_backgroundColor >> 8) & 0xff) / 255.0, (_backgroundColor & 0xff) / 255.0 );\r\n\r\n        clearbyVector4(canvas, backgroundColor);\r\n    }\r\n\r\n    public function clearbyVector4(canvas:AbstractCanvas, clearColor:Vec4) {\r\n        canvas.context.clear(clearColor.x, clearColor.y, clearColor.z, clearColor.w);\r\n        canvas.swapBuffers();\r\n        canvas.context.clear(clearColor.x, clearColor.y, clearColor.z, clearColor.w);\r\n    }\r\n\r\n    public function findSceneManager() {\r\n        var roots:NodeSet = NodeSet.createbyNode(target).roots().where(function(node:Node) {\r\n            return node.hasComponent(SceneManager);\r\n        });\r\n\r\n        if (roots.nodes.length > 1) {\r\n            throw (\"Renderer cannot be in two separate scenes.\");\r\n        }\r\n        else if (roots.nodes .length == 1) {\r\n            setSceneManager(cast roots.nodes[0].getComponent(SceneManager));\r\n        }\r\n        else {\r\n            setSceneManager(null);\r\n        }\r\n    }\r\n\r\n    public function setSceneManager(sceneManager:SceneManager) {\r\n        if (sceneManager != _sceneManager) {\r\n            if (sceneManager != null) {\r\n                _sceneManager = sceneManager;\r\n                _renderingBeginSlot = _sceneManager.renderingEnd.connect(sceneManagerRenderingBeginHandler, _priority);\r\n\r\n                initializePostProcessingGeometry();\r\n            }\r\n            else {\r\n                _sceneManager = null;\r\n                _renderingBeginSlot = null;\r\n\r\n                if (_postProcessingGeom != null) {\r\n                    target.data.removeProviderbyName(_postProcessingGeom.data, Surface.GEOMETRY_COLLECTION_NAME);\r\n                    _postProcessingGeom = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public function sceneManagerRenderingBeginHandler(sceneManager:SceneManager, frameId:Int, renderTarget:AbstractTexture) {\r\n        render(sceneManager.assets.context, renderTarget);\r\n    }\r\n\r\n    public function addFilter(filter:AbstractFilter, source:Source) {\r\n        // FIXME\r\n        /*\r\n\t\tif (filter)\r\n\t\t{\r\n\t\t\tauto& filters\t\t\t\t= this->filtersRef(source);\r\n\t\t\tauto& filterChangedSlots\t= this->filterChangedSlotsRef(source);\r\n\r\n\t\t\tif (filterChangedSlots.count(filter) == 0)\r\n\t\t\t{\r\n\t\t\t\tfilters.push(filter);\r\n\t\t\t\tfilterChangedSlots[filter] = filter->changed()->connect([=](AbsFilterPtr, SurfacePtr surface){\r\n\t\t\t\t\tfilterChangedHandler(filter, source, surface);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t*/\r\n\r\n        return (this);\r\n    }\r\n\r\n    public function removeFilter(filter:AbstractFilter, source:Source) {\r\n        // FIXME\r\n        /*if (filter)\r\n\t\t{\r\n\t\t\tauto& filters\t\t\t\t= this->filtersRef(source);\r\n\t\t\tauto& filterChangedSlots\t= this->filterChangedSlotsRef(source);\r\n\r\n\t\t\tauto foundFilterIt = filters.find(filter);\r\n\t\t\tif (foundFilterIt != filters.end())\r\n\t\t\t{\r\n\t\t\t\tfilters.erase(foundFilterIt);\r\n\t\t\t\tfilterChangedSlots.erase(filter);\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n        return (this);\r\n    }\r\n\r\n    public function surfaceLayoutMaskChangedHandler(surface:Surface) {\r\n        // FIXME\r\n        // Use a _toEnable std::unordered_map<Surface::Ptr, bool>\r\n        // to enable or disable a surface once in a frame and perform it after\r\n        // _toCollect is processed.\r\n\r\n        if (checkSurfaceLayout(surface)) {\r\n            enableDrawCalls(surface, true);\r\n\r\n            if (_surfaceToDrawCallIterator.exists(surface) == false) {\r\n                addToCollect(surface);\r\n            }\r\n        }\r\n        else {\r\n            if ((surface.target.layout & BuiltinLayout.HIDDEN) != 0 || (surface.target.layout & BuiltinLayout.INSIDE_FRUSTUM) == 0) {\r\n                enableDrawCalls(surface, false);\r\n            }\r\n            else {\r\n                if (_surfaceToDrawCallIterator.exists(surface)) {\r\n                    removeSurface(surface);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public function watchSurface(surface:Surface) {\r\n        var node = surface.target ;\r\n\r\n        if (_nodeLayoutChangedSlot.exists(node) == false) {\r\n\r\n            _nodeLayoutChangedSlot.set(node, node.layoutChanged.connect(function(n:Node, t:Node) {\r\n                for (surface in t.getComponents(Surface)) {\r\n                    surfaceLayoutMaskChangedHandler(cast surface);\r\n                }\r\n            }));\r\n\r\n        }\r\n\r\n        if (_surfaceLayoutMaskChangedSlot.exists(surface) == false) {\r\n\r\n            _surfaceLayoutMaskChangedSlot.set(surface, surface.layoutMaskChanged.connect(function(surface) {\r\n                surfaceLayoutMaskChangedHandler(cast surface);\r\n            }));\r\n        }\r\n    }\r\n\r\n    public function unwatchSurface(surface:Surface, node:Node,remove:Bool) {\r\n        if (_surfaceLayoutMaskChangedSlot.exists(surface)) {\r\n            _surfaceLayoutMaskChangedSlot.get(surface).dispose();\r\n            _surfaceLayoutMaskChangedSlot.remove(surface);\r\n        }\r\n        //todo        if (!node.hasComponent(Surface)) {\r\n        if (!node.hasComponent(Surface) ||remove) {\r\n            _nodeLayoutChangedSlot.get(node).dispose();\r\n            _nodeLayoutChangedSlot.remove(node);\r\n        }\r\n    }\r\n\r\n    public function checkSurfaceLayout(surface:Surface) {\r\n        return (surface.target.layout & surface.layoutMask & layoutMask) != 0;\r\n    }\r\n\r\n    override function set_layoutMask(value:Layout) {\r\n        super.set_layoutMask(value);\r\n\r\n        // completely reset the draw call pool\r\n        if (target != null) {\r\n            _drawCallPool.clear();\r\n\r\n            rootDescendantRemovedHandler(null, target.root, null);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public function enableDrawCalls(surface:Surface, enabled:Bool) {\r\n\r\n        if (!_surfaceToDrawCallIterator.exists(surface)) {\r\n            return;\r\n        }\r\n\r\n        var drawCallId = _surfaceToDrawCallIterator.get(surface);\r\n\r\n        inline function _enableDrawCalls(drawCalls:Array<DrawCall>) {\r\n            for (drawCall in drawCalls) {\r\n                // FIXME: we don't enable/disable draw calls for deffered passes (ie draw calls\r\n                // with multiple batch IDs) despite it could lead to useless deferred passes.\r\n                // But it would require an (de)activation counter which is \"very unlikely\" to\r\n                // be equal to batchIDs.size.\r\n                if (drawCall.batchIDs.length > 1) {\r\n                    continue;\r\n                }\r\n\r\n                if (drawCall.batchIDs[0] == drawCallId) {\r\n                    drawCall.enabled = (enabled);\r\n                }\r\n            }\r\n        }\r\n        for (priorityToDrawCalls in _drawCallPool.drawCalls) {\r\n            _enableDrawCalls(priorityToDrawCalls.first);\r\n            _enableDrawCalls(priorityToDrawCalls.second);\r\n        }\r\n    }\r\n\r\n    public function changeEffectOrTechnique(effect:Effect, technique:String) {\r\n        if (effect != _effect || technique != _effectTechnique) {\r\n            _effect = effect;\r\n            _effectTechnique = technique;\r\n\r\n            reset();\r\n\r\n            rootDescendantAddedHandler(target.root, target.root, target.parent);\r\n        }\r\n    }\r\n\r\n}\r\n","package minko.component;\r\nimport minko.data.Provider;\r\nimport minko.file.AssetLibrary;\r\nimport minko.render.AbstractTexture;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal3;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.component.SceneManager\")\r\nclass SceneManager extends AbstractComponent {\r\n    private var _frameId:Int;\r\n    private var _time:Float;\r\n    private var _assets:AssetLibrary;\r\n    private var _frameBegin:Signal3<SceneManager, Float, Float>;\r\n    private var _frameEnd:Signal3<SceneManager, Float, Float>;\r\n    private var _cullBegin:Signal<SceneManager>;\r\n    private var _cullEnd:Signal<SceneManager>;\r\n    private var _renderBegin:Signal3<SceneManager, Int, AbstractTexture>;\r\n    private var _renderEnd:Signal3<SceneManager, Int, AbstractTexture>;\r\n\r\n    private var _data:Provider;\r\n    private var _addedSlot:SignalSlot3<Node, Node, Node>;\r\n\r\n    private var _canvas:AbstractCanvas;\r\n\r\n    public static function create(canvas:AbstractCanvas):SceneManager {\r\n        var sm = new SceneManager(canvas);\r\n        return sm;\r\n    }\r\n\r\n    public var canvas(get, null):AbstractCanvas;\r\n\r\n    function get_canvas() {\r\n        return _canvas;\r\n    }\r\n    public var frameId(get, null):Int;\r\n\r\n    function get_frameId() {\r\n        return _frameId;\r\n    }\r\n    public var assets(get, null):AssetLibrary;\r\n\r\n    function get_assets() {\r\n        return _assets;\r\n    }\r\n\r\n    public var frameBegin(get, null):Signal3<SceneManager, Float, Float>;\r\n    public var frameEnd(get, null):Signal3<SceneManager, Float, Float>;\r\n\r\n    function get_frameBegin() {\r\n        return _frameBegin;\r\n    }\r\n\r\n    function get_frameEnd() {\r\n        return _frameEnd;\r\n    }\r\n    public var cullingBegin(get, null):Signal<SceneManager>;\r\n    public var cullingEnd(get, null):Signal<SceneManager>;\r\n\r\n    function get_cullingBegin() {\r\n        return _cullBegin;\r\n    }\r\n\r\n    function get_cullingEnd() {\r\n        return _cullEnd;\r\n    }\r\n\r\n    public var renderingBegin(get, null):Signal3<SceneManager, Int, AbstractTexture>;\r\n    public var renderingEnd(get, null):Signal3<SceneManager, Int, AbstractTexture>;\r\n\r\n    function get_renderingBegin() {\r\n        return _renderBegin;\r\n    }\r\n\r\n    function get_renderingEnd() {\r\n        return _renderEnd;\r\n    }\r\n\r\n    public var time(get, null):Float;\r\n\r\n    function get_time() {\r\n        return _time;\r\n    }\r\n\r\n\r\n    public function new(canvas:AbstractCanvas) {\r\n        super();\r\n        this._canvas = canvas;\r\n        this._frameId = 0;\r\n        this._time = 0.0;\r\n        this._assets = AssetLibrary.create(canvas.context);\r\n        this._frameBegin = new Signal3<SceneManager, Float, Float>();\r\n        this._frameEnd = new Signal3<SceneManager, Float, Float>();\r\n        this._cullBegin = new Signal<SceneManager>();\r\n        this._cullEnd = new Signal<SceneManager>();\r\n        this._renderBegin = new Signal3<SceneManager, Int, AbstractTexture>();\r\n        this._renderEnd = new Signal3<SceneManager, Int, AbstractTexture>();\r\n        this._data = Provider.create();\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        if (target.root != target) {\r\n            throw (\"SceneManager must be on the root node only.\");\r\n        }\r\n        if (target.getComponents(SceneManager).length > 1) {\r\n            throw (\"The same root node cannot have more than one SceneManager.\");\r\n        }\r\n\r\n        target.data.addProvider(_data);\r\n        target.data.addProvider(_canvas.data);\r\n\r\n        _addedSlot = target.added.connect(addedHandler);\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        _addedSlot = null;\r\n\r\n        target.data.removeProvider(_data);\r\n        target.data.removeProvider(_canvas.data);\r\n    }\r\n\r\n    public function addedHandler(node:Node, target:Node, ancestor:Node) {\r\n        if (target == this.target) {\r\n            throw (\"SceneManager must be on the root node only.\");\r\n        }\r\n\r\n        //        if (!target.root.hasComponent(RootTransform)) {\r\n//            target.root.addComponent(RootTransform.create());\r\n//        }\r\n    }\r\n\r\n    public function nextFrame(time:Float, deltaTime:Float, renderTarget:AbstractTexture = null) {\r\n\r\n        _time = time;\r\n        _data.set(\"time\", _time);\r\n\r\n        _frameBegin.execute((this), time, deltaTime);\r\n        _cullBegin.execute((this));\r\n        _cullEnd.execute((this));\r\n        _renderBegin.execute((this), _frameId, renderTarget);\r\n        _renderEnd.execute((this), _frameId, renderTarget);\r\n        _frameEnd.execute((this), time, deltaTime);\r\n\r\n        ++_frameId;\r\n    }\r\n\r\n\r\n}\r\n","package minko.component;\r\n\r\n\r\nimport minko.data.Provider;\r\nimport minko.scene.Node;\r\n@:expose(\"minko.component.Technique\")\r\n@:enum abstract Technique(Int) from Int to Int{\r\n\r\n    var DEFAULT = 0;\r\n    var ESM = 1;\r\n    var PCF = 2;\r\n    var PCF_POISSON = 3;\r\n}\r\n@:expose(\"minko.component.ShadowMappingTechnique\")\r\nclass ShadowMappingTechnique extends AbstractComponent {\r\n\r\n    private var _technique:Int;\r\n    private var _data:Provider;\r\n\r\n    public static function create(technique:Int) {\r\n        return new ShadowMappingTechnique(technique);\r\n    }\r\n\r\n    public function new(technique:Int) {\r\n        super();\r\n        this._technique = technique;\r\n        this._data = Provider.create();\r\n        _data.set(\"shadowMappingTechnique\", technique);\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        target.data.addProvider(_data);\r\n    }\r\n\r\n}\r\n","package minko.component;\r\nimport glm.Mat3;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport haxe.ds.ObjectMap;\r\nimport minko.geometry.Geometry;\r\nimport minko.geometry.Skin;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.VertexAttribute;\r\nimport minko.render.VertexBuffer;\r\nimport minko.scene.Node;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.component.SkinningMethod\")\r\n@:enum abstract SkinningMethod(Int) from Int to Int\r\n{\r\n    var SOFTWARE = 0;\r\n    var HARDWARE = 1;\r\n}\r\n@:expose(\"minko.component.Skinning\")\r\nclass Skinning extends AbstractAnimation {\r\n\r\n    static public var PNAME_NUM_BONES = \"numBones\";\r\n    static public var PNAME_BONE_MATRICES = \"boneMatrices\";\r\n    static public var ATTRNAME_BONE_IDS_A = \"boneIdsA\";\r\n    static public var ATTRNAME_BONE_IDS_B = \"boneIdsB\";\r\n    static public var ATTRNAME_BONE_WEIGHTS_A = \"boneWeightsA\";\r\n    static public var ATTRNAME_BONE_WEIGHTS_B = \"boneWeightsB\";\r\n    static public var MAX_NUM_BONES_PER_VERTEX = 8;\r\n\r\n    static private var ATTRNAME_POSITION = \"position\";\r\n    static private var ATTRNAME_NORMAL = \"normal\";\r\n\r\n\r\n    private var _skin:Skin;\r\n    private var _context:AbstractContext;\r\n    private var _method:SkinningMethod;\r\n\r\n    private var _skeletonRoot:Node;\r\n    private var _moveTargetBelowRoot:Bool;\r\n\r\n    private var _boneVertexBuffer:VertexBuffer ; // vertex buffer storing vertex attributes\r\n\r\n    private var _targetGeometry:ObjectMap<Node, Geometry>;\r\n    private var _targetInputPositions:ObjectMap<Node, Array<Float>>; // only for software skinning\r\n    private var _targetInputNormals:ObjectMap<Node, Array<Float>>; // only for software skinning\r\n\r\n    public static function create(skin, method, context, skeletonRoot, moveTargetBelowRoot = false, isLooping = true):Skinning {\r\n        var ptr = new Skinning(skin, method, context, skeletonRoot, moveTargetBelowRoot, isLooping);\r\n\r\n        ptr.initialize();\r\n\r\n        return ptr;\r\n    }\r\n\r\n    override public function clone(option:CloneOption) {\r\n        var skin:Skinning = create(null, null, null, null).copyFromSkinning(this, option);\r\n\r\n        skin.initialize();\r\n\r\n        return skin;\r\n    }\r\n    public var skin(get, null):Skin;\r\n\r\n    function get_skin() {\r\n        return _skin;\r\n    }\r\n\r\n    override public function initialize() {\r\n        super.initialize();\r\n\r\n        if (_skin == null) {\r\n            throw (\"skin\");\r\n        }\r\n\r\n        if (_context == null) {\r\n            throw (\"context\");\r\n        }\r\n\r\n        if (_method != SkinningMethod.SOFTWARE && _skin.maxNumVertexBones > MAX_NUM_BONES_PER_VERTEX) {\r\n            var error_msg = \"The maximum number of bones per vertex gets too high (\" + _skin.maxNumVertexBones + \") to propose hardware skinning (max allowed = \" + MAX_NUM_BONES_PER_VERTEX + \")\" ;\r\n\r\n            _method = SkinningMethod.SOFTWARE;\r\n       }\r\n       // _method = SkinningMethod.SOFTWARE;\r\n        _boneVertexBuffer = _method == SkinningMethod.SOFTWARE ? null : createVertexBufferForBones();\r\n\r\n        _maxTime = _skin.duration;\r\n\r\n        setPlaybackWindow(0, _maxTime);\r\n        seek(0);\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        super.targetAdded(target);\r\n\r\n        // FIXME: in certain circumstances (deserialization from minko studio)\r\n        // it may be necessary to move the target directly below the skeleton root\r\n        // for which the skinning matrices have been computed.\r\n\r\n        if (_skeletonRoot == null || !_moveTargetBelowRoot)\r\n            return;\r\n\r\n        if (target.parent != null)\r\n            target.parent.removeChild(target);\r\n\r\n        _skeletonRoot.addChild(target);\r\n\r\n        if (target.hasComponent(Transform)) {\r\n            var transform:Transform = cast target.getComponent(Transform);\r\n            transform.matrix = Mat4.identity(new Mat4());\r\n\r\n        }\r\n\r\n        if (target.hasComponent(MasterAnimation)) {\r\n            var masterAnimation:MasterAnimation = cast target.getComponent(MasterAnimation);\r\n            masterAnimation.initAnimations();\r\n        }\r\n    }\r\n\r\n    public function copyFromSkinning(skinning:Skinning, option:CloneOption) {\r\n        //: base(skinning, option)\r\n        copyFrom(skinning, option);\r\n        this._skin = new Skin();\r\n        this._context = skinning._context;\r\n        this._method = skinning._method;\r\n        this._skeletonRoot = skinning._skeletonRoot;\r\n        this._moveTargetBelowRoot = skinning._moveTargetBelowRoot;\r\n        this._boneVertexBuffer = null;\r\n        this._targetGeometry = new ObjectMap<Node, Geometry>();\r\n        this._targetInputPositions = new ObjectMap<Node, Array<Float>>();\r\n        this._targetInputNormals = new ObjectMap<Node, Array<Float>>();\r\n        this._skin = skinning._skin.clone();\r\n\r\n        var targetGeometry = skinning._targetGeometry;\r\n\r\n        for (it in targetGeometry.keys()) {\r\n            _targetGeometry.set(it, targetGeometry.get(it));\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    override public function addedHandler(node:Node, target:Node, parent:Node) {\r\n        super.addedHandler(node, target, parent);\r\n\r\n        if (_skin.duration == 0)\r\n            return; // incorrect animation\r\n\r\n        // FIXME\r\n        if (node.getComponents(Surface).length > 1)\r\n            throw \"Warning: The skinning component is not intended to work on node with several surfaces. Attempts to apply skinning to first surface.\" ;\r\n\r\n        if (node.hasComponent(Surface)) {\r\n            var geometry:Geometry = cast(node.getComponent(Surface), Surface).geometry;\r\n\r\n            if (geometry.hasVertexAttribute(ATTRNAME_POSITION)\r\n            && geometry.vertexBuffer(ATTRNAME_POSITION).numVertices == _skin.numVertices\r\n            && !geometry.hasVertexBuffer(_boneVertexBuffer)) {\r\n                _targetGeometry.set(node, geometry);\r\n                _targetInputPositions.set(node, geometry.vertexBuffer(ATTRNAME_POSITION).data);\r\n\r\n                if (geometry.hasVertexAttribute(ATTRNAME_NORMAL)\r\n                && geometry.vertexBuffer(ATTRNAME_NORMAL).numVertices == _skin.numVertices)\r\n                    _targetInputNormals.set(node, geometry.vertexBuffer(ATTRNAME_NORMAL).data);\r\n\r\n                if (_method != SkinningMethod.SOFTWARE) {\r\n                    geometry.addVertexBuffer(_boneVertexBuffer);\r\n\r\n                    geometry.data.set(PNAME_BONE_MATRICES, []);\r\n                    geometry.data.set(PNAME_NUM_BONES, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override public function removedHandler(node:Node, target:Node, parent:Node) {\r\n        super.removedHandler(node, target, parent);\r\n\r\n        if (_targetGeometry.exists(target)) {\r\n            var geometry = _targetGeometry.get(target);\r\n\r\n            if (_method != SkinningMethod.SOFTWARE) {\r\n                geometry.removeVertexBuffer(_boneVertexBuffer);\r\n                geometry.data.unset(PNAME_BONE_MATRICES);\r\n                geometry.data.unset(PNAME_NUM_BONES);\r\n            }\r\n\r\n            _targetGeometry.remove(target);\r\n        }\r\n        if (_targetInputPositions.exists(target))\r\n            _targetInputPositions.remove(target);\r\n        if (_targetInputNormals.exists(target))\r\n            _targetInputNormals.remove(target);\r\n    }\r\n\r\n    override public function update() {\r\n        var frameId = _skin.getFrameId(_currentTime);\r\n\r\n        updateFrame(frameId, target);\r\n    }\r\n\r\n    public function updateFrame(frameId:Int, target:Node) {\r\n        if (_targetGeometry.exists(target) == false)\r\n            return;\r\n\r\n        // assert(frameId < _skin->numFrames());\r\n\r\n        var geometry:Geometry = _targetGeometry.get(target);\r\n        var boneMatrices:Array<Mat4> = _skin.getMatrices(frameId);\r\n\r\n        if (_method == SkinningMethod.HARDWARE) {\r\n            if (!geometry.data.hasProperty(PNAME_NUM_BONES) || geometry.data.get(PNAME_NUM_BONES) != _skin.numBones){\r\n                geometry.data.set(PNAME_NUM_BONES, _skin.numBones);\r\n            }\r\n            geometry.data.set(PNAME_BONE_MATRICES, boneMatrices);\r\n        }\r\n        else\r\n            performSoftwareSkinningFrame(target, boneMatrices);\r\n    }\r\n\r\n    public function performSoftwareSkinningFrame(target:Node, boneMatrices:Array<Mat4>) {\r\n#if  DEBUG_SKINNING\r\n\tassert(target && _targetGeometry.count(target) > 0 && _targetInputPositions.count(target) > 0);\r\n#end\r\n        //DEBUG_SKINNING\r\n\r\n        var geometry = _targetGeometry.get(target);\r\n\r\n        // transform positions\r\n        var xyzBuffer:VertexBuffer = geometry.vertexBuffer(ATTRNAME_POSITION);\r\n        var xyzAttr = xyzBuffer.attribute(ATTRNAME_POSITION);\r\n\r\n        performSoftwareSkinning(xyzAttr, xyzBuffer, _targetInputPositions.get(target), boneMatrices, false);\r\n\r\n        // transform normals\r\n        if (geometry.hasVertexAttribute(ATTRNAME_NORMAL) && _targetInputNormals.exists(target)) {\r\n            var normalBuffer:VertexBuffer = geometry.vertexBuffer(ATTRNAME_NORMAL);\r\n            var normalAttr = normalBuffer.attribute(ATTRNAME_NORMAL);\r\n\r\n            performSoftwareSkinning(normalAttr, normalBuffer, _targetInputNormals.get(target), boneMatrices, true);\r\n        }\r\n    }\r\n\r\n    private function performSoftwareSkinning(attr:VertexAttribute, vertexBuffer:VertexBuffer, inputData:Array<Float>, boneMatrices:Array<Mat4>, doDeltaTransform:Bool) {\r\n#if DEBUG_SKINNING\r\n\t\t\t\tDebug.Assert(vertexBuffer != null && vertexBuffer.data().size() == inputData.Count);\r\n\t\t\t\tDebug.Assert(attr != null && std::get<1>(*attr) == 3);\r\n\t\t\t\tDebug.Assert(boneMatrices.Count == (_skin.numBones() << 4));\r\n#end\r\n\r\n        var vertexSize = vertexBuffer.vertexSize;\r\n        var outputData:Array<Float> = vertexBuffer.data;\r\n        var numVertices = Math.floor(outputData.length / vertexSize);\r\n\r\n#if DEBUG_SKINNING\r\n\t\t\t\tDebug.Assert(numVertices == _skin.numVertices());\r\n#end\r\n\r\n        var index:Int = attr.offset;\r\n        for (vId in 0 ...numVertices) {\r\n            var v1:Vec4 = new Vec4(inputData[index], inputData[index + 1], inputData[index + 2], 1.0);\r\n            var v2:Vec4 = new Vec4(0.0);\r\n\r\n            var numVertexBones:Int = _skin.numVertexBones(vId);\r\n            for (j in 0...numVertexBones) {\r\n                var boneId = 0;\r\n                var boneWeight = 0.0;\r\n\r\n                var t:minko.Tuple<Int,Float>=_skin.vertexBoneData(vId, j, boneId, boneWeight);\r\n                boneId=t.first;\r\n                boneWeight=t.second;\r\n\r\n                var boneMatrix:Mat4 = (boneMatrices[boneId]);\r\n\r\n                //math\r\n             //   if (!doDeltaTransform) {\r\n                //  v2 += boneWeight * (boneMatrix * v1);\r\n                    v2 = (boneMatrix * v1)*boneWeight;\r\n//                }\r\n//                else {\r\n                   // v2 += math::vec4(boneWeight * (math::mat3(boneMatrix)) * math::vec3(v1), 0.f);\r\n               // }\r\n            }\r\n\r\n            outputData[index] = v2.x;\r\n            outputData[index + 1] = v2.y;\r\n            outputData[index + 2] = v2.z;\r\n\r\n            index += vertexSize;\r\n        }\r\n\r\n        vertexBuffer.upload();\r\n    }\r\n\r\n    private function createVertexBufferForBones() {\r\n        var vertexSize = 16; // [bId0 bId1 bId2 bId3] [bId4 bId5 bId6 bId7] [bWgt0 bWgt1 bWgt2 bWgt3] [bWgt4 bWgt5 bWgt6 bWgt7]\r\n\r\n//Debug.Assert(_skin.maxNumVertexBones() <= MAX_NUM_BONES_PER_VERTEX);\r\n\r\n        var numVertices = _skin.numVertices;\r\n        var vertexData:Array<Float> = [for (i in 0...numVertices * vertexSize) 0.0];\r\n\r\n        var index = 0;\r\n        for (vId in 0... numVertices) {\r\n            var numVertexBones = _skin.numVertexBones(vId);\r\n\r\n            var j = 0;\r\n            while (j < numVertexBones && j < (vertexSize >> 2)) {\r\n                vertexData[index + j] = _skin.vertexBoneId(vId, j);\r\n                ++j;\r\n            }\r\n            index += (vertexSize >> 1);\r\n\r\n            j = 0;\r\n            while (j < numVertexBones && j < (vertexSize >> 2)) {\r\n                vertexData[index + j] = _skin.vertexBoneWeight(vId, j);\r\n                ++j;\r\n            }\r\n            index += (vertexSize >> 1);\r\n        }\r\n\r\n#if DEBUG_SKINNING\r\n\t\t\t\tDebug.Assert(index == vertexData.Count);\r\n#end\r\n\r\n        var vertexBuffer:VertexBuffer = VertexBuffer.createbyData(_context, vertexData);\r\n\r\n        vertexBuffer.addAttribute(ATTRNAME_BONE_IDS_A, 4, 0);\r\n        vertexBuffer.addAttribute(ATTRNAME_BONE_IDS_B, 4, 4);\r\n        vertexBuffer.addAttribute(ATTRNAME_BONE_WEIGHTS_A, 4, 8);\r\n        vertexBuffer.addAttribute(ATTRNAME_BONE_WEIGHTS_B, 4, 12);\r\n\r\n        return vertexBuffer;\r\n    }\r\n\r\n    override public function rebindDependencies(componentsMap:ObjectMap<AbstractComponent, AbstractComponent>, nodeMap:ObjectMap<Node, Node>, option:Int) {\r\n\r\n        _skeletonRoot = nodeMap.get(_skeletonRoot);\r\n        var oldSurface:Surface = null;\r\n        for (node in _targetGeometry.keys()) {\r\n            oldSurface = cast node.getComponent(Surface);\r\n            break;\r\n        }\r\n        var oldGeometry:Geometry = oldSurface.geometry;\r\n\r\n        var componentsMapSurface:Surface = cast(componentsMap.get(oldSurface), Surface);\r\n        componentsMapSurface.geometry = oldGeometry.clone();\r\n    }\r\n\r\n    public function new(skin:Skin,\r\n                        method:SkinningMethod,\r\n                        context:AbstractContext,\r\n                        skeletonRoot:Node,\r\n                        moveTargetBelowRoot:Bool,\r\n                        isLooping:Bool) {\r\n        super(isLooping);\r\n        _skin = (skin);\r\n        _context = (context);\r\n        _method = method;\r\n        _skeletonRoot = (skeletonRoot);\r\n        _moveTargetBelowRoot = (moveTargetBelowRoot);\r\n        _boneVertexBuffer = (null);\r\n        _targetGeometry = new ObjectMap<Node, Geometry>();\r\n        _targetInputPositions = new ObjectMap<Node, Array<Float>>();\r\n        _targetInputNormals = new ObjectMap<Node, Array<Float>>();\r\n\r\n    }\r\n}\r\n","package minko.component;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.component.SpotLight\")\r\nclass SpotLight extends AbstractDiscreteLight {\r\n    public static inline var PI = 3.141592653589793 ;\r\n\r\n    public static function create(diffuse = 1.0, specular = 1.0, innerAngleRadians = PI * 0.20, outerAngleRadians = PI * 0.25, attenuationConstant = -1.0, attenuationLinear = -1.0, attenuationQuadratic = -1.0):SpotLight {\r\n        return new SpotLight(diffuse, specular, innerAngleRadians, outerAngleRadians, attenuationConstant, attenuationLinear, attenuationQuadratic);\r\n    }\r\n\r\n    override public function clone(option:CloneOption) {\r\n        var light = create().copyFrom(this, option);\r\n\r\n        return light;\r\n    }\r\n\r\n    public var innerConeAngle(get, set):Float;\r\n\r\n    function get_innerConeAngle() {\r\n        return Math.acos(data.get(\"cosInnerConeAngle\"));\r\n    }\r\n\r\n    function set_innerConeAngle(radians) {\r\n        data.set(\"cosInnerConeAngle\", Math.cos(Math.max(0.0, Math.min(0.5 * Math.PI, radians))));\r\n\r\n        return radians;\r\n    }\r\n\r\n    public var outerConeAngle(get, set):Float;\r\n\r\n    function get_outerConeAngle() {\r\n        return Math.acos(data.get(\"cosOuterConeAngle\"));\r\n    }\r\n\r\n    function set_outerConeAngle(radians) {\r\n        data.set(\"cosOuterConeAngle\", Math.cos(Math.max(0.0, Math.min(0.5 * Math.PI, radians))));\r\n\r\n        return radians;\r\n    }\r\n\r\n    public var attenuationEnabled(get, null):Bool;\r\n\r\n    function get_attenuationEnabled() {\r\n        var coef = attenuationCoefficients;\r\n\r\n        return !(coef.x < 0.0 || coef.y < 0.0 || coef.z < 0.0);\r\n    }\r\n\r\n    public var attenuationCoefficients(get, set):Vec3;\r\n\r\n    function get_attenuationCoefficients() {\r\n        return data.get(\"attenuationCoeffs\");\r\n    }\r\n\r\n    public function setAttenuationCoefficients(constant, linear, quadratic) {\r\n        return attenuationCoefficients = (new Vec3(constant, linear, quadratic));\r\n    }\r\n\r\n    function set_attenuationCoefficients(value) {\r\n        data.set(\"attenuationCoeffs\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var position(get, null):Vec3;\r\n\r\n    function get_position() {\r\n        return data.get(\"position\");\r\n    }\r\n\r\n    override public function updateModelToWorldMatrix(modelToWorld:Mat4) {\r\n\r\n        var tmp2:Vec3 = Vec3.normalize(MathUtil.mat4_mat3(modelToWorld) * new Vec3(0.0, 0.0, -1.0), new Vec3());\r\n        data.set(\"position\", MathUtil.vec4_vec3(modelToWorld * (new Vec4(0.0, 0.0, 0.0, 1.0))))\r\n        .set(\"direction\", tmp2);\r\n    }\r\n\r\n    public function new(diffuse, specular, innerAngleRadians, outerAngleRadians, attenuationConstant, attenuationLinear, attenuationQuadratic) {\r\n        super(\"spotLight\", diffuse, specular);\r\n        updateModelToWorldMatrix(Mat4.identity(new Mat4()));\r\n\r\n        attenuationCoefficients = (new Vec3(attenuationConstant, attenuationLinear, attenuationQuadratic));\r\n        innerConeAngle = (innerAngleRadians);\r\n        outerConeAngle = (outerAngleRadians);\r\n    }\r\n\r\n    private function copyFrom(spotlight:SpotLight, option:CloneOption) {\r\n        //: base(\"spotLights\", spotlight.diffuse(), spotlight.specular())\r\n        data.set(\"diffuse\", spotlight.diffuse).set(\"specular\", spotlight.specular);\r\n        updateModelToWorldMatrix(Mat4.identity(new Mat4()));\r\n\r\n        var test = spotlight.attenuationCoefficients;\r\n\r\n        data.set(\"attenuationCoeffs\", spotlight.attenuationCoefficients);\r\n        data.set(\"cosInnerConeAngle\", spotlight.innerConeAngle);\r\n        data.set(\"cosOuterConeAngle\", spotlight.outerConeAngle);\r\n        return this;\r\n    }\r\n\r\n}\r\n","package minko.component;\r\nimport minko.data.Provider;\r\nimport minko.geometry.Geometry;\r\nimport minko.material.Material;\r\nimport minko.render.Effect;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.component.Surface\")\r\nclass Surface extends AbstractComponent {\r\n\r\n    public static inline var SURFACE_COLLECTION_NAME = \"surface\";\r\n    public static inline var GEOMETRY_COLLECTION_NAME = \"geometry\";\r\n    public static inline var MATERIAL_COLLECTION_NAME = \"material\";\r\n    public static inline var EFFECT_COLLECTION_NAME = \"effect\";\r\n\r\n    private var _name:String;\r\n\r\n    private var _geometry:Geometry;\r\n    private var _material:Material;\r\n    private var _effect:Effect;\r\n    private var _technique:String;\r\n    private var _provider:Provider;\r\n\r\n    private var _geometryChanged:Signal<Surface>;\r\n    private var _materialChanged:Signal<Surface>;\r\n    private var _effectChanged:Signal<Surface>;\r\n\r\n    private var _bubbleUpSlot:SignalSlot3<Node, Node, AbstractComponent>;\r\n\r\n    override public function dispose() {\r\n        super.dispose();\r\n        _geometryChanged.dispose();\r\n        _materialChanged.dispose();\r\n        _effectChanged.dispose();\r\n\r\n        _geometryChanged = null;\r\n        _materialChanged =null;\r\n        _effectChanged = null;\r\n\r\n        _provider.dispose();\r\n        _provider=null;\r\n         _geometry=null;\r\n       _material=null;\r\n        _effect=null;\r\n        _technique=null;\r\n    }\r\n\r\n\r\n    public function new(name, geometry, material, effect, technique) {\r\n        super();\r\n        this._name = name;\r\n        this._geometry = geometry;\r\n        this._material = material;\r\n        this._effect = effect;\r\n        this._provider = Provider.create();\r\n        this._technique = technique;\r\n        if (_effect != null && !_effect.hasTechnique(_technique)) {\r\n            var message = \"Effect \" + _effect.name + \" does not provide a '\" + _technique + \"' technique.\";\r\n\r\n            throw (message);\r\n        }\r\n\r\n        _geometryChanged = new Signal<Surface>();\r\n        _materialChanged = new Signal<Surface>();\r\n        _effectChanged = new Signal<Surface>();\r\n\r\n        initializeIndexRange(geometry);\r\n    }\r\n\r\n    public static function create(geometry:Geometry, material:Material, effect:Effect = null, technique = \"default\", name = \"\"):Surface {\r\n        return new Surface(name, geometry, material, effect, technique);\r\n    }\r\n\r\n\r\n    // TODO #Clone\r\n    /*\r\n\t\t\tAbstractComponent::Ptr\r\n\t\t\tclone(const CloneOption& option);\r\n\t\t\t*/\r\n\r\n\r\n    override function get_uuid() {\r\n        return _provider.uuid;\r\n    }\r\n\r\n    public var name(get, set):String;\r\n\r\n    function get_name() {\r\n        return _name;\r\n    }\r\n\r\n    function set_name(value) {\r\n        _name = value;\r\n        return value;\r\n    }\r\n\r\n    public var data(get, null):Provider;\r\n\r\n    function get_data() {\r\n        return _provider;\r\n    }\r\n    public var geometry(get, set):Geometry;\r\n\r\n    function get_geometry() {\r\n        return _geometry;\r\n    }\r\n\r\n    public var firstIndex(null, set):Int;\r\n\r\n    function set_firstIndex(index) {\r\n        data.set(\"firstIndex\", index);\r\n        return index;\r\n    }\r\n    public var numIndices(null, set):Int;\r\n\r\n    function set_numIndices(numIndices) {\r\n        data.set(\"numIndices\", numIndices);\r\n        return numIndices;\r\n    }\r\n\r\n    public var material(get, set):Material;\r\n\r\n    function get_material() {\r\n        return _material;\r\n    }\r\n\r\n\r\n    public var effect(get, set):Effect;\r\n\r\n    function set_effect(v) {\r\n        _effect = v;\r\n        return v;\r\n    }\r\n\r\n    function get_effect() {\r\n        return _effect;\r\n    }\r\n    public var technique(get, null):String;\r\n\r\n    function get_technique() {\r\n        return _technique;\r\n    }\r\n\r\n\r\n    public var geometryChanged(get, null):Signal<Surface>;\r\n\r\n    function get_geometryChanged() {\r\n        return _geometryChanged;\r\n    }\r\n    public var materialChanged(get, null):Signal<Surface>;\r\n\r\n    function get_materialChanged() {\r\n        return _materialChanged;\r\n    }\r\n    public var effectChanged(get, null):Signal<Surface>;\r\n\r\n    function get_effectChanged() {\r\n        return _effectChanged;\r\n    }\r\n\r\n\r\n    override public function targetAdded(target:Node) {\r\n        var targetData = target.data ;\r\n\r\n        targetData.addProviderbyName(_provider, Surface.SURFACE_COLLECTION_NAME);\r\n        targetData.addProviderbyName(_material.data, Surface.MATERIAL_COLLECTION_NAME);\r\n        targetData.addProviderbyName(_geometry.data, Surface.GEOMETRY_COLLECTION_NAME);\r\n\r\n        if (_effect != null) {\r\n            targetData.addProviderbyName(_effect.data, Surface.EFFECT_COLLECTION_NAME);\r\n        }\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        // Problem: if we remove the providers right away, all the other components and especially the Renderer and its\r\n        // DrawCallPool will be \"notified\" by Store::propertyAdded/Removed signals. This will trigger a lot of useless\r\n        // code since, as the Surface is actually being removed, all the corresponding DrawCalls will be removed from\r\n        // the pool anyway.\r\n        // Solution: we wait for the componentRemoved() signal on the target's root. That's the same signal the\r\n        // Renderer is listening too, but with a higher priority. Thus, when we will remove the providers the corresponding\r\n        // signals will be disconnected already.\r\n\r\n        _bubbleUpSlot = target.root.componentRemoved.connect(function(n:Node, t:Node, c:AbstractComponent) {\r\n            _bubbleUpSlot.dispose();\r\n            _bubbleUpSlot = null;\r\n\r\n            var targetData = target.data ;\r\n\r\n            targetData.removeProviderbyName(_provider, Surface.SURFACE_COLLECTION_NAME);\r\n            targetData.removeProviderbyName(_material.data, Surface.MATERIAL_COLLECTION_NAME);\r\n            targetData.removeProviderbyName(_geometry.data, Surface.GEOMETRY_COLLECTION_NAME);\r\n\r\n            if (_effect != null) {\r\n                targetData.removeProviderbyName(_effect.data, Surface.EFFECT_COLLECTION_NAME);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    function set_geometry(value) {\r\n        if (value == _geometry) {\r\n            return value;\r\n        }\r\n\r\n        var t = target ;\r\n\r\n        if (t != null) {\r\n            t.data.removeProviderbyName(_geometry.data, Surface.GEOMETRY_COLLECTION_NAME);\r\n        }\r\n\r\n        _geometry = value;\r\n\r\n        if (t != null) {\r\n            t.data.addProviderbyName(_geometry.data, Surface.GEOMETRY_COLLECTION_NAME);\r\n        }\r\n\r\n        initializeIndexRange(value);\r\n\r\n        _geometryChanged.execute((this));\r\n        return value;\r\n    }\r\n\r\n    function set_material(value) {\r\n        if (value == _material) {\r\n            return value;\r\n        }\r\n\r\n        var t = target;\r\n\r\n        if (t != null) {\r\n            t.data.removeProviderbyName(_material.data, Surface.MATERIAL_COLLECTION_NAME);\r\n        }\r\n\r\n        _material = value;\r\n\r\n        if (t != null) {\r\n            t.data.addProviderbyName(_material.data, Surface.MATERIAL_COLLECTION_NAME);\r\n        }\r\n\r\n        _materialChanged.execute((this));\r\n        return value;\r\n    }\r\n\r\n\r\n    public function setEffectAndTechnique(effect:Effect, technique:String) {\r\n        if (effect == null) {\r\n            throw (\"effect\");\r\n        }\r\n        if (!effect.hasTechnique(technique)) {\r\n            throw (\"The effect \\\"\" + effect.name + \"\\\" does not provide the \\\"\" + _technique + \"\\\" technique.\");\r\n        }\r\n\r\n        var changed = false;\r\n\r\n        if (effect != _effect) {\r\n            changed = true;\r\n\r\n            if (target != null) {\r\n                if (_effect != null) {\r\n                    target.data.removeProviderbyName(_effect.data, Surface.EFFECT_COLLECTION_NAME);\r\n                }\r\n\r\n                if (effect != null) {\r\n                    target.data.addProviderbyName(effect.data, Surface.EFFECT_COLLECTION_NAME);\r\n                }\r\n            }\r\n\r\n            _effect = effect;\r\n        }\r\n\r\n        if (technique != _technique) {\r\n            changed = true;\r\n            _technique = technique;\r\n            _provider.set(\"technique\", technique);\r\n        }\r\n\r\n        if (changed) {\r\n            _effectChanged.execute((this));\r\n        }\r\n    }\r\n\r\n    public function initializeIndexRange(geometry:Geometry) {\r\n        firstIndex = (0);\r\n        numIndices = (geometry.data.hasProperty(\"numIndices\") ? geometry.data.get(\"numIndices\") : 0);\r\n    }\r\n}\r\n","package minko.component;\r\nimport minko.data.UnsafePointer;\r\nimport minko.data.UnsafePointer;\r\nimport glm.Mat4;\r\nimport haxe.ds.ObjectMap;\r\nimport minko.component.Transform.NodeTransformCacheEntry;\r\nimport minko.data.Provider;\r\nimport minko.data.Store;\r\nimport minko.render.AbstractTexture;\r\nimport minko.scene.Node;\r\nimport minko.scene.NodeSet;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.component.RootTransform\")\r\nclass RootTransform extends AbstractComponent {\r\n    public static function create() {\r\n        return new RootTransform();\r\n    }\r\n\r\n\r\n    override public function dispose() {\r\n        _nodeTransformCache = null;\r\n        _nodeToId = null;\r\n        for(_n in _nodeToPropertyChangedSlot.keys()){\r\n            _nodeToPropertyChangedSlot.get(_n).dispose();\r\n            _n.dispose();\r\n        }\r\n\r\n        _nodeToPropertyChangedSlot=null;\r\n        for(_t in _targetSlots)\r\n              _t.dispose();\r\n        _targetSlots = null;\r\n        if(_renderingBeginSlot!=null)_renderingBeginSlot.dispose();\r\n        _renderingBeginSlot = null;\r\n        _nodes=null;\r\n        _toAdd=null;\r\n        _toRemove=null;\r\n        super.dispose();\r\n    }\r\n\r\n    public function setDirty(target:Node, d:Bool) {\r\n\r\n        if (!_invalidLists)\r\n            _nodeTransformCache[_nodeToId.get(target)]._dirty = true;\r\n\r\n    }\r\n\r\n    private var _nodeTransformCache:Array<NodeTransformCacheEntry>;\r\n    private var _nodeToId:ObjectMap<Node, Int> ;\r\n    private var _nodes:Array<Node> ;\r\n    private var _invalidLists:Bool;\r\n\r\n    private var _targetSlots:Array<SignalSlot3<Dynamic,Dynamic,Dynamic>> ;\r\n    private var _renderingBeginSlot:SignalSlot3<SceneManager, Int, AbstractTexture>;\r\n    private var _toAdd:Array<Node> ;\r\n    private var _toRemove:Array<Node> ;\r\n    private var _nodeToPropertyChangedSlot:ObjectMap<Node, SignalSlot3<Store, Provider, String>>;\r\n\r\n    public function new() {\r\n        super();\r\n        this._nodeTransformCache = new Array<NodeTransformCacheEntry>();\r\n        this._nodeToId = new ObjectMap<Node, Int> ();\r\n        this._nodes = new Array<Node>() ;\r\n        this._invalidLists = false;\r\n\r\n        this._targetSlots = new Array<SignalSlot3<Dynamic,Dynamic,Dynamic>>() ;\r\n        this._renderingBeginSlot = null;\r\n        this._toAdd = new Array<Node>() ;\r\n        this._toRemove = new Array<Node>() ;\r\n        this._nodeToPropertyChangedSlot = new ObjectMap<Node, SignalSlot3<Store, Provider, String>>();\r\n    }\r\n\r\n\r\n    override public function clone(option:CloneOption) {\r\n\r\n        return RootTransform.create();\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        _targetSlots.push(target.added.connect(addedHandler));\r\n        _targetSlots.push(target.removed.connect(removedHandler));\r\n        _targetSlots.push(target.componentAdded.connect(componentAddedHandler));\r\n        _targetSlots.push(target.componentRemoved.connect(componentRemovedHandler));\r\n\r\n        var sceneManager:SceneManager = cast target.root.getComponent(SceneManager);\r\n\r\n        if (sceneManager != null) {\r\n            _renderingBeginSlot = sceneManager.renderingBegin.connect(renderingBeginHandler, 1000.0);\r\n        }\r\n\r\n        addedHandler(target, target.root, target.parent);\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n\r\n    }\r\n\r\n    public function componentAddedHandler(node:Node, target:Node, ctrl:AbstractComponent) {\r\n\r\n        if (Std.is(ctrl, SceneManager)) {\r\n            var sceneManager:SceneManager = cast(ctrl, SceneManager);\r\n            _renderingBeginSlot = sceneManager.renderingBegin.connect(renderingBeginHandler, 1000.0);\r\n        }\r\n        else {\r\n            if (Std.is(ctrl, Transform)) {\r\n\r\n                var removeIt = Lambda.has(_toRemove, target);\r\n\r\n                if (removeIt) {\r\n                    _toRemove.remove(target);\r\n                }\r\n                else {\r\n                    _toAdd.push(target);\r\n                    _invalidLists = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public function componentRemovedHandler(node:Node, target:Node, ctrl:AbstractComponent) {\r\n\r\n        if (Std.is(ctrl, SceneManager)) {\r\n            var sceneManager:SceneManager = cast(ctrl, SceneManager);\r\n            _renderingBeginSlot = null;\r\n        }\r\n        else {\r\n            if (Std.is(ctrl, Transform)) {\r\n                var addIt = Lambda.has(_toAdd, target);\r\n                if (addIt) {\r\n                    _toAdd.remove(target);\r\n                }\r\n                else {\r\n                    _toRemove.push(target);\r\n                    _invalidLists = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public function addedHandler(node:Node, target:Node, ancestor:Node) {\r\n        if (node.root == this.target && node != target) {\r\n            var otherRoot:RootTransform = cast target.getComponent(RootTransform);\r\n\r\n            if (otherRoot != null) {\r\n                _toAdd = _toAdd.concat(otherRoot._nodes.concat(otherRoot._toAdd));\r\n                for (toRemove in _toRemove) {\r\n                    _toAdd.remove(toRemove);\r\n                }\r\n                _invalidLists = true;\r\n\r\n                target.removeComponent(otherRoot);\r\n                otherRoot.dispose();\r\n                otherRoot=null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public function removedHandler(node:Node, target:Node, ancestor:Node) {\r\n        _invalidLists = true;\r\n\r\n        var withTransforms:NodeSet = NodeSet.createbyNode(target).descendants(true, false).where(function(n:Node) {\r\n            return n.hasComponent(Transform);\r\n        });\r\n        _toRemove = withTransforms.nodes.concat(_toRemove) ;\r\n    }\r\n\r\n    public function updateTransformsList() {\r\n\r\n        //dirty  tree  Trans list\r\n        if (_toAdd.length == 0 && _toRemove.length == 0) {\r\n            return;\r\n        }\r\n\r\n        for (toRemove in _toRemove) {\r\n            _nodeToId.remove(toRemove);\r\n            _nodeToPropertyChangedSlot.get(toRemove).dispose();\r\n            _nodeToPropertyChangedSlot.remove(toRemove);\r\n        }\r\n\r\n        _nodes = new Array<Node>() ;\r\n\r\n        for (nodeAndId in _nodeToId.keys()) {\r\n            _nodes.push(nodeAndId);\r\n        }\r\n\r\n        for (node in _toAdd) {\r\n            _nodes.push(node);\r\n            _nodeToPropertyChangedSlot.set(node,\r\n            node.data.getPropertyChanged(\"matrix\").connect(function(store:Store, provider:Provider, propertyName:String) {\r\n                _nodeTransformCache[_nodeToId.get(node)]._dirty = true;\r\n            })\r\n            );\r\n        }\r\n\r\n        _toAdd = new Array<Node>();\r\n        _toRemove = new Array<Node>();\r\n\r\n        for(n in _nodeTransformCache){\r\n            n.clear();\r\n        }\r\n        _nodeTransformCache = [for (i in 0..._nodes.length) new NodeTransformCacheEntry()];\r\n\r\n        for (node in _nodes) {\r\n            var transform:Transform = cast node.getComponent(Transform);\r\n\r\n            transform.dirty = true;\r\n        }\r\n\r\n        sortNodes();\r\n\r\n        var nodeId = 0;\r\n        var ancestor:Node = null;\r\n        var ancestorId = -1;\r\n        var firstSiblingId = -1;\r\n        var numSiblings = 0;\r\n\r\n        for (node in _nodes) {\r\n            var previousAncestor = ancestor;\r\n\r\n            ancestor = node.parent;\r\n\r\n            while (ancestor != null && !ancestor.hasComponent(Transform)) {\r\n                ancestor = ancestor.parent;\r\n            }\r\n\r\n            if (previousAncestor == null && ancestor == null) {\r\n                numSiblings = 0;\r\n            }\r\n            else if (ancestor != previousAncestor) {\r\n                if (previousAncestor == null) {\r\n                    ancestorId = _nodeToId.get(ancestor);\r\n\r\n                    firstSiblingId = nodeId;\r\n                    ++numSiblings;\r\n                }\r\n                else {\r\n                    var previousAncestorId = _nodeToId.get(previousAncestor);\r\n\r\n                    var previousAncestorCacheEntry = _nodeTransformCache[previousAncestorId];\r\n\r\n                    previousAncestorCacheEntry._firstChildId = firstSiblingId;\r\n                    previousAncestorCacheEntry._numChildren = numSiblings;\r\n\r\n                    firstSiblingId = nodeId;\r\n                    numSiblings = ancestor != null ? 1 : 0;\r\n\r\n                    previousAncestor = ancestor;\r\n\r\n                    ancestorId = ancestor != null ? _nodeToId.get(ancestor) : -1;\r\n                }\r\n            }\r\n            else {\r\n                ++numSiblings;\r\n            }\r\n\r\n            _nodeToId.set(node, nodeId);\r\n\r\n            var nodeCacheEntry = _nodeTransformCache[nodeId];\r\n\r\n            nodeCacheEntry._node = node;\r\n\r\n            nodeCacheEntry._parentId = ancestorId;\r\n\r\n            nodeCacheEntry._matrix = node.data.getUnsafePointer(\"matrix\");\r\n            nodeCacheEntry._modelToWorldMatrix = node.data.getUnsafePointer(\"modelToWorldMatrix\");\r\n            nodeCacheEntry._provider = cast( node.getComponent(Transform), Transform).data;\r\n\r\n            ++nodeId;\r\n      }\r\n\r\n        if (ancestor != null) {\r\n            ancestorId = _nodeToId.get(ancestor);\r\n\r\n            var ancestorCacheEntry = _nodeTransformCache[ancestorId];\r\n            ancestorCacheEntry._firstChildId = firstSiblingId;\r\n            ancestorCacheEntry._numChildren = numSiblings;\r\n        }\r\n\r\n        _invalidLists = false;\r\n    }\r\n\r\n    public function sortNodes() {\r\n\r\n        var sortedNodeSet:NodeSet = NodeSet.createbyNode(_nodes[0].root).descendants(true, false).where(function(descendant:Node) {\r\n            var transform:Transform = cast descendant.getComponent(Transform);\r\n\r\n            return transform != null && transform.dirty;\r\n        });\r\n\r\n        //_nodes.assign(sortedNodeSet.nodes().begin(), sortedNodeSet.nodes().end());\r\n        _nodes = sortedNodeSet.nodes.concat([]);\r\n    }\r\n\r\n    public function updateTransforms() {\r\n        var modelToWorldMatrix:Mat4 = null;\r\n        var nodeId = 0;\r\n        var propertyName = \"modelToWorldMatrix\";\r\n\r\n        for (node in _nodes) {\r\n            var nodeCacheEntry = _nodeTransformCache[nodeId];\r\n\r\n            if (nodeCacheEntry._dirty) {\r\n                var parentId = nodeCacheEntry._parentId;\r\n\r\n                if (parentId < 0) {\r\n                    modelToWorldMatrix = nodeCacheEntry._matrix.value;\r\n                }\r\n                else {\r\n                    var parentCacheEntry = _nodeTransformCache[parentId];\r\n                    //math\r\n                    modelToWorldMatrix = parentCacheEntry._modelToWorldMatrix.value * (nodeCacheEntry._matrix.value);\r\n                }\r\n\r\n                // Because we use an unsafe pointer that gives us a direct access to the\r\n                // data provider internal value for \"modelToWorldMatrix\", we have to trigger\r\n                // the \"property changed\" signal manually.\r\n                // This technique completely bypasses the storeproperty name resolving\r\n                // mechanism and is a lot faster.\r\n                //todo fix !=\r\n                if (!nodeCacheEntry._modelToWorldMatrix.value.equals(modelToWorldMatrix)) {\r\n                    var nodeData:Store = node.data;\r\n                    var provider = nodeCacheEntry._provider;\r\n\r\n                    // manually update the data provider internal mat4 object\r\n                   nodeCacheEntry._modelToWorldMatrix.value= modelToWorldMatrix;\r\n\r\n                    // execute the \"property changed\" signal(s) manually\r\n                    nodeData.propertyChanged.execute(nodeData, provider, propertyName);\r\n                    if (nodeData.hasPropertyChangedSignal(\"modelToWorldMatrix\")) {\r\n                        nodeData.getPropertyChanged(\"modelToWorldMatrix\").execute(nodeData, provider, propertyName);\r\n                    }\r\n\r\n                    var numChildren = nodeCacheEntry._numChildren;\r\n\r\n                    if (numChildren > 0) {\r\n                        var firstChildId = nodeCacheEntry._firstChildId;\r\n                        var lastChildId = firstChildId + numChildren;\r\n\r\n                        for (childId in firstChildId... lastChildId) {\r\n                            var childCacheEntry = _nodeTransformCache[childId];\r\n                            childCacheEntry._dirty = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                nodeCacheEntry._dirty = false;\r\n\r\n                var transform:Transform = cast node.getComponent(Transform);\r\n\r\n                transform.dirty = false;\r\n            }\r\n\r\n            ++nodeId;\r\n        }\r\n    }\r\n\r\n    public function forceUpdate(node:Node, updateTransformLists:Bool) {\r\n        if (_invalidLists || updateTransformLists) {\r\n            updateTransformsList();\r\n        }\r\n\r\n        updateTransforms();\r\n    }\r\n\r\n    public function renderingBeginHandler(sceneManager:SceneManager, frameId:Int, abstractTexture:AbstractTexture) {\r\n        if (_invalidLists) {\r\n            updateTransformsList();\r\n        }\r\n\r\n        updateTransforms();\r\n    }\r\n}\r\n@:expose(\"minko.component.NodeTransformCacheEntry\")\r\nclass NodeTransformCacheEntry {\r\n    public var _node:Node;\r\n    public var _matrix:UnsafePointer<Mat4>;\r\n    public var _modelToWorldMatrix:UnsafePointer<Mat4>;\r\n\r\n    public var _parentId:Int;\r\n    public var _firstChildId:Int;\r\n    public var _numChildren:Int;\r\n\r\n    public var _dirty:Bool;\r\n    public var _provider:Provider;\r\n\r\n    public function new() {\r\n        this._node = null;\r\n        this._matrix = null;\r\n        this._modelToWorldMatrix = null;\r\n        this._parentId = -1;\r\n        this._firstChildId = -1;\r\n        this._numChildren = 0;\r\n        this._dirty = true;\r\n        this._provider = null;\r\n    }\r\n\r\n    public function clear():Void {\r\n        this._node = null;\r\n        this._matrix = null;\r\n        this._modelToWorldMatrix = null;\r\n        this._parentId = -1;\r\n        this._firstChildId = -1;\r\n        this._numChildren = 0;\r\n        this._dirty = true;\r\n        this._provider = null;\r\n    }\r\n}\r\n@:expose(\"minko.component.Transform\")\r\nclass Transform extends AbstractComponent {\r\n\r\n    private var _matrix:UnsafePointer<Mat4>;\r\n    private var _modelToWorld:UnsafePointer<Mat4>;\r\n    private var _data:Provider;\r\n    private var _addedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _removedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _dirty:Bool;\r\n\r\n    public static function create():Transform {\r\n        var ctrl:Transform = new Transform();\r\n\r\n        ctrl.matrix = Mat4.identity(new Mat4());\r\n\r\n        return ctrl;\r\n    }\r\n\r\n    override public function dispose() {\r\n        super.dispose();\r\n        if(_addedSlot !=null)_addedSlot.dispose();\r\n        _addedSlot=null;\r\n        if(_removedSlot!=null)_removedSlot.dispose();\r\n        _removedSlot=null;\r\n        _modelToWorld=null;\r\n        _matrix=null;\r\n        if(_data!=null) _data.dispose();\r\n        _data=null;\r\n    }\r\n\r\n\r\n    public static function createbyMatrix4(transform:Mat4) {\r\n        var ctrl:Transform = create();\r\n\r\n        ctrl.matrix = transform;\r\n\r\n        return ctrl;\r\n    }\r\n\r\n    override public function clone(option:CloneOption) {\r\n        return Transform.createbyMatrix4(this.matrix.toFloatArray());\r\n    }\r\n    public var data(get, null):Provider;\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n    public var dirty(get, set):Bool;\r\n\r\n    function get_dirty() {\r\n        return _dirty;\r\n    }\r\n\r\n    function set_dirty(v) {\r\n        _dirty = v;\r\n        return v;\r\n    }\r\n\r\n    public var matrix(get, set):Mat4;\r\n\r\n    function get_matrix() {\r\n        return _matrix.value;\r\n    }\r\n\r\n    function set_matrix(value:Mat4) {\r\n      //  if (! value.equals( _matrix.value)) {\r\n            //todo       this._data.set(\"matrix\", _matrix)\r\n          _matrix.value= value;\r\n       // }\r\n        if (target != null) {\r\n            var rootTransform:RootTransform = cast target.root.getComponent(RootTransform);\r\n            if (rootTransform != null) {\r\n                rootTransform.setDirty(target, true);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public var modelToWorldMatrix(get, null):Mat4;\r\n\r\n    function get_modelToWorldMatrix() {\r\n        return _modelToWorldMatrix(false);\r\n    }\r\n\r\n    public function _modelToWorldMatrix(forceUpdate) {\r\n        if (forceUpdate) {\r\n            updateModelToWorldMatrix();\r\n        }\r\n\r\n        return _modelToWorld.value;\r\n    }\r\n\r\n    public function updateModelToWorldMatrix() {\r\n        var rt:RootTransform = cast target.root.getComponent(RootTransform);\r\n        rt.forceUpdate(target, true);\r\n    }\r\n\r\n    override public function targetAdded(target:Node) {\r\n        if (target.getComponents(Transform).length > 1) {\r\n            throw (\"A node cannot have more than one Transform.\");\r\n        }\r\n        target.data.addProvider(_data);\r\n        _addedSlot = target.added.connect(addedOrRemovedHandler);\r\n        //_removedSlot = target->removed()->connect(callback);\r\n\r\n        addedOrRemovedHandler(null, target, target.parent);\r\n    }\r\n\r\n    public function addedOrRemovedHandler(node:Node, target:Node, parent:Node) {\r\n        if (!target.root.hasComponent(RootTransform)) {\r\n            target.root.addComponent(RootTransform.create());\r\n        }\r\n    }\r\n\r\n    override public function targetRemoved(target:Node) {\r\n        target.data.removeProvider(_data);\r\n        if (_addedSlot != null) {\r\n            _addedSlot.dispose();\r\n        }\r\n        _addedSlot = null;\r\n        if (_removedSlot != null) {\r\n            _removedSlot.dispose();\r\n        }\r\n\r\n        _removedSlot = null;\r\n    }\r\n\r\n    public function new() {\r\n        super();\r\n        //\t_worldToModel(1.),\r\n\r\n        this._data = Provider.create();\r\n        this._dirty = false;\r\n        this._data\r\n        .set(\"matrix\", Mat4.identity(new Mat4()))\r\n        .set(\"modelToWorldMatrix\", Mat4.identity(new Mat4()));\r\n\r\n        this._matrix = cast this._data.getUnsafePointer(\"matrix\") ;\r\n        this._modelToWorld = cast this._data.getUnsafePointer(\"modelToWorldMatrix\") ;\r\n    }\r\n\r\n}\r\n","package minko.data;\r\nimport minko.component.AbstractComponent;\r\nimport minko.component.Surface;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal3.SignalSlot3;\r\n@:expose(\"minko.data.AbstractFilter\")\r\nclass AbstractFilter {\r\n\r\n    private var _currentSurface:Surface;\r\n    private var _currentSurfaceRemovedSlot:SignalSlot2<AbstractComponent, Node> ;\r\n    private var _currentSurfaceTargetRemovedSlot:SignalSlot3<Node, Node, Node>;\r\n    private var _changed:Signal2<AbstractFilter, Surface>;\r\n    private var _watchedProperties:Array<String>;\r\n    public var currentSurface(get, null):Surface;\r\n\r\n    public function get_currentSurface() {\r\n        return _currentSurface;\r\n    }\r\n\r\n    public var changed(get, null):Signal2<AbstractFilter, Surface> ;\r\n\r\n    public function get_changed() {\r\n        return _changed;\r\n    }\r\n\r\n    public function new() {\r\n\r\n        this._watchedProperties = new Array<String>();\r\n        this._currentSurface = null;\r\n        this._currentSurfaceRemovedSlot = null;\r\n        this._currentSurfaceTargetRemovedSlot = null;\r\n        this._changed = new Signal2<AbstractFilter, Surface>();\r\n    }\r\n\r\n    public function watchProperty(propertyName:String):Void {\r\n        _watchedProperties.push(propertyName);\r\n\r\n        this.changed.execute(this, null);\r\n    }\r\n\r\n    public function unwatchProperty(propertyName:String):Void {\r\n        var it = Lambda.find(_watchedProperties, function(value) return value == propertyName);\r\n\r\n        if (it == null) {\r\n            throw (\"This property is not watching currently.\");\r\n        }\r\n\r\n        _watchedProperties.remove(propertyName);\r\n        //_surfaceTargetPropertyChangedSlots.clear();\r\n\r\n        this.changed.execute(this, null);\r\n    }\r\n\r\n\r\n    private function currentSurfaceRemovedHandler(UnnamedParameter1:AbstractComponent, UnnamedParameter2:Node) {\r\n        forgetCurrentSurface();\r\n    }\r\n\r\n    private function currentSurfaceTargetRemovedHandler(UnnamedParameter1:Node, UnnamedParameter2:Node, UnnamedParameter3:Node) {\r\n        forgetCurrentSurface();\r\n    }\r\n\r\n    private function forgetCurrentSurface() {\r\n        _currentSurface = null;\r\n\r\n        _currentSurfaceRemovedSlot.dispose();\r\n        _currentSurfaceRemovedSlot = null;\r\n        _currentSurfaceTargetRemovedSlot.dispose();\r\n        _currentSurfaceTargetRemovedSlot = null;\r\n    }\r\n}\r\n","package minko.data;\r\n\r\nimport minko.Uuid.Enable_uuid;\r\n@:expose(\"minko.data.Source\")\r\n@:enum abstract Source(Int) from Int to Int{\r\n    var TARGET = 0;\r\n    var RENDERER = 1;\r\n    var ROOT = 2;\r\n}\r\n@:expose(\"minko.data.Binding\")\r\nclass Binding extends Enable_uuid {\r\n\r\n    public var propertyName:String;\r\n    public var source:Source;\r\n\r\n    public function new() {\r\n        this.propertyName = \"\";\r\n        this.source = Source.TARGET;\r\n        super();\r\n        enable_uuid();\r\n    }\r\n\r\n    public function setBinding(propertyName, source) {\r\n        this.propertyName = propertyName;\r\n        this.source = (source);\r\n        return this;\r\n    }\r\n}\r\n","package minko.data;\r\nimport haxe.ds.StringMap;\r\nimport minko.Uuid.Enable_uuid;\r\ntypedef  BindingMap = BindingMapBase<Binding> ;\r\n@:expose(\"minko.data.MacroBinding\")\r\nclass MacroBinding extends Binding {\r\n    public var minValue:Float;\r\n    public var maxValue:Float;\r\n\r\n    public function new() {\r\n        super();\r\n        minValue = Math.NEGATIVE_INFINITY;\r\n        maxValue = Math.POSITIVE_INFINITY;\r\n    }\r\n\r\n    public function setBindingMinMax(min, max) {\r\n        minValue = min;\r\n        maxValue = max;\r\n    }\r\n\r\n\r\n    public function dispose() {\r\n\r\n    }\r\n}\r\n@:expose(\"minko.data.BindingMapBase\")\r\nclass BindingMapBase<T :Binding> extends Enable_uuid {\r\n    public var defaultValues:Store;\r\n    public var bindings:StringMap<T>;\r\n\r\n    public function new() {\r\n        super();\r\n        defaultValues = new Store();\r\n        bindings = new StringMap<T>();\r\n    }\r\n\r\n    public function setBindingsAndStore(bindings:StringMap<T>, defaultValues:Store) {\r\n        this.bindings = (bindings);\r\n        this.defaultValues = (defaultValues);\r\n\r\n    }\r\n\r\n    static public function copyFrom<T:Binding>(t:BindingMapBase<T>, m:BindingMapBase<T>) {\r\n        t.bindings = new StringMap<T>();\r\n        for (k in m.bindings.keys()) {\r\n            t.bindings.set(k, m.bindings.get(k));\r\n        }\r\n        t.defaultValues = new Store();\r\n        t.defaultValues.copyFrom(m.defaultValues, true);\r\n        return t;\r\n    }\r\n\r\n    public function dispose() {\r\n\r\n    }\r\n\r\n}\r\n@:expose(\"minko.data.MacroType\")\r\n@:enum abstract MacroType(Int) from Int to Int{\r\n\r\n    var UNSET = 0;\r\n    var INT = 1;\r\n    var INT2 = 2;\r\n    var INT3 = 3;\r\n    var INT4 = 4;\r\n    var BOOL = 5;\r\n    var BOOL2 = 6;\r\n    var BOOL3 = 7;\r\n    var BOOL4 = 8;\r\n    var FLOAT = 9;\r\n    var FLOAT2 = 10;\r\n    var FLOAT3 = 11;\r\n    var FLOAT4 = 12;\r\n    var FLOAT9 = 13;\r\n    var FLOAT16 = 14;\r\n}\r\n@:expose(\"minko.data.MacroBindingMap\")\r\nclass MacroBindingMap extends BindingMapBase<MacroBinding> {\r\n\r\n\r\n    public var types:StringMap<MacroType>;\r\n\r\n\r\n    public function new() {\r\n        super();\r\n        this.types = new StringMap<MacroType>();\r\n        enable_uuid();\r\n    }\r\n\r\n    static public function copyFrom2(t:MacroBindingMap, m:MacroBindingMap) {\r\n        BindingMapBase.copyFrom(t, m);\r\n        //todo\r\n\r\n        var ts = cast(m, MacroBindingMap).types;\r\n        for (key in ts.keys()) {\r\n            t.types.set(key, ts.get(key));\r\n        }\r\n        return t;\r\n    }\r\n\r\n    public static function stringToMacroType(s) {\r\n        if (s == \"int\") {\r\n            return MacroType.INT;\r\n        }\r\n        if (s == \"int2\") {\r\n            return MacroType.INT2;\r\n        }\r\n        if (s == \"int3\") {\r\n            return MacroType.INT3;\r\n        }\r\n        if (s == \"int4\") {\r\n            return MacroType.INT4;\r\n        }\r\n\r\n        if (s == \"float\") {\r\n            return MacroType.FLOAT;\r\n        }\r\n        if (s == \"float2\") {\r\n            return MacroType.FLOAT2;\r\n        }\r\n        if (s == \"float3\") {\r\n            return MacroType.FLOAT3;\r\n        }\r\n        if (s == \"float4\") {\r\n            return MacroType.FLOAT4;\r\n        }\r\n\r\n        if (s == \"bool\") {\r\n            return MacroType.BOOL;\r\n        }\r\n        if (s == \"bool2\") {\r\n            return MacroType.BOOL2;\r\n        }\r\n        if (s == \"bool3\") {\r\n            return MacroType.BOOL3;\r\n        }\r\n        if (s == \"bool4\") {\r\n            return MacroType.BOOL4;\r\n        }\r\n\r\n        return MacroType.UNSET;\r\n    }\r\n}\r\n","package minko.data;\r\nimport minko.signal.Signal2;\r\n@:expose(\"minko.data.Collection\")\r\nclass Collection {\r\n\r\n    private var _name:String ;\r\n    private var _items:Array<Provider> ;\r\n\r\n    private var _itemAdded:Signal2<Collection, Provider>;\r\n    private var _itemRemoved:Signal2<Collection, Provider>;\r\n\r\n    public function dispose():Void {\r\n        if(_itemAdded!=null)_itemAdded.dispose();\r\n        _itemAdded=null;\r\n        if(_itemRemoved!=null)_itemRemoved.dispose();\r\n        _itemRemoved=null;\r\n            //todo\r\n        _items=null;\r\n    }\r\n    public static function create(name):Collection {\r\n        return new Collection(name);\r\n    }\r\n\r\n    public static function createbyCollection(collection:Collection, deepCopy = false) {\r\n        var copy:Collection = create(collection._name);\r\n\r\n        if (deepCopy) {\r\n            for (item in collection._items) {\r\n                copy._items.push(Provider.createbyProvider(item));\r\n            }\r\n        }\r\n        else {\r\n            copy._items = collection._items;\r\n        }\r\n\r\n        return copy;\r\n    }\r\n    public var name(get, null):String;\r\n\r\n    function get_name() {\r\n        return _name;\r\n    }\r\n    public var items(get, null):Array<Provider>;\r\n\r\n    function get_items() {\r\n        return _items;\r\n    }\r\n    public var itemAdded(get, null):Signal2<Collection, Provider>;\r\n\r\n    function get_itemAdded() {\r\n        return _itemAdded;\r\n    }\r\n    public var itemRemoved(get, null):Signal2<Collection, Provider>;\r\n\r\n    function get_itemRemoved() {\r\n        return _itemRemoved;\r\n    }\r\n    public var front(get, null):Provider;\r\n\r\n    function get_front() {\r\n        return _items[0];\r\n    }\r\n    public var back(get, null):Provider;\r\n\r\n    function get_back() {\r\n        return _items[_items.length - 1];\r\n    }\r\n\r\n\r\n    public function insert(position, provider) {\r\n        _items.insert(position, provider);\r\n        _itemAdded.execute(this, provider);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function erase(position) {\r\n\r\n        var provider = _items[position];\r\n        return remove(provider);\r\n    }\r\n\r\n    public function remove(provider) {\r\n\r\n        _items.remove(provider);\r\n        _itemRemoved.execute(this, provider);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function pushBack(provider) {\r\n        _items.push(provider);\r\n        _itemAdded.execute(this, provider);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function popBack() {\r\n        var provider = _items.pop();\r\n        _itemRemoved.execute(this, provider);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function new(name) {\r\n        this._name = name;\r\n        this._items = [] ;\r\n        this._itemAdded = new Signal2<Collection, Provider>();\r\n        this._itemRemoved = new Signal2<Collection, Provider>();\r\n    }\r\n}\r\n","package minko.data;\r\nimport haxe.ds.StringMap;\r\nimport minko.signal.Signal2;\r\nimport minko.Uuid.Enable_uuid;\r\n@:expose(\"minko.data.Provider\")\r\nclass Provider extends Enable_uuid {\r\n    private var _values:StringMap<UnsafePointer<Dynamic>>;\r\n    private var _propertyAdded:Signal2<Provider, String>;\r\n    private var _propertyChanged:Signal2<Provider, String>;\r\n    private var _propertyRemoved:Signal2<Provider, String>;\r\n\r\n    public function new() {\r\n        super();\r\n        this._values = new StringMap<UnsafePointer<Dynamic>>();\r\n        _propertyAdded = new Signal2<Provider, String>();\r\n        _propertyChanged = new Signal2<Provider, String>();\r\n        _propertyRemoved = new Signal2<Provider, String>();\r\n        enable_uuid();\r\n    }\r\n\r\n    public function dispose():Void {\r\n        if (_values != null) {\r\n            _values = null;\r\n        }\r\n        if (_propertyAdded != null) _propertyAdded.dispose();\r\n        if (_propertyChanged != null)  _propertyChanged.dispose();\r\n        if (_propertyRemoved != null)  _propertyRemoved.dispose();\r\n        _propertyAdded=null;\r\n        _propertyChanged=null;\r\n        _propertyRemoved=null;\r\n    }\r\n    public function front() :UnsafePointer<Dynamic>{\r\n        return _values.iterator().next();\r\n    }\r\n\r\n    public static function create():Provider {\r\n        var provider = new Provider();\r\n\r\n        return provider;\r\n    }\r\n\r\n    public static function createbyUuid(uuid:String):Provider {\r\n        var provider = new Provider();\r\n        provider.uuid = uuid;\r\n\r\n        return provider;\r\n    }\r\n\r\n    public static function createbyStringMap(values:StringMap<Dynamic>):Provider {\r\n        var provider = new Provider();\r\n        provider.setProvider(values);\r\n\r\n        return provider;\r\n    }\r\n\r\n    public static function createbyProvider(source:Provider):Provider {\r\n        var provider:Provider = create();\r\n        return provider.copyFrom(source);\r\n    }\r\n\r\n    public function hasProperty(propertyName:String):Bool {\r\n        return _values.exists(propertyName);\r\n    }\r\n//    public var values(get, null):StringMap<UnsafePointer<Dynamic>>;\r\n//\r\n//    function get_values() {\r\n//        return _values ;\r\n//    }\r\n    public function keys( ):Iterator<String> {\r\n        return _values.keys() ;\r\n    }\r\n    public var propertyAdded(get, null):Signal2<Provider, String>;\r\n\r\n    function get_propertyAdded() {\r\n        return _propertyAdded;\r\n    }\r\n\r\n    public var propertyChanged(get, null):Signal2<Provider, String>;\r\n\r\n    function get_propertyChanged() {\r\n        return _propertyChanged;\r\n    }\r\n    public var propertyRemoved(get, null):Signal2<Provider, String>;\r\n\r\n    function get_propertyRemoved() {\r\n        return _propertyRemoved;\r\n    }\r\n\r\n\r\n    public function get(propertyName:String) :Dynamic{\r\n        return getValue(propertyName) ;\r\n    }\r\n\r\n\r\n    public function getUnsafePointer(propertyName:String):UnsafePointer<Dynamic> {\r\n        return _values.get(propertyName);\r\n    }\r\n    public function setUnsafePointer(propertyName:String, value:UnsafePointer<Dynamic>):Void{\r\n        return _values.set(propertyName,value);\r\n    }\r\n    public function set(propertyName:String, value:Dynamic):Provider {\r\n        if (hasProperty(propertyName)) {\r\n            var ptr = getValue(propertyName);\r\n            var changed = (ptr != value);\r\n            setValue(propertyName, value);\r\n            if (changed) {\r\n                _propertyChanged.execute(this, propertyName);\r\n            }\r\n        }\r\n        else {\r\n            setUnsafePointer(propertyName,  new UnsafePointer(value));\r\n            _propertyAdded.execute(this, propertyName);\r\n            _propertyChanged.execute(this, propertyName);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public function setProvider(values:StringMap<Dynamic>) :Void{\r\n        for (p in values.keys()) {\r\n            setValue(p, values.get(p));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public function propertyHasType(propertyName:String) :Bool{\r\n        return getValue(propertyName) != null;\r\n    }\r\n\r\n    public function clear():Void {\r\n        _values = new StringMap<UnsafePointer<Dynamic>>();\r\n\r\n    }\r\n\r\n    public function unset(propertyName:String) :Void{\r\n        var propertyIt = _values.get(propertyName);\r\n\r\n        if (propertyIt != null) {\r\n            _values.remove(propertyName);\r\n            _propertyRemoved.execute(this, propertyName);\r\n        }\r\n    }\r\n\r\n    public function copyFrom(source:Provider) :Provider{\r\n        for (nameAnd in source.keys()) {\r\n            // if (hasProperty(nameAnd)) {\r\n            //     *getValue(nameAnd) = source.get(nameAnd);\r\n            //}\r\n            // else {\r\n                set(nameAnd, source.get(nameAnd));\r\n            // }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n   inline function getValue(propertyName:String):Dynamic {\r\n        return getUnsafePointer(propertyName).value;\r\n    }\r\n\r\n    inline function setValue(propertyName:String, value:Dynamic):Void {\r\n        getUnsafePointer(propertyName).value= value;\r\n    }\r\n}\r\n","package minko.data;\r\n@:expose(\"minko.data.ResolvedBinding\")\r\nclass ResolvedBinding {\r\n    public var binding:Binding;\r\n    public var propertyName:String;\r\n    public var store:Store;\r\n\r\n    public function new(binding:Binding,\r\n                        propertyName:String,\r\n                        store:Store) {\r\n        this.binding = (binding);\r\n        this.propertyName = (propertyName);\r\n        this.store = (store);\r\n    }\r\n}\r\n","package minko.data;\r\nimport haxe.ds.ObjectMap;\r\nimport haxe.ds.StringMap;\r\nimport Lambda;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nimport minko.signal.Signal3;\r\nimport minko.Uuid.Enable_uuid;\r\n//typedef PropertyChangedSignal =Signal<Store, Provider, String>;\r\n\r\ntypedef ProviderAndToken = Tuple<Provider, String>;\r\n\r\n@:expose(\"minko.data.Store\")\r\nclass Store extends Enable_uuid {\r\n\r\n    private var _providers:Array<Provider> ;\r\n    private var _collections:Array<Collection> ;\r\n    private var _lengthProvider:Provider;\r\n\r\n    private var _propertyAdded:Signal3<Store, Provider, String>;\r\n    private var _propertyRemoved:Signal3<Store, Provider, String>;\r\n    private var _propertyChanged:Signal3<Store, Provider, String>;\r\n\r\n    private var _propertyNameToChangedSignal:StringMap<Signal3<Store, Provider, String>>;\r\n    private var _propertyNameToAddedSignal:StringMap<Signal3<Store, Provider, String>>;\r\n    private var _propertyNameToRemovedSignal:StringMap<Signal3<Store, Provider, String>>;\r\n\r\n    private var _propertySlots:ObjectMap<Provider, Array<SignalSlot2<Provider, String>>>;//SortedDictionary<Provider, LinkedList<Signal<Provider, PropertyName>.Slot>>\r\n    private var _collectionItemAddedSlots:ObjectMap<Collection, SignalSlot2<Collection, Provider>>;\r\n    private var _collectionItemRemovedSlots:ObjectMap<Collection, SignalSlot2<Collection, Provider>>;\r\n\r\n    public function new() {\r\n        super();\r\n        enable_uuid();\r\n        initialize();\r\n    }\r\n\r\n    private function initialize() :Void{\r\n        _providers = [] ;\r\n        _collections = [] ;\r\n        _lengthProvider = null;\r\n\r\n        _propertyAdded = new Signal3<Store, Provider, String>();\r\n        _propertyRemoved = new Signal3<Store, Provider, String>();\r\n        _propertyChanged = new Signal3<Store, Provider, String>();\r\n        _propertyNameToChangedSignal = new StringMap<Signal3<Store, Provider, String>>();\r\n        _propertyNameToAddedSignal = new StringMap<Signal3<Store, Provider, String>>();\r\n        _propertyNameToRemovedSignal = new StringMap<Signal3<Store, Provider, String>>();\r\n\r\n        _propertySlots = new ObjectMap<Provider, Array<SignalSlot2<Provider, String>>>();\r\n        _collectionItemAddedSlots = new ObjectMap<Collection, SignalSlot2<Collection, Provider>>();\r\n        _collectionItemRemovedSlots = new ObjectMap<Collection, SignalSlot2<Collection, Provider>>();\r\n    }\r\n\r\n    public function dispose() :Void{\r\n        if (_collectionItemAddedSlots != null) {\r\n            for(c in _collectionItemAddedSlots.keys()){\r\n                removeCollection(c);\r\n            }\r\n        }\r\n        if (_collectionItemRemovedSlots != null) {\r\n            for(c in _collectionItemRemovedSlots.keys())\r\n                removeCollection(c);\r\n        }\r\n        if (_collections != null) {\r\n            for(c in _collections)\r\n                removeCollection(c);\r\n\r\n        }\r\n        _collectionItemRemovedSlots = null;\r\n        _collectionItemAddedSlots = null;\r\n        _collections=null;\r\n        if (_providers != null) {\r\n            for(p in _providers)\r\n                removeProvider(p);\r\n\r\n\r\n        }\r\n        if (_propertyNameToChangedSignal != null) {\r\n            for (it in _propertyNameToChangedSignal) {\r\n                if (it != null) {\r\n                    it.dispose();\r\n                }\r\n            }\r\n        }\r\n        if (_propertyNameToAddedSignal != null) {\r\n            for (it in _propertyNameToAddedSignal) {\r\n                if (it != null) {\r\n                    it.dispose();\r\n                }\r\n            }\r\n        }\r\n        if (_propertyNameToRemovedSignal != null) {\r\n            for (it in _propertyNameToRemovedSignal) {\r\n                if (it != null) {\r\n                    it.dispose();\r\n                }\r\n            }\r\n        }\r\n        if (_propertySlots != null) {\r\n\r\n            for(_ps in _propertySlots)\r\n                for(_p in _ps)\r\n                    _p.dispose();\r\n\r\n        }\r\n        _propertyNameToChangedSignal=null;\r\n        _propertyNameToAddedSignal=null;\r\n        _propertyNameToRemovedSignal=null;\r\n        _propertySlots = null;\r\n        _providers=null;\r\n\r\n\r\n    }\r\n\r\n    public function propertyHasType(propertyName):Bool {\r\n        var providerAndToken = getProviderByPropertyName(propertyName);\r\n        var provider = providerAndToken.first;\r\n\r\n        if (provider == null) {\r\n            throw \"\";\r\n        }\r\n\r\n        return provider.propertyHasType(providerAndToken.second);\r\n    }\r\n\r\n    public function get(propertyName:String):Dynamic {\r\n        var providerAndToken = getProviderByPropertyName(propertyName);\r\n        var provider = providerAndToken.first;\r\n\r\n        if (provider == null) {\r\n            throw \"\";\r\n        }\r\n\r\n        return provider.get(providerAndToken.second);\r\n    }\r\n\r\n\r\n    public function getUnsafePointer(propertyName:String):Dynamic {\r\n        var providerAndToken = getProviderByPropertyName(propertyName);\r\n        var provider = providerAndToken.first;\r\n\r\n        if (provider == null) {\r\n            return null;\r\n            //throw;\r\n        }\r\n\r\n        return provider.getUnsafePointer(providerAndToken.second);\r\n    }\r\n\r\n    public function set(propertyName:String, value:Dynamic):Store {\r\n        var providerAndToken = getProviderByPropertyName(propertyName);\r\n        var provider = providerAndToken.first;\r\n\r\n        if (provider == null) {\r\n            throw \"\";\r\n        }\r\n\r\n\r\n        provider.set(providerAndToken.second, value);\r\n        return this;\r\n    }\r\n\r\n\r\n    public var propertyAdded(get, null):Signal3<Store, Provider, String>;\r\n\r\n    public function get_propertyAdded() {\r\n        return _propertyAdded;\r\n    }\r\n\r\n    public var propertyRemoved(get, null):Signal3<Store, Provider, String>;\r\n\r\n    function get_propertyRemoved() {\r\n        return _propertyRemoved;\r\n    }\r\n\r\n    public var propertyChanged(get, null):Signal3<Store, Provider, String>;\r\n\r\n    function get_propertyChanged() {\r\n        return _propertyChanged;\r\n    }\r\n\r\n    public function getPropertyAdded(propertyName):Signal3<Store, Provider, String> {\r\n        return getOrInsertSignal(_propertyNameToAddedSignal, propertyName);\r\n    }\r\n\r\n    public function getPropertyRemoved(propertyName):Signal3<Store, Provider, String> {\r\n        return getOrInsertSignal(_propertyNameToRemovedSignal, propertyName);\r\n    }\r\n\r\n\r\n    public function getPropertyChanged(propertyName):Signal3<Store, Provider, String> {\r\n        return getOrInsertSignal(_propertyNameToChangedSignal, propertyName);\r\n    }\r\n\r\n    public var providers(get, set):Array<Provider>;\r\n\r\n    function get_providers() {\r\n        return _providers;\r\n    }\r\n\r\n    function set_providers(v) {\r\n        _providers = v;\r\n        return v;\r\n    }\r\n    public var collections(get, null):Array<Collection>;\r\n\r\n    function get_collections() {\r\n        return _collections;\r\n    }\r\n\r\n    public function addProvider(provider:Provider):Void {\r\n        doAddProvider(provider);\r\n    }\r\n\r\n    public function addProviderbyName(provider:Provider, collectionName:String):Void {\r\n        addProviderToCollection(provider, collectionName);\r\n    }\r\n\r\n    public function removeProvider(provider:Provider):Void {\r\n        doRemoveProvider(provider);\r\n    }\r\n\r\n    public function removeProviderbyName(provider:Provider, collectionName:String):Void {\r\n        removeProviderFromCollection(provider, collectionName);\r\n    }\r\n\r\n    public function addCollection(collection:Collection) {\r\n        _collections.push(collection);\r\n\r\n        _collectionItemAddedSlots.set(collection, collection.itemAdded.connect(function(UnnamedParameter1, provider) {\r\n            doAddProvider(provider, collection);\r\n        }));\r\n        _collectionItemRemovedSlots.set(collection, collection.itemRemoved.connect(function(UnnamedParameter1, provider) {\r\n            doRemoveProvider(provider, collection);\r\n        }));\r\n\r\n        if (collection.items.length != 0) {\r\n            for (provider in collection.items) {\r\n                doAddProvider(provider, collection);\r\n            }\r\n        }\r\n        else {\r\n            updateCollectionLength(collection);\r\n        }\r\n    }\r\n\r\n    public function removeCollection(collection:Collection):Void {\r\n        _collections.remove(collection);\r\n\r\n\r\n        _collectionItemAddedSlots.get(collection).dispose();\r\n        _collectionItemAddedSlots.remove(collection);\r\n        _collectionItemRemovedSlots.get(collection).dispose();\r\n        _collectionItemRemovedSlots.remove(collection);\r\n\r\n        for (provider in collection.items) {\r\n            doRemoveProvider(provider, collection);\r\n        }\r\n    }\r\n\r\n    public function hasProperty(propertyName:String) {\r\n        return getProviderByPropertyName(propertyName).first != null;\r\n    }\r\n\r\n\r\n    public function hasPropertyAddedSignal(propertyName:String) {\r\n        return _propertyNameToAddedSignal.exists(propertyName) ;\r\n    }\r\n\r\n\r\n    public function hasPropertyRemovedSignal(propertyName:String) {\r\n        return _propertyNameToRemovedSignal.exists(propertyName) ;\r\n    }\r\n\r\n    public function hasPropertyChangedSignal(propertyName:String) {\r\n        return _propertyNameToChangedSignal.exists(propertyName) ;\r\n    }\r\n\r\n    static public function getActualPropertyName(vars:Array<Tuple<String, String>>, propertyName:String) {\r\n        var s = propertyName;\r\n\r\n        // FIXME: order vars keys from longer to shorter in order to match the longest matching var name\r\n        // or use regex_replace\r\n\r\n        for (variableName in vars) {\r\n            var pos = propertyName.indexOf(\"@{\" + variableName.first + \"}\");\r\n\r\n            if (pos != -1) {\r\n                s = s.substr(0, pos) + variableName.second + s.substr(pos + variableName.first.length + 3);\r\n                break;\r\n            }\r\n            else if ((pos = propertyName.indexOf(\"@\" + variableName.first)) != -1) {\r\n                s = s.substr(0, pos) + variableName.second + s.substr(pos + variableName.first.length + 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    private function getProviderByPropertyName(propertyName:String):ProviderAndToken {\r\n        var pos = propertyName.indexOf(\"[\") ;\r\n\r\n        if (pos != -1) {\r\n            var collectionName = propertyName.substr(0, pos);\r\n\r\n            for (collection in _collections) {\r\n                if (collection.name == collectionName) {\r\n                    var pos2 = propertyName.indexOf(\"]\");\r\n                    var indexStr = propertyName.substr(pos + 1, pos2 - pos - 1);\r\n                    var pos3 = indexStr.indexOf(\"-\");\r\n                    var token = propertyName.substr(pos2 + 2);\r\n\r\n\r\n                    // fetch provider by uuid\r\n                    if (pos3 != -1 && pos3 < pos2) {\r\n                        for (provider in collection.items) {\r\n                            if (provider.uuid == indexStr && provider.hasProperty(token)) {\r\n                                return new ProviderAndToken(provider, token);\r\n                            }\r\n                        }\r\n                    }\r\n                    else { // fetch provider by index\r\n                        var index = Std.parseInt(indexStr);\r\n\r\n                        if (index < collection.items.length) {\r\n                            var provider = collection.items[index];\r\n\r\n                            if (provider.hasProperty(token)) {\r\n                                return new ProviderAndToken(provider, token);\r\n                            }\r\n                        }\r\n                    }\r\n                    return new ProviderAndToken(null, token);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (provider in _providers) {\r\n                if (provider.hasProperty(propertyName)) {\r\n                    return new ProviderAndToken(provider, propertyName);\r\n                }\r\n            }\r\n        }\r\n\r\n        return new ProviderAndToken(null, propertyName);\r\n    }\r\n\r\n\r\n    public function doRemoveProvider(provider:Provider, ?collection:Collection = null) {\r\n\r\n\r\n        // var it = std::find(_providers.begin(), _providers.end(), provider);\r\n\r\n        // Debug.Assert(provider != null);\r\n        // Debug.Assert(it != _providers.end());\r\n\r\n        _providers.remove(provider);\r\n        //if (std::find(_providers.begin(), _providers.end(), provider) != _providers.end())\r\n        //return;\r\n\r\n        // execute all the \"property removed\" signals\r\n        for (property in provider.keys()) {\r\n            providerPropertyRemovedHandler(provider, collection, property);\r\n        }\r\n\r\n        // erase all the slots (property added, changed, removed) for this provider\r\n\r\n        if (_propertySlots.exists(provider)) {\r\n\r\n            var _slots:Array<SignalSlot2<Provider, String>> = _propertySlots.get(provider);\r\n            for (s in _slots) {\r\n                s.dispose();\r\n            }\r\n            _propertySlots.remove(provider);\r\n        }\r\n\r\n\r\n        // destroy all signals that might have been created for each property declared by the provider\r\n        // warning! erase the signal only if it has no callbacks anymore, otherwise it should be kept valid\r\n        if (collection == null) {\r\n            for (nameAndValue in provider.keys()) {\r\n                if (_propertyNameToChangedSignal.exists(nameAndValue) && _propertyNameToChangedSignal.get(nameAndValue).numCallbacks == 0) {\r\n\r\n                    _propertyNameToChangedSignal.remove(nameAndValue);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var providerIndex = collection.items.indexOf(provider) ;\r\n            var prefix = collection.name + \"[\" + (providerIndex) + \"].\";\r\n\r\n            for (nameAndValue in provider.keys()) {\r\n                if (_propertyNameToChangedSignal.exists(prefix + nameAndValue)) {\r\n                    _propertyNameToChangedSignal.get(prefix + nameAndValue).dispose();\r\n                    _propertyNameToChangedSignal.remove(prefix + nameAndValue);\r\n                }\r\n            }\r\n\r\n            updateCollectionLength(collection);\r\n\r\n            // the removed provider might very well be anything but the last item of the collection\r\n            // thus, all properties of all providers will have a different name.\r\n            // Ex: \"material[2].diffuseMap\" will become \"material[1].diffuseMap\" when the material 1\r\n            // is removed.\r\n            // In other words, the value targeted by \"material[1].diffuseMap\" will be different and thus\r\n            // we should trigger the \"property changed\" signal for each property of each provider which is\r\n            // \"after\" the one being removed from the collection.\r\n            for (provider in collection.items) {\r\n                for (property in provider.keys()) {\r\n                    executePropertySignal(provider, collection, property, _propertyChanged, _propertyNameToChangedSignal);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public function formatPropertyName(collection:Collection, provider:Provider, propertyName:String, ?useUuid = false) {\r\n        if (collection == null) {\r\n            return propertyName;\r\n        }\r\n\r\n        if (useUuid) {\r\n            return formatPropertyIndexName(collection, provider.uuid, propertyName);\r\n        }\r\n\r\n        var it:Int = collection.items.indexOf(provider);\r\n\r\n        return formatPropertyIndexName(collection, Std.string(it), propertyName);\r\n    }\r\n\r\n    public function formatPropertyIndexName(collection:Collection, index:String, propertyName:String) {\r\n        if (collection == null) {\r\n            return propertyName;\r\n        }\r\n\r\n        return collection.name + \"[\" + index + \"].\" + propertyName ;\r\n    }\r\n\r\n    public function executePropertySignal(provider:Provider, collection:Collection, propertyName:String, anyChangedSignal:Signal3<Store, Provider, String>, propertyNameToSignal:StringMap<Signal3<Store, Provider, String>>) {\r\n        anyChangedSignal.execute(this, provider, propertyName);\r\n        if (collection != null) {\r\n            var formattedPropertyName = formatPropertyName(collection, provider, propertyName, true);\r\n            if (propertyNameToSignal.exists(formattedPropertyName)) {\r\n                propertyNameToSignal.get(formattedPropertyName).execute(this, provider, propertyName);\r\n            }\r\n\r\n            formattedPropertyName = formatPropertyName(collection, provider, propertyName);\r\n            if (propertyNameToSignal.exists(formattedPropertyName)) {\r\n                propertyNameToSignal.get(formattedPropertyName).execute(this, provider, propertyName);\r\n            }\r\n        }\r\n        else if (propertyNameToSignal.exists(propertyName)) {\r\n            propertyNameToSignal.get(propertyName).execute(this, provider, propertyName);\r\n        }\r\n    }\r\n\r\n    public function providerPropertyAddedHandler(provider, collection, propertyName) {\r\n        executePropertySignal(provider, collection, propertyName, _propertyAdded, _propertyNameToAddedSignal);\r\n        executePropertySignal(provider, collection, propertyName, _propertyChanged, _propertyNameToChangedSignal);\r\n    }\r\n\r\n    public function providerPropertyRemovedHandler(provider:Provider, collection:Collection, propertyName:String) {\r\n        executePropertySignal(provider, collection, propertyName, _propertyChanged, _propertyNameToChangedSignal);\r\n        executePropertySignal(provider, collection, propertyName, _propertyRemoved, _propertyNameToRemovedSignal);\r\n\r\n        var formattedName = formatPropertyName(collection, provider, propertyName);\r\n\r\n\r\n        //用不用 dispose?\r\n        var it = _propertyNameToAddedSignal.get(formattedName);\r\n        if (it != null && it.numCallbacks == 0) {\r\n            _propertyNameToAddedSignal.remove(formattedName);\r\n        }\r\n        it = _propertyNameToRemovedSignal.get(formattedName);\r\n        if (it != null && it.numCallbacks == 0) {\r\n            _propertyNameToRemovedSignal.remove(formattedName);\r\n        }\r\n        it = _propertyNameToChangedSignal.get(formattedName);\r\n        if (it != null && it.numCallbacks == 0) {\r\n            _propertyNameToChangedSignal.remove(formattedName);\r\n        }\r\n\r\n        formattedName = formatPropertyName(collection, provider, propertyName, true);\r\n        it = _propertyNameToAddedSignal.get(formattedName);\r\n        if (it != null && it.numCallbacks == 0) {\r\n            _propertyNameToAddedSignal.remove(formattedName);\r\n        }\r\n        it = _propertyNameToRemovedSignal.get(formattedName);\r\n        if (it != null && it.numCallbacks == 0) {\r\n            _propertyNameToRemovedSignal.remove(formattedName);\r\n        }\r\n        it = _propertyNameToChangedSignal.get(formattedName);\r\n        if (it != null && it.numCallbacks == 0) {\r\n            _propertyNameToChangedSignal.remove(formattedName);\r\n        }\r\n    }\r\n\r\n    private function addProviderToCollection(provider, collectionName) {\r\n        var collectionIt = Lambda.find(_collections, function(c:Collection) {\r\n            return c.name == collectionName;\r\n        });\r\n\r\n        var collection:Collection = null;\r\n\r\n        // if the collection does not already exist\r\n        if (collectionIt == null) {\r\n            // create and add it\r\n            collection = Collection.create(collectionName);\r\n            addCollection(collection);\r\n        }\r\n        else {\r\n            // just use the existing collection\r\n            collection = collectionIt;\r\n        }\r\n\r\n        collection.pushBack(provider);\r\n    }\r\n\r\n    private function removeProviderFromCollection(provider:Provider, collectionName:String) {\r\n        var collectionIt:Collection = Lambda.find(_collections, function(c:Collection) {\r\n            return c.name == collectionName;\r\n        });\r\n\r\n        if (collectionIt == null) {\r\n            throw (\"collectionName = \" + collectionName);\r\n        }\r\n\r\n        collectionIt.remove(provider);\r\n    }\r\n\r\n    public function doAddProvider(provider:Provider, ?collection:Collection = null) {\r\n        _providers.push(provider);\r\n        _propertySlots.set(provider, [\r\n            provider.propertyAdded.connect(function(p, propertyName) {\r\n                providerPropertyAddedHandler(p, collection, propertyName);\r\n            }),\r\n            provider.propertyRemoved.connect(function(p, propertyName) {\r\n                providerPropertyRemovedHandler(p, collection, propertyName);\r\n            }),\r\n            provider.propertyChanged.connect(function(p, propertyName) {\r\n                executePropertySignal(p, collection, propertyName, _propertyChanged, _propertyNameToChangedSignal);\r\n            })\r\n        ]);\r\n\r\n        for (property in provider.keys()) {\r\n            providerPropertyAddedHandler(provider, collection, property);\r\n        }\r\n\r\n        if (collection != null) {\r\n            updateCollectionLength(collection);\r\n        }\r\n    }\r\n\r\n    public function updateCollectionLength(collection:Collection) {\r\n        if (_lengthProvider == null) {\r\n            _lengthProvider = Provider.create();\r\n            doAddProvider(_lengthProvider);\r\n        }\r\n\r\n        _lengthProvider.set(collection.name + \".length\", collection.items.length);\r\n    }\r\n\r\n    public function copyFrom(store:Store, ?deepCopy = false) {\r\n        if (deepCopy) {\r\n            var added = new Array<Provider>();\r\n\r\n            for (collection in store._collections) {\r\n                added = added.concat(collection.items);\r\n                addCollection(Collection.createbyCollection(collection));\r\n            }\r\n\r\n            for (provider in store._providers) {\r\n                //Provider\r\n                var it = Lambda.has(added, provider);\r\n\r\n                if (it == false) {\r\n                    _providers.push(Provider.createbyProvider(provider));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            _collections = new Array<Collection>().concat(store._collections);\r\n            _providers = new Array<Provider>().concat(store._providers);\r\n            if (store._lengthProvider != null) {\r\n                _lengthProvider = Provider.createbyProvider(store._lengthProvider);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public function getOrInsertSignal(signals:StringMap<Signal3<Store, Provider, String>>, propertyName:String) {\r\n        var signal:Signal3<Store, Provider, String>;\r\n        if (!signals.exists(propertyName)) {\r\n            signal = new Signal3<Store, Provider, String>();\r\n            signals.set(propertyName, signal);\r\n        }\r\n        else {\r\n            signal = signals.get(propertyName);\r\n        }\r\n\r\n        return signal;\r\n    }\r\n\r\n\r\n}\r\n","package minko.data;\r\nimport glm.Mat4;\r\nimport glm.Vec4;\r\nimport glm.Vec2;\r\nimport glm.Vec3;\r\nclass UnsafePointerArrayBuffer<R>{\r\n    public var applyFunc:Dynamic->Array<R>;\r\n    public var arrayBuffer:Array<R>;//ArrayBuffer\r\n    public function new():Void {\r\n        \r\n    }\r\n    public function applyDone(value:Dynamic){\r\n        arrayBuffer=applyFunc(value);\r\n    }\r\n    static public function vecInts1(dataValue:Int) {\r\n        return [dataValue];\r\n    }\r\n\r\n    static public function vecInts2(dataValue:Vec2) {\r\n        return  dataValue.toFloatArray().map(function(v) return Math.floor(v));\r\n    }\r\n\r\n    static public function vecInts3(dataValue:Vec3) {\r\n        return  dataValue.toFloatArray().map(function(v) return Math.floor(v));\r\n    }\r\n\r\n    static public function vecInts4(dataValue:Vec4) {\r\n        return dataValue.toFloatArray().map(function(v) return Math.floor(v));\r\n    }\r\n\r\n    static public function vecFloats1(dataValue:Float) {\r\n        return [dataValue];\r\n    }\r\n\r\n    static public function vecFloats2(dataValue:Vec2) {\r\n        return  dataValue.toFloatArray();\r\n    }\r\n\r\n    static public function vecFloats3(dataValue:Vec3) {\r\n        return dataValue.toFloatArray();\r\n    }\r\n\r\n    static public function vecFloats4(dataValue:Vec4) {\r\n        return dataValue.toFloatArray();\r\n    }\r\n\r\n    static public function matFloats(dataValue:Mat4) {\r\n        return dataValue.toFloatArray();\r\n    }\r\n\r\n\r\n    static public function vecsInts1(dataValue:Array<Int>) {\r\n        return dataValue;\r\n    }\r\n\r\n    static public function vecsInts2(dataValue:Array<Vec2>) {\r\n        var tmp = [];\r\n        for (d in dataValue) {\r\n            tmp = tmp.concat(vecInts2(d));\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    static public function vecsInts3(dataValue:Array<Vec3>) {\r\n        var tmp = [];\r\n        for (d in dataValue) {\r\n            tmp = tmp.concat(vecInts3(d));\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    static public function vecsInts4(dataValue:Array<Vec4>) {\r\n        var tmp = [];\r\n        for (d in dataValue) {\r\n            tmp = tmp.concat(vecInts4(d));\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    static public function vecsFloats1(dataValue:Array<Float>) {\r\n        return dataValue;\r\n    }\r\n\r\n    static public function vecsFloats2(dataValue:Array<Vec2>) {\r\n        var tmp = [];\r\n        for (d in dataValue) {\r\n            tmp = tmp.concat(vecFloats2(d));\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    static public function vecsFloats3(dataValue:Array<Vec3>) {\r\n        var tmp = [];\r\n        for (d in dataValue) {\r\n            tmp = tmp.concat(vecFloats3(d));\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    static public function vecsFloats4(dataValue:Array<Vec4>) {\r\n        var tmp = [];\r\n        for (d in dataValue) {\r\n            tmp = tmp.concat(vecFloats4(d));\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    static public function matsFloats(dataValue:Array<Mat4>) {\r\n        var tmp = [];\r\n        for (d in dataValue) {\r\n            tmp = tmp.concat(matFloats(d));\r\n        }\r\n        return tmp;\r\n    }\r\n}\r\nclass UnsafePointer<T> {\r\n    public var value(get,set):T;\r\n    var v:T;\r\n    public function arrayBuffer() :Dynamic {\r\n        return buffer.arrayBuffer;\r\n    }\r\n\r\n    public var buffer:Null<UnsafePointerArrayBuffer<Dynamic>>;\r\n\r\n    function set_value(v){\r\n        this.v=v;\r\n        if(buffer!=null){\r\n            buffer.applyDone(v);\r\n        }\r\n        return this.v;\r\n    }\r\n    function get_value(){\r\n       return this.v ;\r\n    }\r\n    public function new(d:T):Void {\r\n        v=d;\r\n    }\r\n}\r\n","package minko.file;\r\nimport haxe.io.Bytes;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.file.AbstractParser\")\r\nclass AbstractParser {\r\n\r\n    public var _progress:Signal2<AbstractParser, Float>;\r\n    public var _complete:Signal<AbstractParser>;\r\n    public var _error:Signal2<AbstractParser, String>;\r\n\r\n    public function dispose() {\r\n\r\n    }\r\n\r\n\r\n    public var progress(get, null):Signal2<AbstractParser, Float>;\r\n    public var complete(get, null):Signal<AbstractParser>;\r\n    public var error(get, null):Signal2<AbstractParser, String>;\r\n\r\n    function get_progress() {\r\n        return _progress;\r\n    }\r\n\r\n    function get_complete() {\r\n        return _complete;\r\n    }\r\n\r\n    function get_error() {\r\n        return _error;\r\n    }\r\n\r\n    public function parse(filename:String, resolvedFilename:String, options:Options, data:Bytes, assetLibrary:AssetLibrary) {\r\n\r\n    }\r\n\r\n    public function new() {\r\n        this._progress = new Signal2<AbstractParser, Float>();\r\n        this._complete = new Signal<AbstractParser>();\r\n        this._error = new Signal2<AbstractParser, String>();\r\n\r\n    }\r\n\r\n}\r\n","package minko.file;\r\n\r\nimport Lambda;\r\nimport Lambda;\r\nimport assimp.format.Defs;\r\nimport glm.Mat3;\r\nimport assimp.format.Material.AiMaterialTexture;\r\nimport assimp.format.Material.AiTexture;\r\nimport assimp.format.AiMatKeys;\r\nimport assimp.format.Anim.AiKey;\r\nimport assimp.Config.AiComponent;\r\nimport assimp.Assimp;\r\nimport assimp.Assimp;\r\nimport minko.data.Binding.Source;\r\nimport minko.render.Blending.Destination;\r\nimport minko.animation.AbstractTimeline;\r\nimport assimp.format.Defs.AiColor4D;\r\nimport minko.render.TriangleCulling;\r\nimport assimp.format.Material.AiBlendMode;\r\nimport minko.render.Effect;\r\nimport assimp.format.Material.AiShadingMode;\r\nimport minko.material.PhongMaterial;\r\nimport minko.material.BasicMaterial;\r\nimport assimp.Types.AiReturn;\r\nimport minko.render.AbstractTexture;\r\nimport minko.utils.MathUtil;\r\nimport assimp.format.Material.AiString;\r\nimport minko.render.Priority;\r\nimport minko.render.States;\r\nimport assimp.format.Defs.AiQuaternion;\r\nimport assimp.format.Anim.AiQuatKey;\r\nimport assimp.format.Anim.AiVectorKey;\r\nimport assimp.format.Anim.AiNodeAnim;\r\nimport assimp.format.Anim.AiAnimation;\r\nimport assimp.format.Mesh.AiBone;\r\nimport minko.component.MasterAnimation;\r\nimport minko.component.Skinning;\r\nimport minko.animation.Matrix4x4Timeline;\r\nimport minko.component.Animation;\r\nimport minko.geometry.Bone;\r\nimport minko.geometry.Skin;\r\nimport minko.component.SpotLight;\r\nimport minko.component.PointLight;\r\nimport minko.component.DirectionalLight;\r\nimport glm.GLM;\r\nimport assimp.format.Defs.AiColor3D;\r\nimport assimp.format.Light.AiLightSourceType;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Surface;\r\nimport assimp.format.Mesh.AiPrimitiveType;\r\nimport minko.render.VertexBuffer;\r\nimport minko.component.Transform;\r\nimport assimp.format.Defs.AiVector3D;\r\nimport assimp.format.MetaData.AiMetadataType;\r\nimport assimp.format.MetaData.AiMetadataEntry;\r\nimport minko.component.Metadata;\r\nimport minko.component.AbstractAnimation;\r\nimport minko.scene.NodeSet;\r\nimport assimp.format.Scene.AiScene;\r\nimport assimp.AiPostProcessStep;\r\nimport assimp.ProgressHandler;\r\nimport haxe.io.Bytes;\r\nimport glm.Quat;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.IndexBuffer;\r\nimport assimp.format.Material.AiTextureType;\r\nimport assimp.Importer;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nimport minko.signal.Signal.SignalSlot;\r\nimport assimp.format.Material.AiMaterial;\r\nimport minko.material.Material;\r\nimport minko.geometry.Geometry;\r\nimport glm.Mat4;\r\nimport haxe.ds.StringMap;\r\nimport assimp.format.Mesh.AiMesh;\r\nimport assimp.format.Scene.AiNode;\r\nimport haxe.ds.ObjectMap;\r\nimport minko.scene.Node;\r\nimport haxe.ds.IntMap;\r\n\r\ntypedef NodeTransformInfo = minko.Tuple.Tuple3<Node, Array<Mat4>, Mat4>;\r\nclass AbstractASSIMPParser extends AbstractParser {\r\n\r\n\r\n    private var _numDependencies:Int;\r\n    private var _numLoadedDependencies:Int;\r\n    private var _filename:String;\r\n    private var _resolvedFilename:String;\r\n    private var _assetLibrary:AssetLibrary;\r\n    private var _options:Options;\r\n\r\n    private var _symbol:Node;\r\n    private var _nodeToAiNode:ObjectMap<Node, AiNode> ;\r\n    private var _aiNodeToNode:ObjectMap<AiNode, Node> ;\r\n    private var _aiMeshToNode:ObjectMap<AiMesh, Node>;\r\n\r\n    private var _nameToNode:StringMap<Node>;\r\n    private var _nameToAnimMatrices:StringMap<Array<Mat4>>;\r\n    private var _alreadyAnimatedNodes:Array<Node>;//set sort\r\n\r\n    private var _aiMaterialToMaterial:ObjectMap<AiMaterial, Material>;\r\n    private var _aiMeshToGeometry:ObjectMap<AiMesh, Geometry>;\r\n\r\n    private var _meshNames:Array<String>;// = new SortedSet<string>();\r\n    private var _textureFilenameToAssetName:StringMap<String>;\r\n    private var _loaderCompleteSlots:ObjectMap<Loader, SignalSlot<Loader>>;\r\n    private var _loaderErrorSlots:ObjectMap<Loader, SignalSlot2<Loader, String>> ;\r\n    private var _importer:Importer;\r\n    private var _validAssetNames:StringMap<String>;\r\n\r\n\r\n    static public function initializeTextureTypeToName() {\r\n        var typeToString:IntMap<String> = new IntMap();\r\n\r\n        typeToString.set(AiTextureType.diffuse, \"diffuseMap\");\r\n        typeToString.set(AiTextureType.specular, \"specularMap\");\r\n        typeToString.set(AiTextureType.opacity, \"alphaMap\");\r\n        typeToString.set(AiTextureType.normals, \"normalMap\");\r\n        typeToString.set(AiTextureType.reflection, \"environmentMap2d\"); // not sure about this one\r\n        typeToString.set(AiTextureType.lightmap, \"lightMap\");\r\n\r\n        return typeToString;\r\n    }\r\n    public static var _textureTypeToName:IntMap<String> = initializeTextureTypeToName();\r\n    public static var PNAME_TRANSFORM = \"matrix\";\r\n\r\n    public static var MAX_NUM_UV_CHANNELS = 2 ;\r\n\r\n    private static function createIndexBuffer(mesh:AiMesh, context:AbstractContext):IndexBuffer {\r\n        var indexData = [for (i in 0...3 * mesh.numFaces) 0];// new List<T>(3 * mesh.numFaces, 0);\r\n\r\n        for (faceId in 0...mesh.numFaces) {\r\n            var face = mesh.faces[faceId];\r\n\r\n            for (j in 0...3) {\r\n                indexData[j + 3 * faceId] = face.indices[j];\r\n            }\r\n        }\r\n\r\n        return IndexBuffer.createbyData(context, indexData);\r\n    }\r\n\r\n    public static function packColor(color:Vec4) {\r\n        return Vec4.dot(color, new Vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\r\n    }\r\n\r\n    private var createMeshSurface_id:Int;\r\n\r\n\r\n    public function new() {\r\n        super();\r\n        this.createMeshSurface_id=0;\r\n        this._numDependencies = 0;\r\n        this._numLoadedDependencies = 0;\r\n        this._filename = \"\";\r\n        this._assetLibrary = null;\r\n        this._options = null;\r\n        this._symbol = null;\r\n        this._nodeToAiNode = new ObjectMap<Node, AiNode>();\r\n        this._aiNodeToNode = new ObjectMap<AiNode, Node>();\r\n        this._aiMeshToNode = new ObjectMap<AiMesh, Node>();\r\n        this._nameToNode = new StringMap<Node>();\r\n        this._nameToAnimMatrices = new StringMap<Array<Mat4>>();\r\n        this._alreadyAnimatedNodes = new Array<Node>();\r\n        this._meshNames = new Array<String>();\r\n        this._textureFilenameToAssetName=new StringMap<String>();\r\n        this._loaderCompleteSlots = new ObjectMap<Loader, SignalSlot<Loader>>();\r\n        this._loaderErrorSlots = new ObjectMap<Loader, SignalSlot2<Loader, String>>();\r\n        this._validAssetNames= new StringMap<String>();\r\n\r\n        this._aiMaterialToMaterial=new ObjectMap<AiMaterial, Material>();\r\n        this._aiMeshToGeometry=new ObjectMap<AiMesh, Geometry>();\r\n        this._importer = null;\r\n    }\r\n\r\n    public function provideLoaders(importer:Importer):Void {\r\n\r\n    }\r\n\r\n    override public function dispose() {\r\n        _importer = null;\r\n    }\r\n\r\n\r\n\r\n    override public function parse(filename:String, resolvedFilename:String, options:Options, data:Bytes, assetLibrary:AssetLibrary) {\r\n\r\n            nextParse(filename, resolvedFilename, options, data, assetLibrary,[]);\r\n\r\n\r\n    }\r\n    function nextParse(filename:String, resolvedFilename:String, options:Options, data:Bytes, assetLibrary:AssetLibrary,  buffers:Array<Bytes>) {\r\n        var pos = resolvedFilename.lastIndexOf(\"\\\\/\");\r\n        options = options.clone();\r\n        if (pos > 0) {\r\n            options.includePaths.push(resolvedFilename.substring(0, pos));\r\n        }\r\n\r\n        _filename = filename;\r\n        _resolvedFilename = resolvedFilename;\r\n        _assetLibrary = assetLibrary;\r\n        _options = options;\r\n\r\n        initImporter();\r\n\r\n        //fixme : find a way to handle loading dependencies asynchronously\r\n        var ioHandlerOptions = options.clone();\r\n        ioHandlerOptions.loadAsynchronously = (false);\r\n\r\n        var ioHandler = new IOHandler(ioHandlerOptions, _assetLibrary, _resolvedFilename);\r\n        ioHandler.errorFunction(function(self, filename, error) {\r\n            _error.execute(this, \"MissingAssetDependency\" + filename + error);\r\n        });\r\n\r\n        _importer.ioHandler = (ioHandler);\r\n        var progressHandler = new ProgressHandler();\r\n        progressHandler.progressFunction(function(progress) {\r\n            this.progress.execute(this, progress);\r\n        });\r\n        _importer.progressHandler = (progressHandler);\r\n\r\n        // Sample_005339_08932_25_14 gltf 加载 一起是 900mb内存\r\n        //启动 230mb\r\n        //这里用了 300mb 内存\r\n        var scene:AiScene = importScene(filename, resolvedFilename, options, data, assetLibrary,buffers);\r\n\r\n        if (scene == null) {\r\n            return;\r\n        }\r\n        trace(\"parseDependencies\");\r\n\r\n\r\n        //这里用了 400mb内存\r\n        parseDependencies(resolvedFilename, scene);\r\n        if (_numDependencies == 0) {\r\n            trace(\"allDependenciesLoaded\");\r\n\r\n            //\r\n            allDependenciesLoaded(scene);\r\n        }\r\n\r\n    }\r\n\r\n    public function importScene(filename:String, resolvedFilename:String, options:Options, data:Bytes, assetLibrary:AssetLibrary,  buffers:Array<Bytes>):AiScene {\r\n        //gltf\r\n        var scene:AiScene = _importer.readFileFromMemory(data, 0, File.getExtension(filename),buffers);\r\n\r\n        if (scene == null) {\r\n            _error.execute(this, (_importer.getErrorString()));\r\n\r\n            return null;\r\n        }\r\n\r\n        return scene;\r\n    }\r\n\r\n    public function getPostProcessingFlags(scene:AiScene, options:Options):Int {\r\n        if (scene.numMeshes == 0) {\r\n            return 0 ;\r\n        }\r\n\r\n        var numMaterials = scene.numMaterials;\r\n        var numTextures = scene.numTextures;\r\n        for (materialId in 0...numMaterials) {\r\n            var aiMat = scene.materials[materialId];\r\n            for (textureType in AbstractASSIMPParser._textureTypeToName.keys()) {\r\n                numTextures += aiMat.getMaterialTextureCount(textureType);\r\n            }\r\n        }\r\n\r\n        var flags = AiPostProcessStep.JoinIdenticalVertices | AiPostProcessStep.GenSmoothNormals | AiPostProcessStep.LimitBoneWeights | AiPostProcessStep.GenUVCoords | AiPostProcessStep.FlipUVs | AiPostProcessStep.SortByPType | AiPostProcessStep.Triangulate | AiPostProcessStep.ImproveCacheLocality | AiPostProcessStep.FindInvalidData | AiPostProcessStep.ValidateDataStructure | AiPostProcessStep.RemoveComponent;\r\n\r\n        if (options.optimizeForRendering) {\r\n            flags |= AiPostProcessStep.SplitLargeMeshes;\r\n        }\r\n\r\n        var removeComponentFlags = 0;\r\n        if (numMaterials == 0 || numTextures == 0) {\r\n            removeComponentFlags |= AiComponent.TANGENTS_AND_BITANGENTS;\r\n        }\r\n\r\n        _importer.set(Assimp.AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE, options.normalMaxSmoothingAngle);\r\n        _importer.set(Assimp.AI_CONFIG_PP_RVC_FLAGS, removeComponentFlags);\r\n\r\n        if (!options.preserveMaterials) {\r\n            // this flags discards unused materials in addition to\r\n            // removing duplicated ones\r\n            flags |= AiPostProcessStep.RemoveRedundantMaterials;\r\n        }\r\n\r\n        return flags;\r\n    }\r\n\r\n    public function applyPostProcessing(scene:AiScene, postProcessingFlags) {\r\n        //todo\r\n        var processedScene:AiScene = _importer.applyPostProcessing(postProcessingFlags);\r\n\r\n        return processedScene;\r\n    }\r\n\r\n    public function allDependenciesLoaded(scene:AiScene) {\r\n\r\n        var processedScene = scene;\r\n\r\n        var postProcessingFlags = getPostProcessingFlags(scene, _options);\r\n\r\n        if (postProcessingFlags != 0) {\r\n            processedScene = applyPostProcessing(scene, postProcessingFlags);\r\n        }\r\n\r\n        if (processedScene == null) {\r\n            _error.execute(this, (_importer.getErrorString()));\r\n\r\n            return;\r\n        }\r\n        trace(\"convertScene\");\r\n        convertScene(scene);\r\n    }\r\n\r\n    public function initImporter() {\r\n        if (_importer != null) {\r\n            return;\r\n        }\r\n\r\n        _importer = new Importer();\r\n\r\n      //  #if ( ASSIMP_BUILD_NO_IMPORTER_INSTANCIATION)\r\n\t\tprovideLoaders( _importer);\r\n\t//#end\r\n\r\n        _importer.set(Assimp.AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS, _options.includeAnimation);\r\n    }\r\n\r\n    public function convertScene(scene:AiScene) {\r\n        LOG_DEBUG(_numDependencies + \" dependencies loaded!\");\r\n\r\n        #if DEBUG\r\n\t\tif (_numDependencies != _numLoadedDependencies)\r\n\t\t{\r\n\t\t\tthrow std::logic_error(\"_numDependencies != _numLoadedDependencies\");\r\n\t\t}\r\n\t#end\r\n\r\n        var symbolRootName = File.removePrefixPathFromFilename(_filename);\r\n        trace(\"createNode\");\r\n        _symbol = createNode(scene, null, symbolRootName);\r\n        trace(\"createSceneTree\");\r\n        createSceneTree(_symbol, scene, scene.rootNode, _options.assetLibrary);\r\n\r\n        if (_options.preserveMaterials) {\r\n            trace(\"createUnusedMaterials\");\r\n            createUnusedMaterials(scene, _options.assetLibrary, _options);\r\n        }\r\n\r\n        #if DEBUG_ASSIMP\r\n\t\tprintNode(std::cout << \"\\n\", _symbol, 0) << std::endl;\r\n\t#end\r\n        trace(\"createLights\");\r\n        createLights(scene);\r\n        trace(\"createCameras\");\r\n        createCameras(scene);\r\n\r\n        if (_options.includeAnimation) {\r\n            trace(\"createSkins\");\r\n            createSkins(scene);\r\n            trace(\"createAnimations\");\r\n            createAnimations(scene, true);\r\n        }\r\n\r\n        #if DEBUG_ASSIMP\r\n\t\tprintNode(std::cout << \"\\n\", _symbol, 0) << std::endl;\r\n\t#end\r\n\r\n        #if DEBUG_ASSIMP_DOT\r\n\t\tdotPrint(\"aiscene.dot\", scene);\r\n\t\tdotPrint(\"minkoscene.dot\", _symbol);\r\n\t#end\r\n\r\n        // file::Options::nodeFunction\r\n        trace(\"applyFunc\");\r\n        applyFunc(_symbol, _options.nodeFunction);\r\n\r\n        if (_options.includeAnimation) {\r\n            // file::Options::startAnimation\r\n            var animations:NodeSet = NodeSet.createbyNode(_symbol).descendants(true).where(function(n:Node) {\r\n                return n.hasComponent(AbstractAnimation);\r\n            });\r\n            for (n in animations.nodes) {\r\n                if (_options.startAnimation) {\r\n                    var ani:AbstractAnimation = cast n.getComponent(AbstractAnimation);\r\n                    ani.play();\r\n                }\r\n                else {\r\n                    var ani:AbstractAnimation = cast n.getComponent(AbstractAnimation);\r\n                    ani.stop();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_numDependencies == _numLoadedDependencies) {\r\n            trace(\"finalize\");\r\n            finalize();\r\n        }\r\n    }\r\n\r\n    public function createNode(scene:AiScene, node:AiNode, name:String):Node {\r\n        var metadata = new Metadata();\r\n\r\n        if (node == null || !parseMetadata(scene, node, _options, metadata.data)) {\r\n            return Node.create(name);\r\n        }\r\n\r\n        var minkoNode = new Node();\r\n\r\n        var uuidIt = metadata.has(\"minko_uuid\");\r\n\r\n        if (uuidIt != false) {\r\n            minkoNode = Node.create(name);\r\n            minkoNode.uuid = metadata.get(\"minko_uuid\");\r\n        }\r\n        else {\r\n            minkoNode = Node.create(name);\r\n        }\r\n\r\n        for (entry in metadata.keys()) {\r\n            _options.attributeFunction(minkoNode, entry, metadata.get(entry));\r\n        }\r\n\r\n        minkoNode.addComponent(Metadata.create(metadata.data));\r\n\r\n        return minkoNode;\r\n    }\r\n\r\n    public function createSceneTree(minkoNode:Node, scene:AiScene, ainode:AiNode, assets:AssetLibrary) {\r\n        minkoNode.addComponent(getTransformFromAssimp(ainode));\r\n\r\n        // create surfaces for each node mesh\r\n        for (j in 0...ainode.numMeshes) {\r\n            var aimesh:AiMesh = scene.meshes[ainode.meshes[j]];\r\n            if (aimesh == null) {\r\n                continue;\r\n            }\r\n\r\n            _aiMeshToNode.set(aimesh, minkoNode);\r\n            createMeshSurface(minkoNode, scene, aimesh);\r\n        }\r\n\r\n        // traverse the node's children\r\n        for (i in 0...ainode.numChildren) {\r\n            var aichild:AiNode = ainode.children[i];\r\n            if (aichild == null) {\r\n                continue;\r\n            }\r\n\r\n            var childName = aichild.name;\r\n            var childNode = createNode(scene, aichild, childName);\r\n\r\n            _nodeToAiNode.set(childNode, aichild);\r\n            _aiNodeToNode.set(aichild, childNode);\r\n            if (childName != null) {\r\n                _nameToNode.set(childName, childNode);\r\n            }\r\n\r\n            //Recursive call\r\n            createSceneTree(childNode, scene, aichild, assets);\r\n\r\n            minkoNode.addChild(childNode);\r\n        }\r\n    }\r\n\r\n\r\n    public function parseMetadata(scene:AiScene, ainode:AiNode, options:Options, metadata:StringMap<String>) {\r\n        if (ainode.metaData == null) {\r\n            return false;\r\n        }\r\n\r\n        for (key in ainode.metaData.keys()) {\r\n            var data:AiMetadataEntry< Any> = ainode.metaData.get(key);\r\n            var dataString = \"\";\r\n            switch (data.type)\r\n            {\r\n                case AiMetadataType.AISTRING:\r\n                    dataString = cast data.data;\r\n                case AiMetadataType.AIVECTOR3D:\r\n                    {\r\n                        var vec3:AiVector3D = cast (data.data);\r\n                        dataString = vec3.toString();\r\n                    }\r\n                case AiMetadataType.BOOL:\r\n                    dataString = Std.string(data.data);\r\n                case AiMetadataType.FLOAT:\r\n                    dataString = Std.string(data.data);\r\n                case AiMetadataType.INT32:\r\n                    dataString = Std.string(data.data);\r\n                case AiMetadataType.UINT64:\r\n                    dataString = Std.string(data.data);\r\n                default: {\r\n\r\n                }\r\n            }\r\n\r\n            metadata.set(key, dataString);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public function applyFunc(node:Node, func:Node -> Node):Void {\r\n        func(node);\r\n\r\n        if (node != null) {\r\n            for (n in node.children) {\r\n                applyFunc(n, func);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public function getTransformFromAssimp(ainode:AiNode):Transform {\r\n        return Transform.createbyMatrix4(convertMat4(ainode.transformation));\r\n    }\r\n\r\n    public function createMeshGeometry(minkoNode:Node, mesh:AiMesh, meshName:String):Geometry {\r\n        var existingGeometry = _aiMeshToGeometry.exists(mesh);\r\n\r\n        if (existingGeometry != false) {\r\n            return _aiMeshToGeometry.get(mesh);\r\n        }\r\n\r\n        var vertexSize = 0;\r\n\r\n        if (mesh.hasPositions()) {\r\n            vertexSize += 3;\r\n        }\r\n        if (mesh.hasNormals()) {\r\n            vertexSize += 3 ;\r\n        }\r\n        if (mesh.getNumUVChannels() > 0) {\r\n            vertexSize += Math.floor(Math.min(mesh.getNumUVChannels() * 2, AbstractASSIMPParser.MAX_NUM_UV_CHANNELS * 2));\r\n        }\r\n        if (mesh.hasVertexColors(0)) {\r\n            vertexSize += 4;\r\n        }\r\n\r\n        var vertexData = [for (i in 0...vertexSize * mesh.numVertices) 0.0];//new List<float>(vertexSize * mesh.numVertices, 0.0f);\r\n        var vId = 0;\r\n        for (vertexId in 0... mesh.numVertices) {\r\n            if (mesh.hasPositions()) {\r\n                var vec:AiVector3D = mesh.vertices[vertexId];\r\n                vertexData[vId++] = vec.x;\r\n                vertexData[vId++] = vec.y;\r\n                vertexData[vId++] = vec.z;\r\n            }\r\n\r\n            if (mesh.hasNormals()) {\r\n                var vec:AiVector3D = mesh.normals[vertexId];\r\n                vertexData[vId++] = vec.x;\r\n                vertexData[vId++] = vec.y;\r\n                vertexData[vId++] = vec.z;\r\n            }\r\n\r\n            for (i in 0...Math.floor(Math.min(mesh.getNumUVChannels(), AbstractASSIMPParser.MAX_NUM_UV_CHANNELS))) {\r\n                var vec:AiVector3D = mesh.textureCoords[i][vertexId];\r\n                vertexData[vId++] = vec.x;\r\n                vertexData[vId++] = vec.y;\r\n            }\r\n\r\n            if (mesh.hasVertexColors(0)) {\r\n                var color = mesh.colors[0][vertexId];\r\n                var packedColor = new Vec4(color.r, color.g, color.b, color.a);\r\n                vertexData[vId++] = packedColor.r;\r\n                vertexData[vId++] = packedColor.g;\r\n                vertexData[vId++] = packedColor.b;\r\n                vertexData[vId++] = packedColor.a;\r\n            }\r\n        }\r\n\r\n        var indices:IndexBuffer = null;\r\n        var numIndices = mesh.numFaces * 3;\r\n        if (_options.optimizeForRendering || numIndices <= (Math.POSITIVE_INFINITY)) {\r\n            indices = createIndexBuffer(mesh, _assetLibrary.context);\r\n        }\r\n        else {\r\n            indices = createIndexBuffer(mesh, _assetLibrary.context);\r\n        }\r\n\r\n        // create the geometry's vertex and index buffers\r\n        var geometry = Geometry.create();\r\n        var vertexBuffer = VertexBuffer.createbyData(_assetLibrary.context, vertexData);\r\n        var attrOffset = 0;\r\n        if (mesh.hasPositions()) {\r\n            vertexBuffer.addAttribute(\"position\", 3, attrOffset);\r\n            attrOffset += 3 ;\r\n        }\r\n        if (mesh.hasNormals()) {\r\n            vertexBuffer.addAttribute(\"normal\", 3, attrOffset);\r\n            attrOffset += 3 ;\r\n        }\r\n        for (i in 0...Math.floor(Math.min(mesh.getNumUVChannels(), AbstractASSIMPParser.MAX_NUM_UV_CHANNELS))) {\r\n            var attributeName = \"uv\" + (i > 0 ? Std.string(i) : \"\");\r\n            vertexBuffer.addAttribute(attributeName, 2, attrOffset);\r\n            attrOffset += 2 ;\r\n        }\r\n        if (mesh.hasVertexColors(0)) {\r\n            vertexBuffer.addAttribute(\"color\", 4, attrOffset);\r\n            attrOffset += 4 ;\r\n        }\r\n\r\n        geometry.addVertexBuffer(vertexBuffer);\r\n        geometry.indices = (indices);\r\n        geometry = _options.geometryFunction(meshName, geometry);\r\n        _aiMeshToGeometry.set(mesh, geometry) ;\r\n        _assetLibrary.setGeometry(meshName, geometry);\r\n        return geometry;\r\n    }\r\n\r\n    public function getValidAssetName(name:String):String {\r\n        var validAssetNameIt = _validAssetNames.exists(name);\r\n        if (validAssetNameIt != false) {\r\n            return _validAssetNames.get(name);\r\n        }\r\n        var validAssetName:String = name;\r\n        validAssetName = File.removePrefixPathFromFilename(validAssetName);\r\n        //todo\r\n        var invalidSymbolRegex = ~/[^a-zA-Z0-9_\\.-]+/g;\r\n        validAssetName = invalidSymbolRegex.replace(validAssetName, \"\");\r\n        _validAssetNames.set(name, validAssetName);\r\n        return validAssetName;\r\n    }\r\n\r\n    public function getMaterialName(materialName:String) {\r\n        return getValidAssetName(materialName);\r\n    }\r\n\r\n    public function getMeshName(meshName:String) {\r\n        return getValidAssetName(meshName);\r\n    }\r\n    inline function LOG_ERROR(arg):Void {\r\n        throw \"LOG_ERROR\"+arg;\r\n    }\r\n    inline function LOG_WARNING(arg):Void {\r\n        trace(\"LOG_WARNING\"+arg);\r\n    }\r\n    inline function LOG_DEBUG(arg):Void {\r\n        trace(\"LOG_DEBUG\"+arg);\r\n    }\r\n    public function createMeshSurface(minkoNode:Node, scene:AiScene, mesh:AiMesh):Void {\r\n        if (mesh == null) {\r\n            return;\r\n        }\r\n\r\n        var meshName = getMeshName(mesh.name);\r\n\r\n        var primitiveType = mesh.primitiveTypes;\r\n\r\n        if (primitiveType != AiPrimitiveType.TRIANGLE) {\r\n            LOG_WARNING(\"primitive type for mesh '\" + meshName + \"' is not TRIANGLE\");\r\n\r\n            return;\r\n        }\r\n\r\n        var realMeshName = meshName;\r\n        //\tstatic int id = 0;\r\n\r\n        while (Lambda.has(_meshNames, realMeshName)) {\r\n            realMeshName = meshName + \"_\" + (createMeshSurface_id++);\r\n        }\r\n\r\n        _meshNames.push(realMeshName);\r\n\r\n        var aiMat = scene.materials[mesh.materialIndex];\r\n        var geometry = createMeshGeometry(minkoNode, mesh, realMeshName);\r\n        var material = createMaterial(aiMat);\r\n        var effect = chooseEffectByShadingMode(aiMat);\r\n\r\n        minkoNode.addComponent(Surface.create(geometry, material, effect, \"default\", realMeshName));\r\n    }\r\n\r\n    public function createCameras(scene:AiScene) {\r\n        for (i in 0... scene.numCameras) {\r\n            var aiCamera = scene.cameras[i];\r\n            var aiPosition = aiCamera.position;\r\n            var aiLookAt = aiCamera.lookAt;\r\n            var aiUp = aiCamera.up;\r\n\r\n            var cameraName = aiCamera.name;\r\n\r\n            var cameraNode:Node = cameraName != null ? findNode(cameraName) : null;\r\n\r\n            if (cameraNode != null) {\r\n                var half_fovy:Float = Math.atan(Math.tan(aiCamera.horizontalFOV * .5) * aiCamera.aspect);\r\n\r\n                cameraNode.addComponent(PerspectiveCamera.create(aiCamera.aspect, half_fovy, aiCamera.clipPlaneNear, aiCamera.clipPlaneFar));\r\n                if (!cameraNode.hasComponent(Transform)) {\r\n                    cameraNode.addComponent(Transform.create());\r\n                }\r\n\r\n                // cameraNode->component<Transform>()->matrix(math::inverse(math::lookAt(\r\n                // \tmath::vec3(aiPosition.x, aiPosition.y, aiPosition.z),\r\n                // \tmath::vec3(aiLookAt.x, aiLookAt.y, aiLookAt.z),\r\n                // \tmath::vec3(aiUp.x, aiUp.y, aiUp.z)\r\n                // )));\r\n            }\r\n        }\r\n    }\r\n\r\n    public function createUnusedMaterials(scene:AiScene, assetLibrary:AssetLibrary, options:Options):Void {\r\n        for (i in 0...scene.numMaterials) {\r\n            var aiMaterial = scene.materials[i];\r\n\r\n            createMaterial(aiMaterial);\r\n        }\r\n    }\r\n\r\n    public function createLights(scene:AiScene):Void {\r\n        for (i in 0...scene.numLights) {\r\n            var aiLight = scene.lights[i];\r\n            var lightName = aiLight.name;\r\n\r\n            if (aiLight.type == AiLightSourceType.UNDEFINED) {\r\n                LOG_WARNING(\"The type of the '\" + lightName + \"' has not been properly recognized.\");\r\n                continue;\r\n            }\r\n\r\n            var lightNode:Node = findNode(lightName);\r\n\r\n            if (lightNode == null) {\r\n                continue;\r\n            }\r\n\r\n            //// specular colors are ignored (diffuse colors are sent to discrete lights, ambient colors create ambient lights)\r\n            //const aiColor3D& aiAmbientColor = aiLight->mColorAmbient;\r\n            //if (!aiAmbientColor.IsBlack())\r\n            //{\r\n            //\tauto ambientLight = AmbientLight::create()\r\n            //\t\t->ambient(1.0f)\r\n            //\t\t->color(Vector3::create(aiAmbientColor.r, aiAmbientColor.g, aiAmbientColor.b));\r\n\r\n            //\tlightNode->addComponent(ambientLight);\r\n            //}\r\n\r\n            var aiDiffuseColor:AiColor3D = aiLight.colorDiffuse;\r\n            var aiDirection:AiVector3D = aiLight.direction;\r\n            var aiPosition:AiVector3D = aiLight.position;\r\n\r\n            if (aiDirection.length() > 0.0) {\r\n                var direction = new Vec3(aiDirection.x, aiDirection.y, aiDirection.z);\r\n                var position = new Vec3(aiPosition.x, aiPosition.y, aiPosition.z);\r\n\r\n                var transform:Transform = cast lightNode.getComponent(Transform);\r\n                if (transform != null) {\r\n                    direction = MathUtil.mat4_mat3(transform.matrix) * direction;\r\n                    position = MathUtil.vec4_vec3(transform.matrix * MathUtil.vec3_vec4(position, 1.0));\r\n                }\r\n                else {\r\n                    lightNode.addComponent(Transform.create());\r\n                }\r\n\r\n                var lookAt = position + direction;\r\n                lookAt = !MathUtil.vec3_equals(lookAt, new Vec3()) ? Vec3.normalize(lookAt, new Vec3()) : lookAt;\r\n\r\n                var matrix = GLM.lookAt(position, lookAt, new Vec3(0.0, 1.0, 0.0), new Mat4());\r\n                transform.matrix = matrix;\r\n            }\r\n\r\n            var diffuse = 1.0;\r\n            var specular = 1.0;\r\n            var color:Vec3 = new Vec3(aiDiffuseColor.r, aiDiffuseColor.g, aiDiffuseColor.b);\r\n\r\n            switch (aiLight.type)\r\n            {\r\n                case AiLightSourceType.DIRECTIONAL:\r\n                    var dir = DirectionalLight.create(diffuse, specular);\r\n                    dir.color = (color);\r\n                    lightNode.addComponent(dir);\r\n                case AiLightSourceType.POINT:\r\n                    var point = PointLight.create(diffuse, specular, aiLight.attenuationConstant, aiLight.attenuationLinear, aiLight.attenuationQuadratic);\r\n                    point.color = (color);\r\n                    lightNode.addComponent(point);\r\n                case AiLightSourceType.SPOT:\r\n                    var spot = SpotLight.create(aiLight.angleInnerCone, aiLight.angleOuterCone, diffuse, specular, aiLight.attenuationConstant, aiLight.attenuationLinear, aiLight.attenuationQuadratic);\r\n                    spot.color = (color);\r\n                    lightNode.addComponent(spot);\r\n                default: {\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public function findNode(name:String):Node {\r\n        var foundNodeIt = _nameToNode.exists(name);\r\n        return foundNodeIt != false ? _nameToNode.get(name) : null;\r\n    }\r\n\r\n    public function parseDependencies(filename:String, scene:AiScene):Void {\r\n\r\n\r\n        _numDependencies = 0;\r\n        var path:AiMaterialTexture = new AiMaterialTexture();\r\n        for (materialId in 0... scene.numMaterials) {\r\n            var aiMat:AiMaterial = scene.materials[materialId];\r\n\r\n            for (textureType in AbstractASSIMPParser._textureTypeToName.keys()) {\r\n                var numTextures = aiMat.getMaterialTextureCount(textureType);\r\n\r\n                for (textureId in 0...numTextures) {\r\n                    //todo path\r\n                    var texFound:Bool = aiMat.getMaterialTexture(textureType, textureId, path);\r\n\r\n                    if (texFound) {\r\n                        var filename = path.file;\r\n\r\n                        if (filename == null) {\r\n                            continue;\r\n                        }\r\n\r\n                        var assetName = File.removePrefixPathFromFilename(filename);\r\n\r\n                        _textureFilenameToAssetName.set(filename, assetName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _numDependencies = Lambda.count(_textureFilenameToAssetName);\r\n\r\n        for (filenameToAssetNamePair in _textureFilenameToAssetName.keys()) {\r\n            loadTexture(filenameToAssetNamePair, _textureFilenameToAssetName.get(filenameToAssetNamePair), _options, scene);\r\n        }\r\n    }\r\n\r\n\r\n    public function finalize() {\r\n        Lambda.iter(_loaderCompleteSlots, function(l:SignalSlot<Loader>) {\r\n            l.dispose();\r\n        });\r\n        Lambda.iter(_loaderErrorSlots, function(l:SignalSlot2<Loader, String>) {\r\n            l.dispose();\r\n        });\r\n        _loaderCompleteSlots = new ObjectMap<Loader, SignalSlot<Loader>>();\r\n        _loaderErrorSlots = new ObjectMap<Loader, SignalSlot2<Loader, String>>() ;\r\n\r\n        _assetLibrary.setSymbol(_filename, _symbol);\r\n\r\n        complete.execute(this);\r\n\r\n\r\n    }\r\n\r\n    public function loadTexture(textureFilename:String, assetName:String, options:Options, scene:AiScene) {\r\n        var textureParentPrefixPath = File.extractPrefixPathFromFilename(_resolvedFilename);\r\n\r\n        var texturePrefixPath = File.extractPrefixPathFromFilename(textureFilename);\r\n\r\n        var loader = Loader.create();\r\n\r\n        loader.options = (options.clone());\r\n\r\n        //loader.options.includePaths.push(textureParentPrefixPath + \"/\" + texturePrefixPath);\r\n        loader.options.includePaths=[textureParentPrefixPath + \"/\" + texturePrefixPath];\r\n        _loaderCompleteSlots.set(loader, loader.complete.connect(function(l:Loader) {\r\n            textureCompleteHandler(l, scene);\r\n        }));\r\n\r\n\r\n        _loaderErrorSlots.set(loader, loader.error.connect(function(textureLoader, error) {\r\n            ++_numLoadedDependencies;\r\n            LOG_DEBUG(\"Unable to find texture with filename '\" + assetName + \"'\");\r\n\r\n            _error.execute(this, (\"MissingTextureDependency\" + assetName));\r\n\r\n            if (_numDependencies == _numLoadedDependencies) {\r\n                allDependenciesLoaded(scene);\r\n            }\r\n        }));\r\n\r\n        loader.queue(assetName).load();\r\n    }\r\n\r\n\r\n\r\n    public function textureCompleteHandler(loader:Loader, scene:AiScene) {\r\n        LOG_DEBUG(_numLoadedDependencies + \"/\" + _numDependencies + \" texture(s) loaded\");\r\n\r\n        ++_numLoadedDependencies;\r\n\r\n        if (_numDependencies == _numLoadedDependencies) {\r\n            allDependenciesLoaded(scene);\r\n        }\r\n    }\r\n\r\n\r\n    public function getSkinNumFrames(aimesh:AiMesh):Int {\r\n//Debug.Assert(aimesh != null && _aiMeshToNode.count(aimesh) > 0);\r\n        var minkoMesh = _aiMeshToNode.get(aimesh);\r\n        var meshNode = minkoMesh.parent ;\r\n//Debug.Assert(meshNode);\r\n\r\n        var numFrames = 0;\r\n\r\n        for (boneId in 0... aimesh.numBones) {\r\n            var currentNode = findNode(aimesh.bones[boneId].name);\r\n            do {\r\n                if (currentNode == null) {\r\n                    break;\r\n                }\r\n\r\n                if (_nameToAnimMatrices.exists(currentNode.name)  ) {\r\n                    var numNodeFrames = Lambda.count(_nameToAnimMatrices.get(currentNode.name));\r\n//Debug.Assert(numNodeFrames > 0);\r\n\r\n                    if (numFrames == 0) {\r\n                        numFrames = numNodeFrames;\r\n                    }\r\n                    else if (numFrames != numNodeFrames) {\r\n                        LOG_WARNING(\"Inconsistent number of frames between the different parts of a same mesh!\");\r\n                        numFrames = Math.floor(Math.max(numFrames, numNodeFrames)); // FIXME\r\n                    }\r\n                }\r\n                currentNode = currentNode.parent ;\r\n            } while (currentNode != meshNode);\r\n        }\r\n\r\n        return numFrames;\r\n    }\r\n\r\n    public function createSkins(aiscene:AiScene) {\r\n        if (_options.skinningFramerate == 0) {\r\n            return;\r\n        }\r\n\r\n        // resample all animations with the specified temporal precision\r\n        // and store them in the _nameToAnimMatrices map.\r\n        sampleAnimations(aiscene);\r\n\r\n        // add a Skinning component to all animated mesh\r\n        for (meshId in 0...aiscene.numMeshes) {\r\n            createSkin(aiscene.meshes[meshId]);\r\n        }\r\n    }\r\n\r\n    public function createSkin(aimesh:AiMesh) {\r\n        if (aimesh == null || aimesh.numBones == 0) {\r\n            return;\r\n        }\r\n\r\n        var meshName = aimesh.name ;\r\n        if (!_aiMeshToNode.exists(aimesh)) {\r\n            return;\r\n        }\r\n\r\n\r\n        var supposedSkeletonRoot = getSkeletonRoot(aimesh);\r\n\r\n        var meshNode = _aiMeshToNode.get(aimesh);\r\n        var numBones = aimesh.numBones;\r\n        var numFrames = getSkinNumFrames(aimesh);\r\n\r\n        if (numFrames == 0) {\r\n            LOG_WARNING(\"Failed to flatten skinning information. Most likely involved nodes do not share a common animation.\");\r\n            return;\r\n        }\r\n        var duration = Std.int(Math.floor(1e+3 * numFrames / _options.skinningFramerate)); // in milliseconds\r\n        var skin:Skin = Skin.create(numBones, duration, numFrames);\r\n        var skeletonRoot = getSkeletonRoot(aimesh); //findNode(\"ALL\");\r\n        var boneTransforms = [];// new List<List<float>>(numBones, new List<float>(numFrames * 16, 0.0f));\r\n       /// var modelToRootMatrices = [for (i in 0...numFrames) Mat4.identity(new Mat4())];// new List<math.mat4>(numFrames);\r\n\r\n        var boneNodes:Array<Node> = [];// new List<scene.Node.Ptr>();\r\n//\r\n//for  (  m in modelToRootMatrices)\r\n//{\r\n//m = math.mat4();\r\n//}\r\n\r\n        for (boneId in 0...numBones) {\r\n            var bone:Bone = createBone(aimesh.bones[boneId]);\r\n            var boneName = (aimesh.bones[boneId].name);\r\n            var node = _nameToNode.get(boneName);\r\n            boneNodes.push(node);\r\n            if (bone == null) {\r\n                return;\r\n            }\r\n\r\n            var boneOffsetMatrix = bone.offsetMatrix;\r\n//            if( boneId ==23){\r\n//                trace(\"\");\r\n//            }\r\n            var modelToRootMatrices = [for (i in 0...numFrames) Mat4.identity(new Mat4())];\r\n            precomputeModelToRootMatrices(node, skeletonRoot, modelToRootMatrices);\r\n            skin.setBone(boneId, bone);\r\n\r\n            for (frameId in 0...numFrames) {\r\n                var dest1:Mat4= modelToRootMatrices[frameId] * boneOffsetMatrix;\r\n//                if(frameId==300 &&boneId ==23){\r\n//                    trace(\"\");\r\n//                }\r\n                skin.setMatrix(frameId, boneId,dest1);\r\n            }\r\n        }\r\n\r\n        // also find all bone children that must also be animated and synchronized with the\r\n        // skinning component.\r\n//        var slaves:Array<Node> = [];//new SortedSet<Node.Ptr>();\r\n//        var slaveAnimations:Array<Animation> = [];// new List<Animation.Ptr>();\r\n//\r\n//        for (boneId in 0... numBones) {\r\n//            var childrenWithSurface:NodeSet = NodeSet.createbyNode(boneNodes[boneId]).descendants(true).where(function(n:Node) {\r\n//                return n.hasComponent(Surface);\r\n//            });\r\n//\r\n//            slaves = slaves.concat(childrenWithSurface.nodes);\r\n//        }\r\n//\r\n//        var timetable = [for (i in 0...numFrames) 0];//new List<@uint>(numFrames, 0);\r\n//        for (i in 0...numFrames) {\r\n//            timetable[i] = Std.int(Math.floor(i * duration / (numFrames - 1)));\r\n//        }\r\n//\r\n//        slaves.reverse();\r\n//        // slaveAnimations.Capacity = slaves.Count;\r\n//        for (n in slaves) {\r\n//            var matrices = [for (m in 0...numFrames)  Mat4.identity(new Mat4())];//new List<math.mat4>(numFrames);\r\n////        foreach (var m in matrices)\r\n////        {\r\n////        m = math.mat4();\r\n////        }\r\n//\r\n//            precomputeModelToRootMatrices(n, skeletonRoot, matrices);\r\n//\r\n//            var timeline = Matrix4x4Timeline.create(AbstractASSIMPParser.PNAME_TRANSFORM, duration, timetable, matrices);\r\n//            var animation = Animation.create([timeline]);\r\n//\r\n//            n.addComponent(animation);\r\n//            slaveAnimations.push(animation);\r\n//            _alreadyAnimatedNodes.push(n);\r\n//        }\r\n\r\n        // for (auto& n : slaves) // FIXME\r\n        // {\r\n        // \tif (n->parent())\r\n        // \t\tn->parent()->removeChild(n);\r\n        // \tskeletonRoot->addChild(n);\r\n        // }\r\n\r\n        // add skinning component to mesh\r\n        var skinning = Skinning.create(skin.reorganizeByVertices(), _options.skinningMethod, _assetLibrary.context, skeletonRoot);\r\n\r\n        meshNode.addComponent(skinning);\r\n        trace(\"skinned node: \");\r\n        trace(meshNode.name);\r\n        trace(\"\\n\");\r\n        trace(\"skinned node parent: \");\r\n        trace(meshNode.parent.name);\r\n        trace(\"\\n\");\r\n        meshNode.addComponent(MasterAnimation.create());\r\n\r\n        var irrelevantTransformNodes:Array<Node> = [];//new SortedSet<Node.Ptr>();\r\n\r\n        for (boneNode in boneNodes) {\r\n            var boneNodeDescendants:NodeSet = NodeSet.createbyNode(boneNode).descendants(true).where(function(descendant:Node) {\r\n                return descendant.hasComponent(Transform);\r\n            });\r\n\r\n            var tmp:Array<Node>=boneNodeDescendants.nodes.filter(function(n) return !Lambda.has(irrelevantTransformNodes,n));\r\n            irrelevantTransformNodes = irrelevantTransformNodes.concat(tmp);\r\n\r\n            var boneNodeParent = boneNode.parent ;\r\n\r\n            while (boneNodeParent != skeletonRoot) {\r\n                if(!Lambda.has(irrelevantTransformNodes,boneNodeParent))\r\n                    irrelevantTransformNodes.push(boneNodeParent);\r\n                boneNodeParent = boneNodeParent.parent;\r\n            }\r\n        }\r\n\r\n        var animatedNodes:NodeSet = NodeSet.createbyNode(skeletonRoot).descendants(true).where(function(descendant:Node) {\r\n            return descendant.hasComponent(Animation) || descendant.hasComponent(Skinning);\r\n        });\r\n\r\n        for (i in 0...animatedNodes.nodes.length) {\r\n            var animatedNode = animatedNodes.nodes[i];\r\n            var animatedNodeDescendants:NodeSet = NodeSet.createbyNode(animatedNode).descendants(true).where(function(animatedNodeDescendant:Node) {\r\n                return animatedNodeDescendant.hasComponent(Transform);\r\n            });\r\n\r\n            var tmp:Array<Node>=animatedNodeDescendants.nodes.filter(function(n) return !Lambda.has(irrelevantTransformNodes,n));\r\n            irrelevantTransformNodes = irrelevantTransformNodes.concat(tmp);\r\n\r\n            // auto animatedNodeParent = animatedNode->parent();\r\n            //\r\n            // while (animatedNodeParent != skeletonRoot)\r\n            // {\r\n            //     irrelevantTransformNodes.insert(animatedNodeParent);\r\n            //\r\n            //     animatedNodeParent = animatedNodeParent->parent();\r\n            // }\r\n        }\r\n\r\n        for (irrelevantTransformNode in irrelevantTransformNodes) {\r\n            var transform:Transform = cast irrelevantTransformNode.getComponent(Transform);\r\n            transform.matrix =  Mat4.identity(new Mat4());\r\n        }\r\n    }\r\n\r\n    public function getSkeletonRoot(aimesh:AiMesh):Node {\r\n        var skeletonRoot:Node = null;\r\n        var boneAncestor:Node = getBoneCommonAncestor(aimesh);\r\n        var currentNode = boneAncestor;\r\n\r\n        while (true) {\r\n            if (currentNode == null) {\r\n                break;\r\n            }\r\n//todo count\r\n            if (_nameToAnimMatrices.exists(currentNode.name) ) {\r\n                skeletonRoot = currentNode;\r\n            }\r\n\r\n            currentNode = currentNode.parent;\r\n        }\r\n\r\n        return skeletonRoot != null ? (skeletonRoot.parent != null ? skeletonRoot.parent : _symbol) : boneAncestor;\r\n    }\r\n\r\n    public function getBoneCommonAncestor(aimesh:AiMesh):Node {\r\n        if (aimesh != null && aimesh.numBones > 0) {\r\n            var bonePath:Array<Array<Node>> = [];//new List< List<Node.Ptr>>();\r\n//bonePath.Capacity = aimesh.numBones;\r\n\r\n            // compute the common ancestor of all bones influencing the specified mesh\r\n            var minDepth:Int = 2147483647 ;\r\n            for (boneId in 0... aimesh.numBones) {\r\n                var boneNode = findNode(aimesh.bones[boneId].name);\r\n                if (boneNode == null) {\r\n                    continue;\r\n                }\r\n\r\n                var tmp = [];\r\n                bonePath.push(tmp);//new List<Node.Ptr>());\r\n\r\n                var currentNode = boneNode;\r\n                do {\r\n                    if (currentNode == null) {\r\n                        break;\r\n                    }\r\n\r\n                    tmp.push(currentNode);\r\n                    currentNode = currentNode.parent;\r\n                } while (true);\r\n\r\n                tmp.reverse();\r\n\r\n                if (tmp.length < minDepth) {\r\n                    minDepth = tmp.length;\r\n                }\r\n            }\r\n\r\n            if (bonePath.length == 0) {\r\n                return _symbol;\r\n            }\r\n\r\n            for (d in 0...minDepth) {\r\n                var node = bonePath[0][d];\r\n                var isCommon = true;\r\n                var boneId = 1;\r\n                while (boneId < aimesh.numBones && isCommon) {\r\n                    if (bonePath[boneId][d] != node) {\r\n                        isCommon = false;\r\n                        break;\r\n                    }\r\n                    ++boneId;\r\n                }\r\n\r\n                if (!isCommon) {\r\n                    if (d > 0) {\r\n                        return bonePath[0][d - 1];\r\n                    }\r\n                    else {\r\n                        return _symbol;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    public function precomputeModelToRootMatrices(node:Node, root:Node, modelToRootMatrices:Array<Mat4>) {\r\n//Debug.Assert(node != null && modelToRootMatrices.Count > 0);\r\n\r\n\r\n        // precompute the sequence of local-to-parent transformations from node to root\r\n        var transformsUpToRoot:Array<NodeTransformInfo> = [];\r\n        var currentNode = node;\r\n        do {\r\n            if (currentNode == null) {\r\n                break;\r\n            }\r\n\r\n            var currentName = currentNode.name ;\r\n            var tmp:NodeTransformInfo = new NodeTransformInfo(null, null, null);\r\n            transformsUpToRoot.push(tmp);\r\n\r\n            tmp.first = currentNode;\r\n            tmp.second = [];\r\n            tmp.thiree = null;\r\n\r\n            var foundAnimMatricesIt = _nameToAnimMatrices.exists(currentName);\r\n            if (foundAnimMatricesIt != false ) {\r\n                tmp.second = _nameToAnimMatrices.get(currentName);\r\n            }\r\n            else if (currentNode.hasComponent(Transform)) {\r\n                var t:Transform = cast currentNode.getComponent(Transform);\r\n                tmp.thiree = t.matrix ;\r\n            }\r\n\r\n            currentNode = currentNode.parent;\r\n        } while (currentNode != root); // the transform of the root is not accounted for!\r\n\r\n        // collapse transform from node to root for each frame of the animation\r\n        var numFrames = modelToRootMatrices.length;\r\n\r\n        for (frameId in 0...numFrames) {\r\n            var modelToRoot:Mat4 =   Mat4.identity(new Mat4()) ;// warning: not a copy\r\n\r\n           // modelToRoot = new Mat4();\r\n\r\n            for (trfInfo in transformsUpToRoot ) {\r\n                var animMatrices = trfInfo.second;\r\n                var matrix = trfInfo.thiree;\r\n\r\n                if ( animMatrices.length > 0) {\r\n                    matrix =animMatrices[Math.floor(Math.min(frameId, animMatrices.length - 1))];\r\n                    modelToRoot =  matrix * modelToRoot;\r\n                }\r\n                else if (matrix != null) {\r\n                    modelToRoot = matrix * modelToRoot;\r\n                }\r\n            }\r\n\r\n            modelToRootMatrices[frameId]=modelToRoot;\r\n        }\r\n    }\r\n\r\n    public function createBone(aibone:AiBone):Bone {\r\n        var boneName = aibone.name ;\r\n        if (aibone == null || (_nameToNode.exists(boneName) ==false) ) {\r\n            return null;\r\n        }\r\n\r\n        var offsetMatrix = convertMat4(aibone.offsetMatrix);\r\n\r\n        var boneVertexIds:Array<Int> = [for (i in 0...aibone.numWeights) 0];// new List<ushort>(aibone.numWeights, 0);\r\n        var boneVertexWeights:Array<Float> = [for (i in 0...aibone.numWeights) 0.0];// = new List<float>(aibone.numWeights, 0.0f);\r\n\r\n        for (i in 0...aibone.numWeights) {\r\n            boneVertexIds[i] = aibone.weights[i].vertexId;\r\n            boneVertexWeights[i] = aibone.weights[i].weight;\r\n        }\r\n\r\n        return Bone.create(_nameToNode.get(boneName), offsetMatrix, boneVertexIds, boneVertexWeights);\r\n    }\r\n\r\n\r\n    public function sampleAnimations(scene:AiScene) {\r\n        _nameToAnimMatrices = new StringMap<Array<Mat4>>();\r\n\r\n        if (scene == null) {\r\n            return;\r\n        }\r\n\r\n        for (animId in 0... scene.numAnimations) {\r\n            sampleAnimation(scene.animations[animId]);\r\n        }\r\n    }\r\n\r\n    public function sampleAnimation(animation:AiAnimation) {\r\n        if (animation == null || animation.ticksPerSecond < 1e-6 || _options.skinningFramerate == 0) {\r\n            return;\r\n        }\r\n\r\n        var numFrames :Int=  Math.floor(_options.skinningFramerate * animation.duration / animation.ticksPerSecond);\r\n        numFrames = numFrames < 2 ? 2 : numFrames;\r\n\r\n        var timeStep :Float= animation.duration / (numFrames - 1);\r\n        var sampleTimes:Array<Float> = [for (i in 0...numFrames) 0.0];\r\n        for (frameId in 1...numFrames) {\r\n            sampleTimes[frameId] = sampleTimes[frameId - 1] + timeStep;\r\n        }\r\n\r\n        for (channelId in 0...animation.numChannels) {\r\n            var nodeAnimation = animation.channels[channelId];\r\n            var nodeName = nodeAnimation.nodeName;\r\n            // According to the ASSIMP documentation, animated nodes should come with existing, unique names.\r\n\r\n            if (nodeName != null) {\r\n\r\n                _nameToAnimMatrices.set(nodeName, []);// new List<math.mat4>();\r\n//                if (nodeName == \"node-G_Circle_rotation_pied\") {\r\n//                    var matrices3 = _nameToAnimMatrices.get(nodeName);\r\n//                }\r\n                sample(nodeAnimation, sampleTimes, _nameToAnimMatrices.get(nodeName));\r\n//                var samplematrices:Array<Mat4>=_nameToAnimMatrices.get(nodeName);\r\n//                var samplematrices2:Array<Mat4>=_nameToAnimMatrices.get(nodeName);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function sample(nodeAnimation:AiNodeAnim, times:Array<Float>, matrices:Array<Mat4>) {\r\n//Debug.Assert(nodeAnimation);\r\n\r\n\r\n        #if DEBUG\r\n\t\t//std::cout << \"\\nsample animation of mesh('\" << nodeAnimation->mNodeName.C_Str() << \"')\" << std::endl;\r\n\t#end\r\n//todo\r\n//matrices.Resize(times.Count);\r\n\r\n        var sample_position:Vec3;\r\n        var sample_scaling:Vec3;\r\n        var sample_rotation:Quat;\r\n        var sample_rotationMatrix:Mat3;\r\n        // precompute time factors\r\n        var positionKeyTimeFactors:Array<Float> = [for(i in 0...nodeAnimation.numPositionKeys) 0.0];\r\n        var rotationKeyTimeFactors:Array<Float> =[for(i in 0...nodeAnimation.numRotationKeys) 0.0];\r\n        var scalingKeyTimeFactors:Array<Float> =[for(i in 0...nodeAnimation.numScalingKeys) 0.0];\r\n        positionKeyTimeFactors=computeTimeFactors(nodeAnimation.numPositionKeys, nodeAnimation.positionKeys, positionKeyTimeFactors);\r\n        rotationKeyTimeFactors=computeTimeFactors(nodeAnimation.numRotationKeys, nodeAnimation.rotationKeys, rotationKeyTimeFactors);\r\n        scalingKeyTimeFactors=computeTimeFactors(nodeAnimation.numScalingKeys, nodeAnimation.scalingKeys, scalingKeyTimeFactors);\r\n\r\n        for (frameId in 0...times.length) {\r\n            var time = times[frameId];\r\n\r\n            // sample position from keys\r\n            sample_position = sampleVec3(nodeAnimation.positionKeys, positionKeyTimeFactors, time);\r\n\r\n            // sample rotation from keys\r\n            sample_rotation = sampleQuat(nodeAnimation.rotationKeys, rotationKeyTimeFactors, time);\r\n            sample_rotation = Quat.normalize(sample_rotation, new Quat());\r\n\r\n            if (sample_rotation.length() == 0.0) {\r\n                sample_rotationMatrix = Mat3.identity(new Mat3());\r\n            }\r\n            else {\r\n                sample_rotationMatrix = Defs.mat3_cast(sample_rotation);\r\n            }\r\n\r\n            // sample scaling from keys\r\n            sample_scaling = sampleVec3(nodeAnimation.scalingKeys, scalingKeyTimeFactors, time);\r\n\r\n            // recompose the interpolated matrix at the specified  frame\r\n            var arr:Array<Float>=[ sample_scaling.x * sample_rotationMatrix.r0c0, sample_scaling.y * sample_rotationMatrix.r1c0, sample_scaling.z * sample_rotationMatrix.r2c0, 0.0,\r\n            sample_scaling.x * sample_rotationMatrix.r0c1, sample_scaling.y * sample_rotationMatrix.r1c1, sample_scaling.z * sample_rotationMatrix.r2c1, 0.0,\r\n            sample_scaling.x * sample_rotationMatrix.r0c2, sample_scaling.y * sample_rotationMatrix.r1c2, sample_scaling.z * sample_rotationMatrix.r2c2, 0.0,\r\n            sample_position.x, sample_position.y, sample_position.z, 1.0];\r\n            var interpolated_matrix:Mat4= arr;\r\n\r\n            matrices[frameId] = interpolated_matrix;\r\n\r\n            #if DEBUG\r\n\t\t\t// std::cout << \"\\tframeID = \" << frameId << \"\\ttime = \" << time << \"\\nM = \" << matrices[frameId]->toString() << std::endl;\r\n\t#end\r\n        }\r\n    }\r\n\r\n    public function sampleVec3(keys:Array<AiVectorKey>, keyTimeFactors:Array<Float>, time:Float) {\r\n        var output = new Vec3();\r\n        var numKeys = keyTimeFactors.length;\r\n        var id = getIndexForTime(numKeys, keys, time);\r\n        var value0 = keys[id].value;\r\n\r\n        if (id == numKeys - 1) {\r\n            output = new Vec3(value0.x, value0.y, value0.z);\r\n        }\r\n        else {\r\n            var w1 = (time - keys[id].time) * keyTimeFactors[id];\r\n            var w0 = 1.0 - w1;\r\n            var value1 = keys[id + 1].value;\r\n\r\n            output = new Vec3(w0 * value0.x + w1 * value1.x, w0 * value0.y + w1 * value1.y, w0 * value0.z + w1 * value1.z);\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    public function sampleQuat(keys:Array<AiQuatKey>, keyTimeFactors:Array<Float>, time:Float) {\r\n\r\n        var output = new Quat();\r\n        var numKeys = keyTimeFactors.length;\r\n        var id = getIndexForTime(numKeys, keys, time);\r\n        var value0 = keys[id].value;\r\n\r\n        if (id == numKeys - 1) {\r\n            output = new Quat(value0.w, value0.x, value0.y, value0.z);\r\n        }\r\n        else {\r\n            var w1 = (time - keys[id].time) * keyTimeFactors[id];\r\n            var w0 = 1.0 - w1;\r\n            var value1 = keys[id + 1].value;\r\n            var interp = Defs.slerp(value0, value1, w1);\r\n            output = convertQuat(interp);\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    function computeTimeFactors<T:AiKey>(numKeys:Int, keys:Array<T>, keyTimeFactors:Array<Float>):Array<Float> {\r\n//todo keyTimeFactors.Resize(numKeys);\r\n\r\n\r\n        if (numKeys == 0 || keys == null) {\r\n            return keyTimeFactors;\r\n        }\r\n\r\n        for (keyId in 0... numKeys - 1) {\r\n            keyTimeFactors[keyId] = (1.0 / (keys[keyId + 1].time - keys[keyId].time + 1.401298E-45 ));\r\n        }\r\n\r\n        keyTimeFactors[numKeys- 1] = 1.0 ;\r\n        return keyTimeFactors;\r\n    }\r\n\r\n    function getIndexForTime<T:AiKey>(numKeys:Int, keys:Array<T>, time:Float):Int {\r\n        if (numKeys == 0 || keys == null) {\r\n            return 0;\r\n        }\r\n\r\n        var id :Int= 0;\r\n        var lowerId :Int= 0;\r\n        var upperId :Int= numKeys - 1;\r\n        while (upperId - lowerId > 1) {\r\n            id = (lowerId + upperId) >> 1;\r\n            if (keys[id].time > time) {\r\n                upperId = id;\r\n            }\r\n            else {\r\n                lowerId = id;\r\n            }\r\n        }\r\n\r\n        return lowerId;\r\n    }\r\n    inline function convertVec3( vec3:AiVector3D)\r\n    {\r\n        return vec3;\r\n    }\r\n    inline function  convertQuat(  quaternion:AiQuaternion)\r\n    {\r\n        return quaternion;\r\n    }\r\n    public function convertMat4( matrix:AiMatrix4x4)\r\n    {\r\n        // Assimp aiMatrix4x4 are row-major meanwhile\r\n        // glm mat4 are column-major (so are OpenGL matrices)\r\n\r\n        var arr=matrix.toFloatArray();\r\n\r\n        var m:AiMatrix4x4 = new AiMatrix4x4(\r\n            arr[ 0], arr[ 1], arr[ 2], arr[3],\r\n            arr[ 4], arr[ 5], arr[ 6], arr[7],\r\n            arr[ 8], arr[ 9], arr[10], arr[11],\r\n            arr[ 12], arr[ 13], arr[14], arr[15]\r\n        );\r\n        return m;\r\n    }\r\n//    public function convert(scaling:AiVector3D, quaternion:AiQuaternion, translation:AiVector3D) {\r\n//        var output = new Mat4();\r\n//\r\n//        var convert_rotation:Quat;\r\n//        var convert_rotationMatrix:Mat4;\r\n//\r\n//        convert_rotationMatrix = math.mat4_cast(Quat.normalize((quaternion), new Quat()));\r\n//        var rotationData = convert_rotationMatrix;\r\n//\r\n//        return new Mat4(scaling.x * rotationData[0][0], scaling.y * rotationData[0][1], scaling.z * rotationData[0][2], 0.0,\r\n//        scaling.x * rotationData[1][0], scaling.y * rotationData[1][1], scaling.z * rotationData[1][2], 0.0,\r\n//        scaling.x * rotationData[2][0], scaling.y * rotationData[2][1], scaling.z * rotationData[2][2], 0.0,\r\n//        translation.x, translation.y, translation.z, 1.0);\r\n//    }\r\n\r\n    public function createMaterial(aiMat:AiMaterial):Material {\r\n        var existingMaterial = _aiMaterialToMaterial.exists(aiMat);\r\n\r\n        if (existingMaterial != false) {\r\n            return _aiMaterialToMaterial.get(aiMat);\r\n        }\r\n\r\n        var material:Material = chooseMaterialByShadingMode(aiMat);\r\n\r\n        if (aiMat == null) {\r\n            return material;\r\n        }\r\n\r\n        var materialName = \"\";\r\n\r\n        var rawMaterialName = \"\";\r\n        if (aiMat.hasProperty(AiMatKeys.NAME)) {\r\n            rawMaterialName = aiMat.getProperty(AiMatKeys.NAME).getStringValue();\r\n            materialName = rawMaterialName;\r\n        }\r\n\r\n        materialName = getMaterialName(materialName);\r\n\r\n        var blendingMode = getBlendingMode(aiMat);\r\n        var srcBlendingMode:Source = ( blendingMode & 0x00ff);\r\n        var dstBlendingMode:Destination = ( blendingMode & 0xff00);\r\n\r\n        material.data.set(\"blendingMode\", blendingMode);\r\n        material.data.set(States.PROPERTY_BLENDING_SOURCE, srcBlendingMode);\r\n        material.data.set(States.PROPERTY_BLENDING_DESTINATION, dstBlendingMode);\r\n        material.data.set(\"triangleCulling\", getTriangleCulling(aiMat));\r\n        material.data.set(\"wireframe\", getWireframe(aiMat)); // bool\r\n\r\n        if ((blendingMode & Destination.ZERO) == 0) {\r\n            material.data.set(\"priority\", Priority.TRANSPARENT);\r\n            material.data.set(\"zSorted\", true);\r\n        }\r\n        else {\r\n            material.data.set(\"priority\", Priority.OPAQUE);\r\n            material.data.set(\"zSorted\", false);\r\n        }\r\n\r\n        var opacity = setScalarProperty(material, \"opacity\", aiMat, AiMatKeys.OPACITY, 1.0);\r\n        var shininess = setScalarProperty(material, \"shininess\", aiMat, AiMatKeys.SHININESS, 0.0);\r\n        var reflectivity = setScalarProperty(material, \"reflectivity\", aiMat, AiMatKeys.REFLECTIVITY, 1.0);\r\n        var shininessStr = setScalarProperty(material, \"shininessStrength\", aiMat, AiMatKeys.SHININESS_STRENGTH, 1.0);\r\n        var refractiveIdx = setScalarProperty(material, \"refractiveIndex\", aiMat, AiMatKeys.REFRACTI, 1.0);\r\n        var bumpScaling = setScalarProperty(material, \"bumpScaling\", aiMat, AiMatKeys.BUMPSCALING, 1.0);\r\n        var defaultValue:Vec4=new Vec4(0,0,0,1);\r\n        var diffuseColor = setColorProperty(material, \"diffuseColor\", aiMat, AiMatKeys.COLOR_DIFFUSE, defaultValue);\r\n        var specularColor = setColorProperty(material, \"specularColor\", aiMat, AiMatKeys.COLOR_SPECULAR, defaultValue);\r\n        var ambientColor = setColorProperty(material, \"ambientColor\", aiMat, AiMatKeys.COLOR_AMBIENT, defaultValue);\r\n        var emissiveColor = setColorProperty(material, \"emissiveColor\", aiMat, AiMatKeys.COLOR_EMISSIVE, defaultValue);\r\n        var reflectiveColor = setColorProperty(material, \"reflectiveColor\", aiMat, AiMatKeys.COLOR_REFLECTIVE, defaultValue);\r\n        var transparentColor = setColorProperty(material, \"transparentColor\", aiMat, AiMatKeys.COLOR_TRANSPARENT, defaultValue);\r\n\r\n        var epsilon = 0.1;\r\n\r\n        var hasSpecular = ((!MathUtil.vec4_equals(specularColor, new Vec4()) && specularColor.w > 0.0)\r\n        || aiMat.getMaterialTextureCount(AiTextureType.specular) >= 1 )\r\n        && shininess > (1.0 + epsilon);\r\n\r\n        if (!hasSpecular) {\r\n            // Gouraud-like shading (-> no specular)\r\n\r\n            material.data.unset(\"shininess\");\r\n            specularColor.w = 0.0;\r\n        }\r\n\r\n        var transparent = opacity > 0.0 && opacity < 1.0;\r\n\r\n        if (transparent) {\r\n            diffuseColor.w = opacity;\r\n            if (hasSpecular) {\r\n                specularColor.w = opacity;\r\n            }\r\n            ambientColor.w = opacity;\r\n            emissiveColor.w = opacity;\r\n            reflectiveColor.w = opacity;\r\n            transparentColor.w = opacity;\r\n\r\n            material.data.set(\"diffuseColor\", diffuseColor);\r\n            if (hasSpecular) {\r\n                material.data.set(\"specularColor\", specularColor);\r\n            }\r\n            material.data.set(\"ambientColor\", ambientColor);\r\n            material.data.set(\"emissiveColor\", emissiveColor);\r\n            material.data.set(\"reflectiveColor\", reflectiveColor);\r\n            material.data.set(\"transparentColor\", transparentColor);\r\n\r\n            enableTransparency(material);\r\n        }\r\n\r\n        for (textureType in AbstractASSIMPParser._textureTypeToName.keys()) {\r\n            var textureName = AbstractASSIMPParser._textureTypeToName.get(textureType);\r\n            var numTextures = aiMat.getMaterialTextureCount(textureType);\r\n\r\n            if (numTextures == 0) {\r\n                continue;\r\n            }\r\n\r\n            var path = new AiMaterialTexture();\r\n            //todo\r\n            if (aiMat.getMaterialTexture(textureType, 0, path)) {\r\n                var textureFilename = path.file;\r\n                var textureAssetNameIt = _textureFilenameToAssetName.exists(textureFilename);\r\n\r\n                if (textureAssetNameIt == false) {\r\n                    continue;\r\n                }\r\n\r\n                var textureAssetName = _textureFilenameToAssetName.get(textureFilename);\r\n                var texture = _assetLibrary.texture(textureAssetName);\r\n                var textureIsValid = texture != null;\r\n                texture = cast(_options.textureFunction(textureAssetName, texture));\r\n                if (!textureIsValid && texture != null) {\r\n                    _assetLibrary.setTexture(textureAssetName, texture);\r\n                }\r\n\r\n                if (texture != null) {\r\n                    material.data.set(textureName, texture);\r\n                    textureSet(material, textureName, texture);\r\n                }\r\n            }\r\n        }\r\n\r\n        var createMaterial_materialNameId:Int = 0;\r\n        var uniqueMaterialName = materialName;\r\n        while (_assetLibrary.material(uniqueMaterialName) != null) {\r\n            uniqueMaterialName = materialName + \"_\" + (createMaterial_materialNameId++);\r\n        }\r\n        material.data.set(\"name\", uniqueMaterialName);\r\n        var processedMaterial = _options.materialFunction(uniqueMaterialName, material);\r\n        _aiMaterialToMaterial.set(aiMat, processedMaterial) ;\r\n        _assetLibrary.setMaterial(uniqueMaterialName, processedMaterial);\r\n        return processedMaterial;\r\n    }\r\n\r\n\r\n\r\n    public function textureSet(material:Material, textureTypeName:String, texture:AbstractTexture) {\r\n        // Alpha map\r\n        if (textureTypeName == AbstractASSIMPParser._textureTypeToName.get(AiTextureType.opacity)) {\r\n            enableTransparency(material);\r\n\r\n            if (!material.data.hasProperty(\"alphaThreshold\")) {\r\n                material.data.set(\"alphaThreshold\", .5);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public function chooseMaterialByShadingMode(aiMat:AiMaterial):Material {\r\n        if (aiMat == null &&_options.material != null) {\r\n            return Material.createbyMaterial(_options.material);\r\n        }\r\n//        aiShadingMode shading_mode = aiShadingMode_Flat;\r\n//        if (mat.Get(AI_MATKEY_SHADING_MODEL, shading_mode) == AI_SUCCESS) {\r\n//            ChunkWriter chunk(writer, Discreet3DS::CHUNK_MAT_SHADING);\r\n//\r\n//            Discreet3DS::shadetype3ds shading_mode_out;\r\n//            switch(shading_mode) {\r\n//            case aiShadingMode_Flat:\r\n//            case aiShadingMode_NoShading:\r\n//            shading_mode_out = Discreet3DS::Flat;\r\n//            break;\r\n//\r\n//            case aiShadingMode_Gouraud:\r\n//            case aiShadingMode_Toon:\r\n//            case aiShadingMode_OrenNayar:\r\n//            case aiShadingMode_Minnaert:\r\n//            shading_mode_out = Discreet3DS::Gouraud;\r\n//            break;\r\n//\r\n//            case aiShadingMode_Phong:\r\n//            case aiShadingMode_Blinn:\r\n//            case aiShadingMode_CookTorrance:\r\n//            case aiShadingMode_Fresnel:\r\n//            shading_mode_out = Discreet3DS::Phong;\r\n//            break;\r\n//\r\n//            default:\r\n//            shading_mode_out = Discreet3DS::Flat;\r\n//            ai_assert(false);\r\n//            };\r\n//            writer.PutU2(static_cast<uint16_t>(shading_mode_out));\r\n//        }\r\n\r\n        if (aiMat.hasProperty(AiMatKeys.SHADING_MODEL)) {\r\n\r\n            var shadingMode:Int = aiMat.getProperty(AiMatKeys.SHADING_MODEL).getIntegerValue();\r\n            switch (shadingMode)\r\n            {\r\n                case AiShadingMode.flat:\r\n                    return BasicMaterial.create();\r\n\r\n                case AiShadingMode.phong\r\n                | AiShadingMode.blinn\r\n                | AiShadingMode.cookTorrance\r\n                | AiShadingMode.fresnel\r\n                | AiShadingMode.toon\r\n                | AiShadingMode.gouraud\r\n                | AiShadingMode.orenNayar\r\n                | AiShadingMode.minnaert:\r\n                    return PhongMaterial.create();\r\n\r\n                //case AiShadingMode.noShading:\r\n                default:\r\n                    return Material.createbyMaterial(_options.material);\r\n            }\r\n        }\r\n        else {\r\n            return Material.createbyMaterial(_options.material);\r\n        }\r\n    }\r\n\r\n    public function chooseEffectByShadingMode(aiMat:AiMaterial):Effect {\r\n        var effect:Effect = _options.effect;\r\n\r\n        if (effect == null && aiMat != null) {\r\n\r\n\r\n            if (aiMat.hasProperty(AiMatKeys.SHADING_MODEL)) {\r\n                var shadingMode:Int = aiMat.getProperty(AiMatKeys.SHADING_MODEL).getIntegerValue() ;\r\n                switch ( shadingMode)\r\n                {\r\n                    case AiShadingMode.flat:\r\n                    case AiShadingMode.gouraud:\r\n                    case AiShadingMode.toon:\r\n                    case AiShadingMode.orenNayar:\r\n                    case AiShadingMode.minnaert:\r\n                        if (_assetLibrary.effect(\"effect/Basic.effect\") != null) {\r\n                            effect = _assetLibrary.effect(\"effect/Basic.effect\");\r\n                        }\r\n                        else {\r\n                            LOG_ERROR(\"Basic effect not available in the asset library.\");\r\n                        }\r\n\r\n                    case AiShadingMode.phong:\r\n                    case AiShadingMode.blinn:\r\n                    case AiShadingMode.cookTorrance:\r\n                    case AiShadingMode.fresnel:\r\n                        if (_assetLibrary.effect(\"effect/Phong.effect\") != null) {\r\n                            effect = _assetLibrary.effect(\"effect/Phong.effect\");\r\n                        }\r\n                        else {\r\n                            LOG_ERROR(\"Phong effect not available in the asset library.\");\r\n                        }\r\n                    case AiShadingMode.noShading:\r\n                    default: {\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // apply effect function\r\n        return _options.effectFunction(effect);\r\n    }\r\n\r\n    public function getBlendingMode(aiMat:AiMaterial):minko.render.Blending.Mode {\r\n        var blendMode:Int;\r\n        if (aiMat != null && aiMat.hasProperty(AiMatKeys.BLEND_FUNC)) {\r\n            blendMode = aiMat.getProperty(AiMatKeys.BLEND_FUNC).getIntegerValue();\r\n            switch ( blendMode)\r\n            {\r\n                case AiBlendMode.alpha: // src * alpha + dst * (1 - alpha)\r\n                    return minko.render.Blending.Mode.ALPHA;\r\n                case AiBlendMode.additive:\r\n                    return minko.render.Blending.Mode.ADDITIVE;\r\n                default:\r\n                    return minko.render.Blending.Mode.DEFAULT;\r\n            }\r\n        }\r\n        else {\r\n            return minko.render.Blending.Mode.DEFAULT;\r\n        }\r\n    }\r\n\r\n    public function getTriangleCulling(aiMat:AiMaterial):TriangleCulling {\r\n        var twoSided:Int;\r\n        if (aiMat != null && aiMat.hasProperty(AiMatKeys.TWOSIDED)) {\r\n            twoSided = aiMat.getProperty(AiMatKeys.TWOSIDED).getIntegerValue();\r\n            return twoSided == 0 ? TriangleCulling.NONE : TriangleCulling.BACK;\r\n        }\r\n        else {\r\n            return TriangleCulling.BACK;\r\n        }\r\n    }\r\n\r\n\r\n    public function getWireframe(aiMat:AiMaterial):Bool {\r\n        var wireframe:Int = 0;\r\n        if (aiMat != null && aiMat.hasProperty(AiMatKeys.TWOSIDED)) {\r\n            wireframe = aiMat.getProperty(AiMatKeys.TWOSIDED).getIntegerValue();\r\n        }\r\n        return wireframe != 0 ;\r\n    }\r\n\r\n    public function setColorProperty(material:Material, propertyName:String, aiMat:AiMaterial, aiMatKeyName:String, defaultValue:Vec4):Vec4 {\r\n//Debug.Assert(material != null && aiMat != null);\r\n\r\n        var color = new AiColor4D();\r\n        color.r = defaultValue.x;\r\n        color.g = defaultValue.y;\r\n        color.b = defaultValue.z;\r\n        color.a = defaultValue.w;\r\n        if (aiMat != null && aiMat.hasProperty(aiMatKeyName)) {\r\n            var property=aiMat.getProperty(aiMatKeyName);\r\n            color = property.getColor4DValue();\r\n        }\r\n        material.data.set(propertyName, new Vec4(color.r, color.g, color.b, color.a));\r\n\r\n        return cast material.data.get(propertyName);\r\n    }\r\n\r\n    public function setScalarProperty(material:Material, propertyName:String, aiMat:AiMaterial, aiMatKeyName:String, defaultValue:Float) {\r\n//Debug.Assert(material != null && aiMat != null);\r\n\r\n        var scalar = defaultValue;\r\n        if (aiMat != null && aiMat.hasProperty(aiMatKeyName)) {\r\n            scalar = aiMat.getProperty(aiMatKeyName).getFloatValue();\r\n        }\r\n        material.data.set(propertyName, scalar);\r\n\r\n        return cast material.data.get(propertyName);\r\n    }\r\n\r\n    public function createAnimations(scene:AiScene, interpolate:Bool) {\r\n        if (scene.numAnimations == 0) {\r\n            return;\r\n        }\r\n\r\n        sampleAnimations(scene); //re done\r\n\r\n        if (Lambda.empty(_nameToAnimMatrices)) {\r\n            return;\r\n        }\r\n\r\n        var nodeToTimelines:ObjectMap<Node, Array<AbstractTimeline>> = new ObjectMap<Node, Array<AbstractTimeline>>();\r\n        for (nameToMatricesPair in _nameToAnimMatrices.keys()) {\r\n            var node = _nameToNode.get(nameToMatricesPair);\r\n            nodeToTimelines.set(node, []);\r\n        }\r\n        for (nameToMatricesPair in _nameToAnimMatrices.keys()) {\r\n            var node = _nameToNode.get(nameToMatricesPair);\r\n            var ainode = _nodeToAiNode.get(node);\r\n            var aiParentNode = ainode;\r\n\r\n            var isSkinned = false;\r\n\r\n            while (aiParentNode != null && !isSkinned) {\r\n                for (i in 0... aiParentNode.numMeshes) {\r\n                    var meshId = aiParentNode.meshes[i];\r\n\r\n                    isSkinned = isSkinned || scene.meshes[meshId].numBones > 0 ;\r\n                }\r\n\r\n                aiParentNode = aiParentNode.parent;\r\n            }\r\n\r\n            if (isSkinned) {\r\n                continue;\r\n            }\r\n\r\n            var matrices: Array<Mat4> = _nameToAnimMatrices.get(nameToMatricesPair);\r\n\r\n            var numFrames = matrices.length;\r\n            var duration = numFrames * _options.skinningFramerate ;\r\n\r\n            var timetable = [for (i in 0...numFrames) 0];//new List<uint>(numFrames, 0u);\r\n\r\n            var timeStep = duration / (numFrames - 1);\r\n\r\n            for (frameId in 1...numFrames) {\r\n                timetable[frameId] = Std.int(timetable[frameId - 1] + timeStep);\r\n            }\r\n\r\n            nodeToTimelines.get(node).push(Matrix4x4Timeline.create(AbstractASSIMPParser.PNAME_TRANSFORM, duration, timetable, matrices, interpolate));\r\n        }\r\n\r\n        //actual  bone node animation\r\n        // fixme: find actual animation root\r\n        var animationRootNode = _nameToNode.get(_nameToAnimMatrices.keys().next()).root;\r\n\r\n        for (nodeAndTimelines in nodeToTimelines.keys()) {\r\n            var second=nodeToTimelines.get(nodeAndTimelines);\r\n            nodeAndTimelines.addComponent(Animation.create(second));\r\n        }\r\n\r\n        if (!animationRootNode.hasComponent(MasterAnimation)) {\r\n            animationRootNode.addComponent(MasterAnimation.create());\r\n        }\r\n    }\r\n\r\n    public function enableTransparency(material:Material) {\r\n        material.data.set(\"priority\", Priority.TRANSPARENT);\r\n        material.data.set(\"zSorted\", true);\r\n\r\n        var blendingMode = minko.render.Blending.Mode.ALPHA;\r\n        var srcBlendingMode:Source = (blendingMode & 0x00ff);\r\n        var dstBlendingMode:Destination = (blendingMode & 0xff00);\r\n        material.data.set(\"blendingMode\", blendingMode);\r\n        material.data.set(States.PROPERTY_BLENDING_SOURCE, srcBlendingMode);\r\n        material.data.set(States.PROPERTY_BLENDING_DESTINATION, dstBlendingMode);\r\n    }\r\n\r\n}","package minko.file;\r\nclass ASSIMPParser  extends AbstractASSIMPParser{\r\n    public function new() {\r\n        super();\r\n    }\r\n}\r\n","package minko.file;\r\n@:expose(\"minko.file.AbstractAssetDescriptor\")\r\nclass AbstractAssetDescriptor {\r\n    public var location(get, set):AssetLocation;\r\n\r\n    function get_location() {\r\n        return null;\r\n    }\r\n    function set_location(l) {\r\n        return null;\r\n    }\r\n    public function dispose() {\r\n\r\n    }\r\n\r\n    public function new() {\r\n    }\r\n}\r\n","package minko.file;\r\nimport haxe.io.Bytes;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.file.AbstractProtocol\")\r\nclass AbstractProtocol {\r\n\r\n    private var _file:File;\r\n    private var _options:Options;\r\n    private var _progress:Signal2<AbstractProtocol, Float>;\r\n    private var _complete:Signal<AbstractProtocol>;\r\n    private var _error:Signal2<AbstractProtocol, String>;\r\n\r\n    public function dispose() {\r\n\r\n    }\r\n\r\n\r\n    static function create() {\r\n        return new AbstractProtocol();\r\n    }\r\n\r\n    public var file(get, null):File;\r\n\r\n    function get_file() {\r\n        return _file;\r\n    }\r\n    public var options(get, set):Options;\r\n\r\n    function get_options() {\r\n        return _options;\r\n    }\r\n\r\n    function set_options(v) {\r\n        _options = v;\r\n        return v;\r\n    }\r\n    public var progress(get, null):Signal2<AbstractProtocol, Float>;\r\n    public var complete(get, null):Signal<AbstractProtocol>;\r\n    public var error(get, null):Signal2<AbstractProtocol, String>;\r\n\r\n    function get_complete() {\r\n        return _complete;\r\n    }\r\n\r\n    function get_progress() {\r\n        return _progress;\r\n    }\r\n\r\n    function get_error() {\r\n        return _error;\r\n    }\r\n\r\n    public function loadFile(filename, resolvedFilename, options) {\r\n        _options = options;\r\n        _file.filename = filename;\r\n        _file.resolvedFilename = resolvedFilename;\r\n\r\n        load();\r\n    }\r\n\r\n    public function load() {\r\n\r\n    }\r\n\r\n    public function fileExists(filename) {\r\n        return false;\r\n    }\r\n\r\n    public function isAbsolutePath(filename) {\r\n        return false;\r\n    }\r\n\r\n    public function new() {\r\n        this._file = File.create();\r\n        this._options = Options.empty();\r\n        this._complete = new Signal<AbstractProtocol>();\r\n        this._progress = new Signal2<AbstractProtocol, Float>();\r\n        this._error = new Signal2<AbstractProtocol, String>();\r\n    }\r\n    public var resolvedFilename(get, null):String;\r\n\r\n\r\n    function get_resolvedFilename() {\r\n\r\n        return _file._resolvedFilename;\r\n    }\r\n    public var data(get, set):Bytes;\r\n\r\n    function get_data() {\r\n        return _file._data;\r\n    }\r\n\r\n    function set_data(d) {\r\n        _file._data = d;\r\n        return d;\r\n    }\r\n\r\n}\r\n","package minko.file;\r\nimport haxe.ds.StringMap;\r\nimport haxe.io.Bytes;\r\nimport Lambda;\r\nimport minko.audio.Sound;\r\nimport minko.component.AbstractScript;\r\nimport minko.geometry.Geometry;\r\nimport minko.material.Material;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.AbstractTexture;\r\nimport minko.render.CubeTexture;\r\nimport minko.render.Effect;\r\nimport minko.render.RectangleTexture;\r\nimport minko.render.Texture;\r\nimport minko.scene.Layout;\r\nimport minko.scene.Node;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.file.AssetLibrary\")\r\nclass AssetLibrary {\r\n    private var _context:AbstractContext;\r\n    private var _loader:Loader;\r\n    private var _materials:StringMap< Material>;\r\n    private var _geometries:StringMap<Geometry>;\r\n    private var _effects:StringMap< Effect>;\r\n    private var _textures:StringMap<Texture>;\r\n    private var _cubeTextures:StringMap<CubeTexture>;\r\n    private var _rectangleTextures:StringMap<RectangleTexture>;\r\n    private var _symbols:StringMap<Node>;\r\n    private var _blobs:StringMap<Bytes>;\r\n    private var _dynamics:StringMap<Dynamic>;\r\n    private var _scripts:StringMap<AbstractScript>;\r\n    private var _layouts:StringMap<Int>;\r\n    private var _sounds:StringMap<Sound>;\r\n    private var _assetDescriptors:StringMap<AbstractAssetDescriptor>;\r\n    private var _parserError:Signal2<AssetLibrary, AbstractParser>;\r\n    private var _ready:Signal<AssetLibrary>;\r\n    public var numGeometries(get, null):Int;\r\n\r\n    function get_numGeometries() {\r\n        return Lambda.count(_geometries);\r\n    }\r\n    public var numMaterials(get, null):Int;\r\n\r\n    function get_numMaterials() {\r\n        return Lambda.count(_materials);\r\n    }\r\n    public var numEffects(get, null):Int;\r\n\r\n    function get_numEffects() {\r\n        return Lambda.count(_effects);\r\n    }\r\n    public var numTextures(get, null):Int;\r\n\r\n    function get_numTextures() {\r\n        return Lambda.count(_textures);\r\n    }\r\n    public var context(get, null):AbstractContext;\r\n\r\n    function get_context() {\r\n        return _context;\r\n    }\r\n    public var loader(get, null):Loader;\r\n\r\n    function get_loader() {\r\n        return _loader;\r\n    }\r\n\r\n\r\n    static public function create(context):AssetLibrary {\r\n        var al = new AssetLibrary(context);\r\n\r\n        al._loader.options.context = (context);\r\n        al._loader.options.assetLibrary = (al);\r\n\r\n        return al;\r\n    }\r\n\r\n    static public function createbyAssetLibrary(original:AssetLibrary) {\r\n        var al:AssetLibrary = create(original._context);\r\n\r\n        for (it in original._materials.keys()) {\r\n            al._materials.set(it, original._materials.get(it));\r\n        }\r\n\r\n        for (it in original._geometries.keys()) {\r\n            al._geometries.set(it, original._geometries.get(it));\r\n        }\r\n        for (it in original._effects.keys()) {\r\n            al._effects.set(it, original._effects.get(it));\r\n        }\r\n        for (it in original._textures.keys()) {\r\n            al._textures.set(it, original._textures.get(it));\r\n        }\r\n\r\n        for (it in original._cubeTextures.keys()) {\r\n            al._cubeTextures.set(it, original._cubeTextures.get(it));\r\n        }\r\n\r\n        for (it in original._rectangleTextures.keys()) {\r\n            al._rectangleTextures.set(it, original._rectangleTextures.get(it));\r\n        }\r\n\r\n        for (it in original._symbols.keys()) {\r\n            al._symbols.set(it, original._symbols.get(it));\r\n        }\r\n        for (it in original._blobs.keys()) {\r\n            al._blobs.set(it, original._blobs.get(it));\r\n        }\r\n        for (it in original._dynamics.keys()) {\r\n            al._dynamics.set(it, original._dynamics.get(it));\r\n        }\r\n        for (it in original._scripts.keys()) {\r\n            al._scripts.set(it, original._scripts.get(it));\r\n        }\r\n\r\n        for (it in original._layouts.keys()) {\r\n            al._layouts.set(it, original._layouts.get(it));\r\n        }\r\n\r\n        for (it in original._assetDescriptors.keys()) {\r\n            al._assetDescriptors.set(it, original._assetDescriptors.get(it));\r\n        }\r\n\r\n\r\n        return al;\r\n    }\r\n\r\n    public function new(context:AbstractContext) {\r\n        this._context = context;\r\n        this._loader = Loader.create();\r\n        this._materials = new StringMap< Material>();\r\n        this._geometries = new StringMap<Geometry>();\r\n        this._effects = new StringMap< Effect>();\r\n        this._textures = new StringMap<Texture>();\r\n        this._cubeTextures = new StringMap<CubeTexture>();\r\n        this._rectangleTextures = new StringMap<RectangleTexture>();\r\n        this._symbols = new StringMap<Node>();\r\n        this._blobs = new StringMap<Bytes>();\r\n        this._dynamics=new StringMap<Dynamic>();\r\n        this._scripts = new StringMap<AbstractScript>();\r\n        this._layouts = new StringMap<Int>();\r\n        this._sounds = new StringMap<Sound>();\r\n        this._assetDescriptors = new StringMap<AbstractAssetDescriptor>();\r\n        this._parserError = new Signal2<AssetLibrary, AbstractParser>();\r\n        this._ready = new Signal<AssetLibrary>();\r\n    }\r\n\r\n    public function disposeLoader() {\r\n        _loader = null;\r\n    }\r\n\r\n    public function geometry(name) {\r\n        return _geometries.exists(name) ? _geometries.get(name) : null;\r\n    }\r\n\r\n    public function setGeometry(name, geometry):AssetLibrary {\r\n        var tempname = name;\r\n        if (_geometries.exists(tempname)) {\r\n            tempname = tempname + \"_\" + numGeometries;\r\n        }\r\n\r\n        _geometries.set(tempname, geometry);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function geometryName(geometry:Geometry) {\r\n\r\n        for (it in _geometries.keys()) {\r\n            var itr = _geometries.get(it);\r\n            if (itr == geometry) {\r\n                return it;\r\n            }\r\n        }\r\n        throw (\"AssetLibrary does not reference this geometry.\");\r\n    }\r\n\r\n    public function texture(name):Texture {\r\n        var foundTextureIt = _textures.exists(name);\r\n\r\n        return foundTextureIt ? _textures.get(name) : null;\r\n    }\r\n\r\n    public function setTexture(name, texture) {\r\n        _textures.set(name, texture);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function getTextureByUuid(uuid, failIfNotReady) :Texture{\r\n        var it = Lambda.find(_textures, function(t:Texture) {\r\n            return t.sampler.uuid == uuid && (!failIfNotReady || t.isReady);\r\n        });\r\n\r\n        return it;\r\n    }\r\n\r\n    public function cubeTexture(name) {\r\n        var foundTextureIt = _cubeTextures.exists(name);\r\n\r\n        return foundTextureIt ? _cubeTextures.get(name) : null;\r\n    }\r\n\r\n    public function setCubeTexture(name, texture) {\r\n        _cubeTextures.set(name, texture);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function rectangleTexture(name) {\r\n        var foundTextureIt = _rectangleTextures.exists(name);\r\n\r\n        return foundTextureIt ? _rectangleTextures.get(name) : null;\r\n    }\r\n\r\n    public function setRectangleTexture(name, texture) {\r\n        _rectangleTextures.set(name, texture);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function textureName(texture:AbstractTexture) {\r\n        for (it in _textures.keys()) {\r\n            var itr = _textures.get(it);\r\n            if (itr == texture)\r\n                return it;\r\n        }\r\n\r\n\r\n        throw (\"AssetLibrary does not reference this texture.\");\r\n    }\r\n\r\n    public function symbol(name):Node {\r\n        return _symbols.exists(name) ? _symbols.get(name) : null;\r\n    }\r\n\r\n    public function setSymbol(name, node) {\r\n        _symbols.set(name, node);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function symbolName(node) {\r\n        for (it in _symbols.keys()) {\r\n            var itr = _symbols.get(it);\r\n            if (itr == node)\r\n                return it;\r\n        }\r\n\r\n\r\n        throw (\"AssetLibrary does not reference this symbol.\");\r\n    }\r\n\r\n    public function material(name) {\r\n        return _materials.exists(name) ? _materials.get(name) : null;\r\n    }\r\n\r\n    public function setMaterial(name, material):AssetLibrary {\r\n        var mat = (material);\r\n\r\n        #if DEBUG\r\n\t\tif (mat == null)\r\n\t\t{\r\n\t\t\tthrow new System.ArgumentException(\"material\");\r\n\t\t}\r\n\t#end\r\n\r\n        _materials.set(name, material);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    public function materialName(material) {\r\n        for (it in _materials.keys()) {\r\n            var itr = _materials.get(it);\r\n            if (itr == material) {\r\n                return it;\r\n            }\r\n        }\r\n\r\n\r\n        throw (\"AssetLibrary does not reference this material.\");\r\n    }\r\n\r\n    public function effect(name) {\r\n        return _effects.exists(name) ? _effects.get(name) : null;\r\n    }\r\n\r\n    public function setEffect(name, effect) {\r\n        _effects.set(name, effect);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function effectName(effect:Effect) {\r\n        for (it in _effects.keys()) {\r\n            var itr = _effects.get(it);\r\n            if (itr == effect) {\r\n                return it;\r\n            }\r\n        }\r\n\r\n\r\n        throw (\"AssetLibrary does not reference this effect.\");\r\n    }\r\n    public function hasDynamics(name) {\r\n        return _dynamics.exists(name) ;\r\n    }\r\n\r\n    public function dynamics(name) {\r\n        if (!_dynamics.exists(name)) {\r\n            throw \"\";\r\n        }\r\n\r\n        return _dynamics.get(name);\r\n    }\r\n\r\n    public function setDynamics(name, blob) {\r\n        _dynamics.set(name, blob);\r\n\r\n        return this;\r\n    }\r\n    public function hasBlob(name) {\r\n        return _blobs.exists(name) ;\r\n    }\r\n\r\n    public function blob(name) {\r\n        if (!_blobs.exists(name)) {\r\n            throw \"\";\r\n        }\r\n\r\n        return _blobs.get(name);\r\n    }\r\n\r\n    public function setBlob(name, blob) {\r\n        _blobs.set(name, blob);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function script(name) {\r\n        return _scripts.exists(name) ? _scripts.get(name) : null;\r\n    }\r\n\r\n    public function setScript(name, script) {\r\n        _scripts.set(name, script);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function scriptName(script) {\r\n\r\n        for (it in _scripts.keys()) {\r\n            var itr = _scripts.get(it);\r\n            if (itr == script) {\r\n                return it;\r\n            }\r\n        }\r\n        throw (\"AssetLibrary does not reference this script.\");\r\n    }\r\n\r\n    public function layout(name) {\r\n        if (_layouts.exists(name) == false) {\r\n            var existingMask:Layout = 0;\r\n\r\n            for (layout in _layouts.keys()) {\r\n                existingMask |= _layouts.get(layout);\r\n            }\r\n\r\n            var mask:Layout = 1;\r\n            var i = 0;\r\n            while (i < 32 && (existingMask & mask) == 1) {\r\n                ++i;\r\n                mask <<= 1;\r\n                continue;\r\n            }\r\n\r\n            if (mask == 0) {\r\n                throw \"\";\r\n            }\r\n\r\n            _layouts.set(name, mask);\r\n        }\r\n\r\n        return _layouts.get(name);\r\n    }\r\n\r\n    public function setLayout(name, mask) {\r\n        _layouts.set(name, mask);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function sound(name) {\r\n        return _sounds.get(name);\r\n    }\r\n\r\n    public function setSound(name, sound) {\r\n        _sounds.set(name, sound);\r\n        return this;\r\n    }\r\n\r\n    public function assetDescriptor(name) {\r\n        return _assetDescriptors.exists(name) ? _assetDescriptors.get(name) : null;\r\n    }\r\n\r\n    public function setAssetDescriptor(name, assetDescriptor) {\r\n        _assetDescriptors.set(name, assetDescriptor);\r\n        return this;\r\n    }\r\n}\r\n","package minko.file;\r\n@:expose(\"minko.file.AssetLocation\")\r\nclass AssetLocation {\r\n    public var filename:String;\r\n    public var offset:Int;\r\n    public var length:Int;\r\n\r\n    public function new(filename, offset, length) {\r\n        this.filename = (filename);\r\n        this.offset = offset;\r\n        this.length = length;\r\n    }\r\n\r\n}\r\n","package minko.file;\r\nimport minko.data.BindingMap;\r\nimport glm.Vec2;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport haxe.ds.ObjectMap;\r\nimport haxe.ds.StringMap;\r\nimport haxe.io.Bytes;\r\nimport minko.data.Binding;\r\nimport minko.data.BindingMap.BindingMapBase;\r\nimport minko.data.BindingMap.MacroBinding;\r\nimport minko.data.BindingMap.MacroBindingMap;\r\nimport minko.data.BindingMap.MacroType;\r\nimport minko.data.Provider;\r\nimport minko.data.Store;\r\nimport minko.render.AbstractTexture;\r\nimport minko.render.Blending.Destination;\r\nimport minko.render.Blending.Mode;\r\nimport minko.render.CompareMode;\r\nimport minko.render.CubeTexture;\r\nimport minko.render.Effect;\r\nimport minko.render.Pass;\r\nimport minko.render.Priority;\r\nimport minko.render.Program;\r\nimport minko.render.SamplerStates;\r\nimport minko.render.Shader;\r\nimport minko.render.States;\r\nimport minko.render.StencilOperation;\r\nimport minko.render.Texture;\r\nimport minko.render.TriangleCulling;\r\nimport minko.signal.Signal.SignalSlot;\r\nimport minko.signal.Signal2.SignalSlot2;\r\n\r\nimport minko.render.Blending.Source as BlendingSource;\r\n//todo Std and cast\r\n\r\n\r\nclass GLSLBlock {\r\n    public var type:GLSLBlockType;\r\n    public var value:String;\r\n    public function new (t ,v ):Void {\r\n        type=t;\r\n        value=v;\r\n    }\r\n}\r\n\r\ntypedef ShaderToGLSLBlocks = ObjectMap<Shader, GLSLBlockTree>;\r\ntypedef Technique = Array<Pass> ;\r\ntypedef Techniques = StringMap<Technique>;\r\ntypedef Passes = Array<Pass> ;\r\n\r\n@:expose(\"minko.file.GLSLBlockType\")\r\n@:enum abstract GLSLBlockType(Int) from Int to Int{\r\n    var TEXT = 0;\r\n    var FILE = 1;\r\n}\r\n@:expose(\"minko.file.GLSLBlockTree\")\r\nclass GLSLBlockTree {\r\n    public var node:GLSLBlock;\r\n    public var leaf:Array<GLSLBlockTree>;\r\n\r\n    public function new(n) {\r\n        leaf = [];\r\n        node = n;\r\n    }\r\n}\r\n@:expose(\"minko.file.Block\")\r\nclass Block <T> {\r\n    public var bindingMap:T;\r\n\r\n    public function new() {\r\n\r\n    }\r\n\r\n    public function dispose() {\r\n    }\r\n}\r\n@:expose(\"minko.file.AttributeBlock\")\r\nclass AttributeBlock extends Block< BindingMap> {\r\n    public function new() {\r\n        super();\r\n        bindingMap = new BindingMap();\r\n    }\r\n\r\n    public function copyFrom(s:AttributeBlock) {\r\n        BindingMapBase.copyFrom(bindingMap, s.bindingMap);\r\n        return this;\r\n    }\r\n}\r\n@:expose(\"minko.file.MacroBlock\")\r\nclass MacroBlock extends Block< MacroBindingMap> {\r\n    public function new() {\r\n        super();\r\n        bindingMap = new MacroBindingMap();\r\n    }\r\n\r\n    public function copyFrom(s:MacroBlock) {\r\n        MacroBindingMap.copyFrom2(bindingMap, s.bindingMap);\r\n        return this;\r\n    }\r\n}\r\n@:expose(\"minko.file.UniformBlock\")\r\nclass UniformBlock extends Block< BindingMap> {\r\n    public function new() {\r\n        super();\r\n        bindingMap = new BindingMap();\r\n    }\r\n\r\n    public function copyFrom(s:UniformBlock) {\r\n        BindingMapBase.copyFrom(bindingMap, s.bindingMap);\r\n        return this;\r\n    }\r\n}\r\n@:expose(\"minko.file.StateBlock\")\r\nclass StateBlock extends Block< BindingMap> {\r\n    public var states:States;\r\n\r\n    public function new() {\r\n        super();\r\n        bindingMap = new BindingMap();\r\n        states = new States();\r\n        // we set the priority to a special value in order to know\r\n        // wether it was actually read from the file or not\r\n        states.priority = (States.UNSET_PRIORITY_VALUE);\r\n        bindingMap.defaultValues.addProvider(states.data);\r\n    }\r\n\r\n    public function copyFrom(s:StateBlock) {\r\n        BindingMapBase.copyFrom(bindingMap, s.bindingMap);\r\n        this.states = new States().copyFrom(s.states);\r\n        //trace(\"this.states = new States().copyFrom(s.states);\");\r\n        //trace(this.states);\r\n        // data::Store copy constructor makes a shallow copy, to avoid ending up with\r\n        // data::Provider shared by multiple blocks/scopes, we have to simulate a deep copy\r\n        // by emptying the data::Store and then add the actual data::Provider of the new\r\n        // render::States object\r\n\r\n        bindingMap.defaultValues.removeProvider(bindingMap.defaultValues.providers[0]);\r\n        bindingMap.defaultValues.addProvider(states.data);\r\n        return this;\r\n    }\r\n}\r\n\r\n@:expose(\"minko.file.Scope\")\r\nclass Scope {\r\n    public var parent:Scope;\r\n    public var children:Array<Scope>;\r\n    public var attributeBlock:AttributeBlock;\r\n    public var uniformBlock:UniformBlock;\r\n    public var stateBlock:StateBlock;\r\n    public var macroBlock:MacroBlock;\r\n    public var defaultTechnique:String;\r\n    public var passes:Passes;\r\n    public var techniques:Techniques;\r\n\r\n    public function new() {\r\n        this.parent = null;\r\n        this.children = new Array<Scope>();\r\n        this.attributeBlock = new AttributeBlock();\r\n        this.uniformBlock = new UniformBlock();\r\n        this.stateBlock = new StateBlock();\r\n        this.macroBlock = new MacroBlock();\r\n        this.defaultTechnique = \"\";\r\n        this.passes = new Passes();\r\n        this.techniques = new Techniques();\r\n    }\r\n\r\n    public function copyFrom(scope:Scope) {\r\n        this.parent = scope.parent;\r\n        this.children = [];\r\n        this.attributeBlock.copyFrom(scope.attributeBlock);\r\n\r\n        this.uniformBlock.copyFrom(scope.uniformBlock);\r\n        this.stateBlock = new StateBlock().copyFrom(scope.stateBlock);\r\n        this.macroBlock.copyFrom(scope.macroBlock);\r\n        this.defaultTechnique = scope.defaultTechnique;\r\n        this.passes = scope.passes.concat([]);\r\n        this.techniques = scope.techniques;\r\n        return this;\r\n    }\r\n\r\n    public function copyFromParent(scope:Scope, parent:Scope) :Scope{\r\n        copyFrom(scope);\r\n        this.parent = parent;\r\n        parent.children.push(this);\r\n        return this;\r\n    }\r\n}\r\n@:expose(\"minko.file.EffectParser\")\r\nclass EffectParser extends AbstractParser {\r\n\r\n    public static inline var EXTRA_PROPERTY_BLENDING_MODE = \"blendingMode\";\r\n    public static inline var EXTRA_PROPERTY_STENCIL_TEST = \"stencilTest\";\r\n    public static inline var EXTRA_PROPERTY_STENCIL_OPS = \"stencilOps\";\r\n    public static inline var EXTRA_PROPERTY_STENCIL_FAIL_OP = \"fail\";\r\n    public static inline var EXTRA_PROPERTY_STENCIL_Z_FAIL_OP = \"zfail\";\r\n    public static inline var EXTRA_PROPERTY_STENCIL_Z_PASS_OP = \"zpass\";\r\n\r\n    private static var _blendingSourceMap:StringMap<Int> = initialize_blendingSourceMap();\r\n    private static var _blendingDestinationMap:StringMap<Int> = initialize_blendingDestinationMap();\r\n    private static var _blendingModeMap:StringMap<Int> = initialize_blendingModeMap();\r\n    private static var _compareFuncMap:StringMap<CompareMode> = initialize_compareFuncMap();\r\n    private static var _triangleCullingMap:StringMap<TriangleCulling> = initialize_triangleCullingMap();\r\n    private static var _stencilOpMap:StringMap<StencilOperation> = initialize_stencilOpMap();\r\n    private static var _priorityMap:StringMap<Float> = initialize_priorityMap();\r\n\r\n    static function initialize_blendingSourceMap() {\r\n        var tmp = new StringMap<Int>();\r\n        tmp.set(\"zero\", BlendingSource.ZERO);\r\n        tmp.set(\"one\", BlendingSource.ONE);\r\n        tmp.set(\"color\", BlendingSource.SRC_COLOR);\r\n        tmp.set(\"one_minus_src_color\", BlendingSource.ONE_MINUS_SRC_COLOR);\r\n        tmp.set(\"src_alpha\", BlendingSource.SRC_ALPHA);\r\n        tmp.set(\"one_minus_src_alpha\", BlendingSource.ONE_MINUS_SRC_ALPHA);\r\n        tmp.set(\"dst_alpha\", BlendingSource.DST_ALPHA);\r\n        tmp.set(\"one_minus_dst_alpha\", BlendingSource.ONE_MINUS_DST_ALPHA);\r\n        return tmp;\r\n    }\r\n\r\n    static function initialize_blendingDestinationMap() {\r\n        var tmp = new StringMap<Int>();\r\n        tmp.set(\"zero\", Destination.ZERO) ;\r\n        tmp.set(\"one\", Destination.ONE) ;\r\n        tmp.set(\"dst_color\", Destination.DST_COLOR) ;\r\n        tmp.set(\"one_minus_dst_color\", Destination.ONE_MINUS_DST_COLOR) ;\r\n        tmp.set(\"src_alpha_saturate\", Destination.SRC_ALPHA_SATURATE) ;\r\n        tmp.set(\"one_minus_src_alpha\", Destination.ONE_MINUS_SRC_ALPHA) ;\r\n        tmp.set(\"dst_alpha\", Destination.DST_ALPHA) ;\r\n        tmp.set(\"one_minus_dst_alpha\", Destination.ONE_MINUS_DST_ALPHA) ;\r\n        return tmp;\r\n    }\r\n\r\n    static function initialize_blendingModeMap() {\r\n        var tmp = new StringMap<Int>();\r\n        tmp.set(\"default\", Mode.DEFAULT) ;\r\n        tmp.set(\"alpha\", Mode.ALPHA) ;\r\n        tmp.set(\"additive\", Mode.ADDITIVE) ;\r\n        return tmp;\r\n    }\r\n\r\n    static function initialize_compareFuncMap() {\r\n        var tmp = new StringMap<CompareMode>();\r\n        tmp.set(\"always\", CompareMode.ALWAYS);\r\n        tmp.set(\"equal\", CompareMode.EQUAL);\r\n        tmp.set(\"greater\", CompareMode.GREATER);\r\n        tmp.set(\"greater_equal\", CompareMode.GREATER_EQUAL) ;\r\n        tmp.set(\"less\", CompareMode.LESS) ;\r\n        tmp.set(\"less_equal\", CompareMode.LESS_EQUAL);\r\n        tmp.set(\"never\", CompareMode.NEVER);\r\n        tmp.set(\"not_equal\", CompareMode.NOT_EQUAL);\r\n        return tmp;\r\n    }\r\n\r\n    static function initialize_triangleCullingMap() {\r\n        var tmp = new StringMap<TriangleCulling>();\r\n        tmp.set(\"none\", TriangleCulling.NONE);\r\n        tmp.set(\"front\", TriangleCulling.FRONT);\r\n        tmp.set(\"back\", TriangleCulling.BACK);\r\n        tmp.set(\"both\", TriangleCulling.BOTH);\r\n        return tmp;\r\n    }\r\n\r\n    static function initialize_stencilOpMap() {\r\n        var tmp = new StringMap<StencilOperation>();\r\n        tmp.set(\"keep\", StencilOperation.KEEP);\r\n        tmp.set(\"zero\", StencilOperation.ZERO);\r\n        tmp.set(\"replace\", StencilOperation.REPLACE);\r\n        tmp.set(\"incr\", StencilOperation.INCR);\r\n        tmp.set(\"incr_wrap\", StencilOperation.INCR_WRAP);\r\n        tmp.set(\"decr\", StencilOperation.DECR);\r\n        tmp.set(\"decr_wrap\", StencilOperation.DECR_WRAP);\r\n        tmp.set(\"invert\", StencilOperation.INVERT);\r\n        return tmp;\r\n    }\r\n\r\n    static function initialize_priorityMap() {\r\n        var tmp = new StringMap<Float>();\r\n        tmp.set(\"first\", Priority.FIRST);\r\n        tmp.set(\"background\", Priority.BACKGROUND);\r\n        tmp.set(\"opaque\", Priority.OPAQUE);\r\n        tmp.set(\"transparent\", Priority.TRANSPARENT);\r\n        tmp.set(\"last\", Priority.LAST);\r\n        return tmp;\r\n    }\r\n\r\n\r\n    static private var _extraStateNames:Array<String> = [\r\n        EffectParser.EXTRA_PROPERTY_BLENDING_MODE,\r\n        EffectParser.EXTRA_PROPERTY_STENCIL_TEST\r\n    ];\r\n\r\n    private var _filename:String;\r\n    private var _resolvedFilename:String;\r\n    private var _options:Options;\r\n    private var _effect:Effect;\r\n    private var _effectName:String;\r\n    private var _assetLibrary:AssetLibrary;\r\n\r\n    private var _globalScope:Scope;\r\n    private var _shaderToGLSL:ObjectMap<Shader, GLSLBlockTree>;\r\n    private var _numDependencies:Int;\r\n    private var _numLoadedDependencies:Int;\r\n    private var _effectData:Provider;\r\n\r\n    private var _loaderCompleteSlots:ObjectMap<Loader, SignalSlot<Loader>>;\r\n    private var _loaderErrorSlots:ObjectMap<Loader, SignalSlot2<Loader, String>>;\r\n\r\n    public function new() {\r\n        super();\r\n        this._effect = null;\r\n        this._numDependencies = 0;\r\n        this._numLoadedDependencies = 0;\r\n        this._effectData = Provider.create();\r\n\r\n\r\n        _filename = \"\";\r\n        _resolvedFilename = \"\";\r\n        _options = null;\r\n        _effectName = \"\";\r\n        _assetLibrary = null;\r\n\r\n        _globalScope = new Scope();\r\n        _shaderToGLSL = new ObjectMap<Shader, GLSLBlockTree>();\r\n\r\n        _loaderCompleteSlots = new ObjectMap<Loader, SignalSlot<Loader>>();\r\n        _loaderErrorSlots = new ObjectMap<Loader, SignalSlot2<Loader, String>>();\r\n    }\r\n\r\n    public static function create() {\r\n        return new EffectParser();\r\n    }\r\n    public var effect(get, null):Effect;\r\n\r\n    function get_effect() {\r\n        return _effect;\r\n    }\r\n\r\n    public var effectName(get, null):String;\r\n\r\n    function get_effectName() {\r\n        return _effectName;\r\n    }\r\n\r\n    function isDynamic(o) {\r\n        return !Std.is(o, Array)\r\n        && !Std.is(o, Int)\r\n        && !Std.is(o, Float)\r\n        && !Std.is(o, String)\r\n        && !Std.is(o, Bool)\r\n        && o != null;\r\n    }\r\n\r\n    override public function parse(filename:String, resolvedFilename:String, options:Options, data:Bytes, assetLibrary:AssetLibrary) {\r\n        var root = {};\r\n\r\n        // Add a line ending to avoid JSON parsing error\r\n        var tempData = data.getString(0, data.length);\r\n        try {\r\n\r\n            root = haxe.format.JsonParser.parse(tempData);\r\n        } catch (e:String) {\r\n            _error.execute(this, (resolvedFilename + \": \" + e));\r\n        }\r\n\r\n        _options = options.clone();\r\n        //_options.loadAsynchronously = (false);\r\n\r\n        var pos = resolvedFilename.lastIndexOf(\"/\");\r\n        if (pos == -1) {\r\n            pos = resolvedFilename.lastIndexOf(\"\\\\\");\r\n        }\r\n        if (pos != -1) {\r\n            _options = _options.clone();\r\n            _options.includePaths = [];\r\n            _options.includePaths.push(resolvedFilename.substr(0, pos));\r\n        }\r\n\r\n        _filename = filename;\r\n        _resolvedFilename = resolvedFilename;\r\n        _assetLibrary = assetLibrary;\r\n        if (Reflect.hasField(root, \"name\")) {\r\n            _effectName = Reflect.field(root, \"name\") ;\r\n        }\r\n        else {\r\n            _effectName = filename;\r\n        }\r\n\r\n        parseGlobalScope(root, _globalScope);\r\n\r\n        _effect = Effect.create(_effectName);\r\n        checkLoadedAndfinalize();\r\n    }\r\n\r\n\r\n    private function getPriorityValue(name) {\r\n        var foundPriorityIt = _priorityMap.exists(name);\r\n        return foundPriorityIt ? _priorityMap.get(name) : _priorityMap.get(\"opaque\");\r\n    }\r\n\r\n    private function parseGlobalScope(node:Dynamic, scope:Scope) {\r\n        parseAttributes(node, scope, scope.attributeBlock);\r\n        parseUniforms(node, scope, scope.uniformBlock);\r\n        parseMacros(node, scope, scope.macroBlock);\r\n        parseStates(node, scope, scope.stateBlock);\r\n        parsePasses(node, scope, scope.passes);\r\n        parseTechniques(node, scope, scope.techniques);\r\n    }\r\n\r\n    private function parseConfiguration(node:Dynamic) {\r\n        var confValue = Reflect.field(node, \"configuration\");\r\n        var platforms = _options.platforms;\r\n        var userFlags = _options.userFlags;\r\n        var r = false;\r\n\r\n        if (Std.is(confValue, Array)) {\r\n            var tmps:Array<Dynamic> = cast confValue;\r\n            for (value in tmps) {\r\n\r\n                // if the config. token is a string and we can find it in the list of platforms,\r\n                // then the configuration is ok and we return true\r\n                if (Std.is(value, String) && Lambda.has(platforms, value) || Lambda.has(userFlags, value)) {\r\n                    return true;\r\n                }\r\n                else if (Std.is(value, Array)) {\r\n                    // if the config. token is an array, we check that *all* the string tokens are in\r\n                    // the platforms list; if a single of them is not there then the config. token\r\n                    // is considered to be false\r\n                    var tmp:Array<Dynamic> = cast value;\r\n                    for (str in tmp) {\r\n                        if (Std.is(str, String) && Lambda.has(platforms, str) || Lambda.has(userFlags, str)) {\r\n                            r = r || false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    private function fixMissingPassPriorities(passes:Array<Pass>) {\r\n        //todo ?\r\n        var numPasses = passes.length;\r\n        var passOne = passes[0];\r\n        if (numPasses == 1) {\r\n\r\n            //todo\r\n            // passOne.states.data=Provider.createbyProvider(passOne.stateBindings.defaultValues.providers[0]);\r\n            if (passOne.states.priority == States.UNSET_PRIORITY_VALUE) {\r\n                passOne.states.priority = (States.DEFAULT_PRIORITY);\r\n            }\r\n        }\r\n        else {\r\n            for (i in 0... numPasses) {\r\n                var pass = passes[i];\r\n\r\n                if (pass.states.priority == States.UNSET_PRIORITY_VALUE) {\r\n                    var nextPassWithPriority = i + 1;\r\n                    while (nextPassWithPriority < numPasses && passes[nextPassWithPriority].states.priority == States.UNSET_PRIORITY_VALUE) {\r\n                        ++nextPassWithPriority;\r\n                    }\r\n                    //todo\r\n                    // pass.states.data=Provider.createbyProvider(pass.stateBindings.defaultValues.providers[0]);\r\n                    if (nextPassWithPriority >= numPasses) {\r\n                        pass.states.priority = (States.DEFAULT_PRIORITY + (numPasses - i - 1));\r\n                    }\r\n                    else {\r\n                        pass.states.priority = ((nextPassWithPriority - i) + passes[nextPassWithPriority].states.priority);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public function parseTechniques(node:Any, scope:Scope, techniques:Techniques) {\r\n        var techniquesNode = Reflect.field(node, \"techniques\");\r\n\r\n        if (Std.is(techniquesNode, Array)) {\r\n            var tmp:Array<Dynamic> = cast techniquesNode;\r\n            for (techniqueNode in tmp) {\r\n                // FIXME: switch to fallback instead of ignoring\r\n                if (!parseConfiguration(techniqueNode)) {\r\n                    continue;\r\n                }\r\n\r\n\r\n                var techniqueName:String = \"\";\r\n                if(Reflect.hasField(techniqueNode, \"name\")){\r\n                    var techniqueNameNode =Reflect.field(techniqueNode, \"name\");\r\n                    if (Std.is(techniqueNameNode, String)) {\r\n                        techniqueName = cast(techniqueNameNode, String);\r\n                    } else if (Std.is(techniqueNameNode, Array)) {\r\n                        var tmp:Array<Any> = cast techniqueNameNode;\r\n                        if (tmp.length == 1) {\r\n                            techniqueName = \"default\";\r\n                        } else {\r\n                            techniqueName = _effectName + \"-technique-\" + Lambda.count(techniques);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    techniqueName = \"default\";\r\n                }\r\n\r\n\r\n                var techniqueScope:Scope = new Scope().copyFromParent(scope, scope);\r\n\r\n                if (!techniques.exists(techniqueName)) {\r\n                    techniques.set(techniqueName, []);\r\n                }\r\n                var passes=techniques.get(techniqueName);\r\n                parseAttributes(techniqueNode, techniqueScope, techniqueScope.attributeBlock);\r\n                parseUniforms(techniqueNode, techniqueScope, techniqueScope.uniformBlock);\r\n                parseMacros(techniqueNode, techniqueScope, techniqueScope.macroBlock);\r\n                parseStates(techniqueNode, techniqueScope, techniqueScope.stateBlock);\r\n                parsePasses(techniqueNode, techniqueScope, passes);\r\n\r\n                fixMissingPassPriorities(techniques.get(techniqueName));\r\n            }\r\n        }\r\n        // FIXME: throw otherwise\r\n    }\r\n\r\n    private function getPassToExtend(extendNode:Dynamic, callBack:Pass -> Void) {\r\n        var pass:Pass = null;\r\n        var passName:String;\r\n\r\n        if (Std.is(extendNode, String)) {\r\n            passName = extendNode ;\r\n\r\n            var passIt = Lambda.find(_globalScope.passes, function(p:Pass) {\r\n                return p.name == passName;\r\n            });\r\n\r\n            if (passIt != null) {\r\n                pass = passIt;\r\n            }\r\n        }\r\n        else if (isDynamic(extendNode)) {\r\n            passName = Reflect.field(extendNode, \"pass\");\r\n\r\n            var techniqueName = Reflect.field(extendNode, \"technique\");\r\n            var effectFilename = Reflect.field(extendNode, \"effect\");\r\n\r\n            if (techniqueName == \"\") {\r\n                techniqueName = \"default\";\r\n            }\r\n\r\n            if (_assetLibrary.effect(effectFilename) == null) {\r\n                var options:Options = _options.clone();\r\n                var loader:Loader = Loader.createbyLoader(_assetLibrary.loader);\r\n\r\n               // options.loadAsynchronously = (false);\r\n                loader.setQueue(effectFilename, options);\r\n                _numDependencies++;\r\n                var effectComplete = loader.complete.connect(function(l:Loader) {\r\n                    pass = findPassFromEffectFilename(effectFilename, techniqueName, passName);\r\n                    callBack(pass);\r\n                    _numLoadedDependencies++;\r\n                    checkLoadedAndfinalize();\r\n                });\r\n                loader.load();\r\n                trace(\"effectFilename\",effectFilename);\r\n                return;\r\n            }\r\n            else {\r\n                pass = findPassFromEffectFilename(effectFilename, techniqueName, passName);\r\n            }\r\n        }\r\n        else {\r\n            throw \"\";\r\n        }\r\n\r\n        if (pass == null) {\r\n            throw (\"Undefined base pass with name '\" + passName + \"'.\");\r\n        }\r\n\r\n        callBack(pass);\r\n    }\r\n\r\n    private function findPassFromEffectFilename(effectFilename, techniqueName, passName) {\r\n        var effect:Effect = _assetLibrary.effect(effectFilename);\r\n\r\n        if (effect == null) {\r\n            return null;\r\n        }\r\n\r\n        for (techniqueNameAndPasses in effect.techniques.keys()) {\r\n            if (techniqueNameAndPasses == techniqueName) {\r\n                for (p in effect.techniques.get(techniqueNameAndPasses)) {\r\n                    if (p.name == passName) {\r\n                        return p;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private function parsePassDynamic(node:Dynamic, scope:Scope, passes:Array<Pass>, ?pass:Pass = null) {\r\n        // If the pass is an actual pass object, we parse all its data, create the corresponding\r\n        // Pass object and add it to the vector.\r\n\r\n        var passScope:Scope = new Scope().copyFromParent(scope, scope);\r\n\r\n        var vertexShader:Shader = null;\r\n        var fragmentShader:Shader = null;\r\n        var passName = _effectName + \"-pass\" + scope.passes.length;\r\n        var nameNode = Reflect.field(node, \"name\");\r\n        var isForward = true;\r\n\r\n        if (Reflect.hasField(node, \"extends\") && pass != null) {\r\n            var extendNode = Reflect.field(node, \"extends\");\r\n\r\n            inline function merge(a:StringMap<Dynamic>, b:StringMap<Dynamic>) {\r\n                for (k in b.keys()) {\r\n                    if (!a.exists(k))\r\n                        a.set(k, b.get(k));\r\n                }\r\n            };\r\n            // If a pass \"extends\" another pass, then we have to merge its properties with the already existing ones\r\n            merge(passScope.attributeBlock.bindingMap.bindings, pass.attributeBindings.bindings);\r\n            merge(passScope.uniformBlock.bindingMap.bindings, pass.uniformBindings.bindings);\r\n            merge(passScope.macroBlock.bindingMap.bindings, pass.macroBindings.bindings);\r\n            merge(passScope.macroBlock.bindingMap.types, pass.macroBindings.types);\r\n            merge(passScope.stateBlock.bindingMap.bindings, pass.stateBindings.bindings);\r\n\r\n\r\n            if (pass.attributeBindings.defaultValues.providers.length > 0) {\r\n                if (passScope.attributeBlock.bindingMap.defaultValues.providers.length == 0) {\r\n                    passScope.attributeBlock.bindingMap.defaultValues = new Store().copyFrom(pass.attributeBindings.defaultValues, true);\r\n                } else {\r\n                    var tmp = [for (provider in pass.attributeBindings.defaultValues.providers) new Provider().copyFrom(provider)];\r\n                    passScope.attributeBlock.bindingMap.defaultValues.providers = (tmp);\r\n                }\r\n\r\n            }\r\n\r\n            if (pass.uniformBindings.defaultValues.providers.length > 0) {\r\n                if (passScope.uniformBlock.bindingMap.defaultValues.providers.length == 0) {\r\n                    passScope.uniformBlock.bindingMap.defaultValues = new Store().copyFrom(pass.uniformBindings.defaultValues, true);\r\n                } else {\r\n                    var tmp = [for (provider in pass.uniformBindings.defaultValues.providers) new Provider().copyFrom(provider)];\r\n                    passScope.uniformBlock.bindingMap.defaultValues.providers = (tmp);\r\n                }\r\n            }\r\n\r\n            if (pass.macroBindings.defaultValues.providers.length > 0) {\r\n                if (passScope.macroBlock.bindingMap.defaultValues.providers.length == 0) {\r\n                    passScope.macroBlock.bindingMap.defaultValues = new Store().copyFrom(pass.macroBindings.defaultValues, true);\r\n                } else {\r\n                    var tmp = [ for (provider in pass.macroBindings.defaultValues.providers) new Provider().copyFrom(provider)];\r\n                    passScope.macroBlock.bindingMap.defaultValues.providers = (tmp);\r\n                }\r\n            }\r\n            passScope.stateBlock.states.data = Provider.createbyProvider(pass.stateBindings.defaultValues.providers[0]);\r\n            passScope.stateBlock.bindingMap.defaultValues.removeProvider(passScope.stateBlock.bindingMap.defaultValues.providers[0]);\r\n            passScope.stateBlock.bindingMap.defaultValues.addProvider(passScope.stateBlock.states.data);\r\n\r\n            vertexShader = pass.program.vertexShader;\r\n            fragmentShader = pass.program.fragmentShader;\r\n            isForward = pass.isForward;\r\n            passName = pass.name;\r\n        }\r\n\r\n        if (Std.is(nameNode, String)) {\r\n            passName = nameNode;\r\n        }\r\n        // FIXME: throw otherwise\r\n\r\n        parseAttributes(node, passScope, passScope.attributeBlock);\r\n        parseUniforms(node, passScope, passScope.uniformBlock);\r\n        parseMacros(node, passScope, passScope.macroBlock);\r\n        parseStates(node, passScope, passScope.stateBlock);\r\n\r\n        if (Reflect.hasField(node, \"vertexShader\")) {\r\n            vertexShader = parseShader(Reflect.field(node, \"vertexShader\"), passScope, ShaderType.VERTEX_SHADER);\r\n        }\r\n        else if (vertexShader == null) {\r\n            throw (\"Missing vertex shader for pass \\\"\" + passName + \"\\\"\");\r\n        }\r\n\r\n        if (Reflect.hasField(node, \"fragmentShader\")) {\r\n            fragmentShader = parseShader(Reflect.field(node, \"fragmentShader\"), passScope, ShaderType.FRAGMENT_SHADER);\r\n        }\r\n        else if (fragmentShader == null) {\r\n            throw (\"Missing fragment shader for pass \\\"\" + passName + \"\\\"\");\r\n        }\r\n\r\n        if (Reflect.hasField(node, \"forward\")) {\r\n            isForward = Reflect.field(node, \"forward\");\r\n        }\r\n\r\n        if (!isForward) {\r\n            checkDeferredPassBindings(passScope);\r\n        }\r\n\r\n        //todo;\r\n\r\n        passes.push(Pass.create(passName, isForward, Program.createbyShader(passName, _options.context, vertexShader, fragmentShader), passScope.attributeBlock.bindingMap, passScope.uniformBlock.bindingMap, passScope.stateBlock.bindingMap, passScope.macroBlock.bindingMap));\r\n\r\n    }\r\n\r\n    private function parsePassString(node:Dynamic, scope:Scope, passes:Array<Pass>, pass:Pass) {\r\n        passes.push(Pass.createbyPass(pass, true));\r\n    }\r\n\r\n    private function parsePass(node:Dynamic, scope:Scope, passes:Array<Pass>) {\r\n        if (Std.is(node, String)) {\r\n            getPassToExtend(node, function(pass:Pass) {\r\n                parsePassString(node, scope, passes, pass);\r\n            });\r\n        }\r\n        else if (isDynamic(node)) {\r\n            if (Reflect.hasField(node, \"extends\")) {\r\n                var extendNode = Reflect.field(node, \"extends\");\r\n                getPassToExtend(extendNode, function(pass:Pass) {\r\n                    parsePassDynamic(node, scope, passes, pass);\r\n                });\r\n            } else {\r\n                parsePassDynamic(node, scope, passes, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    private function checkDeferredPassBindings(passScope:Scope) {\r\n        for (bindingNameAndValue in passScope.attributeBlock.bindingMap.bindings) {\r\n            if (bindingNameAndValue.source == Source.TARGET) {\r\n                throw \"\";\r\n            }\r\n        }\r\n\r\n        for (bindingNameAndValue in passScope.uniformBlock.bindingMap.bindings) {\r\n            if (bindingNameAndValue.source == Source.TARGET) {\r\n                throw \"\";\r\n            }\r\n        }\r\n\r\n        for (bindingNameAndValue in passScope.stateBlock.bindingMap.bindings) {\r\n            if (bindingNameAndValue.source == Source.TARGET) {\r\n                throw \"\";\r\n            }\r\n        }\r\n\r\n        for (bindingNameAndValue in passScope.macroBlock.bindingMap.bindings) {\r\n            if (bindingNameAndValue.source == Source.TARGET) {\r\n                throw \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private function parsePasses(node:Dynamic, scope:Scope, passes:Array<Pass>) {\r\n        var passesNode = Reflect.field(node, \"passes\");\r\n\r\n        if (Std.is(passesNode, Array)) {\r\n            var tmp:Array<Dynamic> = cast passesNode;\r\n            for (passNode in tmp) {\r\n                // FIXME: switch to fallback instead of ignoring\r\n                if (isDynamic(passNode) && !parseConfiguration(passNode)) {\r\n                    continue;\r\n                }\r\n\r\n                parsePass(passNode, scope, passes);\r\n            }\r\n        }\r\n        // FIXME: throw otherwise\r\n    }\r\n\r\n    private function parseDefaultValue(node:Dynamic, scope:Scope, valueName:String, defaultValues:Provider) {\r\n        if (!isDynamic(node)) {\r\n            return;\r\n        }\r\n        var memberNames = Reflect.fields(node) ;\r\n        if (Lambda.has(memberNames, \"default\") == false) {\r\n            return;\r\n        }\r\n\r\n        var defaultValueNode = Reflect.field(node, \"default\");\r\n        if (isDynamic(defaultValueNode)) {\r\n            parseDefaultValueVectorObject(defaultValueNode, scope, valueName, defaultValues);\r\n        }\r\n        else if (Std.is(defaultValueNode, Array)) {\r\n            var tmps:Array<Array<Any>> = cast defaultValueNode ;\r\n            if (tmps.length == 1 && Std.is(tmps[0], Array)) {\r\n                parseDefaultValueVectorArray(tmps[0], scope, valueName, defaultValues);\r\n            }\r\n            else {\r\n                throw \"\"; // FIXME: support array default values\r\n            }\r\n        }\r\n        else if (Std.is(defaultValueNode, Bool)) {\r\n            defaultValues.set(valueName, cast(defaultValueNode, Bool) ? 1 : 0);\r\n        }\r\n        else if (Std.is(defaultValueNode, Int)) {\r\n            defaultValues.set(valueName, defaultValueNode);\r\n        }\r\n        else if (Std.is(defaultValueNode, Float)) {\r\n            defaultValues.set(valueName, defaultValueNode);\r\n        }\r\n        else if (Std.is(defaultValueNode, String)) {\r\n            loadTexture(cast(defaultValueNode, String), valueName, defaultValues);\r\n        }\r\n    }\r\n\r\n\r\n    private function parseDefaultValueSamplerStates(cls:String, node:Dynamic, scope:Scope, valueName:String, defaultValues:Provider) {\r\n        if (!isDynamic(node)) {\r\n            return;\r\n        }\r\n        var memberNames = Reflect.fields(node);\r\n        if (Lambda.has(memberNames, \"default\") == false) {\r\n            return;\r\n        }\r\n        var defaultValueNode = Reflect.field(node, \"default\");\r\n        if (Std.is(defaultValueNode, String)) {\r\n            if (cls == \"WrapMode\") {\r\n                defaultValues.set(valueName, SamplerStates.stringToWrapMode(defaultValueNode));\r\n            }\r\n            else if (cls == \"TextureFilter\") {\r\n                defaultValues.set(valueName, SamplerStates.stringToTextureFilter(defaultValueNode));\r\n            }\r\n            else if (cls == \"MipFilter\") {\r\n                defaultValues.set(valueName, SamplerStates.stringToMipFilter(defaultValueNode));\r\n            }\r\n        }\r\n    }\r\n\r\n    private function parseDefaultValueStates(node:Dynamic, scope:Scope, stateName:String, defaultValues:Provider) {\r\n        if (!isDynamic(node)) {\r\n            return;\r\n        }\r\n\r\n        var memberNames = Reflect.fields(node);\r\n\r\n        if (Lambda.has(memberNames, \"default\") == false) {\r\n            return;\r\n        }\r\n\r\n        var defaultValueNode = Reflect.field(node, \"default\");\r\n\r\n        if (Std.is(defaultValueNode, Bool)) {\r\n            defaultValues.set(stateName, defaultValueNode ? 1 : 0);\r\n        }\r\n        else if (Std.is(defaultValueNode, Int)) {\r\n            defaultValues.set(stateName, defaultValueNode);\r\n        }\r\n        else if (Std.is(defaultValueNode, Float)) {\r\n            defaultValues.set(stateName, defaultValueNode);\r\n        }\r\n        else if (Std.is(defaultValueNode, String)) {\r\n            defaultValues.set(stateName, defaultValueNode);\r\n        }\r\n        else if (Std.is(defaultValueNode, Array)) {\r\n            if (stateName == States.PROPERTY_PRIORITY && Std.is(node[0], String) && Std.is(node[1], Float)) {\r\n                defaultValues.set(stateName, getPriorityValue(node[0]) + node[1]);\r\n            }\r\n            else {\r\n                throw \"\"; // FIXME: support array default values\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private function parseDefaultValueVectorArray(defaultValueNode:Array<Dynamic>, scope:Scope, valueName:String, defaultValues:Provider) {\r\n        var size = defaultValueNode.length;\r\n        var type = defaultValueNode[0] ;\r\n\r\n        if (Std.is(type, Int) || Std.is(type, Float)) {\r\n            var value = [];\r\n            for (i in 0... size) {\r\n                value[i] = defaultValueNode[i] ;\r\n            }\r\n            if (size == 2) {\r\n                defaultValues.set(valueName, new Vec2(value[0], value[1]));\r\n            }\r\n            else if (size == 3) {\r\n                defaultValues.set(valueName, new Vec3(value[0], value[1], value[2]));\r\n            }\r\n            else if (size == 4) {\r\n                defaultValues.set(valueName, new Vec4(value[0], value[1], value[2], value[3]));\r\n            }\r\n        }\r\n        else if (Std.is(type, Bool)) {\r\n            // GLSL bool uniforms are set using integers, thus even if the default value is written\r\n            // using boolean values, we store it as integers\r\n            // https://www.opengl.org/sdk/docs/man/html/glUniform.xhtml\r\n            var value = [];//(size);\r\n            for (i in 0...size) {\r\n                value[i] = defaultValueNode[i] ? 1 : 0;\r\n            }\r\n            if (size == 2) {\r\n                defaultValues.set(valueName, new Vec2(value[0], value[1]));\r\n            }\r\n            else if (size == 3) {\r\n                defaultValues.set(valueName, new Vec3(value[0], value[1], value[2]));\r\n            }\r\n            else if (size == 4) {\r\n                defaultValues.set(valueName, new Vec4(value[0], value[1], value[2], value[3]));\r\n            }\r\n        }\r\n    }\r\n\r\n    private function parseDefaultValueVectorObject(defaultValueNode:Dynamic, scope:Scope, valueName:String, defaultValues:Provider) {\r\n        var memberNames = Reflect.fields(defaultValueNode);\r\n        var size = memberNames.length;\r\n        var type = Reflect.field(defaultValueNode, memberNames[0]);\r\n        var offsets:Array<String> = [\"x\", \"y\", \"z\", \"w\"];\r\n\r\n        if (Std.is(type, Int) || Std.is(type, Float)) {\r\n            var value = [];//(size);\r\n            for (i in 0... size) {\r\n                value[i] = Reflect.field(defaultValueNode, offsets[i]);\r\n            }\r\n            if (size == 2) {\r\n                defaultValues.set(valueName, new Vec2(value[0], value[1]));\r\n            }\r\n            else if (size == 3) {\r\n                defaultValues.set(valueName, new Vec3(value[0], value[1], value[2]));\r\n            }\r\n            else if (size == 4) {\r\n                defaultValues.set(valueName, new Vec4(value[0], value[1], value[2], value[3]));\r\n            }\r\n        }\r\n        else if (Std.is(type, Bool)) {\r\n            // GLSL bool uniforms are set using integers, thus even if the default value is written\r\n            // using boolean values, we store it as integers\r\n            // https://www.opengl.org/sdk/docs/man/html/glUniform.xhtml\r\n            var value = [];//(size);\r\n            for (i in 0... size) {\r\n                value[i] = Reflect.field(defaultValueNode, offsets[i]) ? 1 : 0;\r\n            }\r\n            if (size == 2) {\r\n                defaultValues.set(valueName, new Vec2(value[0], value[1]));\r\n            }\r\n            else if (size == 3) {\r\n                defaultValues.set(valueName, new Vec3(value[0], value[1], value[2]));\r\n            }\r\n            else if (size == 4) {\r\n                defaultValues.set(valueName, new Vec4(value[0], value[1], value[2], value[3]));\r\n            }\r\n        }\r\n    }\r\n\r\n    private function parseBinding(node:Dynamic, scope:Scope, binding:Binding) {\r\n        binding.source = Source.TARGET;\r\n\r\n        if (Std.is(node, String)) {\r\n            binding.propertyName = node ;\r\n\r\n            return true;\r\n        }\r\n        else {\r\n            var bindingNode = Reflect.field(node, \"binding\");\r\n\r\n            if (Std.is(bindingNode, String)) {\r\n                binding.propertyName = bindingNode;\r\n\r\n                return true;\r\n            }\r\n            else if (isDynamic(bindingNode)) {\r\n                var propertyNode = Reflect.field(bindingNode, \"property\");\r\n                var sourceNode = Reflect.field(bindingNode, \"source\");\r\n\r\n                if (Std.is(propertyNode, String)) {\r\n                    binding.propertyName = propertyNode;\r\n                }\r\n                // FIXME: throw otherwise\r\n\r\n                if (Std.is(sourceNode, String)) {\r\n                    var sourceStr = sourceNode;\r\n\r\n                    if (sourceStr == \"target\") {\r\n                        binding.source = Source.TARGET;\r\n                    }\r\n                    else if (sourceStr == \"renderer\") {\r\n                        binding.source = Source.RENDERER;\r\n                    }\r\n                    else if (sourceStr == \"root\") {\r\n                        binding.source = Source.ROOT;\r\n                    }\r\n                }\r\n                // FIXME: throw otherwise\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private function parseMacroBinding(node:Dynamic, scope:Scope, binding:MacroBinding) {\r\n        if (!isDynamic(node)) {\r\n            return;\r\n        }\r\n\r\n        var bindingNode = Reflect.field(node, \"binding\");\r\n\r\n        if (!isDynamic(bindingNode)) {\r\n            return;\r\n        }\r\n\r\n        var minNode = Reflect.field(bindingNode, \"min\");\r\n        if (Std.is(minNode, Int)) {\r\n            binding.minValue = minNode;\r\n        }\r\n        // FIXME: throw otherwise\r\n\r\n        var maxNode = Reflect.field(bindingNode, \"max\");\r\n        if (Std.is(maxNode, Int)) {\r\n            binding.maxValue = maxNode;\r\n        }\r\n        // FIXME: throw otherwise\r\n    }\r\n\r\n\r\n    public function parseMacroBindings(node:Any, scope:Scope, bindings:MacroBindingMap) {\r\n\r\n    }\r\n\r\n    public function parseAttributes(node:Any, scope:Scope, attributes:AttributeBlock) {\r\n        var attributesNode = Reflect.field(node, \"attributes\");\r\n\r\n        if (isDynamic(attributesNode)) {\r\n            var defaultValuesProvider:Provider = null;\r\n            if (attributes.bindingMap.defaultValues.providers.length > 0) {\r\n                defaultValuesProvider = attributes.bindingMap.defaultValues.providers[0];\r\n            }\r\n            else {\r\n                defaultValuesProvider = Provider.create();\r\n                attributes.bindingMap.defaultValues.addProvider(defaultValuesProvider);\r\n            }\r\n\r\n            // var defaultValuesProvider:Provider = Provider.create();\r\n            // attributes.bindingMap.defaultValues.addProvider(defaultValuesProvider);\r\n            var memberNames = Reflect.fields(attributesNode);\r\n            for (attributeName in memberNames) {\r\n                var attributeNode = Reflect.field(attributesNode, attributeName);\r\n\r\n                var binding:Binding = new Binding();\r\n                if (parseBinding(attributeNode, scope, binding)) {\r\n                    attributes.bindingMap.bindings.set(attributeName, binding);\r\n                }\r\n\r\n                //if (!attributeNode.get(\"default\", 0).empty())\r\n                //    throw ParserError(\"Default values are not yet supported for attributes.\");\r\n\r\n                // FIXME: support default values for vertex attributes\r\n\r\n                //parseDefaultValue(\r\n                //    attributeNode,\r\n                //    scope,\r\n                //   attributeName,\r\n                //Json::ValueType::realValue,\r\n                //    defaultValuesProvider\r\n                //);\r\n            }\r\n        }\r\n        // FIXME: throw otherwise\r\n    }\r\n\r\n    public function parseUniforms(node:Any, scope:Scope, uniforms:UniformBlock) {\r\n        var uniformsNode = Reflect.field(node, \"uniforms\");\r\n\r\n        if (isDynamic(uniformsNode)) {\r\n            var defaultValuesProvider:Provider = null;\r\n\r\n            if (uniforms.bindingMap.defaultValues.providers.length > 0) {\r\n                defaultValuesProvider = uniforms.bindingMap.defaultValues.providers[0];\r\n            }\r\n            else {\r\n                defaultValuesProvider = Provider.create();\r\n                uniforms.bindingMap.defaultValues.addProvider(defaultValuesProvider);\r\n            }\r\n\r\n            for (uniformName in Reflect.fields(uniformsNode)) {\r\n                var uniformNode = Reflect.field(uniformsNode, uniformName);\r\n\r\n                var binding:Binding = new Binding();\r\n                if (parseBinding(uniformNode, scope, binding)) {\r\n                    uniforms.bindingMap.bindings.set(uniformName, binding);\r\n                }\r\n\r\n                parseSamplerStates(uniformNode, scope, uniformName, defaultValuesProvider, uniforms.bindingMap);\r\n\r\n                parseDefaultValue(uniformNode, scope, uniformName, defaultValuesProvider);\r\n            }\r\n        }\r\n        // FIXME: throw otherwise\r\n    }\r\n\r\n    public function parseMacros(node:Any, scope:Scope, macros:MacroBlock) {\r\n        var macrosNode = Reflect.field(node, \"macros\");\r\n\r\n        if (isDynamic(macrosNode)) {\r\n            var defaultValuesProvider:Provider = null;\r\n\r\n            if (macros.bindingMap.defaultValues.providers.length > 0) {\r\n                defaultValuesProvider = macros.bindingMap.defaultValues.providers[0];\r\n            }\r\n            else {\r\n                defaultValuesProvider = Provider.create();\r\n                macros.bindingMap.defaultValues.addProvider(defaultValuesProvider);\r\n            }\r\n\r\n            for (macroName in Reflect.fields(macrosNode)) {\r\n                var macroNode = Reflect.field(macrosNode, macroName);\r\n\r\n                var binding:MacroBinding = new MacroBinding();\r\n                if (parseBinding(macroNode, scope, binding)) {\r\n                    parseMacroBinding(macroNode, scope, binding);\r\n                    macros.bindingMap.bindings.set(macroName, binding);\r\n                }\r\n\r\n                parseDefaultValue(macroNode, scope, macroName, defaultValuesProvider);\r\n\r\n                macros.bindingMap.types.set(macroName, MacroType.UNSET);\r\n                if (isDynamic(macroNode)) {\r\n                    var typeNode = Reflect.field(macroNode, \"type\");\r\n                    if (Std.is(typeNode, String)) {\r\n                        macros.bindingMap.types.set(macroName, MacroBindingMap.stringToMacroType(typeNode));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // FIXME: throw otherwise\r\n    }\r\n\r\n    private function parseStates(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        var statesNode = Reflect.field(node, \"states\");\r\n        var memberNames = Reflect.fields(statesNode);\r\n        if (isDynamic(statesNode)) {\r\n            for (stateName in memberNames) {\r\n\r\n                if (Lambda.has(States.PROPERTY_NAMES, stateName)) {\r\n                    // Parse states\r\n                    var parse_states = Reflect.field(statesNode, stateName);\r\n                    if (isDynamic(parse_states)) {\r\n                        var binding:Binding = new Binding();\r\n                        if (parseBinding(parse_states, scope, binding)) {\r\n                            stateBlock.bindingMap.bindings.set(stateName, binding);\r\n                        }\r\n                        else {\r\n                            parseState(parse_states, scope, stateBlock, stateName);\r\n                        }\r\n\r\n                        // Don't forget to parse default value, even if there is no binding\r\n                        if (Reflect.hasField(parse_states, \"default\")) {\r\n                            var defaultValueNode = Reflect.field(parse_states, \"default\");\r\n                            parseState(defaultValueNode, scope, stateBlock, stateName);\r\n                        }\r\n                    }\r\n                    else {\r\n                        parseState(parse_states, scope, stateBlock, stateName);\r\n                    }\r\n                }\r\n                else if (Lambda.has(_extraStateNames, stateName)) {\r\n                    var parse_states = Reflect.field(statesNode, stateName);\r\n                    // Parse extra states\r\n                    if (stateName == EXTRA_PROPERTY_BLENDING_MODE) {\r\n                        parseBlendingMode(parse_states, scope, stateBlock);\r\n                    }\r\n                    else if (stateName == EXTRA_PROPERTY_STENCIL_TEST) {\r\n                        parseStencilState(parse_states, scope, stateBlock);\r\n                    }\r\n                }\r\n                else {\r\n                    //throw \"\"; // FIXME: log warning because the state name does not match any known state\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private function parseState(node:Dynamic, scope:Scope, stateBlock:StateBlock, stateProperty:String) {\r\n        if (stateProperty == States.PROPERTY_PRIORITY) {\r\n            parsePriority(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == _extraStateNames[0]) {\r\n            parseBlendingMode(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_BLENDING_SOURCE) {\r\n            parseBlendingSource(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_BLENDING_DESTINATION) {\r\n            parseBlendingDestination(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_ZSORTED) {\r\n            parseZSort(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_COLOR_MASK) {\r\n            parseColorMask(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_DEPTH_MASK) {\r\n            parseDepthMask(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_DEPTH_FUNCTION) {\r\n            parseDepthFunction(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_TRIANGLE_CULLING) {\r\n            parseTriangleCulling(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_STENCIL_FUNCTION) {\r\n            parseStencilFunction(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_STENCIL_REFERENCE) {\r\n            parseStencilReference(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_STENCIL_MASK) {\r\n            parseStencilMask(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_STENCIL_FAIL_OPERATION) {\r\n            parseStencilFailOperation(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_STENCIL_ZFAIL_OPERATION) {\r\n            parseStencilZFailOperation(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_STENCIL_ZPASS_OPERATION) {\r\n            parseStencilZPassOperation(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_SCISSOR_TEST) {\r\n            parseScissorTest(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_SCISSOR_BOX) {\r\n            parseScissorBox(node, scope, stateBlock);\r\n        }\r\n        else if (stateProperty == States.PROPERTY_TARGET) {\r\n            parseTarget(node, scope, stateBlock);\r\n        }\r\n    }\r\n\r\n    private function parsePriority(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (node != null) {\r\n            var priority = 0.0;\r\n\r\n            if (Std.is(node, Int)) {\r\n                priority = node ;\r\n            }\r\n            else if (Std.is(node, Float)) {\r\n                priority = node ;\r\n            }\r\n            else if (Std.is(node, String)) {\r\n                priority = getPriorityValue(node);\r\n            }\r\n            else if (Std.is(node, Array)) {\r\n                var tmp:Array<Any> = cast node;\r\n                if (Std.is(tmp[0], String) && Std.is(tmp[1], Float)) {\r\n                    priority = getPriorityValue(tmp[0]) + cast tmp[1] ;\r\n                }\r\n            }\r\n\r\n            stateBlock.states.priority = (priority);\r\n        }\r\n    }\r\n\r\n    private function parseBlendingMode(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, Array)) {\r\n            var blendingSrcString:String = node[0];\r\n            if (_blendingSourceMap.exists(blendingSrcString)) {\r\n                stateBlock.states.blendingSourceFactor = _blendingSourceMap.get(blendingSrcString);\r\n            }\r\n\r\n            var blendingDstString = node[1];\r\n            if (_blendingDestinationMap.exists(blendingDstString)) {\r\n                stateBlock.states.blendingDestinationFactor = _blendingDestinationMap.get(blendingDstString);\r\n            }\r\n        }\r\n        else if (Std.is(node, String)) {\r\n            var blendingModeString:String = node ;\r\n\r\n            if (_blendingModeMap.exists(blendingModeString)) {\r\n                var blendingMode = _blendingModeMap.get(blendingModeString);\r\n\r\n                stateBlock.states.blendingSourceFactor = (blendingMode & 0x00ff);\r\n                stateBlock.states.blendingDestinationFactor = (blendingMode & 0xff00);\r\n            }\r\n        }\r\n    }\r\n\r\n    private function parseBlendingSource(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, String)) {\r\n            var blendingSourceString = _blendingSourceMap.get(node);\r\n\r\n            stateBlock.states.blendingSourceFactor = blendingSourceString;\r\n        }\r\n    }\r\n\r\n    private function parseBlendingDestination(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, String)) {\r\n            var blendingDestination = _blendingDestinationMap.get(node);\r\n\r\n            stateBlock.states.blendingDestinationFactor = blendingDestination;\r\n        }\r\n    }\r\n\r\n    private function parseZSort(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, Bool)) {\r\n            stateBlock.states.zSorted = (node);\r\n        }\r\n    }\r\n\r\n    private function parseColorMask(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, Bool)) {\r\n\r\n            stateBlock.states.colorMask = (node);\r\n        }\r\n    }\r\n\r\n    private function parseDepthMask(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, Bool)) {\r\n            stateBlock.states.depthMask = (node);\r\n        }\r\n    }\r\n\r\n    private function parseDepthFunction(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, String)) {\r\n            var compareModeString = node;\r\n            var exist = _compareFuncMap.exists(compareModeString);\r\n\r\n            if (exist) {\r\n                stateBlock.states.depthFunction = _compareFuncMap.get(compareModeString);\r\n            }\r\n        }\r\n    }\r\n\r\n    private function parseTriangleCulling(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, String)) {\r\n            var triangleCullingString = node ;\r\n            var exist = _triangleCullingMap.exists(triangleCullingString);\r\n\r\n            if (exist) {\r\n                stateBlock.states.triangleCulling = _triangleCullingMap.get(triangleCullingString);\r\n            }\r\n        }\r\n    }\r\n\r\n    private function parseTarget(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        var target:AbstractTexture = null;\r\n        var targetName:String = \"\";\r\n\r\n        if (isDynamic(node)) {\r\n            var nameValue = Reflect.field(node, \"name\");\r\n\r\n            if (Std.is(nameValue, String)) {\r\n                targetName = nameValue ;\r\n            }\r\n\r\n            if (!Reflect.hasField(node, \"size\") && !(Reflect.hasField(node, \"width\") && Reflect.hasField(node, \"height\"))) {\r\n                return;\r\n            }\r\n\r\n            var width = 0;\r\n            var height = 0;\r\n\r\n            if (Reflect.hasField(node, \"size\")) {\r\n                width = height = Reflect.field(node, \"size\");\r\n            }\r\n            else {\r\n                if (!Reflect.hasField(node, \"width\") || !Reflect.hasField(node, \"height\")) {\r\n                    _error.execute(this, (_resolvedFilename + \": render target definition requires both \\\"width\\\" and \\\"height\\\" properties.\"));\r\n                }\r\n\r\n                width = Reflect.field(node, \"width\");\r\n                height = Reflect.field(node, \"height\");\r\n            }\r\n\r\n            var isCubeTexture = Reflect.hasField(node, \"isCube\") ? Reflect.field(node, \"isCube\") : false;\r\n\r\n            if (isCubeTexture) {\r\n                target = CubeTexture.create(_options.context, width, height, false, true);\r\n\r\n                if (targetName.length != 0) {\r\n                    _assetLibrary.setCubeTexture(targetName, cast(target));\r\n                }\r\n            }\r\n            else {\r\n                target = Texture.create(_options.context, width, height, false, true);\r\n\r\n                if (targetName.length != 0) {\r\n                    _assetLibrary.setTexture(targetName, cast(target));\r\n                }\r\n            }\r\n\r\n            target.upload();\r\n            _effectData.set(targetName, target);\r\n        }\r\n        else if (Std.is(node, String)) {\r\n            targetName = node;\r\n            target = _assetLibrary.texture(targetName);\r\n            if (target == null) {\r\n                throw \"\";\r\n            }\r\n\r\n            _effectData.set(targetName, target);\r\n        }\r\n\r\n        if (target != null) {\r\n            stateBlock.states.target = (target );\r\n           // trace(\"      stateBlock.states.target = (target );\");\r\n           // trace(target);\r\n        }\r\n    }\r\n\r\n    private function parseStencilState(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (isDynamic(node)) {\r\n            var stencilFuncValue = Reflect.field(node, States.PROPERTY_STENCIL_FUNCTION);\r\n            var stencilRefValue = Reflect.field(node, States.PROPERTY_STENCIL_REFERENCE);\r\n            var stencilMaskValue = Reflect.field(node, States.PROPERTY_STENCIL_MASK);\r\n            var stencilOpsValue = Reflect.field(node, EXTRA_PROPERTY_STENCIL_OPS);\r\n\r\n            parseStencilFunction(stencilFuncValue, scope, stateBlock);\r\n            parseStencilReference(stencilRefValue, scope, stateBlock);\r\n            parseStencilMask(stencilMaskValue, scope, stateBlock);\r\n\r\n            parseStencilOperations(stencilOpsValue, scope, stateBlock);\r\n        }\r\n        else if (Std.is(node, Array)) {\r\n            parseStencilFunction(node[0], scope, stateBlock);\r\n            parseStencilReference(node[1], scope, stateBlock);\r\n            parseStencilMask(node[2], scope, stateBlock);\r\n\r\n            parseStencilOperations(node[3], scope, stateBlock);\r\n        }\r\n    }\r\n\r\n    private function parseStencilFunction(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, String)) {\r\n            stateBlock.states.stencilFunction = _compareFuncMap.get(node);\r\n        }\r\n    }\r\n\r\n    private function parseStencilReference(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, Int)) {\r\n            stateBlock.states.stencilReference = node;\r\n        }\r\n    }\r\n\r\n    private function parseStencilMask(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n\r\n        if (Std.is(node, Int)) {\r\n            stateBlock.states.stencilMask = node;\r\n        }\r\n    }\r\n\r\n    private function parseStencilOperations(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, Array)) {\r\n            if (Std.is(node[0], String)) {\r\n                stateBlock.states.stencilFailOperation = _stencilOpMap.get(node[0]);\r\n            }\r\n            if (Std.is(node[1], String)) {\r\n                stateBlock.states.stencilZFailOperation = _stencilOpMap.get(node[1]);\r\n            }\r\n            if (Std.is(node[2], String)) {\r\n                stateBlock.states.stencilZPassOperation = _stencilOpMap.get(node[2]);\r\n            }\r\n        }\r\n        else {\r\n            parseStencilFailOperation(Reflect.field(node, EXTRA_PROPERTY_STENCIL_FAIL_OP), scope, stateBlock);\r\n            parseStencilZFailOperation(Reflect.field(node, EXTRA_PROPERTY_STENCIL_Z_FAIL_OP), scope, stateBlock);\r\n            parseStencilZPassOperation(Reflect.field(node, EXTRA_PROPERTY_STENCIL_Z_PASS_OP), scope, stateBlock);\r\n        }\r\n    }\r\n\r\n    private function parseStencilFailOperation(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, String)) {\r\n            stateBlock.states.stencilFailOperation = _stencilOpMap.get(node);\r\n        }\r\n    }\r\n\r\n    private function parseStencilZFailOperation(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, String)) {\r\n            stateBlock.states.stencilZFailOperation = _stencilOpMap.get(node);\r\n        }\r\n    }\r\n\r\n    private function parseStencilZPassOperation(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (Std.is(node, String)) {\r\n            stateBlock.states.stencilZPassOperation = _stencilOpMap.get(node);\r\n        }\r\n    }\r\n\r\n    private function parseScissorTest(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (node != null && Std.is(node, Bool)) {\r\n            stateBlock.states.scissorTest = (node);\r\n        }\r\n    }\r\n\r\n    private function parseScissorBox(node:Dynamic, scope:Scope, stateBlock:StateBlock) {\r\n        if (node != null && Std.is(node, Array)) {\r\n            var scissorBox = new Vec4();\r\n\r\n            if (Std.is(node[0], Int)) {\r\n                scissorBox.x = node[0] ;\r\n            }\r\n            if (Std.is(node[1], Int)) {\r\n                scissorBox.y = node[1] ;\r\n            }\r\n            if (Std.is(node[2], Int)) {\r\n                scissorBox.z = node[2] ;\r\n            }\r\n            if (Std.is(node[3], Int)) {\r\n                scissorBox.w = node[3] ;\r\n            }\r\n\r\n            stateBlock.states.scissorBox = (scissorBox);\r\n        }\r\n    }\r\n\r\n    private function parseSamplerStates(node:Dynamic, scope:Scope, uniformName:String, defaultValues:Provider, bindingMap:BindingMapBase<Binding>) {\r\n        if (isDynamic(node)) {\r\n            var wrapModeNode = Reflect.field(node, SamplerStates.PROPERTY_WRAP_MODE);\r\n\r\n            if (Std.is(wrapModeNode, String)) {\r\n                var wrapModeStr = wrapModeNode ;\r\n\r\n                var wrapMode = SamplerStates.stringToWrapMode(wrapModeStr);\r\n\r\n                defaultValues.set(SamplerStates.uniformNameToSamplerStateName(uniformName, SamplerStates.PROPERTY_WRAP_MODE), wrapMode);\r\n            }\r\n            else if (isDynamic(wrapModeNode)) {\r\n                var uniformWrapModeBindingName = SamplerStates.uniformNameToSamplerStateName(uniformName, SamplerStates.PROPERTY_WRAP_MODE);\r\n\r\n                if (!bindingMap.bindings.exists(uniformWrapModeBindingName)) {\r\n                    bindingMap.bindings.set(uniformWrapModeBindingName, new Binding());\r\n                }\r\n                parseBinding(wrapModeNode, scope, bindingMap.bindings.get(uniformWrapModeBindingName));\r\n\r\n                parseDefaultValueSamplerStates(\"WrapMode\", wrapModeNode, scope, uniformWrapModeBindingName, defaultValues);\r\n            }\r\n\r\n            var textureFilterNode = Reflect.field(node, SamplerStates.PROPERTY_TEXTURE_FILTER);\r\n\r\n            if (Std.is(textureFilterNode, String)) {\r\n                var textureFilterStr = textureFilterNode ;\r\n\r\n                var textureFilter = SamplerStates.stringToTextureFilter(textureFilterStr);\r\n\r\n                defaultValues.set(SamplerStates.uniformNameToSamplerStateName(uniformName, SamplerStates.PROPERTY_TEXTURE_FILTER), textureFilter);\r\n            }\r\n            else if (isDynamic(textureFilterNode)) {\r\n                var uniformTextureFilterBindingName = SamplerStates.uniformNameToSamplerStateName(uniformName, SamplerStates.PROPERTY_TEXTURE_FILTER);\r\n                if (!bindingMap.bindings.exists(uniformTextureFilterBindingName)) {\r\n                    bindingMap.bindings.set(uniformTextureFilterBindingName, new Binding());\r\n                }\r\n                parseBinding(textureFilterNode, scope, bindingMap.bindings.get(uniformTextureFilterBindingName));\r\n\r\n                parseDefaultValueSamplerStates(\"TextureFilter\", textureFilterNode, scope, uniformTextureFilterBindingName, defaultValues);\r\n            }\r\n\r\n            var mipFilterNode = Reflect.field(node, SamplerStates.PROPERTY_MIP_FILTER);\r\n\r\n            if (Std.is(mipFilterNode, String)) {\r\n                var mipFilterStr = mipFilterNode;\r\n\r\n                var mipFilter = SamplerStates.stringToMipFilter(mipFilterStr);\r\n\r\n                defaultValues.set(SamplerStates.uniformNameToSamplerStateName(uniformName, SamplerStates.PROPERTY_MIP_FILTER), mipFilter);\r\n            }\r\n            else if (isDynamic(mipFilterNode)) {\r\n                var uniformMipFilterBindingName = SamplerStates.uniformNameToSamplerStateName(uniformName, SamplerStates.PROPERTY_MIP_FILTER);\r\n                if (!bindingMap.bindings.exists(uniformMipFilterBindingName)) {\r\n                    bindingMap.bindings.set(uniformMipFilterBindingName, new Binding());\r\n                }\r\n                parseBinding(mipFilterNode, scope, bindingMap.bindings.get(uniformMipFilterBindingName));\r\n\r\n                parseDefaultValueSamplerStates(\"MipFilter\", mipFilterNode, scope, uniformMipFilterBindingName, defaultValues);\r\n            }\r\n        }\r\n    }\r\n\r\n    private function parseShader(node:Dynamic, scope:Scope, type:ShaderType) {\r\n        if (!Std.is(node, String)) {\r\n            throw \"\";\r\n        }\r\n\r\n        var glsl:String = node ;\r\n\r\n        var shader:Shader = Shader.createbySource(_options.context, type, glsl);\r\n        var blocks = new GLSLBlockTree(new GLSLBlock(GLSLBlockType.TEXT, \"\"));\r\n        var includes = [];\r\n        _shaderToGLSL.set(shader, blocks);\r\n        //todo\r\n        parseGLSL(glsl, _options, blocks, includes);\r\n\r\n        shader.source = glsl;\r\n\r\n\r\n        return shader;\r\n    }\r\n\r\n    function parseGLSL(glsl:String,\r\n                       options:Options,\r\n                       blocks:GLSLBlockTree, includes:Array<String>) {\r\n        var stream:Array<String> = glsl.split(\"\\n\");\r\n        var i = 0;\r\n        var lastBlockEnd = 0;\r\n        var numIncludes = 0;\r\n\r\n        for (line in stream) {\r\n            var pos = line.indexOf(\"#pragma include \");\r\n            var commentPos = line.indexOf(\"//\");\r\n            if (pos != -1 && (commentPos == -1 || pos < commentPos) && (line.indexOf('\"', pos) != -1 || line.indexOf('\\'', pos) != -1)) {\r\n                var splitStr = '\\'';\r\n                if (line.indexOf('\"', pos) != -1) {\r\n                    splitStr = '\"';\r\n                }\r\n                var filename:String = line.substring(line.indexOf(splitStr, pos) + splitStr.length, line.lastIndexOf(splitStr));\r\n\r\n                if (lastBlockEnd != i) {\r\n                    blocks.leaf.push(new GLSLBlockTree(new GLSLBlock(GLSLBlockType.TEXT, glsl.substr(lastBlockEnd, i - lastBlockEnd))));\r\n\r\n                    //  trace(\"a\",lastBlockEnd, i - lastBlockEnd);\r\n                    // trace( glsl.substr(lastBlockEnd, i - lastBlockEnd));\r\n                    //todo\r\n                }\r\n                if (!Lambda.has(includes, filename)) {\r\n                    includes.push(filename);\r\n                    blocks.leaf.push(new GLSLBlockTree(new GLSLBlock(GLSLBlockType.FILE, filename)));\r\n                }\r\n\r\n\r\n                lastBlockEnd = i + line.length + 1;\r\n\r\n                ++numIncludes;\r\n            }\r\n            i += line.length + 1;\r\n        }\r\n\r\n        if (i != lastBlockEnd) {\r\n            blocks.leaf.push(new GLSLBlockTree(new GLSLBlock(GLSLBlockType.TEXT, glsl.substr(lastBlockEnd))));\r\n            // trace(\"b\",lastBlockEnd );\r\n            // trace( glsl.substr(lastBlockEnd));\r\n        }\r\n\r\n\r\n        if (numIncludes > 0){\r\n            loadGLSLDependencies(blocks, options, includes);\r\n        }\r\n\r\n    }\r\n\r\n    function loadGLSLDependencies(blocks:GLSLBlockTree,\r\n                                  options:Options, includes:Array<String>) {\r\n\r\n        for (blockIt in blocks.leaf) {\r\n            var block = blockIt.node;\r\n            if (block.type == GLSLBlockType.FILE) {\r\n                if (options.assetLibrary.hasBlob(block.value)) {\r\n                    var data:Bytes = options.assetLibrary.blob(block.value);\r\n                    parseGLSL(data.toString(), options, blockIt, includes);\r\n                }\r\n                else {\r\n                    //   options.includePaths_clear();\r\n                    var loader:Loader = Loader.createbyOptions(options);\r\n\r\n                    _numDependencies++;\r\n\r\n                    _loaderCompleteSlots.set(loader, loader.complete.connect(function(_1) {\r\n\r\n                        glslIncludeCompleteHandler(_1, blockIt, block.value, includes);\r\n                        _numLoadedDependencies++;\r\n                        checkLoadedAndfinalize();\r\n                    }, 0, true)\r\n                    );\r\n\r\n                    _loaderErrorSlots.set(loader, loader.error.connect(function(_1, _2) {\r\n                        dependencyErrorHandler(_1, _2, block.value);\r\n                    }, 0, true));\r\n\r\n                    loader.queue(block.value).load();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    inline function checkLoadedAndfinalize(){\r\n        if (_numDependencies == _numLoadedDependencies && _effect != null)\r\n            finalize();\r\n    }\r\n    private function dependencyErrorHandler(loader:Loader, error:String, filename:String) {\r\n        var err = \"Unable to load '\" + filename + \"' required by \\\"\" + _filename + \"\\\", included paths are: \" + loader.options.includePaths ;\r\n\r\n        _error.execute(this, err);\r\n    }\r\n\r\n    public function createStates(block:StateBlock) : States{\r\n        return null ;\r\n    }\r\n\r\n    public function concatenateGLSLBlocks(blocks:GLSLBlockTree) {\r\n        var glsl = \"\";\r\n\r\n\r\n        // Tuple<GLSLBlockType, String>\r\n        for (block in blocks.leaf){\r\n            glsl += concatenateGLSLBlocks(block);\r\n        }\r\n        if(blocks.node.type==GLSLBlockType.TEXT){\r\n            glsl+=blocks.node.value;\r\n        }else\r\n        {\r\n            trace(\"concatenateGLSLBlocks\",blocks.node.value);\r\n            glsl+=(\"\\n//\"+blocks.node.value+\"\\n\");\r\n        }\r\n\r\n        return glsl;\r\n    }\r\n\r\n    public function glslIncludeCompleteHandler(loader:Loader,\r\n                                               blocks:GLSLBlockTree,\r\n                                               filename:String, includes:Array<String>) {\r\n        var block:GLSLBlock = blocks.node;\r\n        var file:File = loader.files.get(filename);\r\n        var resolvedFilename:String = file.resolvedFilename;\r\n        var options = loader.options;\r\n        var pos = resolvedFilename.lastIndexOf(\"/\");\r\n        if (pos == -1) {\r\n            pos = resolvedFilename.lastIndexOf(\"\\\\\");\r\n        }\r\n        if (pos != -1) {\r\n            options = options.clone();\r\n            options.includePaths = [];\r\n            options.includePaths.push(resolvedFilename.substr(0, pos));\r\n        }\r\n\r\n        parseGLSL(file.data.toString(), options, blocks, includes);\r\n\r\n    }\r\n\r\n    function loadTexture(textureFilename:String, uniformName:String, defaultValues:Provider) {\r\n        if (_options.assetLibrary.texture(textureFilename) != null) {\r\n            defaultValues.set(uniformName, _assetLibrary.texture(textureFilename));\r\n            return;\r\n        }\r\n\r\n        var loader:Loader = Loader.createbyOptions(_options);\r\n\r\n        _numDependencies++;\r\n\r\n        _loaderCompleteSlots.set(loader, loader.complete.connect(function(loader:Loader) {\r\n            var texture:Texture = _assetLibrary.texture(textureFilename);\r\n\r\n            //value.textureValues.push_back(texture);\r\n            defaultValues.set(uniformName, texture);\r\n            texture.upload();\r\n\r\n            _numLoadedDependencies++;\r\n            checkLoadedAndfinalize();\r\n        }));\r\n\r\n        _loaderErrorSlots.set(loader, loader.error.connect(function(_1, _2) {\r\n            dependencyErrorHandler(_1, _2, textureFilename);\r\n        }\r\n        ));\r\n\r\n        loader.queue(textureFilename).load();\r\n    }\r\n\r\n    function finalize() {\r\n        for (technique in _globalScope.techniques.keys()) {\r\n            var technique_second:Array<Pass> = _globalScope.techniques.get(technique);\r\n            _effect.addTechnique(technique, technique_second);\r\n\r\n            for (pass in technique_second) {\r\n                var vs = pass.program.vertexShader;\r\n                var fs = pass.program.fragmentShader;\r\n\r\n                if (_shaderToGLSL.exists(vs))\r\n                    vs.source = (\"#define VERTEX_SHADER\\n\" + concatenateGLSLBlocks(_shaderToGLSL.get(vs)));\r\n                if (_shaderToGLSL.exists(fs))\r\n                    fs.source = (\"#define FRAGMENT_SHADER\\n\" + concatenateGLSLBlocks(_shaderToGLSL.get(fs)));\r\n            }\r\n        }\r\n\r\n        _effect.data.copyFrom(_effectData);\r\n        _options.assetLibrary.setEffect(_filename, _effect);\r\n\r\n        _complete.execute(this);\r\n\r\n        for (lc in _loaderCompleteSlots) {\r\n            lc.dispose();\r\n        }\r\n        _loaderCompleteSlots = new ObjectMap<Loader, SignalSlot<Loader>>();\r\n        for (lc in _loaderErrorSlots) {\r\n            lc.dispose();\r\n        }\r\n        _loaderErrorSlots = new ObjectMap<Loader, SignalSlot2<Loader, String>>();\r\n    }\r\n}\r\n\r\n","package minko.file;\r\nimport haxe.io.Bytes;\r\n@:expose(\"minko.file.File\")\r\nclass File {\r\n\r\n    public var _filename:String;\r\n\r\n    public var _data:Bytes;\r\n    public var _resolvedFilename:String;\r\n\r\n    public static function create() {\r\n        return new File();\r\n    }\r\n    public var filename(get, set):String;\r\n\r\n    function get_filename() {\r\n        return _filename;\r\n    }\r\n\r\n    function set_filename(v) {\r\n        _filename = v;\r\n        return v;\r\n    }\r\n    public var resolvedFilename(get, set):String;\r\n\r\n    function get_resolvedFilename() {\r\n        return _resolvedFilename;\r\n    }\r\n\r\n    function set_resolvedFilename(v) {\r\n        _resolvedFilename = v;\r\n        return v;\r\n    }\r\n    public var data(get, null):Bytes;\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n\r\n    public static function getCurrentWorkingDirectory() {\r\n        return \".\";\r\n    }\r\n\r\n    public static function getBinaryDirectory() {\r\n        return \".\";\r\n    }\r\n\r\n    public static function sanitizeFilename(filename) {\r\n\r\n\r\n        var f:String = StringTools.replace(filename, \"\\\\\", \"/\");\r\n\r\n        return f;\r\n    }\r\n\r\n    public static function canonizeFilename(filename:String) {\r\n        var r = new EReg(\"[\\\\/]\", \"ig\");\r\n\r\n        var segments = r.split(filename);\r\n\r\n        // Moving path into a stack (but using deque for later iterative access).\r\n        var path = [];\r\n\r\n        for (current in segments) {\r\n            if (StringTools.trim(current) == \"\" || current == \".\") {\r\n                continue;\r\n            }\r\n            if (current != \"..\") {\r\n                path.push(current);\r\n            }\r\n            else if (path.length > 0 && path[path.length - 1] != \"..\") {\r\n                path.pop();\r\n            }\r\n            else {\r\n                path.push(current);\r\n            }\r\n        }\r\n\r\n        // Keep leading '/' if absolute and reset stream.\r\n        var ss = (filename.length > 0 && filename.charAt(0) == '/' ? \"/\" : \"\");\r\n\r\n        // Recompose path.\r\n        var output:String = ss + path.join(\"/\");\r\n\r\n        // Remove trailing '/' inserted by ostream_iterator.\r\n        if (path.length != 0) {\r\n            output = output.substr(0, output.length);\r\n        }\r\n\r\n        // Relative to nothing means relative to current directory.\r\n        if (output.length == 0) {\r\n            output = \".\";\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    public static function removePrefixPathFromFilename(filename) {\r\n        var cleanFilename = sanitizeFilename(filename);\r\n        var filenameWithoutPrefixPath:String = cleanFilename;\r\n        var lastSeparatorPosition = filenameWithoutPrefixPath.lastIndexOf(\"/\");\r\n        if (lastSeparatorPosition != -1) {\r\n            filenameWithoutPrefixPath = filenameWithoutPrefixPath.substr(lastSeparatorPosition + 1);\r\n        }\r\n        return filenameWithoutPrefixPath;\r\n    }\r\n\r\n    public static function extractPrefixPathFromFilename(filename) {\r\n        var cleanFilename = sanitizeFilename(filename);\r\n\r\n        var prefixPath:String = cleanFilename;\r\n\r\n        var lastSeparatorPosition = prefixPath.lastIndexOf(\"/\");\r\n\r\n        if (lastSeparatorPosition != -1) {\r\n            prefixPath = prefixPath.substr(0, lastSeparatorPosition);\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n\r\n        return prefixPath;\r\n    }\r\n\r\n    public static function getExtension(filename:String) {\r\n        var extension = \"\";\r\n        var lastDotPosition = filename.lastIndexOf(\".\");\r\n        if (lastDotPosition != -1) {\r\n            extension = filename.substr(lastDotPosition + 1);\r\n            extension = extension.toLowerCase();\r\n        }\r\n        return extension;\r\n    }\r\n\r\n    public static function replaceExtension(filename, extension) {\r\n        var transformedFilename:String = filename;\r\n        var lastDotPosition = transformedFilename.lastIndexOf(\".\");\r\n        if (lastDotPosition != -1) {\r\n            var previousExtension = transformedFilename.substr(lastDotPosition + 1);\r\n            transformedFilename = transformedFilename.substr(0, transformedFilename.length - (previousExtension.length + 1));\r\n        }\r\n        transformedFilename += \".\" + extension;\r\n        return transformedFilename;\r\n    }\r\n\r\n    public function new() {\r\n    }\r\n}\r\n","package minko.file;\r\nimport haxe.io.BytesOutput;\r\nimport haxe.ds.ObjectMap;\r\nimport haxe.io.Bytes;\r\nimport minko.async.Worker;\r\nimport minko.async.WorkerImpl.Message;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nusing minko.utils.BytesTool;\r\n@:expose(\"minko.file.FileProtocol\")\r\nclass FileProtocol extends AbstractProtocol {\r\n    static public function create() {\r\n        return new FileProtocol();\r\n    }\r\n    private static var _runningLoaders:Array<FileProtocol> = [];\r\n\r\n    private var _workerSlots:ObjectMap<Worker, SignalSlot2<Worker, Message>> = new ObjectMap<Worker, SignalSlot2<Worker, Message>>();\r\n\r\n    override public function load() {\r\n        var loader:FileProtocol = cast(this);\r\n\r\n        _runningLoaders.push(loader);\r\n\r\n        var resolvedFilename:String = this.resolvedFilename;\r\n        var options = _options;\r\n\r\n        var cleanFilename = resolvedFilename;\r\n\r\n        var prefixPosition = resolvedFilename.indexOf(\"://\");\r\n\r\n        if (prefixPosition != -1) {\r\n            cleanFilename = resolvedFilename.substr(prefixPosition + 3);\r\n        }\r\n\r\n\r\n        //本地\r\n\r\n        //异步加载逻辑\r\n        if (_options.loadAsynchronously && AbstractCanvas.defaultCanvas != null && AbstractCanvas.defaultCanvas.isWorkerRegistered(\"file-protocol\")) {\r\n\r\n            var worker:Worker = AbstractCanvas.defaultCanvas.getWorker(\"file-protocol\");\r\n            _workerSlots.set(worker, worker.message.connect(function(UnnamedParameter1:Worker, message:Message) {\r\n                if (message.type == \"complete\") {\r\n                    var bytes = message.data ;\r\n                    data = bytes;\r\n                    _complete.execute(loader);\r\n                    _runningLoaders.remove(loader);\r\n                    _workerSlots.get(worker).dispose();\r\n                    _workerSlots.remove(worker);\r\n                }\r\n                else if (message.type == \"progress\") {\r\n                    var ratio:Float = message.data ;\r\n\r\n                    _progress.execute(loader, ratio);\r\n                }\r\n                else if (message.type == \"error\") {\r\n                    var err:String = message.data ;\r\n                    _error.execute(loader, err);\r\n                    _complete.execute(loader);\r\n                    _runningLoaders.remove(loader);\r\n                    _workerSlots.get(worker).dispose();\r\n                    _workerSlots.remove(worker);\r\n                }\r\n            }));\r\n\r\n            var offset:Int = options.seekingOffset;\r\n            var length:Int = options.seekedLength;\r\n\r\n            var offsetByteArray =new BytesOutput();\r\n            offsetByteArray.writeInt32(offset);\r\n            offsetByteArray.writeInt32(length);\r\n            offsetByteArray.writeUTF(cleanFilename);\r\n            worker.start(offsetByteArray.getBytes());\r\n        }\r\n        else {\r\n\r\n            #if !js\r\n            if (sys.FileSystem.exists(cleanFilename)) {\r\n                var offset:Int = options.seekingOffset;\r\n                var length:Int = options.seekedLength;\r\n                _progress.execute(this, 0.0);\r\n                //同步加载逻辑 todo\r\n                var file = sys.io.File.read(cleanFilename, true);\r\n                file.seek(offset, sys.io.FileSeek.SeekBegin);\r\n                data = file.read(length);\r\n                file.close();\r\n\r\n                // FIXME: use fixed size buffers and call _progress accordin\r\n\r\n                _progress.execute(loader, 1.0);\r\n\r\n                _complete.execute(this);\r\n                _runningLoaders.remove(loader);\r\n            }\r\n            else {\r\n                _error.execute(this,\"\");\r\n            }\r\n            #end\r\n        }\r\n    }\r\n\r\n    public override function fileExists(filename) {\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    public override function isAbsolutePath(filename) {\r\n        var cleanFilename:String = File.sanitizeFilename(filename);\r\n\r\n#if MINKO_PLATFORM == MINKO_PLATFORM_WINDOWS\r\n\t\t\t\treturn cleanFilename.indexOf(\":/\") != -1;\r\n#else\r\n        return cleanFilename.indexOf(\"/\") == 0;\r\n#end\r\n    }\r\n\r\n    public function new() {\r\n        super();\r\n    }\r\n}\r\n","\r\npackage minko.file;\r\nimport assimp.format.gltf2.GlTF2Importer;\r\nimport haxe.io.Bytes;\r\nimport assimp.Importer;\r\nclass Gltf2Parser extends ASSIMPParser {\r\n    public function new() {\r\n        super();\r\n    }\r\n    static public function create()\r\n    {\r\n        return new Gltf2Parser();\r\n    }\r\n    override public function provideLoaders( importer:Importer)\r\n    {\r\n        importer.registerLoader(new  GlTF2Importer());\r\n    }\r\n\r\n    override public function parse(filename:String, resolvedFilename:String, options:Options, data:Bytes, assetLibrary:AssetLibrary) {\r\n\r\n            //loadin gltf  bin file\r\n            var assetName=filename.substr(0,filename.indexOf(\"gltf\"))+\"bin\";\r\n            var textureParentPrefixPath = File.extractPrefixPathFromFilename(resolvedFilename);\r\n            var texturePrefixPath = File.extractPrefixPathFromFilename(assetName);\r\n            var loader = Loader.create();\r\n            loader.options = (options.clone());\r\n            loader.options.includePaths.push(textureParentPrefixPath + \"/\" + texturePrefixPath);\r\n            _loaderCompleteSlots.set(loader, loader.complete.connect(function(l:Loader) {\r\n                nextParse(filename, resolvedFilename, options, data, assetLibrary,[ options.assetLibrary.blob(assetName)]);\r\n            }));\r\n            _loaderErrorSlots.set(loader, loader.error.connect(function(textureLoader, error) {\r\n                LOG_DEBUG(\"Unable to find glb with filename '\" + assetName + \"'\");\r\n                _error.execute(this, (\"MissingDependency\" + assetName));\r\n            }));\r\n            loader.queue(assetName).load();\r\n\r\n    }\r\n\r\n\r\n}\r\n","package minko.file;\r\n\r\nimport minko.signal.Signal;\r\nimport assimp.IOSystem;\r\nimport assimp.IOSystem.IOStream;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nimport minko.signal.Signal.SignalSlot;\r\nimport haxe.ds.ObjectMap;\r\ntypedef ErrorFunction = IOHandler -> String -> String -> Void;\r\nclass IOHandler extends IOSystem {\r\n\r\n\r\n    private var _options:Options;\r\n    private var _assets:AssetLibrary;\r\n    private var _resolvedFilename:String;\r\n    private var _errorFunction:ErrorFunction;\r\n    private var _loaderCompleteSlots:ObjectMap<Loader, SignalSlot<Loader>>;\r\n    private var _loaderErrorSlots:ObjectMap<Loader, SignalSlot2<Loader, String> >;\r\n    public var complete :Signal<Loader>;\r\n    public function new(options:Options, assets:AssetLibrary, resolvedFilename:String) {\r\n        super();\r\n        this._options = options;\r\n        this._assets = assets;\r\n        this._resolvedFilename = resolvedFilename;\r\n        this.complete=new Signal<Loader>();\r\n    }\r\n\r\n    public function errorFunction(errorFunction:ErrorFunction) {\r\n        _errorFunction = errorFunction;\r\n    }\r\n\r\n    override public function close(pFile:IOStream) {\r\n        this.complete.dispose();\r\n    }\r\n\r\n    override public function exists(file:String):Bool {\r\n        return false;\r\n    }\r\n\r\n    public function getOsSeparator():String {\r\n#if _WIN32\r\n\t\t\t\treturn  '\\\\';\r\n#else\r\n        return '/';\r\n#end\r\n    }\r\n\r\n    override public function open(pFile:String):IOStream {\r\n        var loader = Loader.create();\r\n        loader.options = (_options);\r\n\r\n        _options.loadAsynchronously = (false);\r\n        _options.storeDataIfNotParsed = (false);\r\n        _options.parserFunction = (function(UnnamedParameter1) {\r\n            return null;\r\n        });\r\n\r\n        var absolutePath = File.extractPrefixPathFromFilename(_resolvedFilename);\r\n        var relativePath:String = File.extractPrefixPathFromFilename(pFile);\r\n        var completePath = absolutePath + '/' + relativePath;\r\n        var filename = File.removePrefixPathFromFilename(pFile);\r\n\r\n        // Some relative paths begin with \"./\"\r\n        if (relativePath != null && !(relativePath.length == 1 && relativePath.charAt(0) == '.')) {\r\n            _options.includePaths.push(completePath);\r\n        }\r\n\r\n        var stream:IOStream = null;\r\n\r\n        _loaderCompleteSlots.set(loader, loader.complete.connect(function(loaderThis:Loader) {\r\n            _loaderErrorSlots.remove(loader);\r\n            _loaderCompleteSlots.remove(loader);\r\n            this.complete.execute(loader);\r\n            stream = new MemoryIOStream(loaderThis.files.get(filename).data );\r\n        }));\r\n\r\n        _loaderErrorSlots.set(loader, loader.error.connect(function(UnnamedParameter1, error) {\r\n            if (_errorFunction != null) {\r\n                _errorFunction(this, filename, error);\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }));\r\n\r\n        loader.queue(filename).load();\r\n\r\n        return stream;\r\n    }\r\n\r\n}\r\n","package minko.file;\r\nimport glm.Vec4;\r\nimport glm.Vec4;\r\nimport glm.Vec3;\r\nimport js.html.svg.Rect;\r\nimport minko.render.Texture;\r\nimport glm.Vec2;\r\nimport minko.file.MaxRectPacker.AtlasBuilder;\r\nimport minko.utils.MathUtil;\r\nimport minko.math.Rect;\r\nimport haxe.io.Bytes;\r\nimport minko.render.AbstractTexture;\r\nimport minko.render.TextureFormat;\r\nimport minko.utils.WebNodeTools;\r\ntypedef AtlasMipMaps={\r\n    var uv:Array<Vec4>;\r\n    var data:PixelData;\r\n}\r\n@:expose(\"minko.file.JPEGParser\")\r\nclass JPEGParser extends AbstractParser {\r\n\r\n\r\n    override public function parse(filename:String, resolvedFilename:String, options:Options, data:Bytes, assetLibrary:AssetLibrary) {\r\n\r\n        WebNodeTools.loadFromBytes(\"jpg\", data, function(pd:PixelData) {\r\n            pd.bytesPerPixel = 4 ;\r\n            __parse(filename, resolvedFilename, options, pd, assetLibrary);\r\n        });\r\n    }\r\n\r\n    public function __parse(filename:String, resolvedFilename:String, options:Options, data:PixelData, assetLibrary:AssetLibrary) {\r\n        var bmpData:Bytes = data.pixels;\r\n        var width = data.width;\r\n        var height = data.height;\r\n\r\n        var texture:AbstractTexture = null;\r\n\r\n        if (options.isCubeTexture) {\r\n            var parser:MipMapChainParser = new MipMapChainParser();\r\n//parseMipMaps has some error\r\n            var cubeTexture = parser.parseCubeTexture(\r\n                options.context,\r\n                width,\r\n                height,\r\n                bmpData,\r\n                options.parseMipMaps,\r\n                (options.parseMipMaps || options.generateMipmaps) && !options.fixMipMaps,\r\n                options.resizeSmoothly,\r\n                TextureFormat.RGBA,\r\n                filename\r\n            );\r\n\r\n            cubeTexture = cast(options.textureFunction(filename, cubeTexture));\r\n\r\n            assetLibrary.setCubeTexture(filename, cubeTexture);\r\n            texture = cubeTexture;\r\n        }\r\n        else if (options.isRectangleTexture) {\r\n            // FIXME: handle rectangle textures\r\n        }\r\n        else {\r\n            var parser:MipMapChainParser = new MipMapChainParser();\r\n            if (options.fixMipMaps) {\r\n                AtlasBuilder.fixMipMapLevel(bmpData, width,  height,data.bytesPerPixel );\r\n            }\r\n            var texture2d = parser.parseTexture(\r\n                options.context,\r\n                width,\r\n                height,\r\n                bmpData,\r\n                options.parseMipMaps,\r\n                (options.parseMipMaps || options.generateMipmaps) && !options.fixMipMaps,\r\n                options.resizeSmoothly,\r\n                TextureFormat.RGBA,\r\n                filename\r\n            );\r\n\r\n            texture2d = cast(options.textureFunction(filename, texture2d));\r\n\r\n            texture = texture2d;\r\n            assetLibrary.setTexture(filename, texture2d);\r\n        }\r\n        trace(\"JPEGParser\" + filename);\r\n        texture.upload();\r\n\r\n        if (options.disposeTextureAfterLoading)\r\n            texture.disposeData();\r\n\r\n        complete.execute(this);\r\n    }\r\n}\r\n","package minko.file;\r\nimport haxe.ds.ObjectMap;\r\nimport haxe.ds.StringMap;\r\nimport haxe.io.Bytes;\r\nimport minko.signal.Signal.SignalSlot;\r\nimport minko.signal.Signal2.SignalSlot2;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.file.Loader\")\r\nclass Loader {\r\n    private var _options:Options;\r\n\r\n    private var _filesQueue:Array<String>;\r\n    private var _loading:Array<String>;\r\n    private var _filenameToOptions:StringMap<Options>;\r\n    private var _files:StringMap<File> ;\r\n\r\n    private var _progress:Signal2<Loader, Float>;\r\n    private var _parsingProgress:Signal2<Loader, Float>;\r\n    private var _complete:Signal<Loader>;\r\n    private var _error:Signal2<Loader, String>;\r\n\r\n    private var _protocolErrorSlots:ObjectMap< AbstractProtocol, SignalSlot2<AbstractProtocol, String>>;\r\n    private var _protocolCompleteSlots:ObjectMap< AbstractProtocol, SignalSlot<AbstractProtocol>>;\r\n    private var _protocolProgressSlots:ObjectMap< AbstractProtocol, SignalSlot2<AbstractProtocol, Float> >;\r\n    private var _parserProgressSlots:ObjectMap< AbstractParser, SignalSlot2<AbstractParser, Float> >;\r\n    private var _parserCompleteSlots:ObjectMap<AbstractParser, SignalSlot<AbstractParser>> ;\r\n    private var _parserErrorSlots:ObjectMap<AbstractParser, SignalSlot2<AbstractParser, String>>;\r\n\r\n    private var _protocolToProgress:ObjectMap<AbstractProtocol, Float>;\r\n    private var _parserToProgress:ObjectMap<AbstractParser, Float>;\r\n\r\n    private var _numFiles:Int;\r\n\r\n    private var _numFilesToParse:Int;\r\n    private var _numFilesToParseComplete:Int;\r\n    public static function create():Loader {\r\n        return new Loader();\r\n    }\r\n\r\n    public static function createbyOptions(options):Loader {\r\n        var copy:Loader = Loader.create();\r\n\r\n        copy._options = options;\r\n\r\n        return copy;\r\n    }\r\n\r\n    public static function createbyLoader(loader:Loader):Loader {\r\n        var copy:Loader = Loader.create();\r\n\r\n        copy._options = loader._options;\r\n\r\n        return copy;\r\n    }\r\n    public var options(get, set):Options;\r\n\r\n    function get_options() {\r\n        return _options;\r\n    }\r\n\r\n    function set_options(v) {\r\n        _options = v;\r\n        return v;\r\n    }\r\n    public var complete(get, null):Signal<Loader>;\r\n\r\n    function get_complete() {\r\n        return _complete;\r\n    }\r\n    public var progress(get, null):Signal2<Loader, Float>;\r\n\r\n    function get_progress() {\r\n        return _progress;\r\n    }\r\n    public var parsingProgress(get, null):Signal2<Loader, Float>;\r\n\r\n    function get_parsingProgress() {\r\n        return _parsingProgress;\r\n    }\r\n    public var error(get, null):Signal2<Loader, String>;\r\n\r\n    function get_error() {\r\n        return _error;\r\n    }\r\n    public var filesQueue(get, null):Array< String>;\r\n\r\n    function get_filesQueue() {\r\n        return _filesQueue;\r\n    }\r\n\r\n    public var loading(get, null):Bool;\r\n\r\n    function get_loading() {\r\n        return _filesQueue.length > 0 || _loading.length > 0;\r\n    }\r\n\r\n    public function queue(filename):Loader {\r\n        return setQueue(filename, null);\r\n    }\r\n\r\n    public function setQueue(filename, options):Loader {\r\n        if (StringTools.trim(filename) == \"\") {\r\n            return (this);\r\n        }\r\n\r\n        _filesQueue.push(filename);\r\n        _filenameToOptions.set(filename, (options != null ? options : _options));\r\n\r\n        return (this);\r\n    }\r\n\r\n    public function load() {\r\n        if (_filesQueue.length == 0) {\r\n            _complete.execute((this));\r\n        }\r\n        else {\r\n            _numFiles = _filesQueue.length;\r\n            _protocolToProgress = new ObjectMap<AbstractProtocol, Float>();\r\n\r\n            var queue = _filesQueue.concat([]);\r\n\r\n            for (filename in queue) {\r\n                var options = _filenameToOptions.get(filename);\r\n\r\n                var includePaths:Array<String> = options.includePaths;\r\n\r\n                var loadFile = false;\r\n\r\n                var resolvedFilename = options.uriFunction(File.sanitizeFilename(filename));\r\n\r\n                var protocol:AbstractProtocol = options.protocolFunction(resolvedFilename)();\r\n\r\n                protocol.options = (options);\r\n\r\n                if (includePaths.length == 0 || protocol.isAbsolutePath(resolvedFilename)) {\r\n                    loadFile = true;\r\n                }\r\n                else {\r\n                    inline function checkFileExists() {\r\n                        for (includePath in includePaths) {\r\n                            resolvedFilename = options.uriFunction(File.sanitizeFilename(includePath + '/' + filename));\r\n\r\n                            protocol = options.protocolFunction(resolvedFilename)();\r\n\r\n                            protocol.options = (options);\r\n\r\n                            //only hl  not html\r\n                            //todo\r\n                            if (protocol.fileExists(resolvedFilename)) {\r\n                                loadFile = true;\r\n\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    checkFileExists();\r\n                    if (loadFile == false) {\r\n                        includePaths = Options.includePaths_clear();\r\n                        checkFileExists();\r\n                    }\r\n                }\r\n\r\n                if (loadFile) {\r\n                    _files.set(filename, protocol.file);\r\n\r\n                    _filesQueue.remove(filename);\r\n                    _loading.push(filename);\r\n\r\n                    var that = this;\r\n\r\n                    _protocolErrorSlots.set(protocol, protocol.error.connect(function(protocol:AbstractProtocol, err:String) {\r\n                        that.protocolErrorHandler(protocol, err);\r\n                    }));\r\n\r\n                    _protocolCompleteSlots.set(protocol, protocol.complete.connect(function(protocol:AbstractProtocol) {\r\n                        that.protocolCompleteHandler(protocol);\r\n                    }));\r\n\r\n                    _protocolProgressSlots.set(protocol, protocol.progress.connect(function(protocol:AbstractProtocol, progress:Float) {\r\n                        that.protocolProgressHandler(protocol, progress);\r\n                    }));\r\n\r\n                    protocol.loadFile(filename, resolvedFilename, options);\r\n                }\r\n                else {\r\n                    var error = (\"ProtocolError\" + \"File does not exist: \" + filename + \", include paths: \" + _options.includePaths.join(\",\"));\r\n\r\n                    errorThrown(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public var files(get, null):StringMap<File>;\r\n\r\n    function get_files() {\r\n        return _files;\r\n    }\r\n\r\n    public function new() {\r\n        this._options = Options.empty();\r\n        this._complete = new Signal<Loader>();\r\n        this._progress = new Signal2<Loader, Float>();\r\n        this._parsingProgress = new Signal2<Loader, Float>();\r\n        this._error = new Signal2<Loader, String>();\r\n        this._numFilesToParse = 0;\r\n        this._numFilesToParseComplete=0;\r\n        this._filesQueue = [];\r\n        this._loading = [];\r\n        this._filenameToOptions = new StringMap<Options>();\r\n        this._files = new StringMap<File>() ;\r\n\r\n\r\n        this._protocolErrorSlots = new ObjectMap< AbstractProtocol, SignalSlot2<AbstractProtocol, String>>();\r\n        this._protocolCompleteSlots = new ObjectMap< AbstractProtocol, SignalSlot<AbstractProtocol>>();\r\n        this._protocolProgressSlots = new ObjectMap< AbstractProtocol, SignalSlot2<AbstractProtocol, Float> >();\r\n        this._parserProgressSlots = new ObjectMap< AbstractParser, SignalSlot2<AbstractParser, Float> >();\r\n        this._parserCompleteSlots = new ObjectMap<AbstractParser, SignalSlot<AbstractParser>> ();\r\n        this._parserErrorSlots = new ObjectMap<AbstractParser, SignalSlot2<AbstractParser, String>>();\r\n\r\n        this._protocolToProgress = new ObjectMap<AbstractProtocol, Float>();\r\n        this._parserToProgress = new ObjectMap<AbstractParser, Float>();\r\n    }\r\n\r\n    public function protocolErrorHandler(protocol:AbstractProtocol, err:String) {\r\n        var error = (\"ProtocolError\" + \"Protocol error: \" + protocol.file.filename + \", include paths: \" + _options.includePaths.join(\",\"));\r\n\r\n        errorThrown(error);\r\n    }\r\n\r\n    public function protocolCompleteHandler(protocol:AbstractProtocol) {\r\n        _protocolToProgress.set(protocol, 1.0);\r\n\r\n        var filename = protocol.file.filename;\r\n\r\n        _loading.remove(filename);\r\n\r\n        _filenameToOptions.remove(filename);\r\n        _protocolErrorSlots.get(protocol).dispose();\r\n        _protocolErrorSlots.remove(protocol);\r\n        _protocolCompleteSlots.get(protocol).dispose();\r\n        _protocolCompleteSlots.remove(protocol);\r\n        _protocolProgressSlots.get(protocol).dispose();\r\n        _protocolProgressSlots.remove(protocol);\r\n\r\n        _numFilesToParse++;\r\n\r\n        trace(\"file '\" + protocol.file.filename + \"' loaded, \" + _loading.length + \" file(s) still loading, \" + _filesQueue.length + \" file(s) in the queue\");\r\n\r\n        var parsed = processData(filename, protocol.file.resolvedFilename, protocol.options, protocol.file.data);\r\n        if (options.storeDataIfNotParsed) {\r\n            if (!parsed) {\r\n                _numFilesToParseComplete++;\r\n                finalize();\r\n            }\r\n        }\r\n    }\r\n\r\n    public function protocolProgressHandler(protocol:AbstractProtocol, progress:Float) {\r\n        _protocolToProgress.set(protocol, progress);\r\n\r\n        var newTotalProgress = 0.0;\r\n\r\n        for (protocolAndProgress in _protocolToProgress.keys()) {\r\n            newTotalProgress += _protocolToProgress.get(protocolAndProgress) / _numFiles;\r\n        }\r\n\r\n        if (newTotalProgress > 1.0) {\r\n            newTotalProgress = 1.0 ;\r\n        }\r\n\r\n        _progress.execute((this), newTotalProgress);\r\n    }\r\n\r\n\r\n    public function finalize() {\r\n        if (_loading.length == 0 && _filesQueue.length == 0 && _numFilesToParse == _numFilesToParseComplete) {\r\n            _protocolErrorSlots = new ObjectMap<AbstractProtocol, SignalSlot2<AbstractProtocol, String>>();\r\n            _protocolCompleteSlots = new ObjectMap<AbstractProtocol, SignalSlot<AbstractProtocol>>();\r\n            _protocolProgressSlots = new ObjectMap< AbstractProtocol, SignalSlot2<AbstractProtocol, Float> >();\r\n\r\n            _filenameToOptions = new StringMap<Options>();\r\n\r\n            _complete.execute(this);\r\n            _parserErrorSlots = new ObjectMap< AbstractParser, SignalSlot2<AbstractParser, String>>();\r\n            _protocolToProgress = new ObjectMap<AbstractProtocol, Float>();\r\n            _files = new StringMap<File>();\r\n        }\r\n    }\r\n\r\n\r\n    public function processData(filename:String, resolvedFilename:String, options:Options, data:Bytes) {\r\n        var extension = filename.substr(filename.lastIndexOf('.') + 1).toLowerCase();\r\n\r\n        var parser:AbstractParser = null;\r\n        try {\r\n            if (options.getParser(extension) != null)\r\n                parser = options.getParser(extension)();\r\n        }\r\n        catch (e:String) {\r\n            trace(e);\r\n        }\r\n        if (parser != null) {\r\n            _parserProgressSlots.set(parser, parser.progress.connect(parserProgressHandler));\r\n            _parserCompleteSlots.set(parser, parser.complete.connect(parserCompleteHandler));\r\n            _parserErrorSlots.set(parser, parser.error.connect(parserErrorHandler));\r\n            parser.parse(filename, resolvedFilename, options, data, options.assetLibrary);\r\n        }\r\n        else {\r\n            if (options.storeDataIfNotParsed) {\r\n                if (extension != \"glsl\") {\r\n                    trace(\"no parser found for extension '\" + extension + \"'\");\r\n                }\r\n                options.assetLibrary.setBlob(filename, data);\r\n            }\r\n        }\r\n\r\n        return parser != null;\r\n    }\r\n\r\n    public function parserProgressHandler(parser:AbstractParser, progress:Float) {\r\n        _parserToProgress.set(parser, progress);\r\n\r\n        var newTotalProgress = 0.0 ;\r\n\r\n        for (parserAndProgress in _parserToProgress.keys()) {\r\n            newTotalProgress += _parserToProgress.get(parserAndProgress) / _numFiles;\r\n        }\r\n\r\n        if (newTotalProgress > 1.0) {\r\n            newTotalProgress = 1.0 ;\r\n        }\r\n\r\n        _parsingProgress.execute((this), newTotalProgress);\r\n    }\r\n\r\n\r\n    public function parserCompleteHandler(parser:AbstractParser) {\r\n\r\n        _numFilesToParseComplete++;\r\n        _parserCompleteSlots.remove(parser);\r\n\r\n        _parserToProgress.set(parser, 1.0);\r\n\r\n        finalize();\r\n    }\r\n\r\n    public function parserErrorHandler(parser:AbstractParser, error:String) {\r\n        errorThrown(error);\r\n    }\r\n\r\n    public function errorThrown(error:String) {\r\n        if (_error.numCallbacks > 0) {\r\n            _error.execute(this, error);\r\n        }\r\n        else {\r\n            trace(error);\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","package minko.file;\r\n/**\r\n\tImplements different bin packer algorithms that use the MAXRECTS data structure.\r\n\tSee http://clb.demon.fi/projects/even-more-rectangle-bin-packing\r\n\r\n\tAuthor: Jukka Jylänki\r\n\t- Original\r\n\r\n\tAuthor: Claus Wahlers\r\n\t- Ported to ActionScript3\r\n\r\n\tAuthor: Tony DiPerna\r\n\t- Ported to HaXe, optimized\r\n\r\n\tAuthor: Shawn Skinner (treefortress)\r\n\t- Ported back to AS3\r\n\r\n\tAuthor: loudo (Ludovic Bas)\r\n\t- Ported back to haxe\r\n */\r\nimport glm.Vec4;\r\nimport glm.Vec2;\r\nimport haxe.io.Bytes;\r\nimport minko.utils.MathUtil;\r\nimport minko.file.JPEGParser.AtlasMipMaps;\r\nimport minko.math.Rect;\r\nclass AtlasBuilder\r\n{\r\n    public function new(){\r\n\r\n    }\r\n\r\n    static public function fixMipMapLevel(data:Bytes, width:Int, height:Int, bytesPerPixel) {\r\n        var endX = width;\r\n        var endY = height;\r\n        var idx = 0;\r\n        var numLevels = MathUtil.getp2(width) + 1 ;\r\n        var dataOffset = 0;\r\n        var offsetY = 0;\r\n        for (level in 1... numLevels) {\r\n            var mipMapWidth = Math.floor(Math.max(width >> level, 1));\r\n            var mipMapHeight = Math.floor(Math.max(height >> level, 1));\r\n            dataOffset += width * mipMapHeight * bytesPerPixel;\r\n            offsetY += mipMapHeight;\r\n            for (y in offsetY...Math.floor(mipMapHeight / 2) + offsetY) {\r\n                var lw = mipMapWidth;\r\n                while (lw < width) {\r\n                    for (xx in 0...mipMapWidth) {\r\n                        var x = xx;\r\n                        var xy1 = (x + y * width) * bytesPerPixel;\r\n                        x = lw + xx;\r\n                        var xy2 = (x + y * width) * bytesPerPixel;\r\n                        for (i in 0... bytesPerPixel) {\r\n                            data.set(xy2 ++, data.get(xy1++));\r\n                        }\r\n                    }\r\n                    lw += mipMapWidth;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    public function fixAtlasMipMaps(data:PixelData, width:Int, height:Int):AtlasMipMaps {\r\n\r\n        var numLevels = MathUtil.getp2(width) + 1 ;\r\n        var rgba:PixelData = new PixelData(width, height, Bytes.alloc(width * width * data.bytesPerPixel));\r\n        rgba.bytesPerPixel = data.bytesPerPixel;\r\n\r\n        var actualHeight = height;\r\n\r\n        var diff = height - width * 2 - 1;\r\n        actualHeight = height + Math.floor((diff + 1) / 2);\r\n\r\n\r\n        var actualY = actualHeight;\r\n        var source_atlasList = [ ];\r\n\r\n        for (level in 1... numLevels) {\r\n            var mipMapWidth = Math.floor(Math.max(width >> level, 1));\r\n            var mipMapHeight = Math.floor(Math.max(actualHeight >> level, 1));\r\n            var r = new Rect();\r\n            r.y = actualY;\r\n            r.height = mipMapHeight;\r\n            r.width = mipMapWidth;\r\n            source_atlasList.push(r);\r\n            actualY += mipMapHeight;\r\n        }\r\n        trace(source_atlasList);\r\n        var padding:Int = 1;\r\n        var dest_atlasList:Array<Rect> =  buildFromAtlasRect(source_atlasList, padding, width, actualHeight);\r\n        dest_atlasList = dest_atlasList.map(function(d:Rect) {\r\n            d.y += actualHeight;\r\n            return d;\r\n        });\r\n\r\n        rgba.copyPixels(data, new Rect(0, 0, width, actualHeight), new Vec2(0, 0));\r\n        //计算新的uv偏移t s\r\n        var uv=[new Vec4(0,0,width/width,actualHeight/height)];\r\n\r\n        for (i in 0...source_atlasList.length) {\r\n            var s:Rect = source_atlasList[i];\r\n            var d:Rect = dest_atlasList[i];\r\n            rgba.copyPixels(data, s, new Vec2(d.x, d.y));\r\n            rgba.copyPixels(data, new Rect(s.x, s.y, s.width, padding), new Vec2(d.x, d.y - padding));\r\n\r\n            rgba.copyPixels(data, new Rect(s.x, s.y + s.height - padding, s.width, padding), new Vec2(d.x, d.y + d.height));\r\n\r\n            rgba.copyPixels(data, new Rect(s.x, s.y, padding, s.height), new Vec2(d.x - padding, d.y));\r\n            rgba.copyPixels(data, new Rect(s.x + s.width - padding, s.y, padding, s.height), new Vec2(d.x + d.width, d.y));\r\n            uv.push(new Vec4(d.x/width,d.y/height,d.width/width,d.height/height));\r\n\r\n        }\r\n\r\n        trace(uv);\r\n\r\n\r\n        return {\r\n            uv:uv,\r\n            data:rgba\r\n        };\r\n\r\n    }\r\n    public function fixMipMaps(data:PixelData, width:Int, height:Int):PixelData  {\r\n\r\n        var numLevels = MathUtil.getp2(width) + 1 ;\r\n        var rgba:PixelData = new PixelData(width, height, Bytes.alloc(width * width * data.bytesPerPixel));\r\n        rgba.bytesPerPixel = data.bytesPerPixel;\r\n\r\n        var actualHeight = height;\r\n\r\n        var diff = height - width * 2 - 1;\r\n        actualHeight = height + Math.floor((diff + 1) / 2);\r\n\r\n\r\n        var actualY = actualHeight;\r\n        var source_atlasList = [ new Rect(0,0,width,actualHeight) ];\r\n\r\n        for (level in 1... numLevels) {\r\n            var mipMapWidth = Math.floor(Math.max(width >> level, 1));\r\n            var mipMapHeight = Math.floor(Math.max(actualHeight >> level, 1));\r\n            var r = new Rect();\r\n            r.y = actualY;\r\n            r.height = mipMapHeight;\r\n            r.width = mipMapWidth;\r\n            source_atlasList.push(r);\r\n            actualY += mipMapHeight;\r\n        }\r\n        trace(source_atlasList);\r\n        var padding:Int = 1;\r\n        var dest_atlasList:Array<Rect> =source_atlasList.concat([]);\r\n\r\n\r\n        for (i in 0...source_atlasList.length) {\r\n            var s:Rect = source_atlasList[i];\r\n            var d:Rect = dest_atlasList[i];\r\n            rgba.copyPixels(data, s, new Vec2(d.x, d.y));\r\n        }\r\n\r\n\r\n        return  rgba;\r\n\r\n    }\r\n    public function  buildFromAtlasRect(atlasList:Array<Rect>,  padding:Int = 2, width:Int = 1024, height:Int = 1024):Array<Rect>\r\n    {\r\n        var packer:MaxRectPacker = new MaxRectPacker(width, height);\r\n        var len:Int = atlasList.length;\r\n        var tmp=[];\r\n        for(i in 0...len){\r\n            var rectData = atlasList[i];\r\n            var rect = packer.quickInsert((rectData.width) + padding * 2, (rectData.height) + padding * 2);\r\n\r\n            trace(rect);\r\n            //Add padding\r\n            rect.x += padding;\r\n            rect.y += padding;\r\n            rect.width -= padding * 2;\r\n            rect.height -= padding * 2;\r\n\r\n            tmp.push(rect);\r\n        }\r\n\r\n        return tmp;\r\n    }\r\n}\r\nclass MaxRectPacker\r\n{\r\n\r\n    public var freeRects:Array<Rect>;\r\n\r\n    var binWidth:Float;\r\n    var binHeight:Float;\r\n\r\n    public function new(width:Float, height:Float):Void {\r\n        init(width, height);\r\n    }\r\n    public function init(width:Float, height:Float):Void {\r\n        binWidth = width;\r\n        binHeight = height;\r\n        freeRects = [];\r\n        freeRects.push(new Rect(0, 0, width, height));\r\n    }\r\n\r\n    public function quickInsert(width:Float, height:Float):Rect {\r\n        var newNode:Rect = quickFindPositionForNewNodeBestAreaFit(width, height);\r\n\r\n        if (newNode.height == 0) {\r\n            return null;\r\n        }\r\n\r\n        var numRectsToProcess:Int = freeRects.length;\r\n        var i:Int = 0;\r\n        while (i < numRectsToProcess) {\r\n            if (splitFreeNode(freeRects[i], newNode)) {\r\n                freeRects.splice(i, 1);\r\n                --numRectsToProcess;\r\n                --i;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        pruneFreeList();\r\n        return newNode;\r\n    }\r\n\r\n    inline private function quickFindPositionForNewNodeBestAreaFit(width:Float, height:Float):Rect {\r\n        var score:Float = Math.POSITIVE_INFINITY;\r\n        var areaFit:Float;\r\n        var r:Rect;\r\n        var bestNode:Rect = new Rect();\r\n\r\n        var len:Int = freeRects.length;\r\n        for(i in 0...len) {\r\n            r = freeRects[i];\r\n            // Try to place the rectangle in upright (non-flipped) orientation.\r\n            if (r.width >= width && r.height >= height) {\r\n                areaFit = r.width * r.height - width * height;\r\n                if (areaFit < score) {\r\n                    bestNode.x = r.x;\r\n                    bestNode.y = r.y;\r\n                    bestNode.width = width;\r\n                    bestNode.height = height;\r\n                    score = areaFit;\r\n                }\r\n            }\r\n        }\r\n\r\n        return bestNode;\r\n    }\r\n\r\n    private function splitFreeNode(freeNode:Rect, usedNode:Rect):Bool {\r\n        var newNode:Rect;\r\n        // Test with SAT if the rectangles even intersect.\r\n        if (usedNode.x >= freeNode.x + freeNode.width ||\r\n        usedNode.x + usedNode.width <= freeNode.x ||\r\n        usedNode.y >= freeNode.y + freeNode.height ||\r\n        usedNode.y + usedNode.height <= freeNode.y) {\r\n            return false;\r\n        }\r\n        if (usedNode.x < freeNode.x + freeNode.width && usedNode.x + usedNode.width > freeNode.x) {\r\n            // New node at the top side of the used node.\r\n            if (usedNode.y > freeNode.y && usedNode.y < freeNode.y + freeNode.height) {\r\n                newNode = freeNode.clone();\r\n                newNode.height = usedNode.y - newNode.y;\r\n                freeRects.push(newNode);\r\n            }\r\n            // New node at the bottom side of the used node.\r\n            if (usedNode.y + usedNode.height < freeNode.y + freeNode.height) {\r\n                newNode = freeNode.clone();\r\n                newNode.y = usedNode.y + usedNode.height;\r\n                newNode.height = freeNode.y + freeNode.height - (usedNode.y + usedNode.height);\r\n                freeRects.push(newNode);\r\n            }\r\n        }\r\n        if (usedNode.y < freeNode.y + freeNode.height && usedNode.y + usedNode.height > freeNode.y) {\r\n            // New node at the left side of the used node.\r\n            if (usedNode.x > freeNode.x && usedNode.x < freeNode.x + freeNode.width) {\r\n                newNode = freeNode.clone();\r\n                newNode.width = usedNode.x - newNode.x;\r\n                freeRects.push(newNode);\r\n            }\r\n            // New node at the right side of the used node.\r\n            if (usedNode.x + usedNode.width < freeNode.x + freeNode.width) {\r\n                newNode = freeNode.clone();\r\n                newNode.x = usedNode.x + usedNode.width;\r\n                newNode.width = freeNode.x + freeNode.width - (usedNode.x + usedNode.width);\r\n                freeRects.push(newNode);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private function pruneFreeList():Void  {\r\n        // Go through each pair and remove any rectangle that is redundant.\r\n        var i:Int = 0;\r\n        var j:Int = 0;\r\n        var len:Int = freeRects.length;\r\n        var tmpRect:Rect;\r\n        var tmpRect2:Rect;\r\n        while (i < len) {\r\n            j = i + 1;\r\n            tmpRect = freeRects[i];\r\n            while (j < len) {\r\n                tmpRect2 = freeRects[j];\r\n                if (isContainedIn(tmpRect,tmpRect2)) {\r\n                    freeRects.splice(i, 1);\r\n                    --i;\r\n                    --len;\r\n                    break;\r\n                }\r\n                if (isContainedIn(tmpRect2,tmpRect)) {\r\n                    freeRects.splice(j, 1);\r\n                    --len;\r\n                    --j;\r\n                }\r\n                j++;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n\r\n    inline private function isContainedIn(a:Rect, b:Rect):Bool {\r\n        return a.x >= b.x && a.y >= b.y\t&& a.x + a.width <= b.x + b.width && a.y + a.height <= b.y + b.height;\r\n    }\r\n\r\n}","package minko.file;\r\nimport glm.Vec2;\r\nimport haxe.io.Bytes;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.CubeTexture;\r\nimport minko.render.Texture;\r\nimport minko.render.TextureFormat;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.file.MipMapChainParser\")\r\nclass MipMapChainParser {\r\n    public function new() {\r\n    }\r\n\r\n\r\n    public function parseTexture(context:AbstractContext, width:Int, height:Int, data:Bytes, parseMipMaps:Bool,  mipMapping = false, smooth = true, format = TextureFormat.RGBA, filename = \"\") {\r\n        //todo\r\n\r\n        var numLevels = mipMapping && parseMipMaps ? MathUtil.getp2(width)  +1: 1;\r\n        var actualHeight = height;\r\n\r\n        if (mipMapping && parseMipMaps && width * 2 - 1 != height) {\r\n            var diff = height - width * 2 - 1;\r\n\r\n            actualHeight = height + Math.floor((diff + 1) / 2);\r\n        }\r\n\r\n        var bytesPerPixel = format == TextureFormat.RGB ? 3 : 4;\r\n        var rgba:Bytes = Bytes.alloc(width * actualHeight * 4);\r\n        var texture:Texture = Texture.create(context, width, actualHeight, mipMapping, false, smooth, TextureFormat.RGBA, filename);\r\n\r\n        // FIXME: offset data to start parsing where width < MAX_SIZE\r\n\r\n        parseMipMap(rgba, 0, data, 0, width, height, new Vec2(), width, actualHeight, bytesPerPixel);\r\n        texture.data[0] = rgba;\r\n        texture.upload();\r\n\r\n        if (mipMapping && parseMipMaps) {\r\n            var dataOffset = width * actualHeight * bytesPerPixel;\r\n            //  var rgbaOffset = width * actualHeight * 4 ;\r\n            texture.uploadMipLevel(0, rgba);\r\n            for (level in 1... numLevels) {\r\n                // incomplete mipmap chain\r\n                if (dataOffset > width * height * bytesPerPixel) {\r\n                    break;\r\n                }\r\n                var mipMapWidth =Math.floor(Math.max(width >> level, 1));\r\n                var mipMapHeight =Math.floor(Math.max(actualHeight >> level, 1));\r\n                var mipMapSize = Math.floor(mipMapWidth * mipMapHeight * 4);\r\n\r\n                var textureRgbaData:Bytes = Bytes.alloc(mipMapSize);\r\n                texture.data[level] = textureRgbaData;\r\n                //textureRgbaData[rgbaOffset] todo\r\n                parseMipMap(textureRgbaData, 0, data, dataOffset, width, height, new Vec2(), mipMapWidth, mipMapHeight, bytesPerPixel);\r\n\r\n                dataOffset += width * mipMapHeight * bytesPerPixel;\r\n                texture.uploadMipLevel(level, textureRgbaData);\r\n\r\n\r\n//                var texture2:Texture = Texture.create(context,  mipMapWidth, mipMapHeight, false, false, smooth, TextureFormat.RGBA, filename+level);\r\n//\r\n//                texture2.data[0] = textureRgbaData;\r\n//                texture2.upload();\r\n                // rgbaOffset += mipMapSize;\r\n            }\r\n        }\r\n\r\n\r\n        return texture;\r\n    }\r\n\r\n\r\n    public function parseMipMap(_out:Bytes, rgbaOffset:Int, data:Bytes, dataOffset:Int, width:Int, height:Int, offset:Vec2, mipMapWidth, mipMapHeight, bytesPerPixel) {\r\n        var endX = Math.floor(offset.x + mipMapWidth);\r\n        var endY = Math.floor(offset.y + mipMapHeight);\r\n        var idx = 0;\r\n        for (y in Math.floor(offset.y)...endY) {\r\n            for (x in Math.floor(offset.x) ... endX) {\r\n                var xy = (x + y * width) * bytesPerPixel;\r\n                for (i in 0... bytesPerPixel) {\r\n                    _out.set(rgbaOffset + (idx++), data.get(dataOffset + (xy++)));\r\n                }\r\n                for (i in bytesPerPixel...4) {\r\n                    _out.set(rgbaOffset + (idx++), 255);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public function parseCubeTexture(context:AbstractContext, width:Int, height:Int, data:Bytes, parseMipMaps:Bool, mipMapping = false, smooth = true, format = TextureFormat.RGBA, filename = \"\") {\r\n        var faceSize = Math.floor(width / 4);\r\n        var texture:CubeTexture = CubeTexture.create(context, faceSize, faceSize, mipMapping, false, smooth, TextureFormat.RGBA, filename);\r\n        var faces:Array<Face> = [Face.POSITIVE_X, Face.NEGATIVE_X, Face.POSITIVE_Y, Face.NEGATIVE_Y, Face.POSITIVE_Z, Face.NEGATIVE_Z];\r\n        // horizontal cross layout\r\n        var faceOffset:Array<Vec2> = [new Vec2(2, 1), new Vec2(0, 1), new Vec2(1, 0), new Vec2(1, 2), new Vec2(1, 1), new Vec2(3, 1)];\r\n        var rgba:Bytes = Bytes.alloc(faceSize * faceSize * 4);\r\n        var bytesPerPixel = format == TextureFormat.RGBA ? 4 : 3;\r\n\r\n        for (i in 0... 6) {\r\n            var offset = Vec2.multiplyScalar(faceOffset[i], faceSize,new Vec2());\r\n            var face = faces[i];\r\n            this.parseMipMap(rgba, 0, data, 0, width, height, offset, faceSize, faceSize, bytesPerPixel);\r\n\r\n            texture.setData(rgba, face);\r\n        }\r\n        texture.upload();\r\n        var eof = width * height * bytesPerPixel;\r\n        if (mipMapping && parseMipMaps) {\r\n            for (i in 0... 6) {\r\n                var face = faces[i];\r\n                var level = 1;\r\n                var dataOffset = width * faceSize * 3 * bytesPerPixel;\r\n                var size = faceSize / 2;\r\n                while (size >= 1) {\r\n                    var offset = Vec2.multiplyScalar(faceOffset[i], size,new Vec2());\r\n                    // incomplete mipmap chain\r\n                    if (dataOffset >= eof) {\r\n                        break;\r\n                    }\r\n                    this.parseMipMap(rgba, 0, data, dataOffset, width, height, offset, size, size, bytesPerPixel);\r\n\r\n                    // uint s = math::clp2(size);\r\n                    //\r\n                    // if (s != size)\r\n                    // {\r\n                    //     std::vector<unsigned char> resized(s * s * sizeof(int));\r\n                    //\r\n                    //     AbstractTexture::resizeData(size, size, &mipMapData[0], s, s, smooth, resized);\r\n                    //     // mipMapData = std::move(resized);\r\n                    //     mipMapData = resized;\r\n                    // }\r\n\r\n                    texture.uploadMipLevel(level, rgba, face);\r\n                    dataOffset += Math.floor(width * size * 3 * bytesPerPixel);\r\n                    size /= 2;\r\n                    ++level;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return texture;\r\n    }\r\n\r\n    public function dispose() {\r\n    }\r\n}\r\n","package minko.material;\r\nimport minko.data.Provider;\r\nimport minko.Uuid.Has_uuid;\r\n@:expose(\"minko.material.Material\")\r\nclass Material extends Has_uuid {\r\n    private var _provider:Provider;\r\n\r\n    public function dispose():Void {\r\n        _provider = null;\r\n    }\r\n\r\n    public static function create(name = \"material\"):Material {\r\n        var instance = new Material(name);\r\n\r\n        instance.initialize();\r\n\r\n        return instance;\r\n    }\r\n\r\n    public static function createbyMaterial(source:Material):Material {\r\n        var mat:Material = create();\r\n\r\n        mat._provider.copyFrom(source._provider);\r\n\r\n        return mat;\r\n    }\r\n\r\n    override function get_uuid() {\r\n        return _provider.uuid;\r\n    }\r\n\r\n    public var name(get, null):String ;\r\n\r\n    function get_name() {\r\n        return _provider.get(\"name\");\r\n    }\r\n\r\n    public var data(get, null):Provider ;\r\n\r\n    function get_data() {\r\n        return _provider;\r\n    }\r\n\r\n    public function hasProperty(propertyName:String):Bool {\r\n        return _provider.hasProperty(propertyName);\r\n\r\n    }\r\n\r\n    public function get(propertyName:String):Dynamic {\r\n        return _provider.get(propertyName) ;\r\n    }\r\n\r\n    public function unset(propertyName:String) :Void{\r\n          _provider.unset(propertyName);\r\n\r\n    }\r\n\r\n    public function setbyKeyObject(values:Dynamic):Material {\r\n\r\n        var fields = Reflect.fields(values);\r\n        for (key in fields) {\r\n            _provider.set(key, Reflect.field(values, key));\r\n        }\r\n\r\n\r\n        return this;\r\n    }\r\n\r\n    public function set(key:String, values:Dynamic):Material {\r\n\r\n        _provider.set(key, values);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function new(name:String) {\r\n        super();\r\n        this._provider = Provider.create();\r\n        _provider.set(\"name\", name);\r\n        _provider.set(\"uuid\", _provider.uuid);\r\n    }\r\n\r\n    public function copyFrom(values:Provider) {\r\n        this._provider = Provider.createbyProvider(values);\r\n        _provider.set(\"uuid\", _provider.uuid);\r\n    }\r\n\r\n    public function initialize() {\r\n    }\r\n\r\n}\r\n","package minko.material;\r\nimport glm.Vec2;\r\nimport glm.Vec4;\r\nimport minko.render.AbstractTexture;\r\nimport minko.render.Blending.Destination;\r\nimport minko.render.Blending.Mode;\r\nimport minko.render.Blending.Source;\r\nimport minko.render.Blending;\r\nimport minko.render.CompareMode;\r\nimport minko.render.States;\r\nimport minko.render.StencilOperation;\r\nimport minko.render.TriangleCulling;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.material.BasicMaterial\")\r\nclass BasicMaterial extends Material {\r\n    private var _defaultStates:States;\r\n\r\n    public static function create(name = \"BasicMaterial\"):BasicMaterial {\r\n        return new BasicMaterial(name);\r\n    }\r\n\r\n    public static function createbyBasicMaterial(source:BasicMaterial) {\r\n        var pm:Material = create(source.name);\r\n\r\n        pm.data.copyFrom(source.data);\r\n\r\n        return pm;\r\n    }\r\n\r\n    public var diffuseColor(get, set):Vec4;\r\n\r\n    function set_diffuseColor(value) {\r\n        data.set(\"diffuseColor\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public function diffuseColorRGBA(diffuseRGBA) {\r\n        return diffuseColor = ( MathUtil.rgba(diffuseRGBA));\r\n    }\r\n\r\n    function get_diffuseColor() {\r\n        return data.get(\"diffuseColor\");\r\n    }\r\n\r\n    public var uvScale(get, set):Vec2;\r\n\r\n    function set_uvScale(value) {\r\n        data.set(\"uvScale\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_uvScale() {\r\n        return data.get(\"uvScale\");\r\n    }\r\n    public var uvOffset(get, set):Vec2;\r\n\r\n    function set_uvOffset(value) {\r\n        data.set(\"uvOffset\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_uvOffset() {\r\n        return data.get(\"uvOffset\");\r\n    }\r\n\r\n    public var diffuseMap(get, set):AbstractTexture;\r\n\r\n    function get_diffuseMap() {\r\n        return data.hasProperty(\"diffuseMap\") ? data.get(\"diffuseMap\") : null;\r\n    }\r\n\r\n    function set_diffuseMap(texture:AbstractTexture) {\r\n#if  DEBUG\r\n\tassert(texture == nullptr || texture->type() == TextureType::Texture2D);\r\n#end\r\n        if (texture != null)\r\n            data.set(\"diffuseMap\", texture);\r\n        else\r\n            data.unset(\"diffuseMap\");\r\n\r\n        return texture;\r\n    }\r\n\r\n    public var fogColor(get, set):Vec4;\r\n\r\n    function set_fogColor(value) {\r\n        data.set(\"fogColor\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public function fogColorRGBA(fogRGBA) {\r\n        return fogColor = (MathUtil.rgba(fogRGBA));\r\n    }\r\n\r\n    function get_fogColor() {\r\n        return data.get(\"fogColor\");\r\n    }\r\n    public var fogStart(get, set):Float;\r\n\r\n    function set_fogStart(value) {\r\n        data.get(\"fogBounds\").x = value;\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_fogStart() {\r\n        return data.get(\"fogBounds\").x;\r\n    }\r\n    public var fogEnd(get, set):Float;\r\n\r\n    function set_fogEnd(value) {\r\n        data.get(\"fogBounds\").y = value;\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_fogEnd() {\r\n        return data.get(\"fogBounds\").y;\r\n    }\r\n    public var fogTechnique(get, set):FogTechnique;\r\n\r\n    function set_fogTechnique(value) {\r\n        data.set(\"fogTechnique\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_fogTechnique() {\r\n        return data.get(\"fogTechnique\");\r\n    }\r\n\r\n    public function setBlendingMode(src:Source, dst:Destination) {\r\n        data.set(\"blendingMode\", src | dst);\r\n        data.set(States.PROPERTY_BLENDING_SOURCE, src);\r\n        data.set(States.PROPERTY_BLENDING_DESTINATION, dst);\r\n\r\n        return (this);\r\n    }\r\n    public var blendingMode(null, set):Mode;\r\n\r\n    function set_blendingMode(value) {\r\n        var srcBlendingMode:Source = (value & 0x00ff);\r\n        var dstBlendingMode:Destination = (value & 0xff00);\r\n\r\n        data.set(\"blendingMode\", value);\r\n        data.set(States.PROPERTY_BLENDING_SOURCE, srcBlendingMode);\r\n        data.set(States.PROPERTY_BLENDING_DESTINATION, dstBlendingMode);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var blendingSourceFactor(get, null):Source;\r\n\r\n    function get_blendingSourceFactor() {\r\n        return data.hasProperty(\"bleblendingModendMode\") ? data.get(\"blendingMode\") & 0x00ff : _defaultStates.blendingSourceFactor;\r\n    }\r\n\r\n    public var blendingDestinationFactor(get, null):Destination;\r\n\r\n    function get_blendingDestinationFactor() {\r\n        return data.hasProperty(\"blendingMode\") ? data.get(\"blendingMode\") & 0xff00 : _defaultStates.blendingDestinationFactor;\r\n    }\r\n    public var colorMask(get, set):Bool;\r\n\r\n    function set_colorMask(value) {\r\n        data.set(States.PROPERTY_COLOR_MASK, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_colorMask() {\r\n        return data.hasProperty(States.PROPERTY_COLOR_MASK) ? data.get(States.PROPERTY_COLOR_MASK) : _defaultStates.colorMask;\r\n    }\r\n    public var depthMask(get, set):Bool;\r\n\r\n    function set_depthMask(value) {\r\n        data.set(States.PROPERTY_DEPTH_MASK, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_depthMask() {\r\n        return data.hasProperty(States.PROPERTY_DEPTH_MASK) ? data.get(States.PROPERTY_DEPTH_MASK) : _defaultStates.depthMask;\r\n    }\r\n    public var depthFunction(get, set):CompareMode;\r\n\r\n    function set_depthFunction(value) {\r\n        data.set(States.PROPERTY_DEPTH_FUNCTION, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_depthFunction() {\r\n        return data.hasProperty(States.PROPERTY_DEPTH_FUNCTION) ? data.get(States.PROPERTY_DEPTH_FUNCTION) : _defaultStates.depthFunction;\r\n    }\r\n\r\n\r\n    public var triangleCulling(get, set):TriangleCulling;\r\n\r\n    function set_triangleCulling(value) {\r\n        data.set(States.PROPERTY_TRIANGLE_CULLING, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_triangleCulling() {\r\n        return data.hasProperty(States.PROPERTY_TRIANGLE_CULLING) ? data.get(States.PROPERTY_TRIANGLE_CULLING) : _defaultStates.triangleCulling;\r\n    }\r\n    public var stencilFunction(get, set):CompareMode;\r\n\r\n    function set_stencilFunction(value) {\r\n        data.set(States.PROPERTY_STENCIL_FUNCTION, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_stencilFunction() {\r\n        return data.hasProperty(States.PROPERTY_STENCIL_FUNCTION) ? data.get(States.PROPERTY_STENCIL_FUNCTION) : _defaultStates.stencilFunction;\r\n    }\r\n    public var stencilReference(get, set):Int;\r\n\r\n    function set_stencilReference(value) {\r\n        data.set(States.PROPERTY_STENCIL_REFERENCE, value);\r\n        return value;\r\n    }\r\n\r\n    function get_stencilReference() {\r\n        return data.hasProperty(States.PROPERTY_STENCIL_REFERENCE) ? data.get(States.PROPERTY_STENCIL_REFERENCE) : _defaultStates.stencilReference;\r\n    }\r\n\r\n\r\n    public var stencilMask(get, set):Int;\r\n\r\n    function set_stencilMask(value) {\r\n        data.set(States.PROPERTY_STENCIL_MASK, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_stencilMask() {\r\n        return data.hasProperty(States.PROPERTY_STENCIL_MASK) ? data.get(States.PROPERTY_STENCIL_MASK) : _defaultStates.stencilMask;\r\n    }\r\n    public var stencilFailOperation(get, set):StencilOperation;\r\n\r\n    function set_stencilFailOperation(value) {\r\n        data.set(States.PROPERTY_STENCIL_FAIL_OPERATION, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_stencilFailOperation() {\r\n        return data.hasProperty(States.PROPERTY_STENCIL_FAIL_OPERATION) ? data.get(States.PROPERTY_STENCIL_FAIL_OPERATION) : _defaultStates.stencilFailOperation;\r\n    }\r\n    public var stencilZFailOperation(get, set):StencilOperation;\r\n\r\n    function set_stencilZFailOperation(value) {\r\n        data.set(States.PROPERTY_STENCIL_ZFAIL_OPERATION, value);\r\n        return value;\r\n    }\r\n\r\n    function get_stencilZFailOperation() {\r\n        return data.hasProperty(States.PROPERTY_STENCIL_ZFAIL_OPERATION) ? data.get(States.PROPERTY_STENCIL_ZFAIL_OPERATION) : _defaultStates.stencilZFailOperation;\r\n    }\r\n    public var stencilZPassOperation(get, set):StencilOperation;\r\n\r\n    function set_stencilZPassOperation(value) {\r\n        data.set(States.PROPERTY_STENCIL_ZPASS_OPERATION, value);\r\n        return value;\r\n    }\r\n\r\n    function get_stencilZPassOperation() {\r\n        return data.hasProperty(States.PROPERTY_STENCIL_ZPASS_OPERATION) ? data.get(States.PROPERTY_STENCIL_ZPASS_OPERATION) : _defaultStates.stencilZPassOperation;\r\n    }\r\n\r\n\r\n    public var priority(get, set):Float;\r\n\r\n    function set_priority(value) {\r\n        data.set(States.PROPERTY_PRIORITY, value);\r\n        return value;\r\n    }\r\n\r\n    function get_priority() {\r\n        return data.hasProperty(States.PROPERTY_PRIORITY) ? data.get(States.PROPERTY_PRIORITY) : _defaultStates.priority;\r\n    }\r\n\r\n    public var zSorted(get, set):Bool;\r\n\r\n    function set_zSorted(value) {\r\n        data.set(States.PROPERTY_ZSORTED, value);\r\n        return value;\r\n    }\r\n\r\n    function get_zSorted() {\r\n        return data.hasProperty(States.PROPERTY_ZSORTED) ? data.get(States.PROPERTY_ZSORTED) : _defaultStates.zSorted;\r\n    }\r\n\r\n\r\n    public function new(name) {\r\n        super(name);\r\n    }\r\n}\r\n","package minko.signal;\r\ntypedef Callback2<A, B> = A -> B -> Void;\r\ntypedef CallbackRecord2<A, B> = Tuple<Float, SignalSlot2<A, B>>;\r\n@:expose(\"minko.signal.SignalSlot2\")\r\nclass SignalSlot2<A, B> {\r\n    public var _signal:Signal2<A, B>;\r\n    public var callback:Callback2<A, B>;\r\n    public var expired:Bool;\r\n    public var once:Bool;\r\n\r\n    public function new(_s) {\r\n        expired = false;\r\n        _signal = _s;\r\n    }\r\n\r\n    public function disconnect() {\r\n        if (_signal != null) {\r\n            _signal.remove(this);\r\n            _signal = null ;\r\n        }\r\n    }\r\n\r\n    public function dispose() {\r\n        disconnect();\r\n    }\r\n}\r\n@:expose(\"minko.signal.Signal2\")\r\nclass Signal2<A, B> {\r\n    public var _callbacks:Array<CallbackRecord2<A, B>>;\r\n    public var numCallbacks(get, null):Int;\r\n\r\n    public function new() {\r\n        _callbacks = [];\r\n    }\r\n\r\n    public function copyFrom(other:Signal2<A, B>) {\r\n        _callbacks = [for (c in other._callbacks) c];\r\n        return this;\r\n    }\r\n\r\n    public function dispose() {\r\n        for (callback in _callbacks) {\r\n            var slot:SignalSlot2<A, B> = callback.second;\r\n\r\n            if (slot != null) {\r\n                slot._signal = null;\r\n            }\r\n        }\r\n        _callbacks = [];\r\n    }\r\n\r\n    public static function create<A, B>() {\r\n        return new Signal2<A, B>();\r\n    }\r\n\r\n    function get_numCallbacks() {\r\n        return _callbacks.length;\r\n    }\r\n\r\n    public function connect(callback:Callback2<A, B>, ?priority:Float = 0, ?once = false) {\r\n        var connection = new SignalSlot2<A, B>(this);\r\n        connection.callback = callback;\r\n        connection.once = once;\r\n        _callbacks.push(new CallbackRecord2(priority, connection));\r\n        _callbacks.sort(function(a:CallbackRecord2<A, B>, b:CallbackRecord2<A, B>) {\r\n            return Math.floor(b.first - a.first);\r\n        });\r\n        return connection;\r\n    }\r\n\r\n    public function remove(it:SignalSlot2<A, B>) {\r\n        _callbacks = _callbacks.filter(function(b:CallbackRecord2<A, B>) {\r\n            return b.second != it;\r\n        });\r\n    }\r\n\r\n    public function execute(a:A, b:B) {\r\n        var callbacks = _callbacks;\r\n        var onces:Array<SignalSlot2<A, B>> = [];\r\n        for (callback in callbacks) {\r\n            var slot:SignalSlot2<A, B> = callback.second;\r\n            if (!slot.expired) {\r\n                slot.callback(a, b);\r\n                if (slot.once) {\r\n                    slot.expired = true;\r\n                    onces.push(slot);\r\n                }\r\n            }\r\n        }\r\n        for (callback in onces) {\r\n            callback.disconnect();\r\n        }\r\n    }\r\n}","package minko.file;\r\n\r\nimport minko.material.BasicMaterial;\r\nimport haxe.ds.StringMap;\r\nimport minko.component.Skinning.SkinningMethod;\r\nimport minko.geometry.Geometry;\r\nimport minko.material.Material;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.AbstractTexture;\r\nimport minko.render.Effect;\r\nimport minko.render.TextureFormat;\r\nimport minko.scene.Node;\r\n@:expose(\"minko.file.FileStatus\")\r\n@:enum abstract FileStatus(Int) from Int to Int{\r\n    var Pending = 0;\r\n    var Aborted = 1;\r\n}\r\n\r\ntypedef ParserHandler = Void -> AbstractParser;\r\ntypedef ProtocolHandler = Void -> AbstractProtocol;\r\ntypedef MaterialFunction = String -> Material -> Material;\r\ntypedef TextureFunction = String -> AbstractTexture -> AbstractTexture;\r\ntypedef GeometryFunction = String -> Geometry -> Geometry;\r\ntypedef ProtocolFunction = String -> ProtocolHandler;\r\ntypedef ParserFunction = String -> ParserHandler;\r\ntypedef UriFunction = String -> String;\r\ntypedef NodeFunction = Node -> Node;\r\n\r\ntypedef EffectFunction = Effect -> Effect;\r\ntypedef TextureFormatFunction = Array<TextureFormat> -> TextureFormat;//todo\r\ntypedef AttributeFunction = Node -> String -> String -> Void;\r\ntypedef PreventLoadingFunction = String -> Bool;\r\n\r\ntypedef FileStatusFunction = File -> Float -> FileStatus;\r\n@:expose(\"minko.file.Options\")\r\nclass Options {\r\n\r\n    private var _context:AbstractContext;\r\n    private var _assets:AssetLibrary;\r\n    private var _includePaths:Array<String>;\r\n    private var _platforms:Array<String>;\r\n    private var _userFlags:Array<String>;\r\n\r\n    private var _parsers:StringMap<ParserHandler>;\r\n    private var _protocols:StringMap<ProtocolHandler>;\r\n\r\n    private var _optimizeForRendering:Bool;\r\n    private var _generateMipMaps:Bool;\r\n    private var _parseMipMaps:Bool;\r\n    private var _resizeSmoothly:Bool;\r\n    private var _isCubeTexture:Bool;\r\n    private var _isRectangleTexture:Bool;\r\n    private var _generateSmoothNormals:Bool;\r\n    private var _normalMaxSmoothingAngle:Float;\r\n    private var _includeAnimation:Bool;\r\n    private var _startAnimation:Bool;\r\n    private var _loadAsynchronously:Bool;\r\n    private var _disposeIndexBufferAfterLoading:Bool;\r\n    private var _disposeVertexBufferAfterLoading:Bool;\r\n    private var _disposeTextureAfterLoading:Bool;\r\n    private var _storeDataIfNotParsed:Bool;\r\n    private var _preserveMaterials:Bool;\r\n    private var _trackAssetDescriptor:Bool;\r\n    private var _skinningFramerate:Int;\r\n    private var _skinningMethod:SkinningMethod;\r\n    private var _effect:Effect;\r\n    private var _material:Material;\r\n    private var _textureFormats:Array<TextureFormat>;\r\n    private var _materialFunction:MaterialFunction;\r\n    private var _textureFunction:TextureFunction;\r\n    private var _geometryFunction:GeometryFunction;\r\n    private var _protocolFunction:ProtocolFunction;\r\n    private var _parserFunction:ParserFunction;\r\n    private var _uriFunction:UriFunction;\r\n    private var _nodeFunction:NodeFunction;\r\n    private var _effectFunction:EffectFunction;\r\n    private var _textureFormatFunction:TextureFormatFunction;\r\n    private var _attributeFunction:AttributeFunction;\r\n    private var _fileStatusFunction:FileStatusFunction;\r\n    private var _preventLoadingFunction:PreventLoadingFunction;\r\n    private var _seekingOffset:Int;\r\n    private var _seekedLength:Int;\r\n    private var _fixMipMaps:Bool;\r\n    private static var _defaultProtocols:StringMap<ProtocolHandler> = new StringMap<ProtocolHandler>();\r\n    private static var _defaultMaterial:Material =BasicMaterial.create(\"defaultMaterial\");\r\n    public var fixMipMaps(get, set):Bool;\r\n\r\n    function get_fixMipMaps() {\r\n        return _fixMipMaps;\r\n    }\r\n\r\n    function set_fixMipMaps(p) {\r\n        _fixMipMaps = p;\r\n        return p;\r\n    }\r\n    public static function empty() {\r\n        var instance = new Options();\r\n        instance.initialize();\r\n        return instance;\r\n    }\r\n\r\n    public static function create(context:AbstractContext) {\r\n        var options:Options = empty();\r\n        options._context = context;\r\n        return options;\r\n    }\r\n\r\n    public function clone():Options {\r\n        var copy:Options = new Options();\r\n        copy.copyFrom(this) ;\r\n        copy.initialize();\r\n        return copy;\r\n    }\r\n\r\n    public var context(get, set):AbstractContext;\r\n\r\n    function get_context() {\r\n        return _context;\r\n    }\r\n\r\n    function set_context(v) {\r\n        _context = v;\r\n        return v;\r\n    }\r\n    public var assetLibrary(get, set):AssetLibrary;\r\n\r\n    function get_assetLibrary() {\r\n        return _assets;\r\n    }\r\n\r\n    function set_assetLibrary(v) {\r\n        _assets = v;\r\n        return v;\r\n    }\r\n    public var includePaths(get, set):Array<String>;\r\n\r\n    function set_includePaths(v) {\r\n        _includePaths = v;\r\n        return v;\r\n    }\r\n\r\n    function get_includePaths() {\r\n        return _includePaths;\r\n    }\r\n    public var platforms(get, null):Array<String>;\r\n\r\n    function get_platforms() {\r\n        return _platforms;\r\n    }\r\n    public var userFlags(get, null):Array<String>;\r\n\r\n    function get_userFlags() {\r\n        return _userFlags;\r\n    }\r\n    public var optimizeForRendering(get, set):Bool;\r\n\r\n    function get_optimizeForRendering() {\r\n        return _optimizeForRendering;\r\n    }\r\n\r\n    function set_optimizeForRendering(value) {\r\n        _optimizeForRendering = value;\r\n        return value;\r\n    }\r\n    public var generateMipmaps(get, set):Bool;\r\n\r\n    function get_generateMipmaps() {\r\n        return _generateMipMaps;\r\n    }\r\n\r\n    function set_generateMipmaps(generateMipmaps) {\r\n        _generateMipMaps = generateMipmaps;\r\n        return generateMipmaps;\r\n    }\r\n    public var parseMipMaps(get, set):Bool;\r\n\r\n    function get_parseMipMaps() {\r\n        return _parseMipMaps;\r\n    }\r\n\r\n    function set_parseMipMaps(parseMipMaps) {\r\n        _parseMipMaps = parseMipMaps;\r\n        return parseMipMaps;\r\n    }\r\n    public var includeAnimation(get, set):Bool;\r\n\r\n    function get_includeAnimation() {\r\n        return _includeAnimation;\r\n    }\r\n\r\n    function set_includeAnimation(value) {\r\n        _includeAnimation = value;\r\n        return value;\r\n    }\r\n    public var startAnimation(get, set):Bool;\r\n\r\n    function get_startAnimation() {\r\n        return _startAnimation;\r\n    }\r\n\r\n    function set_startAnimation(value) {\r\n        _startAnimation = value;\r\n        return value;\r\n    }\r\n    public var loadAsynchronously(get, set):Bool;\r\n\r\n    function get_loadAsynchronously() {\r\n        return _loadAsynchronously;\r\n    }\r\n\r\n    function set_loadAsynchronously(value) {\r\n        _loadAsynchronously = value;\r\n        return value;\r\n    }\r\n    public var resizeSmoothly(get, set):Bool;\r\n\r\n    function get_resizeSmoothly() {\r\n        return _resizeSmoothly;\r\n    }\r\n\r\n    function set_resizeSmoothly(value) {\r\n        _resizeSmoothly = value;\r\n        return value;\r\n    }\r\n    public var isCubeTexture(get, set):Bool;\r\n\r\n    function get_isCubeTexture() {\r\n        return _isCubeTexture;\r\n    }\r\n\r\n    function set_isCubeTexture(value) {\r\n        _isCubeTexture = value;\r\n\r\n        return value;\r\n    }\r\n\r\n    public var isRectangleTexture(get, set):Bool;\r\n\r\n    function get_isRectangleTexture() {\r\n        return _isRectangleTexture;\r\n    }\r\n\r\n    function set_isRectangleTexture(value) {\r\n        _isRectangleTexture = value;\r\n\r\n        return value;\r\n    }\r\n\r\n    public var generateSmoothNormals(get, set):Bool;\r\n\r\n    function get_generateSmoothNormals() {\r\n        return _generateSmoothNormals;\r\n    }\r\n\r\n    function set_generateSmoothNormals(value) {\r\n        _generateSmoothNormals = value;\r\n\r\n        return value;\r\n    }\r\n    public var normalMaxSmoothingAngle(get, set):Float;\r\n\r\n    function get_normalMaxSmoothingAngle() {\r\n        return _normalMaxSmoothingAngle;\r\n    }\r\n\r\n    function set_normalMaxSmoothingAngle(value) {\r\n        _normalMaxSmoothingAngle = value;\r\n\r\n        return value;\r\n    }\r\n    public var disposeIndexBufferAfterLoading(get, set):Bool;\r\n\r\n    function get_disposeIndexBufferAfterLoading() {\r\n        return _disposeIndexBufferAfterLoading;\r\n    }\r\n\r\n    function set_disposeIndexBufferAfterLoading(value) {\r\n        _disposeIndexBufferAfterLoading = value;\r\n\r\n        return value;\r\n    }\r\n    public var disposeVertexBufferAfterLoading(get, set):Bool;\r\n\r\n    function get_disposeVertexBufferAfterLoading() {\r\n        return _disposeVertexBufferAfterLoading;\r\n    }\r\n\r\n    function set_disposeVertexBufferAfterLoading(value) {\r\n        _disposeVertexBufferAfterLoading = value;\r\n\r\n        return value;\r\n    }\r\n    public var disposeTextureAfterLoading(get, set):Bool;\r\n\r\n    function get_disposeTextureAfterLoading() {\r\n        return _disposeTextureAfterLoading;\r\n    }\r\n\r\n    function set_disposeTextureAfterLoading(value) {\r\n        _disposeTextureAfterLoading = value;\r\n\r\n        return value;\r\n    }\r\n\r\n    public var storeDataIfNotParsed(get, set):Bool;\r\n\r\n    function get_storeDataIfNotParsed() {\r\n        return _storeDataIfNotParsed;\r\n    }\r\n\r\n    function set_storeDataIfNotParsed(value) {\r\n        _storeDataIfNotParsed = value;\r\n\r\n        return value;\r\n    }\r\n    public var preserveMaterials(get, set):Bool;\r\n\r\n    function get_preserveMaterials() {\r\n        return _preserveMaterials;\r\n    }\r\n\r\n    function set_preserveMaterials(value) {\r\n        _preserveMaterials = value;\r\n\r\n        return value;\r\n    }\r\n    public var trackAssetDescriptor(get, set):Bool;\r\n\r\n    function get_trackAssetDescriptor() {\r\n        return _trackAssetDescriptor;\r\n    }\r\n\r\n    function set_trackAssetDescriptor(value) {\r\n        _trackAssetDescriptor = value;\r\n\r\n        return value;\r\n    }\r\n\r\n    public var skinningFramerate(get, set):Int;\r\n\r\n    function get_skinningFramerate() {\r\n        return _skinningFramerate;\r\n    }\r\n\r\n    function set_skinningFramerate(value) {\r\n        _skinningFramerate = value;\r\n\r\n        return value;\r\n    }\r\n\r\n    public var skinningMethod(get, set):SkinningMethod;\r\n\r\n    function get_skinningMethod() {\r\n        return _skinningMethod;\r\n    }\r\n\r\n    function set_skinningMethod(value) {\r\n        _skinningMethod = (value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var effect(get, set):Effect;\r\n\r\n    function get_effect() {\r\n        return _effect;\r\n    }\r\n\r\n    function set_effect(effect) {\r\n        _effect = effect;\r\n\r\n        return effect;\r\n    }\r\n    public var material(get, set):Material;\r\n\r\n    function get_material() {\r\n        return _material;\r\n    }\r\n\r\n    function set_material(material) {\r\n        _material = material;\r\n\r\n        return material;\r\n    }\r\n\r\n    public function registerTextureFormat(textureFormat:TextureFormat) {\r\n        _textureFormats.push(textureFormat);\r\n\r\n        return this;\r\n    }\r\n    public var protocolFunction(get, set):ProtocolFunction;\r\n\r\n    function get_protocolFunction() {\r\n        return _protocolFunction != null ? _protocolFunction : defaultProtocolFunction;\r\n    }\r\n\r\n    function set_protocolFunction(func) {\r\n        _protocolFunction = func;\r\n\r\n        return func;\r\n    }\r\n\r\n    public var parserFunction(get, set):ParserFunction;\r\n\r\n    function get_parserFunction() {\r\n        return _parserFunction;\r\n    }\r\n\r\n    function set_parserFunction(func) {\r\n        _parserFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var materialFunction(get, set):MaterialFunction;\r\n\r\n    function get_materialFunction() {\r\n        return _materialFunction;\r\n    }\r\n\r\n    function set_materialFunction(func) {\r\n        _materialFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var textureFunction(get, set):TextureFunction;\r\n\r\n    function get_textureFunction() {\r\n        return _textureFunction;\r\n    }\r\n\r\n    function set_textureFunction(func) {\r\n        _textureFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var geometryFunction(get, set):GeometryFunction;\r\n\r\n    function get_geometryFunction() {\r\n        return _geometryFunction;\r\n    }\r\n\r\n    function set_geometryFunction(func) {\r\n        _geometryFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var uriFunction(get, set):UriFunction;\r\n\r\n    function get_uriFunction() {\r\n        return _uriFunction;\r\n    }\r\n\r\n    function set_uriFunction(func) {\r\n        _uriFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var nodeFunction(get, set):NodeFunction;\r\n\r\n    function get_nodeFunction() {\r\n        return _nodeFunction;\r\n    }\r\n\r\n    function set_nodeFunction(func) {\r\n        _nodeFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var effectFunction(get, set):EffectFunction;\r\n\r\n    function get_effectFunction() {\r\n        return _effectFunction;\r\n    }\r\n\r\n    function set_effectFunction(func) {\r\n        _effectFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var textureFormatFunction(get, set):TextureFormatFunction;\r\n\r\n    function get_textureFormatFunction() {\r\n        return _textureFormatFunction;\r\n    }\r\n\r\n    function set_textureFormatFunction(func) {\r\n        _textureFormatFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var attributeFunction(get, set):AttributeFunction;\r\n\r\n    function get_attributeFunction() {\r\n        return _attributeFunction;\r\n    }\r\n\r\n    function set_attributeFunction(func) {\r\n        _attributeFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var fileStatusFunction(get, set):FileStatusFunction;\r\n\r\n    function get_fileStatusFunction() {\r\n        return _fileStatusFunction;\r\n    }\r\n\r\n    function set_fileStatusFunction(func) {\r\n        _fileStatusFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var preventLoadingFunction(get, set):PreventLoadingFunction;\r\n\r\n    function get_preventLoadingFunction() {\r\n        return _preventLoadingFunction;\r\n    }\r\n\r\n    function set_preventLoadingFunction(func) {\r\n        _preventLoadingFunction = func;\r\n\r\n        return func;\r\n    }\r\n    public var seekingOffset(get, set):Int;\r\n\r\n    function get_seekingOffset() {\r\n        return _seekingOffset;\r\n    }\r\n\r\n    function set_seekingOffset(value) {\r\n        _seekingOffset = value;\r\n\r\n        return value;\r\n    }\r\n\r\n    public var seekedLength(get, set):Int;\r\n\r\n    function get_seekedLength() {\r\n        return _seekedLength;\r\n    }\r\n\r\n    function set_seekedLength(value) {\r\n        _seekedLength = value;\r\n\r\n        return value;\r\n    }\r\n\r\n\r\n    public function registerParser(extension:String, cls:ParserHandler) {\r\n        var ext = extension.toLowerCase();\r\n\r\n        _parsers.set(ext, cls) ;\r\n\r\n        return this;\r\n    }\r\n\r\n    public function getParser(extension) {\r\n        if (_parserFunction != null) {\r\n            return _parserFunction(extension);\r\n        }\r\n\r\n        return _parsers.exists(extension) == false ? null : _parsers.get(extension);\r\n    }\r\n\r\n\r\n    public static function registerDefaultProtocol(protocol:String, cls:ProtocolHandler) {\r\n        var prefix = protocol.toLowerCase();\r\n\r\n        _defaultProtocols.set(prefix, cls) ;\r\n    }\r\n\r\n    public function registerProtocol(cls:ProtocolHandler, protocol:String) {\r\n        var prefix = protocol.toLowerCase();\r\n\r\n        _protocols.set(prefix, cls) ;\r\n\r\n        return this;\r\n    }\r\n\r\n    public function getProtocol(protocol) {\r\n        var p:ProtocolHandler = _protocols.exists(protocol) == false ? null : _protocols.get(protocol) ;\r\n\r\n        if (p != null) {\r\n            //   p.options = p.options.clone();\r\n\r\n            return p;\r\n        }\r\n\r\n        var defaultProtocol = _defaultProtocols.exists(protocol) == false ? null : _defaultProtocols.get(protocol) ;\r\n\r\n        return defaultProtocol;\r\n    }\r\n\r\n    static public function includePaths_clear() {\r\n\r\n//   auto binaryDir = File::getBinaryDirectory();\r\n        var binaryDir = \"\";\r\n        var __includePaths = [];\r\n\r\n        __includePaths.push(\"asset/effect\");\r\n        #if defined(DEBUG) && !defined(EMSCRIPTEN)\r\n             __includePaths.push(binaryDir + \"/../../../asset\");\r\n        #end\r\n        return __includePaths;\r\n    }\r\n\r\n    public function new() {\r\n\r\n        this._parsers = new StringMap<ParserHandler>();\r\n        this._protocols = new StringMap<ProtocolHandler>();\r\n        this._context = null;\r\n        this._includePaths = [];\r\n\r\n        this._platforms = [];\r\n        this._userFlags = [];\r\n        this._optimizeForRendering = true;\r\n        this._generateMipMaps = false;//todo\r\n        this._fixMipMaps=false;\r\n        this._parseMipMaps = false;\r\n        this._resizeSmoothly = false;\r\n        this._isCubeTexture = false;\r\n        this._isRectangleTexture = false;\r\n        this._generateSmoothNormals = false;\r\n        this._normalMaxSmoothingAngle = 80.0 ;\r\n        this._includeAnimation = true;\r\n        this._startAnimation = true;\r\n        this._loadAsynchronously = true;\r\n        this._disposeIndexBufferAfterLoading = false;\r\n        this._disposeVertexBufferAfterLoading = false;\r\n        this._disposeTextureAfterLoading = false;\r\n        this._storeDataIfNotParsed = true;\r\n        this._preserveMaterials = true;\r\n        this._trackAssetDescriptor = false;\r\n        this._skinningFramerate = 30;\r\n        this._skinningMethod = SkinningMethod.HARDWARE;\r\n        this._material = null;\r\n        this._effect = null;\r\n        this._seekingOffset = 0;\r\n        this._seekedLength = 0;\r\n        this._materialFunction = null;\r\n        this._textureFunction = null;\r\n        this._geometryFunction = null;\r\n        this._protocolFunction = null;\r\n        this._parserFunction = null;\r\n        this._uriFunction = null;\r\n        this._nodeFunction = null;\r\n        this._effectFunction = null;\r\n        this._textureFormatFunction = null;\r\n        this._attributeFunction = null;\r\n        this._fileStatusFunction = null;\r\n        this._preventLoadingFunction = null;\r\n        var binaryDir = File.getBinaryDirectory();\r\n\r\n        includePaths.push(binaryDir + \"/asset\");\r\n        includePaths.push(\".\");\r\n\r\n        #if DEBUG && !EMSCRIPTEN\r\n\t\t\t\t includePaths.push(binaryDir + \"/../../../asset\");\r\n\t\t\t #end\r\n\r\n        initializePlatforms();\r\n        initializeUserFlags();\r\n    }\r\n\r\n    public function copyFrom(copy:Options) {\r\n        this._context = copy._context;\r\n        this._assets = copy._assets;\r\n        this._includePaths = (copy._includePaths.concat([]));\r\n        this._platforms = (copy._platforms.concat([]));\r\n        this._userFlags = (copy._userFlags.concat([]));\r\n        this._optimizeForRendering = copy._optimizeForRendering;\r\n        this._parsers = (copy._parsers);\r\n        this._protocols = (copy._protocols);\r\n        this._generateMipMaps = copy._generateMipMaps;\r\n        this._fixMipMaps= copy._fixMipMaps;\r\n        this._parseMipMaps = copy._parseMipMaps;\r\n        this._resizeSmoothly = copy._resizeSmoothly;\r\n        this._isCubeTexture = copy._isCubeTexture;\r\n        this._isRectangleTexture = copy._isRectangleTexture;\r\n        this._generateSmoothNormals = copy._generateSmoothNormals;\r\n        this._normalMaxSmoothingAngle = copy._normalMaxSmoothingAngle;\r\n        this._includeAnimation = copy._includeAnimation;\r\n        this._startAnimation = copy._startAnimation;\r\n        this._disposeIndexBufferAfterLoading = copy._disposeIndexBufferAfterLoading;\r\n        this._disposeVertexBufferAfterLoading = copy._disposeVertexBufferAfterLoading;\r\n        this._disposeTextureAfterLoading = copy._disposeTextureAfterLoading;\r\n        this._storeDataIfNotParsed = copy._storeDataIfNotParsed;\r\n        this._preserveMaterials = copy._preserveMaterials;\r\n        this._trackAssetDescriptor = copy._trackAssetDescriptor;\r\n        this._skinningFramerate = copy._skinningFramerate;\r\n        this._skinningMethod = copy._skinningMethod;\r\n        this._effect = copy._effect;\r\n        this._textureFormats = copy._textureFormats;\r\n        this._material = copy._material;\r\n        this._materialFunction = copy._materialFunction;\r\n        this._textureFunction = copy._textureFunction;\r\n        this._geometryFunction = copy._geometryFunction;\r\n        this._protocolFunction = copy._protocolFunction;\r\n        this._parserFunction = copy._parserFunction;\r\n        this._uriFunction = copy._uriFunction;\r\n        this._nodeFunction = copy._nodeFunction;\r\n        this._effectFunction = copy._effectFunction;\r\n        this._textureFormatFunction = copy._textureFormatFunction;\r\n        this._attributeFunction = copy._attributeFunction;\r\n        this._fileStatusFunction = copy._fileStatusFunction;\r\n        this._preventLoadingFunction = copy._preventLoadingFunction;\r\n        this._loadAsynchronously = copy._loadAsynchronously;\r\n        this._seekingOffset = copy._seekingOffset;\r\n        this._seekedLength = copy._seekedLength;\r\n        return this;\r\n    }\r\n\r\n    public function initialize() {\r\n\r\n        resetNotInheritedValues();\r\n        initializeDefaultFunctions();\r\n\r\n        if (!_parsers.exists(\"effect\")) {\r\n            registerParser(\"effect\", function() return new EffectParser());\r\n        }\r\n\r\n        if (!_defaultProtocols.exists(\"file\")) {\r\n            registerDefaultProtocol(\"file\", function() return new FileProtocol());\r\n        }\r\n    }\r\n\r\n    private function initializePlatforms() {\r\n#if MINKO_PLATFORM & MINKO_PLATFORM_WINDOWS\r\n\t\t\t\t_platforms.AddLast(\"windows\");\r\n#elif MINKO_PLATFORM & MINKO_PLATFORM_OSX\r\n\t\t\t\t_platforms.AddLast(\"osx\");\r\n#elif MINKO_PLATFORM & MINKO_PLATFORM_LINUX\r\n\t\t\t\t_platforms.AddLast(\"linux\");\r\n#elif MINKO_PLATFORM & MINKO_PLATFORM_IOS\r\n\t\t\t\t_platforms.AddLast(\"ios\");\r\n#elif MINKO_PLATFORM & MINKO_PLATFORM_ANDROID\r\n\t\t\t\t_platforms.AddLast(\"android\");\r\n#elif MINKO_PLATFORM & MINKO_PLATFORM_HTML5\r\n\t\t\t\t_platforms.AddLast(\"html5\");\r\n\t\t\t\tif (testUserAgentPlatform(\"Windows\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"windows\");\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"Macintosh\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"osx\");\r\n\t\t\t\t\tif (testUserAgentPlatform(\"Safari\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_platforms.AddLast(\"safari\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"Linux\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"linux\");\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"iPad\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"ios\");\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"iPhone\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"ios\");\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"iPod\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"ios\");\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"Android\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"android\");\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"Firefox\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"firefox\");\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"Chrome\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"chrome\");\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"Opera\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"opera\");\r\n\t\t\t\t}\r\n\t\t\t\tif (testUserAgentPlatform(\"MSIE\") || testUserAgentPlatform(\"Trident\"))\r\n\t\t\t\t{\r\n\t\t\t\t\t_platforms.AddLast(\"msie\");\r\n\t\t\t\t}\r\n#end\r\n    }\r\n\r\n    private function initializeUserFlags() {\r\n    }\r\n\r\n    private function initializeDefaultFunctions() {\r\n        var options = this;\r\n\r\n        if (_materialFunction == null) {\r\n            _materialFunction = function(UnnamedParameter1, material) {\r\n                return material;\r\n            };\r\n        }\r\n\r\n        if (_textureFunction == null) {\r\n            _textureFunction = function(UnnamedParameter1, texture) {\r\n                return texture;\r\n            };\r\n        }\r\n\r\n        if (_geometryFunction == null) {\r\n            _geometryFunction = function(UnnamedParameter1, geom) {\r\n                return geom;\r\n            };\r\n        }\r\n\r\n        if (_uriFunction == null) {\r\n            _uriFunction = function(uri) {\r\n                return uri;\r\n            };\r\n        }\r\n\r\n        if (_nodeFunction == null) {\r\n            _nodeFunction = function(node) {\r\n                return node;\r\n            };\r\n        }\r\n\r\n        if (_effectFunction == null) {\r\n            _effectFunction = function(effect) {\r\n                return effect;\r\n            };\r\n        }\r\n\r\n\r\n        _textureFormatFunction = function(availableTextureFormats:Array<TextureFormat>) {\r\n            var defaultTextureFormats:Array<TextureFormat> = [TextureFormat.RGBA_PVRTC2_2BPP,\r\n            TextureFormat.RGBA_PVRTC2_4BPP,\r\n            TextureFormat.RGBA_PVRTC1_2BPP,\r\n            TextureFormat.RGBA_PVRTC1_4BPP,\r\n            TextureFormat.RGB_PVRTC1_2BPP,\r\n            TextureFormat.RGB_PVRTC1_4BPP,\r\n            TextureFormat.RGBA_DXT5,\r\n            TextureFormat.RGBA_DXT3,\r\n            TextureFormat.RGBA_ATITC,\r\n            TextureFormat.RGB_ATITC,\r\n            TextureFormat.RGBA_ETC1,\r\n            TextureFormat.RGB_ETC1,\r\n            TextureFormat.RGBA_DXT1,\r\n            TextureFormat.RGB_DXT1,\r\n            TextureFormat.RGBA,\r\n            TextureFormat.RGB];\r\n\r\n            var textureFormats:Array<TextureFormat> = options._textureFormats.length == 0 ? defaultTextureFormats : options._textureFormats;\r\n\r\n            var textureFormatIt = Lambda.find(textureFormats, function(textureFormat) {\r\n                return Lambda.has(availableTextureFormats, textureFormat);\r\n            });\r\n\r\n            if (textureFormatIt != null) {\r\n                return textureFormatIt;\r\n            }\r\n\r\n            if (Lambda.has(textureFormats, TextureFormat.RGB) && Lambda.has(availableTextureFormats, TextureFormat.RGBA)) {\r\n                return TextureFormat.RGBA;\r\n            }\r\n\r\n            if (Lambda.has(textureFormats, TextureFormat.RGBA) && Lambda.has(availableTextureFormats, TextureFormat.RGB)) {\r\n                return TextureFormat.RGB;\r\n            }\r\n\r\n            var errorMessage = \"No desired texture format available\";\r\n            throw (errorMessage);\r\n        };\r\n\r\n        if (_material == null) {\r\n            _material = _defaultMaterial;\r\n        }\r\n\r\n        if (_attributeFunction == null) {\r\n            _attributeFunction = function(node, key, value) {\r\n            };\r\n        }\r\n\r\n        _parserFunction = null;\r\n\r\n        if (_preventLoadingFunction == null) {\r\n            _preventLoadingFunction = function(filename) {\r\n                return false;\r\n            };\r\n        }\r\n    }\r\n\r\n    private function resetNotInheritedValues() {\r\n        seekingOffset = (0);\r\n        seekedLength = (0);\r\n    }\r\n\r\n    private function defaultProtocolFunction(filename:String) {\r\n        var protocol = \"\";\r\n        var index = 0;\r\n        for (i in 0...filename.length) {\r\n            if (i < filename.length - 2 && filename.charAt(i) == ':' && filename.charAt(i + 1) == '/' && filename.charAt(i + 2) == '/') {\r\n                break;\r\n            }\r\n            protocol += filename.charAt(i);\r\n            index = i;\r\n        }\r\n        if (index != filename.length) {\r\n            var loader = getProtocol(protocol);\r\n\r\n            if (loader != null) {\r\n                return loader;\r\n            }\r\n        }\r\n        return getProtocol(\"file\");\r\n    }\r\n\r\n#if MINKO_PLATFORM & MINKO_PLATFORM_HTML5\r\n\t\t\tprivate bool testUserAgentPlatform(string platform)\r\n\t\t\t{\r\n\t\t\t\tstring script = \"navigator.userAgent.indexOf(\\\"\" + platform + \"\\\") < 0 ? 0 : 1\";\r\n\r\n\t\t\t\treturn emscripten_run_script_int(script) == 1;\r\n\t\t\t}\r\n#end\r\n\r\n\r\n}\r\n","package minko.file;\r\nimport minko.math.Rect;\r\nimport minko.utils.MathUtil;\r\nimport minko.file.MaxRectPacker.AtlasBuilder;\r\nimport haxe.io.Bytes;\r\nimport minko.render.AbstractTexture;\r\nimport minko.render.TextureFormat;\r\nimport minko.utils.WebNodeTools;\r\n@:expose(\"minko.file.PNGParser\")\r\nclass PNGParser extends AbstractParser {\r\n\r\n    override public function parse(filename:String, resolvedFilename:String, options:Options, data:Bytes, assetLibrary:AssetLibrary) {\r\n\r\n        WebNodeTools.loadFromBytes(\"png\", data, function(pd:PixelData) {\r\n            pd.bytesPerPixel =  4 ;\r\n            __parse(filename, resolvedFilename, options, pd, assetLibrary);\r\n        });\r\n    }\r\n\r\n    public function __parse(filename:String, resolvedFilename:String, options:Options, data:PixelData, assetLibrary:AssetLibrary) {\r\n        var bmpData:Bytes = data.pixels;\r\n        var width = data.width;\r\n        var height = data.height;\r\n\r\n        var texture:AbstractTexture = null;\r\n\r\n        if (options.isCubeTexture) {\r\n            var parser:MipMapChainParser = new MipMapChainParser();\r\n//parseMipMaps has some error\r\n            var cubeTexture = parser.parseCubeTexture(\r\n                options.context,\r\n                width,\r\n                height,\r\n                bmpData,\r\n                options.parseMipMaps,\r\n                (options.parseMipMaps || options.generateMipmaps)&& !options.fixMipMaps,\r\n                options.resizeSmoothly,\r\n                TextureFormat.RGBA,\r\n                filename\r\n            );\r\n\r\n            cubeTexture = cast(options.textureFunction(filename, cubeTexture));\r\n\r\n            assetLibrary.setCubeTexture(filename, cubeTexture);\r\n            texture = cubeTexture;\r\n        }\r\n        else if (options.isRectangleTexture) {\r\n            // FIXME: handle rectangle textures\r\n        }\r\n        else {\r\n            var parser:MipMapChainParser = new MipMapChainParser();\r\n\r\n            var texture2d = parser.parseTexture(\r\n                options.context,\r\n                width,\r\n                height,\r\n                bmpData,\r\n                options.parseMipMaps,\r\n                (options.parseMipMaps || options.generateMipmaps)&& !options.fixMipMaps,\r\n                options.resizeSmoothly,\r\n                TextureFormat.RGBA,\r\n                filename\r\n            );\r\n\r\n            texture2d = cast(options.textureFunction(filename, texture2d));\r\n\r\n            texture = texture2d;\r\n            assetLibrary.setTexture(filename, texture2d);\r\n        }\r\n        trace(\"PNGParser\" + filename);\r\n        texture.upload();\r\n\r\n        if (options.disposeTextureAfterLoading)\r\n            texture.disposeData();\r\n\r\n        complete.execute(this);\r\n    }\r\n}\r\n","package minko.file;\r\nimport minko.math.Rect;\r\nimport glm.Vec2;\r\nimport haxe.io.Bytes;\r\n@:expose(\"minko.data.PixelData\")\r\nclass PixelData  {\r\n    public var pixels:Bytes;\r\n    public var width:Int;\r\n    public var height:Int;\r\n    public var bytesPerPixel:Int;\r\n    public function new(w:Int,h:Int,p:Bytes):Void {\r\n        width=w;\r\n        height=h;\r\n        pixels=p;\r\n    }\r\n\r\n\r\n    public function copyPixels(sourceBitmapData:PixelData, sourceRect:Rect  , destPoint:Vec2 ):Void {\r\n        for(y in 0...Math.floor(sourceRect.height)){\r\n            for(x in 0...Math.floor(sourceRect.width)){\r\n                var xy1 = Math.floor(( (sourceRect.x +x) + (y +sourceRect.y) *  sourceBitmapData.width) * bytesPerPixel);\r\n                var xy2 = Math.floor(( (destPoint.x +x) + (y +destPoint.y) *  width) * bytesPerPixel);\r\n                for (i in 0... bytesPerPixel) {\r\n                    pixels.set(xy2 ++, sourceBitmapData.pixels.get(xy1++));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","package minko.geometry;\r\nimport glm.Mat4;\r\nimport minko.scene.Node;\r\n@:expose(\"minko.geometry.Bone\")\r\nclass Bone {\r\n\r\n    private var _node:Node;\r\n    private var _offsetMatrix:Mat4;\r\n    private var _vertexIds:Array<Int>;\r\n    private var _vertexWeights:Array<Float>;\r\n\r\n    public static function create(node, offsetMatrix, vertexIds, vertexWeights) {\r\n        return new Bone(node, offsetMatrix, vertexIds, vertexWeights);\r\n    }\r\n    public var node(get, null):Node;\r\n\r\n    function get_node() {\r\n        return _node;\r\n    }\r\n\r\n    public var offsetMatrix(get, null):Mat4;\r\n\r\n    function get_offsetMatrix() {\r\n        return _offsetMatrix;\r\n    }\r\n\r\n    public var vertexIds(get, null):Array<Int>;\r\n\r\n    function get_vertexIds() {\r\n        return _vertexIds;\r\n    }\r\n\r\n    public var vertexWeights(get, null):Array<Float>;\r\n\r\n    function get_vertexWeights() {\r\n        return _vertexWeights;\r\n    }\r\n\r\n    public function new(node:Node, offsetMatrix:Mat4, vertexIds:Array<Int>, vertexWeights:Array<Float>) {\r\n        this._node = node;\r\n        this._offsetMatrix = offsetMatrix;\r\n        this._vertexIds = (vertexIds);\r\n        this._vertexWeights = (vertexWeights);\r\n        if (_vertexIds.length != _vertexWeights.length) {\r\n            throw (\"A bone's arrays of vertex indices and vertex weights must have the same size.\");\r\n        }\r\n    }\r\n\r\n}\r\n","package minko.geometry;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.IndexBuffer;\r\nimport minko.render.VertexBuffer;\r\n@:expose(\"minko.geometry.CubeGeometry\")\r\nclass CubeGeometry extends Geometry {\r\n    public static function create(context:AbstractContext) {\r\n        var geom = new CubeGeometry();\r\n\r\n        geom.initialize(context);\r\n\r\n        return geom;\r\n    }\r\n\r\n\r\n    function initialize(context:AbstractContext) {\r\n        var xyzData:Array<Float> = [0.5, 0.5, -0.5, 0.0, 1.0, 0.0, 1.0, 0.0,\r\n        -0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0,\r\n        0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 1.0, 1.0,\r\n        0.5, 0.5, -0.5, 0.0, 1.0, 0.0, 1.0, 0.0, -0.5, 0.5, -0.5, 0.0, 1.0, 0.0, 0.0, 0.0, -0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, -0.5, -0.5, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, -0.5, -0.5, 0.0, -1.0, 0.0, 1.0, 1.0, 0.5, -0.5, 0.5, 0.0, -1.0, 0.0, 1.0, 0.0, -0.5, -0.5, -0.5, 0.0, -1.0, 0.0, 0.0, 1.0, 0.5, -0.5, -0.5, 0.0, -1.0, 0.0, 1.0, 1.0, -0.5, -0.5, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, -0.5, -0.5, 0.0, 0.0, -1.0, 0.0, 1.0, -0.5, 0.5, -0.5, 0.0, 0.0, -1.0, 1.0, 0.0, 0.5, 0.5, -0.5, 0.0, 0.0, -1.0, 0.0, 0.0, -0.5, 0.5, -0.5, 0.0, 0.0, -1.0, 1.0, 0.0, 0.5, -0.5, -0.5, 0.0, 0.0, -1.0, 0.0, 1.0, -0.5, -0.5, -0.5, 0.0, 0.0, -1.0, 1.0, 1.0, -0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 0.0, 0.0, -0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 0.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.0, -0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 0.0, 1.0, 0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.0, -0.5, -0.5, 0.5, -1.0, 0.0, 0.0, 1.0, 1.0, -0.5, 0.5, -0.5, -1.0, 0.0, 0.0, 0.0, 0.0, -0.5, -0.5, -0.5, -1.0, 0.0, 0.0, 0.0, 1.0, -0.5, 0.5, -0.5, -1.0, 0.0, 0.0, 0.0, 0.0, -0.5, -0.5, 0.5, -1.0, 0.0, 0.0, 1.0, 1.0, -0.5, 0.5, 0.5, -1.0, 0.0, 0.0, 1.0, 0.0, 0.5, -0.5, -0.5, 1.0, 0.0, 0.0, 1.0, 1.0, 0.5, 0.5, -0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.5, -0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 1.0, 0.5, -0.5, -0.5, 1.0, 0.0, 0.0, 1.0, 1.0];\r\n\r\n        var i:Array<Int> = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35];\r\n\r\n        var vertexBuffer:VertexBuffer = VertexBuffer.createbyData(context, xyzData);\r\n\r\n        vertexBuffer.addAttribute(\"position\", 3, 0);\r\n        vertexBuffer.addAttribute(\"normal\", 3, 3);\r\n        vertexBuffer.addAttribute(\"uv\", 2, 6);\r\n        addVertexBuffer(vertexBuffer);\r\n\r\n        indices = (IndexBuffer.createbyData(context, i));\r\n\r\n        computeCenterPosition();\r\n    }\r\n\r\n    public function new() {\r\n        super(\"cube\");\r\n    }\r\n}\r\n","package minko.geometry;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.IndexBuffer;\r\nimport minko.render.VertexBuffer;\r\n@:expose(\"minko.geometry.QuadGeometry\")\r\nclass QuadGeometry extends Geometry {\r\n    private var _numColumns:Int;\r\n    private var _numRows:Int;\r\n    private var _width:Float;\r\n    private var _height:Float;\r\n\r\n    public static function create(context:AbstractContext, numColumns = 1, numRows = 1, width = 1.0, height = 1.0):QuadGeometry {\r\n        var geom = new QuadGeometry(numColumns, numRows, width, height);\r\n\r\n        geom.initialize(context);\r\n\r\n        return geom;\r\n    }\r\n\r\n    public function new(numColumns = 1, numRows = 1, width = 1.0, height = 1.0) {\r\n        super(\"quad_\" + (numColumns) + \"x\" + (numRows));\r\n        this._numColumns = numColumns;\r\n        this._numRows = numRows;\r\n        this._width = width;\r\n        this._height = height;\r\n    }\r\n\r\n    private function initialize(context:AbstractContext) {\r\n        var vertexData:Array<Float> = [];\r\n        var indicesData:Array<Int> = [];\r\n\r\n        var y = 0;\r\n        while (y <= _numRows) {\r\n            var x = 0;\r\n            while (x <= _numColumns) {\r\n                vertexData.push((x / _numColumns - 0.5) * _width);\r\n                vertexData.push((y / _numRows - 0.5) * _height);\r\n                vertexData.push(0.0);\r\n                vertexData.push(0.0);\r\n                vertexData.push(0.0);\r\n                vertexData.push(1.0);\r\n                vertexData.push(x / _numColumns);\r\n                vertexData.push(1.0 - y / _numRows);\r\n                x++;\r\n            }\r\n            y++;\r\n        }\r\n\r\n        for (y in 0..._numRows) {\r\n            for (x in 0... _numColumns) {\r\n                indicesData.push(x + (_numColumns + 1) * y);\r\n                indicesData.push(x + 1 + y * (_numColumns + 1));\r\n                indicesData.push((y + 1) * (_numColumns + 1) + x);\r\n                indicesData.push(x + 1 + y * (_numColumns + 1));\r\n                indicesData.push((y + 1) * (_numColumns + 1) + x + 1);\r\n                indicesData.push((y + 1) * (_numColumns + 1) + x);\r\n            }\r\n        }\r\n\r\n        var vertexBuffer:VertexBuffer = VertexBuffer.createbyData(context, vertexData);\r\n        var indexBuffer:IndexBuffer = IndexBuffer.createbyData(context, indicesData);\r\n\r\n        vertexBuffer.addAttribute(\"position\", 3, 0);\r\n        vertexBuffer.addAttribute(\"normal\", 3, 3);\r\n        vertexBuffer.addAttribute(\"uv\", 2, 6);\r\n        addVertexBuffer(vertexBuffer);\r\n\r\n        indices = (indexBuffer);\r\n\r\n        computeCenterPosition();\r\n    }\r\n\r\n}\r\n","package minko.geometry;\r\nimport glm.Mat4;\r\n@:expose(\"minko.geometry.Skin\")\r\nclass Skin {\r\n    private var _numBones:Int;\r\n    private var _bones:Array<Bone>;\r\n    private var _duration:Int; // in milliseconds\r\n    private var _timeFactor:Float;\r\n    private var _boneMatricesPerFrame:Array<Array<Mat4>> ;\r\n    private var _boneNormalMatricesPerFrame:Array<Array<Mat4>> ;\r\n    private var _maxNumVertexBones:Int;\r\n    private var _numVertexBones:Array<Int>; // size = #vertices\r\n    private var _vertexBones:Array<Int>; // size = #vertices * #bones\r\n    private var _vertexBoneWeights:Array<Float>; // size = #vertices * #bones\r\n    public static function create(numBones, duration, numFrames) {\r\n        return new Skin(numBones, duration, numFrames);\r\n    }\r\n\r\n    public function clone() {\r\n        var skin = new Skin().copyFrom(this);\r\n\r\n        return skin;\r\n    }\r\n\r\n    public var numBones(get, null):Int;\r\n\r\n    function get_numBones() {\r\n        return _numBones;\r\n    }\r\n    public var maxNumVertexBones(get, null):Int;\r\n\r\n    function get_maxNumVertexBones() {\r\n        return _maxNumVertexBones;\r\n    }\r\n    public var bones(get, set):Array<Bone>;\r\n\r\n    function get_bones() {\r\n        return _bones;\r\n    }\r\n\r\n    function set_bones(v) {\r\n        _bones = (v);\r\n        return v;\r\n    }\r\n\r\n    public function getBone(boneId) {\r\n        return _bones[boneId];\r\n    }\r\n\r\n    public function setBone(boneId, value) {\r\n        _bones[boneId] = value;\r\n    }\r\n\r\n    public var duration(get, null):Int;\r\n\r\n    function get_duration() {\r\n        return _duration;\r\n    }\r\n\r\n    public function getFrameId(time) {\r\n        var frameId = time * _timeFactor;\r\n\r\n        return Math.floor(Math.min(frameId, numFrames - 1));\r\n    }\r\n\r\n    public var numFrames(get, null):Int;\r\n\r\n    function get_numFrames() {\r\n        return _boneMatricesPerFrame.length;\r\n    }\r\n    public var boneMatricesPerFrame(get, set):Array<Array<Mat4>>;\r\n\r\n    public function set_boneMatricesPerFrame(v:Array<Array<Mat4>>) {\r\n        _boneMatricesPerFrame = (v);\r\n        for(frameId in 0..._boneMatricesPerFrame.length){\r\n            var bones=v[frameId];\r\n            for(boneId in 0...bones.length){\r\n                var value=bones[boneId];\r\n                var normalMatrix = new Mat4();\r\n                Mat4.invert(value,normalMatrix);\r\n                Mat4.transpose(normalMatrix, normalMatrix);\r\n                setNormalMatrix(frameId, boneId, normalMatrix);\r\n            }\r\n        }\r\n        return v;\r\n    }\r\n\r\n    public function get_boneMatricesPerFrame() {\r\n        return _boneMatricesPerFrame;\r\n    }\r\n\r\n\r\n    public function getNormalMatrices(frameId) {\r\n        return _boneNormalMatricesPerFrame[frameId];\r\n    }\r\n\r\n    public function setNormalMatrix(frameId, boneId, value:Mat4) {\r\n#if DEBUG_SKINNING\r\n\t\t\t\tDebug.Assert(frameId < numFrames() && boneId < numBones());\r\n#end\r\n\r\n        _boneNormalMatricesPerFrame[frameId][boneId] = value;\r\n    }\r\n\r\n    public function getMatrices(frameId) {\r\n        return _boneMatricesPerFrame[frameId];\r\n    }\r\n\r\n    public function setMatrix(frameId, boneId, value:Mat4) {\r\n#if DEBUG_SKINNING\r\n\t\t\t\tDebug.Assert(frameId < numFrames() && boneId < numBones());\r\n#end\r\n\r\n        _boneMatricesPerFrame[frameId][boneId] = value;\r\n\r\n        var normalMatrix = new  Mat4();\r\n        Mat4.invert(value,normalMatrix);\r\n        Mat4.transpose(normalMatrix, normalMatrix);\r\n        setNormalMatrix(frameId, boneId, normalMatrix);\r\n    }\r\n\r\n    public var numVertices(get, null):Int;\r\n\r\n    function get_numVertices() {\r\n        return _numVertexBones.length;\r\n    }\r\n\r\n    public function numVertexBones(vertexId) {\r\n#if DEBUG_SKINNING\r\n\t\t\t\tDebug.Assert(vertexId < numVertices());\r\n#end\r\n\r\n        return _numVertexBones[vertexId];\r\n    }\r\n\r\n    public function vertexBoneData(vertexId:Int, j:Int, boneId:Int, boneWeight:Float):minko.Tuple<Int,Float> {\r\n        var index = vertexArraysIndex(vertexId, j);\r\n\r\n        boneId = _vertexBones[index];\r\n        boneWeight = _vertexBoneWeights[index];\r\n        return new minko.Tuple<Int,Float>(boneId,boneWeight);\r\n    }\r\n\r\n    public function vertexBoneId(vertexId, j) {\r\n        return _vertexBones[vertexArraysIndex(vertexId, j)];\r\n    }\r\n\r\n    public function vertexBoneWeight(vertexId, j) {\r\n        return _vertexBoneWeights[vertexArraysIndex(vertexId, j)];\r\n    }\r\n\r\n    public function reorganizeByVertices() {\r\n        _numVertexBones = null;\r\n        _vertexBones = null;\r\n        _vertexBoneWeights = null;\r\n\r\n        var lastId = lastVertexId;\r\n        var numVertices = lastId + 1;\r\n        var numBones = _bones.length;\r\n\r\n        _numVertexBones = [for (i in 0...numVertices) 0];\r\n        _vertexBones = [for (i in 0...numVertices * numBones) 0];\r\n        _vertexBoneWeights = [for (i in 0...numVertices * numBones) 0.0];\r\n\r\n        for (boneId in 0...numBones) {\r\n            var bone:Bone = _bones[boneId];\r\n\r\n            var vertexIds = bone.vertexIds;\r\n            var vertexWeights = bone.vertexWeights;\r\n\r\n            for (i in 0...vertexIds.length) {\r\n                if (vertexWeights[i] > 0.0) {\r\n                    var vId = vertexIds[i];\r\n#if DEBUG_SKINNING\r\n\t\t\t\t\t\t\tDebug.Assert(vId < numVertices);\r\n#end\r\n\r\n                    var j = _numVertexBones[vId];\r\n\r\n                    _numVertexBones[vId]=_numVertexBones[vId]+1;\r\n\r\n                    var index = vertexArraysIndex(vId, j);\r\n\r\n                    _vertexBones[index] = boneId;\r\n                    _vertexBoneWeights[index] = vertexWeights[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        _maxNumVertexBones = 0;\r\n        for (vId in 0... numVertices) {\r\n            _maxNumVertexBones = Math.floor(Math.max(_maxNumVertexBones, _numVertexBones[vId]));\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public function disposeBones() {\r\n        _bones = null;\r\n\r\n        return this;\r\n    }\r\n\r\n    public function new(numBones = 0, duration = 0, numFrames = 0) {\r\n        this._bones = [for (i in 0...numBones) null];\r\n        this._numBones = numBones;\r\n        this._duration = duration;\r\n        this._timeFactor = duration > 0 ? numFrames / duration : 0.0 ;\r\n        this._boneMatricesPerFrame = [for (i in 0...numFrames)[for (j in 0...numBones) Mat4.identity(new Mat4())] ];\r\n        this._boneNormalMatricesPerFrame= [for (i in 0...numFrames)[for (j in 0...numBones) Mat4.identity(new Mat4())] ];\r\n        this._maxNumVertexBones = 0;\r\n        this._numVertexBones = [];\r\n        this._vertexBones = [];\r\n        this._vertexBoneWeights = [];\r\n    }\r\n\r\n    public function copyFrom(skin:Skin) {\r\n        this._bones = [];\r\n        this._numBones = skin._numBones;\r\n        this._duration = skin._duration;\r\n        this._timeFactor = skin._timeFactor;\r\n        this._boneMatricesPerFrame = (skin._boneMatricesPerFrame.concat([]));\r\n        this._boneNormalMatricesPerFrame= (skin._boneMatricesPerFrame.concat([]));\r\n        this._maxNumVertexBones = skin._maxNumVertexBones;\r\n        this._numVertexBones = (skin._numVertexBones.concat([]));\r\n        this._vertexBones = (skin._vertexBones.concat([]));\r\n        this._vertexBoneWeights = (skin._vertexBoneWeights.concat([]));\r\n        return this;\r\n    }\r\n\r\n    public var lastVertexId(get, null):Int;\r\n\r\n    function get_lastVertexId() {\r\n        var lastId = 0;\r\n        for (boneId in 0... _bones.length) {\r\n            var vertexId = _bones[boneId].vertexIds ;\r\n            for (i in 0...vertexId.length) {\r\n                lastId = Math.floor(Math.max(lastId, vertexId[i]));\r\n            }\r\n        }\r\n\r\n        return lastId;\r\n    }\r\n\r\n    private function vertexArraysIndex(vertexId, j) :Int{\r\n#if DEBUG_SKINNING\r\n\t\t\t\tDebug.Assert(vertexId < numVertices() && j < numVertexBones(vertexId));\r\n#end\r\n\r\n        return j + _numBones * vertexId;\r\n    }\r\n\r\n}\r\n","package minko.geometry;\r\nimport minko.render.AbstractContext;\r\nimport minko.render.IndexBuffer;\r\nimport minko.render.VertexBuffer;\r\n@:expose(\"minko.geometry.SphereGeometry\")\r\nclass SphereGeometry extends Geometry {\r\n    public static function create(context:AbstractContext, numParallels = 10, numMeridians = 0, withNormals = true) {\r\n        numMeridians = numMeridians != 0 ? numMeridians : numParallels;\r\n\r\n        var geom = new SphereGeometry();\r\n\r\n        geom.initializeVertices(context, numParallels, numMeridians, withNormals);\r\n        geom.initializeIndices(context, numParallels, numMeridians);\r\n\r\n        return geom;\r\n    }\r\n\r\n\r\n    private function initializeVertices(context:AbstractContext, numParallels, numMeridians, withNormals) {\r\n        var numVertices = (numParallels - 2) * (numMeridians + 1) + 2;\r\n        var c = 0;\r\n        var k = 0;\r\n        var data:Array<Float> = [];\r\n\r\n        for (j in 1... numParallels - 1) {\r\n            var i = 0;\r\n            while (i < numMeridians + 1) {\r\n                var theta = j / (numParallels - 1.0) * Math.PI;\r\n                var phi = i / numMeridians * 2.0 * Math.PI;\r\n                var x = Math.sin(theta) * Math.cos(phi) * .5;\r\n                var y = Math.cos(theta) * .5;\r\n                var z = -Math.sin(theta) * Math.sin(phi) * .5;\r\n\r\n                // x, y, z\r\n                data.push(x);\r\n                data.push(y);\r\n                data.push(z);\r\n\r\n                // u, v\r\n                data.push(1.0 - i / numMeridians);\r\n                data.push(j / (numParallels - 1.0));\r\n\r\n                // normal\r\n                if (withNormals) {\r\n                    data.push(x * 2.0);\r\n                    data.push(y * 2.0);\r\n                    data.push(z * 2.0);\r\n                }\r\n\r\n                i++;\r\n                c += 3;\r\n                k += 2;\r\n            }\r\n        }\r\n\r\n        // north pole\r\n        data.push(0.0);\r\n        data.push(.5);\r\n        data.push(0.0);\r\n\r\n        data.push(.5);\r\n        data.push(0.0);\r\n\r\n        if (withNormals) {\r\n            data.push(0.0);\r\n            data.push(1.0);\r\n            data.push(0.0);\r\n        }\r\n\r\n        // south pole\r\n        data.push(0.0);\r\n        data.push(-.5);\r\n        data.push(0.0);\r\n\r\n        data.push(.5);\r\n        data.push(1.0);\r\n\r\n        if (withNormals) {\r\n            data.push(0.0);\r\n            data.push(-1.0);\r\n            data.push(0.0);\r\n        }\r\n\r\n        var stream:VertexBuffer = VertexBuffer.createbyData(context, data);\r\n\r\n        stream.addAttribute(\"position\", 3, 0);\r\n        stream.addAttribute(\"uv\", 2, 3);\r\n        if (withNormals) {\r\n            stream.addAttribute(\"normal\", 3, 5);\r\n        }\r\n\r\n        addVertexBuffer(stream);\r\n\r\n        computeCenterPosition();\r\n    }\r\n\r\n    private function initializeIndices(context:AbstractContext, numParallels, numMeridians) {\r\n        //std::vector<unsigned short>    data(numParallels * numMeridians * 6);\r\n        var data:Array<Int> = [];//((numParallels - 2) * numMeridians * 6);\r\n        var c = 0;\r\n\r\n        numMeridians++;\r\n        for (j in 0...numParallels - 3) {\r\n            for (i in 0...numMeridians - 1) {\r\n                data[c++] = j * numMeridians + i;\r\n                data[c++] = (j + 1) * numMeridians + i + 1;\r\n                data[c++] = j * numMeridians + i + 1;\r\n\r\n                data[c++] = j * numMeridians + i;\r\n                data[c++] = (j + 1) * numMeridians + i;\r\n                data[c++] = (j + 1) * numMeridians + i + 1;\r\n            }\r\n        }\r\n\r\n        for (i in 0... numMeridians - 1) {\r\n            data[c++] = (numParallels - 2) * numMeridians;\r\n            data[c++] = i;\r\n            data[c++] = i + 1;\r\n\r\n\r\n            data[c++] = (numParallels - 2) * numMeridians + 1;\r\n            data[c++] = (numParallels - 3) * numMeridians + i + 1;\r\n            data[c++] = (numParallels - 3) * numMeridians + i;\r\n        }\r\n\r\n        indices = (IndexBuffer.createbyData(context, data));\r\n    }\r\n\r\n    public function new() {\r\n        super(\"sphere\");\r\n    }\r\n}\r\n","package minko.input;\r\n\r\nimport minko.signal.Signal3;\r\nimport minko.signal.Signal4;\r\n@:expose(\"minko.input.Button\")\r\n@:enum abstract Button(Int) from Int to Int\r\n{\r\n    var Nothing = -1;\r\n    var DPadUp = 0;\r\n    var DPadDown = 1;\r\n    var DPadLeft = 2;\r\n    var DPadRight = 3;\r\n    var Start = 4;\r\n    var Select = 5;\r\n    var L3 = 6;\r\n    var R3 = 7;\r\n    var LB = 8;\r\n    var RB = 9;\r\n    var A = 10;\r\n    var B = 11;\r\n    var X = 12;\r\n    var Y = 13;\r\n    var Home = 14;\r\n    var LT = 15; // Not a button (axis)\r\n    var RT = 16;\r\n    // Not a button (axis)\r\n}\r\n@:expose(\"minko.input.Joystick\")\r\nclass Joystick {\r\n    private var _canvas:AbstractCanvas;\r\n\r\n    private var _joystickAxisMotion:Signal4<Joystick, Int, Int, Int> ;\r\n    private var _joystickHatMotion:Signal4<Joystick, Int, Int, Int> ;\r\n    private var _joystickButtonDown:Signal3<Joystick, Int, Int> ;\r\n    private var _joystickButtonUp:Signal3<Joystick, Int, Int> ;\r\n\r\n    private var _joystickId:Int;\r\n    public var joystickId(get, null):Int;\r\n\r\n    function get_joystickId() {\r\n        return _joystickId;\r\n    }\r\n\r\n    public var joystickAxisMotion(get, null):Signal4<Joystick, Int, Int, Int> ;\r\n\r\n    function get_joystickAxisMotion() {\r\n        return _joystickAxisMotion;\r\n    }\r\n\r\n    public var joystickHatMotion(get, null):Signal4<Joystick, Int, Int, Int> ;\r\n\r\n    function get_joystickHatMotion() {\r\n        return _joystickHatMotion;\r\n    }\r\n\r\n\r\n    public var joystickButtonDown(get, null):Signal3<Joystick, Int, Int > ;\r\n\r\n    function get_joystickButtonDown() {\r\n        return _joystickButtonDown;\r\n    }\r\n\r\n    public var joystickButtonUp(get, null):Signal3<Joystick, Int, Int > ;\r\n\r\n    function get_joystickButtonUp() {\r\n        return _joystickButtonUp;\r\n    }\r\n\r\n    public function new(canvas:AbstractCanvas, joystickId:Int) {\r\n\r\n        this._canvas = canvas;\r\n        this._joystickAxisMotion = new Signal4<Joystick, Int, Int, Int>();\r\n        this._joystickHatMotion = new Signal4<Joystick, Int, Int, Int>();\r\n        this._joystickButtonUp = new Signal3<Joystick, Int, Int >();\r\n        this._joystickButtonDown = new Signal3<Joystick, Int, Int >();\r\n        this._joystickId = joystickId;\r\n    }\r\n\r\n}\r\n","package minko.input;\r\nimport haxe.ds.IntMap;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.input.KeyType\")\r\n@:enum abstract KeyType(Int) from Int to Int {\r\n    var TKeyCode = 0;\r\n    var TScanCode = 1;\r\n}\r\n@:expose(\"minko.input.Key\")\r\n@:enum abstract Key(Int) from Int to Int {\r\n// IDs are the same than the official DOM codes:\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\r\n\r\n    var CANCEL = 3; // Cancel key.\r\n    var HELP = 6; // Help key.\r\n    var BACK_SPACE = 8; // Backspace key.\r\n    var TAB = 9; // Tab key.\r\n    var CLEAR = 12; // \"5\" key on Numpad when NumLock is unlocked. Or on Mac; clear key which is positioned at NumLock key.\r\n    var RETURN = 13; // Return/enter key on the main keyboard.\r\n    var ENTER = 14; // Reserved; but not used.  </code><code>Obsolete since Gecko 30 (Dropped; see bug&nbsp;969247.)\r\n    var SHIFT = 16; // Shift key.\r\n    var CONTROL = 17; // Control key.\r\n    var ALT = 18; // Alt (Option on Mac) key.\r\n    var PAUSE = 19; // Pause key.\r\n    var CAPS_LOCK = 20; // Caps lock.\r\n    var KANA = 21; // Linux support for this keycode was added in Gecko 4.0.\r\n    //HANGUL = 21; // Linux support for this keycode was added in Gecko 4.0.\r\n    var EISU = 22; // \"英数\" key on Japanese Mac keyboard.\r\n    var JUNJA = 23; // Linux support for this keycode was added in Gecko 4.0.\r\n    var FINAL = 24; // Linux support for this keycode was added in Gecko 4.0.\r\n    //HANJA = 25; // Linux support for this keycode was added in Gecko 4.0.\r\n    var KANJI = 25; // Linux support for this keycode was added in Gecko 4.0.\r\n    var ESCAPE = 27; // Escape key.\r\n    var CONVERT = 28; // Linux support for this keycode was added in Gecko 4.0.\r\n    var NONCONVERT = 29; // Linux support for this keycode was added in Gecko 4.0.\r\n    var ACCEPT = 30; // Linux support for this keycode was added in Gecko 4.0.\r\n    var MODECHANGE = 31; // Linux support for this keycode was added in Gecko 4.0.\r\n    var SPACE = 32; // Space bar.\r\n    var PAGE_UP = 33; // Page Up key.\r\n    var PAGE_DOWN = 34; // Page Down key.\r\n    var END = 35; // End key.\r\n    var HOME = 36; // Home key.\r\n    var LEFT = 37; // Left arrow.\r\n    var UP = 38; // Up arrow.\r\n    var RIGHT = 39; // Right arrow.\r\n    var DOWN = 40; // Down arrow.\r\n    var SELECT = 41; // Linux support for this keycode was added in Gecko 4.0.\r\n    var PRINT = 42; // Linux support for this keycode was added in Gecko 4.0.\r\n    var EXECUTE = 43; // Linux support for this keycode was added in Gecko 4.0.\r\n    var PRINTSCREEN = 44; // Print Screen key.\r\n    var INSERT = 45; // Ins(ert) key.\r\n    var DEL = 46; // Del(ete) key.\r\n    var _0 = 48; // \"0\" key in standard key location.\r\n    var _1 = 49; // \"1\" key in standard key location.\r\n    var _2 = 50; // \"2\" key in standard key location.\r\n    var _3 = 51; // \"3\" key in standard key location.\r\n    var _4 = 52; // \"4\" key in standard key location.\r\n    var _5 = 53; // \"5\" key in standard key location.\r\n    var _6 = 54; // \"6\" key in standard key location.\r\n    var _7 = 55; // \"7\" key in standard key location.\r\n    var _8 = 56; // \"8\" key in standard key location.\r\n    var _9 = 57; // \"9\" key in standard key location.\r\n    var COLON = 58; // Colon (\":\") key.\r\n    var SEMICOLON = 59; // Semicolon (\";\") key.\r\n    var LESS_THAN = 60; // Less-than (\"&lt;\") key.\r\n    var EQUALS = 61; // Equals (\"=\") key.\r\n    var GREATER_THAN = 62; // Greater-than (\"&gt;\") key.\r\n    var QUESTION_MARK = 63; // Question mark (\"?\") key.\r\n    var AT = 64; // Atmark (\"@\") key.\r\n    var A = 65; // \"A\" key.\r\n    var B = 66; // \"B\" key.\r\n    var C = 67; // \"C\" key.\r\n    var D = 68; // \"D\" key.\r\n    var E = 69; // \"E\" key.\r\n    var F = 70; // \"F\" key.\r\n    var G = 71; // \"G\" key.\r\n    var H = 72; // \"H\" key.\r\n    var I = 73; // \"I\" key.\r\n    var J = 74; // \"J\" key.\r\n    var K = 75; // \"K\" key.\r\n    var L = 76; // \"L\" key.\r\n    var M = 77; // \"M\" key.\r\n    var N = 78; // \"N\" key.\r\n    var O = 79; // \"O\" key.\r\n    var P = 80; // \"P\" key.\r\n    var Q = 81; // \"Q\" key.\r\n    var R = 82; // \"R\" key.\r\n    var S = 83; // \"S\" key.\r\n    var T = 84; // \"T\" key.\r\n    var U = 85; // \"U\" key.\r\n    var V = 86; // \"V\" key.\r\n    var W = 87; // \"W\" key.\r\n    var X = 88; // \"X\" key.\r\n    var Y = 89; // \"Y\" key.\r\n    var Z = 90; // \"Z\" key.\r\n    var WIN = 91; // Windows logo key on Windows. Or Super or Hyper key on Linux.\r\n    var CONTEXT_MENU = 93; // Opening context menu key.\r\n    var SLEEP = 95; // Linux support for this keycode was added in Gecko 4.0.\r\n    var NUMPAD0 = 96; // \"0\" on the numeric keypad.\r\n    var NUMPAD1 = 97; // \"1\" on the numeric keypad.\r\n    var NUMPAD2 = 98; // \"2\" on the numeric keypad.\r\n    var NUMPAD3 = 99; // \"3\" on the numeric keypad.\r\n    var NUMPAD4 = 100; // \"4\" on the numeric keypad.\r\n    var NUMPAD5 = 101; // \"5\" on the numeric keypad.\r\n    var NUMPAD6 = 102; // \"6\" on the numeric keypad.\r\n    var NUMPAD7 = 103; // \"7\" on the numeric keypad.\r\n    var NUMPAD8 = 104; // \"8\" on the numeric keypad.\r\n    var NUMPAD9 = 105; // \"9\" on the numeric keypad.\r\n    var MULTIPLY = 106; // \"*\" on the numeric keypad.\r\n    var ADD = 107; // \"+\" on the numeric keypad.\r\n    var SEPARATOR = 108; // &nbsp;\r\n    var SUBTRACT = 109; // \"-\" on the numeric keypad.\r\n    var DECIMAL = 110; // Decimal point on the numeric keypad.\r\n    var DIVIDE = 111; // \"/\" on the numeric keypad.\r\n    var F1 = 112; // F1 key.\r\n    var F2 = 113; // F2 key.\r\n    var F3 = 114; // F3 key.\r\n    var F4 = 115; // F4 key.\r\n    var F5 = 116; // F5 key.\r\n    var F6 = 117; // F6 key.\r\n    var F7 = 118; // F7 key.\r\n    var F8 = 119; // F8 key.\r\n    var F9 = 120; // F9 key.\r\n    var F10 = 121; // F10 key.\r\n    var F11 = 122; // F11 key.\r\n    var F12 = 123; // F12 key.\r\n    var F13 = 124; // F13 key.\r\n    var F14 = 125; // F14 key.\r\n    var F15 = 126; // F15 key.\r\n    var F16 = 127; // F16 key.\r\n    var F17 = 128; // F17 key.\r\n    var F18 = 129; // F18 key.\r\n    var F19 = 130; // F19 key.\r\n    var F20 = 131; // F20 key.\r\n    var F21 = 132; // F21 key.\r\n    var F22 = 133; // F22 key.\r\n    var F23 = 134; // F23 key.\r\n    var F24 = 135; // F24 key.\r\n    var NUM_LOCK = 144; // Num Lock key.\r\n    var SCROLL_LOCK = 145; // Scroll Lock key.\r\n    var WIN_OEM_FJ_JISHO = 146; // An OEM specific key on Windows. This was used for \"Dictionary\" key on Fujitsu OASYS.\r\n    var WIN_OEM_FJ_MASSHOU = 147; // An OEM specific key on Windows. This was used for \"Unregister word\" key on Fujitsu OASYS.\r\n    var WIN_OEM_FJ_TOUROKU = 148; // An OEM specific key on Windows. This was used for \"Register word\" key on Fujitsu OASYS.\r\n    var WIN_OEM_FJ_LOYA = 149; // An OEM specific key on Windows. This was used for \"Left OYAYUBI\" key on Fujitsu OASYS.\r\n    var WIN_OEM_FJ_ROYA = 150; // An OEM specific key on Windows. This was used for \"Right OYAYUBI\" key on Fujitsu OASYS.\r\n    var CIRCUMFLEX = 160; // Circumflex (\"^\") key.\r\n    var EXCLAMATION = 161; // Exclamation (\"!\") key.\r\n    var DOUBLE_QUOTE = 162; // Double quote (\"\"\") key.\r\n    var HASH = 163; // Hash (\"#\") key.\r\n    var DOLLAR = 164; // Dollar sign (\"_\") key.\r\n    var PERCENT = 165; // Percent (\"%\") key.\r\n    var AMPERSAND = 166; // Ampersand (\"&amp;\") key.\r\n    var UNDERSCORE = 167; // Underscore (\"_\") key.\r\n    var OPEN_PAREN = 168; // Open parenthesis (\"(\") key.\r\n    var CLOSE_PAREN = 169; // Close parenthesis (\")\") key.\r\n    var ASTERISK = 170; // Asterisk (\"*\") key.\r\n    var PLUS = 171; // Plus (\"+\") key.\r\n    var PIPE = 172; // Pipe (\"|\") key.\r\n    var HYPHEN_MINUS = 173; // Hyphen-US/docs/Minus (\"-\") key.\r\n    var OPEN_CURLY_BRACKET = 174; // Open curly bracket (\"{\") key.\r\n    var CLOSE_CURLY_BRACKET = 175; // Close curly bracket (\"}\") key.\r\n    var TILDE = 176; // Tilde (\"~\") key.\r\n    var VOLUME_MUTE = 181; // Audio mute key.\r\n    var VOLUME_DOWN = 182; // Audio volume down key\r\n    var VOLUME_UP = 183; // Audio volume up key\r\n    var COMMA = 188; // Comma (\";\") key.\r\n    var PERIOD = 190; // Period (\".\") key.\r\n    var SLASH = 191; // Slash (\"/\") key.\r\n    var BACK_QUOTE = 192; // Back tick (\"`\") key.\r\n    var OPEN_BRACKET = 219; // Open square bracket (\"[\") key.\r\n    var BACK_SLASH = 220; // Back slash (\"\\\") key.\r\n    var CLOSE_BRACKET = 221; // Close square bracket (\"]\") key.\r\n    var QUOTE = 222; // Quote (''') key.\r\n    var META = 224; // Meta key on Linux; Command key on Mac.\r\n    var ALTGR = 225; // AltGr key (Level 3 Shift key or Level 5 Shift key) on Linux.\r\n    var WIN_ICO_HELP = 227; // An OEM specific key on Windows. This is (was?) used for Olivetti ICO keyboard.\r\n    var WIN_ICO_00 = 228; // An OEM specific key on Windows. This is (was?) used for Olivetti ICO keyboard.\r\n    var WIN_ICO_CLEAR = 230; // An OEM specific key on Windows. This is (was?) used for Olivetti ICO keyboard.\r\n    var WIN_OEM_RESET = 233; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_JUMP = 234; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_PA1 = 235; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_PA2 = 236; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_PA3 = 237; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_WSCTRL = 238; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_CUSEL = 239; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_ATTN = 240; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_FINISH = 241; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_COPY = 242; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_AUTO = 243; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_ENLW = 244; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var WIN_OEM_BACKTAB = 245; // An OEM specific key on Windows. This was used for Nokia/Ericsson's device.\r\n    var ATTN = 246; // Attn (Attension) key of IBM midrange computers; e.g.; AS/400.\r\n    var CRSEL = 247; // CrSel (Cursor Selection) key of IBM 3270 keyboard layout.\r\n    var EXSEL = 248; // ExSel (Extend Selection) key of IBM 3270 keyboard layout.\r\n    var EREOF = 249; // Erase EOF key of IBM 3270 keyboard layout.\r\n    var PLAY = 250; // Play key of IBM 3270 keyboard layout.\r\n    var ZOOM = 251; // Zoom key.\r\n    var PA1 = 253; // PA1 key of IBM 3270 keyboard layout.\r\n    var WIN_OEM_CLEAR = 254; // Clear key; but we're not sure the meaning difference from DOM_VK_CLEAR.\r\n\r\n    // Additional keys (specific to Minko and for native support of some keys)\r\n    var CONTROL_RIGHT = 300; // Right control key\r\n    var SHIFT_RIGHT = 301;\r\n    // Right shift key\r\n}\r\n@:expose(\"minko.input.ScanCode\")\r\n@:enum abstract ScanCode(Int) from Int to Int {\r\n\r\n    var UNKNOWN = 0;\r\n\r\n    var A = 4;\r\n    var B = 5;\r\n    var C = 6;\r\n    var D = 7;\r\n    var E = 8;\r\n    var F = 9;\r\n    var G = 10;\r\n    var H = 11;\r\n    var I = 12;\r\n    var J = 13;\r\n    var K = 14;\r\n    var L = 15;\r\n    var M = 16;\r\n    var N = 17;\r\n    var O = 18;\r\n    var P = 19;\r\n    var Q = 20;\r\n    var R = 21;\r\n    var S = 22;\r\n    var T = 23;\r\n    var U = 24;\r\n    var V = 25;\r\n    var W = 26;\r\n    var X = 27;\r\n    var Y = 28;\r\n    var Z = 29;\r\n\r\n    var _1 = 30;\r\n    var _2 = 31;\r\n    var _3 = 32;\r\n    var _4 = 33;\r\n    var _5 = 34;\r\n    var _6 = 35;\r\n    var _7 = 36;\r\n    var _8 = 37;\r\n    var _9 = 38;\r\n    var _0 = 39;\r\n\r\n    var RETURN = 40;\r\n    var ESCAPE = 41;\r\n    var BACKSPACE = 42;\r\n    var TAB = 43;\r\n    var SPACE = 44;\r\n\r\n    var MINUS = 45;\r\n    var EQUALS = 46;\r\n    var LEFTBRACKET = 47;\r\n    var RIGHTBRACKET = 48;\r\n    var BACKSLASH = 49;\r\n    var NONUSHASH = 50;\r\n    var SEMICOLON = 51;\r\n    var APOSTROPHE = 52;\r\n    var GRAVE = 53;\r\n    var COMMA = 54;\r\n    var PERIOD = 55;\r\n    var SLASH = 56;\r\n\r\n    var CAPSLOCK = 57;\r\n\r\n    var F1 = 58;\r\n    var F2 = 59;\r\n    var F3 = 60;\r\n    var F4 = 61;\r\n    var F5 = 62;\r\n    var F6 = 63;\r\n    var F7 = 64;\r\n    var F8 = 65;\r\n    var F9 = 66;\r\n    var F10 = 67;\r\n    var F11 = 68;\r\n    var F12 = 69;\r\n\r\n    var PRINTSCREEN = 70;\r\n    var SCROLLLOCK = 71;\r\n    var PAUSE = 72;\r\n    var INSERT = 73;\r\n    var HOME = 74;\r\n    var PAGEUP = 75;\r\n    var DEL = 76;\r\n    var END = 77;\r\n    var PAGEDOWN = 78;\r\n    var RIGHT = 79;\r\n    var LEFT = 80;\r\n    var DOWN = 81;\r\n    var UP = 82;\r\n    var NUMLOCKCLEAR = 83;\r\n    var KP_DIVIDE = 84;\r\n    var KP_MULTIPLY = 85;\r\n    var KP_MINUS = 86;\r\n    var KP_PLUS = 87;\r\n    var KP_ENTER = 88;\r\n    var KP_1 = 89;\r\n    var KP_2 = 90;\r\n    var KP_3 = 91;\r\n    var KP_4 = 92;\r\n    var KP_5 = 93;\r\n    var KP_6 = 94;\r\n    var KP_7 = 95;\r\n    var KP_8 = 96;\r\n    var KP_9 = 97;\r\n    var KP_0 = 98;\r\n    var KP_PERIOD = 99;\r\n    var NONUSBACKSLASH = 100;\r\n    var APPLICATION = 101;\r\n    var POWER = 102;\r\n    var KP_EQUALS = 103;\r\n    var F13 = 104;\r\n    var F14 = 105;\r\n    var F15 = 106;\r\n    var F16 = 107;\r\n    var F17 = 108;\r\n    var F18 = 109;\r\n    var F19 = 110;\r\n    var F20 = 111;\r\n    var F21 = 112;\r\n    var F22 = 113;\r\n    var F23 = 114;\r\n    var F24 = 115;\r\n    var EXECUTE = 116;\r\n    var HELP = 117;\r\n    var MENU = 118;\r\n    var SELECT = 119;\r\n    var STOP = 120;\r\n    var AGAIN = 121;\r\n    var UNDO = 122;\r\n    var CUT = 123;\r\n    var COPY = 124;\r\n    var PASTE = 125;\r\n    var FIND = 126;\r\n    var MUTE = 127;\r\n    var VOLUMEUP = 128;\r\n    var VOLUMEDOWN = 129;\r\n    var KP_COMMA = 133;\r\n    var KP_EQUALSAS400 = 134;\r\n    var INTERNATIONAL1 = 135;\r\n    var INTERNATIONAL2 = 136;\r\n    var INTERNATIONAL3 = 137;\r\n    var INTERNATIONAL4 = 138;\r\n    var INTERNATIONAL5 = 139;\r\n    var INTERNATIONAL6 = 140;\r\n    var INTERNATIONAL7 = 141;\r\n    var INTERNATIONAL8 = 142;\r\n    var INTERNATIONAL9 = 143;\r\n    var LANG1 = 144;\r\n    var LANG2 = 145;\r\n    var LANG3 = 146;\r\n    var LANG4 = 147;\r\n    var LANG5 = 148;\r\n    var LANG6 = 149;\r\n    var LANG7 = 150;\r\n    var LANG8 = 151;\r\n    var LANG9 = 152;\r\n    var ALTERASE = 153;\r\n    var SYSREQ = 154;\r\n    var CANCEL = 155;\r\n    var CLEAR = 156;\r\n    var PRIOR = 157;\r\n    var RETURN2 = 158;\r\n    var SEPARATOR = 159;\r\n    //OUT = 160;\r\n    var OPER = 161;\r\n    var CLEARAGAIN = 162;\r\n    var CRSEL = 163;\r\n    var EXSEL = 164;\r\n    var KP_00 = 176;\r\n    var KP_000 = 177;\r\n    var THOUSANDSSEPARATOR = 178;\r\n    var DECIMALSEPARATOR = 179;\r\n    var CURRENCYUNIT = 180;\r\n    var CURRENCYSUBUNIT = 181;\r\n    var KP_LEFTPAREN = 182;\r\n    var KP_RIGHTPAREN = 183;\r\n    var KP_LEFTBRACE = 184;\r\n    var KP_RIGHTBRACE = 185;\r\n    var KP_TAB = 186;\r\n    var KP_BACKSPACE = 187;\r\n    var KP_A = 188;\r\n    var KP_B = 189;\r\n    var KP_C = 190;\r\n    var KP_D = 191;\r\n    var KP_E = 192;\r\n    var KP_F = 193;\r\n    var KP_XOR = 194;\r\n    var KP_POWER = 195;\r\n    var KP_PERCENT = 196;\r\n    var KP_LESS = 197;\r\n    var KP_GREATER = 198;\r\n    var KP_AMPERSAND = 199;\r\n    var KP_DBLAMPERSAND = 200;\r\n    var KP_VERTICALBAR = 201;\r\n    var KP_DBLVERTICALBAR = 202;\r\n    var KP_COLON = 203;\r\n    var KP_HASH = 204;\r\n    var KP_SPACE = 205;\r\n    var KP_AT = 206;\r\n    var KP_EXCLAM = 207;\r\n    var KP_MEMSTORE = 208;\r\n    var KP_MEMRECALL = 209;\r\n    var KP_MEMCLEAR = 210;\r\n    var KP_MEMADD = 211;\r\n    var KP_MEMSUBTRACT = 212;\r\n    var KP_MEMMULTIPLY = 213;\r\n    var KP_MEMDIVIDE = 214;\r\n    var KP_PLUSMINUS = 215;\r\n    var KP_CLEAR = 216;\r\n    var KP_CLEARENTRY = 217;\r\n    var KP_BINARY = 218;\r\n    var KP_OCTAL = 219;\r\n    var KP_DECIMAL = 220;\r\n    var KP_HEXADECIMAL = 221;\r\n\r\n    var LCTRL = 224;\r\n    var LSHIFT = 225;\r\n    var LALT = 226;\r\n    var LGUI = 227;\r\n    var RCTRL = 228;\r\n    var RSHIFT = 229;\r\n    var RALT = 230;\r\n    var RGUI = 231;\r\n    var MODE = 257;\r\n\r\n    var AUDIONEXT = 258;\r\n    var AUDIOPREV = 259;\r\n    var AUDIOSTOP = 260;\r\n    var AUDIOPLAY = 261;\r\n    var AUDIOMUTE = 262;\r\n    var MEDIASELECT = 263;\r\n    var WWW = 264;\r\n    var MAIL = 265;\r\n    var CALCULATOR = 266;\r\n    var COMPUTER = 267;\r\n    var AC_SEARCH = 268;\r\n    var AC_HOME = 269;\r\n    var AC_BACK = 270;\r\n    var AC_FORWARD = 271;\r\n    var AC_STOP = 272;\r\n    var AC_REFRESH = 273;\r\n    var AC_BOOKMARKS = 274;\r\n\r\n    var BRIGHTNESSDOWN = 275;\r\n    var BRIGHTNESSUP = 276;\r\n    var DISPLAYSWITCH = 277;\r\n    var KBDILLUMTOGGLE = 278;\r\n    var KBDILLUMDOWN = 279;\r\n    var KBDILLUMUP = 280;\r\n    var EJECT = 281;\r\n    var SLEEP = 282;\r\n\r\n    var APP1 = 283;\r\n    var APP2 = 284;\r\n}\r\n@:expose(\"minko.input.KeyCode\")\r\n@:enum abstract KeyCode(Int) from Int to Int {\r\n\r\n    var UNKNOWN = 0;\r\n    var FIRST = 0;\r\n    var BACKSPACE = 8;\r\n    var TAB = 9;\r\n    var CLEAR = 12;\r\n    var RETURN = 13;\r\n    var PAUSE = 19;\r\n    var CANCEL = 24;\r\n    var ESCAPE = 27;\r\n    var FS = 28; // File separator\r\n    var GS = 29; // Group separator\r\n    var RS = 30; // Record separator\r\n    var US = 31; // Unit separator\r\n    var SPACE = 32;\r\n    var EXCLAIM = 33;\r\n    var QUOTEDBL = 34;\r\n    var HASH = 35;\r\n    var DOLLAR = 36;\r\n    var PERCENT = 37;\r\n    var AMPERSAND = 38;\r\n    var QUOTE = 39;\r\n    var LEFTPAREN = 40;\r\n    var RIGHTPAREN = 41;\r\n    var ASTERISK = 42;\r\n    var PLUS = 43;\r\n    var COMMA = 44;\r\n    var MINUS = 45;\r\n    var PERIOD = 46;\r\n    var SLASH = 47;\r\n    var _0 = 48;\r\n    var _1 = 49;\r\n    var _2 = 50;\r\n    var _3 = 51;\r\n    var _4 = 52;\r\n    var _5 = 53;\r\n    var _6 = 54;\r\n    var _7 = 55;\r\n    var _8 = 56;\r\n    var _9 = 57;\r\n    var COLON = 58;\r\n    var SEMICOLON = 59;\r\n    var LESS = 60;\r\n    var EQUALS = 61;\r\n    var GREATER = 62;\r\n    var QUESTION = 63;\r\n    var AT = 64;\r\n    // 65 -> 90 = capital letters\r\n    var LEFTBRACKET = 91;\r\n    var BACKSLASH = 92;\r\n    var RIGHTBRACKET = 93;\r\n    var CARET = 94;\r\n    var UNDERSCORE = 95;\r\n    var BACKQUOTE = 96;\r\n    var A = 97;\r\n    var B = 98;\r\n    var C = 99;\r\n    var D = 100;\r\n    var E = 101;\r\n    var F = 102;\r\n    var G = 103;\r\n    var H = 104;\r\n    var I = 105;\r\n    var J = 106;\r\n    var K = 107;\r\n    var L = 108;\r\n    var M = 109;\r\n    var N = 110;\r\n    var O = 111;\r\n    var P = 112;\r\n    var Q = 113;\r\n    var R = 114;\r\n    var S = 115;\r\n    var T = 116;\r\n    var U = 117;\r\n    var V = 118;\r\n    var W = 119;\r\n    var X = 120;\r\n    var Y = 121;\r\n    var Z = 122;\r\n    var LEFTCURLYBRACKET = 123;\r\n    var PIPE = 124;\r\n    var RIGHTCURLYBRACKET = 125;\r\n    var TILDE = 126;\r\n    var DEL = 127;\r\n    var WORLD_0 = 160;\r\n    var WORLD_1 = 161;\r\n    var WORLD_2 = 162;\r\n    var WORLD_3 = 163;\r\n    var WORLD_4 = 164;\r\n    var WORLD_5 = 165;\r\n    var WORLD_6 = 166;\r\n    var WORLD_7 = 167;\r\n    var WORLD_8 = 168;\r\n    var WORLD_9 = 169;\r\n    var WORLD_10 = 170;\r\n    var WORLD_11 = 171;\r\n    var WORLD_12 = 172;\r\n    var WORLD_13 = 173;\r\n    var WORLD_14 = 174;\r\n    var WORLD_15 = 175;\r\n    var WORLD_16 = 176;\r\n    var WORLD_17 = 177;\r\n    var WORLD_18 = 178;\r\n    var WORLD_19 = 179;\r\n    var WORLD_20 = 180;\r\n    var WORLD_21 = 181;\r\n    var WORLD_22 = 182;\r\n    var WORLD_23 = 183;\r\n    var WORLD_24 = 184;\r\n    var WORLD_25 = 185;\r\n    var WORLD_26 = 186;\r\n    var WORLD_27 = 187;\r\n    var WORLD_28 = 188;\r\n    var WORLD_29 = 189;\r\n    var WORLD_30 = 190;\r\n    var WORLD_31 = 191;\r\n    var WORLD_32 = 192;\r\n    var WORLD_33 = 193;\r\n    var WORLD_34 = 194;\r\n    var WORLD_35 = 195;\r\n    var WORLD_36 = 196;\r\n    var WORLD_37 = 197;\r\n    var WORLD_38 = 198;\r\n    var WORLD_39 = 199;\r\n    var WORLD_40 = 200;\r\n    var WORLD_41 = 201;\r\n    var WORLD_42 = 202;\r\n    var WORLD_43 = 203;\r\n    var WORLD_44 = 204;\r\n    var WORLD_45 = 205;\r\n    var WORLD_46 = 206;\r\n    var WORLD_47 = 207;\r\n    var WORLD_48 = 208;\r\n    var WORLD_49 = 209;\r\n    var WORLD_50 = 210;\r\n    var WORLD_51 = 211;\r\n    var WORLD_52 = 212;\r\n    var WORLD_53 = 213;\r\n    var WORLD_54 = 214;\r\n    var WORLD_55 = 215;\r\n    var WORLD_56 = 216;\r\n    var WORLD_57 = 217;\r\n    var WORLD_58 = 218;\r\n    var WORLD_59 = 219;\r\n    var WORLD_60 = 220;\r\n    var WORLD_61 = 221;\r\n    var WORLD_62 = 222;\r\n    var WORLD_63 = 223;\r\n    var WORLD_64 = 224;\r\n    var WORLD_65 = 225;\r\n    var WORLD_66 = 226;\r\n    var WORLD_67 = 227;\r\n    var WORLD_68 = 228;\r\n    var WORLD_69 = 229;\r\n    var WORLD_70 = 230;\r\n    var WORLD_71 = 231;\r\n    var WORLD_72 = 232;\r\n    var WORLD_73 = 233;\r\n    var WORLD_74 = 234;\r\n    var WORLD_75 = 235;\r\n    var WORLD_76 = 236;\r\n    var WORLD_77 = 237;\r\n    var WORLD_78 = 238;\r\n    var WORLD_79 = 239;\r\n    var WORLD_80 = 240;\r\n    var WORLD_81 = 241;\r\n    var WORLD_82 = 242;\r\n    var WORLD_83 = 243;\r\n    var WORLD_84 = 244;\r\n    var WORLD_85 = 245;\r\n    var WORLD_86 = 246;\r\n    var WORLD_87 = 247;\r\n    var WORLD_88 = 248;\r\n    var WORLD_89 = 249;\r\n    var WORLD_90 = 250;\r\n    var WORLD_91 = 251;\r\n    var WORLD_92 = 252;\r\n    var WORLD_93 = 253;\r\n    var WORLD_94 = 254;\r\n    var WORLD_95 = 255;\r\n\r\n}\r\n@:expose(\"minko.input.KeyMap\")\r\nclass KeyMap {\r\n    public static var keyToKeyCodeMap:IntMap<Int> = initializeKeyToKeyCodeMap();//<Keyboard.Key, Keyboard.KeyCode>();\r\n    public static var keyToScanCodeMap:IntMap<Int> = initializeKeyToScanCodeMap();\r\n    //<Keyboard.Key, Keyboard.ScanCode>();\r\n    static public function initializeKeyToKeyCodeMap() {\r\n\r\n        var keyToKeyCodeMap = new IntMap<Int>();\r\n        keyToKeyCodeMap.set(Key.CANCEL, KeyCode.CANCEL);\r\n        keyToKeyCodeMap.set(Key.BACK_SPACE, KeyCode.BACKSPACE);\r\n        keyToKeyCodeMap.set(Key.TAB, KeyCode.TAB);\r\n        keyToKeyCodeMap.set(Key.CLEAR, KeyCode.CLEAR);\r\n        keyToKeyCodeMap.set(Key.RETURN, KeyCode.RETURN);\r\n\r\n        keyToKeyCodeMap.set(Key.ESCAPE, KeyCode.ESCAPE);\r\n\r\n        // Supported on Linux with Gecko 4.0\r\n        keyToKeyCodeMap.set(Key.CONVERT, KeyCode.FS);\r\n        keyToKeyCodeMap.set(Key.NONCONVERT, KeyCode.GS);\r\n        keyToKeyCodeMap.set(Key.ACCEPT, KeyCode.RS);\r\n        keyToKeyCodeMap.set(Key.MODECHANGE, KeyCode.US);\r\n\r\n        keyToKeyCodeMap.set(Key.SPACE, KeyCode.SPACE);\r\n\r\n        keyToKeyCodeMap.set(Key.DEL, KeyCode.DEL);\r\n        keyToKeyCodeMap.set(Key._0, KeyCode._0);\r\n        keyToKeyCodeMap.set(Key._1, KeyCode._1);\r\n        keyToKeyCodeMap.set(Key._2, KeyCode._2);\r\n        keyToKeyCodeMap.set(Key._3, KeyCode._3);\r\n        keyToKeyCodeMap.set(Key._4, KeyCode._4);\r\n        keyToKeyCodeMap.set(Key._5, KeyCode._5);\r\n        keyToKeyCodeMap.set(Key._6, KeyCode._6);\r\n        keyToKeyCodeMap.set(Key._7, KeyCode._7);\r\n        keyToKeyCodeMap.set(Key._8, KeyCode._8);\r\n        keyToKeyCodeMap.set(Key._9, KeyCode._9);\r\n        keyToKeyCodeMap.set(Key.COLON, KeyCode.COLON);\r\n        keyToKeyCodeMap.set(Key.SEMICOLON, KeyCode.SEMICOLON);\r\n        keyToKeyCodeMap.set(Key.LESS_THAN, KeyCode.LESS);\r\n        keyToKeyCodeMap.set(Key.EQUALS, KeyCode.EQUALS);\r\n        keyToKeyCodeMap.set(Key.GREATER_THAN, KeyCode.GREATER);\r\n        keyToKeyCodeMap.set(Key.QUESTION_MARK, KeyCode.QUESTION);\r\n        keyToKeyCodeMap.set(Key.AT, KeyCode.AT);\r\n        keyToKeyCodeMap.set(Key.A, KeyCode.A);\r\n        keyToKeyCodeMap.set(Key.B, KeyCode.B);\r\n        keyToKeyCodeMap.set(Key.C, KeyCode.C);\r\n        keyToKeyCodeMap.set(Key.D, KeyCode.D);\r\n        keyToKeyCodeMap.set(Key.E, KeyCode.E);\r\n        keyToKeyCodeMap.set(Key.F, KeyCode.F);\r\n        keyToKeyCodeMap.set(Key.G, KeyCode.G);\r\n        keyToKeyCodeMap.set(Key.H, KeyCode.H);\r\n        keyToKeyCodeMap.set(Key.I, KeyCode.I);\r\n        keyToKeyCodeMap.set(Key.J, KeyCode.J);\r\n        keyToKeyCodeMap.set(Key.K, KeyCode.K);\r\n        keyToKeyCodeMap.set(Key.L, KeyCode.L);\r\n        keyToKeyCodeMap.set(Key.M, KeyCode.M);\r\n        keyToKeyCodeMap.set(Key.N, KeyCode.N);\r\n        keyToKeyCodeMap.set(Key.O, KeyCode.O);\r\n        keyToKeyCodeMap.set(Key.P, KeyCode.P);\r\n        keyToKeyCodeMap.set(Key.Q, KeyCode.Q);\r\n        keyToKeyCodeMap.set(Key.R, KeyCode.R);\r\n        keyToKeyCodeMap.set(Key.S, KeyCode.S);\r\n        keyToKeyCodeMap.set(Key.T, KeyCode.T);\r\n        keyToKeyCodeMap.set(Key.U, KeyCode.U);\r\n        keyToKeyCodeMap.set(Key.V, KeyCode.V);\r\n        keyToKeyCodeMap.set(Key.W, KeyCode.W);\r\n        keyToKeyCodeMap.set(Key.X, KeyCode.X);\r\n        keyToKeyCodeMap.set(Key.Y, KeyCode.Y);\r\n        keyToKeyCodeMap.set(Key.Z, KeyCode.Z);\r\n\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_FJ_JISHO, KeyCode.WIN_OEM_FJ_JISHO );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_FJ_MASSHOU, KeyCode.WIN_OEM_FJ_MASSHOU );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_FJ_TOUROKU, KeyCode.WIN_OEM_FJ_TOUROKU );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_FJ_LOYA, KeyCode.WIN_OEM_FJ_LOYA );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_FJ_ROYA, KeyCode.WIN_OEM_FJ_ROYA );\r\n\r\n        keyToKeyCodeMap.set(Key.CIRCUMFLEX, KeyCode.CARET);\r\n        keyToKeyCodeMap.set(Key.EXCLAMATION, KeyCode.EXCLAIM);\r\n        keyToKeyCodeMap.set(Key.DOUBLE_QUOTE, KeyCode.QUOTEDBL);\r\n        keyToKeyCodeMap.set(Key.HASH, KeyCode.HASH);\r\n        keyToKeyCodeMap.set(Key.DOLLAR, KeyCode.DOLLAR);\r\n        keyToKeyCodeMap.set(Key.PERCENT, KeyCode.PERCENT);\r\n        keyToKeyCodeMap.set(Key.AMPERSAND, KeyCode.AMPERSAND);\r\n        keyToKeyCodeMap.set(Key.UNDERSCORE, KeyCode.UNDERSCORE);\r\n        keyToKeyCodeMap.set(Key.OPEN_PAREN, KeyCode.LEFTPAREN);\r\n        keyToKeyCodeMap.set(Key.CLOSE_PAREN, KeyCode.RIGHTPAREN);\r\n        keyToKeyCodeMap.set(Key.ASTERISK, KeyCode.ASTERISK);\r\n        keyToKeyCodeMap.set(Key.PLUS, KeyCode.PLUS);\r\n        keyToKeyCodeMap.set(Key.PIPE, KeyCode.PIPE);\r\n        keyToKeyCodeMap.set(Key.HYPHEN_MINUS, KeyCode.MINUS);\r\n        keyToKeyCodeMap.set(Key.OPEN_CURLY_BRACKET, KeyCode.LEFTCURLYBRACKET);\r\n        keyToKeyCodeMap.set(Key.CLOSE_CURLY_BRACKET, KeyCode.RIGHTCURLYBRACKET);\r\n        keyToKeyCodeMap.set(Key.TILDE, KeyCode.TILDE);\r\n\r\n        keyToKeyCodeMap.set(Key.COMMA, KeyCode.COMMA);\r\n        keyToKeyCodeMap.set(Key.PERIOD, KeyCode.PERIOD);\r\n        keyToKeyCodeMap.set(Key.SLASH, KeyCode.SLASH);\r\n        keyToKeyCodeMap.set(Key.BACK_QUOTE, KeyCode.BACKQUOTE);\r\n        keyToKeyCodeMap.set(Key.OPEN_BRACKET, KeyCode.LEFTBRACKET);\r\n        keyToKeyCodeMap.set(Key.BACK_SLASH, KeyCode.BACKSLASH);\r\n        keyToKeyCodeMap.set(Key.CLOSE_BRACKET, KeyCode.RIGHTBRACKET);\r\n        keyToKeyCodeMap.set(Key.QUOTE, KeyCode.QUOTE);\r\n\r\n        //keyToKeyCodeMap.set( Key::WIN_ICO_HELP, KeyCode.WIN_ICO_HELP );\r\n        //keyToKeyCodeMap.set( Key::WIN_ICO_00, KeyCode.WIN_ICO_00 );\r\n        //keyToKeyCodeMap.set( Key::WIN_ICO_CLEAR, KeyCode.WIN_ICO_CLEAR );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_RESET, KeyCode.WIN_OEM_RESET );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_JUMP, KeyCode.WIN_OEM_JUMP );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_PA1, KeyCode.WIN_OEM_PA1 );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_PA2, KeyCode.WIN_OEM_PA2 );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_PA3, KeyCode.WIN_OEM_PA3 );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_WSCTRL, KeyCode.WIN_OEM_WSCTRL );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_CUSEL, KeyCode.WIN_OEM_CUSEL );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_ATTN, KeyCode.WIN_OEM_ATTN );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_FINISH, KeyCode.WIN_OEM_FINISH );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_COPY, KeyCode.WIN_OEM_COPY );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_AUTO, KeyCode.WIN_OEM_AUTO );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_ENLW, KeyCode.WIN_OEM_ENLW );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_BACKTAB, KeyCode.WIN_OEM_BACKTAB );\r\n        //keyToKeyCodeMap.set( Key::ATTN, KeyCode.ATTN );\r\n        //keyToKeyCodeMap.set( Key::CRSEL, KeyCode.CRSEL );\r\n        //keyToKeyCodeMap.set( Key::EXSEL, KeyCode.EXSEL );\r\n        //keyToKeyCodeMap.set( Key::EREOF, KeyCode.EREOF );\r\n        //keyToKeyCodeMap.set( Key::PLAY, KeyCode.PLAY );\r\n        //keyToKeyCodeMap.set( Key::ZOOM, KeyCode.ZOOM );\r\n        //keyToKeyCodeMap.set( Key::PA1, KeyCode.PA1 );\r\n        //keyToKeyCodeMap.set( Key::WIN_OEM_CLEAR, KeyCode.WIN_OEM_CLEAR );\r\n        return keyToKeyCodeMap;\r\n    }\r\n\r\n    static public function initializeKeyToScanCodeMap() {\r\n\r\n        var keyToScanCodeMap = new IntMap<Int>();\r\n        keyToScanCodeMap.set(Key.HELP, ScanCode.HELP);\r\n\r\n        keyToScanCodeMap.set(Key.SCROLL_LOCK, ScanCode.SCROLLLOCK);\r\n\r\n        keyToScanCodeMap.set(Key.KANA, ScanCode.LANG1);\r\n        //keyToScanCodeMap.set(Key::HANGUL, ScanCode.LANG1 );\r\n        keyToScanCodeMap.set(Key.EISU, ScanCode.LANG1);\r\n        keyToScanCodeMap.set(Key.JUNJA, ScanCode.LANG1);\r\n        keyToScanCodeMap.set(Key.FINAL, ScanCode.LANG1);\r\n        //keyToScanCodeMap.set(Key::HANJA, ScanCode.LANG1);\r\n        keyToScanCodeMap.set(Key.KANJI, ScanCode.LANG1);\r\n\r\n        keyToScanCodeMap.set(Key.SHIFT, ScanCode.LSHIFT);\r\n        keyToScanCodeMap.set(Key.CONTROL, ScanCode.LCTRL);\r\n        keyToScanCodeMap.set(Key.ALT, ScanCode.LALT);\r\n        keyToScanCodeMap.set(Key.PAUSE, ScanCode.PAUSE);\r\n        keyToScanCodeMap.set(Key.CAPS_LOCK, ScanCode.CAPSLOCK);\r\n\r\n        keyToScanCodeMap.set(Key.PAGE_UP, ScanCode.PAGEUP);\r\n        keyToScanCodeMap.set(Key.PAGE_DOWN, ScanCode.PAGEDOWN);\r\n        keyToScanCodeMap.set(Key.END, ScanCode.END);\r\n        keyToScanCodeMap.set(Key.HOME, ScanCode.HOME);\r\n        keyToScanCodeMap.set(Key.LEFT, ScanCode.LEFT);\r\n        keyToScanCodeMap.set(Key.UP, ScanCode.UP);\r\n        keyToScanCodeMap.set(Key.RIGHT, ScanCode.RIGHT);\r\n        keyToScanCodeMap.set(Key.DOWN, ScanCode.DOWN);\r\n        keyToScanCodeMap.set(Key.SELECT, ScanCode.SELECT);\r\n        //keyToScanCodeMap.set(Key::PRINT, ScanCode.PRINT );\r\n        keyToScanCodeMap.set(Key.EXECUTE, ScanCode.EXECUTE);\r\n        keyToScanCodeMap.set(Key.PRINTSCREEN, ScanCode.PRINTSCREEN);\r\n        keyToScanCodeMap.set(Key.INSERT, ScanCode.INSERT);\r\n\r\n        keyToScanCodeMap.set(Key.META, ScanCode.RGUI);\r\n        keyToScanCodeMap.set(Key.ALTGR, ScanCode.RALT);\r\n        keyToScanCodeMap.set(Key.WIN, ScanCode.LGUI);\r\n        keyToScanCodeMap.set(Key.CONTEXT_MENU, ScanCode.APPLICATION);\r\n        keyToScanCodeMap.set(Key.SLEEP, ScanCode.SLEEP);\r\n        keyToScanCodeMap.set(Key.NUMPAD0, ScanCode.KP_0);\r\n        keyToScanCodeMap.set(Key.NUMPAD1, ScanCode.KP_1);\r\n        keyToScanCodeMap.set(Key.NUMPAD2, ScanCode.KP_2);\r\n        keyToScanCodeMap.set(Key.NUMPAD3, ScanCode.KP_3);\r\n        keyToScanCodeMap.set(Key.NUMPAD4, ScanCode.KP_4);\r\n        keyToScanCodeMap.set(Key.NUMPAD5, ScanCode.KP_5);\r\n        keyToScanCodeMap.set(Key.NUMPAD6, ScanCode.KP_6);\r\n        keyToScanCodeMap.set(Key.NUMPAD7, ScanCode.KP_7);\r\n        keyToScanCodeMap.set(Key.NUMPAD8, ScanCode.KP_8);\r\n        keyToScanCodeMap.set(Key.NUMPAD9, ScanCode.KP_9);\r\n        keyToScanCodeMap.set(Key.MULTIPLY, ScanCode.KP_MULTIPLY);\r\n        keyToScanCodeMap.set(Key.ADD, ScanCode.KP_PLUS);\r\n        keyToScanCodeMap.set(Key.SEPARATOR, ScanCode.SEPARATOR);\r\n        keyToScanCodeMap.set(Key.SUBTRACT, ScanCode.KP_MINUS);\r\n        keyToScanCodeMap.set(Key.DECIMAL, ScanCode.KP_DECIMAL);\r\n        keyToScanCodeMap.set(Key.DIVIDE, ScanCode.KP_DIVIDE);\r\n\r\n        keyToScanCodeMap.set(Key.F1, ScanCode.F1);\r\n        keyToScanCodeMap.set(Key.F2, ScanCode.F2);\r\n        keyToScanCodeMap.set(Key.F3, ScanCode.F3);\r\n        keyToScanCodeMap.set(Key.F4, ScanCode.F4);\r\n        keyToScanCodeMap.set(Key.F5, ScanCode.F5);\r\n        keyToScanCodeMap.set(Key.F6, ScanCode.F6);\r\n        keyToScanCodeMap.set(Key.F7, ScanCode.F7);\r\n        keyToScanCodeMap.set(Key.F8, ScanCode.F8);\r\n        keyToScanCodeMap.set(Key.F9, ScanCode.F9);\r\n        keyToScanCodeMap.set(Key.F10, ScanCode.F10);\r\n        keyToScanCodeMap.set(Key.F11, ScanCode.F11);\r\n        keyToScanCodeMap.set(Key.F12, ScanCode.F12);\r\n        keyToScanCodeMap.set(Key.F13, ScanCode.F13);\r\n        keyToScanCodeMap.set(Key.F14, ScanCode.F14);\r\n        keyToScanCodeMap.set(Key.F15, ScanCode.F15);\r\n        keyToScanCodeMap.set(Key.F16, ScanCode.F16);\r\n        keyToScanCodeMap.set(Key.F17, ScanCode.F17);\r\n        keyToScanCodeMap.set(Key.F18, ScanCode.F18);\r\n        keyToScanCodeMap.set(Key.F19, ScanCode.F19);\r\n        keyToScanCodeMap.set(Key.F20, ScanCode.F20);\r\n        keyToScanCodeMap.set(Key.F21, ScanCode.F21);\r\n        keyToScanCodeMap.set(Key.F22, ScanCode.F22);\r\n        keyToScanCodeMap.set(Key.F23, ScanCode.F23);\r\n        keyToScanCodeMap.set(Key.F24, ScanCode.F24);\r\n        keyToScanCodeMap.set(Key.NUM_LOCK, ScanCode.NUMLOCKCLEAR);\r\n\r\n        keyToScanCodeMap.set(Key.VOLUME_MUTE, ScanCode.MUTE);\r\n        keyToScanCodeMap.set(Key.VOLUME_DOWN, ScanCode.VOLUMEDOWN);\r\n        keyToScanCodeMap.set(Key.VOLUME_UP, ScanCode.VOLUMEUP);\r\n\r\n        // Additional keys\r\n        keyToScanCodeMap.set(Key.CONTROL_RIGHT, ScanCode.RCTRL);\r\n        keyToScanCodeMap.set(Key.SHIFT_RIGHT, ScanCode.RSHIFT);\r\n\r\n        return keyToScanCodeMap;\r\n\r\n    }\r\n}\r\n@:expose(\"minko.input.Keyboard\")\r\nclass Keyboard {\r\n    public static function create() {\r\n        return new Keyboard();\r\n    }\r\n    static public var NUM_KEYS = 350;\r\n\r\n\r\n    static private var _keyToName:Array<String> = initializeKeyNames();\r\n\r\n    private var _keyDown:IntMap<Signal2<Keyboard, Int>> ;\r\n    private var _keyUp:IntMap<Signal2<Keyboard, Int>> ;\r\n\r\n    private var _down:Signal<Keyboard>;\r\n    private var _up:Signal<Keyboard>;\r\n\r\n    private var _textInput:Signal2<Keyboard, Int>;\r\n\r\n    public static function getKeyName(key:Int):String {\r\n        return _keyToName[ key];\r\n    }\r\n\r\n    public var keyDown(get, null):Signal<Keyboard>;\r\n\r\n    function get_keyDown() {\r\n        return _down;\r\n    }\r\n\r\n    public var textInput(get, null):Signal2<Keyboard, Int>;\r\n\r\n    function get_textInput() {\r\n        return _textInput;\r\n    }\r\n\r\n    public function getKeyDown(key:Int):Signal2<Keyboard, Int> {\r\n        var index:Int = key;\r\n\r\n        if (!_keyDown.exists(index)) {\r\n            _keyDown.set(index, new Signal2<Keyboard, Int>());\r\n        }\r\n\r\n        return _keyDown.get(index);\r\n    }\r\n\r\n    public var keyUp(get, null):Signal<Keyboard>;\r\n\r\n    function get_keyUp() {\r\n        return _up;\r\n    }\r\n\r\n    public function getKeyUp(key:Int):Signal2<Keyboard, Int> {\r\n        var index:Int = key;\r\n\r\n        if (!_keyUp.exists(index)) {\r\n            _keyUp.set(index, new Signal2<Keyboard, Int>());\r\n        }\r\n\r\n        return _keyUp.get(index);\r\n    }\r\n\r\n    public function keyIsDown(key:Int) {\r\n        return false;\r\n    }\r\n\r\n    public function hasKeyDownSignal(key:Int) {\r\n        return _keyDown.exists(key);\r\n    }\r\n\r\n    public function hasKeyUpSignal(key:Int) {\r\n        return _keyUp.exists(key);\r\n    }\r\n\r\n    public function new() {\r\n        this._down = new Signal<Keyboard>();\r\n        this._up = new Signal<Keyboard>();\r\n        this._textInput = new Signal2<Keyboard, Int>();\r\n        this._keyDown = new IntMap<Signal2<Keyboard, Int>>() ;\r\n        this._keyUp = new IntMap<Signal2<Keyboard, Int>>() ;\r\n    }\r\n\r\n    public function setKeyboardState(key:Int, state:Int):Void {\r\n\r\n    }\r\n\r\n    private static function initializeKeyNames():Array<String>{\r\n        var names = new Array<String>();\r\n\r\n        names[3] = \"CANCEL\";\r\n        names[6] = \"HELP\";\r\n        names[8] = \"BACK_SPACE\";\r\n        names[9] = \"TAB\";\r\n        names[12] = \"CLEAR\";\r\n        names[13] = \"RETURN\";\r\n        names[14] = \"ENTER\";\r\n        names[16] = \"SHIFT\";\r\n        names[17] = \"CONTROL\";\r\n        names[18] = \"ALT\";\r\n        names[19] = \"PAUSE\";\r\n        names[20] = \"CAPS_LOCK\";\r\n        names[21] = \"KANA\";\r\n        //names[21] = \"HANGUL\";\r\n        names[22] = \"EISU\";\r\n        names[23] = \"JUNJA\";\r\n        names[24] = \"FINAL\";\r\n        //names[25] = \"HANJA\";\r\n        names[25] = \"KANJI\";\r\n        names[27] = \"ESCAPE\";\r\n        names[28] = \"CONVERT\";\r\n        names[29] = \"NONCONVERT\";\r\n        names[30] = \"ACCEPT\";\r\n        names[31] = \"MODECHANGE\";\r\n        names[32] = \"SPACE\";\r\n        names[33] = \"PAGE_UP\";\r\n        names[34] = \"PAGE_DOWN\";\r\n        names[35] = \"END\";\r\n        names[36] = \"HOME\";\r\n        names[37] = \"LEFT\";\r\n        names[38] = \"UP\";\r\n        names[39] = \"RIGHT\";\r\n        names[40] = \"DOWN\";\r\n        names[41] = \"SELECT\";\r\n        names[42] = \"PRINT\";\r\n        names[43] = \"EXECUTE\";\r\n        names[44] = \"PRINTSCREEN\";\r\n        names[45] = \"INSERT\";\r\n        names[46] = \"DELETE\";\r\n        names[48] = \"_0\";\r\n        names[49] = \"_1\";\r\n        names[50] = \"_2\";\r\n        names[51] = \"_3\";\r\n        names[52] = \"_4\";\r\n        names[53] = \"_5\";\r\n        names[54] = \"_6\";\r\n        names[55] = \"_7\";\r\n        names[56] = \"_8\";\r\n        names[57] = \"_9\";\r\n        names[58] = \"COLON\";\r\n        names[59] = \"SEMICOLON\";\r\n        names[60] = \"LESS_THAN\";\r\n        names[61] = \"EQUALS\";\r\n        names[62] = \"GREATER_THAN\";\r\n        names[63] = \"QUESTION_MARK\";\r\n        names[64] = \"AT\";\r\n        names[65] = \"A\";\r\n        names[66] = \"B\";\r\n        names[67] = \"C\";\r\n        names[68] = \"D\";\r\n        names[69] = \"E\";\r\n        names[70] = \"F\";\r\n        names[71] = \"G\";\r\n        names[72] = \"H\";\r\n        names[73] = \"I\";\r\n        names[74] = \"J\";\r\n        names[75] = \"K\";\r\n        names[76] = \"L\";\r\n        names[77] = \"M\";\r\n        names[78] = \"N\";\r\n        names[79] = \"O\";\r\n        names[80] = \"P\";\r\n        names[81] = \"Q\";\r\n        names[82] = \"R\";\r\n        names[83] = \"S\";\r\n        names[84] = \"T\";\r\n        names[85] = \"U\";\r\n        names[86] = \"V\";\r\n        names[87] = \"W\";\r\n        names[88] = \"X\";\r\n        names[89] = \"Y\";\r\n        names[90] = \"Z\";\r\n        names[91] = \"WIN\";\r\n        names[93] = \"CONTEXT_MENU\";\r\n        names[95] = \"SLEEP\";\r\n        names[96] = \"NUMPAD0\";\r\n        names[97] = \"NUMPAD1\";\r\n        names[98] = \"NUMPAD2\";\r\n        names[99] = \"NUMPAD3\";\r\n        names[100] = \"NUMPAD4\";\r\n        names[101] = \"NUMPAD5\";\r\n        names[102] = \"NUMPAD6\";\r\n        names[103] = \"NUMPAD7\";\r\n        names[104] = \"NUMPAD8\";\r\n        names[105] = \"NUMPAD9\";\r\n        names[106] = \"MULTIPLY\";\r\n        names[107] = \"ADD\";\r\n        names[108] = \"SEPARATOR\";\r\n        names[109] = \"SUBTRACT\";\r\n        names[110] = \"DECIMAL\";\r\n        names[111] = \"DIVIDE\";\r\n        names[112] = \"F1\";\r\n        names[113] = \"F2\";\r\n        names[114] = \"F3\";\r\n        names[115] = \"F4\";\r\n        names[116] = \"F5\";\r\n        names[117] = \"F6\";\r\n        names[118] = \"F7\";\r\n        names[119] = \"F8\";\r\n        names[120] = \"F9\";\r\n        names[121] = \"F10\";\r\n        names[122] = \"F11\";\r\n        names[123] = \"F12\";\r\n        names[124] = \"F13\";\r\n        names[125] = \"F14\";\r\n        names[126] = \"F15\";\r\n        names[127] = \"F16\";\r\n        names[128] = \"F17\";\r\n        names[129] = \"F18\";\r\n        names[130] = \"F19\";\r\n        names[131] = \"F20\";\r\n        names[132] = \"F21\";\r\n        names[133] = \"F22\";\r\n        names[134] = \"F23\";\r\n        names[135] = \"F24\";\r\n        names[144] = \"NUM_LOCK\";\r\n        names[145] = \"SCROLL_LOCK\";\r\n        names[146] = \"WIN_OEM_FJ_JISHO\";\r\n        names[147] = \"WIN_OEM_FJ_MASSHOU\";\r\n        names[148] = \"WIN_OEM_FJ_TOUROKU\";\r\n        names[149] = \"WIN_OEM_FJ_LOYA\";\r\n        names[150] = \"WIN_OEM_FJ_ROYA\";\r\n        names[160] = \"CIRCUMFLEX\";\r\n        names[161] = \"EXCLAMATION\";\r\n        names[162] = \"DOUBLE_QUOTE\";\r\n        names[163] = \"HASH\";\r\n        names[164] = \"DOLLAR\";\r\n        names[165] = \"PERCENT\";\r\n        names[166] = \"AMPERSAND\";\r\n        names[167] = \"UNDERSCORE\";\r\n        names[168] = \"OPEN_PAREN\";\r\n        names[169] = \"CLOSE_PAREN\";\r\n        names[170] = \"ASTERISK\";\r\n        names[171] = \"PLUS\";\r\n        names[172] = \"PIPE\";\r\n        names[173] = \"HYPHEN_MINUS\";\r\n        names[174] = \"OPEN_CURLY_BRACKET\";\r\n        names[175] = \"CLOSE_CURLY_BRACKET\";\r\n        names[176] = \"TILDE\";\r\n        names[181] = \"VOLUME_MUTE\";\r\n        names[182] = \"VOLUME_DOWN\";\r\n        names[183] = \"VOLUME_UP\";\r\n        names[188] = \"COMMA\";\r\n        names[190] = \"PERIOD\";\r\n        names[191] = \"SLASH\";\r\n        names[192] = \"BACK_QUOTE\";\r\n        names[219] = \"OPEN_BRACKET\";\r\n        names[220] = \"BACK_SLASH\";\r\n        names[221] = \"CLOSE_BRACKET\";\r\n        names[222] = \"QUOTE\";\r\n        names[224] = \"META\";\r\n        names[225] = \"ALTGR\";\r\n        names[227] = \"WIN_ICO_HELP\";\r\n        names[228] = \"WIN_ICO_00\";\r\n        names[230] = \"WIN_ICO_CLEAR\";\r\n        names[233] = \"WIN_OEM_RESET\";\r\n        names[234] = \"WIN_OEM_JUMP\";\r\n        names[235] = \"WIN_OEM_PA1\";\r\n        names[236] = \"WIN_OEM_PA2\";\r\n        names[237] = \"WIN_OEM_PA3\";\r\n        names[238] = \"WIN_OEM_WSCTRL\";\r\n        names[239] = \"WIN_OEM_CUSEL\";\r\n        names[240] = \"WIN_OEM_ATTN\";\r\n        names[241] = \"WIN_OEM_FINISH\";\r\n        names[242] = \"WIN_OEM_COPY\";\r\n        names[243] = \"WIN_OEM_AUTO\";\r\n        names[244] = \"WIN_OEM_ENLW\";\r\n        names[245] = \"WIN_OEM_BACKTAB\";\r\n        names[246] = \"ATTN\";\r\n        names[247] = \"CRSEL\";\r\n        names[248] = \"EXSEL\";\r\n        names[249] = \"EREOF\";\r\n        names[250] = \"PLAY\";\r\n        names[251] = \"ZOOM\";\r\n        names[253] = \"PA1\";\r\n        names[254] = \"WIN_OEM_CLEAR\";\r\n\r\n        // Additional keys (specific to Minko and for native support of some keys)\r\n        names[300] = \"CONTROL_RIGHT\";\r\n        names[301] = \"SHIFT_RIGHT\";\r\n\r\n        return names;\r\n    }\r\n\r\n}\r\n","package minko.input;\r\nimport minko.signal.Signal3;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.input.Mouse\")\r\nclass Mouse {\r\n    private var _canvas:AbstractCanvas;\r\n\r\n    private var _x:Int;\r\n    private var _y:Int;\r\n\r\n    private var _dX:Int;\r\n    private var _dY:Int;\r\n\r\n    private var _leftButtonIsDown:Bool;\r\n    private var _rightButtonIsDown:Bool;\r\n    private var _middleButtonIsDown:Bool;\r\n\r\n    private var _mouseMove:Signal3<Mouse, Int, Int> ;\r\n    private var _mouseWheel:Signal3<Mouse, Float, Float> ;\r\n    private var _mouseLeftButtonDown:Signal<Mouse>;\r\n    private var _mouseLeftButtonUp:Signal<Mouse>;\r\n    private var _mouseLeftClick:Signal<Mouse>;\r\n    private var _mouseRightButtonDown:Signal<Mouse>;\r\n    private var _mouseRightButtonUp:Signal<Mouse>;\r\n    private var _mouseRightClick:Signal<Mouse>;\r\n    private var _mouseMiddleButtonDown:Signal<Mouse>;\r\n    private var _mouseMiddleButtonUp:Signal<Mouse>;\r\n    private var _mouseMiddleClick:Signal<Mouse>;\r\n\r\n    private var _slots:Array<Dynamic>;\r\n\r\n    private var _lastMouseLeftDownX:Int;\r\n    private var _lastMouseLeftDownY:Int;\r\n\r\n    private var _lastMouseRightDownX:Int;\r\n    private var _lastMouseRightDownY:Int;\r\n\r\n    private var _lastMouseMiddleDownX:Int;\r\n    private var _lastMouseMiddleDownY:Int;\r\n\r\n    public static function create(canvas:AbstractCanvas) {\r\n        return new Mouse(canvas);\r\n    }\r\n\r\n    public var x(get, set):Int;\r\n\r\n    function get_x() {\r\n        return _x;\r\n    }\r\n\r\n    public var y(get, set):Int;\r\n\r\n    function get_y() {\r\n        return _y;\r\n    }\r\n\r\n    function set_x(v) {\r\n        _x = v;\r\n        return v;\r\n    }\r\n\r\n    function set_y(v) {\r\n        _y = v;\r\n        return v;\r\n    }\r\n    public var dX(get, set):Int;\r\n\r\n    function get_dX() {\r\n        return _dX;\r\n    }\r\n\r\n    public var dY(get, set):Int;\r\n\r\n    function get_dY() {\r\n        return _dY;\r\n    }\r\n\r\n    function set_dX(v) {\r\n        _dX = v;\r\n        return v;\r\n    }\r\n\r\n    function set_dY(v) {\r\n        _dY = v;\r\n        return v;\r\n    }\r\n\r\n    public var leftButtonIsDown(get, null):Bool;\r\n\r\n    function get_leftButtonIsDown() {\r\n        return _leftButtonIsDown;\r\n    }\r\n\r\n    public var rightButtonIsDown(get, null):Bool;\r\n\r\n    function get_rightButtonIsDown() {\r\n        return _rightButtonIsDown;\r\n    }\r\n\r\n    public var middleButtonIsDown(get, null):Bool;\r\n\r\n    function get_middleButtonIsDown() {\r\n        return _middleButtonIsDown;\r\n    }\r\n\r\n    public var normalizedX(get, null):Float;\r\n\r\n    function get_normalizedX() {\r\n        return 2.0 * (_x / _canvas.width - 0.5);\r\n    }\r\n\r\n    public var normalizedY(get, null):Float;\r\n\r\n    function get_normalizedY() {\r\n        return 2.0 * ( _y / _canvas.height - .5 );\r\n    }\r\n    public var move(get, null):Signal3<Mouse, Int, Int>;\r\n\r\n    function get_move() {\r\n        return _mouseMove;\r\n    }\r\n    public var wheel(get, null):Signal3<Mouse, Float, Float>;\r\n\r\n    function get_wheel() {\r\n        return _mouseWheel;\r\n    }\r\n    public var leftButtonDown(get, null):Signal<Mouse> ;\r\n\r\n    function get_leftButtonDown() {\r\n        return _mouseLeftButtonDown;\r\n    }\r\n    public var leftButtonUp(get, null):Signal<Mouse> ;\r\n\r\n    function get_leftButtonUp() {\r\n        return _mouseLeftButtonUp;\r\n    }\r\n    public var leftButtonClick(get, null):Signal<Mouse> ;\r\n\r\n    function get_leftButtonClick() {\r\n        return _mouseLeftClick;\r\n    }\r\n    public var rightButtonDown(get, null):Signal<Mouse> ;\r\n\r\n    function get_rightButtonDown() {\r\n        return _mouseRightButtonDown;\r\n    }\r\n    public var rightButtonUp(get, null):Signal<Mouse> ;\r\n\r\n    function get_rightButtonUp() {\r\n        return _mouseRightButtonUp;\r\n    }\r\n    public var rightButtonClick(get, null):Signal<Mouse> ;\r\n\r\n    function get_rightButtonClick() {\r\n        return _mouseRightClick;\r\n    }\r\n    public var middleButtonDown(get, null):Signal<Mouse> ;\r\n\r\n    function get_middleButtonDown() {\r\n        return _mouseMiddleButtonDown;\r\n    }\r\n    public var middleButtonUp(get, null):Signal<Mouse> ;\r\n\r\n    function get_middleButtonUp() {\r\n        return _mouseMiddleButtonUp;\r\n    }\r\n    public var middleButtonClick(get, null):Signal<Mouse> ;\r\n\r\n    function get_middleButtonClick() {\r\n        return _mouseMiddleClick;\r\n    }\r\n\r\n\r\n    public static inline var CLICK_MOVE_THRESHOLD = 5;\r\n\r\n    public function new(canvas:AbstractCanvas) {\r\n        this._canvas = canvas;\r\n        this._x = 0;\r\n        this._y = 0;\r\n        this._dX = 0;\r\n        this._dY = 0;\r\n        this._leftButtonIsDown = false;\r\n        this._rightButtonIsDown = false;\r\n        this._middleButtonIsDown = false;\r\n        this._mouseMove = new Signal3<Mouse, Int, Int>();\r\n        this._mouseWheel = new Signal3<Mouse, Float, Float>();\r\n        this._mouseLeftButtonDown = new Signal<Mouse>();\r\n        this._mouseLeftButtonUp = new Signal<Mouse>();\r\n        this._mouseLeftClick = new Signal<Mouse>();\r\n        this._mouseRightButtonDown = new Signal<Mouse>();\r\n        this._mouseRightButtonUp = new Signal<Mouse>();\r\n        this._mouseRightClick = new Signal<Mouse>();\r\n        this._mouseMiddleButtonDown = new Signal<Mouse>();\r\n        this._mouseMiddleButtonUp = new Signal<Mouse>();\r\n        this._mouseMiddleClick = new Signal<Mouse>();\r\n        _slots = [];\r\n        _slots.push(_mouseLeftButtonDown.connect(function(mouse) {\r\n            _leftButtonIsDown = true;\r\n            _lastMouseLeftDownX = x;\r\n            _lastMouseLeftDownY = y;\r\n        }));\r\n        _slots.push(_mouseLeftButtonUp.connect(function(mouse) {\r\n            _leftButtonIsDown = false;\r\n            var dX = Math.abs(x - _lastMouseLeftDownX);\r\n            var dY = Math.abs(y - _lastMouseLeftDownY);\r\n            if (dX < CLICK_MOVE_THRESHOLD && dY < CLICK_MOVE_THRESHOLD) {\r\n                leftButtonClick.execute(mouse);\r\n            }\r\n        }));\r\n\r\n        _slots.push(_mouseRightButtonDown.connect(function(mouse) {\r\n            _rightButtonIsDown = true;\r\n            _lastMouseRightDownX = x;\r\n            _lastMouseRightDownY = y;\r\n        }));\r\n        _slots.push(_mouseRightButtonUp.connect(function(mouse) {\r\n            _rightButtonIsDown = false;\r\n            var dX = Math.abs(x - _lastMouseRightDownX);\r\n            var dY = Math.abs(y - _lastMouseRightDownY);\r\n            if (dX < CLICK_MOVE_THRESHOLD && dY < CLICK_MOVE_THRESHOLD) {\r\n                rightButtonClick.execute(mouse);\r\n            }\r\n        }));\r\n\r\n        _slots.push(_mouseMiddleButtonDown.connect(function(mouse) {\r\n            _middleButtonIsDown = true;\r\n            _lastMouseMiddleDownX = x;\r\n            _lastMouseMiddleDownY = y;\r\n        }));\r\n        _slots.push(_mouseMiddleButtonUp.connect(function(mouse) {\r\n            _middleButtonIsDown = false;\r\n            var dX = Math.abs(x - _lastMouseMiddleDownX);\r\n            var dY = Math.abs(y - _lastMouseMiddleDownY);\r\n            if (dX < CLICK_MOVE_THRESHOLD && dY < CLICK_MOVE_THRESHOLD) {\r\n                middleButtonClick.execute(mouse);\r\n            }\r\n        }));\r\n    }\r\n}\r\n","package minko.input;\r\nimport haxe.ds.IntMap;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal3;\r\nimport minko.signal.Signal4;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.input.TouchPoint\")\r\nclass TouchPoint {\r\n    public var x:Float;\r\n    public var y:Float;\r\n    public var dX:Float;\r\n    public var dY:Float;\r\n\r\n    public function new(x, y, dX, dY) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.dX = dX;\r\n        this.dY = dY;\r\n    }\r\n}\r\n@:expose(\"minko.input.Touch\")\r\nclass Touch {\r\n    public static function create(canvas:AbstractCanvas) {\r\n        return new Touch(canvas);\r\n    }\r\n    private var _canvas:AbstractCanvas;\r\n\r\n    private var _touches:IntMap<TouchPoint> ; // identifier to x/y dx/dy\r\n\r\n    private var _identifiers:Array<Int>;\r\n\r\n    private var _touchMove:Signal4<Touch, Int, Float, Float>;\r\n    private var _touchDown:Signal4<Touch, Int, Float, Float>;\r\n    private var _touchUp:Signal4<Touch, Int, Float, Float>;\r\n\r\n    // Gestures\r\n    private var _swipeRight:Signal<Touch> ;\r\n    private var _swipeLeft:Signal<Touch> ;\r\n    private var _swipeUp:Signal<Touch> ;\r\n    private var _swipeDown:Signal<Touch> ;\r\n    private var _pinchZoom:Signal2<Touch, Float>;\r\n    private var _tap:Signal3<Touch, Float, Float>;\r\n    private var _doubleTap:Signal3<Touch, Float, Float>;\r\n    private var _longHold:Signal3<Touch, Float, Float>;\r\n    public var touches(get, null):IntMap<TouchPoint>;\r\n\r\n    function get_touches() {\r\n        return _touches;\r\n    }\r\n    public var identifiers(get, null):Array<Int>;\r\n\r\n    function get_identifiers() {\r\n        return _identifiers;\r\n    }\r\n    public var numTouches(get, null):Int;\r\n\r\n    function get_numTouches() {\r\n        return _identifiers.length;\r\n    }\r\n\r\n    public function touch(identifier):TouchPoint {\r\n        return _touches.get(identifier);\r\n    }\r\n    public var touchMove(get, null):Signal4<Touch, Int, Float, Float>;\r\n\r\n    function get_touchMove() {\r\n        return _touchMove;\r\n    }\r\n    public var touchDown(get, null):Signal4<Touch, Int, Float, Float>;\r\n\r\n    function get_touchDown() {\r\n        return _touchDown;\r\n    }\r\n\r\n    public var touchUp(get, null):Signal4<Touch, Int, Float, Float>;\r\n\r\n    function get_touchUp() {\r\n        return _touchUp;\r\n    }\r\n    public var swipeLeft(get, null):Signal<Touch>;\r\n\r\n    function get_swipeLeft() {\r\n        return _swipeLeft;\r\n    }\r\n\r\n    public var swipeRight(get, null):Signal<Touch>;\r\n\r\n    function get_swipeRight() {\r\n        return _swipeRight;\r\n    }\r\n\r\n    public var swipeUp(get, null):Signal<Touch>;\r\n\r\n    function get_swipeUp() {\r\n        return _swipeUp;\r\n    }\r\n\r\n    public var swipeDown(get, null):Signal<Touch>;\r\n\r\n    function get_swipeDown() {\r\n        return _swipeDown;\r\n    }\r\n\r\n    public var pinchZoom(get, null):Signal2<Touch, Float>;\r\n\r\n    function get_pinchZoom() {\r\n        return _pinchZoom;\r\n    }\r\n\r\n    public var tap(get, null):Signal3<Touch, Float, Float>;\r\n\r\n    function get_tap() {\r\n        return _tap;\r\n    }\r\n\r\n    public var doubleTap(get, null):Signal3<Touch, Float, Float>;\r\n\r\n    function get_doubleTap() {\r\n        return _doubleTap;\r\n    }\r\n\r\n    public var longHold(get, null):Signal3<Touch, Float, Float>;\r\n\r\n    function get_longHold() {\r\n        return _longHold;\r\n    }\r\n\r\n    public var averageX(get, null):Float;\r\n\r\n    function get_averageX() {\r\n        var x = 0.0 ;\r\n        var l = numTouches ;\r\n\r\n        for (i in 0... l) {\r\n            x += _touches.get(_identifiers[i]).x;\r\n        }\r\n\r\n        x /= l;\r\n\r\n        return x;\r\n    }\r\n\r\n    public var averageY(get, null):Float;\r\n\r\n    function get_averageY() {\r\n        var y = 0.0 ;\r\n        var l = numTouches;\r\n\r\n        for (i in 0... l) {\r\n            y += _touches.get(_identifiers[i]).y;\r\n        }\r\n\r\n        y /= l;\r\n\r\n        return y;\r\n    }\r\n\r\n    public var averageDX(get, null):Float;\r\n\r\n    function get_averageDX() {\r\n        var x = 0.0 ;\r\n        var l = numTouches ;\r\n\r\n        for (i in 0...l) {\r\n            x += _touches.get(_identifiers[i]).dX;\r\n        }\r\n\r\n        x /= l;\r\n\r\n        return x;\r\n    }\r\n\r\n    public var averageDY(get, null):Float;\r\n\r\n    function get_averageDY() {\r\n        var y = 0.0 ;\r\n        var l = numTouches ;\r\n\r\n        for (i in 0... l) {\r\n            y += _touches.get(_identifiers[i]).dY;\r\n        }\r\n\r\n        y /= l;\r\n\r\n        return y;\r\n    }\r\n\r\n    public function resetDeltas() {\r\n        var l = numTouches ;\r\n\r\n        for (i in 0... l) {\r\n            _touches.get(_identifiers[i]).dX = 0;\r\n            _touches.get(_identifiers[i]).dY = 0;\r\n        }\r\n    }\r\n\r\n    public function new(canvas:AbstractCanvas) {\r\n        this._canvas = canvas;\r\n        this._touches = new IntMap< TouchPoint>();\r\n        this._touchMove = new Signal4<Touch, Int, Float, Float>();\r\n        this._touchDown = new Signal4<Touch, Int, Float, Float>();\r\n        this._touchUp = new Signal4<Touch, Int, Float, Float>();\r\n        this._pinchZoom = new Signal2<Touch, Float>();\r\n        this._swipeLeft = new Signal<Touch>();\r\n        this._swipeRight = new Signal<Touch>();\r\n        this._swipeUp = new Signal<Touch>();\r\n        this._swipeDown = new Signal<Touch>();\r\n        this._tap = new Signal3<Touch, Float, Float>();\r\n        this._doubleTap = new Signal3<Touch, Float, Float>();\r\n        this._longHold = new Signal3<Touch, Float, Float>();\r\n    }\r\n\r\n    public function addTouch(identifier:Int, x:Float, y:Float, dX:Float, dY:Float) {\r\n\r\n    }\r\n\r\n    public function updateTouch(identifier:Int, x:Float, y:Float, dX:Float, dY:Float) {\r\n\r\n    }\r\n\r\n    public function removeTouch(identifier) {\r\n\r\n    }\r\n\r\n}\r\n","package minko.material;\r\nimport glm.Vec4;\r\nimport minko.render.AbstractTexture;\r\nimport minko.render.TextureType;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.material.PhongMaterial\")\r\nclass PhongMaterial extends BasicMaterial {\r\n    static public function create(name = \"PhongMaterial\"):PhongMaterial {\r\n        return new PhongMaterial(name) ;\r\n    }\r\n\r\n    static public function createbyPhongMaterial(source:PhongMaterial) {\r\n        var pm:PhongMaterial = create(source.name);\r\n\r\n        pm.data.copyFrom(source.data);\r\n\r\n        return pm;\r\n    }\r\n\r\n    public var specularColor(get, set):Vec4;\r\n\r\n    function set_specularColor(color) {\r\n        data.set(\"specularColor\", color);\r\n\r\n        return color;\r\n    }\r\n\r\n    public function specularColorRGBA(color) {\r\n        return specularColor = ( MathUtil.rgba(color));\r\n    }\r\n\r\n    function get_specularColor() {\r\n        return data.get(\"specularColor\");\r\n    }\r\n    public var shininess(get, set):Float;\r\n\r\n    function set_shininess(value) {\r\n        data.set(\"shininess\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_shininess() {\r\n        return data.get(\"shininess\");\r\n    }\r\n    public var normalMap(get, set):AbstractTexture;\r\n\r\n    function get_normalMap() {\r\n        return data.hasProperty(\"normalMap\") ? data.get(\"normalMap\") : null;\r\n    }\r\n\r\n    function set_normalMap(value:AbstractTexture) {\r\n        if (value.type == TextureType.CubeTexture)\r\n            throw (\"Only 2d normal maps are currently supported.\");\r\n        data.set(\"normalMap\", value);\r\n        //sampler\r\n        return value;\r\n    }\r\n    public var specularMap(get, set):AbstractTexture;\r\n\r\n    function get_specularMap() {\r\n        return data.hasProperty(\"specularMap\") ? data.get(\"specularMap\") : null;\r\n    }\r\n\r\n    function set_specularMap(value:AbstractTexture) {\r\n        if (value.type == TextureType.CubeTexture)\r\n            throw (\"Only 2d normal maps are currently supported.\");\r\n        data.set(\"specularMap\", value);\r\n        //sampler\r\n        return value;\r\n    }\r\n    public var environmentAlpha(get, set):Float;\r\n\r\n    function set_environmentAlpha(value) {\r\n        data.set(\"environmentAlpha\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_environmentAlpha() {\r\n        return data.get(\"environmentAlpha\");\r\n    }\r\n    public var environmentCubemap(get, null):AbstractTexture;\r\n\r\n    function get_environmentCubemap() {\r\n        return data.hasProperty(\"environmentCubemap\") ? data.get(\"environmentCubemap\") : null;\r\n    }\r\n    public var environmentMap(null, set):AbstractTexture;\r\n\r\n    function set_environmentMap(value:AbstractTexture) {\r\n        if (value.type == TextureType.Texture2D)\r\n            data.set(\"environmentMap2d\", value);\r\n        else\r\n            data.set(\"environmentCubemap\", value);\r\n\r\n        return value;\r\n    }\r\n    public var environmentMap2d(get, null):AbstractTexture;\r\n\r\n    function get_environmentMap2d() {\r\n        return data.hasProperty(\"environmentMap2d\") ? data.get(\"environmentMap2d\") : null;\r\n    }\r\n\r\n    public var alphaMap(get, null):AbstractTexture;\r\n\r\n    function get_alphaMap() {\r\n        return data.hasProperty(\"alphaMap\") ? data.get(\"alphaMap\") : null;\r\n    }\r\n\r\n    function set_alphaMap(value:AbstractTexture) {\r\n        if (value.type == TextureType.CubeTexture)\r\n            throw (\"Only 2d transparency maps are currently supported.\");\r\n\r\n        data.set(\"alphaMap\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var alphaThreshold:Float;\r\n\r\n    function set_alphaThreshold(value) {\r\n        data.set(\"alphaThreshold\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    function get_alphaThreshold() {\r\n        return data.get(\"alphaThreshold\");\r\n    }\r\n    public var fresnelReflectance:Float;\r\n\r\n    function get_fresnelReflectance() {\r\n        return data.get(\"fresnelReflectance\");\r\n    }\r\n\r\n    function set_fresnelReflectance(value) {\r\n        data.set(\"fresnelReflectance\", value);\r\n\r\n        return value;\r\n    }\r\n    public var fresnelExponent:Float;\r\n\r\n    function get_fresnelExponent() {\r\n        return data.get(\"fresnelExponent\");\r\n    }\r\n\r\n    function set_fresnelExponent(value) {\r\n        data.set(\"fresnelExponent\", value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public function new(name) {\r\n        super(name);\r\n    }\r\n}\r\n","package minko.material;\r\nimport glm.Vec2;\r\n@:expose(\"minko.material.WaterMaterial\")\r\nclass WaterMaterial extends PhongMaterial {\r\n    private var _numWaves:Int;\r\n    private var _amplitudes:Array<Float> ;\r\n    private var _waveLength:Array<Float>;\r\n    private var _origins:Array<Vec2>;\r\n    private var _speeds:Array<Float>;\r\n    private var _sharpness:Array<Float>;\r\n    private var _waveType:Array<Int>;\r\n\r\n    public static function createWaves(numWaves, name = \"WaterMaterial\") {\r\n        return new WaterMaterial(numWaves, name);\r\n    }\r\n\r\n    private function setWaveProperty(propertyName:String, waveId:Int, value:Any) {\r\n        var values:Array<Any> = data.get(propertyName);\r\n\r\n        values[waveId] = value;\r\n    }\r\n\r\n    public function new(numWaves, name) {\r\n        super(name) ;\r\n        this._numWaves = numWaves;\r\n        this._amplitudes = [for (i in 0...numWaves) 0.0];\r\n        this._origins = [for (i in 0...numWaves * 2) new Vec2(1, 1)];\r\n        this._waveLength = [for (i in 0...numWaves) 0.0];\r\n        this._speeds = [for (i in 0...numWaves) 0.0];\r\n        this._sharpness = [for (i in 0...numWaves) 0.0];\r\n        this._waveType = [for (i in 0...numWaves) 0];\r\n        data.set(\"numWaves\", _numWaves)\r\n        .set(\"waveOrigin\", _origins)\r\n        .set(\"waveLength\", _waveLength)\r\n        .set(\"waveAmplitude\", _amplitudes)\r\n        .set(\"waveSharpness\", _sharpness)\r\n        .set(\"waveSpeed\", _speeds)\r\n        .set(\"waveType\", _waveType);\r\n    }\r\n\r\n    public function setDirection(waveId:Int, direction:Vec2) {\r\n        setWaveProperty(\"waveOrigin\", waveId, direction);\r\n        setWaveProperty(\"waveType\", waveId, 0);\r\n\r\n        return (this);\r\n    }\r\n\r\n    public function setCenter(waveId:Int, origin:Vec2) {\r\n        setWaveProperty(\"waveOrigin\", waveId, origin);\r\n        setWaveProperty(\"waveType\", waveId, 1);\r\n\r\n        return (this);\r\n    }\r\n\r\n    public function setAmplitude(waveId:Int, amplitude:Float) {\r\n        setWaveProperty(\"waveAmplitude\", waveId, amplitude);\r\n\r\n        return (this);\r\n    }\r\n\r\n    public function setWaveLength(waveId:Int, waveLength:Float) {\r\n        setWaveProperty(\"waveLength\", waveId, waveLength);\r\n\r\n        return (this);\r\n    }\r\n\r\n    public function setSharpness(waveId:Int, sharpness:Float) {\r\n        setWaveProperty(\"waveSharpness\", waveId, sharpness);\r\n\r\n        return (this);\r\n    }\r\n\r\n    public function setSpeed(waveId:Int, speed:Float) {\r\n        setWaveProperty(\"waveSpeed\", waveId, speed);\r\n\r\n        return (this);\r\n    }\r\n\r\n}\r\n","package minko.math;\r\nusing Std;\r\n\r\nclass HashCore {\r\n\r\n    /**\r\n\t * Compute string hash using djb2 algorithm.\r\n\t *\r\n\t * Has a good balance of being extremely fast, while providing a reasonable distribution of hash values.\r\n\t * @see http://www.cse.yorku.ca/~oz/hash.html\r\n\t */\r\n    public static function djb2(s:String):Int {\r\n        var hash = 5381;\r\n        for (i in 0...s.length) {\r\n            hash = ((hash << 5) + hash) + s.charCodeAt(i);\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n\t * Compute string hash using sdbm algorithm.\r\n\t *\r\n\t * This algorithm was created for sdbm (a public-domain reimplementation of ndbm) database library.\r\n\t * It was found to do well in scrambling bits, causing better distribution of the keys and fewer splits.\r\n\t * It also happens to be a good general hashing function with good distribution.\r\n\t * @see http://www.cse.yorku.ca/~oz/hash.html\r\n\t */\r\n    public static function sdbm(s:String):Int {\r\n        var hash = 0;\r\n        for (i in 0...s.length) {\r\n            hash = s.charCodeAt(i) + (hash << 6) + (hash << 16) - hash;\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n\t * Java's String.hashCode() method implemented in Haxe.\r\n\t * @see http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/String.html#hashCode%28%29\r\n\t */\r\n    public static function javaHashCode(s:String):Int {\r\n        var hash = 0;\r\n        if (s.length == 0) return hash;\r\n        for (i in 0...s.length) {\r\n            hash = ((hash << 5) - hash) + s.charCodeAt(i);\r\n            hash = hash & hash; // Convert to 32bit integer\r\n        }\r\n        return hash;\r\n    }\r\n\r\n}\r\nclass Random {\r\n    /**\r\n\t * (a Mersenne prime M31) modulus constant = 2^31 - 1 = 0x7ffffffe\r\n\t */\r\n    private inline static var MPM = 2147483647.0;\r\n\r\n    /**\r\n\t * (a primitive root modulo M31)\r\n\t */\r\n    private inline static var MINSTD = 16807.0;\r\n\r\n    /**\r\n\t * Make a non deterministic random seed using standard libraries.\r\n\t * @return Non deterministic random seed.\r\n\t */\r\n    public static function makeRandomSeed():Int {\r\n        return Math.floor(Math.random() * MPM);\r\n    }\r\n\r\n    /**\r\n\t * Park-Miller-Carta algorithm.\r\n\t * @see <a href=\"http://lab.polygonal.de/?p=162\">http://lab.polygonal.de/?p=162</a>\r\n\t * @see <a href=\"http://code.google.com/p/polygonal/source/browse/trunk/src/lib/de/polygonal/core/math/random/ParkMiller.hx?r=547\">http://code.google.com/p/polygonal/source/browse/trunk/src/lib/de/polygonal/core/math/random/ParkMiller.hx?r=547</a>\r\n\t * @see <a href=\"http://en.wikipedia.org/wiki/Lehmer_random_number_generator\">http://en.wikipedia.org/wiki/Lehmer_random_number_generator</a>\r\n\t * @return Returns the next pseudo-random int value.\r\n\t */\r\n    public static inline function nextParkMiller(seed:Int):Int {\r\n        return Math.floor((seed * MINSTD) % MPM);\r\n    }\r\n\r\n    /**\r\n\t * <p>A Park-Miller-Carta PRNG (pseudo random number generator).</p>\r\n\t * <p>Integer implementation, using only 32 bit integer maths and no divisions.</p>\r\n\t * @see <a href=\"https://github.com/polygonal/core/blob/dev/src/de/polygonal/core/math/random/ParkMiller31.hx\">POLYGONAL - A HAXE LIBRARY FOR GAME DEVELOPERS</a>\r\n\t * @see <a href=\"http://www.firstpr.com.au/dsp/rand31/rand31-park-miller-carta.cc.txt\" target=\"_blank\">http://www.firstpr.com.au/dsp/rand31/rand31-park-miller-carta.cc.txt</a>\r\n\t * @see <a href=\"http://en.wikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator\" target=\"_blank\">Park-Miller random number generator</a>.\r\n\t * @see <a href=\"http://lab.polygonal.de/?p=162\" target=\"_blank\">A good Pseudo-Random Number Generator (PRNG)</a>.\r\n\t */\r\n    public static function nextParkMiller31(seed:Int):Int {\r\n        var lo:Int = 16807 * (seed & 0xffff);\r\n        var hi:Int = 16807 * (seed >>> 16);\r\n        lo += (hi & 0x7fff) << 16;\r\n        lo += hi >>> 15;\r\n        if (lo > 0x7fffffff) lo -= 0x7fffffff;\r\n        return lo;\r\n    }\r\n\r\n    /**\r\n\t * Linear congruential generator using GLIBC constants.\r\n     *\r\n\t * @see <a href=\"http://en.wikipedia.org/wiki/Linear_congruential_generator\">http://en.wikipedia.org/wiki/Linear_congruential_generator</a>\r\n\t * @see <a href=\"https://github.com/aduros/flambe/blob/master/src/flambe/util/Random.hx\">https://github.com/aduros/flambe/blob/master/src/flambe/util/Random.hx</a>\r\n\t * @return Returns an integer in [0, INT_MAX)\r\n     */\r\n    public static inline function nextLCG(seed:Int):Int {\r\n        // These constants borrowed from glibc\r\n        // Force float multiplication here to avoid overflow in Flash (and keep parity with JS)\r\n        return Math.floor((1103515245.0 * seed + 12345) % MPM) ;\r\n    }\r\n\r\n    /**\r\n\t * Returns the pseudo-random double value x in the range 0 <= x < 1.\r\n\t */\r\n    public static inline function toFloat(seed:Int):Float {\r\n        return seed / MPM;\r\n    }\r\n\r\n    /**\r\n\t * Returns a pseudo-random boolean value (coin flip).\r\n\t */\r\n    public static inline function toBool(seed:Int):Bool {\r\n        return toFloat(seed) > 0.5;\r\n    }\r\n\r\n    /**\r\n\t * Returns a pseudo-random double value x in the range min <= x <= max.\r\n\t */\r\n    public static inline function toFloatRange(seed:Int, min:Float, max:Float):Float {\r\n        return min + (max - min) * toFloat(seed);\r\n    }\r\n\r\n    /**\r\n\t * Returns a pseudo-random integral value x in the range min <= x <= max.\r\n\t */\r\n    public static inline function toIntRange(seed:Int, min:Int, max:Int):Int {\r\n        return Math.round((min - 0.4999) + ((max + 0.4999) - (min - 0.4999)) * toFloat(seed));\r\n    }\r\n\r\n    /**\r\n\t * Converts a string to a seed.\r\n\t * Lets you use words as seeds.\r\n\t */\r\n    public static function stringToSeed(s:String):Int {\r\n        return Math.floor(HashCore.djb2(s) % MPM);\r\n    }\r\n}\r\n","package minko.math;\r\nimport glm.Vec3;\r\n@:expose(\"minko.math.Ray\")\r\nclass Ray {\r\n    public function new() {\r\n        _origin = new Vec3();\r\n        _direction = new Vec3(0.0, 0.0, -1.0);\r\n    }\r\n    private var _origin:Vec3;\r\n    private var _direction:Vec3;\r\n\r\n    public static function createbyVector3(origin, direction) {\r\n        var ray = new Ray();\r\n        ray.setRay(origin, direction);\r\n        return ray;\r\n    }\r\n\r\n    public static function create() {\r\n        return new Ray();\r\n    }\r\n    public var direction(get, set):Vec3;\r\n\r\n    function get_direction() {\r\n        return _direction;\r\n    }\r\n\r\n    function set_direction(value) {\r\n        _direction = value;\r\n        return value;\r\n    }\r\n    public var origin(get, set):Vec3;\r\n\r\n    function get_origin() {\r\n        return _origin;\r\n    }\r\n\r\n    function set_origin(value) {\r\n        _origin = value;\r\n        return value;\r\n    }\r\n\r\n    public function setRay(origin, direction) {\r\n        this._origin = origin;\r\n        this._direction = direction;\r\n    }\r\n\r\n\r\n}\r\n","package minko.math;\r\nclass Rect {\r\n    public var x:Float;\r\n    public var y:Float;\r\n    public var width:Float;\r\n    public var height:Float;\r\n    public function new(x:Float=0,y:Float=0,w:Float=0,h:Float=0) {\r\n        this.x=x;\r\n        this.y=y;\r\n        this.width=w;\r\n        this.height=h;\r\n    }\r\n\r\n    public function clone():Rect {\r\n        var c=new Rect();\r\n        c.x=x;\r\n        c.y=y;\r\n        c.width=width;\r\n        c.height=height;\r\n        return c;\r\n    }\r\n}\r\n","package minko.net;\r\nimport minko.file.Options;\r\n@:expose(\"minko.net.HTTPOptions\")\r\nclass HTTPOptions extends Options {\r\n    private var _username:String;\r\n    private var _password:String;\r\n    private var _additionalHeaders:Array<Tuple<String, String>>;\r\n    private var _verifyPeer:Bool;\r\n\r\n    public var username(get, set):String;\r\n\r\n    function get_username() {\r\n        return _username;\r\n    }\r\n\r\n    function set_username(v) {\r\n        _username = v;\r\n        return v;\r\n    }\r\n    public var password(get, set):String;\r\n\r\n    function get_password() {\r\n        return _password;\r\n    }\r\n\r\n    function set_password(v) {\r\n        _password = v;\r\n        return v;\r\n    }\r\n    public var additionalHeaders(get, null):Array<Tuple<String, String>>;\r\n\r\n    function get_additionalHeaders() {\r\n        return _additionalHeaders;\r\n    }\r\n    public var verifyPeer(get, set):Bool;\r\n\r\n    function get_verifyPeer() {\r\n        return _verifyPeer;\r\n    }\r\n\r\n    function set_verifyPeer(v) {\r\n        _verifyPeer = v;\r\n        return v;\r\n    }\r\n\r\n    static public function create() {\r\n        var instance = new HTTPOptions() ;\r\n\r\n        instance.initialize();\r\n\r\n        return instance;\r\n    }\r\n\r\n    static public function createbyOptions(copy:Options) {\r\n        var instance:HTTPOptions = new HTTPOptions();\r\n        instance.copyFrom(copy);\r\n\r\n        instance.initialize();\r\n\r\n        return instance;\r\n    }\r\n\r\n    public function new() {\r\n        super();\r\n        _username = \"\";\r\n        _password = \"\";\r\n        _additionalHeaders = [];\r\n        _verifyPeer = true;\r\n    }\r\n\r\n    override public function copyFrom(copy:Options) {\r\n        super.copyFrom(copy);\r\n        _username = ( cast(copy, HTTPOptions)._username);\r\n        _password = (cast(copy, HTTPOptions)._password);\r\n        _additionalHeaders = (cast(copy, HTTPOptions)._additionalHeaders);\r\n        _verifyPeer = (cast(copy, HTTPOptions)._verifyPeer);\r\n        return cast this;\r\n    }\r\n\r\n\r\n    override public function clone() {\r\n        var copy:HTTPOptions =  new HTTPOptions();\r\n        copy.copyFrom(this);\r\n\r\n        copy.initialize();\r\n\r\n        return cast copy;\r\n    }\r\n}\r\n","package minko.net;\r\nimport haxe.ds.IntMap;\r\nimport haxe.io.Bytes;\r\nimport haxe.Json;\r\nimport js.html.Uint8Array;\r\nimport js.html.XMLHttpRequest;\r\nimport js.html.XMLHttpRequestResponseType;\r\nimport minko.file.AbstractProtocol;\r\nimport minko.file.Options.FileStatus;\r\nimport Reflect;\r\nimport String;\r\n@:expose(\"minko.net.WebHTTPProtocol\")\r\nclass WebHTTPProtocol extends AbstractProtocol {\r\n    private var _workerSlots:Array<Any>;\r\n    var _handle:Int;\r\n    static var _httpProtocolReferences:Array<AbstractProtocol> = [];\r\n    var _status:FileStatus;\r\n\r\n    public static function create():WebHTTPProtocol {\r\n\r\n        return new WebHTTPProtocol() ;\r\n    }\r\n\r\n    public function new() {\r\n        super();\r\n        _status = FileStatus.Pending;\r\n    }\r\n\r\n    function wget2CompleteHandler(id, arg:WebHTTPProtocol, data, size) {\r\n        arg.completeHandler(data);\r\n    }\r\n\r\n    function wget2ErrorHandler(id, arg:WebHTTPProtocol, code, message) {\r\n        arg.errorHandler(code, message);\r\n    }\r\n\r\n    function wget2ProgressHandler(id, arg:WebHTTPProtocol, loadedBytes, totalBytes) {\r\n        arg.progressHandler(loadedBytes, totalBytes);\r\n    }\r\n\r\n    override public function load() {\r\n        _httpProtocolReferences.push(this);\r\n\r\n        _options.protocolFunction = function(filename) {\r\n            return function() {\r\n                return new WebHTTPProtocol ();\r\n            };\r\n        };\r\n\r\n        progress.execute(this, 0.0);\r\n\r\n        var username:Bytes = null;\r\n        var password:Bytes = null;\r\n        var additionalHeaders = new Array<Tuple<String, String>>();\r\n        var verifyPeer = true;\r\n\r\n\r\n        if (Std.is(_options, HTTPOptions)) {\r\n            var httpOptions:HTTPOptions = cast(_options, HTTPOptions);\r\n            username = Bytes.ofString(httpOptions.username);\r\n            password = Bytes.ofString(httpOptions.password);\r\n\r\n            additionalHeaders = httpOptions.additionalHeaders;\r\n\r\n            verifyPeer = httpOptions.verifyPeer;\r\n        }\r\n\r\n        var seekingOffset = _options.seekingOffset;\r\n        var seekedLength = _options.seekedLength;\r\n\r\n        if (seekingOffset >= 0 && seekedLength > 0) {\r\n            var rangeMin = Std.string(seekingOffset);\r\n            var rangeMax = Std.string(seekingOffset + seekedLength - 1);\r\n\r\n            additionalHeaders.push(new Tuple<String, String>( \"Range\", \"bytes=\" + rangeMin + \"-\" + rangeMax ));\r\n        }\r\n        if (options.loadAsynchronously) {\r\n            var additionalHeadersJsonString = \"\";\r\n            if (additionalHeaders.length != 0) {\r\n                var additionalHeaderCount = 0;\r\n\r\n                additionalHeadersJsonString += \"{ \";\r\n\r\n                for (additionalHeader in additionalHeaders) {\r\n                    additionalHeadersJsonString += (\"\\\"\" + additionalHeader.first + \"\\\" : \\\"\" + additionalHeader.second + \"\\\"\");\r\n\r\n                    if (additionalHeaderCount < additionalHeaders.length - 1)\r\n                        additionalHeadersJsonString += \", \";\r\n\r\n                    ++additionalHeaderCount;\r\n                }\r\n\r\n                additionalHeadersJsonString += \" }\";\r\n            }\r\n\r\n            _handle =  EmscriptenAsync.emscripten_async_wget3_data(\r\n                resolvedFilename,\r\n                \"GET\",\r\n                \"\",\r\n                additionalHeadersJsonString,\r\n                this,\r\n                true,\r\n                wget2CompleteHandler,\r\n                wget2ErrorHandler,\r\n                wget2ProgressHandler\r\n            );\r\n        }\r\n        else {\r\n\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('GET', resolvedFilename, false);\r\n            xhr.overrideMimeType('text/plain; charset=x-user-defined');\r\n            for (additionalHeader in additionalHeaders) {\r\n                xhr.setRequestHeader(additionalHeader.first, additionalHeader.second);\r\n            }\r\n\r\n            xhr.send(null);\r\n            var size = -1;\r\n            var bytes:Bytes = null;\r\n\r\n            if ((xhr.readyState == 4 && xhr.status == 0)\r\n            || (xhr.status == 200 || xhr.status == 206)) {\r\n                var array = new Uint8Array(xhr.responseText.length);\r\n                for (i in 0...xhr.responseText.length)\r\n                    array[i] = xhr.responseText.charCodeAt(i) & 0xFF;\r\n                bytes = Bytes.ofData(array.buffer);\r\n                size = (xhr.responseText.length);\r\n            }\r\n            else {\r\n                size = (-1);\r\n            }\r\n\r\n            if (size >= 0) {\r\n                completeHandler(bytes);\r\n                // trace(resolvedFilename+\"\\n\");\r\n                // trace(bytes.toString());\r\n            }\r\n            else {\r\n                errorHandler(0, \"\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    override public function fileExists(filename) {\r\n        var username = \"\";\r\n        var password = \"\";\r\n        var additionalHeaders = new Array<Tuple<String, String>>();\r\n        var verifyPeer = true;\r\n\r\n        if (Std.is(_options, HTTPOptions)) {\r\n            var httpOptions:HTTPOptions = cast(_options);\r\n            username = httpOptions.username;\r\n            password = httpOptions.password;\r\n\r\n            additionalHeaders = httpOptions.additionalHeaders;\r\n\r\n            verifyPeer = httpOptions.verifyPeer;\r\n        }\r\n        additionalHeaders.push(new Tuple<String, String>(\"Access-Control-Allow-Methods\", \"GET, POST,PUT\"));\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        xhr.open('HEAD', filename, false);\r\n\r\n        if (additionalHeaders != null) {\r\n            for (additionalHeader in additionalHeaders) {\r\n                if (additionalHeader.first == \"\")\r\n                    continue;\r\n\r\n                xhr.setRequestHeader(additionalHeader.first, additionalHeader.second);\r\n            }\r\n        }\r\n        try {\r\n            xhr.send(null);\r\n        } catch (e:Any) {\r\n            return false;\r\n            trace(e);\r\n        }\r\n\r\n        var status = xhr.status;\r\n\r\n        return (xhr.readyState == 4 && xhr.status == 0)\r\n        || (status >= 200 && status < 300);\r\n\r\n\r\n    }\r\n\r\n    override public function isAbsolutePath(filename:String) {\r\n        return filename.indexOf(\"://\") != -1;\r\n    }\r\n\r\n    function completeHandler(data) {\r\n        if (_status == FileStatus.Aborted)\r\n            return;\r\n\r\n        this.data = (data);\r\n\r\n        progress.execute(this, 1.0);\r\n        complete.execute(this);\r\n\r\n        _httpProtocolReferences.remove(this);\r\n\r\n    }\r\n\r\n    function errorHandler(code, message = \"\") {\r\n        //LOG_ERROR(message);\r\n\r\n        error.execute(this, message);\r\n\r\n        _httpProtocolReferences.remove(this);\r\n    }\r\n\r\n    function progressHandler(loadedBytes, totalBytes) {\r\n        if (_status == FileStatus.Aborted)\r\n            return;\r\n\r\n        var progress = 0.0;\r\n\r\n        if (totalBytes != 0)\r\n            progress = (loadedBytes) / (totalBytes);\r\n        if (options.fileStatusFunction != null) {\r\n            var fileStatus = options.fileStatusFunction(file, progress);\r\n\r\n            if (fileStatus == FileStatus.Aborted) {\r\n                _status = FileStatus.Aborted;\r\n\r\n                EmscriptenAsync.emscripten_async_wget2_abort(_handle);\r\n\r\n                error.execute(this, \"\");\r\n\r\n                return;\r\n            }\r\n        }\r\n        this.progress.execute(this, progress);\r\n    }\r\n\r\n\r\n}\r\n\r\nclass   EmscriptenAsync{\r\n\r\n    static var nextWgetRequestHandle = 0;\r\n    static var wgetRequests:IntMap<XMLHttpRequest> = new IntMap<XMLHttpRequest>();\r\n\r\n    static function getNextWgetRequestHandle() {\r\n        var a = nextWgetRequestHandle;\r\n        nextWgetRequestHandle++;\r\n        return a;\r\n    };\r\n\r\n    static public function emscripten_async_wget2_abort(handle) {\r\n        var http = wgetRequests.get(handle);\r\n        if (http != null) {\r\n            http.abort();\r\n        }\r\n\r\n    }\r\n\r\n    static public function emscripten_async_wget3_data(url, request, param, additionalHeader, arg, free, onload, onerror, onprogress) {\r\n        var _url:String = (url);\r\n        var _request:String = (request);\r\n        var _param:String = (param);\r\n\r\n        var http = new XMLHttpRequest();\r\n        http.open(_request, _url, true);\r\n        http.responseType = XMLHttpRequestResponseType.ARRAYBUFFER;\r\n\r\n        var handle = getNextWgetRequestHandle();\r\n\r\n        // LOAD\r\n        http.onload = function http_onload(e) {\r\n            if (http.status == 200 || http.status == 206 || _url.substr(0, 4).toLowerCase() != \"http\") {\r\n                var byteArray = new Uint8Array(http.response);\r\n                var buffer = Bytes.ofData(byteArray.buffer);\r\n                if (onload != null) onload(handle, arg, buffer, byteArray.length);\r\n                if (free) buffer = null;\r\n            } else {\r\n                if (onerror != null) onerror(handle, arg, http.status, http.statusText);\r\n            }\r\n            wgetRequests.remove(handle);\r\n        };\r\n\r\n        // ERROR\r\n        http.onerror = function http_onerror(e) {\r\n            if (onerror != null) {\r\n                onerror(handle, arg, http.status, http.statusText);\r\n            }\r\n            wgetRequests.remove(handle);\r\n        };\r\n\r\n        // PROGRESS\r\n        http.onprogress = function http_onprogress(e) {\r\n            if (onprogress != null) onprogress(handle, arg, e.loaded, e.lengthComputable || e.lengthComputable == null ? e.total : 0);\r\n        };\r\n\r\n        // ABORT\r\n        http.onabort = function http_onabort(e) {\r\n            wgetRequests.remove(handle);\r\n        };\r\n\r\n        if (additionalHeader != \"\") {\r\n            var additionalHeaderObject = Json.parse(additionalHeader);\r\n            for (entry in Reflect.fields(additionalHeaderObject)) {\r\n                http.setRequestHeader(entry, Reflect.field(additionalHeaderObject, entry));\r\n            }\r\n        }\r\n\r\n\r\n        if (_request == \"POST\") {\r\n            //Send the proper header information along with the request\r\n            http.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n            http.setRequestHeader(\"Content-length\", Std.string(_param.length));\r\n            http.setRequestHeader(\"Connection\", \"close\");\r\n            http.send(_param);\r\n        } else {\r\n            http.send(null);\r\n        }\r\n\r\n        wgetRequests.set(handle, http);\r\n\r\n        return handle;\r\n    }\r\n\r\n}\r\n","package minko.render;\r\n\r\nimport glm.Vec4;\r\nimport haxe.io.Bytes;\r\n@:expose(\"minko.render.AbstractContextFace\")\r\n@:enum abstract AbstractContextFace(Int) from Int to Int {\r\n    var POSITIVE_X = 0;\r\n    var NEGATIVE_X = 1;\r\n    var POSITIVE_Y = 2;\r\n    var NEGATIVE_Y = 3;\r\n    var POSITIVE_Z = 4;\r\n    var NEGATIVE_Z = 5;\r\n}\r\n\r\n@:expose(\"minko.render.AbstractContext\")\r\nclass AbstractContext {\r\n\r\n    public function dispose() {\r\n    }\r\n    public var errorsEnabled(get, set):Bool;\r\n\r\n    function get_errorsEnabled() {\r\n        return false;\r\n    }\r\n\r\n    function set_errorsEnabled(errors:Bool) {\r\n        return errors;\r\n\r\n    }\r\n    public var driverInfo(get, null):String;\r\n\r\n    function get_driverInfo() {\r\n        return \"\";\r\n    }\r\n\r\n    public var renderTarget(get, null):Int;\r\n\r\n    public var viewportWidth(get, null):Int;\r\n\r\n    public var viewportHeight(get, null):Int;\r\n\r\n    public var currentProgram(get, null):Int;\r\n\r\n    function get_renderTarget() {\r\n        return -1;\r\n    }\r\n\r\n    function get_viewportWidth() {\r\n        return -1;\r\n    }\r\n\r\n    function get_viewportHeight() {\r\n        return -1;\r\n    }\r\n\r\n    function get_currentProgram() {\r\n        return -1;\r\n    }\r\n\r\n    public function configureViewport(x:Int, y:Int, width:Int, height:Int) {\r\n\r\n    }\r\n\r\n    public function clear(red:Float = 0.0, green:Float = 0.0, blue:Float = 0.0, alpha:Float = 0.0, depth:Float = 1.0, stencil:Int = 0, mask:Int = 0xffffffff) {\r\n\r\n    }\r\n\r\n    public function present() :Void{\r\n\r\n    }\r\n\r\n    public function drawIndexBufferTriangles(indexBuffer:Int, firstIndex:Int, numTriangles:Int) {\r\n\r\n    }\r\n\r\n    public function drawTriangles(firstIndex:Int, numTriangles:Int) {\r\n\r\n    }\r\n\r\n    public function createVertexBuffer(size:Int) {\r\n        return -1;\r\n    }\r\n\r\n    public function setVertexBufferAt(position:Int, vertexBuffer:Int, size:Int, stride:Int, offset:Int) {\r\n\r\n    }\r\n\r\n    public function uploadVertexBufferData(vertexBuffer:Int, offset:Int, size:Int, data:Array<Float>) {\r\n\r\n    }\r\n\r\n    public function deleteVertexBuffer(vertexBuffer:Int) {\r\n\r\n    }\r\n\r\n    public function createIndexBuffer(size:Int) {\r\n        return -1;\r\n    }\r\n\r\n    public function uploaderIndexBufferData(indexBuffer:Int, offset:Int, size:Int, data:Array<Int>) {\r\n\r\n    }\r\n\r\n    public function deleteIndexBuffer(indexBuffer:Int) {\r\n\r\n    }\r\n\r\n    public function createTexture(type:TextureType, width:Int, height:Int, mipMapping:Bool, optimizeForRenderToTexture:Bool = false, assertPowerOfTwoSized :Bool= true) {\r\n        return -1;\r\n    }\r\n\r\n    public function createRectangleTexture(type:TextureType, width:Int, height:Int) {\r\n        return -1;\r\n    }\r\n\r\n    public function createCompressedTexture(type:TextureType, format:TextureFormat, width:Int, height:Int, mipMapping:Bool) {\r\n        return -1;\r\n    }\r\n\r\n    public function uploadTexture2dData(texture:Int, width:Int, height:Int, mipLevel:Int, data:Bytes) {\r\n\r\n    }\r\n\r\n    public function uploadCubeTextureData(texture:Int, face:CubeTexture.Face, width:Int, height:Int, mipLevel:Int, data:Bytes) {\r\n    }\r\n\r\n    public function uploadCompressedTexture2dData(texture:Int, format:TextureFormat, width:Int, height:Int, size:Int, mipLevel:Int, data:Bytes) {\r\n\r\n    }\r\n\r\n    public function uploadCompressedCubeTextureData(texture:Int, face:CubeTexture.Face, format:TextureFormat, width:Int, height:Int, mipLevel:Int, data:Bytes) {\r\n\r\n    }\r\n\r\n    public function activateMipMapping(texture:Int) {\r\n\r\n    }\r\n\r\n    public function deleteTexture(texture:Int) {\r\n\r\n    }\r\n\r\n    public function setTextureAt(position:Int, texture:Int, location :Int= -1) {\r\n\r\n    }\r\n\r\n    public function setSamplerStateAt(position:Int, wrapping:WrapMode, filtering:TextureFilter, mipFiltering:MipFilter) {\r\n\r\n    }\r\n\r\n    public function createProgram() {\r\n        return -1;\r\n    }\r\n\r\n    public function attachShader(program:Int, shader:Int) {\r\n\r\n    }\r\n\r\n    public function linkProgram(program:Int) {\r\n\r\n    }\r\n\r\n    public function deleteProgram(program:Int) {\r\n\r\n    }\r\n\r\n    public function setProgram(program:Int) {\r\n\r\n    }\r\n\r\n    public function compileShader(shader:Int) {\r\n\r\n    }\r\n\r\n    public function setShaderSource(shader:Int, source:String) {\r\n\r\n    }\r\n\r\n    public function createVertexShader() {\r\n        return -1;\r\n    }\r\n\r\n    public function deleteVertexShader(vertexShader:Int) {\r\n\r\n    }\r\n\r\n    public function createFragmentShader() {\r\n        return -1;\r\n    }\r\n\r\n    public function deleteFragmentShader(fragmentShader:Int) {\r\n\r\n    }\r\n\r\n    public function getProgramInputs(program:Int):ProgramInputs {\r\n        return null;\r\n    }\r\n\r\n    public function setBlendingModeSD(source:Blending.Source, destination:Blending.Destination) {\r\n\r\n    }\r\n\r\n    public function setBlendingMode(blendMode:Blending.Mode) {\r\n\r\n    }\r\n\r\n    public function setColorMask(NamelessParameter:Bool) {\r\n\r\n    }\r\n\r\n    public function setDepthTest(depthMask:Bool, depthFunc:CompareMode) {\r\n\r\n    }\r\n\r\n    public function setStencilTest(stencilFunc:CompareMode, stencilRef:Int, stencilMask:Int, stencilFailOp:StencilOperation, stencilZFailOp:StencilOperation, stencilZPassOp:StencilOperation) {\r\n\r\n    }\r\n\r\n    public function setScissorTest(scissorTest:Bool, NamelessParameter2:Vec4) {\r\n\r\n    }\r\n\r\n    public function readPixels(pixels:Bytes) {\r\n\r\n    }\r\n\r\n    public function readRectPixels(x:Int, y:Int, width:Int, height:Int, pixels:Bytes) {\r\n\r\n    }\r\n\r\n    public function setTriangleCulling(triangleCulling:TriangleCulling) {\r\n\r\n    }\r\n\r\n    public function setRenderToBackBuffer() {\r\n\r\n    }\r\n\r\n    public function setRenderToTexture(texture:Int, enableDepthAndStencil:Bool = false) {\r\n\r\n    }\r\n\r\n    public function generateMipmaps(texture:Int) {\r\n\r\n    }\r\n\r\n    public function setUniformFloat(location:Int, count:Int, v:Array<Float>) {\r\n\r\n    }\r\n\r\n    public function setUniformFloat2(location:Int, count:Int, v:Array<Float>) {\r\n\r\n    }\r\n\r\n\r\n    public function setUniformFloat3(location:Int, count:Int, v:Array<Float>) {\r\n\r\n    }\r\n\r\n    public function setUniformFloat4(location:Int, count:Int, v:Array<Float>) {\r\n\r\n    }\r\n\r\n    public function setUniformMatrix4x4(location:Int, count:Int, v:Array<Float>) {\r\n\r\n    }\r\n\r\n    public function setUniformInt(location:Int, count:Int, v:Array<Int>) {\r\n\r\n    }\r\n\r\n    public function setUniformInt2(location:Int, count:Int, v:Array<Int>) {\r\n\r\n    }\r\n\r\n    public function setUniformInt3(location:Int, count:Int, v:Array<Int>) {\r\n\r\n    }\r\n\r\n    public function setUniformInt4(location:Int, count:Int, v:Array<Int>) {\r\n\r\n    }\r\n\r\n    public function createVertexAttributeArray() {\r\n\r\n\r\n        return -1;\r\n    }\r\n\r\n    public function setVertexAttributeArray(vertexArray:Int) {\r\n\r\n    }\r\n\r\n    public function new() {\r\n    }\r\n}\r\n","package minko.render;\r\n@:expose(\"minko.render.AbstractResource\")\r\nclass AbstractResource {\r\n    var _uuid:String;\r\n    var _context:AbstractContext;\r\n    var _id:Int;\r\n\r\n    public var uuid(get, null):String;\r\n\r\n    function get_uuid() {\r\n        return _uuid;\r\n    }\r\n    public var context(get, null):AbstractContext;\r\n\r\n    function get_context() {\r\n        return _context;\r\n    }\r\n    public var id(get, set):Int;\r\n\r\n    function set_id(v) {\r\n        _id = v;\r\n\r\n        return _id;\r\n    }\r\n\r\n    function get_id() {\r\n        if (_id == -1) {\r\n            throw \"\";\r\n        }\r\n\r\n        return _id;\r\n    }\r\n    public var isReady(get, null):Bool;\r\n\r\n    function get_isReady() {\r\n        return _id != -1;\r\n    }\r\n\r\n    public function dispose() {\r\n\r\n    }\r\n\r\n    public function upload() {\r\n\r\n    }\r\n\r\n    public function new(context:AbstractContext) {\r\n        this._uuid = Uuid.getUuid();\r\n        this._context = context;\r\n        this._id = -1;\r\n\r\n    }\r\n}\r\n","package minko.render;\r\nimport haxe.io.Bytes;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.render.AbstractTexture\")\r\nclass AbstractTexture extends AbstractResource {\r\n    public var MAX_SIZE = 4096;\r\n\r\n    private var _type:TextureType;\r\n    private var _sampler:TextureSampler;\r\n    private var _format:TextureFormat;\r\n    private var _width:Int;\r\n    private var _height:Int;\r\n    private var _widthGPU:Int; // always power of 2\r\n    private var _heightGPU:Int; // always power of 2\r\n    private var _mipMapping:Bool;\r\n    private var _resizeSmoothly:Bool;\r\n    private var _optimizeForRenderToTexture:Bool;\r\n    private var _filename:String;\r\n    public var sampler(get, null):TextureSampler;\r\n\r\n    function get_sampler() {\r\n        return _sampler;\r\n    }\r\n\r\n    override function set_id(v) {\r\n        _id = v;\r\n        _sampler.id = v;\r\n        return _id;\r\n    }\r\n    public var type(get, null):TextureType;\r\n\r\n    function get_type() {\r\n        return _type;\r\n    }\r\n\r\n    public var format(get, null):TextureFormat;\r\n\r\n    function get_format() {\r\n        return _format;\r\n    }\r\n\r\n    public var width(get, null):Int;\r\n\r\n    function get_width() {\r\n        return _widthGPU;\r\n    }\r\n\r\n    public var height(get, null):Int;\r\n\r\n    function get_height() {\r\n        return _heightGPU;\r\n    }\r\n\r\n    public var originalWidth(get, null):Int;\r\n\r\n    function get_originalWidth() {\r\n        return _width;\r\n    }\r\n\r\n    public var originalHeight(get, null):Int;\r\n\r\n    function get_originalHeight() {\r\n        return _height;\r\n    }\r\n    public var mipMapping(get, null):Bool;\r\n\r\n    function get_mipMapping() {\r\n        return _mipMapping;\r\n    }\r\n\r\n    public function activateMipMapping() {\r\n        if (_mipMapping) {\r\n            return;\r\n        }\r\n\r\n        _mipMapping = true;\r\n\r\n        _context.activateMipMapping(_id);\r\n    }\r\n\r\n    public var optimizeForRenderToTexture(get, null):Bool;\r\n\r\n    function get_optimizeForRenderToTexture() {\r\n        return _optimizeForRenderToTexture;\r\n    }\r\n\r\n    public function resize(width, height, resizeSmoothly) {\r\n\r\n    }\r\n\r\n    public function disposeData() {\r\n\r\n    }\r\n\r\n\r\n    /*static*/\r\n    static public function resizeData(width, height, data:Bytes, newWidth, newHeight, resizeSmoothly) {\r\n//newData.Clear();\r\n        var newData:Bytes = null;\r\n        if (newWidth == 0 || newHeight == 0) {\r\n            return data;\r\n        }\r\n\r\n        if (newWidth == width && newHeight == height) {\r\n            newData = Bytes.alloc(width * height * 4);\r\n            newData.blit(0, data, 0, width * height * 4);\r\n            return newData;\r\n        }\r\n\r\n        var size = newWidth * newHeight * 4;\r\n        var xFactor = (width - 1.0) / (newWidth - 1.0);\r\n        var yFactor = (height - 1.0) / (newHeight - 1.0);\r\n\r\n        newData = Bytes.alloc(size);\r\n\r\n        var idx = 0;\r\n        var y = 0.0;\r\n        for (q in 0...newHeight) {\r\n            var j = Math.floor(y);\r\n            var dy = y - j;\r\n\r\n            if (j >= height) {\r\n                j = height - 1;\r\n            }\r\n\r\n            var x = 0.0 ;\r\n            for (p in 0...newWidth) {\r\n                var i = Math.floor(x);\r\n\r\n                if (i >= width) {\r\n                    i = width - 1;\r\n                }\r\n\r\n                var ijTL = (i + width * j) << 2;\r\n\r\n                if (resizeSmoothly) {\r\n                    // bilinear interpolation\r\n\r\n                    var dx = x - i;\r\n                    var dxy = dx * dy;\r\n\r\n                    var ijTR = i < width - 1 ? ijTL + 4 : ijTL;\r\n                    var ijBL = j < height - 1 ? ijTL + (width << 2) : ijTL;\r\n                    var ijBR = (i < width - 1) && (j < height - 1) ? ijTL + ((width + 1) << 2) : ijTL;\r\n\r\n                    var wTL = 1.0 - dx - dy + dxy;\r\n                    var wTR = dx - dxy;\r\n                    var wBL = dy - dxy;\r\n                    var wBR = dxy;\r\n\r\n                    for (k in 0...4) {\r\n                        var color = wTL * data.get(ijTL + k) + wTR * data.get(ijTR + k) + wBL * data.get(ijBL + k) + wBR * data.get(ijBR + k);\r\n\r\n                        newData.set(idx + k, Math.floor(color));\r\n                    }\r\n                }\r\n                else {\r\n                    // nearest pixel color\r\n\r\n                    for (k in 0... 4) {\r\n                        newData.set(idx + k, data.get(ijTL + k));\r\n                    }\r\n                }\r\n\r\n                idx += 4;\r\n                x += xFactor;\r\n            }\r\n            y += yFactor;\r\n        }\r\n        return newData;\r\n#if DEBUG_TEXTURE\r\n\t\t\t\tDebug.Assert(newData.Count == newWidth * newHeight * sizeof(int));\r\n#end\r\n    }\r\n\r\n    public function new(type:TextureType, context:AbstractContext, width:Int, height:Int,\r\n                        format:TextureFormat, mipMapping:Bool, optimizeForRenderToTexture:Bool, resizeSmoothly:Bool, filename:String) {\r\n        super(context);\r\n        this._sampler = new minko.render.TextureSampler(uuid, _id);\r\n        this._type = (type);\r\n        this._format = (format);\r\n        this._width = width;\r\n        this._height = height;\r\n        this._widthGPU = Math.floor(Math.min(MathUtil.clp2(width), MAX_SIZE));\r\n        this._heightGPU = Math.floor(Math.min(MathUtil.clp2(height), MAX_SIZE));\r\n        this._mipMapping = mipMapping;\r\n        this._resizeSmoothly = resizeSmoothly;\r\n        this._optimizeForRenderToTexture = optimizeForRenderToTexture;\r\n        this._filename = filename;\r\n    }\r\n\r\n\r\n    public function getMipmapWidth(level) {\r\n//Debug.Assert(math.GlobalMembers.isp2(_widthGPU));\r\n\r\n        var p = MathUtil.getp2(_widthGPU);\r\n        return 1 << (p - level);\r\n        // return uint(powf(2.0f, (log2f(_widthGPU) - level)))\r\n    }\r\n\r\n    public function getMipmapHeight(level) {\r\n//Debug.Assert(math.GlobalMembers.isp2(_heightGPU));\r\n\r\n        var p = MathUtil.getp2(_heightGPU);\r\n\r\n        return 1 << (p - level);\r\n    }\r\n\r\n}\r\n","package minko.render;\r\nimport haxe.io.Bytes;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.render.Face\")\r\n@:enum abstract Face(Int) from Int to Int {\r\n    var POSITIVE_X = 0;\r\n    var NEGATIVE_X = 1;\r\n    var POSITIVE_Y = 2;\r\n    var NEGATIVE_Y = 3;\r\n    var POSITIVE_Z = 4;\r\n    var NEGATIVE_Z = 5;\r\n}\r\n@:expose(\"minko.render.CubeTexture\")\r\nclass CubeTexture extends AbstractTexture {\r\n    private var _data:Array<Bytes> ; // pixel RGBA data indexed by face index\r\n    private var _faceWidth:Int; // power of two\r\n    private var _faceHeight:Int; // power of two\r\n\r\n\r\n    public static function create(context:AbstractContext, width:Int, height:Int, ? mipMapping = false, ?optimizeForRenderToTexture = false, ?resizeSmoothly = true, ?format = TextureFormat.RGBA, ?filename = \"\") {\r\n\r\n        return new CubeTexture(context, width, height, format, mipMapping, optimizeForRenderToTexture, resizeSmoothly, filename);\r\n    }\r\n\r\n    public function new(context:AbstractContext, width:Int, height:Int, format = TextureFormat.RGBA, mipMapping = false, optimizeForRenderToTexture = false, resizeSmoothly = true, filename = \"\") {\r\n        super(\r\n            TextureType.CubeTexture,\r\n            context,\r\n            width,\r\n            height,\r\n            format,\r\n            mipMapping,\r\n            optimizeForRenderToTexture,\r\n            resizeSmoothly,\r\n            filename\r\n        );\r\n        _data = [];//(6))\r\n        // keep only the GPU relevant size of each face\r\n        _widthGPU = Math.floor(Math.min(MathUtil.clp2(width), MAX_SIZE));\r\n        _heightGPU = Math.floor(Math.min(MathUtil.clp2(height), MAX_SIZE));\r\n    }\r\n\r\n    public function setData(data:Bytes, face:Face, widthGPU = -1, heightGPU = -1) {\r\n//Debug.Assert(math.GlobalMembers.isp2(_widthGPU) && math.GlobalMembers.isp2(_heightGPU));\r\n\r\n        _data[ face] = AbstractTexture.resizeData(_width, _height, data, _widthGPU, _heightGPU, _resizeSmoothly);\r\n    }\r\n\r\n    public override function resize(width, height, resizeSmoothly) {\r\n//Debug.Assert(math.GlobalMembers.isp2(width) && math.GlobalMembers.isp2(height));\r\n\r\n        var previousWidth = this.width;\r\n        var previousHeight = this.height;\r\n\r\n        for (faceId in 0... 6) {\r\n            var previousData = _data[faceId];\r\n\r\n            _data[faceId] = AbstractTexture.resizeData(previousWidth, previousHeight, previousData, width, height, resizeSmoothly);\r\n        }\r\n\r\n        _width = width << 2;\r\n        _widthGPU = width;\r\n\r\n        _height = height * 3;\r\n        _heightGPU = height;\r\n    }\r\n\r\n    public function uploadMipLevel(level, data, face) {\r\n        var width = (_widthGPU >> level);\r\n        var height = (_heightGPU >> level);\r\n\r\n        _context.uploadCubeTextureData(_id, face, width, height, level, data);\r\n    }\r\n\r\n    public override function upload() {\r\n        if (_id == -1) {\r\n            id = _context.createTexture(_type, _widthGPU, _heightGPU, _mipMapping, _optimizeForRenderToTexture);\r\n        }\r\n\r\n        var numFacePixels = _widthGPU * _heightGPU;\r\n        if (numFacePixels == 0) {\r\n            return;\r\n        }\r\n\r\n        for (faceId in 0...6) {\r\n            var faceData:Bytes = _data[faceId];\r\n\r\n//Debug.Assert(faceData.Count == (numFacePixels << 2));\r\n\r\n            var face:Face = faceId;\r\n\r\n            _context.uploadCubeTextureData(_id, face, _widthGPU, _heightGPU, 0, faceData);\r\n        }\r\n\r\n        //if (_mipMapping)\r\n        //      _context.generateMipmaps(_id);\r\n    }\r\n\r\n    public override function dispose() {\r\n        if (_id != -1) {\r\n            _context.deleteTexture(_id);\r\n            id = -1;\r\n        }\r\n\r\n        disposeData();\r\n    }\r\n\r\n    public override function disposeData() {\r\n        for (face in _data) {\r\n        }\r\n        _data = null;\r\n    }\r\n\r\n\r\n}\r\n","package minko.render;\r\nimport minko.signal.Signal3;\r\nimport minko.data.UnsafePointer;\r\nimport Array;\r\nimport glm.Mat4;\r\nimport glm.Vec2;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport haxe.ds.StringMap;\r\nimport minko.component.Renderer.EffectVariables;\r\nimport minko.data.Binding;\r\nimport minko.data.Provider;\r\nimport minko.data.ResolvedBinding;\r\nimport minko.data.Store;\r\nimport minko.render.Blending.Destination;\r\nimport minko.render.Blending.Source;\r\nimport minko.render.ProgramInputs.AttributeInput;\r\nimport minko.render.ProgramInputs.UniformInput;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.utils.MathUtil;\r\nimport minko.Uuid.Enable_uuid;\r\ntypedef ConstUniformInputRef = UniformInput ;\r\ntypedef ConstAttrInputRef = AttributeInput ;\r\n@:expose(\"minko.render.UniformValue\")\r\nclass UniformValue<T> {\r\n    public var location:Int;\r\n    public var size:Int;\r\n    public var count:Int;\r\n\r\n    public var data:UnsafePointer<Dynamic>;//记录原值\r\n    function get_dataArray(){\r\n        return data.arrayBuffer();\r\n    }\r\n    public function new(location:Int, size:Int, count:Int ) {\r\n        this.location = location;\r\n        this.size = size;\r\n        this.count = count;\r\n    }\r\n\r\n}\r\n\r\n@:expose(\"minko.render.SamplerValue\")\r\nclass SamplerValue {\r\n    public var position:Int;\r\n    public var sampler(get,null):TextureSampler;\r\n    public var location:Int;\r\n    public var texture:UnsafePointer<Texture>;\r\n    public var wrapMode:UnsafePointer<WrapMode>;\r\n    public var textureFilter:UnsafePointer<TextureFilter>;\r\n    public var mipFilter:UnsafePointer<MipFilter>;\r\n    function get_sampler(){\r\n        return texture.value.sampler;\r\n    }\r\n    public function new(position:Int, texture:UnsafePointer<Texture>, location:Int) {\r\n        this.position = position;\r\n        this.location = location;\r\n        this.texture = texture;\r\n    }\r\n    //TextureType* type;\r\n}\r\n//todo 这里要进行一下 data Void->T类型 到Array转换  //mat vec one\r\n@:expose(\"minko.render.AttributeValue\")\r\nclass AttributeValue {\r\n    public var location:Int;\r\n    public var resourceId:Int;\r\n    public var size:Int;\r\n    public var stride:Int;\r\n    public var offset:Int;\r\n\r\n    public function new(location, resourceId, size, vertexSize, offset) {\r\n        this.location = location;\r\n        this.resourceId = resourceId;\r\n        this.size = size;\r\n        this.stride = vertexSize;\r\n        this.offset = offset;\r\n    }\r\n}\r\n@:expose(\"minko.render.DrawCall\")\r\nclass DrawCall extends Enable_uuid {\r\n    public static inline var MAX_NUM_TEXTURES = 8;\r\n    public static inline var MAX_NUM_VERTEXBUFFERS = 8;\r\n\r\n    private var _enabled:Bool;\r\n\r\n    private var _batchIDs:Array<Int>;\r\n    private var _pass:Pass;\r\n    private var _rootData:Store;\r\n    private var _rendererData:Store;\r\n    private var _targetData:Store;\r\n    private var _variables:EffectVariables;\r\n\r\n    private var _program:Program;\r\n    //geo indexBuffer\r\n    private var _indexBuffer:UnsafePointer<Int>;\r\n    private var _firstIndex:UnsafePointer<Int>;\r\n    private var _numIndices:UnsafePointer<Int>;\r\n\r\n    //uniform\r\n    private var _uniformInt:Array<UniformValue<Int>>;\r\n    private var _uniformFloat:Array<UniformValue<Float>> ;\r\n    private var _uniformBool:Array<UniformValue<Int>>;\r\n    //samplers\r\n    private var _samplers:Array<SamplerValue>;\r\n    //attributes geo vert Buffer\r\n    private var _attributes:Array<AttributeValue>;\r\n\r\n    //context state\r\n    private var _priority:UnsafePointer<Float>;\r\n    private var _zSorted:UnsafePointer<Bool>;\r\n    private var _blendingSourceFactor:UnsafePointer<Source>;\r\n    private var _blendingDestinationFactor:UnsafePointer<Destination>;\r\n    private var _colorMask:UnsafePointer<Bool>;\r\n    private var _depthMask:UnsafePointer<Bool>;\r\n    private var _depthFunc:UnsafePointer<CompareMode>;\r\n    private var _triangleCulling:UnsafePointer<TriangleCulling>;\r\n    private var _stencilFunction:UnsafePointer<CompareMode>;\r\n    private var _stencilReference:UnsafePointer<Int>;\r\n    private var _stencilMask:UnsafePointer<Int>;\r\n    private var _stencilFailOp:UnsafePointer<StencilOperation>;\r\n    private var _stencilZFailOp:UnsafePointer<StencilOperation>;\r\n    private var _stencilZPassOp:UnsafePointer<StencilOperation>;\r\n    private var _scissorTest:UnsafePointer<Bool>;\r\n    private var _scissorBox:UnsafePointer<Vec4>;\r\n    private var _target:UnsafePointer<Texture> ;\r\n\r\n    // Positional members\r\n    private var _centerPosition:UnsafePointer<Vec3>;\r\n    private var _modelToWorldMatrix:UnsafePointer<Mat4>;\r\n    private var _worldToScreenMatrix:UnsafePointer<Mat4>;\r\n\r\n    private var _modelToWorldMatrixPropertyAddedSlot:SignalSlot3<Store, Provider, String>;\r\n    private var _worldToScreenMatrixPropertyAddedSlot:SignalSlot3<Store, Provider, String>;\r\n    private var _modelToWorldMatrixPropertyRemovedSlot:SignalSlot3<Store, Provider, String>;\r\n    private var _worldToScreenMatrixPropertyRemovedSlot:SignalSlot3<Store, Provider, String>;\r\n\r\n    private var _vertexAttribArray:Int;\r\n\r\n    public function new(batchId:Int, pass:Pass, variables:EffectVariables, rootData:Store, rendererData:Store, targetData:Store) {\r\n\r\n        this._enabled = true;\r\n        this._pass = pass;\r\n        this._rootData = (rootData);\r\n        this._rendererData = (rendererData);\r\n        this._targetData = (targetData);\r\n\r\n\r\n        this._variables = variables;\r\n        this._indexBuffer = null;\r\n        this._firstIndex = null;\r\n        this._numIndices = null;\r\n        this._priority = new UnsafePointer(States.DEFAULT_PRIORITY);\r\n        this._zSorted = new UnsafePointer(States.DEFAULT_ZSORTED);\r\n        this._blendingSourceFactor =  new UnsafePointer(States.DEFAULT_BLENDING_SOURCE);\r\n        this._blendingDestinationFactor =  new UnsafePointer(States.DEFAULT_BLENDING_DESTINATION);\r\n        this._colorMask =  new UnsafePointer(States.DEFAULT_COLOR_MASK);\r\n        this._depthMask =  new UnsafePointer(States.DEFAULT_DEPTH_MASK);\r\n        this._depthFunc =  new UnsafePointer(States.DEFAULT_DEPTH_FUNCTION);\r\n        this._triangleCulling =  new UnsafePointer(States.DEFAULT_TRIANGLE_CULLING);\r\n        this._stencilFunction =  new UnsafePointer(States.DEFAULT_STENCIL_FUNCTION);\r\n        this._stencilReference =  new UnsafePointer(States.DEFAULT_STENCIL_REFERENCE);\r\n        this._stencilMask =  new UnsafePointer(States.DEFAULT_STENCIL_MASK);\r\n        this._stencilFailOp =  new UnsafePointer(States.DEFAULT_STENCIL_FAIL_OPERATION);\r\n        this._stencilZFailOp =  new UnsafePointer(States.DEFAULT_STENCIL_ZFAIL_OPERATION);\r\n        this._stencilZPassOp =  new UnsafePointer(States.DEFAULT_STENCIL_ZPASS_OPERATION);\r\n        this._scissorTest =  new UnsafePointer(States.DEFAULT_SCISSOR_TEST);\r\n        this._scissorBox =  new UnsafePointer(States.DEFAULT_SCISSOR_BOX);\r\n        this._target =  new UnsafePointer(States.DEFAULT_TARGET);\r\n        this._centerPosition =  new UnsafePointer(new Vec3());\r\n        this._modelToWorldMatrix = null;\r\n        this._worldToScreenMatrix = null;\r\n        this._modelToWorldMatrixPropertyRemovedSlot = null;\r\n        this._worldToScreenMatrixPropertyRemovedSlot = null;\r\n        this._vertexAttribArray = 0;\r\n        this._batchIDs = [batchId];\r\n        this._uniformFloat = [];\r\n        this._uniformInt = [];\r\n        this._uniformBool = [];\r\n        this._samplers = [];\r\n        this._attributes = [];\r\n        // For Z-sorting\r\n        bindPositionalMembers();\r\n        super();\r\n        enable_uuid();\r\n    }\r\n\r\n    public function dispose() {\r\n        this._pass = null;\r\n        this._rootData = null;\r\n        this._rendererData = null;\r\n        this._targetData = null;\r\n        this._variables = null;\r\n        if (_modelToWorldMatrixPropertyAddedSlot != null) _modelToWorldMatrixPropertyAddedSlot.dispose();\r\n        if (_worldToScreenMatrixPropertyAddedSlot != null) _worldToScreenMatrixPropertyAddedSlot.dispose();\r\n        if (_modelToWorldMatrixPropertyRemovedSlot != null) _modelToWorldMatrixPropertyRemovedSlot.dispose();\r\n        if (_worldToScreenMatrixPropertyRemovedSlot != null) _worldToScreenMatrixPropertyRemovedSlot.dispose();\r\n        _modelToWorldMatrixPropertyAddedSlot=null;\r\n        _worldToScreenMatrixPropertyAddedSlot=null;\r\n        _modelToWorldMatrixPropertyRemovedSlot=null;\r\n        _worldToScreenMatrixPropertyRemovedSlot=null;\r\n\r\n    }\r\n    public var enabled(get, set):Bool;\r\n\r\n    function get_enabled() {\r\n        return _enabled;\r\n    }\r\n\r\n    function set_enabled(value) {\r\n        _enabled = value;\r\n        return value;\r\n    }\r\n    public var batchIDs(get, null):Array<Int>;\r\n\r\n    function get_batchIDs() {\r\n        return _batchIDs;\r\n    }\r\n    public var pass(get, null):Pass;\r\n\r\n    function get_pass() {\r\n        return _pass;\r\n    }\r\n\r\n    public var program(get, null):Program;\r\n\r\n    function get_program() {\r\n        return _program;\r\n    }\r\n    public var variables(get, set):EffectVariables;\r\n\r\n    function set_variables(v) {\r\n        _variables = v;\r\n        return v;\r\n    }\r\n\r\n    function get_variables() {\r\n        return _variables;\r\n    }\r\n    public var rootData(get, null):Store;\r\n\r\n    function get_rootData() {\r\n        return _rootData;\r\n    }\r\n    public var rendererData(get, null):Store;\r\n\r\n    function get_rendererData() {\r\n        return _rendererData;\r\n    }\r\n    public var targetData(get, null):Store;\r\n\r\n    function get_targetData() {\r\n        return _targetData;\r\n    }\r\n\r\n    public var boundBoolUniforms(get, null):Array<UniformValue<Int>>;\r\n\r\n    function get_boundBoolUniforms() {\r\n        return _uniformBool;\r\n    }\r\n\r\n    public var boundIntUniforms(get, null):Array<UniformValue<Int>>;\r\n\r\n    function get_boundIntUniforms() {\r\n        return _uniformInt;\r\n    }\r\n    public var boundFloatUniforms(get, null):Array<UniformValue<Float>>;\r\n\r\n    function get_boundFloatUniforms() {\r\n        return _uniformFloat;\r\n    }\r\n    public var samplers(get, null):Array<SamplerValue>;\r\n\r\n    function get_samplers() {\r\n        return _samplers;\r\n    }\r\n\r\n    public var priority(get, null):Float;\r\n\r\n    function get_priority() {\r\n        return _priority.value;\r\n    }\r\n\r\n    public var zSorted(get, null):Bool;\r\n\r\n    function get_zSorted() {\r\n        if (_zSorted.value) {\r\n            return _zSorted.value;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    public var blendingSource(get, null):Source;\r\n\r\n    function get_blendingSource() {\r\n        return _blendingSourceFactor.value;\r\n    }\r\n\r\n    public var blendingDestination(get, null):Destination;\r\n\r\n    function get_blendingDestination() {\r\n        return _blendingDestinationFactor.value;\r\n    }\r\n\r\n    public var colorMask(get, null):Bool;\r\n\r\n    function get_colorMask() {\r\n        return _colorMask.value;\r\n    }\r\n\r\n    public var depthMask(get, null):Bool;\r\n\r\n    function get_depthMask() {\r\n        return _depthMask.value;\r\n    }\r\n\r\n    public var depthFunction(get, null):CompareMode;\r\n\r\n    function get_depthFunction() {\r\n        return _depthFunc.value;\r\n    }\r\n\r\n    public var triangleCulling(get, null):TriangleCulling;\r\n\r\n    function get_triangleCulling() {\r\n        return _triangleCulling.value;\r\n    }\r\n\r\n    public var stencilFunction(get, null):CompareMode;\r\n\r\n    function get_stencilFunction() {\r\n        return _stencilFunction.value;\r\n    }\r\n\r\n    public var stencilReference(get, null):Int;\r\n\r\n    function get_stencilReference() {\r\n        return _stencilReference.value;\r\n    }\r\n\r\n    public var stencilMask(get, null):Int;\r\n\r\n    function get_stencilMask() {\r\n        return _stencilMask.value;\r\n    }\r\n    public var stencilFailOperation(get, null):StencilOperation;\r\n\r\n    function get_stencilFailOperation() {\r\n        return _stencilFailOp.value;\r\n    }\r\n\r\n    public var stencilZFailOperation(get, null):StencilOperation;\r\n\r\n    function get_stencilZFailOperation() {\r\n        return _stencilZFailOp.value;\r\n    }\r\n\r\n    public var stencilZPassOperation(get, null):StencilOperation;\r\n\r\n    function get_stencilZPassOperation() {\r\n        return _stencilZPassOp.value;\r\n    }\r\n\r\n    public var scissorTest(get, null):Bool;\r\n\r\n    function get_scissorTest() {\r\n        return _scissorTest.value;\r\n    }\r\n\r\n    public var scissorBox(get, null):Vec4;\r\n\r\n    function get_scissorBox() {\r\n        return _scissorBox.value;\r\n    }\r\n    public var target(get, null):Texture ;\r\n\r\n    function get_target() {\r\n        return _target.value;\r\n    }\r\n    public var numTriangles(get, null):Int;\r\n\r\n    function get_numTriangles() {\r\n        return _numIndices != null ? Math.floor(_numIndices.value / 3) : 0;\r\n    }\r\n\r\n    public function bind(program:Program) {\r\n        reset();\r\n        _program = program;\r\n\r\n        // bindIndexBuffer();\r\n        // bindStates();\r\n        //bindUniforms();\r\n        // bindAttributes();\r\n    }\r\n\r\n    public function render(context:AbstractContext, renderTarget:AbstractTexture, viewport:Vec4, clearColor:Int) {\r\n        if (!this.enabled) {\r\n            return;\r\n        }\r\n\r\n        context.setProgram(_program.id);\r\n\r\n        var hasOwnTarget = _target != null &&_target.value!=null&& _target.value.id != 0;\r\n        var renderTargetId = hasOwnTarget ? _target.value.id : (renderTarget != null ? renderTarget.id : 0);\r\n        var targetChanged = false;\r\n\r\n        if (renderTargetId != 0) {\r\n            if (renderTargetId != context.renderTarget) {\r\n                context.setRenderToTexture(renderTargetId, true);\r\n\r\n                if (hasOwnTarget) {\r\n                    context.clear(((clearColor >> 24) & 0xff) / 255.0, ((clearColor >> 16) & 0xff) / 255.0, ((clearColor >> 8) & 0xff) / 255.0, (clearColor & 0xff) / 255.0);\r\n                }\r\n\r\n                targetChanged = true;\r\n            }\r\n        }\r\n        else {\r\n            context.setRenderToBackBuffer();\r\n        }\r\n\r\n        if (targetChanged && !hasOwnTarget && viewport.z >= 0 && viewport.w >= 0) {\r\n            context.configureViewport(Math.floor(viewport.x), Math.floor(viewport.y), Math.floor(viewport.z), Math.floor(viewport.w));\r\n        }\r\n\r\n\r\n        for (u in _uniformBool) {\r\n\r\n            if (u.size == 1) {\r\n                context.setUniformInt(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 2) {\r\n                context.setUniformInt2(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 3) {\r\n                context.setUniformInt3(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 4) {\r\n                context.setUniformInt4(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n        }\r\n\r\n        for (u in _uniformInt) {\r\n            if (u.size == 1) {\r\n                context.setUniformInt(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 2) {\r\n                context.setUniformInt2(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 3) {\r\n                context.setUniformInt3(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 4) {\r\n                context.setUniformInt4(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n        }\r\n\r\n\r\n        for (u in _uniformFloat) {\r\n            if (u.size == 1) {\r\n                context.setUniformFloat(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 2) {\r\n                context.setUniformFloat2(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 3) {\r\n                context.setUniformFloat3(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 4) {\r\n                context.setUniformFloat4(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n            else if (u.size == 16) {\r\n                context.setUniformMatrix4x4(u.location, u.count, u.data.arrayBuffer());\r\n            }\r\n        }\r\n\r\n        for (s in _samplers) {\r\n            context.setTextureAt(s.position, s.sampler.id, s.location);\r\n            context.setSamplerStateAt(s.position, s.wrapMode.value, s.textureFilter.value, s.mipFilter.value);\r\n        }\r\n/*\r\n        if (_vertexAttribArray == 0) {\r\n            _vertexAttribArray = context.createVertexAttributeArray();\r\n\r\n            if (_vertexAttribArray != -1) {\r\n                context.setVertexAttributeArray(_vertexAttribArray);\r\n                for (a in _attributes) {\r\n                    context.setVertexBufferAt(a.location, a.resourceId, a.size, a.stride, a.offset);\r\n                }\r\n            }\r\n        }\r\n        if (_vertexAttribArray != -1) {\r\n            context.setVertexAttributeArray(_vertexAttribArray);\r\n        }\r\n        else {\r\n        */\r\n        for (a in _attributes) {\r\n            context.setVertexBufferAt(a.location, a.resourceId, a.size, a.stride, a.offset);\r\n        }\r\n        //    }\r\n\r\n        context.setColorMask(_colorMask.value);\r\n        context.setBlendingModeSD(_blendingSourceFactor.value, _blendingDestinationFactor.value);\r\n        context.setDepthTest(_depthMask.value, _depthFunc.value);\r\n        context.setStencilTest(_stencilFunction.value, _stencilReference.value, _stencilMask.value, _stencilFailOp.value, _stencilZFailOp.value, _stencilZPassOp.value);\r\n        context.setScissorTest(_scissorTest.value, _scissorBox.value);\r\n        context.setTriangleCulling(_triangleCulling.value);\r\n\r\n        if (!_pass.isForward) {\r\n            context.drawTriangles(0, 2);\r\n        }\r\n        else {\r\n            context.drawIndexBufferTriangles(_indexBuffer.value, _firstIndex.value, Math.floor(_numIndices.value / 3));\r\n        }\r\n    }\r\n\r\n    public function bindAttribute(input:ConstAttrInputRef, attributeBindings:StringMap< Binding>, defaultValues:Store) {\r\n        var binding:ResolvedBinding = resolveBinding(input.name, attributeBindings);\r\n\r\n        if (binding == null) {\r\n            if (!defaultValues.hasProperty(input.name)) {\r\n\r\n                var it = Lambda.has(_program.setAttributeNames, input.name);\r\n\r\n                if (it == false) {\r\n                    trace(\"Program \\\"\" + _program.name + \"\\\": the attribute \\\"\" + input.name + \"\\\" is not bound, has not been set and no default value was provided.\");\r\n\r\n                    throw (\"Program \\\"\" + _program.name + \"\\\": the attribute \\\"\" + input.name + \"\\\" is not bound, has not been set and no default value was provided.\");\r\n                }\r\n\r\n                setAttributeValueFromStore(input, input.name, defaultValues);\r\n            }\r\n        }\r\n        else {\r\n            #if DEBUG\r\n\t\t\tauto setAttributes = _program.setAttributeNames();\r\n\r\n\t\t\tif (std::find(setAttributes.begin(), setAttributes.end(), input.name) != setAttributes.end())\r\n\t\t\t{\r\n\t\t\t\tLOG_WARNING(\"Program \\\"\" + _program.name() + \"\\\", vertex attribute \\\"\" + input.name + \"\\\" set manually but overriden by a binding to the \\\"\" + binding.propertyName + \"\\\" property.\");\r\n\t\t\t}\r\n\t#end\r\n\r\n            if (!binding.store.hasProperty(binding.propertyName)) {\r\n                if (!defaultValues.hasProperty(input.name)) {\r\n\r\n                    trace(\"Program \\\"\" + _program.name + \"\\\": the attribute \\\"\" + input.name + \"\\\" is bound to the \\\"\" + binding.propertyName + \"\\\" property but it's not defined and no default value was provided.\");\r\n\r\n                    throw (\"Program \\\"\" + _program.name + \"\\\": the attribute \\\"\" + input.name + \"\\\" is bound to the \\\"\" + binding.propertyName + \"\\\" property but it's not defined and no default value was provided.\");\r\n                }\r\n\r\n                setAttributeValueFromStore(input, input.name, defaultValues);\r\n            }\r\n            else {\r\n                setAttributeValueFromStore(input, binding.propertyName, binding.store);\r\n            }\r\n\r\n            binding = null;\r\n        }\r\n    }\r\n\r\n    public function bindUniform(input:ConstUniformInputRef, uniformBindings:StringMap< Binding>, defaultValues:Store):ResolvedBinding {\r\n        var binding:ResolvedBinding = resolveBinding(input.name, uniformBindings);\r\n\r\n        if (binding == null) {\r\n            if (!defaultValues.hasProperty(input.name)) {\r\n                var it = Lambda.has(_program.setUniformNames, input.name);\r\n\r\n                if (it == false) {\r\n                    trace(\"Program \\\"\" + _program.name + \"\\\": the uniform \\\"\" + input.name + \"\\\" is not bound, has not been set and no default value was provided.\");\r\n\r\n                    throw (\"Program \\\"\" + _program.name + \"\\\": the uniform \\\"\" + input.name + \"\\\" is not bound, has not been set and no default value was provided.\");\r\n                }\r\n            }\r\n\r\n            setUniformValueFromStore(input, input.name, defaultValues);\r\n        }\r\n        else {\r\n            if (!binding.store.hasProperty(binding.propertyName)) {\r\n                if (!defaultValues.hasProperty(input.name)) {\r\n\r\n                    trace(\"Program \\\"\" + _program.name + \"\\\": the uniform \\\"\" + input.name + \"\\\" is bound to the \\\"\" + binding.propertyName + \"\\\" property but it's not defined and no default value was provided.\");\r\n\r\n                    throw (\"Program \\\"\" + _program.name + \"\\\": the uniform \\\"\" + input.name + \"\\\" is bound to the \\\"\" + binding.propertyName + \"\\\" property but it's not defined and no default value was provided.\");\r\n                }\r\n                else {\r\n                    setUniformValueFromStore(input, input.name, defaultValues);\r\n                }\r\n            }\r\n            else {\r\n                setUniformValueFromStore(input, binding.propertyName, binding.store);\r\n            }\r\n        }\r\n\r\n        return binding;\r\n    }\r\n\r\n    public function bindSamplerStates(input:ConstUniformInputRef, uniformBindings:StringMap< Binding>, defaultValues:Store):Array<ResolvedBinding> {\r\n        var wrapModeBinding = bindSamplerState(input, uniformBindings, defaultValues, SamplerStates.PROPERTY_WRAP_MODE);\r\n        var textureFilterBinding = bindSamplerState(input, uniformBindings, defaultValues, SamplerStates.PROPERTY_TEXTURE_FILTER);\r\n        var mipFilterBinding = bindSamplerState(input, uniformBindings, defaultValues, SamplerStates.PROPERTY_MIP_FILTER);\r\n\r\n        var samplerStatesResolveBindings:Array<ResolvedBinding> = [wrapModeBinding, textureFilterBinding, mipFilterBinding];\r\n\r\n        return samplerStatesResolveBindings;\r\n    }\r\n    function bindSamplerState(input:ConstUniformInputRef, uniformBindings:StringMap< Binding>, defaultValues:Store, samplerStateProperty:String) {\r\n        if (samplerStateProperty == SamplerStates.PROPERTY_WRAP_MODE || samplerStateProperty == SamplerStates.PROPERTY_TEXTURE_FILTER || samplerStateProperty == SamplerStates.PROPERTY_MIP_FILTER) {\r\n            var samplerStateUniformName = SamplerStates.uniformNameToSamplerStateName(input.name, samplerStateProperty);\r\n\r\n            var binding:ResolvedBinding = resolveBinding(samplerStateUniformName, uniformBindings);\r\n\r\n            if (binding == null) {\r\n                setSamplerStateValueFromStore(input, samplerStateUniformName, defaultValues, samplerStateProperty);\r\n            }\r\n            else {\r\n                if (!binding.store.hasProperty(binding.propertyName)) {\r\n                    setSamplerStateValueFromStore(input, samplerStateUniformName, defaultValues, samplerStateProperty);\r\n                }\r\n                else {\r\n                    setSamplerStateValueFromStore(input, binding.propertyName, binding.store, samplerStateProperty);\r\n                }\r\n            }\r\n\r\n            return binding;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public function bindStates(stateBindings:StringMap<Binding>, defaultValues:Store) {\r\n        var statesResolveBindings:Array<ResolvedBinding> =\r\n        [bindState(States.PROPERTY_PRIORITY, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_ZSORTED, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_BLENDING_SOURCE, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_BLENDING_DESTINATION, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_COLOR_MASK, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_DEPTH_MASK, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_DEPTH_FUNCTION, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_TRIANGLE_CULLING, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_STENCIL_FUNCTION, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_STENCIL_REFERENCE, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_STENCIL_MASK, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_STENCIL_FAIL_OPERATION, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_STENCIL_ZFAIL_OPERATION, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_STENCIL_ZPASS_OPERATION, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_SCISSOR_TEST, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_SCISSOR_BOX, stateBindings, defaultValues),\r\n        bindState(States.PROPERTY_TARGET, stateBindings, defaultValues)];\r\n\r\n        return statesResolveBindings;\r\n    }\r\n\r\n    public function bindState(stateName:String, bindings:StringMap<Binding>, defaultValues:Store) {\r\n        var binding:ResolvedBinding = resolveBinding(stateName, bindings);\r\n\r\n        if (binding == null) {\r\n            setStateValueFromStore(stateName, defaultValues);\r\n        }\r\n        else {\r\n            if (!binding.store.hasProperty(binding.propertyName)) {\r\n                setStateValueFromStore(stateName, defaultValues);\r\n            }\r\n            else {\r\n                setStateValueFromStore(stateName, binding.store);\r\n            }\r\n        }\r\n\r\n        return binding;\r\n    }\r\n\r\n    public function bindPositionalMembers() {\r\n        if (_targetData.hasProperty(\"centerPosition\")) {\r\n            _centerPosition = _targetData.getUnsafePointer(\"centerPosition\");\r\n        }\r\n\r\n        if (_targetData.hasProperty(\"modelToWorldMatrix\")) {\r\n            _modelToWorldMatrix = _targetData.getUnsafePointer(\"modelToWorldMatrix\");\r\n        }\r\n        else {\r\n//            _modelToWorldMatrixPropertyAddedSlot = _targetData.getPropertyAdded(\"modelToWorldMatrix\").connect(\r\n//                function(UnnamedParameter1, UnnamedParameter2, UnnamedParameter3) {\r\n//                    _modelToWorldMatrix = _targetData.getUnsafePointer(\"modelToWorldMatrix\");\r\n//                });\r\n        }\r\n\r\n        if (_rendererData.hasProperty(\"worldToScreenMatrix\")) {\r\n            _worldToScreenMatrix = _rendererData.getUnsafePointer(\"worldToScreenMatrix\");\r\n        }\r\n        else {\r\n//            _worldToScreenMatrixPropertyAddedSlot = _rendererData.getPropertyAdded(\"worldToScreenMatrix\").connect(\r\n//                function(store, data, UnnamedParameter1) {\r\n//                    _worldToScreenMatrix = _rendererData.getUnsafePointer(\"worldToScreenMatrix\");\r\n//                });\r\n        }\r\n\r\n        // Removed slot\r\n//        _modelToWorldMatrixPropertyRemovedSlot = _targetData.getPropertyRemoved(\"modelToWorldMatrix\").connect(\r\n//            function(UnnamedParameter1, UnnamedParameter2, UnnamedParameter3) {\r\n//                _modelToWorldMatrix = null;\r\n//            });\r\n//\r\n//        _worldToScreenMatrixPropertyRemovedSlot = _rendererData.getPropertyRemoved(\"worldToScreenMatrix\").connect(\r\n//            function(store, data, UnnamedParameter1) {\r\n//                _worldToScreenMatrix = null;\r\n//            });\r\n    }\r\n\r\n    public function bindIndexBuffer() {\r\n        var indexBufferProperty = Store.getActualPropertyName(_variables, \"geometry[@{geometryUuid}].indices\");\r\n\r\n        if (_targetData.hasProperty(indexBufferProperty)) {\r\n            _indexBuffer = _targetData.getUnsafePointer(indexBufferProperty);\r\n        }else{\r\n            throw \"no  _indexBuffer \";\r\n        }\r\n\r\n        var surfaceFirstIndexProperty = Store.getActualPropertyName(_variables, \"surface[@{surfaceUuid}].firstIndex\");\r\n\r\n        if (!_targetData.hasProperty(surfaceFirstIndexProperty)) {\r\n            var geometryFirstIndexProperty = Store.getActualPropertyName(_variables, \"geometry[@{geometryUuid}].firstIndex\");\r\n\r\n            if (_targetData.hasProperty(geometryFirstIndexProperty)) {\r\n                _firstIndex = _targetData.getUnsafePointer(geometryFirstIndexProperty);\r\n            }\r\n        }\r\n        else {\r\n            _firstIndex = _targetData.getUnsafePointer(surfaceFirstIndexProperty);\r\n        }\r\n\r\n        var surfaceNumIndicesProperty = Store.getActualPropertyName(_variables, \"surface[@{surfaceUuid}].numIndices\");\r\n\r\n        if (!_targetData.hasProperty(surfaceNumIndicesProperty)) {\r\n            var geometryNumIndicesProperty = Store.getActualPropertyName(_variables, \"geometry[@{geometryUuid}].numIndices\");\r\n\r\n            if (_targetData.hasProperty(geometryNumIndicesProperty)) {\r\n                _numIndices = _targetData.getUnsafePointer(geometryNumIndicesProperty);\r\n            }\r\n        }\r\n        else {\r\n            _numIndices = _targetData.getUnsafePointer(surfaceNumIndicesProperty);\r\n        }\r\n    }\r\n\r\n    public function getEyeSpacePosition() {\r\n        var modelView:Mat4 = Mat4.identity(new Mat4());\r\n\r\n        if (_modelToWorldMatrix != null) {\r\n            modelView = _modelToWorldMatrix.value;\r\n        }\r\n        //math\r\n        if (_worldToScreenMatrix != null) {\r\n            modelView = _worldToScreenMatrix.value * (modelView) ;\r\n        }\r\n\r\n        var tmp:Vec4 = modelView * (new Vec4(_centerPosition.value.x, _centerPosition.value.y, _centerPosition.value.z, 1));\r\n        return MathUtil.vec4_vec3(tmp);\r\n    }\r\n\r\n    public function initializeOnContext(context:AbstractContext) {\r\n\r\n    }\r\n\r\n    private function reset() {\r\n        _program = null;\r\n        _indexBuffer = null;\r\n        _firstIndex = null;\r\n        _numIndices = null;\r\n        _uniformFloat = [];\r\n        _uniformInt = [];\r\n        _uniformBool = [];\r\n        _samplers = [];\r\n        _attributes = [];\r\n        _vertexAttribArray = 0;\r\n    }\r\n\r\n    function getStore(source:minko.data.Binding.Source) {\r\n        switch (source)\r\n        {\r\n            case minko.data.Binding.Source.ROOT:\r\n                return _rootData;\r\n            case minko.data.Binding.Source.RENDERER:\r\n                return _rendererData;\r\n            case minko.data.Binding.Source.TARGET:\r\n                return _targetData;\r\n        }\r\n\r\n        throw \"\";\r\n    }\r\n\r\n    function resolveBinding(inputName:String, bindings:StringMap< Binding>):ResolvedBinding {\r\n        var isCollection = false;\r\n        var bindingName = inputName;\r\n        var isArray = inputName.charAt(inputName.length - 1) == ']';\r\n        var pos = bindingName.indexOf('[');\r\n\r\n        if (!isArray && pos != -1) {\r\n            bindingName = bindingName.substr(0, pos);\r\n            isCollection = true;\r\n        }\r\n\r\n        var binding:Binding = null;\r\n        var bindingPropertyName:String = \"\";\r\n\r\n        // Some OpenGL drivers will provide uniform array names without the \"[0]\" suffix. In order to properly match uniform array\r\n        // bindings, we will check for bindings with 1) the original name first but also 2) the named with the \"[0]\" suffix appened.\r\n        if (bindings.exists(bindingName) || (!isArray && bindings.exists(bindingName + \"[0]\") )) {\r\n            binding = bindings.get(bindingName);\r\n            bindingPropertyName = binding.propertyName;\r\n            // isCollection = isCollection && bindingPropertyName.find_first_of('[') == std::string::npos;\r\n        }\r\n        // else\r\n        // {\r\n        //     for (const auto& inputNameAndBinding : bindings)\r\n        //     {\r\n        //         std::regex r(inputNameAndBinding.first);\r\n        //\r\n        //         if (std::regex_match(inputName, r))\r\n        //         {\r\n        //             bindingPropertyName = std::regex_replace(inputName, r, inputNameAndBinding.second.propertyName);\r\n        //             binding = &inputNameAndBinding.second;\r\n        //             isCollection = false;\r\n        //             break;\r\n        //         }\r\n        //     }\r\n\r\n        if (binding == null) {\r\n            return null;\r\n        }\r\n        // }\r\n\r\n        var store:Store = getStore(binding.source);\r\n        var propertyName = Store.getActualPropertyName(_variables, bindingPropertyName);\r\n\r\n        // FIXME: handle uniforms with struct types\r\n\r\n        // FIXME: we assume the uniform is an array of struct or the code to be irrelevantly slow here\r\n        // uniform arrays of non-struct types should be detected and handled as such using a single call\r\n        // to the context providing the direct pointer to the contiguous stored data\r\n\r\n        // FIXME: handle per-fields bindings instead of using the raw uniform suffix\r\n        if (isCollection && !isArray) {\r\n            propertyName += inputName.substr(pos);\r\n        }\r\n\r\n        return new ResolvedBinding(binding, propertyName, store);\r\n    }\r\n\r\n\r\n    function setUniformValueFromStore(input:UniformInput, propertyName:String, store:Store) {\r\n        var isArray:Bool = input.name.charAt(input.name.length - 1) == ']';\r\n        var data =   store.getUnsafePointer(propertyName) ; //todo\r\n        if (isArray == false) {\r\n            switch (input.type)\r\n            {\r\n                case ProgramInputs.InputType.bool1:\r\n                    setUniformValue(_uniformBool, input.location, 1, input.size, UnsafePointerArrayBuffer.vecInts1, data);\r\n\r\n                case ProgramInputs.InputType.bool2:\r\n                    setUniformValue(_uniformBool, input.location, 2, input.size, UnsafePointerArrayBuffer.vecInts2, data);\r\n\r\n                case ProgramInputs.InputType.bool3:\r\n                    setUniformValue(_uniformBool, input.location, 3, input.size, UnsafePointerArrayBuffer.vecInts3, data);\r\n\r\n                case ProgramInputs.InputType.bool4:\r\n                    setUniformValue(_uniformBool, input.location, 4, input.size, UnsafePointerArrayBuffer.vecInts4, data);\r\n\r\n                case ProgramInputs.InputType.int1:\r\n                    setUniformValue(_uniformInt, input.location, 1, input.size, UnsafePointerArrayBuffer.vecInts1, data);\r\n\r\n                case ProgramInputs.InputType.int2:\r\n                    setUniformValue(_uniformInt, input.location, 2, input.size, UnsafePointerArrayBuffer.vecInts2, data);\r\n\r\n                case ProgramInputs.InputType.int3:\r\n                    setUniformValue(_uniformInt, input.location, 3, input.size, UnsafePointerArrayBuffer.vecInts3, data);\r\n\r\n                case ProgramInputs.InputType.int4:\r\n                    setUniformValue(_uniformInt, input.location, 4, input.size, UnsafePointerArrayBuffer.vecInts4, data);\r\n\r\n                case ProgramInputs.InputType.float1:\r\n                    setUniformValue(_uniformFloat, input.location, 1, input.size, UnsafePointerArrayBuffer.vecFloats1, data);\r\n\r\n                case ProgramInputs.InputType.float2:\r\n                    setUniformValue(_uniformFloat, input.location, 2, input.size, UnsafePointerArrayBuffer.vecFloats2, data);\r\n\r\n                case ProgramInputs.InputType.float3:\r\n                    setUniformValue(_uniformFloat, input.location, 3, input.size, UnsafePointerArrayBuffer.vecFloats3, data);\r\n\r\n                case ProgramInputs.InputType.float4:\r\n                    setUniformValue(_uniformFloat, input.location, 4, input.size, UnsafePointerArrayBuffer.vecFloats4, data);\r\n\r\n                case ProgramInputs.InputType.float16:\r\n                    setUniformValue(_uniformFloat, input.location, 16, input.size, UnsafePointerArrayBuffer.matFloats, data);\r\n\r\n                case ProgramInputs.InputType.sampler2d | ProgramInputs.InputType.samplerCube:\r\n                    var samplerIt:SamplerValue = Lambda.find(_samplers, function(samplerValue:SamplerValue) {\r\n                        return samplerValue.location == input.location;\r\n                    });\r\n                    var texture:UnsafePointer<Texture> = cast store.getUnsafePointer(propertyName) ;\r\n                    if (samplerIt == null) {\r\n                        _samplers.push(\r\n                            new SamplerValue((_program.setTextureNames.length + _samplers.length), texture, input.location)\r\n                        );\r\n                    }\r\n                    else {\r\n                        samplerIt.texture = texture;\r\n                    }\r\n\r\n\r\n                case ProgramInputs.InputType.float9 | ProgramInputs.InputType.unknown:\r\n                    trace(\"unsupported program input type: \" + ProgramInputs.typeToString(input.type));\r\n                    throw (\"unsupported program input type: \" + ProgramInputs.typeToString(input.type));\r\n\r\n            }\r\n        } else {\r\n            switch (input.type)\r\n            {\r\n                case ProgramInputs.InputType.bool1:\r\n                    setUniformValue(_uniformBool, input.location, 1, input.size, UnsafePointerArrayBuffer.vecsInts1, data);\r\n\r\n                case ProgramInputs.InputType.bool2:\r\n                    setUniformValue(_uniformBool, input.location, 2, input.size, UnsafePointerArrayBuffer.vecsInts2, data);\r\n\r\n                case ProgramInputs.InputType.bool3:\r\n                    setUniformValue(_uniformBool, input.location, 3, input.size, UnsafePointerArrayBuffer.vecsInts3, data);\r\n\r\n                case ProgramInputs.InputType.bool4:\r\n                    setUniformValue(_uniformBool, input.location, 4, input.size, UnsafePointerArrayBuffer.vecsInts4, data);\r\n\r\n                case ProgramInputs.InputType.int1:\r\n                    setUniformValue(_uniformInt, input.location, 1, input.size, UnsafePointerArrayBuffer.vecsInts1, data);\r\n\r\n                case ProgramInputs.InputType.int2:\r\n                    setUniformValue(_uniformInt, input.location, 2, input.size, UnsafePointerArrayBuffer.vecsInts2, data);\r\n\r\n                case ProgramInputs.InputType.int3:\r\n                    setUniformValue(_uniformInt, input.location, 3, input.size, UnsafePointerArrayBuffer.vecsInts3, data);\r\n\r\n                case ProgramInputs.InputType.int4:\r\n                    setUniformValue(_uniformInt, input.location, 4, input.size, UnsafePointerArrayBuffer.vecsInts4, data);\r\n\r\n                case ProgramInputs.InputType.float1:\r\n                    setUniformValue(_uniformFloat, input.location, 1, input.size, UnsafePointerArrayBuffer.vecsFloats1, data);\r\n\r\n                case ProgramInputs.InputType.float2:\r\n                    setUniformValue(_uniformFloat, input.location, 2, input.size, UnsafePointerArrayBuffer.vecsFloats2, data);\r\n\r\n                case ProgramInputs.InputType.float3:\r\n                    setUniformValue(_uniformFloat, input.location, 3, input.size, UnsafePointerArrayBuffer.vecsFloats3, data);\r\n\r\n                case ProgramInputs.InputType.float4:\r\n                    setUniformValue(_uniformFloat, input.location, 4, input.size, UnsafePointerArrayBuffer.vecsFloats4, data);\r\n\r\n                case ProgramInputs.InputType.float16:\r\n                    setUniformValue(_uniformFloat, input.location, 16, input.size, UnsafePointerArrayBuffer.matsFloats, data);\r\n\r\n                case ProgramInputs.InputType.sampler2d | ProgramInputs.InputType.samplerCube:\r\n\r\n                    trace(\"unsupported program input type: \" + ProgramInputs.typeToString(input.type));\r\n                    throw (\"unsupported program input type: \" + ProgramInputs.typeToString(input.type));\r\n\r\n                case ProgramInputs.InputType.float9 | ProgramInputs.InputType.unknown:\r\n                    trace(\"unsupported program input type: \" + ProgramInputs.typeToString(input.type));\r\n                    throw (\"unsupported program input type: \" + ProgramInputs.typeToString(input.type));\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function setSamplerStateValueFromStore(input:UniformInput, propertyName:String, store:Store, samplerStateProperty:String) {\r\n\r\n        var it:SamplerValue = Lambda.find(_samplers, function(sampler:SamplerValue) {\r\n            return sampler.location == input.location;\r\n        });\r\n\r\n        if (it != null) {\r\n            var sampler = it;\r\n\r\n            if (samplerStateProperty == SamplerStates.PROPERTY_WRAP_MODE) {\r\n                if (store.hasProperty(propertyName)) {\r\n                    sampler.wrapMode = store.getUnsafePointer(propertyName);\r\n                }\r\n                else {\r\n                    sampler.wrapMode = new UnsafePointer(SamplerStates.DEFAULT_WRAP_MODE);\r\n                }\r\n            }\r\n            else if (samplerStateProperty == SamplerStates.PROPERTY_TEXTURE_FILTER) {\r\n                if (store.hasProperty(propertyName)) {\r\n                    sampler.textureFilter = store.getUnsafePointer(propertyName);\r\n                }\r\n                else {\r\n                    sampler.textureFilter = new UnsafePointer(SamplerStates.DEFAULT_TEXTURE_FILTER);\r\n                }\r\n            }\r\n            else if (samplerStateProperty == SamplerStates.PROPERTY_MIP_FILTER) {\r\n                if (store.hasProperty(propertyName)) {\r\n                    sampler.mipFilter = store.getUnsafePointer(propertyName);\r\n                }\r\n                else {\r\n                    sampler.mipFilter = new UnsafePointer(SamplerStates.DEFAULT_MIP_FILTER);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setStateValueFromStore(stateName:String, store:Store) {\r\n        if (stateName == States.PROPERTY_PRIORITY) {\r\n            if (store.hasProperty(stateName)) {\r\n                _priority = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _priority = new UnsafePointer(States.DEFAULT_PRIORITY);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_ZSORTED) {\r\n            if (store.hasProperty(stateName)) {\r\n                _zSorted = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _zSorted = new UnsafePointer(States.DEFAULT_ZSORTED);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_BLENDING_SOURCE) {\r\n            if (store.hasProperty(stateName)) {\r\n                _blendingSourceFactor = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _blendingSourceFactor = new UnsafePointer(States.DEFAULT_BLENDING_SOURCE);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_BLENDING_DESTINATION) {\r\n            if (store.hasProperty(stateName)) {\r\n                _blendingDestinationFactor = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _blendingDestinationFactor = new UnsafePointer(States.DEFAULT_BLENDING_DESTINATION);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_COLOR_MASK) {\r\n            if (store.hasProperty(stateName)) {\r\n                _colorMask = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _colorMask = new UnsafePointer(States.DEFAULT_COLOR_MASK);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_DEPTH_MASK) {\r\n            if (store.hasProperty(stateName)) {\r\n                _depthMask = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _depthMask = new UnsafePointer(States.DEFAULT_DEPTH_MASK);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_DEPTH_FUNCTION) {\r\n            if (store.hasProperty(stateName)) {\r\n                _depthFunc = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _depthFunc = new UnsafePointer(States.DEFAULT_DEPTH_FUNCTION);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_TRIANGLE_CULLING) {\r\n            if (store.hasProperty(stateName)) {\r\n                _triangleCulling = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _triangleCulling = new UnsafePointer(States.DEFAULT_TRIANGLE_CULLING);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_STENCIL_FUNCTION) {\r\n            if (store.hasProperty(stateName)) {\r\n                _stencilFunction = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _stencilFunction = new UnsafePointer(States.DEFAULT_STENCIL_FUNCTION);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_STENCIL_REFERENCE) {\r\n            if (store.hasProperty(stateName)) {\r\n                _stencilReference = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _stencilReference = new UnsafePointer(States.DEFAULT_STENCIL_REFERENCE);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_STENCIL_MASK) {\r\n            if (store.hasProperty(stateName)) {\r\n                _stencilMask = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _stencilMask = new UnsafePointer(States.DEFAULT_STENCIL_MASK);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_STENCIL_FAIL_OPERATION) {\r\n            if (store.hasProperty(stateName)) {\r\n                _stencilFailOp = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _stencilFailOp = new UnsafePointer(States.DEFAULT_STENCIL_FAIL_OPERATION);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_STENCIL_ZFAIL_OPERATION) {\r\n            if (store.hasProperty(stateName)) {\r\n                _stencilZFailOp = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _stencilZFailOp = new UnsafePointer(States.DEFAULT_STENCIL_ZFAIL_OPERATION);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_STENCIL_ZPASS_OPERATION) {\r\n            if (store.hasProperty(stateName)) {\r\n                _stencilZPassOp = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _stencilZPassOp = new UnsafePointer(States.DEFAULT_STENCIL_ZPASS_OPERATION);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_SCISSOR_TEST) {\r\n            if (store.hasProperty(stateName)) {\r\n                _scissorTest = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _scissorTest = new UnsafePointer(States.DEFAULT_SCISSOR_TEST);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_SCISSOR_BOX) {\r\n            if (store.hasProperty(stateName)) {\r\n                _scissorBox = store.getUnsafePointer(stateName);\r\n            }\r\n            else {\r\n                _scissorBox = new UnsafePointer(States.DEFAULT_SCISSOR_BOX);\r\n            }\r\n        }\r\n        else if (stateName == States.PROPERTY_TARGET) {\r\n            if (store.hasProperty(stateName)) {\r\n\r\n                _target = store.getUnsafePointer(stateName) ;\r\n            }\r\n            else {\r\n                _target = new UnsafePointer(States.DEFAULT_TARGET);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAttributeValueFromStore(input:AttributeInput, propertyName:String, store:Store) {\r\n        var attr:VertexAttribute = store.get(propertyName);\r\n        //need vertexSize bind\r\n        _attributes.push(new AttributeValue(input.location, attr.resourceId, attr.size, attr.vertexSize, attr.offset));\r\n    }\r\n\r\n\r\n    static private function setUniformValue<T>(uniforms:Array<UniformValue<T>>, location, size, count, dataArray:Dynamic->Array<T>, data:Any) {\r\n        var it:UniformValue<T> = Lambda.find(uniforms, function(u:UniformValue<T>) {\r\n            return u.location == location;\r\n        });\r\n        if (it == null) {\r\n            it = new UniformValue<T>(location, size, count);\r\n            uniforms.push(it);\r\n        }\r\n        it.data = data;\r\n        setUnsafePointerArrayBuffer(dataArray,data);\r\n    }\r\n    static private function setUnsafePointerArrayBuffer<T>(  dataArray:Dynamic->Array<T>, data:UnsafePointer<Dynamic>) {\r\n        //it.applyFunc = dataArray;\r\n        if(data.buffer==null){\r\n            var buffer=new UnsafePointerArrayBuffer<T>();\r\n            buffer.applyFunc=dataArray;\r\n            buffer.applyDone(data.value);\r\n            data.buffer=buffer;\r\n\r\n        }\r\n    }\r\n}\r\n","package minko.render;\r\nimport minko.render.DrawCall;\r\nimport String;\r\nimport Array;\r\nimport glm.Vec3;\r\nimport haxe.ds.ObjectMap;\r\nimport haxe.ds.StringMap;\r\nimport minko.component.Renderer.EffectVariables;\r\nimport minko.data.Binding;\r\nimport minko.data.BindingMap.BindingMapBase;\r\nimport minko.data.BindingMap.MacroBinding;\r\nimport minko.data.BindingMap.MacroBindingMap;\r\nimport minko.data.BindingMap.MacroType;\r\nimport minko.data.Provider;\r\nimport minko.data.ResolvedBinding;\r\nimport minko.data.Store;\r\nimport minko.render.DrawCallPool.DrawCallSlot;\r\nimport minko.render.ProgramInputs.InputType;\r\nimport minko.render.ProgramInputs.UniformInput;\r\nimport minko.signal.Signal3.SignalSlot3;\r\nimport minko.signal.Signal3;\r\n\r\n\r\ntypedef PropertyRebindFuncMap = ObjectMap<DrawCall, Array<Void -> Void>>;\r\ntypedef DrawCallList = Array<DrawCall> ;\r\ntypedef DrawCallList2U = Tuple<DrawCallList, DrawCallList>;\r\ntypedef DrawCallSlotBindings ={\r\n    var uniformBinding: Array<DrawCallSlot>;\r\n    var samplerStatesBinding: Array<DrawCallSlot>;\r\n    var stateBinding:Array<DrawCallSlot>;\r\n    var macroBinding:Array<DrawCallSlot>;\r\n}\r\ntypedef DrawCallSlot =Tuple<String,SignalSlot3<Store, Provider, String>>;\r\n\r\n//draw call 运行期 资源 去掉  增加 删除  只能 修改\r\n@:expose(\"minko.render.DrawCallPool\")\r\nclass DrawCallPool {\r\n    //_drawCalls macroBindingKey  DrawCallList\r\n\r\n\r\n    private var _batchId:Int;\r\n    private var _drawCalls:StringMap<DrawCallList2U > ;\r\n    private var _drawCallsKeys:Array<String> ;\r\n    private var _invalidDrawCalls:ObjectMap< DrawCall, Tuple<Bool, EffectVariables>>;\r\n    private var _drawCallsToBeSorted:Array<DrawCall>;\r\n    private var _propChangedSlot:ObjectMap< DrawCall, DrawCallSlotBindings>;//drawCallKey\r\n    private var _sortUsefulPropertyChangedSlot:ObjectMap< DrawCall, Array<DrawCallSlot>>;//drawCallKey\r\n    private var _sortUsefulPropertyNames:Array<String>;\r\n    private var _zSortUsefulPropertyChangedSlot:ObjectMap< DrawCall,Array<DrawCallSlot>>;//drawCallKey\r\n    private var _zSortUsefulPropertyNames:Array<String>;\r\n    private var _mustZSort:Bool;\r\n\r\n    private var _drawCallToPropRebindFuncs:PropertyRebindFuncMap;\r\n\r\n    public function new() {\r\n        this._zSortUsefulPropertyNames = [];\r\n        this._sortUsefulPropertyNames = [];\r\n        _zSortUsefulPropertyNames = [\r\n        \"modelToWorldMatrix\",\r\n        \"material[@{materialUuid}].priority\",\r\n        \"material[@{materialUuid}].zSorted\",\r\n        \"geometry[@{geometryUuid}].position\"\r\n        ];\r\n\r\n        _sortUsefulPropertyNames = [\r\n        \"material[@{materialUuid}].priority\",\r\n        \"material[@{materialUuid}].zSorted\",\r\n        \"material[@{materialUuid}].target\"\r\n        ];\r\n        this._batchId = 0;\r\n        this._drawCalls = new StringMap<DrawCallList2U >();\r\n        this._drawCallsKeys = [];\r\n\r\n        this._invalidDrawCalls = new ObjectMap< DrawCall, Tuple<Bool, EffectVariables>>();\r\n        this._drawCallToPropRebindFuncs = new PropertyRebindFuncMap();\r\n        this._drawCallsToBeSorted = new Array<DrawCall>();\r\n        this._propChangedSlot = new ObjectMap< DrawCall, DrawCallSlotBindings>();\r\n        this._sortUsefulPropertyChangedSlot = new ObjectMap< DrawCall,Array<DrawCallSlot>>();\r\n        this._zSortUsefulPropertyChangedSlot = new ObjectMap< DrawCall,Array<DrawCallSlot>>();\r\n        this._mustZSort = false;\r\n    }\r\n\r\n    public function dispose() {\r\n        //todo\r\n\r\n        if (_propChangedSlot != null) {\r\n            _propChangedSlot = null;\r\n        }\r\n        if (_drawCallToPropRebindFuncs != null) {\r\n            _drawCallToPropRebindFuncs = null;\r\n        }\r\n    }\r\n    public var drawCallsKeys(get, null):Array<String> ;\r\n\r\n    function get_drawCallsKeys() {\r\n\r\n        return _drawCallsKeys;\r\n    }\r\n    public var drawCalls(get, null):StringMap<DrawCallList2U > ;\r\n\r\n    function get_drawCalls() {\r\n\r\n        return _drawCalls;\r\n    }\r\n\r\n    public function addDrawCalls(effect:Effect, techniqueName:String, variables:EffectVariables, rootData:Store, rendererData:Store, targetData:Store) {\r\n        var technique:Array<Pass> = effect.technique(techniqueName);\r\n\r\n        _batchId++;\r\n        for (pass in technique) {\r\n            var drawCall:DrawCall = new DrawCall(_batchId, pass, variables, rootData, rendererData, targetData);\r\n            //todo \tvar drawCall = [new minko_render_DrawCall(this._batchId,pass,variables,rootData,rendererData,targetData)];\r\n            //drawCall[0]\r\n            initializeDrawCall(drawCall);\r\n\r\n            // if the draw call is meant only for post-processing, then it should only exist once\r\n            if (!pass.isForward) {\r\n                var seekedDrawCall = findDrawCall(function(d:DrawCall) {\r\n                    return d.program == drawCall.program ;\r\n                });\r\n\r\n                // FIXME: cumbersome and wasteful to completely init. a DrawCall just to discard it\r\n                if (seekedDrawCall != null) {\r\n                    seekedDrawCall.batchIDs.push(_batchId);\r\n                    drawCall = null;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            addDrawCallToSortedBucket(drawCall);\r\n        }\r\n        technique=null;\r\n\r\n        return _batchId;\r\n    }\r\n\r\n    inline function _removeDrawCalls(drawCalls:Array<DrawCall>, batchId) {\r\n        return drawCalls.filter(function(drawCall:DrawCall) {\r\n            var batchIDs:Array<Int> = drawCall.batchIDs ;\r\n            var it = Lambda.has(batchIDs, batchId);\r\n\r\n            if (it != false) {\r\n                batchIDs.remove(batchId);\r\n\r\n                if (batchIDs.length != 0) {\r\n                    return !false;\r\n                }\r\n\r\n                unwatchProgramSignature(drawCall, drawCall.pass.macroBindings, drawCall.rootData, drawCall.rendererData, drawCall.targetData);\r\n                unbindDrawCall(drawCall);\r\n\r\n                _invalidDrawCalls.remove(drawCall);\r\n                _drawCallsToBeSorted.remove(drawCall);\r\n                drawCall.dispose();\r\n                drawCall = null;\r\n\r\n//Debug.Assert(_drawCallToPropRebindFuncs.count(drawCall) == 0);\r\n//for (var it = _propChangedSlot.GetEnumerator(); it != _propChangedSlot.end(); ++it)\r\n//{\r\n//Debug.Assert(it.first.second != drawCall);\r\n//}\r\n\r\n                return !true;\r\n            }\r\n\r\n            return !false;\r\n        }) ;\r\n    }\r\n\r\n    public function removeDrawCalls(batchId) {\r\n        for (priorityAndTargetIdToDrawCalls in _drawCalls) {\r\n\r\n            priorityAndTargetIdToDrawCalls.first = _removeDrawCalls(priorityAndTargetIdToDrawCalls.first, batchId);\r\n            priorityAndTargetIdToDrawCalls.second = _removeDrawCalls(priorityAndTargetIdToDrawCalls.second, batchId);\r\n\r\n        }\r\n    }\r\n\r\n    public function invalidateDrawCalls(batchId:Int, variables:EffectVariables) {\r\n        foreachDrawCall(function(drawCall:DrawCall) {\r\n            var batchIDs = drawCall.batchIDs ;\r\n\r\n            var it = Lambda.has(batchIDs, batchId);\r\n\r\n            if (it != false) {\r\n                _invalidDrawCalls.set(drawCall, new Tuple(true, variables));\r\n            }\r\n        });\r\n    }\r\n\r\n    public function update(forceSort = false, mustZSort = false) {\r\n        for (invalidDrawCall in _invalidDrawCalls.keys()) {\r\n            var drawCallPtr = invalidDrawCall;\r\n\r\n            initializeDrawCall(drawCallPtr, true);\r\n        }\r\n        _invalidDrawCalls = new ObjectMap< DrawCall, Tuple<Bool, EffectVariables>>();\r\n\r\n        for (drawCallPtrAndFuncList in _drawCallToPropRebindFuncs.iterator()) {\r\n            for (func in drawCallPtrAndFuncList) {\r\n                func();\r\n            }\r\n        }\r\n\r\n        _drawCallToPropRebindFuncs = new PropertyRebindFuncMap();\r\n\r\n\r\n        for (drawCall in _drawCallsToBeSorted) {\r\n            removeDrawCallFromSortedBucket(drawCall);\r\n            addDrawCallToSortedBucket(drawCall);\r\n        }\r\n\r\n        _drawCallsToBeSorted = new Array<DrawCall>();\r\n\r\n        var finalMustZSort = forceSort || _mustZSort || mustZSort;\r\n\r\n        if (finalMustZSort) {\r\n            _mustZSort = false;\r\n\r\n            zSortDrawCalls();\r\n        }\r\n    }\r\n\r\n    public function clear() {\r\n        this._drawCalls = new StringMap< DrawCallList2U >();\r\n        this._drawCallsKeys = [];\r\n        this._invalidDrawCalls = new ObjectMap< DrawCall, Tuple<Bool, EffectVariables>>();\r\n        this._propChangedSlot = new ObjectMap< DrawCall,DrawCallSlotBindings>();\r\n        this._drawCallToPropRebindFuncs = new PropertyRebindFuncMap();\r\n        this._sortUsefulPropertyChangedSlot = new ObjectMap< DrawCall,Array<DrawCallSlot>>();\r\n        this._zSortUsefulPropertyChangedSlot = new ObjectMap< DrawCall,Array<DrawCallSlot>>();\r\n    }\r\n\r\n    public var numDrawCalls(get, null):Int;\r\n\r\n    function get_numDrawCalls() {\r\n        var numDrawCalls = 0 ;\r\n\r\n        for (drawCalls in _drawCalls) {\r\n            numDrawCalls += drawCalls.first.length;\r\n            numDrawCalls += drawCalls.second.length;\r\n        }\r\n\r\n        return numDrawCalls;\r\n    }\r\n\r\n    private function watchProgramSignature(drawCall:DrawCall, macroBindings:MacroBindingMap, rootData:Store, rendererData:Store, targetData:Store) {\r\n//        for (macroNameAndBinding in macroBindings.bindings.keys()) {\r\n//            var macroName = macroNameAndBinding;\r\n//            var macroBinding:MacroBinding = macroBindings.bindings.get(macroNameAndBinding);\r\n//            var store:Store = macroBinding.source == Source.ROOT ? rootData : (macroBinding.source == Source.RENDERER ? rendererData : targetData);\r\n//            var propertyName:String = Store.getActualPropertyName(drawCall.variables, macroBinding.propertyName);\r\n//\r\n//\r\n//\r\n//            if (macroBindings.types.get(macroName) != MacroType.UNSET) {\r\n//                addMacroCallback(drawCall,propertyName, store.getPropertyChanged(propertyName), function(UnnamedParameter1, UnnamedParameter2, UnnamedParameter3) {\r\n//                    macroPropertyChangedHandler(drawCall,macroBinding);\r\n//                });\r\n//            }\r\n//            else {\r\n//                var hasProperty = store.hasProperty(propertyName);\r\n//                if (hasProperty) {\r\n//                    addMacroCallback(drawCall,propertyName, store.getPropertyRemoved(propertyName) , function(s, UnnamedParameter1, p) {\r\n//                        macroPropertyRemovedHandler(drawCall,macroBinding, propertyName, s);\r\n//                    });\r\n//                }\r\n//                else {\r\n//                    addMacroCallback(drawCall,propertyName, store.getPropertyAdded(propertyName), function(s, UnnamedParameter1, p) {\r\n//                        macroPropertyAddedHandler(drawCall,macroBinding, propertyName, s);\r\n//                    });\r\n//                }\r\n//            }\r\n//        }\r\n    }\r\n\r\n    private function unwatchProgramSignature(drawCall:DrawCall, macroBindings:MacroBindingMap, rootData:Store, rendererData:Store, targetData:Store) {\r\n\r\n        var drawCallPropChangedSlot=_propChangedSlot.get(drawCall);\r\n        for (macroNameAndBinding in       drawCallPropChangedSlot.macroBinding) {\r\n            removeMacroCallback(drawCall,macroNameAndBinding.first);\r\n        }\r\n        drawCallPropChangedSlot.macroBinding=[];\r\n    }\r\n\r\n\r\n    public function macroPropertyAddedHandler(drawCall:DrawCall,macroBinding:MacroBinding, propertyName:String, store:Store ) {\r\n\r\n        removeMacroCallback(drawCall,propertyName);\r\n        addMacroCallback(drawCall,propertyName, store.getPropertyRemoved(propertyName),\r\n        function(s:Store, UnnamedParameter1:Provider, p:String) {\r\n            macroPropertyRemovedHandler(drawCall,macroBinding, propertyName, s);\r\n        });\r\n\r\n        macroPropertyChangedHandler(drawCall,macroBinding);\r\n    }\r\n\r\n    public function macroPropertyRemovedHandler(drawCall:DrawCall,macroBinding:MacroBinding, propertyName:String, store:Store ) {\r\n        // If the store still has the property, it means that it was not really removed\r\n        // but that one of the copies of the properties was removed (ie same material added multiple\r\n        // times to the same store). Thus the macro state should not be affected.\r\n        if (store.hasProperty(propertyName)) {\r\n            return;\r\n        }\r\n\r\n\r\n        removeMacroCallback(drawCall,propertyName);\r\n        addMacroCallback(drawCall,propertyName, store.getPropertyAdded(propertyName),\r\n        function(s:Store, UnnamedParameter1:Provider, p:String) {\r\n            macroPropertyAddedHandler(drawCall,macroBinding, propertyName, s);\r\n        });\r\n\r\n        macroPropertyChangedHandler(drawCall,macroBinding);\r\n    }\r\n\r\n    public function macroPropertyChangedHandler(drawCall:DrawCall,macroBinding:MacroBinding) {\r\n\r\n            _invalidDrawCalls.set(drawCall, new Tuple<Bool, EffectVariables>(false, new EffectVariables()));\r\n\r\n    }\r\n\r\n    private function initializeDrawCall(drawCall:DrawCall, forceRebind = false) {\r\n        var invalidDrawCallIt:Tuple<Bool, EffectVariables> = _invalidDrawCalls.get(drawCall);\r\n        var variablesChanged = false;\r\n        if (invalidDrawCallIt != null) {\r\n            variablesChanged = invalidDrawCallIt.first;\r\n        }\r\n\r\n        var newVariables:EffectVariables = new EffectVariables();\r\n\r\n        if (variablesChanged) {\r\n            newVariables = invalidDrawCallIt.second;\r\n        }\r\n\r\n        var variables:EffectVariables = variablesChanged ? newVariables : drawCall.variables ;\r\n\r\n        var pass:Pass = drawCall.pass ;\r\n\r\n        var programAndSignature:Tuple<Program, ProgramSignature> = pass.selectProgram(variables, drawCall.targetData, drawCall.rendererData, drawCall.rootData);\r\n\r\n        var program:Program = programAndSignature.first;\r\n        if (variablesChanged) {\r\n            drawCall.variables = variables ;\r\n        }\r\n        if (program == drawCall.program ) {\r\n\r\n            return;\r\n        }\r\n        if(_propChangedSlot.exists(drawCall)){\r\n\r\n            unwatchProgramSignature(drawCall, drawCall.pass.macroBindings, drawCall.rootData, drawCall.rendererData, drawCall.targetData);\r\n            unbindDrawCall(drawCall);\r\n        }\r\n        if(!_propChangedSlot.exists(drawCall)){\r\n            _propChangedSlot.set(drawCall,{\r\n                uniformBinding:[],\r\n                samplerStatesBinding: [],\r\n                stateBinding:[],\r\n                macroBinding:[]\r\n            });\r\n        }\r\n        bindDrawCall(drawCall, pass, program, forceRebind);\r\n\r\n        if (programAndSignature.second != null) {\r\n            watchProgramSignature(drawCall, drawCall.pass.macroBindings, drawCall.rootData, drawCall.rendererData, drawCall.targetData);\r\n        }\r\n    }\r\n\r\n\r\n    public function addMacroCallback(drawCall:DrawCall,propertyName:String, signal:Signal3<Store, Provider, String>, callback:Store -> Provider -> String -> Void) {\r\n        if(!hasMacroCallback(drawCall,propertyName)){\r\n            var drawCallPropChangedSlot=_propChangedSlot.get(drawCall);\r\n            var changedSlot=signal.connect(callback);\r\n            addPropChangedSlot(  drawCallPropChangedSlot.macroBinding, new DrawCallSlot(propertyName,changedSlot));\r\n        }else{\r\n            trace(\"addMacroCallback null\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public function removeMacroCallback(drawCall:DrawCall,propertyName:String) {\r\n        if(hasMacroCallback(drawCall,propertyName)){\r\n            var drawCallPropChangedSlot=_propChangedSlot.get(drawCall);\r\n            drawCallPropChangedSlot.macroBinding=removePropChangedSlot(  drawCallPropChangedSlot.macroBinding,propertyName);\r\n        }else{\r\n            trace(\"removeMacroCallback null\");\r\n        }\r\n\r\n    }\r\n\r\n    public function hasMacroCallback(drawCall:DrawCall,propertyName:String) {\r\n\r\n        var drawCallPropChangedSlot=_propChangedSlot.get(drawCall);\r\n        if(!_propChangedSlot.exists(drawCall)){\r\n            return false;\r\n        }\r\n        return Lambda.exists( drawCallPropChangedSlot.macroBinding ,function(m:DrawCallSlot) return m.first==propertyName);\r\n    }\r\n    function removePropChangedSlot(bindings: Array<DrawCallSlot>,propertyName:String){\r\n        var dc:DrawCallSlot= Lambda.find(bindings,function(b:DrawCallSlot)return b.first==propertyName);\r\n        dc.second.dispose();\r\n        dc.second=null;\r\n        var tmp= bindings.filter(function(b:DrawCallSlot)return b.first!=propertyName);\r\n        return tmp;\r\n    }\r\n    function addPropChangedSlot(bindings: Array<DrawCallSlot>,dc:DrawCallSlot){\r\n        bindings.push(dc);\r\n    }\r\n    private function uniformBindingPropertyAddedHandler(drawCall:DrawCall, input:UniformInput, uniformBindingMap:BindingMapBase<Binding>, forceRebind = false) {\r\n        if (!forceRebind && _invalidDrawCalls.exists(drawCall)) {\r\n            return;\r\n        }\r\n\r\n        var resolvedBinding:ResolvedBinding = drawCall.bindUniform(input, uniformBindingMap.bindings, uniformBindingMap.defaultValues);\r\n//\r\n//\r\n//        if (resolvedBinding != null) {\r\n//            var propertyName = resolvedBinding.propertyName;\r\n//            var propertyExist = resolvedBinding.store.hasProperty(propertyName);\r\n//            //var signal:Signal3<Store, Provider, String> = resolvedBinding.store.getPropertyChanged(propertyName);\r\n//            var signal:Signal3<Store, Provider, String> = propertyExist ? resolvedBinding.store.getPropertyRemoved(propertyName) : resolvedBinding.store.getPropertyAdded(propertyName);\r\n//            var drawCallPropChangedSlot=_propChangedSlot.get(drawCall);\r\n//\r\n//\r\n//            var changedSlot = signal.connect(function(UnnamedParameter1, UnnamedParameter2, UnnamedParameter3) {\r\n//                drawCallPropChangedSlot.uniformBinding=removePropChangedSlot(drawCallPropChangedSlot.uniformBinding,   propertyName);\r\n//                if (_drawCallToPropRebindFuncs.exists(drawCall) == false) {\r\n//                    _drawCallToPropRebindFuncs.set(drawCall, []);\r\n//                }\r\n//                _drawCallToPropRebindFuncs.get(drawCall).push(function() {\r\n//                    uniformBindingPropertyAddedHandler(drawCall, input, uniformBindingMap, forceRebind);\r\n//                });\r\n//            }, 0, true);\r\n//            addPropChangedSlot(drawCallPropChangedSlot.uniformBinding,     new DrawCallSlot(propertyName,changedSlot) );\r\n//\r\n//\r\n//            // If this draw call needs to be sorted\r\n//            // => we listen to the useful properties\r\n//            if (propertyExist && drawCall.zSorted) {\r\n//\r\n//                var propertyRelatedToZSortIt = Lambda.find(_zSortUsefulPropertyNames, function(zSortUsefulPropertyName) {\r\n//                    return Store.getActualPropertyName(drawCall.variables, zSortUsefulPropertyName) == propertyName;\r\n//                });\r\n//\r\n//                if (propertyRelatedToZSortIt != null) {\r\n//                    var zSortUsefulPropertyChangedSlot=_zSortUsefulPropertyChangedSlot.get(drawCall);\r\n//                    zSortUsefulPropertyChangedSlot.push( new DrawCallSlot(propertyName,\r\n//                        resolvedBinding.store.getPropertyChanged(propertyName).connect(\r\n//                        function(UnnamedParameter1, UnnamedParameter2, UnnamedParameter3) {\r\n//                            _mustZSort = true;\r\n//                        })));\r\n//                }\r\n//            }\r\n//        }\r\n        resolvedBinding = null;\r\n        if (input.type == InputType.sampler2d || input.type == InputType.samplerCube) {\r\n            samplerStatesBindingPropertyAddedHandler(drawCall, input, uniformBindingMap);\r\n        }\r\n    }\r\n\r\n    function samplerStatesBindingPropertyAddedHandler(drawCall:DrawCall, input:UniformInput, uniformBindingMap:BindingMapBase<Binding>) {\r\n        var resolvedBindings:Array<ResolvedBinding> = drawCall.bindSamplerStates(input, uniformBindingMap.bindings, uniformBindingMap.defaultValues);\r\n//\r\n//        for (resolvedBinding in resolvedBindings) {\r\n//            if (resolvedBinding != null) {\r\n//                var propertyName = resolvedBinding.propertyName;\r\n//                var propertyExist = resolvedBinding.store.hasProperty(propertyName);\r\n//                //var signal:Signal3<Store, Provider, String> = resolvedBinding.store.getPropertyChanged(propertyName);\r\n//                var signal:Signal3<Store, Provider, String> =propertyExist ? resolvedBinding.store.getPropertyRemoved(propertyName) : resolvedBinding.store.getPropertyAdded(propertyName);\r\n//\r\n//                var drawCallPropChangedSlot=_propChangedSlot.get(drawCall);\r\n//                var changedSlot = signal.connect(\r\n//                    function(UnnamedParameter1, UnnamedParameter2, UnnamedParameter3) {\r\n//                        drawCallPropChangedSlot.samplerStatesBinding=removePropChangedSlot(drawCallPropChangedSlot.samplerStatesBinding,propertyName);\r\n//                        if (_drawCallToPropRebindFuncs.exists(drawCall) == false) {\r\n//                            _drawCallToPropRebindFuncs.set(drawCall, []);\r\n//                        }\r\n//                        _drawCallToPropRebindFuncs.get(drawCall).push(function() {\r\n//                            samplerStatesBindingPropertyAddedHandler(drawCall, input, uniformBindingMap);\r\n//                        });\r\n//                    }, 0, true);\r\n//                addPropChangedSlot(drawCallPropChangedSlot.samplerStatesBinding, new DrawCallSlot(propertyName, changedSlot ));\r\n//            }\r\n//        }\r\n        resolvedBindings=null;\r\n    }\r\n\r\n    function stateBindingPropertyAddedHandler(stateName:String, drawCall:DrawCall, stateBindingMap:BindingMapBase<Binding>, forceRebind:Bool) {\r\n\r\n\r\n        var resolvedBinding:ResolvedBinding = drawCall.bindState(stateName, stateBindingMap.bindings, stateBindingMap.defaultValues);\r\n//\r\n//        if (resolvedBinding != null) {\r\n//            var bindingPtr = resolvedBinding.binding;\r\n//            var propertyName = resolvedBinding.propertyName;\r\n//            var propertyExist = resolvedBinding.store.hasProperty(propertyName);\r\n//            //var signal:Signal3<Store, Provider, String> = resolvedBinding.store.getPropertyChanged(propertyName);\r\n//            var signal:Signal3<Store, Provider, String> = propertyExist ? resolvedBinding.store.getPropertyRemoved(propertyName) : resolvedBinding.store.getPropertyAdded(propertyName);\r\n//\r\n//            var drawCallPropChangedSlot=_propChangedSlot.get(drawCall);\r\n//            var changedSlot = signal.connect(\r\n//                function(UnnamedParameter1, UnnamedParameter2, UnnamedParameter3) {\r\n//                    drawCallPropChangedSlot.stateBinding=removePropChangedSlot(drawCallPropChangedSlot.stateBinding,propertyName);\r\n//                    if (_drawCallToPropRebindFuncs.exists(drawCall) == false) {\r\n//                        _drawCallToPropRebindFuncs.set(drawCall, []);\r\n//                    }\r\n//                    _drawCallToPropRebindFuncs.get(drawCall).push(function() {\r\n//                        stateBindingPropertyAddedHandler(stateName, drawCall, stateBindingMap, forceRebind);\r\n//                    });\r\n//                }, 0, true);\r\n//            addPropChangedSlot(   drawCallPropChangedSlot.stateBinding, new DrawCallSlot(propertyName, changedSlot ));\r\n//\r\n//            var propertyRelatedToSortIt = Lambda.find(_sortUsefulPropertyNames, function(sortUsefulPropertyName) {\r\n//                return Store.getActualPropertyName(drawCall.variables, sortUsefulPropertyName) == propertyName;\r\n//            });\r\n//\r\n//            if (propertyRelatedToSortIt != null) {\r\n//                if (_sortUsefulPropertyChangedSlot.exists(drawCall) == false) {\r\n//                    _sortUsefulPropertyChangedSlot.set(drawCall, []);\r\n//                }\r\n//                var sortUsefulPropertyChangedSlot=_sortUsefulPropertyChangedSlot.get(drawCall);\r\n//                sortUsefulPropertyChangedSlot.push( new DrawCallSlot(propertyName, resolvedBinding.store.getPropertyChanged(propertyName).connect(\r\n//                    function(UnnamedParameter1, UnnamedParameter2, UnnamedParameter3) {\r\n//                        _drawCallsToBeSorted.push(drawCall);\r\n//                    })));\r\n//            }\r\n//\r\n//        }\r\n\r\n        resolvedBinding = null;\r\n    }\r\n\r\n    private static function compareZSortedDrawCalls(a:DrawCall, b:DrawCall) {\r\n        var aPosition:Vec3 = a.getEyeSpacePosition();\r\n        var bPosition:Vec3 = b.getEyeSpacePosition();\r\n        if (aPosition.z > bPosition.z) {\r\n            return -1;\r\n        }\r\n        else if (aPosition.z < bPosition.z) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    private static function compareDrawCalls(a:String, b:String) {\r\n        a = a.toUpperCase();\r\n        b = b.toUpperCase();\r\n\r\n        if (a > b) {\r\n            return -1;\r\n        }\r\n        else if (a < b) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    inline public static function sortPropertyTuple(m:Float, s:Int) {\r\n        return m + \"_\" + s;\r\n    }\r\n    private function addDrawCallToSortedBucket(drawCall:DrawCall) {\r\n        var priority = drawCall.priority;\r\n        var targetId = drawCall.target != null ? drawCall.target.id : 0;\r\n        var zSortedIndex = drawCall.zSorted ? 1 : 0;\r\n        var _sortPropertyTuple = sortPropertyTuple(priority, targetId);\r\n        if (!_drawCalls.exists(_sortPropertyTuple)) {\r\n            this._drawCallsKeys.push(_sortPropertyTuple);\r\n            this._drawCallsKeys.sort(compareDrawCalls);\r\n            _drawCalls.set(_sortPropertyTuple, new DrawCallList2U(new DrawCallList(), new DrawCallList() ));\r\n        }\r\n        var _drawCallList:DrawCallList2U = _drawCalls.get(_sortPropertyTuple);\r\n\r\n        if (zSortedIndex == 1)\r\n            _drawCallList.second.push(drawCall);\r\n        else\r\n            _drawCallList.first.push(drawCall);\r\n    }\r\n\r\n    private function removeDrawCallFromSortedBucket(drawCall:DrawCall) {\r\n        for (sortPropertiesToDrawCalls in _drawCalls) {\r\n            sortPropertiesToDrawCalls.first.remove(drawCall) ;\r\n            sortPropertiesToDrawCalls.second.remove(drawCall) ;\r\n        }\r\n    }\r\n\r\n    private function findDrawCall(predicate:DrawCall -> Bool):DrawCall {\r\n\r\n        for (sortPropertiesToDrawCalls in _drawCalls) {\r\n            var drawCalls = sortPropertiesToDrawCalls.first;\r\n\r\n            for (drawCall in drawCalls) {\r\n                if (predicate(drawCall)) {\r\n                    return drawCall;\r\n                }\r\n            }\r\n            drawCalls = sortPropertiesToDrawCalls.second;\r\n            for (drawCall in drawCalls) {\r\n                if (predicate(drawCall)) {\r\n                    return drawCall;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    inline function foreachDrawCall(func:DrawCall -> Void) {\r\n        inline function _foreachDrawCall(drawCalls:Array<DrawCall>) {\r\n            for (drawCall in drawCalls) {\r\n                func(drawCall);\r\n            }\r\n        }\r\n        for (sortPropertiesToDrawCalls in _drawCalls) {\r\n            _foreachDrawCall(sortPropertiesToDrawCalls.first);\r\n            _foreachDrawCall(sortPropertiesToDrawCalls.second);\r\n\r\n        }\r\n    }\r\n\r\n    public function bindDrawCall(drawCall:DrawCall, pass:Pass, program:Program, forceRebind:Bool) {\r\n        drawCall.bind(program);\r\n\r\n        // bind attributes\r\n        // FIXME: like for uniforms, watch and swap default values / binding value\r\n        for (input in program.inputs.attributes) {\r\n            drawCall.bindAttribute(input, pass.attributeBindings.bindings, pass.attributeBindings.defaultValues);\r\n        }\r\n\r\n        // bind states\r\n\r\n        for (stateName in States.PROPERTY_NAMES) {\r\n            stateBindingPropertyAddedHandler(stateName, drawCall, pass.stateBindings, forceRebind);\r\n        }\r\n\r\n        // bind uniforms\r\n        for (input in program.inputs.uniforms) {\r\n            uniformBindingPropertyAddedHandler(drawCall, input, pass.uniformBindings, forceRebind);\r\n        }\r\n\r\n        // bind index buffer\r\n        if ( pass.isForward) {\r\n            drawCall.bindIndexBuffer();\r\n        }\r\n    }\r\n\r\n    private function unbindDrawCall(drawCall:DrawCall) {\r\n        //todo remove\r\n\r\n\r\n        if(_propChangedSlot.exists(drawCall)){\r\n            var __propChangedSlot_keys:DrawCallSlotBindings=_propChangedSlot.get(drawCall);\r\n            for (it in __propChangedSlot_keys.samplerStatesBinding) {\r\n                removePropChangedSlot(__propChangedSlot_keys.samplerStatesBinding,it.first);\r\n            }\r\n            for (it in __propChangedSlot_keys.stateBinding) {\r\n                removePropChangedSlot(__propChangedSlot_keys.stateBinding,it.first);\r\n            }\r\n            for (it in __propChangedSlot_keys.uniformBinding) {\r\n                removePropChangedSlot(__propChangedSlot_keys.uniformBinding,it.first);\r\n            }\r\n\r\n            for (it in __propChangedSlot_keys.macroBinding) {\r\n                removePropChangedSlot( __propChangedSlot_keys.macroBinding,it.first);\r\n            }\r\n            __propChangedSlot_keys.samplerStatesBinding=null;\r\n            __propChangedSlot_keys.stateBinding=null;\r\n            __propChangedSlot_keys.uniformBinding=null;\r\n            __propChangedSlot_keys.macroBinding=null;\r\n            __propChangedSlot_keys=null;\r\n            _propChangedSlot.remove(drawCall);\r\n            //_propChangedSlot->clear();\r\n        }\r\n\r\n        if(_sortUsefulPropertyChangedSlot.exists(drawCall)){\r\n            var _sortUsefulPropertyChangedSlot_keys:Array<DrawCallSlot> = _sortUsefulPropertyChangedSlot.get(drawCall);\r\n            for (it in _sortUsefulPropertyChangedSlot_keys) {\r\n                 it.second.dispose();\r\n                _sortUsefulPropertyChangedSlot_keys.remove(it);\r\n            }\r\n\r\n            _sortUsefulPropertyChangedSlot.remove(drawCall);\r\n        }\r\n        if(_zSortUsefulPropertyChangedSlot.exists(drawCall)){\r\n            var _zSortUsefulPropertyChangedSlot_keys:Array<DrawCallSlot> = _zSortUsefulPropertyChangedSlot.get(drawCall);\r\n            for (it in _zSortUsefulPropertyChangedSlot_keys) {\r\n                it.second.dispose();\r\n                _zSortUsefulPropertyChangedSlot_keys.remove(it);\r\n            }\r\n            _zSortUsefulPropertyChangedSlot.remove(drawCall);\r\n        }\r\n\r\n        _drawCallToPropRebindFuncs.remove(drawCall);\r\n        //_drawCallToPropRebindFuncs->clear();\r\n    }\r\n\r\n\r\n    private function zSortDrawCalls() {\r\n        for (sortPropertiesToDrawCalls in _drawCalls) {\r\n            var drawCalls:Array<DrawCall> = sortPropertiesToDrawCalls.second ;\r\n            drawCalls.sort(compareZSortedDrawCalls);\r\n        }\r\n    }\r\n}\r\n","package minko.render;\r\n\r\nimport haxe.ds.StringMap;\r\nimport minko.data.Binding;\r\nimport minko.data.Provider;\r\nimport minko.file.EffectParser.Technique;\r\nimport minko.material.Material;\r\nimport minko.Uuid.Has_uuid;\r\ntypedef OnPassFunction = Pass -> Void;\r\ntypedef OnPassFunctionList = Array<OnPassFunction>;\r\n@:expose(\"minko.render.Effect\")\r\nclass Effect extends Has_uuid {\r\n    private var _name:String;\r\n\r\n    private var _techniques:StringMap<Array<Pass>>;\r\n    private var _fallback:StringMap<String> ;\r\n    private var _data:Provider;\r\n\r\n    private var _uniformFunctions:OnPassFunctionList;\r\n    private var _attributeFunctions:OnPassFunctionList;\r\n    private var _macroFunctions:OnPassFunctionList;\r\n\r\n    public static function create(name = \"\") {\r\n        return new Effect(name);\r\n    }\r\n\r\n    public static function createbyTechnique(name, passes:Array<Pass>) {\r\n        var effect:Effect = create(name);\r\n\r\n        effect._techniques.set(\"default\", passes);\r\n\r\n        return effect;\r\n    }\r\n\r\n    override function get_uuid() {\r\n        return _data.uuid;\r\n    }\r\n\r\n    public var name(get, null):String;\r\n\r\n    function get_name() {\r\n        return _name;\r\n    }\r\n\r\n    public var techniques(get, null):StringMap<Array<Pass>>;\r\n\r\n    function get_techniques() {\r\n        return _techniques;\r\n    }\r\n    public var data(get, null):Provider;\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n\r\n    public function technique(techniqueName) {\r\n        if (!hasTechnique(techniqueName)) {\r\n            throw (\"techniqueName = \" + techniqueName);\r\n        }\r\n\r\n        return _techniques.get(techniqueName);\r\n    }\r\n\r\n\r\n    public function fallback(techniqueName) {\r\n        var foundFallbackIt = _fallback.exists(techniqueName);\r\n\r\n        if (foundFallbackIt == false) {\r\n            throw (\"techniqueName = \" + techniqueName);\r\n        }\r\n\r\n        return _fallback.get(techniqueName);\r\n    }\r\n\r\n    public function hasTechnique(techniqueName) {\r\n        return _techniques.exists(techniqueName) != false;\r\n    }\r\n\r\n    public function hasFallback(techniqueName) {\r\n        return _fallback.exists(techniqueName) != false;\r\n    }\r\n\r\n    private static function setUniformOnPass(pass:Pass, name, values:Array<Any>) {\r\n        pass.setUniform(name, values);\r\n    }\r\n\r\n    public function setUniform(name, values:Array<Any>) {\r\n        _uniformFunctions.push(function(pass) {\r\n            setUniformOnPass(pass, name, values);\r\n        });\r\n\r\n        for (technique in _techniques.iterator()) {\r\n            for (pass in technique) {\r\n                pass.setUniform(name, values);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function setAttribute(name, attribute:VertexAttribute) {\r\n        _attributeFunctions.push(function(pass) {\r\n            setVertexAttributeOnPass(pass, name, attribute);\r\n        });\r\n\r\n\r\n        for (technique in _techniques.iterator()) {\r\n            for (pass in technique) {\r\n                pass.setAttribute(name, attribute);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function define(macroName) {\r\n\r\n\r\n        _macroFunctions.push(function(pass) {\r\n            defineOnPass(pass, macroName);\r\n        });\r\n\r\n\r\n        for (technique in _techniques.iterator()) {\r\n            for (pass in technique) {\r\n                pass.define(macroName);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function setDefine(macroName, macroValue:Any) {\r\n        _macroFunctions.push(function(pass) {\r\n            defineOnPassWithValue(pass, macroName, macroValue);\r\n        });\r\n\r\n        for (technique in _techniques.iterator()) {\r\n            for (pass in technique) {\r\n                pass.setDefine(macroName, macroValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function addTechnique(name, passes:Technique) {\r\n        if (hasTechnique(name))\r\n            throw (\"A technique named '\" + name + \"' already exists.\");\r\n\r\n        for (pass in passes) {\r\n            for (func in _uniformFunctions)\r\n                func(pass);\r\n            for (func in _attributeFunctions)\r\n                func(pass);\r\n            for (func in _macroFunctions)\r\n                func(pass);\r\n        }\r\n        _techniques.set(name, passes);\r\n    }\r\n\r\n    public function addTechniqueFallback(name, passes:Technique, fallback) {\r\n        _fallback.set(name, fallback);\r\n\r\n        addTechnique(name, passes);\r\n    }\r\n\r\n    public function removeTechnique(name) {\r\n        if (!hasTechnique(name)) {\r\n            throw (\"The technique named '\" + name + \"' does not exist.\");\r\n        }\r\n\r\n        _techniques.remove(name);\r\n        _fallback.remove(name);\r\n    }\r\n\r\n\r\n    public function initializeMaterial(material:Material, technique = \"default\") {\r\n        fillMaterial(material, technique);\r\n\r\n        return material;\r\n    }\r\n\r\n    public function new(name = \"\") {\r\n        super();\r\n        this._data = Provider.create();\r\n        this._name = name;\r\n\r\n        this._techniques = new StringMap<Array<Pass>>();\r\n        this._fallback = new StringMap<String>() ;\r\n\r\n        this._uniformFunctions = new OnPassFunctionList();\r\n        this._attributeFunctions = new OnPassFunctionList();\r\n        this._macroFunctions = new OnPassFunctionList();\r\n    }\r\n\r\n\r\n    private static function setVertexAttributeOnPass(pass:Pass, name:String, attribute:VertexAttribute) {\r\n        pass.setAttribute(name, attribute);\r\n    }\r\n\r\n    private static function defineOnPass(pass:Pass, macroName:String) {\r\n        pass.define(macroName);\r\n    }\r\n\r\n\r\n    private static function defineOnPassWithValue(pass:Pass, macroName:String, macroValue:Any) {\r\n        pass.setDefine(macroName, macroValue);\r\n    }\r\n\r\n    private function fillMaterial(material:Material, technique:String) {\r\n        var passes:Array<Pass> = _techniques.get(technique);\r\n\r\n        for (pass in passes) {\r\n            // material properties are set using uniforms, thus we only read the default values\r\n            // for uniforms\r\n            var defaultValues = pass.uniformBindings.defaultValues.providers[0];\r\n            for (nameAndBinding in pass.uniformBindings.bindings.keys()) {\r\n                var uniformName = nameAndBinding;\r\n                var nameAndBinding_second:Binding = pass.uniformBindings.bindings.get(nameAndBinding);\r\n                if (defaultValues.hasProperty(uniformName)) {\r\n                    var pos = nameAndBinding_second.propertyName.indexOf(\"material[@{materialUuid}].\");\r\n\r\n                    if (pos == 0) {\r\n                        material.data.set(nameAndBinding_second.propertyName.substr(pos + 26), defaultValues.get(uniformName));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","package minko.render;\r\nimport haxe.io.Int32Array;\r\nimport haxe.io.UInt32Array;\r\nimport glm.Vec4;\r\nimport haxe.ds.IntMap;\r\nimport haxe.ds.ObjectMap;\r\nimport haxe.io.Bytes;\r\nimport js.html.Float32Array;\r\nimport js.html.Uint16Array;\r\nimport js.html.Uint8Array;\r\nimport js.html.webgl.ActiveInfo;\r\nimport js.html.webgl.Buffer;\r\nimport js.html.webgl.Framebuffer;\r\nimport js.html.webgl.GL;\r\nimport js.html.webgl.Renderbuffer;\r\nimport js.html.webgl.UniformLocation;\r\nimport Lambda;\r\nimport minko.render.Blending.Destination;\r\nimport minko.render.Blending.Mode;\r\nimport minko.render.Blending.Source;\r\nimport minko.render.ProgramInputs.AttributeInput;\r\nimport minko.render.ProgramInputs.UniformInput;\r\n/*\r\n* ArrayBufferView is an abstract type that is the base for the following types:\r\n * DataView, Float32Array, Float64Array, Int8Array, Int16Array, Int32Array, Uint8Array, Uint8ClampedArray, Uint16Array, Uint32Array.\r\n* */\r\n@:expose(\"minko.render.GlContext\")\r\nclass GlContext extends AbstractContext {\r\n    inline   function bytesToUint8Array(b:haxe.io.Bytes):Uint8Array {\r\n\r\n        return new Uint8Array(b.getData());\r\n    }\r\n    static inline var GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;\r\n    static inline var GL_STENCIL = 0x1802;\r\n    static inline var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\n    static inline var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\r\n\r\n    static inline var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\n    static inline var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n\r\n    static inline var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\r\n    static inline var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\r\n    static inline var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\r\n    static inline var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\r\n\r\n    static inline var GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137;\r\n    static inline var GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138;\r\n    static inline var GL_ETC1_RGB8_OES = 0x8D64;\r\n    static inline var GL_ATC_RGB_AMD = 0x8C92;\r\n    static inline var GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93;\r\n    private static var _blendingFactors:IntMap<Int> = initializeBlendFactorsMap();\r\n\r\n    static function initializeBlendFactorsMap() {\r\n        var m = new IntMap<Int>();\r\n\r\n        m.set(Source.ZERO, GL.ZERO);\r\n        m.set(Source.ONE, GL.ONE);\r\n        m.set(Source.SRC_COLOR, GL.SRC_COLOR);\r\n        m.set(Source.ONE_MINUS_SRC_COLOR, GL.ONE_MINUS_SRC_COLOR);\r\n        m.set(Source.SRC_ALPHA, GL.SRC_ALPHA);\r\n        m.set(Source.ONE_MINUS_SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\r\n        m.set(Source.DST_ALPHA, GL.DST_ALPHA);\r\n        m.set(Source.ONE_MINUS_DST_ALPHA, GL.ONE_MINUS_DST_ALPHA);\r\n\r\n        m.set(Destination.ZERO, GL.ZERO);\r\n        m.set(Destination.ONE, GL.ONE);\r\n        m.set(Destination.DST_COLOR, GL.DST_COLOR);\r\n        m.set(Destination.ONE_MINUS_DST_COLOR, GL.ONE_MINUS_DST_COLOR);\r\n        m.set(Destination.ONE_MINUS_DST_ALPHA, GL.ONE_MINUS_DST_ALPHA);\r\n        m.set(Destination.ONE_MINUS_SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\r\n        m.set(Destination.DST_ALPHA, GL.DST_ALPHA);\r\n        m.set(Destination.ONE_MINUS_DST_ALPHA, GL.ONE_MINUS_DST_ALPHA);\r\n\r\n        return m;\r\n    }\r\n    private static var _compareFuncs:IntMap< Int> = initializeDepthFuncsMap();\r\n\r\n    static function initializeDepthFuncsMap() {\r\n        var m = new IntMap< Int>();\r\n\r\n        m.set(CompareMode.ALWAYS, GL.ALWAYS);\r\n        m.set(CompareMode.EQUAL, GL.EQUAL);\r\n        m.set(CompareMode.GREATER, GL.GREATER);\r\n        m.set(CompareMode.GREATER_EQUAL, GL.GEQUAL);\r\n        m.set(CompareMode.LESS, GL.LESS);\r\n        m.set(CompareMode.LESS_EQUAL, GL.LEQUAL);\r\n        m.set(CompareMode.NEVER, GL.NEVER);\r\n        m.set(CompareMode.NOT_EQUAL, GL.NOTEQUAL);\r\n\r\n        return m;\r\n    }\r\n    private static var _stencilOps:IntMap< Int> = initializeStencilOperationsMap();\r\n\r\n    static function initializeStencilOperationsMap() {\r\n        var m = new IntMap< Int>();\r\n\r\n        m.set(StencilOperation.KEEP, GL.KEEP);\r\n        m.set(StencilOperation.ZERO, GL.ZERO);\r\n        m.set(StencilOperation.REPLACE, GL.REPLACE);\r\n        m.set(StencilOperation.INCR, GL.INCR);\r\n        m.set(StencilOperation.INCR_WRAP, GL.INCR_WRAP);\r\n        m.set(StencilOperation.DECR, GL.DECR);\r\n        m.set(StencilOperation.DECR_WRAP, GL.DECR_WRAP);\r\n        m.set(StencilOperation.INVERT, GL.INVERT);\r\n\r\n        return m;\r\n    }\r\n    private static var _availableTextureFormats:IntMap< Int> = new IntMap< Int>();\r\n    private var _errorsEnabled:Bool;\r\n    private var _textures:IntMap<js.html.webgl.Texture>;\r\n    private var _textureSizes:IntMap<Tuple<Int, Int>>;\r\n    private var _textureHasMipmaps:IntMap<Bool>;\r\n    private var _textureTypes:IntMap<TextureType>;\r\n    private var _driverInfo:String;\r\n    private var _oglMajorVersion:Int;\r\n    private var _oglMinorVersion:Int;\r\n    private var _vertexBuffers:IntMap<js.html.webgl.Buffer>;\r\n    private var _indexBuffers:IntMap<js.html.webgl.Buffer>;\r\n    private var _programs:IntMap<js.html.webgl.Program>;\r\n    private var _vertexShaders:IntMap<js.html.webgl.Shader>;\r\n    private var _fragmentShaders:IntMap<js.html.webgl.Shader>;\r\n    private var _shaders:IntMap<js.html.webgl.Shader>;\r\n    private var _frameBuffers:IntMap<Framebuffer>;\r\n    private var _renderBuffers:IntMap<Renderbuffer>;\r\n    private var _scissorTest:Bool;\r\n    private var _scissorBox:Vec4;\r\n    private var _viewportX:Int;\r\n    private var _viewportY:Int;\r\n    private var _viewportWidth:Int;\r\n    private var _viewportHeight:Int;\r\n    private var _oldViewportX:Int;\r\n    private var _oldViewportY:Int;\r\n    private var _oldViewportWidth:Int;\r\n    private var _oldViewportHeight:Int;\r\n    private var _currentTarget:Int;\r\n    private var _currentIndexBuffer:Int;\r\n    private var _currentVertexBuffer:IntMap<Int>;\r\n    private var _currentVertexSize:IntMap<Int>;\r\n    private var _currentVertexStride:IntMap<Int>;\r\n    private var _currentVertexOffset:IntMap<Int>;\r\n    private var _currentBoundTexture:Int;\r\n    private var _currentTexture:IntMap<Int>;\r\n    private var _currentWrapMode:IntMap< WrapMode> ;\r\n    private var _currentTextureFilter:IntMap<TextureFilter> ;\r\n    private var _currentMipFilter:IntMap< MipFilter> ;\r\n    private var _currentProgram:Int;\r\n    private var _currentBlendingMode:Mode;\r\n    private var _currentColorMask:Bool;\r\n    private var _currentDepthMask:Bool;\r\n    private var _currentDepthFunc:CompareMode;\r\n    private var _currentTriangleCulling:TriangleCulling;\r\n    private var _currentStencilFunc:CompareMode;\r\n    private var _currentStencilRef:Int;\r\n    private var _currentStencilMask:Int;\r\n    private var _currentStencilFailOp:StencilOperation;\r\n    private var _currentStencilZFailOp:StencilOperation;\r\n    private var _currentStencilZPassOp:StencilOperation;\r\n    private var _vertexAttributeEnabled:IntMap<Bool>;\r\n    private var _stencilBits:Int;\r\n    private var _uniformInputLocations:IntMap<UniformLocation>;\r\n    private var _uniformInputLocationKeys:ObjectMap<UniformLocation, Int>;\r\n    static var locationCount:Int = 0;\r\n\r\n    static var vertexBufferCount:Int = 0;\r\n    static var indexBufferCount:Int = 0;\r\n    static var textureCount:Int = 0;\r\n    static var programCount:Int = 0;\r\n    static var shaderCount:Int = 0;\r\n\r\n    var canvas:js.html.CanvasElement;\r\n    public var gl:js.html.webgl.RenderingContext;\r\n\r\n\r\n    public function new() {\r\n\r\n        super();\r\n    }\r\n\r\n    public function initialize() {\r\n        _textureTypes = new IntMap<TextureType>();\r\n        _uniformInputLocations = new IntMap<UniformLocation>();\r\n        _uniformInputLocationKeys = new ObjectMap<UniformLocation, Int>();\r\n        _errorsEnabled = (false);\r\n        _textures = new IntMap<js.html.webgl.Texture>();\r\n        _textureSizes = new IntMap<Tuple<Int, Int>>();\r\n        _textureHasMipmaps = new IntMap<Bool>();\r\n        _oldViewportX = _viewportX = (0);\r\n        _oldViewportY = _viewportY = (0);\r\n        _oldViewportWidth = _viewportWidth = (0);\r\n        _oldViewportHeight = _viewportHeight = (0);\r\n        _currentTarget = -1;\r\n        _currentIndexBuffer = -1;\r\n        _currentVertexBuffer = new IntMap<Int>();//(8, 0),\r\n        for (i in 0...8) _currentVertexBuffer.set(i, 0);\r\n\r\n        _currentVertexSize = new IntMap<Int>();//(8, -1),\r\n        for (i in 0...8) _currentVertexSize.set(i, -1);\r\n        _currentVertexStride = new IntMap<Int>();//(8, -1),\r\n        for (i in 0...8) _currentVertexStride.set(i, -1);\r\n        _currentVertexOffset = new IntMap<Int>();//(8, -1),\r\n        for (i in 0...8) _currentVertexOffset.set(i, -1);\r\n        _currentBoundTexture = (0);\r\n        _currentTexture = new IntMap<Int>();//(8, 0),\r\n        for (i in 0...8) _currentTexture.set(i, 0);\r\n        _currentProgram = (0);\r\n        _currentTriangleCulling = (TriangleCulling.BACK);\r\n        _currentWrapMode = new IntMap< WrapMode>();\r\n        _currentTextureFilter = new IntMap<TextureFilter>();\r\n        _currentMipFilter = new IntMap< MipFilter>();\r\n        _currentBlendingMode = Mode.DEFAULT;\r\n        _currentColorMask = (true);\r\n        _currentDepthMask = (true);\r\n        _currentDepthFunc = (CompareMode.UNSET);\r\n        _currentStencilFunc = (CompareMode.UNSET);\r\n        _currentStencilRef = (0);\r\n        _currentStencilMask = (0x1);\r\n        _currentStencilFailOp = (StencilOperation.UNSET);\r\n        _currentStencilZFailOp = (StencilOperation.UNSET);\r\n        _currentStencilZPassOp = (StencilOperation.UNSET);\r\n        _vertexAttributeEnabled = new IntMap<Bool>();//(32u, false),\r\n        for (i in 0...32) _vertexAttributeEnabled.set(i, false);\r\n        _stencilBits = (0);\r\n        _vertexBuffers = new IntMap<js.html.webgl.Buffer>();\r\n        _indexBuffers = new IntMap<js.html.webgl.Buffer>();\r\n        _programs = new IntMap<js.html.webgl.Program>();\r\n        _vertexShaders = new IntMap<js.html.webgl.Shader>();\r\n        _fragmentShaders = new IntMap<js.html.webgl.Shader>();\r\n        _shaders = new IntMap<js.html.webgl.Shader>();\r\n        _frameBuffers = new IntMap<js.html.webgl.Framebuffer>();\r\n        _renderBuffers = new IntMap<js.html.webgl.Renderbuffer>();\r\n\r\n        gl.enable(GL.DEPTH_TEST);\r\n        gl.enable(GL.BLEND);\r\n        gl.enable(GL.CULL_FACE);\r\n        gl.cullFace(GL.BACK);\r\n        gl.frontFace(GL.CCW);\r\n\r\n\r\n        _driverInfo =  \"\";// gl.getContextAttributes();\r\n        trace(\"_getSupportedExtensions\"+gl.getSupportedExtensions());\r\n        gl.getExtension(\"OES_standard_derivatives\");\r\n        trace(\"_getSupportedExtensions\"+gl.getSupportedExtensions());\r\n        _oglMajorVersion = 2;\r\n        _oglMinorVersion = 0;\r\n\r\n\r\n        var viewportSettings = gl.getParameter(GL.VIEWPORT);\r\n        _viewportX = viewportSettings[0];\r\n        _viewportY = viewportSettings[1];\r\n        _viewportWidth = viewportSettings[2];\r\n        _viewportHeight = viewportSettings[3];\r\n\r\n        setColorMask(true);\r\n        setDepthTest(true, CompareMode.LESS);\r\n\r\n#if  GL_ES_VERSION_2_0\r\n\tglGetIntegerv(GL_STENCIL_BITS, &_stencilBits);\r\n#else\r\n        _stencilBits = gl.getParameter(GL.STENCIL_BITS);\r\n        //       _stencilBits = gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, GL_STENCIL, GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE);\r\n#end\r\n\r\n        if (_stencilBits != -1) {\r\n            gl.enable(GL.STENCIL_TEST);\r\n            setStencilTest(CompareMode.ALWAYS, 0, 0x1, StencilOperation.KEEP, StencilOperation.KEEP, StencilOperation.KEEP);\r\n        }\r\n\r\n        initializeExtFunctions();\r\n\r\n    }\r\n\r\n    function initializeExtFunctions() {\r\n\r\n    }\r\n\r\n    override public function dispose() {\r\n        for (vertexBuffer in _vertexBuffers.iterator()) {\r\n            gl.deleteBuffer(vertexBuffer);\r\n        }\r\n\r\n        for (indexBuffer in _indexBuffers.iterator()) {\r\n            gl.deleteBuffer(indexBuffer);\r\n        }\r\n\r\n        for (texture in _textures.iterator()) {\r\n            gl.deleteTexture(texture);\r\n        }\r\n\r\n        for (program in _programs.iterator()) {\r\n            gl.deleteProgram(program);\r\n        }\r\n\r\n        for (vertexShader in _vertexShaders.iterator()) {\r\n            gl.deleteShader(vertexShader);\r\n        }\r\n\r\n        for (fragmentShader in _fragmentShaders.iterator()) {\r\n            gl.deleteShader(fragmentShader);\r\n        }\r\n        super.dispose();\r\n    }\r\n\r\n    public static function create() {\r\n        return new GlContext();\r\n    }\r\n\r\n\r\n    override function get_errorsEnabled() {\r\n        return _errorsEnabled;\r\n    }\r\n\r\n    override function set_errorsEnabled(errors) {\r\n        _errorsEnabled = errors;\r\n        return errors;\r\n    }\r\n\r\n    override function get_driverInfo() {\r\n        return _driverInfo;\r\n    }\r\n\r\n    override function get_renderTarget() {\r\n        return _currentTarget;\r\n    }\r\n\r\n    override function get_viewportWidth() {\r\n        return _viewportWidth;\r\n    }\r\n\r\n    override function get_viewportHeight() {\r\n        return _viewportHeight;\r\n    }\r\n\r\n    override function get_currentProgram() {\r\n        return _currentProgram;\r\n    }\r\n\r\n    override public function configureViewport(x:Int, y:Int, width:Int, height:Int) {\r\n        if (x != _viewportX || y != _viewportY || width != _viewportWidth || height != _viewportHeight) {\r\n            _viewportX = x;\r\n            _viewportY = y;\r\n            _viewportWidth = width;\r\n            _viewportHeight = height;\r\n\r\n            gl.viewport(x, y, width, height);\r\n        }\r\n    }\r\n\r\n\r\n    override public function clear(red :Float= 0.0, green:Float = 0.0, blue:Float = 0.0, alpha:Float = 0.0, depth:Float = 1.0, stencil:Int = 0, mask:Int = 0xffffffff) {\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glClearColor.xml\r\n        //\r\n        // void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);\r\n        // red, green, blue, alpha Specify the red, green, blue, and alpha values used when the color buffers are cleared.\r\n        // The initial values are all 0.\r\n        //\r\n        // glClearColor specify clear values for the color buffers\r\n        gl.clearColor(red, green, blue, alpha);\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glClearDepth.xml\r\n        //\r\n        // void glClearDepth(GLdouble depth);\r\n        // void glClearDepthf(GLfloat depth);\r\n        // depth Specifies the depth value used when the depth buffer is cleared. The initial value is 1.\r\n        //\r\n        // glClearDepth specify the clear value for the depth buffer\r\n#if GL_ES_VERSION_2_0\r\n\t\t\t\tglClearDepthf(depth);\r\n#else\r\n        gl.clearDepth(depth);\r\n#end\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glClearStencil.xml\r\n        //\r\n        // void glClearStencil(GLint s)\r\n        // Specifies the index used when the stencil buffer is cleared. The initial value is 0.\r\n        //\r\n        // glClearStencil specify the clear value for the stencil buffer\r\n        if (_stencilBits != 0) {\r\n            gl.clearStencil(stencil);\r\n        }\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glClear.xml\r\n        //\r\n        // void glClear(GLbitfield mask);\r\n        // mask\r\n        // Bitwise OR of masks that indicate the buffers to be cleared. The three masks are GL_COLOR_BUFFER_BIT,\r\n        // GL_DEPTH_BUFFER_BIT, and GL_STENCIL_BUFFER_BIT.\r\n        //\r\n        // glClear clear buffers to preset values\r\n        mask = (GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT | GL.STENCIL_BUFFER_BIT) & mask;\r\n        if (mask & GL.DEPTH_BUFFER_BIT != null) {\r\n            gl.depthMask(_currentDepthMask = true);\r\n        }\r\n        gl.clear(mask);\r\n    }\r\n\r\n    override public function present() {\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glFlush.xml\r\n        //\r\n        // force execution of GL commands in finite time\r\n        //glFlush();\r\n           gl.flush();\r\n        //setRenderToBackBuffer();\r\n        //  gl.useProgram(null);\r\n        // gl.bindBuffer(GL.ARRAY_BUFFER, null);\r\n\r\n    }\r\n\r\n    override public function drawTriangles(firstIndex:Int, numTriangles:Int) {\r\n        gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, null);\r\n//        _currentIndexBuffer = -1;\r\n        gl.drawArrays(GL.TRIANGLES, firstIndex, numTriangles * 3);\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function drawIndexBufferTriangles(indexBuffer:Int, firstIndex:Int, numTriangles:Int) {\r\n        if (_currentIndexBuffer != indexBuffer)\r\n\t\t{\r\n            _currentIndexBuffer = indexBuffer;\r\n            gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, _indexBuffers.get(indexBuffer));\r\n        }\r\n        checkForErrors();\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glDrawElements.xml\r\n        //\r\n        // void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices);\r\n        // mode Specifies what kind of primitives to render.\r\n        // count Specifies the number of elements to be rendered.\r\n        // type Specifies the type of the values in indices.\r\n        // indices Specifies a pointer to the location where the indices are stored.\r\n        //\r\n        // glDrawElements render primitives from array data\r\n        gl.drawElements(GL.TRIANGLES, numTriangles * 3, GL.UNSIGNED_SHORT, firstIndex);\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    function checkForErrors() {\r\n\r\n//#if DEBUG\r\n        if (_errorsEnabled && getError() != GL.NO_ERROR) {\r\n            throw (\"error: OpenGLES2Context::checkForErrors()\");\r\n            trace(\"\\n\");\r\n            throw \"\";\r\n        }\r\n//#end\r\n    }\r\n\r\n\r\n    override public function createVertexBuffer(size:Int) {\r\n\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glGenBuffers.xml\r\n        //\r\n        // void glGenBuffers(GLsizei n, GLuint* buffers);\r\n        // n Specifies the number of buffer object names to be vertexBufferd.\r\n        // buffers Specifies an array in which the generated buffer object names are stored.\r\n        //\r\n        // glGenBuffers returns n buffer object names in buffers. There is no\r\n        // guarantee that the names form a contiguous set of integers; however,\r\n        // it is guaranteed that none of the returned names was in use immediately\r\n        // before the call to glGenBuffers.\r\n        var vertexBuffer:Buffer = gl.createBuffer();\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glBindBuffer.xml\r\n        //\r\n        // void glBindBuffer(GLenum target, GLuint buffer);\r\n        // target Specifies the target to which the buffer object is bound.\r\n        // buffer Specifies the name of a buffer object.\r\n        //\r\n        // glBindBuffer binds a buffer object to the specified buffer binding point.\r\n        gl.bindBuffer(GL.ARRAY_BUFFER, vertexBuffer);\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glBufferData.xml\r\n        //\r\n        // void glBufferData(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage)\r\n        // target Specifies the target buffer object.\r\n        // size Specifies the size in bytes of the buffer object's new data store.\r\n        // data Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.\r\n        // usage Specifies the expected usage pattern of the data store.\r\n        //\r\n        // glBufferData creates and initializes a buffer object's data store\r\n        gl.bufferData(GL.ARRAY_BUFFER, size * UInt32Array.BYTES_PER_ELEMENT, GL.STATIC_DRAW);\r\n        vertexBufferCount += 1;\r\n        _vertexBuffers.set(vertexBufferCount, vertexBuffer);\r\n\r\n        checkForErrors();\r\n\r\n        return vertexBufferCount;\r\n    }\r\n\r\n    override public function createVertexAttributeArray() {\r\n        /*\r\n        var vao = gl.createVertexArray();\r\n\r\n*/\r\n        return -1;\r\n    }\r\n\r\n    override public function setVertexAttributeArray(vertexArray:Int) {\r\n        //     gl.bindVertexArray(vao);\r\n        //  checkForErrors();\r\n    }\r\n\r\n    override public function setVertexBufferAt(position:Int, vertexBuffer:Int, size:Int, stride:Int, offset:Int) {\r\n        var vertexAttributeEnabled = vertexBuffer > 0;\r\n        var vertexBufferChanged = (_currentVertexBuffer.get(position) != vertexBuffer) || vertexAttributeEnabled;\r\n\r\n        if (vertexBufferChanged) {\r\n            gl.bindBuffer(GL.ARRAY_BUFFER, _vertexBuffers.get(vertexBuffer));\r\n            checkForErrors();\r\n\r\n            _currentVertexBuffer.set(position, vertexBuffer);\r\n        }\r\n\r\n        if (vertexBufferChanged\r\n        || _currentVertexSize.get(position) != size\r\n        || _currentVertexStride.get(position) != stride\r\n        || _currentVertexOffset.get(position) != offset) {\r\n            // http://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml\r\n\r\n            gl.vertexAttribPointer(position, size, GL.FLOAT, false, 4 * stride, (4 * offset));\r\n            checkForErrors();\r\n\r\n            _currentVertexSize.set(position, size);\r\n            _currentVertexStride.set(position, stride);\r\n            _currentVertexOffset.set(position, offset);\r\n        }\r\n\r\n        if (vertexBufferChanged || _vertexAttributeEnabled.get(position) != vertexAttributeEnabled) {\r\n            if (vertexAttributeEnabled) {\r\n                gl.enableVertexAttribArray(position);\r\n                checkForErrors();\r\n\r\n                _vertexAttributeEnabled.set(position, true);\r\n            }\r\n            else {\r\n                gl.disableVertexAttribArray(position);\r\n                checkForErrors();\r\n\r\n                _vertexAttributeEnabled.set(position, false);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    override public function uploadVertexBufferData(vertexBuffer:Int, offset:Int, size:Int, data:Array<Float>) {\r\n        gl.bindBuffer(GL.ARRAY_BUFFER, _vertexBuffers.get(vertexBuffer));\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glBufferSubData.xml\r\n        //\r\n        // void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);\r\n        // target Specifies the target buffer object\r\n        // offset Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.\r\n        // size Specifies the size in bytes of the data store region being replaced.\r\n        // data Specifies a pointer to the new data that will be copied into the data store.\r\n        //\r\n        // glBufferSubData updates a subset of a buffer object's data store\r\n\r\n        gl.bufferSubData(GL.ARRAY_BUFFER, offset * Int32Array.BYTES_PER_ELEMENT, new Float32Array(data));\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function deleteVertexBuffer(vertexBuffer:Int) {\r\n        for (currentVertexBuffer in _currentVertexBuffer.keys())\r\n            if (_currentVertexBuffer.get(currentVertexBuffer) == vertexBuffer)\r\n                _currentVertexBuffer.set(currentVertexBuffer, 0);\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glDeleteBuffers.xml\r\n        //\r\n        // void glDeleteBuffers(GLsizei n, const GLuint* buffers)\r\n        // n Specifies the number of buffer objects to be deleted.\r\n        // buffers Specifies an array of buffer objects to be deleted.\r\n        //\r\n        // glDeleteBuffers deletes n buffer objects named by the elements of the array buffers. After a buffer object is\r\n        // deleted, it has no contents, and its name is free for reuse (for example by glGenBuffers). If a buffer object\r\n        // that is currently bound is deleted, the binding reverts to 0 (the absence of any buffer object).\r\n        gl.deleteBuffer(_vertexBuffers.get(vertexBuffer));\r\n        _vertexBuffers.remove(vertexBuffer) ;\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function createIndexBuffer(size:Int) {\r\n        var indexBuffer:Buffer = gl.createBuffer();\r\n        gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n\r\n        gl.bufferData(GL.ELEMENT_ARRAY_BUFFER, size * Uint16Array.BYTES_PER_ELEMENT, GL.STATIC_DRAW);\r\n        indexBufferCount += 1;\r\n       // _currentIndexBuffer = indexBufferCount;\r\n        _indexBuffers.set(indexBufferCount, indexBuffer);\r\n        checkForErrors();\r\n\r\n        return indexBufferCount;\r\n    }\r\n\r\n    override public function uploaderIndexBufferData(indexBuffer:Int, offset:Int, size:Int, data:Array<Int>) {\r\n        if (_currentIndexBuffer != indexBuffer) {\r\n            gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, _indexBuffers.get(indexBuffer));\r\n            _currentIndexBuffer = indexBuffer;\r\n        }\r\n//        if(_indexBuffersSize.get(indexBuffer)!=size){\r\n//            throw \"_indexBuffersSize.get(indexBuffer)!=size\";\r\n//        }\r\n\r\n\r\n        gl.bufferSubData(GL.ELEMENT_ARRAY_BUFFER, offset * Uint16Array.BYTES_PER_ELEMENT, new Uint16Array(data));\r\n        checkForErrors();\r\n    }\r\n\r\n\r\n    public override function deleteIndexBuffer(indexBuffer:Int) {\r\n        if (_currentIndexBuffer == indexBuffer) {\r\n            _currentIndexBuffer = -1;\r\n        }\r\n        gl.deleteBuffer(_indexBuffers.get(indexBuffer));\r\n        _indexBuffers.remove(indexBuffer);\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function createTexture(type:TextureType, width:Int, height:Int, mipMapping:Bool, optimizeForRenderToTexture:Bool = false, assertPowerOfTwoSized:Bool = true) {\r\n\r\n\r\n        if (assertPowerOfTwoSized) {\r\n            // make sure width is a power of 2\r\n            if (!((width != 0) && (width & (width - 1)) == 0))\r\n                throw (\"width\");\r\n\r\n            // make sure height is a power of 2\r\n            if (!((height != 0) && (height & (height - 1)) == 0))\r\n                throw (\"height\");\r\n        }\r\n        else {\r\n            if (mipMapping)\r\n                throw (\"assertPowerOfTwoSized must be true when mipMapping is true\");\r\n        }\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glGenTextures.xml\r\n        //\r\n        // void glGenTextures(GLsizei n, GLuint* textures)\r\n        // n Specifies the number of texture names to be generated.\r\n        // textures Specifies an array in which the generated texture names are stored.\r\n        //\r\n        // glGenTextures generate texture names\r\n        var texture:js.html.webgl.Texture = gl.createTexture();\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glBindTexture.xml\r\n        //\r\n        // void glBindTexture(GLenum target, GLuint texture);\r\n        // target Specifies the target to which the texture is bound.\r\n        // texture Specifies the name of a texture.\r\n        //\r\n        // glBindTexture bind a named texture to a texturing target\r\n        var glTarget = (type == TextureType.Texture2D\r\n        ? GL.TEXTURE_2D\r\n        : GL.TEXTURE_CUBE_MAP);\r\n\r\n        gl.bindTexture(glTarget, texture);\r\n        textureCount++;\r\n        _currentBoundTexture = textureCount;\r\n        //texture;\r\n\r\n        // default sampler states\r\n        gl.texParameteri(glTarget, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);\r\n        gl.texParameteri(glTarget, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);\r\n        gl.texParameteri(glTarget, GL.TEXTURE_MIN_FILTER, GL.NEAREST);\r\n        gl.texParameteri(glTarget, GL.TEXTURE_MAG_FILTER, GL.NEAREST);\r\n\r\n        _textures.set(textureCount, texture);\r\n        _textureSizes.set(textureCount, new Tuple<Int, Int>(width, height));\r\n        _textureHasMipmaps.set(textureCount, mipMapping);\r\n        _textureTypes.set(textureCount, type);\r\n\r\n        _currentWrapMode.set(textureCount, WrapMode.CLAMP);\r\n        _currentTextureFilter.set(textureCount, TextureFilter.NEAREST);\r\n        _currentMipFilter.set(textureCount, MipFilter.NONE);\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glTexImage2D.xml\r\n        //\r\n        // void glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border,\r\n        // GLenum format, GLenum type, const GLvoid* data);\r\n        // target Specifies the target texture.\r\n        // level Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction\r\n        // image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.\r\n        // internalFormat Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1,\r\n        // one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3,\r\n        // below.\r\n        // width Specifies the width of the texture image.\r\n        // height Specifies the height of the texture image.\r\n        // border This value must be 0.\r\n        // format Specifies the format of the pixel data.\r\n        // type Specifies the data type of the pixel data\r\n        // data Specifies a pointer to the image data in memory.\r\n        //\r\n        // glTexImage2D specify a two-dimensional texture image\r\n        if (mipMapping) {\r\n            var level = 0;\r\n            var h = height;\r\n            var w = width;\r\n            var size = width > height ? width : height;\r\n            while (size > 0) {\r\n                if (type == TextureType.Texture2D)\r\n                    gl.texImage2D(GL.TEXTURE_2D, level, GL.RGBA, w, h, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                else {\r\n                    gl.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X, level, GL.RGBA, w, h, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                    gl.texImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_X, level, GL.RGBA, w, h, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                    gl.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_Y, level, GL.RGBA, w, h, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                    gl.texImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_Y, level, GL.RGBA, w, h, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                    gl.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_Z, level, GL.RGBA, w, h, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                    gl.texImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_Z, level, GL.RGBA, w, h, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                }\r\n\r\n                ++level;\r\n                size = size >> 1;\r\n                w = w >> 1;\r\n                h = h >> 1;\r\n            }\r\n        }\r\n        else {\r\n            if (type == TextureType.Texture2D)\r\n                gl.texImage2D(GL.TEXTURE_2D, 0, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n            else {\r\n                gl.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                gl.texImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                gl.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                gl.texImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                gl.texImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n                gl.texImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);\r\n            }\r\n        }\r\n\r\n        if (optimizeForRenderToTexture)\r\n            createRTTBuffers(type, textureCount, width, height);\r\n\r\n        checkForErrors();\r\n\r\n        return textureCount;\r\n    }\r\n\r\n\r\n    override public function createRectangleTexture(type:TextureType, width:Int, height:Int) {\r\n        return createTexture(type, width, height, false, false, false);\r\n    }\r\n\r\n    override public function createCompressedTexture(type:TextureType, format:TextureFormat, width:Int, height:Int, mipMapping:Bool) {\r\n\r\n\r\n        // make sure width is a power of 2\r\n        if (!((width != 0) && (width & (width - 1)) == 0))\r\n            throw (\"width\");\r\n\r\n        // make sure height is a power of 2\r\n        if (!((height != 0) && (height & (height - 1)) == 0))\r\n            throw (\"height\");\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glGenTextures.xml\r\n        //\r\n        // void glGenTextures(GLsizei n, GLuint* textures)\r\n        // n Specifies the number of texture names to be generated.\r\n        // textures Specifies an array in which the generated texture names are stored.\r\n        //\r\n        // glGenTextures generate texture names\r\n        var texture = gl.createTexture();\r\n\r\n        // http://www.opengl.org/sdk/docs/man/xhtml/glBindTexture.xml\r\n        //\r\n        // void glBindTexture(GLenum target, GLuint texture);\r\n        // target Specifies the target to which the texture is bound.\r\n        // texture Specifies the name of a texture.\r\n        //\r\n        // glBindTexture bind a named texture to a texturing target\r\n        var glTarget = (type == TextureType.Texture2D\r\n        ? GL.TEXTURE_2D\r\n        : GL.TEXTURE_CUBE_MAP);\r\n\r\n        gl.bindTexture(glTarget, texture);\r\n        textureCount++;\r\n        _currentBoundTexture = textureCount ;\r\n\r\n        // default sampler states\r\n        gl.texParameteri(glTarget, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);\r\n        gl.texParameteri(glTarget, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);\r\n        gl.texParameteri(glTarget, GL.TEXTURE_MIN_FILTER, GL.NEAREST);\r\n        gl.texParameteri(glTarget, GL.TEXTURE_MAG_FILTER, GL.NEAREST);\r\n\r\n\r\n        _textures.set(textureCount, texture);\r\n        _textureSizes.set(textureCount, new Tuple<Int, Int>(width, height));\r\n        _textureHasMipmaps.set(textureCount, mipMapping);\r\n        _textureTypes.set(textureCount, type);\r\n\r\n        _currentWrapMode.set(textureCount, WrapMode.CLAMP);\r\n        _currentTextureFilter.set(textureCount, TextureFilter.NEAREST);\r\n        _currentMipFilter.set(textureCount, MipFilter.NONE);\r\n\r\n        var oglFormat = availableTextureFormats().get(format);\r\n        var level = 0;\r\n        var h = height;\r\n        var w = width;\r\n        if (mipMapping) {\r\n\r\n\r\n            var size = width > height ? width : height;\r\n            while (size > 0) {\r\n                var dataSize = TextureFormatInfo.textureSize(format, w, h);\r\n                var data:Bytes = Bytes.alloc(dataSize) ;//fill 0\r\n                //todo data\r\n                if (type == TextureType.Texture2D)\r\n                    gl.compressedTexImage2D(GL.TEXTURE_2D, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                else {\r\n                    gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                    gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_X, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                    gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_Y, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                    gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_Y, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                    gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_Z, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                    gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_Z, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                }\r\n\r\n                ++level;\r\n                size = size >> 1;\r\n                w = w >> 1;\r\n                h = h >> 1;\r\n            }\r\n        }\r\n        else {\r\n            var dataSize = TextureFormatInfo.textureSize(format, width, height);\r\n            var data:Bytes = Bytes.alloc(dataSize);//fill 0\r\n\r\n            if (type == TextureType.Texture2D)\r\n                gl.compressedTexImage2D(GL.TEXTURE_2D, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n            else {\r\n                gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_X, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_X, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_Y, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_Y, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_POSITIVE_Z, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n                gl.compressedTexImage2D(GL.TEXTURE_CUBE_MAP_NEGATIVE_Z, level, oglFormat, w, h, 0, bytesToUint8Array(data));\r\n            }\r\n        }\r\n\r\n        checkForErrors();\r\n\r\n        return textureCount;\r\n\r\n    }\r\n\r\n    public function getTextureType(textureId:Int) {\r\n        var foundTypeIt = _textureTypes.get(textureId);\r\n\r\n//Debug.Assert(foundTypeIt != _textureTypes.end());\r\n\r\n        return foundTypeIt;\r\n    }\r\n\r\n    override public function uploadTexture2dData(texture:Int, width:Int, height:Int, mipLevel:Int, data:Bytes) {\r\n//Debug.Assert(getTextureType(texture) == TextureType.Texture2D);\r\n\r\n        gl.bindTexture(GL.TEXTURE_2D, _textures.get(texture));\r\n        gl.texImage2D(GL.TEXTURE_2D, mipLevel, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, bytesToUint8Array(data));\r\n\r\n        _currentBoundTexture = texture;\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function uploadCubeTextureData(texture:Int, face:CubeTexture.Face, width:Int, height:Int, mipLevel:Int, data:Bytes) {\r\n//Debug.Assert(getTextureType(texture) == TextureType.CubeTexture);\r\n\r\n        gl.bindTexture(GL.TEXTURE_CUBE_MAP, _textures.get(texture));\r\n\r\n        var cubeFace:Int = 0;\r\n        switch (face)\r\n        {\r\n            case minko.render.CubeTexture.Face.POSITIVE_X:\r\n                cubeFace = GL.TEXTURE_CUBE_MAP_POSITIVE_X;\r\n\r\n            case minko.render.CubeTexture.Face.NEGATIVE_X:\r\n                cubeFace = GL.TEXTURE_CUBE_MAP_NEGATIVE_X;\r\n\r\n            case minko.render.CubeTexture.Face.POSITIVE_Y:\r\n                cubeFace = GL.TEXTURE_CUBE_MAP_POSITIVE_Y;\r\n\r\n            case minko.render.CubeTexture.Face.NEGATIVE_Y:\r\n                cubeFace = GL.TEXTURE_CUBE_MAP_NEGATIVE_Y;\r\n\r\n            case minko.render.CubeTexture.Face.POSITIVE_Z:\r\n                cubeFace = GL.TEXTURE_CUBE_MAP_POSITIVE_Z;\r\n\r\n            case minko.render.CubeTexture.Face.NEGATIVE_Z:\r\n                cubeFace = GL.TEXTURE_CUBE_MAP_NEGATIVE_Z;\r\n\r\n            default:\r\n                throw \"\";\r\n        }\r\n\r\n        gl.texImage2D(cubeFace, mipLevel, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, bytesToUint8Array(data));\r\n\r\n        _currentBoundTexture = texture;\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function uploadCompressedTexture2dData(texture:Int, format:TextureFormat, width:Int, height:Int, size:Int, mipLevel:Int, data:Bytes) {\r\n//Debug.Assert(getTextureType(texture) == TextureType.Texture2D);\r\n\r\n        var formats = availableTextureFormats();\r\n\r\n        gl.bindTexture(GL.TEXTURE_2D, _textures.get(texture));\r\n        gl.compressedTexSubImage2D(GL.TEXTURE_2D, mipLevel, 0, 0, width, height, formats.get(format), bytesToUint8Array(data));\r\n\r\n        _currentBoundTexture = texture;\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function uploadCompressedCubeTextureData(texture:Int, face:CubeTexture.Face, format:TextureFormat, width:Int, height:Int, mipLevel:Int, data:Bytes) {\r\n\r\n        // FIXME\r\n        throw \"\";\r\n    }\r\n\r\n    override public function activateMipMapping(texture:Int) {\r\n        _textureHasMipmaps.set(texture, true);\r\n    }\r\n\r\n    override public function deleteTexture(texture:Int) {\r\n\r\n\r\n        gl.deleteTexture(_textures.get(texture));\r\n        _textures.remove(texture) ;\r\n        if (_frameBuffers.exists(texture)) {\r\n            gl.deleteFramebuffer(_frameBuffers.get(texture));\r\n            _frameBuffers.remove(texture);\r\n\r\n            gl.deleteRenderbuffer(_renderBuffers.get(texture));\r\n            _renderBuffers.remove(texture);\r\n        }\r\n\r\n        _textureSizes.remove(texture);\r\n        _textureHasMipmaps.remove(texture);\r\n        _textureTypes.remove(texture);\r\n\r\n        _currentWrapMode.remove(texture);\r\n        _currentTextureFilter.remove(texture);\r\n        _currentMipFilter.remove(texture);\r\n        _currentTexture.set(texture, 0);\r\n        _currentBoundTexture = (_currentBoundTexture == texture ? 0 : _currentBoundTexture);\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function setTextureAt(position:Int, texture:Int, location :Int= -1) {\r\n        var textureIsValid = texture > 0;\r\n\r\n        if (!textureIsValid) {\r\n            return;\r\n        }\r\n\r\n        if (position >= Lambda.count(_currentTexture)) {\r\n            return;\r\n        }\r\n\r\n        var glTarget = getTextureType(texture) == TextureType.Texture2D ? GL.TEXTURE_2D : GL.TEXTURE_CUBE_MAP;\r\n\r\n        if (_currentTexture.get(position) != texture || _currentBoundTexture != texture) {\r\n            gl.activeTexture(GL.TEXTURE0 + position);\r\n            gl.bindTexture(glTarget, _textures.get(texture));\r\n\r\n            _currentTexture.set(position, texture);\r\n            _currentBoundTexture = texture;\r\n        }\r\n\r\n        if (textureIsValid && location >= 0) {\r\n            gl.uniform1i(_uniformInputLocations.get(location), position);\r\n        }\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function setSamplerStateAt(position:Int, wrapping:WrapMode, filtering:TextureFilter, mipFiltering:MipFilter) {\r\n        var texture = _currentTexture.get(position);\r\n        var glTarget = getTextureType(texture) == TextureType.Texture2D ? GL.TEXTURE_2D : GL.TEXTURE_CUBE_MAP;\r\n\r\n        var active = false;\r\n\r\n        // disable mip mapping if mip maps are not available\r\n        if (!_textureHasMipmaps.get(texture)) {\r\n            mipFiltering = MipFilter.NONE;\r\n        }\r\n\r\n        if (_currentWrapMode.get(texture) != wrapping) {\r\n            _currentWrapMode.set(texture, wrapping);\r\n\r\n            gl.activeTexture(GL.TEXTURE0 + position);\r\n            active = true;\r\n            switch (wrapping)\r\n            {\r\n                case WrapMode.CLAMP :\r\n                    gl.texParameteri(glTarget, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);\r\n                    gl.texParameteri(glTarget, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);\r\n\r\n                case WrapMode.REPEAT :\r\n                    gl.texParameteri(glTarget, GL.TEXTURE_WRAP_S, GL.REPEAT);\r\n                    gl.texParameteri(glTarget, GL.TEXTURE_WRAP_T, GL.REPEAT);\r\n\r\n            }\r\n        }\r\n\r\n        if (_currentTextureFilter.get(texture) != filtering || _currentMipFilter.get(texture) != mipFiltering) {\r\n            _currentTextureFilter.set(texture, filtering);\r\n            _currentMipFilter.set(texture, mipFiltering);\r\n\r\n            if (!active) {\r\n                gl.activeTexture(GL.TEXTURE0 + position);\r\n            }\r\n\r\n            switch (filtering)\r\n            {\r\n                case TextureFilter.NEAREST :\r\n                    switch (mipFiltering)\r\n                    {\r\n                        case MipFilter.NONE :\r\n                            gl.texParameteri(glTarget, GL.TEXTURE_MIN_FILTER, GL.NEAREST);\r\n\r\n                        case MipFilter.NEAREST :\r\n                            gl.texParameteri(glTarget, GL.TEXTURE_MIN_FILTER, GL.NEAREST_MIPMAP_NEAREST);\r\n\r\n                        case MipFilter.LINEAR :\r\n                            gl.texParameteri(glTarget, GL.TEXTURE_MIN_FILTER, GL.NEAREST_MIPMAP_LINEAR);\r\n\r\n                    }\r\n\r\n                    gl.texParameteri(glTarget, GL.TEXTURE_MAG_FILTER, GL.NEAREST);\r\n\r\n                case TextureFilter.LINEAR :\r\n                    switch (mipFiltering)\r\n                    {\r\n                        case MipFilter.NONE :\r\n                            gl.texParameteri(glTarget, GL.TEXTURE_MIN_FILTER, GL.LINEAR);\r\n\r\n                        case MipFilter.NEAREST :\r\n                            gl.texParameteri(glTarget, GL.TEXTURE_MIN_FILTER, GL.LINEAR_MIPMAP_NEAREST);\r\n\r\n                        case MipFilter.LINEAR :\r\n                            gl.texParameteri(glTarget, GL.TEXTURE_MIN_FILTER, GL.LINEAR_MIPMAP_LINEAR);\r\n\r\n                    }\r\n                    gl.texParameteri(glTarget, GL.TEXTURE_MAG_FILTER, GL.LINEAR);\r\n\r\n            }\r\n        }\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function createProgram() {\r\n        var handle = gl.createProgram();\r\n\r\n        checkForErrors();\r\n        programCount++;\r\n        _programs.set(programCount, handle);\r\n\r\n        return programCount;\r\n    }\r\n\r\n    override public function attachShader(program:Int, shader:Int) {\r\n        gl.attachShader(_programs.get(program), _shaders.get(shader));\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function linkProgram(program:Int) {\r\n\r\n        gl.linkProgram(_programs.get(program));\r\n\r\n        #if DEBUG\r\n\t\tvar errors = getProgramInfoLogs(program);\r\n\r\n\t\tif (!errors.empty())\r\n\t\t{\r\n\t\t\ttrace(errors);\r\n\t\t\ttrace(\"\\n\");\r\n\t\t}\r\n\t#end\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function deleteProgram(program:Int) {\r\n\r\n\r\n        gl.deleteProgram(_programs.get(program));\r\n        _programs.remove(program) ;\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function compileShader(shader:Int) {\r\n        gl.compileShader(_shaders.get(shader));\r\n\r\n       /// #if DEBUG\r\n\t\tvar errors = getShaderCompilationLogs(shader);\r\n\r\n\t\tif ( errors!=\"\")\r\n\t\t{\r\n\t\t\tvar  source:String= getShaderSource(shader);\r\n\r\n\t\t\ttrace(\"Shader source (glShaderSource_\" + shader + \"):\\n\" + source);\r\n\t\t\ttrace(\"Shader errors (glShaderSource_\" + shader + \"):\\n\" + errors);\r\n\r\n\t\t\tthrow  (\"Shader compilation failed. Enable debug logs to display errors.\");\r\n\t\t}\r\n\t//#end\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function setProgram(program:Int) {\r\n        if (_currentProgram == program) {\r\n            return;\r\n        }\r\n\r\n        _currentProgram = program;\r\n\r\n        gl.useProgram(_programs.get(program));\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function setShaderSource(shader:Int, source:String) {\r\n        var sourceString:String = source;\r\n\r\n        gl.shaderSource(_shaders.get(shader), sourceString);\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    public function getShaderSource(shader:Int) {\r\n        var source = gl.getShaderSource(_shaders.get(shader));\r\n        checkForErrors();\r\n        return source;\r\n    }\r\n\r\n    override public function createVertexShader() {\r\n        var vertexShader = gl.createShader(GL.VERTEX_SHADER);\r\n        shaderCount++;\r\n        _vertexShaders.set(shaderCount, vertexShader);\r\n        _shaders.set(shaderCount, vertexShader);\r\n        checkForErrors();\r\n\r\n        return shaderCount;\r\n    }\r\n\r\n    override public function deleteVertexShader(vertexShader:Int) {\r\n\r\n\r\n        gl.deleteShader(_vertexShaders.get(vertexShader));\r\n        _vertexShaders.remove(vertexShader) ;\r\n        _shaders.remove(vertexShader) ;\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function createFragmentShader() {\r\n        var fragmentShader = gl.createShader(GL.FRAGMENT_SHADER);\r\n        shaderCount++;\r\n        _fragmentShaders.set(shaderCount, fragmentShader);\r\n        _shaders.set(shaderCount, fragmentShader);\r\n        checkForErrors();\r\n\r\n        return shaderCount;\r\n    }\r\n\r\n    override public function deleteFragmentShader(fragmentShader:Int) {\r\n\r\n        gl.deleteShader(_fragmentShaders.get(fragmentShader));\r\n        _fragmentShaders.remove(fragmentShader) ;\r\n        _shaders.remove(fragmentShader) ;\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function getProgramInputs(program:Int) {\r\n        setProgram(program);\r\n        var ip = new ProgramInputs();\r\n        ip.setProgramInputs(getUniformInputs(_programs.get(program)), getAttributeInputs(_programs.get(program)));\r\n        return ip;\r\n    }\r\n\r\n    public function convertInputType(type:Int) {\r\n        switch (type)\r\n        {\r\n            case GL.FLOAT:\r\n                return ProgramInputs.InputType.float1;\r\n            case GL.FLOAT_VEC2:\r\n                return ProgramInputs.InputType.float2;\r\n            case GL.FLOAT_VEC3:\r\n                return ProgramInputs.InputType.float3;\r\n            case GL.FLOAT_VEC4:\r\n                return ProgramInputs.InputType.float4;\r\n            case GL.INT:\r\n                return ProgramInputs.InputType.int1;\r\n            case GL.INT_VEC2:\r\n                return ProgramInputs.InputType.int2;\r\n            case GL.INT_VEC3:\r\n                return ProgramInputs.InputType.int3;\r\n            case GL.INT_VEC4:\r\n                return ProgramInputs.InputType.int4;\r\n            case GL.BOOL:\r\n                return ProgramInputs.InputType.bool1;\r\n            case GL.BOOL_VEC2:\r\n                return ProgramInputs.InputType.bool2;\r\n            case GL.BOOL_VEC3:\r\n                return ProgramInputs.InputType.bool3;\r\n            case GL.BOOL_VEC4:\r\n                return ProgramInputs.InputType.bool4;\r\n            case GL.FLOAT_MAT3:\r\n                return ProgramInputs.InputType.float9;\r\n            case GL.FLOAT_MAT4:\r\n                return ProgramInputs.InputType.float16;\r\n            case GL.SAMPLER_2D:\r\n                return ProgramInputs.InputType.sampler2d;\r\n            case GL.SAMPLER_CUBE:\r\n                return ProgramInputs.InputType.samplerCube;\r\n            default:\r\n                throw (\"unsupported type\");\r\n                return ProgramInputs.InputType.unknown;\r\n        }\r\n    }\r\n\r\n    public function getUniformInput(program:Int, name:String):ProgramInputs.UniformInput {\r\n        var inputs:Array<ProgramInputs.UniformInput> = getUniformInputs(_programs.get(program));\r\n        inputs = inputs.filter(function(i:ProgramInputs.UniformInput) return i.name == name);\r\n        return inputs.length > 0 ? inputs[0] : null;\r\n    }\r\n\r\n    inline function getUniformInputs(program:js.html.webgl.Program):Array<ProgramInputs.UniformInput> {\r\n        var inputs:Array<ProgramInputs.UniformInput> = [];\r\n\r\n        var total = -1;\r\n        var maxUniformNameLength = -1;\r\n\r\n        // maxUniformNameLength=gl.getProgramParameter(program, GL.ACTIVE_UNIFORM_MAX_LENGTH );\r\n        total = gl.getProgramParameter(program, GL.ACTIVE_UNIFORMS);\r\n\r\n        for (i in 0... total) {\r\n\r\n            var activeInfo:ActiveInfo = gl.getActiveUniform(program, i);\r\n            checkForErrors();\r\n            var name = activeInfo.name;\r\n            var size = activeInfo.size;\r\n            var type = activeInfo.type;\r\n\r\n            var inputType = convertInputType(type);\r\n            var location = gl.getUniformLocation(program, name);\r\n\r\n            if (location != null && inputType != ProgramInputs.InputType.unknown) {\r\n                //todo;\r\n                if (_uniformInputLocationKeys.exists(location) == false) {\r\n                    locationCount++;\r\n                    _uniformInputLocationKeys.set(location, locationCount);\r\n                    _uniformInputLocations.set(locationCount, location);\r\n                }\r\n                var location_index = _uniformInputLocationKeys.get(location);\r\n                inputs.push(new UniformInput(name, location_index, size, inputType));\r\n            }\r\n        }\r\n\r\n        return inputs;\r\n    }\r\n\r\n    public function getAttributeInput(program:Int, name:String):ProgramInputs.AttributeInput {\r\n        var inputs:Array<ProgramInputs.AttributeInput> = getAttributeInputs(_programs.get(program));\r\n        inputs = inputs.filter(function(i:ProgramInputs.AttributeInput) return i.name == name);\r\n        return inputs.length > 0 ? inputs[0] : null;\r\n    }\r\n\r\n    inline function getAttributeInputs(program:js.html.webgl.Program):Array<ProgramInputs.AttributeInput> {\r\n        var inputs:Array<ProgramInputs.AttributeInput> = [];\r\n\r\n        var total = -1;\r\n        var maxAttributeNameLength = -1;\r\n\r\n//glGetProgramiv(program, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, maxAttributeNameLength);\r\n        total = gl.getProgramParameter(program, GL.ACTIVE_ATTRIBUTES);\r\n\r\n        for (i in 0...total) {\r\n\r\n\r\n            var activeInfo:ActiveInfo = gl.getActiveAttrib(program, i);\r\n            var size = activeInfo.size;\r\n            var type = activeInfo.type;\r\n            var name = activeInfo.name;\r\n            checkForErrors();\r\n\r\n\r\n            var location = gl.getAttribLocation(program, name);\r\n\r\n            if (location >= 0) {\r\n                inputs.push(new AttributeInput(name, location));\r\n            }\r\n        }\r\n\r\n        return inputs;\r\n    }\r\n\r\n    public function getShaderCompilationLogs(shader:Int) {\r\n        var compileStatus = gl.getShaderParameter(_shaders.get(shader), GL.COMPILE_STATUS);\r\n        if (compileStatus == false) {\r\n//var buffer:String =gl.getShaderSource(_shaders.get(shader));\r\n            //todo\r\n            var logs = gl.getShaderInfoLog(_shaders.get(shader));\r\n            return logs ;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    public function getProgramInfoLogs(program:Int) {\r\n        var programInfo = gl.getProgramInfoLog(_programs.get(program));\r\n        return programInfo;\r\n    }\r\n\r\n    override public function setBlendingModeSD(source:Blending.Source, destination:Blending.Destination) {\r\n        if (( source | destination) != _currentBlendingMode) {\r\n            _currentBlendingMode = ( source | destination);\r\n\r\n            gl.blendFunc(_blendingFactors.get(source & 0x00ff), _blendingFactors.get(destination & 0xff00));\r\n\r\n            checkForErrors();\r\n        }\r\n    }\r\n\r\n    override public function setBlendingMode(blendingMode:Blending.Mode) {\r\n\r\n        if (blendingMode != _currentBlendingMode) {\r\n            _currentBlendingMode = blendingMode;\r\n\r\n            gl.blendFunc(_blendingFactors.get(blendingMode & 0x00ff), _blendingFactors.get(blendingMode & 0xff00));\r\n\r\n            checkForErrors();\r\n        }\r\n    }\r\n\r\n    override public function setDepthTest(depthMask:Bool, depthFunc:CompareMode) {\r\n        if (depthMask != _currentDepthMask || depthFunc != _currentDepthFunc) {\r\n            _currentDepthMask = depthMask;\r\n            _currentDepthFunc = depthFunc;\r\n\r\n            gl.depthMask(depthMask);\r\n            gl.depthFunc(_compareFuncs.get(depthFunc));\r\n\r\n            checkForErrors();\r\n        }\r\n    }\r\n\r\n    override public function setColorMask(colorMask:Bool) {\r\n        if (_currentColorMask != colorMask) {\r\n            _currentColorMask = colorMask;\r\n\r\n            gl.colorMask(colorMask, colorMask, colorMask, colorMask);\r\n\r\n            checkForErrors();\r\n        }\r\n\r\n    }\r\n\r\n    override public function setStencilTest(stencilFunc:CompareMode, stencilRef:Int, stencilMask:Int, stencilFailOp:StencilOperation, stencilZFailOp:StencilOperation, stencilZPassOp:StencilOperation) {\r\n\r\n        if (stencilFunc != _currentStencilFunc || stencilRef != _currentStencilRef || stencilMask != _currentStencilMask) {\r\n            _currentStencilFunc = stencilFunc;\r\n            _currentStencilRef = stencilRef;\r\n            _currentStencilMask = stencilMask;\r\n\r\n            gl.stencilFunc(_compareFuncs.get(stencilFunc), stencilRef, stencilMask);\r\n\r\n            checkForErrors();\r\n        }\r\n\r\n\r\n        if (stencilFailOp != _currentStencilFailOp || stencilZFailOp != _currentStencilZFailOp || stencilZPassOp != _currentStencilZPassOp) {\r\n            _currentStencilFailOp = stencilFailOp;\r\n            _currentStencilZFailOp = stencilZFailOp;\r\n            _currentStencilZPassOp = stencilZPassOp;\r\n\r\n            gl.stencilOp(_stencilOps.get(stencilFailOp), _stencilOps.get(stencilZFailOp), _stencilOps.get(stencilZPassOp));\r\n\r\n            checkForErrors();\r\n        }\r\n    }\r\n\r\n    override public function readRectPixels(x:Int, y:Int, width:Int, height:Int, pixels:Bytes) {\r\n        gl.readPixels(x, y, width, height, GL.RGBA, GL.UNSIGNED_BYTE, @:privateAccess pixels.b);\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function setScissorTest(scissorTest:Bool, scissorBox:Vec4) {\r\n\r\n        if (scissorTest == _scissorTest && scissorBox.equals(_scissorBox)  ) {\r\n            return;\r\n        }\r\n\r\n        if (scissorTest) {\r\n            gl.enable(GL.SCISSOR_TEST);\r\n\r\n            var x = 0;\r\n            var y = 0;\r\n            var width = 0;\r\n            var height = 0;\r\n\r\n            if (scissorBox.z < 0 || scissorBox.w < 0) {\r\n                x = _viewportX;\r\n                y = _viewportY;\r\n                width = _viewportWidth;\r\n                height = _viewportHeight;\r\n            }\r\n            else {\r\n                x = Std.int(scissorBox.x);\r\n                y = Std.int(scissorBox.y);\r\n                width = Std.int(scissorBox.z);\r\n                height = Std.int(scissorBox.w);\r\n            }\r\n\r\n            gl.scissor(x, y, width, height);\r\n        }\r\n        else {\r\n            gl.disable(GL.SCISSOR_TEST);\r\n        }\r\n\r\n        _scissorTest = scissorTest;\r\n        _scissorBox = scissorBox;\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function readPixels(pixels:Bytes) {\r\n        gl.readPixels(_viewportX, _viewportY, _viewportWidth, _viewportHeight, GL.RGBA, GL.UNSIGNED_BYTE, @:privateAccess pixels.b);\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function setTriangleCulling(triangleCulling:TriangleCulling) {\r\n        if (triangleCulling == _currentTriangleCulling) {\r\n            return;\r\n        }\r\n\r\n        if (_currentTriangleCulling == TriangleCulling.NONE) {\r\n            gl.enable(GL.CULL_FACE);\r\n        }\r\n        _currentTriangleCulling = triangleCulling;\r\n\r\n        switch (triangleCulling)\r\n        {\r\n            case TriangleCulling.NONE:\r\n                gl.disable(GL.CULL_FACE);\r\n\r\n            case TriangleCulling.BACK :\r\n                gl.cullFace(GL.BACK);\r\n\r\n            case TriangleCulling.FRONT :\r\n                gl.cullFace(GL.FRONT);\r\n\r\n            case TriangleCulling.BOTH :\r\n                gl.cullFace(GL.FRONT_AND_BACK);\r\n\r\n        }\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    function createRTTBuffers(type:TextureType, textureKey:Int, width:Int, height:Int) {\r\n        var texture = _textures.get(textureKey);\r\n        var frameBuffer = gl.createFramebuffer();\r\n\r\n        // bind the framebuffer object\r\n        gl.bindFramebuffer(GL.FRAMEBUFFER, frameBuffer);\r\n        // attach a texture to the FBO\r\n        if (type == TextureType.Texture2D)\r\n            gl.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture, 0);\r\n        else {\r\n            gl.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0 + 0, GL.TEXTURE_CUBE_MAP_POSITIVE_X, texture, 0);\r\n            gl.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0 + 1, GL.TEXTURE_CUBE_MAP_NEGATIVE_X, texture, 0);\r\n            gl.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0 + 2, GL.TEXTURE_CUBE_MAP_POSITIVE_Y, texture, 0);\r\n            gl.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0 + 3, GL.TEXTURE_CUBE_MAP_NEGATIVE_Y, texture, 0);\r\n            gl.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0 + 4, GL.TEXTURE_CUBE_MAP_POSITIVE_Z, texture, 0);\r\n            gl.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0 + 5, GL.TEXTURE_CUBE_MAP_NEGATIVE_Z, texture, 0);\r\n        }\r\n\r\n\r\n        // gen renderbuffer\r\n        var renderBuffer = gl.createRenderbuffer();\r\n        // bind renderbuffer\r\n        gl.bindRenderbuffer(GL.RENDERBUFFER, renderBuffer);\r\n        // init as a depth buffer\r\n#if  GL_ES_VERSION_2_0\r\n\tglRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16, width, height);\r\n#else\r\n        gl.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, width, height);\r\n#end\r\n        // FIXME: create & attach stencil buffer\r\n\r\n        // attach to the FBO for depth\r\n        gl.framebufferRenderbuffer(GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderBuffer);\r\n\r\n        var status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\r\n        if (status != GL.FRAMEBUFFER_COMPLETE)\r\n            throw \"\";\r\n\r\n        _frameBuffers.set(textureKey, frameBuffer);\r\n        _renderBuffers.set(textureKey, renderBuffer);\r\n\r\n        // unbind\r\n        gl.bindFramebuffer(GL.FRAMEBUFFER, null);\r\n        gl.bindRenderbuffer(GL.RENDERBUFFER, null);\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function setRenderToBackBuffer() {\r\n        if (_currentTarget == -1) {\r\n            return;\r\n        }\r\n\r\n        gl.bindFramebuffer(GL.FRAMEBUFFER, null);\r\n        gl.bindRenderbuffer(GL.RENDERBUFFER, null);\r\n\r\n        configureViewport(_oldViewportX, _oldViewportY, _oldViewportWidth, _oldViewportHeight);\r\n\r\n        _currentTarget = -1;\r\n\r\n        checkForErrors();\r\n    }\r\n\r\n    override public function setRenderToTexture(texture:Int, enableDepthAndStencil :Bool= false) {\r\n        if (texture == _currentTarget) {\r\n            return;\r\n        }\r\n\r\n        if (_frameBuffers.exists(texture) == false) {\r\n            throw (\"this texture cannot be used for RTT\");\r\n        }\r\n        if (_renderBuffers.exists(texture) == false) {\r\n            throw (\"this texture cannot be used for RTT\");\r\n        }\r\n        if (_currentTarget == -1) {\r\n            _oldViewportX = _viewportX;\r\n            _oldViewportY = _viewportY;\r\n            _oldViewportWidth = _viewportWidth;\r\n            _oldViewportHeight = _viewportHeight;\r\n        }\r\n        _currentTarget = texture;\r\n\r\n        gl.bindFramebuffer(GL.FRAMEBUFFER, _frameBuffers.get(texture));\r\n        checkForErrors();\r\n\r\n        if (enableDepthAndStencil) {\r\n            gl.bindRenderbuffer(GL.RENDERBUFFER, _renderBuffers.get(texture));\r\n            // attach to the FBO for depth\r\n            checkForErrors();\r\n        }\r\n\r\n        var textureSize:Tuple<Int, Int> = _textureSizes.get(texture);\r\n\r\n        configureViewport(0, 0, textureSize.first, textureSize.second);\r\n        checkForErrors();\r\n    }\r\n\r\n\r\n    public function getError() {\r\n        return 0;\r\n        var error = gl.getError();\r\n\r\n        switch (error)\r\n        {\r\n\r\n            case GL.INVALID_ENUM:\r\n                throw (\"GL_INVALID_ENUM\");\r\n\r\n            case GL.INVALID_FRAMEBUFFER_OPERATION:\r\n                throw(\"GL_INVALID_FRAMEBUFFER_OPERATION\");\r\n\r\n            case GL.INVALID_VALUE:\r\n                throw(\"GL_INVALID_VALUE\");\r\n\r\n            case GL.INVALID_OPERATION:\r\n                throw(\"GL_INVALID_OPERATION\");\r\n\r\n            case GL.OUT_OF_MEMORY:\r\n                throw(\"GL_OUT_OF_MEMORY\");\r\n\r\n            default:\r\n\r\n        }\r\n\r\n        return error;\r\n    }\r\n\r\n    override public function generateMipmaps(texture:Int) {\r\n        gl.bindTexture(GL.TEXTURE_2D, _textures.get(texture));\r\n\r\n        // glGenerateMipmap exists in OpenGL ES 2.0+ or OpenGL 3.0+\r\n        // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGenerateMipmap.xml\r\n        // https://www.opengl.org/sdk/docs/man/html/glGenerateMipmap.xhtml\r\n        #if ! GL_ES_VERSION_2_0\r\n        if (_oglMajorVersion < 3) {\r\n            //if (supportsExtension(\"GL_SGIS_generate_mipmap\")) {\r\n            gl.generateMipmap(GL.TEXTURE_2D);\r\n            //}\r\n            #if DEBUG\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthrow std::runtime_error(\"Missing OpenGL extension: 'GL_SGIS_generate_mipmap'.\");\r\n\t\t\t}\r\n\t#end\r\n        }\r\n        else {\r\n            #end\r\n            gl.generateMipmap(GL.TEXTURE_2D);\r\n        }\r\n\r\n        checkForErrors();\r\n\r\n        _currentBoundTexture = texture;\r\n    }\r\n\r\n    override public function setUniformFloat(location:Int, count:Int, v:Array<Float>) {\r\n        gl.uniform1fv(_uniformInputLocations.get(location), v);\r\n    }\r\n\r\n    override public function setUniformFloat2(location:Int, count:Int, v:Array<Float>) {\r\n        gl.uniform2fv(_uniformInputLocations.get(location), v);\r\n    }\r\n\r\n    override public function setUniformFloat3(location:Int, count:Int, v:Array<Float>) {\r\n        gl.uniform3fv(_uniformInputLocations.get(location), v);\r\n    }\r\n\r\n    override public function setUniformFloat4(location:Int, count:Int, v:Array<Float>) {\r\n        gl.uniform4fv(_uniformInputLocations.get(location), v);\r\n    }\r\n\r\n    override public function setUniformMatrix4x4(location:Int, count:Int, v:Array<Float>) {\r\n        gl.uniformMatrix4fv(_uniformInputLocations.get(location), false, v);\r\n    }\r\n\r\n    override public function setUniformInt(location:Int, count:Int, v:Array<Int>) {\r\n        gl.uniform1iv(_uniformInputLocations.get(location), v);\r\n    }\r\n\r\n    override public function setUniformInt2(location:Int, count:Int, v:Array<Int>) {\r\n        gl.uniform2iv(_uniformInputLocations.get(location), v);\r\n    }\r\n\r\n    override public function setUniformInt3(location:Int, count:Int, v:Array<Int>) {\r\n        gl.uniform3iv(_uniformInputLocations.get(location), v);\r\n    }\r\n\r\n    override public function setUniformInt4(location:Int, count:Int, v:Array<Int>) {\r\n        gl.uniform4iv(_uniformInputLocations.get(location), v);\r\n    }\r\n\r\n    public function supportsExtension(extensionNameString:String) {\r\n\r\n        return gl.getExtension(extensionNameString) != null;\r\n    }\r\n\r\n    public function availableTextureFormats():IntMap< Int > {\r\n\r\n        if (Lambda.count(_availableTextureFormats) > 0) {\r\n            return _availableTextureFormats;\r\n        }\r\n\r\n        var formats = _availableTextureFormats;\r\n\r\n        formats.set(TextureFormat.RGB, GL.RGB);\r\n        formats.set(TextureFormat.RGBA, GL.RGBA) ;\r\n\r\n        var rawFormats:Array<Int> = gl.getParameter(GL.COMPRESSED_TEXTURE_FORMATS);\r\n        for (rawFormat in rawFormats) {\r\n            switch (rawFormat)\r\n            {\r\n\r\n                case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:\r\n                    formats.set(TextureFormat.RGB_DXT1, GL_COMPRESSED_RGB_S3TC_DXT1_EXT);\r\n                    break;\r\n                case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:\r\n                    formats.set(TextureFormat.RGBA_DXT1, GL_COMPRESSED_RGBA_S3TC_DXT1_EXT);\r\n                    break;\r\n\r\n                case GL_COMPRESSED_RGBA_S3TC_DXT3_EXT:\r\n                    formats.set(TextureFormat.RGBA_DXT3, GL_COMPRESSED_RGBA_S3TC_DXT3_EXT);\r\n                    break;\r\n                case GL_COMPRESSED_RGBA_S3TC_DXT5_EXT:\r\n                    formats.set(TextureFormat.RGBA_DXT5, GL_COMPRESSED_RGBA_S3TC_DXT5_EXT);\r\n                    break;\r\n\r\n                case GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG:\r\n                    formats.set(TextureFormat.RGB_PVRTC1_2BPP, GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG);\r\n                    break;\r\n                case GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG:\r\n                    formats.set(TextureFormat.RGB_PVRTC1_4BPP, GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG);\r\n                    break;\r\n                case GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG:\r\n                    formats.set(TextureFormat.RGBA_PVRTC1_2BPP, GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG);\r\n                    break;\r\n                case GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG:\r\n                    formats.set(TextureFormat.RGBA_PVRTC1_4BPP, GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG);\r\n                    break;\r\n\r\n                case GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG:\r\n                    formats.set(TextureFormat.RGBA_PVRTC2_2BPP, GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG);\r\n                    break;\r\n                case GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG:\r\n                    formats.set(TextureFormat.RGBA_PVRTC2_4BPP, GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG);\r\n                    break;\r\n\r\n                case GL_ETC1_RGB8_OES:\r\n                    formats.set(TextureFormat.RGB_ETC1, GL_ETC1_RGB8_OES);\r\n                    formats.set(TextureFormat.RGBA_ETC1, GL_ETC1_RGB8_OES);\r\n                    break;\r\n\r\n                case GL_ATC_RGB_AMD:\r\n                    formats.set(TextureFormat.RGB_ATITC, GL_ATC_RGB_AMD);\r\n                    break;\r\n                case GL_ATC_RGBA_EXPLICIT_ALPHA_AMD:\r\n                    formats.set(TextureFormat.RGBA_ATITC, GL_ATC_RGBA_EXPLICIT_ALPHA_AMD);\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return formats;\r\n    }\r\n}\r\n","package minko.render;\r\nimport minko.signal.Signal;\r\n@:expose(\"minko.render.IndexBuffer\")\r\nclass IndexBuffer extends AbstractResource {\r\n    private var _data:Array<Int> ;\r\n    private var _numIndices:Int;\r\n    private var _changed:Signal<IndexBuffer>;\r\n\r\n    public static function create(context:AbstractContext):IndexBuffer {\r\n        return new IndexBuffer(context);\r\n    }\r\n\r\n    public static function createbyData(context, data):IndexBuffer {\r\n        var ptr = new IndexBuffer(context);\r\n        ptr.data = data;\r\n        ptr.upload();\r\n\r\n        return ptr;\r\n    }\r\n    public var data(get, set):Array<Int>;\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n\r\n    function set_data(v) {\r\n        _data = v;\r\n        return _data;\r\n    }\r\n\r\n    public var dataPointer(get, null):Array<Int>;\r\n\r\n    function get_dataPointer() {\r\n        return _data;\r\n    }\r\n    public var numIndices(get, null):Int;\r\n\r\n    function get_numIndices() {\r\n        return _numIndices;\r\n    }\r\n\r\n    override public function upload() {\r\n        uploadOffset();\r\n    }\r\n\r\n\r\n    public function uploadOffset(offset = 0, count = -1) {\r\n        if (data.length == 0) {\r\n            return;\r\n        }\r\n\r\n//Debug.Assert(count <= (int)data().Count);\r\n\r\n        if (_id == -1) {\r\n            _id = _context.createIndexBuffer(data.length);\r\n        }\r\n\r\n        var oldNumIndices = _numIndices;\r\n        _numIndices = count > 0 ? count : data.length;\r\n\r\n        _context.uploaderIndexBufferData(_id, offset, _numIndices, data);//[offset]);\r\n\r\n        if (_numIndices != oldNumIndices) {\r\n            _changed.execute(this);\r\n        }\r\n    }\r\n\r\n    public function uploadOffsetData(offset, count, data:Array<Int>) {\r\n        if (data.length == 0) {\r\n            return;\r\n        }\r\n\r\n//Debug.Assert(count <= (int)data.Count);\r\n\r\n        if (_id == -1) {\r\n            _id = _context.createIndexBuffer(data.length);\r\n        }\r\n\r\n        var numIndices = count > 0 ? count : data.length;\r\n        _numIndices = numIndices;\r\n\r\n        _context.uploaderIndexBufferData(_id, offset, numIndices, data);\r\n\r\n        _changed.execute(this);\r\n    }\r\n\r\n    override public function dispose() {\r\n\r\n        if (_id != -1) {\r\n            _context.deleteIndexBuffer(_id);\r\n        }\r\n\r\n        _id = -1;\r\n        _numIndices = 0;\r\n\r\n        disposeData();\r\n\r\n        _changed.execute(null);\r\n    }\r\n\r\n    public function disposeData() {\r\n\r\n        if (_data != null) {\r\n            _data = null;\r\n        }\r\n\r\n    }\r\n\r\n    public function equals(indexBuffer:IndexBuffer) {\r\n        return dataPointer == indexBuffer.dataPointer;\r\n    }\r\n\r\n    public var changed(get, null):Signal<IndexBuffer>;\r\n\r\n    function get_changed() {\r\n        return _changed;\r\n    }\r\n\r\n    public function new(context:AbstractContext) {\r\n        super(context);\r\n        this._data = [];\r\n        this._numIndices = 0;\r\n        this._changed = new Signal<IndexBuffer>();\r\n    }\r\n\r\n\r\n}\r\n","package minko.render;\r\nimport minko.Uuid.Enable_uuid;\r\nimport haxe.ds.ObjectMap;\r\nimport haxe.ds.StringMap;\r\nimport haxe.io.Error;\r\nimport minko.component.Renderer.EffectVariables;\r\nimport minko.data.BindingMap;\r\nimport minko.data.Store;\r\ntypedef ProgramFunc = Program -> Void ;\r\n\r\n@:expose(\"minko.render.Pass\")\r\nclass Pass  extends Enable_uuid {\r\n\r\n    private var _name:String;\r\n    private var _isForward:Bool;\r\n    private var _programTemplate:Program;\r\n    private var _attributeBindings:BindingMap ;\r\n    private var _uniformBindings:BindingMap ;\r\n    private var _stateBindings:BindingMap ;\r\n    private var _macroBindings:MacroBindingMap;\r\n    private var _states:States;\r\n\r\n    private var _signatureToProgram:ObjectMap<ProgramSignature, Program> ;\r\n    private var _signature:StringMap<ProgramSignature>;\r\n    private var _uniformFunctions:StringMap<ProgramFunc>;\r\n    private var _attributeFunctions:StringMap<ProgramFunc>;\r\n    private var _macroFunctions:StringMap<ProgramFunc>;\r\n\r\n\r\n\r\n    public function dispose() {\r\n        for (signatureAndProgram in _signatureToProgram.iterator()) {\r\n            if (signatureAndProgram != null) {\r\n                signatureAndProgram.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function create(name, isForward, program, attributeBindings, uniformBindings, stateBindings, macroBindings) {\r\n        return new Pass(name, isForward, program, attributeBindings, uniformBindings, stateBindings, macroBindings);\r\n    }\r\n\r\n    public static function createbyPass(pass:Pass, deepCopy = false) {\r\n        var p:Pass = create(pass._name, pass._isForward, deepCopy ? Program.createbyProgram(pass._programTemplate, deepCopy) : pass._programTemplate, pass._attributeBindings, pass._uniformBindings, pass._stateBindings, pass._macroBindings);\r\n\r\n        for (signatureProgram in pass._signatureToProgram.keys()) {\r\n            var programSignature:ProgramSignature = new ProgramSignature().copyFrom(signatureProgram);\r\n            p._signatureToProgram.set(programSignature, pass._signatureToProgram.get(signatureProgram));\r\n            p._signature.set(programSignature.key, programSignature);\r\n        }\r\n\r\n        p._uniformFunctions = pass._uniformFunctions;\r\n        p._attributeFunctions = pass._attributeFunctions;\r\n        p._macroFunctions = pass._macroFunctions;\r\n\r\n        if (pass._programTemplate.isReady) {\r\n            for (nameAndFunc in p._uniformFunctions.iterator()) {\r\n                nameAndFunc(pass._programTemplate);\r\n            }\r\n            for (nameAndFunc in p._attributeFunctions.iterator()) {\r\n                nameAndFunc(pass._programTemplate);\r\n            }\r\n            for (nameAndFunc in p._macroFunctions.iterator()) {\r\n                nameAndFunc(pass._programTemplate);\r\n            }\r\n        }\r\n\r\n        return p;\r\n    }\r\n    public var name(get, null):String;\r\n\r\n    function get_name() {\r\n        return _name;\r\n    }\r\n\r\n    public var isForward(get, null):Bool;\r\n\r\n    function get_isForward() {\r\n        return _isForward;\r\n    }\r\n    public var program(get, null):Program;\r\n\r\n    function get_program() {\r\n        return _programTemplate;\r\n    }\r\n    public var attributeBindings(get, null):BindingMap;\r\n\r\n    function get_attributeBindings() {\r\n        return _attributeBindings;\r\n    }\r\n    public var uniformBindings(get, null):BindingMap;\r\n\r\n    function get_uniformBindings() {\r\n        return _uniformBindings;\r\n    }\r\n    public var stateBindings(get, null):BindingMap;\r\n\r\n    function get_stateBindings() {\r\n        return _stateBindings;\r\n    }\r\n    public var macroBindings(get, null):MacroBindingMap;\r\n\r\n    function get_macroBindings() {\r\n        return _macroBindings;\r\n    }\r\n    public var states(get, null):States;\r\n\r\n    function get_states() {\r\n        return _states;\r\n    }\r\n\r\n    //todo\r\n    public function setUniform(name:String, values:Array<Any>) {\r\n\r\n        _uniformFunctions.set(name, function(program:Program) {\r\n            setUniformOnProgram(program, name, values);\r\n        });\r\n\r\n        if (_programTemplate.isReady) {\r\n            _programTemplate.setUniform(name, values);\r\n        }\r\n        for (signatureAndProgram in _signatureToProgram.iterator()) {\r\n            signatureAndProgram.setUniform(name, values);\r\n        }\r\n    }\r\n\r\n    public function setAttribute(name:String, attribute:VertexAttribute) {\r\n        _attributeFunctions.set(name, function(program:Program) {\r\n            setVertexAttributeOnProgram(program, name, attribute);\r\n        });\r\n\r\n        if (_programTemplate.isReady) {\r\n            _programTemplate.setAttributebyName(name, attribute);\r\n        }\r\n        for (signatureAndProgram in _signatureToProgram) {\r\n            signatureAndProgram.setAttributebyName(name, attribute);\r\n        }\r\n    }\r\n\r\n    public function define(macroName:String) {\r\n        _macroFunctions.set(macroName, function(program:Program) {\r\n            defineOnProgram(program, macroName);\r\n        });\r\n\r\n        _programTemplate.define(macroName);\r\n    }\r\n\r\n\r\n    public function setDefine(macroName:String, macroValue:Any) {\r\n\r\n        _macroFunctions.set(macroName, function(program:Program) {\r\n            defineOnProgramWithValue(program, macroName, macroValue);\r\n        });\r\n        _programTemplate.setDefine(macroName, macroValue);\r\n    }\r\n\r\n    private static function setUniformOnProgram(program:Program, name:String, values:Array<Any>) {\r\n        program.setUniform(name, values);\r\n    }\r\n\r\n    private static function setVertexAttributeOnProgram(program:Program, name:String, attribute:VertexAttribute) {\r\n        program.setAttributebyName(name, attribute);\r\n    }\r\n\r\n    private static function defineOnProgram(program:Program, macroName:String) {\r\n        program.define(macroName);\r\n    }\r\n\r\n\r\n    private static function defineOnProgramWithValue<T>(program:Program, macroName:String, value:T) {\r\n        //todo\r\n        //  program.setDefine(macroName, value);\r\n    }\r\n\r\n    public function new(name, isForward, program:Program, attributeBindings:BindingMap, uniformBindings:BindingMap, stateBindings:BindingMap, macroBindings:MacroBindingMap) {\r\n        this._name = name;\r\n        this._isForward = isForward;\r\n        this._programTemplate = program;\r\n        this._attributeBindings = BindingMapBase.copyFrom(new BindingMap(), attributeBindings);\r\n        this._uniformBindings = BindingMapBase.copyFrom(new BindingMap(), uniformBindings);\r\n        this._stateBindings = BindingMapBase.copyFrom(new BindingMap(), stateBindings);\r\n        this._macroBindings = MacroBindingMap.copyFrom2(new MacroBindingMap(), macroBindings);\r\n        //todo\r\n        this._states = States.createbyProvider(_stateBindings.defaultValues.providers[0]) ;\r\n        this._signatureToProgram = new ObjectMap<ProgramSignature, Program>();\r\n        this._uniformFunctions = new StringMap<ProgramFunc>();\r\n        this._attributeFunctions = new StringMap<ProgramFunc>();\r\n        this._macroFunctions = new StringMap<ProgramFunc>();\r\n        this._signature = new StringMap<ProgramSignature>();\r\n        super();\r\n        enable_uuid();\r\n    }\r\n\r\n    public function selectProgram(vars:EffectVariables, targetData:Store, rendererData:Store, rootData:Store):Tuple<Program, ProgramSignature> {\r\n        var program:Program = null;\r\n        var signature:ProgramSignature = new ProgramSignature();\r\n\r\n\r\n        if (Lambda.count(_macroBindings.bindings) == 0) {\r\n            program = _programTemplate;\r\n        }\r\n        else {\r\n\r\n            //todo  get value hask\r\n\r\n\r\n            signature.bind(_macroBindings, vars, targetData, rendererData, rootData);\r\n            var signatureKey =signature.key;\r\n\r\n            var foundProgramIt =    _signature.exists(signatureKey);\r\n            if (foundProgramIt) {\r\n                signature.dispose();\r\n                signature = _signature.get(signatureKey);\r\n                program = _signatureToProgram.get(signature);\r\n                return new Tuple<Program, ProgramSignature>(program, signature);\r\n\r\n            }\r\n            else {\r\n                _signature.set(signatureKey, signature);\r\n                program = Program.createbyProgram(_programTemplate, true);\r\n                _signatureToProgram.set(signature, program);\r\n                signature.updateProgram(program);\r\n\r\n            }\r\n\r\n        }\r\n        return new Tuple<Program, ProgramSignature>(finalizeProgram(program), signature);\r\n\r\n    }\r\n\r\n    public function finalizeProgram(program:Program) {\r\n        if (!program.vertexShader.isReady) {\r\n            program.vertexShader.upload();\r\n        }\r\n        if (!program.fragmentShader.isReady) {\r\n            program.fragmentShader.upload();\r\n        }\r\n        if (!program.isReady) {\r\n            try {\r\n                program.upload();\r\n            } catch (e:Error) {\r\n                throw e;\r\n\r\n            }\r\n\r\n\r\n            for (nameAndFunc in _uniformFunctions.iterator()) {\r\n                nameAndFunc(program);\r\n            }\r\n            for (nameAndFunc in _attributeFunctions.iterator()) {\r\n                nameAndFunc(program);\r\n            }\r\n            for (nameAndFunc in _macroFunctions.iterator()) {\r\n                nameAndFunc(program);\r\n            }\r\n        }\r\n\r\n        return program;\r\n    }\r\n\r\n}\r\n","package minko.render;\r\nimport minko.render.ProgramInputs.UniformInput;\r\n\r\n@:expose(\"minko.render.Program\")\r\nclass Program extends AbstractResource {\r\n    private var _name:String;\r\n    private var _vertexShader:Shader;\r\n    private var _fragmentShader:Shader;\r\n    private var _inputs:ProgramInputs;\r\n\r\n    private var _setUniforms:Array<String>;\r\n    private var _setTextures:Array<String>;\r\n    private var _setAttributes:Array<String>;\r\n    private var _definedMacros:Array<String>;\r\n\r\n    public function new(_name, context) {\r\n        super(context);\r\n        this._name = _name;\r\n        this._inputs = new ProgramInputs();\r\n\r\n        this._setUniforms = new Array<String>();\r\n        this._setTextures = new Array<String>();\r\n        this._setAttributes = new Array<String>();\r\n        this._definedMacros = new Array<String>();\r\n    }\r\n\r\n    public function clearDefinedMacros():Void {\r\n        _definedMacros = [];\r\n        _vertexShader.clearDefinedMacros();\r\n        _fragmentShader.clearDefinedMacros();\r\n\r\n    }\r\n\r\n    public static function create(name, context):Program {\r\n        return new Program(name, context);\r\n    }\r\n\r\n    public static function createbyProgram(program:Program, deepCopy = false) {\r\n        var p:Program = create(program._name, program._context);\r\n\r\n        p._vertexShader = deepCopy ? Shader.createbyShader(program._vertexShader) : program._vertexShader;\r\n        p._fragmentShader = deepCopy ? Shader.createbyShader(program._fragmentShader) : program._fragmentShader;\r\n        p._inputs =    new ProgramInputs();\r\n        p._setTextures = [];\r\n        p._setAttributes = [];\r\n\r\n        return p;\r\n    }\r\n\r\n    public static function createbyShader(name, context, vertexShader, fragmentShader):Program {\r\n        var p:Program = create(name, context);\r\n\r\n        p._vertexShader = vertexShader;\r\n        p._fragmentShader = fragmentShader;\r\n\r\n        return p;\r\n    }\r\n    public var name(get, null):String;\r\n\r\n    function get_name() {\r\n        return _name;\r\n    }\r\n\r\n    public var vertexShader(get, null):Shader;\r\n\r\n    function get_vertexShader() {\r\n        return _vertexShader;\r\n    }\r\n\r\n    public var fragmentShader(get, null):Shader;\r\n\r\n    function get_fragmentShader() {\r\n        return _fragmentShader;\r\n    }\r\n\r\n    public var setTextureNames(get, null):Array<String>;\r\n\r\n    function get_setTextureNames() {\r\n        return _setTextures;\r\n    }\r\n\r\n    public var setAttributeNames(get, null):Array<String>;\r\n\r\n    function get_setAttributeNames() {\r\n        return _setAttributes;\r\n    }\r\n\r\n    public var setUniformNames(get, null):Array<String>;\r\n\r\n    function get_setUniformNames() {\r\n        return _setUniforms;\r\n    }\r\n\r\n    public var definedMacroNames(get, null):Array<String>;\r\n\r\n    function get_definedMacroNames() {\r\n        return _definedMacros;\r\n    }\r\n\r\n    public var inputs(get, null):ProgramInputs;\r\n\r\n    function get_inputs() {\r\n        return _inputs;\r\n    }\r\n\r\n    public override function upload() {\r\n        _id = context.createProgram();\r\n        _context.attachShader(_id, _vertexShader.id);\r\n        _context.attachShader(_id, _fragmentShader.id);\r\n        _context.linkProgram(_id);\r\n\r\n        _inputs.copyFrom(_context.getProgramInputs(_id));\r\n    }\r\n\r\n    public override function dispose() {\r\n        if (_id != -1) {\r\n            _context.deleteProgram(_id);\r\n            _id = -1;\r\n        }\r\n\r\n        _vertexShader = null;\r\n        _fragmentShader = null;\r\n    }\r\n\r\n    public function setUniform(name, v:Array<Any>) {\r\n        //todo\r\n        //type, size\r\n        //return setUniform<T, 1>(name, 1, &v);\r\n    }\r\n\r\n    inline function setUniformFloat(size, name, count, v) {\r\n\r\n        var it:UniformInput = Lambda.find(_inputs.uniforms, function(u:UniformInput) {\r\n            return u.name == name;\r\n        });\r\n\r\n        if (it != null) {\r\n            var oldProgram = _context.currentProgram ;\r\n\r\n            _context.setProgram(_id);\r\n\r\n            switch(size){\r\n                case 1 :\r\n                    _context.setUniformFloat(it.location, count, v);\r\n                case 2 :\r\n                    _context.setUniformFloat2(it.location, count, v);\r\n                case 3 :\r\n                    _context.setUniformFloat3(it.location, count, v);\r\n                case 4 :\r\n                    _context.setUniformFloat4(it.location, count, v);\r\n                case 16:\r\n                    _context.setUniformMatrix4x4(it.location, count, v);\r\n            }\r\n            _context.setProgram(oldProgram);\r\n\r\n            _setUniforms.push(name);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    inline function setUniformInt(size, name, count, v) {\r\n\r\n        var it:UniformInput = Lambda.find(_inputs.uniforms, function(u:UniformInput) {\r\n            return u.name == name;\r\n        });\r\n\r\n        if (it != null) {\r\n            var oldProgram = _context.currentProgram ;\r\n\r\n            _context.setProgram(_id);\r\n\r\n            switch(size){\r\n                case 1 :\r\n                    _context.setUniformInt(it.location, count, v);\r\n                case 2 :\r\n                    _context.setUniformInt2(it.location, count, v);\r\n                case 3 :\r\n                    _context.setUniformInt3(it.location, count, v);\r\n                case 4 :\r\n                    _context.setUniformInt4(it.location, count, v);\r\n            }\r\n            _context.setProgram(oldProgram);\r\n\r\n            _setUniforms.push(name);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    public function setUniformFloat1(name, v) {\r\n        return setUniformFloat(1, name, 1, v);\r\n    }\r\n\r\n\r\n    public function setUniformFloat2(name, value) {\r\n        return setUniformFloat(2, name, 1, value);\r\n    }\r\n\r\n\r\n    public function setUniformFloat3(name, value) {\r\n        return setUniformFloat(3, name, 1, value);\r\n    }\r\n\r\n\r\n    public function setUniformFloat4(name, value) {\r\n        return setUniformFloat(4, name, 1, value);\r\n    }\r\n\r\n    public function setUniformMatrix4x4(name, value) {\r\n        return setUniformFloat(16, name, 1, value);\r\n    }\r\n\r\n    public function setUniformInt1(name, v) {\r\n        return setUniformInt(1, name, 1, v);\r\n    }\r\n\r\n\r\n    public function setUniformInt2(name, value) {\r\n        return setUniformInt(2, name, 1, value);\r\n    }\r\n\r\n\r\n    public function setUniformInt3(name, value) {\r\n        return setUniformInt(3, name, 1, value);\r\n    }\r\n\r\n\r\n    public function setUniformInt4(name, value) {\r\n        return setUniformInt(4, name, 1, value);\r\n    }\r\n\r\n    public function setUniformAbstractTexture(name:String, texture:AbstractTexture) {\r\n\r\n        var it:UniformInput = Lambda.find(_inputs.uniforms, function(u:UniformInput) {\r\n            return u.name == name;\r\n        });\r\n\r\n        if (it != null) {\r\n            var oldProgram = _context.currentProgram ;\r\n\r\n            _context.setTextureAt(_setTextures.length, texture.id, it.location);\r\n            _context.setProgram(oldProgram);\r\n\r\n            _setTextures.push(name);\r\n            _setUniforms.push(name);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    public function define(macroName) {\r\n        _vertexShader.define(macroName);\r\n        _fragmentShader.define(macroName);\r\n        _definedMacros.push(macroName);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    public function setDefine(macroName, value) {\r\n        _vertexShader.setDefine(macroName, value);\r\n        _fragmentShader.setDefine(macroName, value);\r\n        _definedMacros.push(macroName);\r\n\r\n        return this;\r\n    }\r\n\r\n    public function setAttributebyName(name:String, attribute:VertexAttribute) {\r\n        return setAttribute(name, attribute, name);\r\n    }\r\n\r\n    public function setAttribute(name:String, attribute:VertexAttribute, attributeName:String) {\r\n\r\n        var it:ProgramInputs.AttributeInput = Lambda.find(_inputs.attributes, function(a:ProgramInputs.AttributeInput) {\r\n            return a.name == name;\r\n        });\r\n\r\n        if (it != null) {\r\n            var oldProgram = _context.currentProgram ;\r\n\r\n            _context.setVertexBufferAt(it.location, attribute.resourceId, attribute.size, attribute.vertexSize, attribute.offset);\r\n            _context.setProgram(oldProgram);\r\n\r\n            _setAttributes.push(name);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n}\r\n","package minko.render;\r\n@:expose(\"minko.render.InputType\")\r\n@:enum abstract InputType(Int) from Int to Int\r\n{\r\n    var unknown = 0;\r\n    var int1 = 1;\r\n    var int2 = 2;\r\n    var int3 = 3;\r\n    var int4 = 4;\r\n    var bool1 = 5;\r\n    var bool2 = 6;\r\n    var bool3 = 7;\r\n    var bool4 = 8;\r\n    var float1 = 9;\r\n    var float2 = 10;\r\n    var float3 = 11;\r\n    var float4 = 12;\r\n    var float9 = 13;\r\n    var float16 = 14;\r\n    var sampler2d = 15;\r\n    var samplerCube = 16;\r\n}\r\n@:expose(\"minko.render.AbstractInput\")\r\n\r\n@:expose(\"minko.render.UniformInput\")\r\nclass UniformInput{\r\n    public var type:InputType;\r\n    public var size:Int;\r\n    public var name:String;\r\n    public var location:Int;\r\n\r\n    public function new(name, location, size, type) {\r\n        this.name = name;\r\n        this.location = location;\r\n        this.size = size;\r\n        this.type = (type);\r\n    }\r\n}\r\n@:expose(\"minko.render.AttributeInput\")\r\nclass AttributeInput  {\r\n    public var name:String;\r\n    public var location:Int;\r\n\r\n    public function new(name, location) {\r\n        this.name = name;\r\n        this.location = location;\r\n    }\r\n}\r\n@:expose(\"minko.render.ProgramInputs\")\r\nclass ProgramInputs {\r\n\r\n    private var _uniforms:Array<UniformInput>;\r\n    private var _attributes:Array<AttributeInput>;\r\n\r\n    public static function typeToString(type:InputType) {\r\n        switch (type)\r\n        {\r\n            case InputType.unknown:\r\n                return \"unknown\";\r\n            case InputType.int1:\r\n                return \"int1\";\r\n            case InputType.int2:\r\n                return \"int2\";\r\n            case InputType.int3:\r\n                return \"int3\";\r\n            case InputType.int4:\r\n                return \"int4\";\r\n            case InputType.bool1:\r\n                return \"bool1\";\r\n            case InputType.bool2:\r\n                return \"bool2\";\r\n            case InputType.bool3:\r\n                return \"bool3\";\r\n            case InputType.bool4:\r\n                return \"bool4\";\r\n            case InputType.float1:\r\n                return \"float1\";\r\n            case InputType.float2:\r\n                return \"float2\";\r\n            case InputType.float3:\r\n                return \"float3\";\r\n            case InputType.float4:\r\n                return \"float4\";\r\n            case InputType.float9:\r\n                return \"float9\";\r\n            case InputType.float16:\r\n                return \"float16\";\r\n            case InputType.sampler2d:\r\n                return \"sampler2d\";\r\n            case InputType.samplerCube:\r\n                return \"samplerCube\";\r\n            default:\r\n                throw (\"type\");\r\n        }\r\n    }\r\n\r\n    public var uniforms(get, null):Array<UniformInput>;\r\n    public var attributes(get, null):Array<AttributeInput>;\r\n\r\n    function get_uniforms() {\r\n        return _uniforms;\r\n    }\r\n\r\n    function get_attributes() {\r\n        return _attributes;\r\n    }\r\n\r\n    public function new() {\r\n        this._uniforms = [];\r\n        this._attributes = [];\r\n    }\r\n\r\n    public function copyFrom(inputs:ProgramInputs) {\r\n        this._uniforms = inputs._uniforms.concat([]);\r\n        this._attributes = inputs._attributes.concat([]);\r\n        return this;\r\n    }\r\n\r\n\r\n    public function setProgramInputs(uniforms:Array<UniformInput>, attributes:Array<AttributeInput>) {\r\n        this._uniforms = uniforms.concat([]);\r\n        this._attributes = attributes.concat([]);\r\n    }\r\n\r\n\r\n}\r\n","package minko.render;\r\nimport Array;\r\nimport minko.component.Renderer.EffectVariables;\r\nimport minko.data.Binding;\r\nimport minko.data.BindingMap.MacroBinding;\r\nimport minko.data.BindingMap.MacroBindingMap;\r\nimport minko.data.BindingMap.MacroType;\r\nimport minko.data.Store;\r\ntypedef MaskType = Array<Bool>;//64\r\n@:expose(\"minko.render.ProgramSignature\")\r\nclass ProgramSignature {\r\n    public static inline var _maxNumMacros = 8 * 8;\r\n    public var key(get,null):String;\r\n\r\n    function get_key(){\r\n        return  _macros.toString()+ _values.toString()+_types.toString()+_mask.toString();\r\n    }\r\n    private var _mask:MaskType;\r\n    private var _values:Array<Any>;\r\n    private var _types:Array<MacroType>;\r\n    private var _macros:Array<String>;\r\n\r\n    public function new() {\r\n        this._mask = new MaskType();\r\n        this._values = new Array<Any>();\r\n        this._types = new Array<MacroType>();\r\n        this._macros = new Array<String>();\r\n    }\r\n\r\n    public function bind(macroBindings:MacroBindingMap, variables:EffectVariables, targetData:Store, rendererData:Store, rootData:Store) {\r\n        this._mask = [for (i in 0..._maxNumMacros) false];\r\n        _values = [];//.reserve(_maxNumMacros);\r\n        _macros = [];//.reserve(_maxNumMacros);\r\n        _types = [];\r\n\r\n\r\n        var macroId = 0;\r\n        for (provider in macroBindings.defaultValues.providers) {\r\n            for (propertyNameAndValue in provider.keys()) {\r\n                if(!macroBindings.bindings.exists(propertyNameAndValue)){\r\n\r\n\r\n                    _macros.push(propertyNameAndValue);\r\n                    var type:MacroType = macroBindings.types.get(propertyNameAndValue);\r\n                    _types.push(type);\r\n                    if (type != MacroType.UNSET) {\r\n                        _values.push(provider.get(propertyNameAndValue));\r\n                    }else{\r\n                        _values.push(MacroType.UNSET);\r\n                    }\r\n                    _mask[macroId] =true;\r\n                    ++macroId;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (macroNameAndBinding in macroBindings.bindings.keys()) {\r\n            var macroName:String = macroNameAndBinding;\r\n\r\n            var macroBinding:MacroBinding = macroBindings.bindings.get(macroNameAndBinding);\r\n            if( macroName ==\"RADIANCE_MAP_MAX_LOD\"){\r\n                trace(\"radianceMap.maxAvailableLod\");\r\n            }\r\n            var propertyName = Store.getActualPropertyName(variables, macroBinding.propertyName);\r\n            var store:Store = targetData;\r\n            if (macroBinding.source != Source.TARGET) {\r\n                store = (macroBinding.source == Source.RENDERER ? rendererData : rootData);\r\n            }\r\n            var macroIsDefined = store.hasProperty(propertyName);\r\n          //  var hasDefaultValue = macroBindings.defaultValues.hasProperty(propertyName);\r\n\r\n            if (macroIsDefined){//} || hasDefaultValue) {\r\n                var type:MacroType = macroBindings.types.get(macroName);\r\n\r\n                // WARNING: we do not support more than 64 macro bindings\r\n                if (macroId == _maxNumMacros) {\r\n                    throw \"\";\r\n                }\r\n                _macros.push(macroName);\r\n                _types.push(type);\r\n                if (type != MacroType.UNSET) {\r\n                    // update program signature\r\n                    var value = getValueFromStore(macroIsDefined ? store : macroBindings.defaultValues, propertyName, type);\r\n\r\n                    if (type == MacroType.INT) {\r\n                        value = Math.max(macroBinding.minValue, Math.min(macroBinding.maxValue, value));\r\n                    }\r\n\r\n                    _values.push(value);\r\n                }else{\r\n                    _values.push(MacroType.UNSET);\r\n                }\r\n                _mask[macroId] = true;\r\n                ++macroId;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public function copyFrom(signature:ProgramSignature):ProgramSignature {\r\n        this._mask = signature._mask.concat([]);\r\n        this._values = signature._values;\r\n        this.key = signature.key;\r\n        return this;\r\n    }\r\n\r\n    public function updateProgram(program:Program) {\r\n\r\n\r\n        for (macroIndex in 0..._maxNumMacros) {\r\n                if( _mask[macroIndex])\r\n                switch (_types[macroIndex])\r\n                {\r\n                    case MacroType.UNSET:\r\n                        program.define(_macros[macroIndex]);\r\n                    case MacroType.BOOL:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.BOOL2:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.BOOL3:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.BOOL4:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.INT:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.INT2:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.INT3:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.INT4:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.FLOAT:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.FLOAT2:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.FLOAT3:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.FLOAT4:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.FLOAT9:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                    case MacroType.FLOAT16:\r\n                        program.setDefine(_macros[macroIndex], (_values[macroIndex]));\r\n                }\r\n        }\r\n    }\r\n\r\n    public function getValueFromStore(store:Store, propertyName:String, type:MacroType) {\r\n        switch (type)\r\n        {\r\n            case MacroType.BOOL:\r\n                return store.get(propertyName);\r\n            case MacroType.BOOL2:\r\n                return store.get(propertyName);\r\n            case MacroType.BOOL3:\r\n                return store.get(propertyName);\r\n            case MacroType.BOOL4:\r\n                return store.get(propertyName);\r\n            case MacroType.INT:\r\n                return store.get(propertyName);\r\n            case MacroType.INT2:\r\n                return store.get(propertyName);\r\n            case MacroType.INT3:\r\n                return store.get(propertyName);\r\n            case MacroType.INT4:\r\n                return store.get(propertyName);\r\n            case MacroType.FLOAT:\r\n                return store.get(propertyName);\r\n            case MacroType.FLOAT2:\r\n                return store.get(propertyName);\r\n            case MacroType.FLOAT3:\r\n                return store.get(propertyName);\r\n            case MacroType.FLOAT4:\r\n                return store.get(propertyName);\r\n            case MacroType.FLOAT9:\r\n                return store.get(propertyName);\r\n            case MacroType.FLOAT16:\r\n                return store.get(propertyName);\r\n            case MacroType.UNSET:\r\n                throw \"\";\r\n        }\r\n\r\n        throw \"\";\r\n    }\r\n\r\n    public function dispose():Void {\r\n        \r\n    }\r\n}\r\n","package minko.render;\r\nimport haxe.io.Bytes;\r\n@:expose(\"minko.render.RectangleTexture\")\r\nclass RectangleTexture extends AbstractTexture {\r\n    private var _data:Bytes ;\r\n\r\n    public static function create(context:AbstractContext, width, height, format:TextureFormat, filename = \"\") {\r\n\r\n        return new RectangleTexture(context, width, height, format, filename);\r\n    }\r\n\r\n    public function new(context:AbstractContext, width:Int, height:Int, format:TextureFormat, filename = \"\") {\r\n\r\n        super(TextureType.Texture2D, context, width, height, format, false, false, false, filename);\r\n\r\n    }\r\n    public var data(get, null):Bytes;\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n\r\n    public function setData(data:Bytes, widthGPU = -1, heightGPU = -1) {\r\n        if (widthGPU >= 0) {\r\n            if (widthGPU > MAX_SIZE) {\r\n                throw (\"widthGPU\");\r\n            }\r\n\r\n            _width = widthGPU;\r\n            _widthGPU = widthGPU;\r\n        }\r\n        if (heightGPU >= 0) {\r\n            if (heightGPU > MAX_SIZE) {\r\n                throw (\"heightGPU\");\r\n            }\r\n\r\n            _height = heightGPU;\r\n            _heightGPU = heightGPU;\r\n        }\r\n\r\n        var size = _width * _height * 4;\r\n\r\n        _data = Bytes.alloc(size);\r\n\r\n        if (_format == TextureFormat.RGBA) {\r\n            _data.blit(0, data, 0, size);\r\n        }\r\n        else if (_format == TextureFormat.RGB) {\r\n            var i = 0, j = 0;\r\n            while (j < size) {\r\n                _data.set(j, data.get(i));\r\n                _data.set(j + 1, data.get(i + 1));\r\n                _data.set(j + 2, data.get(i + 2));\r\n                _data.set(j + 3, 255);\r\n                i += 3;\r\n                j += 4;\r\n            }\r\n        }\r\n    }\r\n\r\n    public override function resize(width, height, resizeSmoothly) {\r\n        var previousWidth = this.width;\r\n        var previousHeight = this.height;\r\n\r\n        var previousData = _data;\r\n\r\n        _data = AbstractTexture.resizeData(previousWidth, previousHeight, previousData, width, height, resizeSmoothly);\r\n\r\n        _width = width;\r\n        _widthGPU = width;\r\n\r\n        _height = height;\r\n        _heightGPU = height;\r\n    }\r\n\r\n    public override function dispose() {\r\n        if (_id != -1) {\r\n            _context.deleteTexture(_id);\r\n            _id = -1;\r\n        }\r\n\r\n        disposeData();\r\n    }\r\n\r\n    public override function disposeData() {\r\n        _data = null;\r\n    }\r\n\r\n    public override function upload() {\r\n        if (_id == -1) {\r\n            _id = _context.createRectangleTexture(_type, _widthGPU, _heightGPU);\r\n        }\r\n\r\n        if (_data.length > 0) {\r\n            _context.uploadTexture2dData(_id, _widthGPU, _heightGPU, 0, _data);\r\n        }\r\n    }\r\n\r\n}\r\n","package minko.render;\r\n@:expose(\"minko.render.SamplerStates\")\r\nclass SamplerStates {\r\n    public static inline var PROPERTY_WRAP_MODE = \"wrapMode\";\r\n    public static inline var PROPERTY_TEXTURE_FILTER = \"textureFilter\";\r\n    public static inline var PROPERTY_MIP_FILTER = \"mipFilter\";\r\n\r\n    public static var PROPERTY_NAMES = [ PROPERTY_WRAP_MODE,\r\n    PROPERTY_TEXTURE_FILTER,\r\n    PROPERTY_MIP_FILTER];\r\n\r\n    public static inline var DEFAULT_WRAP_MODE = (WrapMode.CLAMP);\r\n    public static inline var DEFAULT_TEXTURE_FILTER = (TextureFilter.NEAREST);\r\n    public static inline var DEFAULT_MIP_FILTER = (MipFilter.NONE);\r\n\r\n    public static function uniformNameToSamplerStateName(uniformName, sampleState) {\r\n        return uniformName + \"/\" + sampleState;\r\n    }\r\n\r\n    public static function uniformNameToSamplerStateBindingName(uniformName, samplerState:String) {\r\n        var samplerStateCapitalized = samplerState.charAt(0).toUpperCase() + samplerState.substr(1);\r\n        return uniformName + samplerStateCapitalized;\r\n    }\r\n\r\n    public static function stringToWrapMode(value) {\r\n        return value == \"repeat\" ? WrapMode.REPEAT : WrapMode.CLAMP;\r\n    }\r\n\r\n    public static function stringToTextureFilter(value) {\r\n        return value == \"linear\" ? TextureFilter.LINEAR : TextureFilter.NEAREST;\r\n    }\r\n\r\n    public static function stringToMipFilter(value) {\r\n        return value == \"linear\" ? MipFilter.LINEAR : (value == \"nearest\" ? MipFilter.NEAREST : MipFilter.NONE);\r\n    }\r\n\r\n    public var wrapMode:WrapMode;\r\n    public var textureFilter:TextureFilter;\r\n    public var mipFilter:MipFilter;\r\n\r\n    public function new(wm:WrapMode, tf:TextureFilter, mf:MipFilter) {\r\n\r\n        this.wrapMode = wm;\r\n        this.textureFilter = tf;\r\n        this.mipFilter = mf;\r\n    }\r\n}\r\n","package minko.render;\r\nimport haxe.ds.StringMap;\r\n@:expose(\"minko.render.ShaderType\")\r\n@:enum abstract ShaderType(Int) from Int to Int\r\n{\r\n    var VERTEX_SHADER = 0;\r\n    var FRAGMENT_SHADER = 1;\r\n}\r\n@:expose(\"minko.render.Shader\")\r\nclass Shader extends AbstractResource {\r\n    private var _type:ShaderType;\r\n    private var _source:String;\r\n    private var _definedMacros:StringMap<String>;\r\n\r\n    public function new(context, type) {\r\n        super(context);\r\n        this._type = type;\r\n        _definedMacros = new StringMap<String>();\r\n    }\r\n\r\n    public function clearDefinedMacros():Void {\r\n        _definedMacros = new StringMap<String>();\r\n    }\r\n\r\n    public static function create(context:AbstractContext, type:ShaderType):Shader {\r\n        return new Shader(context, type);\r\n    }\r\n\r\n    public static function createbySource(context:AbstractContext, type:ShaderType, source:String):Shader {\r\n        var s:Shader = create(context, type);\r\n\r\n        s._source = source;\r\n\r\n\r\n        return s;\r\n    }\r\n\r\n    public static function createbyShader(shader:Shader):Shader {\r\n        var s:Shader = create(shader.context, shader._type);\r\n\r\n        s._source = shader._source;\r\n        for (k in shader._definedMacros.keys())\r\n            s._definedMacros.set(k, shader._definedMacros.get(k));\r\n\r\n        return s;\r\n    }\r\n\r\n    public var type(get, null):ShaderType;\r\n\r\n    function get_type() {\r\n        return _type;\r\n    }\r\n    public var source(get, set):String;\r\n\r\n    function get_source() {\r\n        return _source;\r\n    }\r\n\r\n    function set_source(v) {\r\n        _source = v;\r\n        return v;\r\n    }\r\n\r\n    public function define(macroName) {\r\n        if (!Lambda.has(_definedMacros, macroName)) {\r\n            _definedMacros.set(macroName, null);\r\n        }\r\n    }\r\n\r\n    public function setDefine(macroName, value) {\r\n        if (!Lambda.has(_definedMacros, macroName)) {\r\n            _definedMacros.set(macroName, value );\r\n        }\r\n    }\r\n\r\n\r\n    public override function dispose() {\r\n        if (_type == ShaderType.VERTEX_SHADER) {\r\n            _context.deleteVertexShader(_id);\r\n        }\r\n        else if (_type == ShaderType.FRAGMENT_SHADER) {\r\n            _context.deleteFragmentShader(_id);\r\n        }\r\n\r\n        _id = -1;\r\n    }\r\n\r\n    public override function upload() {\r\n        if (_type == ShaderType.VERTEX_SHADER) {\r\n            _id = _context.createVertexShader();\r\n        } else {\r\n            _id = _context.createFragmentShader();\r\n        }\r\n        inline function defineToString(macroName){\r\n            var value:String= _definedMacros.get(macroName);\r\n            if (value!=null) {\r\n\r\n                return \"#define \" + macroName + \" \" +value+ \"\\n\";\r\n            }\r\n            return \"#define \" + macroName + \"\\n\";\r\n        }\r\n//#if MINKO_PLATFORM & (MINKO_PLATFORM_ANDROID | MINKO_PLATFORM_IOS | MINKO_PLATFORM_HTML5)\r\n        var source = \"#version 100\\n  \" ;\r\n        for (s in _definedMacros.keys()) {\r\n            source += defineToString(s);\r\n\r\n        }\r\n        source += _source;\r\n//#else\r\n        //       var source = \"#version 120\\n\" + _source;\r\n//#end\r\n\r\n        /*\r\n        if (_type == ShaderType.VERTEX_SHADER) {\r\n            //{ success: success, output: output, log: log };\r\n            var vsShader= untyped __js__('optimizeShader({0}, {1})',source,\"vs\");\r\n            if(vsShader.success){\r\n                source=vsShader.output;\r\n            }else{\r\n                trace(vsShader.log);\r\n            }\r\n        }else{\r\n            var fsShader= untyped __js__('optimizeShader({0}, {1})',source,\"fs\");\r\n            if(fsShader.success){\r\n                source=fsShader.output;\r\n            }else{\r\n                trace(fsShader.log);\r\n            }\r\n        } */\r\n\r\n\r\n        _context.setShaderSource(_id, source);\r\n       // trace(source);\r\n\r\n        _context.compileShader(_id);\r\n    }\r\n\r\n\r\n}\r\n","package minko.render;\r\nimport glm.Vec4;\r\nimport minko.data.Binding.Source;\r\nimport minko.data.Provider;\r\n@:expose(\"minko.render.States\")\r\nclass States {\r\n\r\n    public static inline var PROPERTY_PRIORITY = \"priority\";\r\n    public static inline var PROPERTY_ZSORTED = \"zSorted\";\r\n    public static inline var PROPERTY_BLENDING_SOURCE = \"blendingSource\";\r\n    public static inline var PROPERTY_BLENDING_DESTINATION = \"blendingDestination\";\r\n    public static inline var PROPERTY_COLOR_MASK = \"colorMask\";\r\n    public static inline var PROPERTY_DEPTH_MASK = \"depthMask\";\r\n    public static inline var PROPERTY_DEPTH_FUNCTION = \"depthFunction\";\r\n    public static inline var PROPERTY_TRIANGLE_CULLING = \"triangleCulling\";\r\n    public static inline var PROPERTY_STENCIL_FUNCTION = \"stencilFunction\";\r\n    public static inline var PROPERTY_STENCIL_REFERENCE = \"stencilReference\";\r\n    public static inline var PROPERTY_STENCIL_MASK = \"stencilMask\";\r\n    public static inline var PROPERTY_STENCIL_FAIL_OPERATION = \"stencilFailOperation\";\r\n    public static inline var PROPERTY_STENCIL_ZFAIL_OPERATION = \"stencilZFailOperation\";\r\n    public static inline var PROPERTY_STENCIL_ZPASS_OPERATION = \"stencilZPassOperation\";\r\n    public static inline var PROPERTY_SCISSOR_TEST = \"scissorTest\";\r\n    public static inline var PROPERTY_SCISSOR_BOX = \"scissorBox\";\r\n    public static inline var PROPERTY_TARGET = \"target\";\r\n    public static var PROPERTY_NAMES:Array<String> = [\r\n        PROPERTY_PRIORITY,\r\n        PROPERTY_ZSORTED,\r\n        PROPERTY_BLENDING_SOURCE,\r\n        PROPERTY_BLENDING_DESTINATION,\r\n        PROPERTY_COLOR_MASK,\r\n        PROPERTY_DEPTH_MASK,\r\n        PROPERTY_DEPTH_FUNCTION,\r\n        PROPERTY_TRIANGLE_CULLING,\r\n        PROPERTY_STENCIL_FUNCTION,\r\n        PROPERTY_STENCIL_REFERENCE,\r\n        PROPERTY_STENCIL_MASK,\r\n        PROPERTY_STENCIL_FAIL_OPERATION,\r\n        PROPERTY_STENCIL_ZFAIL_OPERATION,\r\n        PROPERTY_STENCIL_ZPASS_OPERATION,\r\n        PROPERTY_SCISSOR_TEST,\r\n        PROPERTY_SCISSOR_BOX,\r\n        PROPERTY_TARGET\r\n    ];\r\n    public static var DEFAULT_PRIORITY = Priority.OPAQUE;\r\n    public static inline var DEFAULT_ZSORTED = false;\r\n    public static inline var DEFAULT_BLENDING_SOURCE = Blending.Source.ONE;\r\n    public static inline var DEFAULT_BLENDING_DESTINATION = Blending.Destination.ZERO;\r\n    public static inline var DEFAULT_COLOR_MASK = true;\r\n    public static inline var DEFAULT_DEPTH_MASK = true;\r\n    public static inline var DEFAULT_DEPTH_FUNCTION = (CompareMode.LESS);\r\n    public static inline var DEFAULT_TRIANGLE_CULLING = (TriangleCulling.BACK);\r\n    public static inline var DEFAULT_STENCIL_FUNCTION = (CompareMode.ALWAYS);\r\n    public static inline var DEFAULT_STENCIL_REFERENCE = 0;\r\n    public static inline var DEFAULT_STENCIL_MASK = 1;\r\n    public static inline var DEFAULT_STENCIL_FAIL_OPERATION = (StencilOperation.KEEP);\r\n    public static inline var DEFAULT_STENCIL_ZFAIL_OPERATION = (StencilOperation.KEEP);\r\n    public static inline var DEFAULT_STENCIL_ZPASS_OPERATION = (StencilOperation.KEEP);\r\n    public static inline var DEFAULT_SCISSOR_TEST = false;\r\n    public static var DEFAULT_SCISSOR_BOX = new Vec4();\r\n    public static var DEFAULT_TARGET:Texture = null;\r\n\r\n    public static var UNSET_PRIORITY_VALUE = Math.NEGATIVE_INFINITY;\r\n    private var _data:Provider;\r\n\r\n    static public function createbyProvider(a:Provider) {\r\n        var s = new States();\r\n        s.data = (a);\r\n        return s;\r\n    }\r\n\r\n    public function new(priority:Priority = null, zSorted = DEFAULT_ZSORTED, blendingSourceFactor = DEFAULT_BLENDING_SOURCE, blendingDestinationFactor = DEFAULT_BLENDING_DESTINATION, colorMask = DEFAULT_COLOR_MASK, depthMask = DEFAULT_DEPTH_MASK, depthFunction = DEFAULT_DEPTH_FUNCTION, triangleCulling = DEFAULT_TRIANGLE_CULLING, stencilFunction = DEFAULT_STENCIL_FUNCTION, stencilRef = DEFAULT_STENCIL_REFERENCE, stencilMask = DEFAULT_STENCIL_MASK, stencilFailOp = DEFAULT_STENCIL_FAIL_OPERATION, stencilZFailOp = DEFAULT_STENCIL_ZFAIL_OPERATION, stencilZPassOp = DEFAULT_STENCIL_ZPASS_OPERATION, scissorTest = DEFAULT_SCISSOR_TEST, ?scissorBox:Vec4 = null, ?target:Texture = null) {\r\n        this._data = Provider.create() ;\r\n        //resetDefaultValues();\r\n\r\n        this.priority = (priority == null ? DEFAULT_PRIORITY : priority);\r\n        this.zSorted = (zSorted);\r\n        this.blendingSourceFactor = (blendingSourceFactor);\r\n        this.blendingDestinationFactor = (blendingDestinationFactor);\r\n        this.colorMask = (colorMask);\r\n        this.depthMask = (depthMask);\r\n        this.depthFunction = (depthFunction);\r\n        this.triangleCulling = (triangleCulling);\r\n        this.stencilFunction = (stencilFunction);\r\n        this.stencilReference = (stencilRef);\r\n        this.stencilMask = (stencilMask);\r\n        this.stencilFailOperation = (stencilFailOp);\r\n        this.stencilZFailOperation = stencilZFailOp;\r\n        this.stencilZPassOperation = (stencilZPassOp);\r\n        this.scissorTest = (scissorTest);\r\n        this.scissorBox = (scissorBox == null ? DEFAULT_SCISSOR_BOX : scissorBox);\r\n        this.target = (target == null ? DEFAULT_TARGET : target);\r\n    }\r\n\r\n    public function copyFrom(states:States) {\r\n        this._data = Provider.createbyProvider(states._data) ;\r\n        return this;\r\n    }\r\n\r\n\r\n    public function resetDefaultValues() {\r\n        _data.set(PROPERTY_PRIORITY, DEFAULT_PRIORITY);\r\n        _data.set(PROPERTY_ZSORTED, DEFAULT_ZSORTED);\r\n        _data.set(PROPERTY_BLENDING_SOURCE, DEFAULT_BLENDING_SOURCE);\r\n        _data.set(PROPERTY_BLENDING_DESTINATION, DEFAULT_BLENDING_DESTINATION);\r\n        _data.set(PROPERTY_COLOR_MASK, DEFAULT_COLOR_MASK);\r\n        _data.set(PROPERTY_DEPTH_MASK, DEFAULT_DEPTH_MASK);\r\n        _data.set(PROPERTY_DEPTH_FUNCTION, DEFAULT_DEPTH_FUNCTION);\r\n        _data.set(PROPERTY_TRIANGLE_CULLING, DEFAULT_TRIANGLE_CULLING);\r\n        _data.set(PROPERTY_STENCIL_FUNCTION, DEFAULT_STENCIL_FUNCTION);\r\n        _data.set(PROPERTY_STENCIL_REFERENCE, DEFAULT_STENCIL_REFERENCE);\r\n        _data.set(PROPERTY_STENCIL_MASK, DEFAULT_STENCIL_MASK);\r\n        _data.set(PROPERTY_STENCIL_FAIL_OPERATION, DEFAULT_STENCIL_FAIL_OPERATION);\r\n        _data.set(PROPERTY_STENCIL_ZFAIL_OPERATION, DEFAULT_STENCIL_ZFAIL_OPERATION);\r\n        _data.set(PROPERTY_STENCIL_ZPASS_OPERATION, DEFAULT_STENCIL_ZPASS_OPERATION);\r\n        _data.set(PROPERTY_SCISSOR_TEST, DEFAULT_SCISSOR_TEST);\r\n        _data.set(PROPERTY_SCISSOR_BOX, DEFAULT_SCISSOR_BOX);\r\n        _data.set(PROPERTY_TARGET, DEFAULT_TARGET);\r\n    }\r\n\r\n    public var data(get, set):Provider;\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n\r\n    function set_data(v) {\r\n        _data = v;\r\n        return v;\r\n    }\r\n\r\n    public var priority(get, set):Float;\r\n\r\n    function get_priority() {\r\n        return _data.get(PROPERTY_PRIORITY);\r\n    }\r\n\r\n    function set_priority(priority) {\r\n        _data.set(PROPERTY_PRIORITY, priority);\r\n\r\n        return priority;\r\n    }\r\n\r\n    public var zSorted(get, set):Bool;\r\n\r\n    function get_zSorted() {\r\n        return _data.get(PROPERTY_ZSORTED);\r\n    }\r\n\r\n    function set_zSorted(zSorted) {\r\n        _data.set(PROPERTY_ZSORTED, zSorted);\r\n\r\n        return zSorted;\r\n    }\r\n\r\n    public var blendingSourceFactor(get, set):Blending.Source;\r\n\r\n    function get_blendingSourceFactor() {\r\n        return _data.get(PROPERTY_BLENDING_SOURCE);\r\n    }\r\n\r\n\r\n    function set_blendingSourceFactor(value) {\r\n        _data.set(PROPERTY_BLENDING_SOURCE, value);\r\n\r\n        return value;\r\n    }\r\n    public var blendingDestinationFactor(get, set):Blending.Destination;\r\n\r\n    function get_blendingDestinationFactor() {\r\n        return _data.get(PROPERTY_BLENDING_DESTINATION);\r\n    }\r\n\r\n    function set_blendingDestinationFactor(value) {\r\n        _data.set(PROPERTY_BLENDING_DESTINATION, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var colorMask(get, set):Bool;\r\n\r\n    function get_colorMask() {\r\n        return _data.get(PROPERTY_COLOR_MASK);\r\n    }\r\n\r\n    function set_colorMask(value) {\r\n        _data.set(PROPERTY_COLOR_MASK, value);\r\n\r\n        return value;\r\n    }\r\n    public var depthMask(get, set):Bool;\r\n\r\n    function get_depthMask() {\r\n        return _data.get(PROPERTY_DEPTH_MASK);\r\n    }\r\n\r\n    function set_depthMask(value) {\r\n        _data.set(PROPERTY_DEPTH_MASK, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var depthFunction(get, set):CompareMode;\r\n\r\n    function get_depthFunction() {\r\n        return _data.get(PROPERTY_DEPTH_FUNCTION);\r\n    }\r\n\r\n    function set_depthFunction(value) {\r\n        _data.set(PROPERTY_DEPTH_FUNCTION, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var triangleCulling(get, set):TriangleCulling;\r\n\r\n    function get_triangleCulling() {\r\n        return _data.get(PROPERTY_TRIANGLE_CULLING);\r\n    }\r\n\r\n    function set_triangleCulling(value) {\r\n        _data.set(PROPERTY_TRIANGLE_CULLING, value);\r\n\r\n        return value;\r\n    }\r\n    public var stencilFunction(get, set):CompareMode;\r\n\r\n    function get_stencilFunction() {\r\n        return _data.get(PROPERTY_STENCIL_FUNCTION);\r\n    }\r\n\r\n    function set_stencilFunction(value) {\r\n        _data.set(PROPERTY_STENCIL_FUNCTION, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var stencilReference(get, set):Int;\r\n\r\n    function get_stencilReference() {\r\n        return _data.get(PROPERTY_STENCIL_REFERENCE);\r\n    }\r\n\r\n    function set_stencilReference(value) {\r\n        _data.set(PROPERTY_STENCIL_REFERENCE, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    public var stencilMask(get, set):Int;\r\n\r\n    function get_stencilMask() {\r\n        return _data.get(PROPERTY_STENCIL_MASK);\r\n    }\r\n\r\n\r\n    function set_stencilMask(value) {\r\n        _data.set(PROPERTY_STENCIL_MASK, value);\r\n\r\n        return value;\r\n    }\r\n    public var stencilFailOperation(get, set):StencilOperation;\r\n\r\n    function get_stencilFailOperation() {\r\n        return _data.get(PROPERTY_STENCIL_FAIL_OPERATION);\r\n    }\r\n\r\n    function set_stencilFailOperation(value) {\r\n        _data.set(PROPERTY_STENCIL_FAIL_OPERATION, value);\r\n\r\n        return value;\r\n    }\r\n    public var stencilZFailOperation(get, set):StencilOperation;\r\n\r\n    function get_stencilZFailOperation() {\r\n        return _data.get(PROPERTY_STENCIL_ZFAIL_OPERATION);\r\n    }\r\n\r\n    function set_stencilZFailOperation(value) {\r\n        _data.set(PROPERTY_STENCIL_ZFAIL_OPERATION, value);\r\n\r\n        return value;\r\n    }\r\n    public var stencilZPassOperation(get, set):StencilOperation;\r\n\r\n    function get_stencilZPassOperation() {\r\n        return _data.get(PROPERTY_STENCIL_ZPASS_OPERATION);\r\n    }\r\n\r\n    function set_stencilZPassOperation(value) {\r\n        _data.set(PROPERTY_STENCIL_ZPASS_OPERATION, value);\r\n\r\n        return value;\r\n    }\r\n    public var scissorTest(get, set):Bool;\r\n\r\n    function get_scissorTest() {\r\n        return _data.get(PROPERTY_SCISSOR_TEST);\r\n    }\r\n\r\n    function set_scissorTest(value) {\r\n        _data.set(PROPERTY_SCISSOR_TEST, value);\r\n\r\n        return value;\r\n    }\r\n    public var scissorBox(get, set):Vec4;\r\n\r\n    function get_scissorBox() {\r\n        return _data.get(PROPERTY_SCISSOR_BOX);\r\n    }\r\n\r\n    function set_scissorBox(value) {\r\n        _data.set(PROPERTY_SCISSOR_BOX, value);\r\n\r\n        return value;\r\n    }\r\n    public var target(get, set):AbstractTexture ;\r\n\r\n    function get_target() {\r\n        return _data.get(PROPERTY_TARGET);\r\n    }\r\n\r\n    function set_target(value:AbstractTexture):AbstractTexture {\r\n        _data.set(PROPERTY_TARGET, value);\r\n\r\n        return value;\r\n    }\r\n\r\n}\r\n","package minko.render;\r\nimport Array;\r\nimport haxe.io.Bytes;\r\nimport minko.utils.MathUtil;\r\n@:expose(\"minko.render.Texture\")\r\nclass Texture extends AbstractTexture {\r\n    private var _data:Array<Bytes>;\r\n\r\n    public static function create(context:AbstractContext, width, height, mipMapping = false, optimizeForRenderToTexture = false, resizeSmoothly = true, format = TextureFormat.RGBA, filename = \"\"):Texture {\r\n\r\n        return new Texture(context, width, height, mipMapping, optimizeForRenderToTexture, resizeSmoothly, format, filename);\r\n    }\r\n    public var data(get, null):Array<Bytes>;\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n\r\n    public function setData(data:Bytes, widthGPU, heightGPU) {\r\n        if (widthGPU >= 0) {\r\n            if (widthGPU > MAX_SIZE) {\r\n                throw (\"widthGPU\");\r\n            }\r\n\r\n            _width = widthGPU;\r\n            _widthGPU = widthGPU;\r\n        }\r\n        if (heightGPU >= 0) {\r\n            if (heightGPU > MAX_SIZE) {\r\n                throw (\"heightGPU\");\r\n            }\r\n\r\n            _height = heightGPU;\r\n            _heightGPU = heightGPU;\r\n        }\r\n\r\n        // Debug.Assert(math.isp2(_widthGPU) && math.isp2(_heightGPU));\r\n\r\n        if (!TextureFormatInfo.isCompressed(_format)) {\r\n            var size = _width * _height * 4;\r\n\r\n            var rgba = Bytes.alloc(size);\r\n\r\n            if (_format == TextureFormat.RGBA) {\r\n                rgba.blit(0, data, 0, size);\r\n            }\r\n            else if (_format == TextureFormat.RGB) {\r\n                _format = TextureFormat.RGBA;\r\n                var i = 0, j = 0;\r\n                while (j < size) {\r\n                    rgba.set(j, data.get(i));\r\n                    rgba.set(j + 1, data.get(i + 1));\r\n                    rgba.set(j + 2, data.get(i + 2));\r\n                    rgba.set(j + 3, 255);\r\n                    i += 3;\r\n                    j += 4;\r\n                }\r\n            }\r\n\r\n            rgba = AbstractTexture.resizeData(_width, _height, rgba, _widthGPU, _heightGPU, _resizeSmoothly);\r\n            _data.push(rgba);\r\n        }\r\n        else {\r\n            var size = TextureFormatInfo.textureSize(_format, _width, _height);\r\n            var rgb = Bytes.alloc(size);\r\n            rgb.blit(0, data, 0, size);\r\n            _data.push(rgb);\r\n        }\r\n    }\r\n\r\n    override public function resize(width, height, resizeSmoothly) {\r\n//Debug.Assert(math.isp2(width) && math.isp2(height));\r\n\r\n        var previousWidth = this.width;\r\n        var previousHeight = this.height;\r\n\r\n        var previousNumMipMaps = data.length > TextureFormatInfo.textureSize(_format, previousWidth, previousHeight) ? MathUtil.getp2(previousWidth) + 1 : 1;\r\n\r\n        var numMipMaps = previousNumMipMaps > 1 ? MathUtil.getp2(width) + 1 : 1;\r\n\r\n\r\n        var newData = [];\r\n\r\n        for (i in 0... numMipMaps) {\r\n            var mipMapData:Bytes =data[i];\r\n            var mipMapPreviousWidth = Math.floor(Math.max(previousWidth >> i, 1));\r\n            var mipMapPreviousHeight = Math.floor(Math.max(previousHeight >> i, 1));\r\n            var mipMapWidth = width >> i;\r\n            var mipMapHeight = height >> i;\r\n            var newMipMapData:Bytes = AbstractTexture.resizeData(mipMapPreviousWidth, mipMapPreviousHeight, mipMapData, mipMapWidth, mipMapHeight, resizeSmoothly);\r\n            newData.push(newMipMapData);\r\n        }\r\n\r\n        _data = newData;\r\n\r\n        _width = width;\r\n        _widthGPU = width;\r\n\r\n        _height = height;\r\n        _heightGPU = height;\r\n    }\r\n\r\n\r\n    public override function dispose() {\r\n        if (_id != -1) {\r\n            _context.deleteTexture(_id);\r\n            id = -1;\r\n        }\r\n\r\n        disposeData();\r\n    }\r\n\r\n    public override function disposeData() {\r\n        _data = null;\r\n    }\r\n\r\n    public override function upload() {\r\n        if (_id == -1) {\r\n            if (TextureFormatInfo.isCompressed((_format))) {\r\n                id = _context.createCompressedTexture(_type, (_format), _widthGPU, _heightGPU, _mipMapping);\r\n            }\r\n            else {\r\n                id = _context.createTexture(_type, _widthGPU, _heightGPU, _mipMapping, _optimizeForRenderToTexture);\r\n            }\r\n        }\r\n\r\n        if (_data.length > 0) {\r\n            if (TextureFormatInfo.isCompressed((_format))) {\r\n                _context.uploadCompressedTexture2dData(_id, (_format), _widthGPU, _heightGPU, _data.length, 0, _data[0]);\r\n            }\r\n            else {\r\n                _context.uploadTexture2dData(_id, _widthGPU, _heightGPU, 0, _data[0]);\r\n\r\n                if (_mipMapping) {\r\n                    _context.generateMipmaps(_id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public function uploadMipLevel(level, data:Bytes ) {\r\n        var width = (_widthGPU >> level);\r\n        var height = (_heightGPU >> level);\r\n\r\n        if (TextureFormatInfo.isCompressed((_format))) {\r\n            var size = TextureFormatInfo.textureSize((_format), width, height);\r\n\r\n            _context.uploadCompressedTexture2dData(_id, (_format), width, height, size, level, data);\r\n        }\r\n        else {\r\n            _context.uploadTexture2dData(_id, width, height, level, data);\r\n        }\r\n    }\r\n\r\n    public function new(context:AbstractContext, width, height, mipMapping = false, optimizeForRenderToTexture = false, resizeSmoothly = true, format = TextureFormat.RGBA, filename = \"\") {\r\n        super(TextureType.Texture2D, context, width, height, format, mipMapping, optimizeForRenderToTexture, resizeSmoothly, filename);\r\n        this._data = [];\r\n\r\n    }\r\n}\r\n","package minko.render;\r\nimport haxe.ds.IntMap;\r\n@:expose(\"minko.render.Entry\")\r\nclass Entry {\r\n    public var _name:String;\r\n\r\n    public var _isCompressed:Bool;\r\n\r\n    public var _numBitsPerPixel:Int;\r\n\r\n    public var _minimumSize:Int;\r\n\r\n    public var _hasAlphaChannel:Bool;\r\n    public var _hasSeparateAlphaChannel:Bool;\r\n\r\n    public function new(name, isCompressed, numBitsPerPixel, minimumSize, hasAlphaChannel, hasSeparateAlphaChannel) {\r\n        this._name = name;\r\n        this._isCompressed = isCompressed;\r\n        this._numBitsPerPixel = numBitsPerPixel;\r\n        this._minimumSize = minimumSize;\r\n        this._hasAlphaChannel = hasAlphaChannel;\r\n        this._hasSeparateAlphaChannel = hasSeparateAlphaChannel;\r\n    }\r\n}\r\n@:expose(\"minko.render.TextureFormatInfo\")\r\nclass TextureFormatInfo {\r\n    private static var _formats:IntMap< Entry> = initializeFormatsMap();\r\n\r\n    public static function initializeFormatsMap() {\r\n        var m:IntMap< Entry> = new IntMap< Entry>();\r\n        m.set(TextureFormat.RGB, new Entry(\"RGB\", false, 24, 3, false, false));\r\n        m.set(TextureFormat.RGBA, new Entry(\"RGBA\", false, 32, 4, true, false));\r\n\r\n        m.set(TextureFormat.RGB_DXT1, new Entry(\"RGB_DXT1\", true, 4, 8, false, false));\r\n        m.set(TextureFormat.RGBA_DXT1, new Entry(\"RGBA_DXT1\", true, 4, 8, true, false));\r\n        m.set(TextureFormat.RGBA_DXT3, new Entry(\"RGBA_DXT3\", true, 8, 16, true, false));\r\n        m.set(TextureFormat.RGBA_DXT5, new Entry(\"RGBA_DXT5\", true, 8, 16, true, false));\r\n\r\n        m.set(TextureFormat.RGB_ETC1, new Entry(\"RGB_ETC1\", true, 4, 8, false, false));\r\n        m.set(TextureFormat.RGBA_ETC1, new Entry(\"RGBA_ETC1\", true, 4, 8, true, true));\r\n\r\n        m.set(TextureFormat.RGB_PVRTC1_2BPP, new Entry(\"RGB_PVRTC1_2BPP\", true, 2, 32, false, false));\r\n        m.set(TextureFormat.RGB_PVRTC1_4BPP, new Entry(\"RGB_PVRTC1_4BPP\", true, 4, 32, false, false));\r\n        m.set(TextureFormat.RGBA_PVRTC1_2BPP, new Entry(\"RGBA_PVRTC1_2BPP\", true, 2, 32, true, false));\r\n        m.set(TextureFormat.RGBA_PVRTC1_4BPP, new Entry(\"RGBA_PVRTC1_4BPP\", true, 4, 32, true, false));\r\n\r\n        m.set(TextureFormat.RGBA_PVRTC2_2BPP, new Entry(\"RGBA_PVRTC2_2BPP\", true, 2, 32, true, false));\r\n        m.set(TextureFormat.RGBA_PVRTC2_4BPP, new Entry(\"RGBA_PVRTC2_4BPP\", true, 4, 32, true, false));\r\n\r\n        m.set(TextureFormat.RGB_ATITC, new Entry(\"RGB_ATITC\", true, 8, 16, false, false));\r\n        m.set(TextureFormat.RGBA_ATITC, new Entry(\"RGBA_ATITC\", true, 8, 16, true, false));\r\n        return m;\r\n    }\r\n\r\n    public static function isSupported(format:TextureFormat) {\r\n        //var availableFormats = WebGlContext.availableTextureFormats();\r\n\r\n        // return availableFormats.exists(format)  ;\r\n        return false;\r\n    }\r\n\r\n    public static function textureSize(format:TextureFormat, width, height) {\r\n        return Math.floor(Math.max(minimumSize(format), numBitsPerPixel(format) / 8.0 * width * height));\r\n    }\r\n\r\n    public static function name(format:TextureFormat) {\r\n        return _formats.get(format)._name;\r\n    }\r\n\r\n    public static function isCompressed(format:TextureFormat) {\r\n        return _formats.get(format)._isCompressed;\r\n    }\r\n\r\n    public static function numBitsPerPixel(format:TextureFormat) {\r\n        return _formats.get(format)._numBitsPerPixel;\r\n    }\r\n\r\n    public static function minimumSize(format:TextureFormat) {\r\n        return _formats.get(format)._minimumSize;\r\n    }\r\n\r\n    public static function hasAlphaChannel(format:TextureFormat) {\r\n        return _formats.get(format)._hasAlphaChannel;\r\n    }\r\n\r\n    public static function hasSeparateAlphaChannel(format:TextureFormat) {\r\n        return _formats.get(format)._hasSeparateAlphaChannel;\r\n    }\r\n    public static var textureFormats(get, null):Array<TextureFormat>;\r\n\r\n    public static function get_textureFormats() {\r\n        var formats = [];\r\n\r\n        for (textureFormat in _formats.keys()) {\r\n            formats.push(textureFormat);\r\n        }\r\n\r\n        return formats;\r\n    }\r\n}\r\n","package minko.render;\r\n@:expose(\"minko.render.TextureSampler\")\r\nclass TextureSampler {\r\n    public var uuid:String;\r\n    public var id:Int;\r\n    public var mipFilter:MipFilter;\r\n    public var textureFilter:TextureFilter;\r\n    public var wrapMode:WrapMode;\r\n\r\n\r\n    public function copyFrom(rhs:TextureSampler) {\r\n        this.uuid = rhs.uuid;\r\n        this.id = rhs.id;\r\n        this.mipFilter = (rhs.mipFilter);\r\n        this.textureFilter = (rhs.textureFilter);\r\n        this.wrapMode = (rhs.wrapMode);\r\n    }\r\n\r\n    public function new(uuid, id) {\r\n        this.uuid = uuid;\r\n        this.id = id;\r\n        this.mipFilter = (SamplerStates.DEFAULT_MIP_FILTER);\r\n        this.textureFilter = (SamplerStates.DEFAULT_TEXTURE_FILTER);\r\n        this.wrapMode = (SamplerStates.DEFAULT_WRAP_MODE);\r\n    }\r\n\r\n\r\n    public function equals(rhs:TextureSampler) {\r\n        return this.uuid == rhs.uuid && this.id == rhs.id && this.mipFilter == rhs.mipFilter && this.textureFilter == rhs.textureFilter && this.wrapMode == rhs.wrapMode;\r\n    }\r\n\r\n}\r\n","package minko.render;\r\n@:expose(\"minko.render.VertexAttribute\")\r\nclass VertexAttribute {\r\n    public var resourceId:Int;\r\n    public var vertexSize:Int;\r\n    public var name:String;\r\n    public var size:Int;\r\n    public var offset:Int;\r\n\r\n\r\n    public function equals(rhs:VertexAttribute) {\r\n        return this.resourceId == rhs.resourceId && this.vertexSize == rhs.vertexSize && this.name == rhs.name && this.size == rhs.size && this.offset == rhs.offset;\r\n    }\r\n\r\n    public function new(_id, _vertexSize, name, size, actualOffset) {\r\n        resourceId = _id;\r\n        vertexSize = _vertexSize;\r\n        this.name = name;\r\n        this.size = size;\r\n        this.offset = actualOffset;\r\n    }\r\n}\r\n","package minko.render;\r\nimport glm.Vec3;\r\nimport minko.signal.Signal2;\r\n@:expose(\"minko.render.VertexBuffer\")\r\nclass VertexBuffer extends AbstractResource {\r\n    private var _data:Array<Float>;\r\n    private var _attributes:Array<VertexAttribute>;\r\n    private var _vertexSize:Int;\r\n    private var _vertexSizeChanged:Signal2<VertexBuffer, Int> ;\r\n\r\n    public static function create(context:AbstractContext):VertexBuffer {\r\n        return new VertexBuffer(context);\r\n    }\r\n\r\n    public static function createbyVec3Data(context:AbstractContext, data:Array<Vec3>, len:Int):VertexBuffer {\r\n        var ptr = new VertexBuffer(context);\r\n        ptr.data = [];\r\n        for (d in data) {\r\n            ptr.data.push(d.x);\r\n            ptr.data.push(d.y);\r\n            ptr.data.push(d.z);\r\n        }\r\n        ptr.upload();\r\n        return ptr;\r\n    }\r\n\r\n    public static function createbyData(context:AbstractContext, data:Array<Float>):VertexBuffer {\r\n        var ptr = new VertexBuffer(context);\r\n        ptr.data = data;\r\n        ptr.upload();\r\n        return ptr;\r\n    }\r\n    public var data(get, set):Array<Float>;\r\n\r\n    function set_data(v) {\r\n        _data = v;\r\n        return v;\r\n    }\r\n\r\n    function get_data() {\r\n        return _data;\r\n    }\r\n    public var attributes(get, null):Array<VertexAttribute>;\r\n\r\n    function get_attributes() {\r\n        return _attributes;\r\n    }\r\n    public var vertexSize(get, set):Int;\r\n\r\n    function get_vertexSize() {\r\n        return _vertexSize;\r\n    }\r\n\r\n    function set_vertexSize(value) {\r\n        var offset = value - _vertexSize;\r\n        _vertexSize = value;\r\n        _vertexSizeChanged.execute(this, offset);\r\n        return value;\r\n    }\r\n    public var vertexSizeChanged(get, null):Signal2<VertexBuffer, Int>;\r\n\r\n    function get_vertexSizeChanged() {\r\n        return _vertexSizeChanged;\r\n    }\r\n\r\n    public var numVertices(get, null):Int;\r\n\r\n    function get_numVertices() {\r\n        return _vertexSize > 0 ? Math.floor(_data.length / _vertexSize) : 0;\r\n    }\r\n\r\n    override public function upload() {\r\n        uploadOffset(0, 0);\r\n    }\r\n\r\n    public function uploadOffset(offset, numVertices = 0) {\r\n        if (_data.length == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_id == -1) {\r\n            _id = _context.createVertexBuffer(_data.length);\r\n        }\r\n\r\n        _context.uploadVertexBufferData(_id, offset * _vertexSize, numVertices == 0 ? _data.length : numVertices * _vertexSize, _data);\r\n\r\n        //updatePositionBounds();\r\n    }\r\n\r\n    public function uploadData(offset, numVertices, data:Array<Float>) {\r\n        if (data.length == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_id == -1) {\r\n            _id = _context.createVertexBuffer(data.length);\r\n        }\r\n\r\n        _context.uploadVertexBufferData(_id, offset * _vertexSize, numVertices == 0 ? data.length : numVertices * _vertexSize, data);\r\n    }\r\n\r\n    override public function dispose() {\r\n        if (_id != -1) {\r\n            _context.deleteVertexBuffer(_id);\r\n            _id = -1;\r\n        }\r\n\r\n        disposeData();\r\n    }\r\n\r\n    public function disposeData() {\r\n        _data = null;\r\n    }\r\n\r\n    public function addAttribute(name, size, offset = 0) {\r\n        if (hasAttribute(name)) {\r\n            throw (\"name\");\r\n        }\r\n\r\n        var actualOffset = offset;\r\n        if (actualOffset == 0) {\r\n            actualOffset = _vertexSize;\r\n        }\r\n        _attributes.push(new VertexAttribute(_id, _vertexSize, name, size, actualOffset));\r\n        set_vertexSize(_vertexSize + size);\r\n\r\n        _attributes = _attributes.map(function(a:VertexAttribute) {\r\n            a.vertexSize = vertexSize;\r\n            return a;\r\n        });\r\n\r\n    }\r\n\r\n    public function removeAttribute(attributeName) {\r\n\r\n        var it:VertexAttribute = Lambda.find(_attributes, function(attr:VertexAttribute) {\r\n            return attr.name == attributeName;\r\n        });\r\n\r\n        if (it == null) {\r\n            throw (\"attributeName = \" + attributeName);\r\n        }\r\n\r\n        set_vertexSize(_vertexSize - it.size);\r\n        _attributes.remove(it);\r\n        _attributes = _attributes.map(function(a:VertexAttribute) {\r\n            a.vertexSize = vertexSize;\r\n            return a;\r\n        });\r\n    }\r\n\r\n\r\n    public function hasAttribute(attributeName) {\r\n        var it = Lambda.exists(_attributes, function(attr:VertexAttribute) {\r\n            return attr.name == attributeName;\r\n        });\r\n\r\n        return it ;\r\n    }\r\n\r\n    public function attribute(attributeName):VertexAttribute  {\r\n        var it:VertexAttribute = Lambda.find(_attributes, function(attr:VertexAttribute) {\r\n            return attr.name == attributeName;\r\n        });\r\n\r\n        if (it == null) {\r\n            throw (\"attributeName = \" + attributeName);\r\n        }\r\n\r\n        return it;\r\n    }\r\n\r\n    public function equals(vertexBuffer:VertexBuffer) {\r\n        return _data == vertexBuffer._data;\r\n    }\r\n\r\n    public function new(context:AbstractContext) {\r\n        super(context);\r\n        this._data = [];\r\n        this._attributes = [];\r\n        this._vertexSize = 0;\r\n        this._vertexSizeChanged = new Signal2<VertexBuffer, Int>();\r\n\r\n    }\r\n\r\n}\r\n","package minko.scene;\r\n\r\nimport haxe.ds.ObjectMap;\r\nimport Lambda;\r\nimport minko.component.AbstractComponent;\r\nimport minko.data.Store;\r\nimport minko.scene.Layout.BuiltinLayout;\r\nimport minko.signal.Signal2;\r\nimport minko.signal.Signal3;\r\nimport minko.Uuid.Enable_uuid;\r\n@:expose(\"minko.scene.Node\")\r\nclass Node extends Enable_uuid {\r\n\r\n    private var _name:String;\r\n    private var _children:Array<Node>;\r\n    private var _root:Node;\r\n    private var _parent:Node;\r\n    private var _container:Store;\r\n    private var _components:Array<AbstractComponent>;\r\n    private var _layout:Layout;\r\n    private var _added:Signal3<Node, Node, Node>;\r\n    private var _removed:Signal3<Node, Node, Node>;\r\n    private var _layoutChanged:Signal2<Node, Node>;\r\n    private var _componentAdded:Signal3<Node, Node, AbstractComponent>;\r\n    private var _componentRemoved:Signal3<Node, Node, AbstractComponent>;\r\n\r\n    public static function create(n = \"\"):Node {\r\n\r\n        var node = new Node(n);\r\n        node._root = node;\r\n        return node;\r\n    }\r\n\r\n    public static function createbyLayout(n:String, l:Layout):Node {\r\n\r\n        var node = new Node(n);\r\n        node._root = node;\r\n        node.layout = l;\r\n        return node;\r\n    }\r\n\r\n    public function new(?n = \"\") {\r\n        super();\r\n        this._name = n;\r\n        this._layout = BuiltinLayout.DEFAULT;\r\n        _children = [];\r\n        _container = new Store();\r\n        _components = [];\r\n        _added = new Signal3<Node, Node, Node>();\r\n        _removed = new Signal3<Node, Node, Node>();\r\n        _layoutChanged = new Signal2<Node, Node>();\r\n        _componentAdded = new Signal3<Node, Node, AbstractComponent>();\r\n        _componentRemoved = new Signal3<Node, Node, AbstractComponent>();\r\n    }\r\n\r\n    public function clone(option:CloneOption):Node {\r\n        var clone = cloneNode();\r\n        var nodeMap:ObjectMap<Node, Node> = new ObjectMap<Node, Node>(); // map linking nodes to their clone\r\n        var componentsMap:ObjectMap<AbstractComponent, AbstractComponent> = new ObjectMap<AbstractComponent, AbstractComponent>(); // map linking components to their clone\r\n\r\n        listItems(clone, nodeMap, componentsMap);\r\n\r\n        rebindComponentsDependencies(componentsMap, nodeMap, option);\r\n\r\n        for (itn in nodeMap.keys()) {\r\n            var node = itn;\r\n\r\n            var originComponents:Array<AbstractComponent> = cast node.getComponents(AbstractComponent);\r\n\r\n            for (itc in componentsMap.keys()) {\r\n                var component = itc;\r\n\r\n                // if the current node has a particular component, we clone it\r\n                if (Lambda.has(originComponents, component)) {\r\n                    nodeMap.get(node).addComponent(componentsMap.get(component));\r\n                }\r\n            }\r\n        }\r\n\r\n        return nodeMap.get(this);\r\n    }\r\n\r\n    public function cloneNode() {\r\n        var clone = Node.create();\r\n\r\n        clone._name = this.name + \"_clone\";\r\n\r\n        for (child in children) {\r\n            clone.addChild(child.cloneNode());\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    public function listItems(clonedRoot:Node, nodeMap:ObjectMap<Node, Node>, components:ObjectMap<AbstractComponent, AbstractComponent>) {\r\n        for (component in _components) {\r\n            components.set(component, component.clone(CloneOption.DEEP));\r\n        }\r\n\r\n        nodeMap.set(this, clonedRoot);\r\n\r\n        for (childId in 0...children.length) {\r\n            var child = children[childId];\r\n            var clonedChild = clonedRoot.children[childId];\r\n\r\n            child.listItems(clonedChild, nodeMap, components);\r\n        }\r\n    }\r\n\r\n    public function rebindComponentsDependencies(componentsMap:ObjectMap<AbstractComponent, AbstractComponent>, nodeMap:ObjectMap<Node, Node>, option:Int) {\r\n        for (comp in componentsMap.keys()) {\r\n            var compClone:AbstractComponent = cast(componentsMap.get(comp), AbstractComponent);\r\n\r\n            if (compClone != null) {\r\n                compClone.rebindDependencies(componentsMap, nodeMap, option);\r\n            }\r\n        }\r\n    }\r\n\r\n    public var name(get, set):String;\r\n\r\n    public function get_name() {\r\n        return _name;\r\n    }\r\n\r\n    public function set_name(v) {\r\n        _name = v;\r\n        return v;\r\n    }\r\n\r\n    public var layout(get, set):Layout;\r\n\r\n    public function get_layout() {\r\n        return _layout;\r\n    }\r\n\r\n    public function set_layout(v:Layout) {\r\n        if (v != _layout) {\r\n            _layout = v;\r\n\r\n            // bubble down\r\n            var descendants:NodeSet = NodeSet.createbyNode(this).descendants(true);\r\n            for (descendant in descendants.nodes) {\r\n                descendant._layoutChanged.execute(descendant, this);\r\n            }\r\n\r\n            // bubble up\r\n            var ancestors:NodeSet = NodeSet.createbyNode(this).ancestors();\r\n            for (ancestor in ancestors.nodes) {\r\n                ancestor._layoutChanged.execute(ancestor, this);\r\n            }\r\n        }\r\n\r\n        return v;\r\n    }\r\n\r\n    public var parent(get, null):Node;\r\n\r\n    function get_parent() {\r\n        return _parent ;\r\n    }\r\n\r\n    public var root(get, null):Node;\r\n\r\n    function get_root() {\r\n        return _root ;\r\n    }\r\n\r\n    public var children(get, null):Array<Node>;\r\n\r\n    function get_children() {\r\n        return _children;\r\n    }\r\n    public var data(get, null):Store;\r\n\r\n    function get_data() {\r\n        return _container;\r\n    }\r\n\r\n    public var added(get, null):Signal3<Node, Node, Node>;\r\n\r\n    function get_added() {\r\n        return _added;\r\n    }\r\n\r\n    public var removed(get, null):Signal3<Node, Node, Node>;\r\n\r\n    function get_removed() {\r\n        return _removed;\r\n    }\r\n    public var layoutChanged(get, null):Signal2<Node, Node>;\r\n\r\n    function get_layoutChanged() {\r\n        return _layoutChanged;\r\n    }\r\n    public var componentAdded(get, null):Signal3<Node, Node, AbstractComponent>;\r\n\r\n    function get_componentAdded() {\r\n        return _componentAdded;\r\n    }\r\n\r\n    public var componentRemoved(get, null):Signal3<Node, Node, AbstractComponent>;\r\n\r\n    function get_componentRemoved() {\r\n        return _componentRemoved;\r\n    }\r\n\r\n    public function addChild(child:Node):Node {\r\n        if (child.parent != null) {\r\n            child.parent.removeChild(child);\r\n        }\r\n\r\n        _children.push(child);\r\n\r\n        child._parent = this;\r\n        child.updateRoot();\r\n\r\n        // bubble down\r\n        var descendants:NodeSet = NodeSet.createbyNode(child).descendants(true);\r\n        for (descendant in descendants.nodes) {\r\n            descendant._added.execute(descendant, child, this);\r\n        }\r\n\r\n        // bubble up\r\n        var ancestors:NodeSet = NodeSet.createbyNode(this).ancestors(true);\r\n        for (ancestor in ancestors.nodes) {\r\n            ancestor._added.execute(ancestor, child, this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public function removeChild(child:Node) {\r\n        var it = Lambda.has(_children, child);\r\n\r\n        if (it == false) {\r\n            throw (\"child\");\r\n        }\r\n        _children.remove(child);\r\n\r\n        child._parent = null;\r\n        child.updateRoot();\r\n\r\n        // bubble down\r\n        var descendants:NodeSet = NodeSet.createbyNode(child).descendants(true);\r\n        for (descendant in descendants.nodes) {\r\n            descendant._removed.execute(descendant, child, this);\r\n        }\r\n\r\n        // bubble up\r\n        var ancestors:NodeSet = NodeSet.createbyNode(this).ancestors(true);\r\n        for (ancestor in ancestors.nodes) {\r\n            ancestor._removed.execute(ancestor, child, this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public function removeChildren() {\r\n        var numChildren = _children.length;\r\n\r\n        var i = numChildren - 1;\r\n        while (i >= 0) {\r\n            removeChild(_children[i]);\r\n            --i;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public function contains(node:Node) {\r\n        return Lambda.has(_children, node);\r\n    }\r\n\r\n    public function addComponent(component:AbstractComponent):Node {\r\n        if (component == null) {\r\n            throw (\"component\");\r\n        }\r\n        var it = Lambda.has(_components, component);\r\n        if (it) {\r\n            throw (\"The same component cannot be added twice.\");\r\n        }\r\n\r\n        if (component.target != null) {\r\n            component.target.removeComponent(component);\r\n        }\r\n        _components.push(component);\r\n        component.target = (this);\r\n\r\n        // bubble down\r\n        var descendants:NodeSet = NodeSet.createbyNode(this).descendants(true);\r\n        for (descendant in descendants.nodes) {\r\n            descendant._componentAdded.execute(descendant, this, component);\r\n        }\r\n\r\n        // bubble up\r\n        var ancestors:NodeSet = NodeSet.createbyNode(this).ancestors();\r\n        for (ancestor in ancestors.nodes) {\r\n            ancestor._componentAdded.execute(ancestor, this, component);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public function removeComponent(component:AbstractComponent) {\r\n        if (component == null) {\r\n            throw (\"component\");\r\n        }\r\n\r\n        var it = Lambda.has(_components, component);\r\n\r\n        if (it == false) {\r\n            throw (\"component\");\r\n        }\r\n\r\n        _components.remove(component);\r\n        component.target = (null);\r\n\r\n        // bubble down\r\n        var descendants:NodeSet = NodeSet.createbyNode(this).descendants(true);\r\n        for (descendant in descendants.nodes) {\r\n            descendant._componentRemoved.execute(descendant, this, component);\r\n        }\r\n        var ancestor = parent;\r\n        // bubble up\r\n        while (ancestor != null) {\r\n            ancestor._componentRemoved.execute(ancestor, this, component);\r\n            ancestor = ancestor.parent;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public function existsComponent(c:AbstractComponent) {\r\n        return Lambda.has(_components, c);\r\n    }\r\n\r\n    public function hasComponent(cClass:Class<AbstractComponent>) {\r\n        return Lambda.exists(_components, function(c:AbstractComponent) {\r\n            return Std.is(c, cClass);\r\n        });\r\n    }\r\n\r\n    public function getComponent(cClass:Class<AbstractComponent>) {\r\n        return Lambda.find(_components, function(c:AbstractComponent) {\r\n            return Std.is(c, cClass);\r\n        });\r\n    }\r\n\r\n    public function getComponents(cClass:Class<AbstractComponent>):Array<AbstractComponent> {\r\n        return _components.filter(function(c:AbstractComponent) {\r\n\r\n            return Std.is(c, cClass);\r\n        });\r\n    }\r\n\r\n\r\n    public var components(get, null):Array<AbstractComponent>;\r\n\r\n    function get_components() {\r\n        return _components;\r\n    }\r\n\r\n\r\n    public function setNode(uuid, name) {\r\n        this.uuid = uuid;\r\n        this._name = name;\r\n        this._layout = BuiltinLayout.DEFAULT;\r\n    }\r\n\r\n    public function updateRoot() {\r\n        _root = (parent != null ? (parent.root != null ? parent._root : _parent) : this);\r\n\r\n        for (child in _children) {\r\n            child.updateRoot();\r\n        }\r\n    }\r\n\r\n    public function dispose():Void {\r\n        for (child in _children) {\r\n            child.dispose();\r\n        }\r\n        for(component in _components){\r\n            removeComponent(component);\r\n            component.dispose();\r\n        }\r\n        _container.dispose();\r\n\r\n        _added.dispose();\r\n        _removed.dispose();\r\n        _layoutChanged.dispose();\r\n        _componentAdded.dispose();\r\n        _componentRemoved.dispose();\r\n\r\n        _children=null;\r\n        _components=null;\r\n        _container=null;\r\n\r\n        _added=null;\r\n        _removed=null;\r\n        _layoutChanged=null;\r\n        _componentAdded=null;\r\n        _componentRemoved=null;\r\n    }\r\n}\r\n","package minko.scene;\r\nimport Lambda;\r\n@:expose(\"minko.scene.NodeSet\")\r\nclass NodeSet extends Node {\r\n    private var _nodes:Array<Node> ;\r\n    public var nodes(get, null):Array<Node>;\r\n\r\n    function get_nodes() {\r\n        return _nodes;\r\n    }\r\n\r\n    public function new() {\r\n        super();\r\n        _nodes = new Array<Node>();\r\n    }\r\n\r\n\r\n    override    public function dispose() {\r\n        super.dispose();\r\n        _nodes = null;\r\n    }\r\n\r\n    public static function createbyArray(nodes:Array<Node>) {\r\n        var set:NodeSet = new NodeSet();\r\n\r\n        set.nodes = nodes.concat([]);\r\n\r\n        return set;\r\n    }\r\n\r\n\r\n    public static function create():NodeSet {\r\n        var set:NodeSet = new NodeSet();\r\n\r\n        return set;\r\n    }\r\n\r\n    public static function createbyNode(node:Node):NodeSet {\r\n        var set:NodeSet = new NodeSet();\r\n\r\n        set.nodes.push(node);\r\n\r\n        return set;\r\n    }\r\n\r\n\r\n    public function size() {\r\n        return _nodes.length;\r\n    }\r\n\r\n    public function descendants(andSelf:Bool, ?depthFirst:Bool = false, ?result:NodeSet = null):NodeSet {\r\n        if (result == null) {\r\n            result = create();\r\n        }\r\n\r\n        var nodesStack = new Array<Node>();\r\n\r\n        for (node in _nodes) {\r\n            nodesStack.push(node);\r\n\r\n            while (nodesStack.length != 0) {\r\n                var descendant = nodesStack.shift();\r\n                if (descendant != node || andSelf) {\r\n                    result._nodes.push(descendant);\r\n                }\r\n\r\n\r\n                nodesStack = (depthFirst ? descendant.children.concat(nodesStack) : nodesStack.concat(descendant.children) );\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public function ancestors(?andSelf:Bool = false, ?result:NodeSet = null) {\r\n        if (result == null) {\r\n            result = create();\r\n        }\r\n\r\n        for (node in _nodes) {\r\n            if (andSelf) {\r\n                result._nodes.push(node);\r\n            }\r\n\r\n            while (node != null) {\r\n                if (node.parent != null) {\r\n                    result._nodes.push(node.parent);\r\n                }\r\n                node = node.parent;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public function childrens(andSelf:Bool, result:NodeSet) {\r\n        if (result == null) {\r\n            result = create();\r\n        }\r\n\r\n        for (node in _nodes) {\r\n            if (andSelf) {\r\n                result._nodes.push(node);\r\n            }\r\n\r\n            result._nodes = result._nodes.concat(node.children);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public function where(filter:Node -> Bool, ?result:NodeSet = null) {\r\n        if (result == null) {\r\n            result = create();\r\n        }\r\n\r\n        for (node in _nodes) {\r\n            if (filter(node)) {\r\n                result._nodes.push(node);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public function roots(?result:NodeSet) :NodeSet{\r\n        if (result == null) {\r\n            result = create();\r\n        }\r\n\r\n        for (node in _nodes) {\r\n            if (!Lambda.has(result._nodes,node.root) ) {\r\n                result._nodes.push(node.root);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n}\r\n","package minko.signal;\r\ntypedef Callback<A> = A -> Void;\r\ntypedef CallbackRecord<A> = Tuple<Float, SignalSlot<A>>;\r\n@:expose(\"minko.signal.SignalSlot\")\r\nclass SignalSlot<A> {\r\n    public var _signal:Signal<A>;\r\n    public var callback:Callback<A>;\r\n    public var expired:Bool;\r\n    public var once:Bool;\r\n\r\n    public function new(_s) {\r\n        expired = false;\r\n        _signal = _s;\r\n    }\r\n\r\n    public function disconnect() {\r\n        if (_signal != null) {\r\n            _signal.remove(this);\r\n            _signal = null ;\r\n        }\r\n    }\r\n\r\n    public function dispose() {\r\n        disconnect();\r\n    }\r\n}\r\n@:expose(\"minko.signal.Signal\")\r\nclass Signal<A> {\r\n    private var _callbacks:Array<CallbackRecord<A>>;\r\n    public var numCallbacks(get, null):Int;\r\n\r\n    public function new() {\r\n        _callbacks = [];\r\n    }\r\n\r\n    public function copyFrom(other:Signal<A>) {\r\n        _callbacks = [for (c in other._callbacks) c];\r\n        return this;\r\n    }\r\n\r\n    public function dispose() {\r\n        for (callback in _callbacks) {\r\n            var slot = callback.second;\r\n\r\n            if (slot != null) {\r\n                slot._signal = null;\r\n            }\r\n        }\r\n        _callbacks = [];\r\n    }\r\n\r\n    public static function create<A>() {\r\n        return new Signal<A>();\r\n    }\r\n\r\n    function get_numCallbacks() {\r\n        return _callbacks.length;\r\n    }\r\n\r\n    public function connect(callback:Callback<A>, ?priority:Float = 0, ?once = false) {\r\n        var connection = new SignalSlot<A>(this);\r\n        connection.callback = callback;\r\n        connection.once = once;\r\n        _callbacks.push(new CallbackRecord(priority, connection));\r\n        _callbacks.sort(function(a:CallbackRecord<A>, b:CallbackRecord<A>) {\r\n            return Math.floor(b.first - a.first);\r\n        });\r\n        return connection;\r\n\r\n    }\r\n\r\n    public function execute(a:A) {\r\n\r\n        var callbacks = _callbacks;\r\n        var onces:Array<SignalSlot<A>> = [];\r\n        for (callback in callbacks) {\r\n            var slot:SignalSlot<A> = callback.second;\r\n            if (!slot.expired) {\r\n                slot.callback(a);\r\n                if (slot.once) {\r\n                    slot.expired = true;\r\n                    onces.push(slot);\r\n                }\r\n            }\r\n        }\r\n        for (callback in onces) {\r\n            callback.disconnect();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public function remove(it:SignalSlot<A>) {\r\n        _callbacks = _callbacks.filter(function(b) {\r\n            return b.second != it;\r\n        });\r\n    }\r\n\r\n}","package minko.signal;\r\ntypedef Callback3<A, B, C> = A -> B -> C -> Void;\r\ntypedef CallbackRecord3<A, B, C> = Tuple<Float, SignalSlot3<A, B, C>>;\r\n@:expose(\"minko.signal.SignalSlot3\")\r\nclass SignalSlot3<A, B, C> {\r\n    public var _signal:Signal3<A, B, C>;\r\n    public var callback:Callback3<A, B, C>;\r\n    public var expired:Bool;\r\n    public var once:Bool;\r\n\r\n    public function new(_s) {\r\n        expired = false;\r\n        _signal = _s;\r\n    }\r\n\r\n    public function disconnect() {\r\n        if (_signal != null) {\r\n            _signal.remove(this);\r\n            _signal = null ;\r\n        }\r\n    }\r\n\r\n    public function dispose() {\r\n        disconnect();\r\n    }\r\n}\r\n@:expose(\"minko.signal.Signal3\")\r\nclass Signal3<A, B, C> {\r\n    var _callbacks:Array<CallbackRecord3<A, B, C>>;\r\n    public var numCallbacks(get, null):Int;\r\n\r\n    public function new() {\r\n        _callbacks = [];\r\n    }\r\n\r\n    public function copyFrom(other:Signal3<A, B, C>) {\r\n        _callbacks = [for (c in other._callbacks) c];\r\n        return this;\r\n    }\r\n\r\n    public function dispose() {\r\n        for (callback in _callbacks) {\r\n            var slot:SignalSlot3<A, B, C> = callback.second;\r\n\r\n            if (slot != null) {\r\n                slot._signal = null;\r\n            }\r\n        }\r\n        _callbacks = [];\r\n    }\r\n\r\n    public static function create<A, B, C>() {\r\n        return new Signal3<A, B, C>();\r\n    }\r\n\r\n    function get_numCallbacks() {\r\n        return _callbacks.length;\r\n    }\r\n\r\n    public function connect(callback:Callback3<A, B, C>, ?priority:Float = 0, ?once = false) :SignalSlot3<A, B, C>{\r\n        var connection = new SignalSlot3<A, B, C>(this);\r\n        connection.callback = callback;\r\n        connection.once = once;\r\n        _callbacks.push(new CallbackRecord3(priority, connection));\r\n        _callbacks.sort(function(a:CallbackRecord3<A, B, C>, b:CallbackRecord3<A, B, C>) {\r\n            return Math.floor(b.first - a.first);\r\n        });\r\n        return connection;\r\n    }\r\n\r\n    public function execute(a:A, b:B, c:C) {\r\n        var callbacks = _callbacks;\r\n        var onces:Array<SignalSlot3<A, B, C>> = [];\r\n        for (callback in callbacks) {\r\n            var slot:SignalSlot3<A, B, C> = callback.second;\r\n            if (!slot.expired) {\r\n                slot.callback(a, b, c);\r\n                if (slot.once) {\r\n                    slot.expired = true;\r\n                    onces.push(slot);\r\n                }\r\n            }\r\n        }\r\n        for (callback in onces) {\r\n            callback.disconnect();\r\n        }\r\n    }\r\n\r\n    public function remove(it:SignalSlot3<A, B, C>) {\r\n        _callbacks = _callbacks.filter(function(b:CallbackRecord3<A, B, C>) {\r\n            return b.second != it;\r\n        });\r\n    }\r\n\r\n}","package minko.signal;\r\ntypedef Callback4<A, B, C, D> = A -> B -> C -> D -> Void;\r\ntypedef CallbackRecord4<A, B, C, D> = Tuple<Float, SignalSlot4<A, B, C, D>>;\r\n@:expose(\"minko.signal.SignalSlot4\")\r\nclass SignalSlot4<A, B, C, D> {\r\n    public var _signal:Signal4<A, B, C, D>;\r\n    public var callback:Callback4<A, B, C, D>;\r\n    public var expired:Bool;\r\n    public var once:Bool;\r\n\r\n    public function new(_s) {\r\n        expired = false;\r\n        _signal = _s;\r\n    }\r\n\r\n    public function disconnect() {\r\n        if (_signal != null) {\r\n            _signal.remove(this);\r\n            _signal = null ;\r\n        }\r\n    }\r\n\r\n    public function dispose() {\r\n        disconnect();\r\n    }\r\n}\r\n@:expose(\"minko.signal.Signal4\")\r\nclass Signal4<A, B, C, D> {\r\n    public var _callbacks:Array<CallbackRecord4<A, B, C, D>>;\r\n    public var numCallbacks(get, null):Int;\r\n\r\n    public function new() {\r\n        _callbacks = [];\r\n    }\r\n\r\n    public function copyFrom(other:Signal4<A, B, C, D>) {\r\n        _callbacks = [for (c in other._callbacks) c];\r\n        return this;\r\n    }\r\n\r\n    public function dispose() {\r\n        for (callback in _callbacks) {\r\n            var slot:SignalSlot4<A, B, C, D> = callback.second;\r\n\r\n            if (slot != null) {\r\n                slot._signal = null;\r\n            }\r\n        }\r\n        _callbacks = [];\r\n    }\r\n\r\n    public static function create<A, B, C, D>() {\r\n        return new Signal4<A, B, C, D>();\r\n    }\r\n\r\n    function get_numCallbacks() {\r\n        return _callbacks.length;\r\n    }\r\n\r\n    public function connect(callback:Callback4<A, B, C, D>, ?priority:Float = 0, ?once = false) {\r\n        var connection = new SignalSlot4<A, B, C, D>(this);\r\n        connection.callback = callback;\r\n        connection.once = once;\r\n        _callbacks.push(new CallbackRecord4(priority, connection));\r\n        _callbacks.sort(function(a:CallbackRecord4<A, B, C, D>, b:CallbackRecord4<A, B, C, D>) {\r\n            return Math.floor(b.first - a.first);\r\n        });\r\n        return connection;\r\n    }\r\n\r\n    public function execute(a:A, b:B, c:C, d:D) {\r\n        var callbacks = _callbacks;\r\n        var onces:Array<SignalSlot4<A, B, C, D>> = [];\r\n        for (callback in callbacks) {\r\n            var slot:SignalSlot4<A, B, C, D> = callback.second;\r\n            if (!slot.expired) {\r\n                slot.callback(a, b, c, d);\r\n                if (slot.once) {\r\n                    slot.expired = true;\r\n                    onces.push(slot);\r\n                }\r\n            }\r\n        }\r\n        for (callback in onces) {\r\n            callback.disconnect();\r\n        }\r\n    }\r\n\r\n    public function remove(it:SignalSlot4<A, B, C, D>) {\r\n        _callbacks = _callbacks.filter(function(b) {\r\n            return b.second != it;\r\n        });\r\n    }\r\n\r\n}","package minko.utils;\r\nimport haxe.io.Bytes;\r\nimport haxe.io.BytesInput;\r\nimport haxe.io.BytesOutput;\r\nclass BytesTool {\r\n    public static function readUTF(b:BytesInput):String {\r\n        var len = b.readInt32();\r\n        return b.readString(len);\r\n    }\r\n\r\n    public static function readOneBytes(b:BytesInput):Bytes {\r\n        var len = b.readInt32();\r\n        return b.read(len);\r\n    }\r\n\r\n    public static function writeUTF(b:BytesOutput, bt:String) :Void{\r\n        b.writeInt32(bt.length);\r\n        b.writeString(bt);\r\n\r\n\r\n    }\r\n\r\n    public static function writeOneBytes(b:BytesOutput, bt:Bytes) :Void {\r\n        b.writeInt32(bt.length);\r\n        b.writeFullBytes(bt,0,bt.length);\r\n    }\r\n}\r\n","package minko.utils;\r\nclass RandomNumbers {\r\n\r\n    public static var RAND_MAX = 10;\r\n\r\n    public static function nextNumber() {\r\n\r\n\r\n        return MathUtil.rand01();\r\n    }\r\n\r\n    public static function nextNumberCeiling(ceiling) {\r\n        return Math.floor(nextNumber() * ceiling);\r\n    }\r\n\r\n\r\n}","package minko.utils;\r\nclass TimeUtil {\r\n     static public function getTimerMilliseconds() {\r\n         return Date.now().getTime();\r\n    }\r\n}\r\n","package minko.utils;\r\n\r\nclass VectorHelper {\r\n\r\n    static public function resize<T>(list:Array<T>, newSize:Int, value:T) {\r\n        if (list.length > newSize) {\r\n            while (list.length > newSize) {\r\n                list.pop();\r\n            }\r\n        }\r\n        else if (list.length < newSize) {\r\n            for (i in list.length... newSize) {\r\n                list.push(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    static public function equals<T>(list1:Array<T>, list2:Array<T>) {\r\n        if (list1.length != list2.length) {\r\n            return false;\r\n        }\r\n        for (i in 0...list2.length) {\r\n            if (list1[i] != list2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static public function swap<T>(list1:Array<T>, list2:Array<T>) {\r\n        var temp = list1.copy();\r\n        resize(list1, list2.length, null);\r\n        for (i in 0...list2.length) {\r\n            list1[i] = list2[i];\r\n        }\r\n        resize(list2, temp.length, null);\r\n        for (i in 0...temp.length) {\r\n            list2[i] = temp[i];\r\n        }\r\n    }\r\n\r\n    static public function initializedList<T>(size:Int, value:T) {\r\n        var temp = new Array<T>();\r\n        for (count in 0... size) {\r\n            temp.push(value);\r\n        }\r\n\r\n        return temp;\r\n    }\r\n\r\n\r\n    static public function nestedList<T>(outerSize:Int, innerSize:Int, value:T) {\r\n\r\n        var temp = new Array<Array<T>>();\r\n        for (count in 0... outerSize) {\r\n            temp.push(initializedList(innerSize, value));\r\n        }\r\n\r\n        return temp;\r\n        return temp;\r\n    }\r\n}\r\n","package minko.utils;\r\nimport haxe.crypto.Base64;\r\nimport haxe.io.Bytes;\r\nimport js.html.CanvasElement;\r\nimport js.html.CanvasRenderingContext2D;\r\nimport js.html.CSSStyleDeclaration;\r\nimport js.html.ImageData;\r\nimport js.html.ImageElement;\r\nimport minko.file.PixelData;\r\n\r\nclass WebNodeTools {\r\n    static public var MAX_SIZE = 4096;\r\n    static public var   component:CanvasElement;\r\n    public static function createCanvasElement():CanvasElement {\r\n        var r = js.Browser.document.createCanvasElement();\r\n        var r_style:CSSStyleDeclaration = r.style;\r\n        r_style.position = \"absolute\";\r\n        // disable canvas selection indication from mouse/touch swiping:\r\n        r_style.setProperty(\"-webkit-touch-callout\", \"none\");\r\n        r_style.setProperty(\"user-select\", \"none\");\r\n        return r;\r\n    }\r\n\r\n    public static function loadFromBytes(t:String, c:Bytes, ?h:PixelData -> Void) {\r\n         if( component==null) {\r\n             component = createCanvasElement();\r\n             //component.remove();\r\n         }\r\n        var o:ImageElement = untyped js.Browser.document.createElement(\"img\");\r\n        var n:CanvasElement = component;\r\n\r\n        var f:Dynamic -> Void = null;\r\n        var i:Int, l:Int;\r\n        var p:ImageData;\r\n\r\n        f = function(_) {\r\n            o.removeEventListener(\"load\", f);\r\n            //\r\n\r\n            n.width = Math.floor(Math.min(MathUtil.clp2(o.width), MAX_SIZE));\r\n            n.height = Math.floor(Math.min(MathUtil.clp2(o.height), MAX_SIZE));\r\n            var q:CanvasRenderingContext2D;\r\n            q = n.getContext(\"2d\");\r\n            //\r\n            q.drawImage(o, 0, 0, o.width, o.height, 0, 0, n.width, n.height);\r\n            p = q.getImageData(0, 0, n.width, n.height);\r\n\r\n            //\r\n            if (h != null) h(new PixelData(\r\n                 n.width,\r\n                n.height,\r\n               Bytes.ofData(p.data.buffer)));\r\n\r\n            o.remove();\r\n            o = null;\r\n            p = null;\r\n\r\n        };\r\n\r\n        o.addEventListener(\"load\", f);\r\n        o.src = \"data:image/\" + t + \";base64,\" + Base64.encode(c);\r\n    }\r\n}\r\n","package tutorial;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Quat;\r\nimport glm.Vec2;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.Loader;\r\nimport minko.geometry.CubeGeometry;\r\nimport minko.geometry.QuadGeometry;\r\nimport minko.input.Keyboard;\r\nimport minko.material.BasicMaterial;\r\nimport minko.render.Effect;\r\nimport minko.render.Texture;\r\nimport minko.scene.Node;\r\nimport minko.utils.MathUtil;\r\nimport minko.WebCanvas;\r\nclass ApplyingAntialiasingEffect {\r\n    public function new() {\r\n        init();\r\n    }\r\n\r\n\r\n    private static var WINDOW_WIDTH = 800;\r\n    private static var WINDOW_HEIGHT = 600;\r\n\r\n    function init() {\r\n        var canvas = WebCanvas.create(\"Minko Tutorial - Applying antialiasing effect\", WINDOW_WIDTH, WINDOW_HEIGHT);\r\n        var sceneManager = SceneManager.create(canvas);\r\n\r\n        sceneManager.assets.loader\r\n        .queue(\"effect/Basic.effect\")\r\n        .queue(\"effect/FXAA/FXAA.effect\");\r\n\r\n\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(0x00000000))\r\n        .addComponent(PerspectiveCamera.create(canvas.aspectRatio))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(0.0, 0.0, -5.0), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())));\r\n        root.addChild(camera);\r\n\r\n        var renderTarget = Texture.create(canvas.context, MathUtil.clp2(WINDOW_WIDTH), MathUtil.clp2(WINDOW_HEIGHT), false, true);\r\n        renderTarget.upload();\r\n\r\n        var ppMaterial = BasicMaterial.create();\r\n        ppMaterial.diffuseMap = (renderTarget);\r\n\r\n        var effect:Effect = new Effect();\r\n\r\n        var enableFXAA = true;\r\n\r\n        var cube = Node.create(\"cube\");\r\n\r\n        var renderer = Renderer.create();\r\n\r\n        var postProcessingScene = Node.create();\r\n\r\n        var complete = sceneManager.assets.loader.complete.connect(function(loader:Loader) {\r\n            trace(\"Enable FXAA\");\r\n            var material = BasicMaterial.create();\r\n            material.diffuseColor = (new Vec4(0.0, 0.0, 1.0, 1.0));\r\n\r\n            cube.addComponent(Transform.create());\r\n            cube.addComponent(Surface.create(CubeGeometry.create(canvas.context), material, sceneManager.assets.effect(\"effect/Basic.effect\")));\r\n\r\n            root.addChild(cube);\r\n\r\n            effect = sceneManager.assets.effect(\"effect/FXAA/FXAA.effect\");\r\n\r\n            if (effect == null) {\r\n                throw (\"The FXAA effect has not been loaded.\");\r\n            }\r\n\r\n            effect.data.set(\"textureSampler\", renderTarget);\r\n            effect.data.set(\"resolution\", new Vec2(WINDOW_WIDTH, WINDOW_HEIGHT));\r\n            effect.data.set(\"invertedDiffuseMapSize\", new Vec2(1.0 / renderTarget.width, 1. / renderTarget.height));\r\n\r\n            postProcessingScene.addComponent(renderer);\r\n            postProcessingScene.addComponent(Surface.create(QuadGeometry.create(sceneManager.assets.context), ppMaterial, effect));\r\n\r\n\r\n        var keyDown = canvas.keyboard.keyDown.connect(function(k:Keyboard) {\r\n            if (k.keyIsDown(Key.SPACE)) {\r\n                enableFXAA = !enableFXAA;\r\n\r\n                if (enableFXAA) {\r\n                    trace(\"Enable FXAA\");\r\n                    trace(\"\\n\");\r\n                }\r\n                else {\r\n                    trace(\"Disable FXAA\");\r\n                    trace(\"\\n\");\r\n                }\r\n            }\r\n        });\r\n\r\n        var resized = canvas.resized.connect(function(canvas, width, height) {\r\n            var perspectiveCamera:PerspectiveCamera = cast camera.getComponent(PerspectiveCamera);\r\n            perspectiveCamera.aspectRatio = (width / height);\r\n\r\n            renderTarget = Texture.create(sceneManager.assets.context, MathUtil.clp2(width), MathUtil.clp2(height), false, true);\r\n            renderTarget.upload();\r\n\r\n            ppMaterial.diffuseMap = (renderTarget);\r\n            effect.data.set(\"textureSampler\", renderTarget);\r\n            effect.data.set(\"resolution\", new Vec2(WINDOW_WIDTH, WINDOW_HEIGHT));\r\n            effect.data.set(\"invertedDiffuseMapSize\", new Vec2(1.0 / renderTarget.width, 1.0 / renderTarget.height));\r\n\r\n        });\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, t, dt) {\r\n            var cubeTransform:Transform = cast cube.getComponent(Transform);\r\n            cubeTransform.matrix = (cubeTransform.matrix * GLM.rotate(Quat.axisAngle(new Vec3(0.0, 1.0, 0.0), .01, new Quat()), new Mat4()));\r\n\r\n            if (enableFXAA) {\r\n                sceneManager.nextFrame(t, dt, renderTarget);\r\n                renderer.render(sceneManager.assets.context);\r\n            }\r\n            else {\r\n                sceneManager.nextFrame(t, dt);\r\n            }\r\n        });\r\n        });\r\n        sceneManager.assets.loader.load();\r\n\r\n        canvas.run();\r\n\r\n    }\r\n}\r\n","\r\npackage tutorial;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.component.AmbientLight;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.SpotLight;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.JPEGParser;\r\nimport minko.geometry.SphereGeometry;\r\nimport minko.material.PhongMaterial;\r\nimport minko.scene.Node;\r\nimport minko.WebCanvas;\r\nclass WorkingEnvironmentMaps {\r\n\r\n\r\n    private static var WINDOW_WIDTH = 800;\r\n    private static var WINDOW_HEIGHT = 600;\r\n\r\n    private static var MYTEXTURE = \"texture/diffuseMap.jpg\";\r\n    private static var ENVMAP = \"texture/envMap.jpg\";\r\n    public function new() {\r\n        var canvas = WebCanvas.create(\"Minko Tutorial - Working with the PhongMaterial\", WINDOW_WIDTH, WINDOW_HEIGHT);\r\n        var sceneManager = SceneManager.create(canvas);\r\n\r\n        sceneManager.assets.loader.options.registerParser(\"jpg\", function() return new JPEGParser());\r\n\r\n        sceneManager.assets.loader.queue(\"effect/Phong.effect\")\r\n        .queue(ENVMAP)\r\n        .queue(MYTEXTURE);\r\n\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(0x00000000))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(0.0, 1.0, 1.3), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())))\r\n        .addComponent(PerspectiveCamera.create(WINDOW_WIDTH / WINDOW_HEIGHT, Math.PI * 0.25, .1, 1000.0));\r\n\r\n        var spotLight = Node.create(\"spotLight\")\r\n        .addComponent(SpotLight.create(.6, .78, 20.0))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(3.0, 5.0, 1.5), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())));\r\n        var s1:SpotLight = cast spotLight.getComponent(SpotLight);\r\n        s1.diffuse = (0.5);\r\n\r\n        var ambientLight = Node.create(\"ambientLight\").addComponent(AmbientLight.create(.2));\r\n        var a1:AmbientLight = cast ambientLight.getComponent(AmbientLight);\r\n        a1.color = (new Vec3(1.0, 1.0, 1.0));\r\n\r\n        root.addChild(ambientLight);\r\n        root.addChild(spotLight);\r\n        root.addChild(camera);\r\n\r\n        var complete = sceneManager.assets.loader.complete.connect(function(loader) {\r\n            var phongMaterial = PhongMaterial.create();\r\n\r\n            phongMaterial.diffuseMap = (sceneManager.assets.texture(MYTEXTURE));\r\n            phongMaterial.environmentMap=(sceneManager.assets.texture(ENVMAP));\r\n            phongMaterial.environmentAlpha=(.5);\r\n\r\n            var sphereGeom:SphereGeometry = SphereGeometry.create(sceneManager.canvas.context, 20);\r\n            sphereGeom.computeTangentSpace(true);\r\n\r\n\r\n            var mesh = Node.create(\"mesh\")\r\n            .addComponent(Transform.createbyMatrix4(GLM.scale(new Vec3(1.1, 1.1, 1.1), new Mat4())))\r\n            .addComponent(Surface.create(sphereGeom, phongMaterial, sceneManager.assets.effect(\"effect/Phong.effect\")));\r\n\r\n            root.addChild(mesh);\r\n        });\r\n\r\n        sceneManager.assets.loader.load();\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, t, dt) {\r\n            sceneManager.nextFrame(t, dt);\r\n        });\r\n\r\n        canvas.run();\r\n\r\n    }\r\n\r\n}\r\n","\r\n\r\npackage tutorial;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.component.AmbientLight;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.SpotLight;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.JPEGParser;\r\nimport minko.geometry.SphereGeometry;\r\nimport minko.material.PhongMaterial;\r\nimport minko.scene.Node;\r\nimport minko.WebCanvas;\r\nclass WorkingNormalMaps {\r\n\r\n\r\n    private static var WINDOW_WIDTH = 800;\r\n    private static var WINDOW_HEIGHT = 600;\r\n\r\n    private static var MYTEXTURE = \"texture/diffuseMap.jpg\";\r\n    private static var NORMALMAP = \"texture/normalMap.jpg\";\r\n    public function new() {\r\n        var canvas = WebCanvas.create(\"Minko Tutorial - Working with the PhongMaterial\", WINDOW_WIDTH, WINDOW_HEIGHT);\r\n        var sceneManager = SceneManager.create(canvas);\r\n\r\n        sceneManager.assets.loader.options.registerParser(\"jpg\", function() return new JPEGParser());\r\n\r\n        sceneManager.assets.loader.queue(\"effect/Phong.effect\")\r\n        .queue(NORMALMAP)\r\n        .queue(MYTEXTURE);\r\n\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(0x00000000))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(0.0, 1.0, 1.3), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())))\r\n        .addComponent(PerspectiveCamera.create(WINDOW_WIDTH / WINDOW_HEIGHT, Math.PI * 0.25, .1, 1000.0));\r\n\r\n        var spotLight = Node.create(\"spotLight\")\r\n        .addComponent(SpotLight.create(.6, .78, 20.0))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(3.0, 5.0, 1.5), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())));\r\n        var s1:SpotLight = cast spotLight.getComponent(SpotLight);\r\n        s1.diffuse = (0.5);\r\n\r\n        var ambientLight = Node.create(\"ambientLight\").addComponent(AmbientLight.create(.2));\r\n        var a1:AmbientLight = cast ambientLight.getComponent(AmbientLight);\r\n        a1.color = (new Vec3(1.0, 1.0, 1.0));\r\n\r\n        root.addChild(ambientLight);\r\n        root.addChild(spotLight);\r\n        root.addChild(camera);\r\n\r\n        var complete = sceneManager.assets.loader.complete.connect(function(loader) {\r\n            var phongMaterial = PhongMaterial.create();\r\n\r\n            phongMaterial.diffuseMap = (sceneManager.assets.texture(MYTEXTURE));\r\n            phongMaterial.specularColor = (new Vec4(.4, .8, 1.0, 1.0));\r\n            phongMaterial.shininess = (2.0);\r\n            phongMaterial.normalMap=(sceneManager.assets.texture(NORMALMAP));\r\n\r\n            var sphereGeom:SphereGeometry = SphereGeometry.create(sceneManager.canvas.context, 20);\r\n            sphereGeom.computeTangentSpace(true);\r\n\r\n\r\n            var mesh = Node.create(\"mesh\")\r\n            .addComponent(Transform.createbyMatrix4(GLM.scale(new Vec3(1.1, 1.1, 1.1), new Mat4())))\r\n            .addComponent(Surface.create(sphereGeom, phongMaterial, sceneManager.assets.effect(\"effect/Phong.effect\")));\r\n\r\n            root.addChild(mesh);\r\n        });\r\n\r\n        sceneManager.assets.loader.load();\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, t, dt) {\r\n            sceneManager.nextFrame(t, dt);\r\n        });\r\n\r\n        canvas.run();\r\n\r\n    }\r\n\r\n}\r\n","package tutorial;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Quat;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.PointLight;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.geometry.QuadGeometry;\r\nimport minko.material.BasicMaterial;\r\nimport minko.scene.Node;\r\nimport minko.WebCanvas;\r\nclass WorkingPointlights {\r\n    public function new() {\r\n        init();\r\n    }\r\n    private static var WINDOW_WIDTH = 800;\r\n    private static var WINDOW_HEIGHT = 600;\r\n\r\n    function init() {\r\n        var canvas = WebCanvas.create(\"Minko Tutorial - Working with point lights\", WINDOW_WIDTH, WINDOW_HEIGHT);\r\n\r\n        var sceneManager = SceneManager.create(canvas);\r\n\r\n\r\n        sceneManager.assets.loader.queue(\"effect/Phong.effect\");\r\n\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(0x7f7f7fff))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(0.0, 1.5, 2.3), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())))\r\n        .addComponent(PerspectiveCamera.create(WINDOW_WIDTH / WINDOW_HEIGHT, Math.PI * 0.25, .1, 1000.0));\r\n\r\n\r\n        root.addChild(camera);\r\n\r\n        var ground = Node.create(\"ground\");\r\n        var leftWall = Node.create(\"leftWall\");\r\n        var rightWall = Node.create(\"rightWall\");\r\n        var backWall = Node.create(\"backWall\");\r\n        var pointLight = Node.create(\"pointLight\");\r\n\r\n        var complete = sceneManager.assets.loader.complete.connect(function(loader) {\r\n            var groundBasicMaterial:BasicMaterial = BasicMaterial.create();\r\n            groundBasicMaterial.diffuseColor = (new Vec4(1.0, .5, .5, 1.0));\r\n            ground.addComponent(Surface.create(QuadGeometry.create(sceneManager.assets.context), groundBasicMaterial, sceneManager.assets.effect(\"effect/Phong.effect\")))\r\n            .addComponent(Transform.createbyMatrix4(\r\n                GLM.scale(new Vec3(4.0, 4.0, 4.0), new Mat4()) * GLM.rotate(Quat.axisAngle(new Vec3(1.0, 0.0, 0.0), (-Math.PI / 2), new Quat()), new Mat4())\r\n            ));\r\n\r\n            var leftWallBasicMaterial:BasicMaterial = BasicMaterial.create();\r\n            leftWallBasicMaterial.diffuseColor = (new Vec4(.5, .5, .5, 1.0));\r\n\r\n            leftWall.addComponent(Surface.create(QuadGeometry.create(sceneManager.assets.context), leftWallBasicMaterial, sceneManager.assets.effect(\"effect/Phong.effect\")))\r\n            .addComponent(Transform.createbyMatrix4(GLM.translate(new Vec3(-1.0, 0.0, 0.0), new Mat4()) *\r\n            GLM.scale(new Vec3(4.0, 4.0, 4.0), new Mat4()) *\r\n            GLM.rotate(Quat.axisAngle(new Vec3(0.0, 1.0, 0.0), (Math.PI / 2), new Quat()), new Mat4())\r\n            ));\r\n            var rightWallBasicMaterial:BasicMaterial = BasicMaterial.create();\r\n            rightWallBasicMaterial.diffuseColor = (new Vec4(.5, .5, .5, 1.0));\r\n            rightWall.addComponent(Surface.create(QuadGeometry.create(sceneManager.assets.context), rightWallBasicMaterial, sceneManager.assets.effect(\"effect/Phong.effect\")))\r\n            .addComponent(Transform.createbyMatrix4(GLM.translate(new Vec3(1.0, 0.0, 0.0), new Mat4()) *\r\n            GLM.scale(new Vec3(4.0, 4.0, 4.0), new Mat4()) *\r\n            GLM.rotate(Quat.axisAngle(new Vec3(0.0, 1.0, 0.0), (-Math.PI / 2), new Quat()), new Mat4())\r\n            ));\r\n            var backWallBasicMaterial:BasicMaterial = BasicMaterial.create();\r\n            backWallBasicMaterial.diffuseColor = (new Vec4(.5, .5, .5, 1.0));\r\n            backWall.addComponent(Surface.create(QuadGeometry.create(sceneManager.assets.context), backWallBasicMaterial, sceneManager.assets.effect(\"effect/Phong.effect\")))\r\n            .addComponent(Transform.createbyMatrix4(GLM.translate(new Vec3(0.0, 0.0, -1.0), new Mat4()) * GLM.scale(new Vec3(4.0, 4.0, 4.0), new Mat4())));\r\n\r\n            pointLight.addComponent(Transform.createbyMatrix4(GLM.translate(new Vec3(-.5, 0.3, 0.0), new Mat4())));\r\n            var pointLightPointLight:PointLight = PointLight.create();\r\n            pointLightPointLight.diffuse = (0.8);\r\n            pointLightPointLight.color = (new Vec3(0.5, 0.5, 1.0));\r\n            pointLight.addComponent(pointLightPointLight);\r\n\r\n            root.addChild(ground);\r\n            root.addChild(leftWall);\r\n            root.addChild(rightWall);\r\n            root.addChild(backWall);\r\n\r\n            root.addChild(pointLight);\r\n        });\r\n\r\n        sceneManager.assets.loader.load();\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, t, dt) {\r\n            sceneManager.nextFrame(t, dt);\r\n        });\r\n\r\n        canvas.run();\r\n\r\n    }\r\n\r\n}\r\n","\r\npackage tutorial;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.component.AmbientLight;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.SpotLight;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.JPEGParser;\r\nimport minko.geometry.SphereGeometry;\r\nimport minko.material.PhongMaterial;\r\nimport minko.scene.Node;\r\nimport minko.WebCanvas;\r\nclass WorkingSpecularMaps {\r\n\r\n\r\n    private static var WINDOW_WIDTH = 800;\r\n    private static var WINDOW_HEIGHT = 600;\r\n\r\n    private static var MYTEXTURE = \"texture/diffuseMap.jpg\";\r\n    private static var SPECULARMAP = \"texture/specularMap.jpg\";\r\n    public function new() {\r\n        var canvas = WebCanvas.create(\"Minko Tutorial - Working with the PhongMaterial\", WINDOW_WIDTH, WINDOW_HEIGHT);\r\n        var sceneManager = SceneManager.create(canvas);\r\n\r\n        sceneManager.assets.loader.options.registerParser(\"jpg\", function() return new JPEGParser());\r\n\r\n        sceneManager.assets.loader.queue(\"effect/Phong.effect\")\r\n        .queue(SPECULARMAP)\r\n        .queue(MYTEXTURE);\r\n\r\n        var root = Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(0x00000000))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(0.0, 1.0, 1.3), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())))\r\n        .addComponent(PerspectiveCamera.create(WINDOW_WIDTH / WINDOW_HEIGHT, Math.PI * 0.25, .1, 1000.0));\r\n\r\n        var spotLight = Node.create(\"spotLight\")\r\n        .addComponent(SpotLight.create(.6, .78, 20.0))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(3.0, 5.0, 1.5), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())));\r\n        var s1:SpotLight = cast spotLight.getComponent(SpotLight);\r\n        s1.diffuse = (0.5);\r\n\r\n        var ambientLight = Node.create(\"ambientLight\").addComponent(AmbientLight.create(.2));\r\n        var a1:AmbientLight = cast ambientLight.getComponent(AmbientLight);\r\n        a1.color = (new Vec3(1.0, 1.0, 1.0));\r\n\r\n        root.addChild(ambientLight);\r\n        root.addChild(spotLight);\r\n        root.addChild(camera);\r\n\r\n        var complete = sceneManager.assets.loader.complete.connect(function(loader) {\r\n            var phongMaterial = PhongMaterial.create();\r\n\r\n            phongMaterial.diffuseMap = (sceneManager.assets.texture(MYTEXTURE));\r\n            phongMaterial.specularMap= (sceneManager.assets.texture(SPECULARMAP));\r\n            phongMaterial.shininess=(2.0);\r\n\r\n            var sphereGeom:SphereGeometry = SphereGeometry.create(sceneManager.canvas.context, 20);\r\n            sphereGeom.computeTangentSpace(true);\r\n\r\n\r\n            var mesh = Node.create(\"mesh\")\r\n            .addComponent(Transform.createbyMatrix4(GLM.scale(new Vec3(1.1, 1.1, 1.1), new Mat4())))\r\n            .addComponent(Surface.create(sphereGeom, phongMaterial, sceneManager.assets.effect(\"effect/Phong.effect\")));\r\n\r\n            root.addChild(mesh);\r\n        });\r\n\r\n        sceneManager.assets.loader.load();\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, t, dt) {\r\n            sceneManager.nextFrame(t, dt);\r\n        });\r\n\r\n        canvas.run();\r\n\r\n    }\r\n\r\n}\r\n","package tutorial;\r\nimport glm.GLM;\r\nimport glm.Mat4;\r\nimport glm.Quat;\r\nimport glm.Vec3;\r\nimport glm.Vec4;\r\nimport minko.component.PerspectiveCamera;\r\nimport minko.component.Renderer;\r\nimport minko.component.SceneManager;\r\nimport minko.component.SpotLight;\r\nimport minko.component.Surface;\r\nimport minko.component.Transform;\r\nimport minko.file.Loader;\r\nimport minko.geometry.QuadGeometry;\r\nimport minko.material.BasicMaterial;\r\nimport minko.scene.Node;\r\nimport minko.WebCanvas;\r\nclass WorkingSpotlights {\r\n    public function new() {\r\n        init();\r\n    }\r\n\r\n    private static var WINDOW_WIDTH = 800;\r\n    private static var WINDOW_HEIGHT = 600;\r\n\r\n    function init() {\r\n        var canvas = WebCanvas.create(\"Minko Tutorial - Working with spot lights\", WINDOW_WIDTH, WINDOW_HEIGHT);\r\n\r\n        var sceneManager = SceneManager.create(canvas);\r\n\r\n        sceneManager.assets.loader.queue(\"effect/Phong.effect\");\r\n\r\n        var root:Node= Node.create(\"root\").addComponent(sceneManager);\r\n\r\n        var camera = Node.create(\"camera\")\r\n        .addComponent(Renderer.create(0x7f7f7fff))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(0.0, 3.0, -5.0), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())))\r\n        .addComponent(PerspectiveCamera.create(WINDOW_WIDTH / WINDOW_HEIGHT, Math.PI * 0.25, .1, 1000.0));\r\n\r\n        root.addChild(camera);\r\n\r\n        var ground = Node.create(\"ground\");\r\n\r\n        var spotLight = Node.create(\"spotLight\")\r\n        .addComponent(SpotLight.create(.15, .4))\r\n        .addComponent(Transform.createbyMatrix4(Mat4.invert(GLM.lookAt(new Vec3(.1, 2.0, 0.0), new Vec3(), new Vec3(0.0, 1.0, 0.0), new Mat4()), new Mat4())));\r\n\r\n        var spotLightSpotLight:SpotLight =cast spotLight.getComponent(SpotLight);\r\n        spotLightSpotLight.diffuse = (0.5);\r\n\r\n        root.addChild(spotLight);\r\n\r\n        var complete = sceneManager.assets.loader.complete.connect(function(loader:Loader) {\r\n            var basicMaterial:BasicMaterial = BasicMaterial.create();\r\n            basicMaterial.diffuseColor = (new Vec4(1.0, .7, .7, 1.0));\r\n            ground.addComponent(Surface.create(QuadGeometry.create(sceneManager.assets.context), basicMaterial, sceneManager.assets.effect(\"effect/Phong.effect\")))\r\n            .addComponent(Transform.createbyMatrix4(GLM.scale(new Vec3(4.0, 4.0, 4.0), new Mat4()) * GLM.rotate(Quat.axisAngle(new Vec3(1.0, 0.0, 0.0), (-Math.PI / 2), new Quat()), new Mat4())));\r\n\r\n            root.addChild(ground);\r\n        });\r\n\r\n        sceneManager.assets.loader.load();\r\n\r\n        var enterFrame = canvas.enterFrame.connect(function(canvas, t, dt) {\r\n            sceneManager.nextFrame(t, dt);\r\n        });\r\n\r\n        canvas.run();\r\n\r\n    }\r\n\r\n}\r\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi extern class String {\n\tvar length(default,null) : Int;\n\n\t@:pure function new(string:String) : Void;\n\t@:pure function toUpperCase() : String;\n\t@:pure function toLowerCase() : String;\n\t@:pure function charAt( index : Int) : String;\n\t@:pure function indexOf( str : String, ?startIndex : Int ) : Int;\n\t@:pure function lastIndexOf( str : String, ?startIndex : Int ) : Int;\n\t@:pure function split( delimiter : String ) : Array<String>;\n\t@:pure function toString() : String;\n\t@:pure function substring( startIndex : Int, ?endIndex : Int ) : String;\n\n\t@:pure inline function charCodeAt( index : Int) : Null<Int> {\n\t\treturn @:privateAccess HxOverrides.cca(this, index);\n\t}\n\n\t@:pure inline function substr( pos : Int, ?len : Int ) : String {\n\t\treturn @:privateAccess HxOverrides.substr(this, pos, len);\n\t}\n\n\t@:pure static inline function fromCharCode( code : Int ) : String {\n\t\treturn untyped __define_feature__('String.fromCharCode', js.Syntax.code(\"String.fromCodePoint({0})\", code));\n\t}\n\t\n\tstatic function __init__() : Void {\n\t\tuntyped __feature__('String.fromCharCode', js.Syntax.code(\"if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }\"));\n\t}\n\t\n}\n","package assimp;\r\nclass Types {\r\n/**\r\n * Created by elect on 16/11/2016.\r\n */\r\n\r\n/** Maximum dimension for strings, ASSIMP strings are zero terminated. */\r\n    public static var MAXLEN = 1024;\r\n}\r\n\r\n\r\n/** Standard return type for some library functions.\r\n *  Rarely used, and if, mostly in the C API.\r\n */\r\n@:enum abstract AiReturn(Int) from Int to Int {\r\n    /** Indicates that a function was successful */\r\n    var SUCCESS = (0x0);\r\n    /** Indicates that a function failed */\r\n    var FAILURE = (-0x1);\r\n    /** Indicates that not enough memory was available to perform the requested operation */\r\n    var OUTOFMEMORY = (-0x3);\r\n}\r\n\r\nclass AiMemoryInfo {\r\n    /** Storage allocated for texture data */\r\n    static var textures = 0;\r\n    /** Storage allocated for material data  */\r\n    static var materials = 0;\r\n    /** Storage allocated for mesh data */\r\n    static var meshes = 0;\r\n    /** Storage allocated for node data */\r\n    static var nodes = 0;\r\n    /** Storage allocated for animation data */\r\n    static var animations = 0;\r\n    /** Storage allocated for camera data */\r\n    static var cameras = 0;\r\n    /** Storage allocated for light data */\r\n    static var lights = 0;\r\n    /** Total storage allocated for the full import. */\r\n    static var total = 0;\r\n}\r\n","package minko.render;\r\n@:expose(\"minko.render.Priority\")\r\n@:enum abstract Priority(Float) from Float to Float {\r\n    static public var FIRST = 4000.0;\r\n    static public var BACKGROUND = 3000.0;\r\n    static public var OPAQUE = 2000.0;\r\n    static public var TRANSPARENT = 1000.0;\r\n    static public var LAST = 0.0;\r\n\r\n\r\n}\r\n"],
"names":[],
"mappings":"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yDrB0C,EAOqD,YzDe/F;AyDtB0C,EAOqD,YzDgB/F;AyDvB0C,EAOqD,YzDa9E;AyDpByB,EAOqD,YzDc9E;AyDrByB,EAOqD,YzDe9E;AyDtByB,EAOqD,YzDgB9E;AyDvByB,EAOqD,YzDa7D;AyDpBQ,EAOqD,YzDc7D;AyDrBQ,EAOqD,YzDe7D;AyDtBQ,EAOqD,YzDgB7D;AyDvBQ,EAOqD,YzDa5C;AyDpBT,EAOqD,YzDc5C;AyDrBT,EAOqD,YzDe5C;AyDtBT,EAOqD,YzDgB5C;AyDvBT,EAOmB,YAAkC;AAPrD,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOmB;AAPnB,EAOpB,QAAuC;AAPnB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAPoB,EAOpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GzDmbpC,KyDnboC;AAAA,GzDobpC,KyDpboC;AAAA;AAAA,GzDubpC,KyDvboC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA2BrD;AA3BqD,GA0BvD,QACE;AA3BqD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I3D6WJ,K2D7WI;AAAA,I3D8WJ,K2D9WI;AAAA;AAAA,I3DiXJ,K2DjXI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I3DkXJ,K2DlXI;AAAA;AAAA,I3DqXJ,K2DrXI;AAAA,I3DsXJ,K2DtXI;AAAA;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1BuD,GA0BvD;AA1Bu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R6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G7DgbA,M6DhbA;AAAA,G7DibA,M6DjboE;AAApE,qBAAoE,GAApE;AAAA,G7DobA,M6DpbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,G7DqbA,M6DrbA;AAAA;AAAA,G7DwbA,M6DxbA;AAAA,G7DybA,M6DzboE;AAApE;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E;AAR6E,EAQ7E,AAAJ,IAAI;AAR6E,EASnE;AATmE,EASnE,WAAS;AAT0D,EASnE,WAAe;AAToD,EASnE,WAAqB;AAT8C,EAS7E,aAAU;AATmE,EASxB;AATwB,EASxB,a7DSvC;A6DlB+D,EASxB,a7DUvC;A6DnB+D,EASxB,a7DWvC;A6DpB+D,EASxB,a7DYvC;A6DrB+D,EASxB,a7DStB;A6DlB8C,EASxB,a7DUtB;A6DnB8C,EASxB,a7DWtB;A6DpB8C,EASxB,a7DYtB;A6DrB8C,EASxB,a7DSL;A6DlB6B,EASxB,a7DUL;A6DnB6B,EASxB,a7DWL;A6DpB6B,EASxB,a7DYL;A6DrB6B,EASxB,a7DSY;A6DlBY,EASxB,a7DUY;A6DnBY,EASxB,a7DWY;A6DpBY,EASxB,a7DYY;A6DrBY,EAStC,aAAc;AATwB,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAStC;AATsC,EAS7E,aAAuC;AATsC,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G7D+aA,M6D/aA;AAAA,G7DgbA,M6DhboE;AAApE,sBAAoE,GAApE;AAAA,G7DmbA,M6DnbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,gBAAoE;AAApE,G7DobA,M6DpbA;AAAA;AAAA,G7DubA,M6DvbA;AAAA,G7DwbA,M6DxboE;AAApE;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E;AAT6E,EAS7E,AAAJ,IAAI;AAT6E,EAUhD;AAVgD,EAUhD,WAAS;AAVuC,EAUhD,WAAc;AAVkC,EAUhD,WAAmB;AAV6B,EAU/D,WAAe;AAVgD,EAU/D,aAAwC;AAVuB,EAUZ;AAVY,EAUZ,W5CwDpC;A4ClEgD,EAUZ,W5CwDvB;A4ClEmC,EAUZ,W5CwDV;A4ClEsB,EAUZ,W5CwDG;A4ClES,EAU/D,aAAmD;AAVY,EAU/D,A5C2KlB,U4C3KkB;AAV+D,EAU/D;AAV+D,EAU/D;AAV+D,EAU/D;AAV+D,EAU/D;AAV+D,EAU/D;AAV+D,EAUjF,kBAAkB;AAV+D,EAWrD;AAXqD,EAWrD,a7DOV;A6DlB+D,EAWrD,a7DQV;A6DnB+D,EAWrD,a7DSV;A6DpB+D,EAWrD,a7DUV;A6DrB+D,EAWrD,a7DOO;A6DlB8C,EAWrD,a7DQO;A6DnB8C,EAWrD,a7DSO;A6DpB8C,EAWrD,a7DUO;A6DrB8C,EAWrD,a7DOwB;A6DlB6B,EAWrD,a7DQwB;A6DnB6B,EAWrD,a7DSwB;A6DpB6B,EAWrD,a7DUwB;A6DrB6B,EAWrD,a7DOyC;A6DlBY,EAWrD,a7DQyC;A6DnBY,EAWrD,a7DSyC;A6DpBY,EAWrD,a7DUyC;A6DrBY,EAW7E,aAAwB;AAXqD,EAW7E,UAAW,gBAAX,AAAW;AAXkE,EAW7E,UAAW,gBAAX,AAAW;AAXkE,EAW7E,UAAW,gBAAX,AAAW;AAXkE,EAW7E,UAAW,gBAAX;AAX6E,EAW7E,UAAW,gBAAX;AAX6E,EAW7E,UAAW,gBAAX;AAX6E,EAW7E,UAAW,gBAAX;AAX6E,EAW7E,UAAW,gBAAX;AAX6E,EAW7E,UAAW,gBAAX;AAX6E,EAW7E,UAAW,gBAAX;AAX6E,EAW7E,UAAW,gBAAX;AAX6E,EAW7E,UAAW,gBAAX;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G7D6aA,M6D7aA;AAAA,G7D8aA,M6D9asC;AAAtC,sBAAsC,GAAtC;AAAA,G7DibA,M6DjbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,gBAAsC;AAAtC,G7DkbA,M6DlbA;AAAA;AAAA,G7DqbA,M6DrbA;AAAA,G7DsbA,M6DtbsC;AAAtC;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E;AAX6E,EAW7E,AAAJ,IAAI;AAX6E,EAYjF,oBAAkC;AAZ+C,EAanD,SAAS,YAAY,CAAC,MAAM,WAAW;AAbY,EAanD;AAbmD,EAanD;AAbmD,EAanD,WAA4C;AAbO,EAanD,WAAiD;AAbE,EAanD,WAAsD;AAbH,EAajF,+BAA8B;AAbmD,EAcjF,kCAAgC,AAAC;AAdgD,EAejF,OAAO,uCACO,0CAA0B,iBAC1B,+BAAe,KAAM,cAAe;AAjB+B;QAoBrE;AAAA,EACZ,aAAa,uBAAiB;AADlB,EAAhB;AAAgB,EAEZ,mBAAmB,oCAAoB;AAF3B,EAGZ,aAAa;AAHD,EAIZ,4CAAkC;AAJtB,EAKZ,wCAAgC;AALpB,EAMZ,yCAAiC;AANrB,EAOZ,oCAA8B,MAAO,WAAU;AAAA,UAAO;AAAP;AAPnC,EASZ,aAAa,4CACN,6BACA;AAXK,EAaZ,WAAW,wBAAY,qBAAqB;AAbhC,EAeC,qCAAY,uBACX,gCAAgB;AAhBlB,EAiBmD;AAjBnD,EAiBmD,U9CwC9B;A8CzDrB,EAiBmD,U9CwCjB;A8CzDlC,EAiBmD,U9CwCJ;A8CzD/C,EAiB+D;AAjB/D,EAiB+D,UAAS;AAjBxE,EAiB+D,UAAY;AAjB3E,EAiB+D,UAAe;AAjB9E,EAiBkF;AAjBlF,EAiBkF,UAAS;AAjB3F,EAiBkF,UAAY;AAjB9F,EAiBkF,UAAe;AAjBjG,EAiBoH;AAjBpH,EAiBoH,Y7DnB9G;A6DEN,EAiBoH,Y7DlB9G;A6DCN,EAiBoH,Y7DjB9G;A6DAN,EAiBoH,Y7DhB9G;A6DDN,EAiBoH,Y7DnB7F;A6DEvB,EAiBoH,Y7DlB7F;A6DCvB,EAiBoH,Y7DjB7F;A6DAvB,EAiBoH,Y7DhB7F;A6DDvB,EAiBoH,Y7DnB5E;A6DExC,EAiBoH,Y7DlB5E;A6DCxC,EAiBoH,Y7DjB5E;A6DAxC,EAiBoH,Y7DhB5E;A6DDxC,EAiBoH,Y7DnB3D;A6DEzD,EAiBoH,Y7DlB3D;A6DCzD,EAiBoH,Y7DjB3D;A6DAzD,EAiBoH,Y7DhB3D;A6DDzD,EAiBsG,WAAc;AAjBpH,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiBsG;AAjBtG,EAiB4B,UAAY,eAAW,MAAY,MAAmB,MAAoB;AAjBtG,EAiBiJ;AAjBjJ,EAiBiJ,Y7DnB3I;A6DEN,EAiBiJ,Y7DlB3I;A6DCN,EAiBiJ,Y7DjB3I;A6DAN,EAiBiJ,Y7DhB3I;A6DDN,EAiBiJ,Y7DnB1H;A6DEvB,EAiBiJ,Y7DlB1H;A6DCvB,EAiBiJ,Y7DjB1H;A6DAvB,EAiBiJ,Y7DhB1H;A6DDvB,EAiBiJ,Y7DnBzG;A6DExC,EAiBiJ,Y7DlBzG;A6DCxC,EAiBiJ,Y7DjBzG;A6DAxC,EAiBiJ,Y7DhBzG;A6DDxC,EAiBiJ,Y7DnBxF;A6DEzD,EAiBiJ,Y7DlBxF;A6DCzD,EAiBiJ,Y7DjBxF;A6DAzD,EAiBiJ,Y7DhBxF;A6DDzD,EAiBmI,YAAc;AAjBjJ,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiBmI;AAjBnI,EAiB4B,YAAuG;AAjBnI,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAAA;AAAA;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAiB4B;AAjB5B,EAeZ,cAAa,oBAEC,0CAA0B,qBAC1B,yCAAyB;AAlB3B,EAoBF,kCAAY;AApBV,EAqBsC;AArBtC,EAqBsC,UAAS;AArB/C,EAqBsC,UAAgB;AArBtD,EAqBsC,UAAuB;AArB7D,EAqB4B,aAAU;AArBtC,EAqBqE;AArBrE,EAqBqE,Y7DvB/D;A6DEN,EAqBqE,Y7DtB/D;A6DCN,EAqBqE,Y7DrB/D;A6DAN,EAqBqE,Y7DpB/D;A6DDN,EAqBqE,Y7DvB9C;A6DEvB,EAqBqE,Y7DtB9C;A6DCvB,EAqBqE,Y7DrB9C;A6DAvB,EAqBqE,Y7DpB9C;A6DDvB,EAqBqE,Y7DvB7B;A6DExC,EAqBqE,Y7DtB7B;A6DCxC,EAqBqE,Y7DrB7B;A6DAxC,EAqBqE,Y7DpB7B;A6DDxC,EAqBqE,Y7DvBZ;A6DEzD,EAqBqE,Y7DtBZ;A6DCzD,EAqBqE,Y7DrBZ;A6DAzD,EAqBqE,Y7DpBZ;A6DDzD,EAqB4B,YAAyC;AArBrE,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqBiG;AArBjG,EAqBiG,Y7DvB3F;A6DEN,EAqBiG,Y7DtB3F;A6DCN,EAqBiG,Y7DrB3F;A6DAN,EAqBiG,Y7DpB3F;A6DDN,EAqBiG,Y7DvB1E;A6DEvB,EAqBiG,Y7DtB1E;A6DCvB,EAqBiG,Y7DrB1E;A6DAvB,EAqBiG,Y7DpB1E;A6DDvB,EAqBiG,Y7DvBzD;A6DExC,EAqBiG,Y7DtBzD;A6DCxC,EAqBiG,Y7DrBzD;A6DAxC,EAqBiG,Y7DpBzD;A6DDxC,EAqBiG,Y7DvBxC;A6DEzD,EAqBiG,Y7DtBxC;A6DCzD,EAqBiG,Y7DrBxC;A6DAzD,EAqBiG,Y7DpBxC;A6DDzD,EAqBmF,YAAc;AArBjG,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqBmF;AArBnF,EAqB4B,QAAuD;AArBnF,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G7D+YpC,K6D/YoC;AAAA,G7DgZpC,K6DhZoC;AAAA;AAAA,G7DmZpC,K6DnZoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G7DoZpC,K6DpZoC;AAAA;AAAA,G7DuZpC,K6DvZoC;AAAA,G7DwZpC,K6DxZoC;AAAA;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAqB4B;AArB5B,EAoBZ,WAAU,iBACI,0CAA0B;AArB5B,EAuBb,cAAc,wBAAY,wBAAwB;AAvBrC,EAwBZ,QAAQ,8DAA4C,kBAAwB;AAAA,GACxE,aAAa;AAD2D,GAGvD,wCAAe,qCAAsB,qBAAgB,GAAI,IAAK,gDAC3E,wBACyB,eAAe,wCACpC,cAAc;AANkD,GAGxE,kBAAiB;AAHuD,GAQpF,eAAM,kBAAN,oIAAwB;AAR4D,GAUxE,YAAY,OAAO,UAAU;AAV2C,GAWxE,aAAa,MAAM,UAAU;AAX2C,GAazE,eAAe,mCAAoB;AAbsC,GAcxE,SAAc;AAd0D,GAcxE,UAAkB;AAdsD,GAcxE,WAAkB,KAAlB;AAAA;AAAA,IAC8E,uBAAc;AAD5F,IACqB,wCAAwB,MAAO,QAAQ,OAAQ,SAAU;AAD9E,IACI,iBAAiB;AADrB;AAdwE,GAkBxE,cAAc,kBACJ,eACA;AApB8D;AAxBhE,EA+CZ,cAAc,6BAAuB,sBAAuB;AAAA,GACxD,wBAA0C,AAAK,qBAAoB;AADX,GAExD,kCAAgC,AAAC,IAAI;AAFmB;AA/ChD,EAoDZ,UAAU;AApDE,EAqDZ,YAAY,UAAU;AArDV,EAsDZ,eAAe;AAtDH,EAuDZ,eAAe,UAAU;AAvDb,EAwDC;AAxDD,EAwDC,WAAS;AAxDV,EAwDC,WAAc;AAxDf,EAwDC,WAAmB;AAxDpB,EAwDZ,aAAa;AAxDD,EAyDZ,eAAe;AAzDH,EA0DZ,aAAW;AA1DC,EA2DZ,kBAAgB;AA3DJ,EA4DZ,iBAAiB,oBAAoB,iBACjC;AAAA,eAAY,IAAI;AAAhB;AA7DQ,EA+DZ,gBAA6C;AA/DjC,EAgEZ,2BAA2B;AAhEf,EAiEZ,2BAA2B;AAjEf,EAmEZ,gBAAgB,gDAAoC,aAEhD;AAAA,eAAY,sCAA0B,kCAAoC;AAAA,IAEtE,uBAAuB,KAAK;AAF0C,IAGtE,uBAAuB,KAAK;AAH0C;AAA1E;AArEQ,EA2EZ,cAAc,8CAAkC,aAAkB;AAAA,GAC9D;AAD8D,GAE9D,YAAY;AAFkD;AA3EtD,EA+EmB;AA/EnB,EA+EmB,WAAS;AA/E5B,EA+EmB,WAAW;AA/E9B,EA+EmB,WAAa;AA/EhC,EA+EI,WAAe;AA/EnB,EA+EI,YAA+B;AA/EnC,EA+EwC;AA/ExC,EA+EwC,W5CjCnB;A4C9CrB,EA+EwC,W5CjCN;A4C9ClC,EA+EwC,W5CjCO;A4C9C/C,EA+EwC,W5CjCoB;A4C9C5D,EA+EI,YAAoC;AA/ExC,EA+EI,A5CkFhB,S4ClFgB;AA/EJ,EA+EI;AA/EJ,EA+EI;AA/EJ,EA+EI;AA/EJ,EA+EI;AA/EJ,EA+EI;AA/EJ,EA+EZ,kBAAgB;AA/EJ,EAgFwB;AAhFxB,EAgFwB,WAAS;AAhFjC,EAgFwB,WAAW;AAhFnC,EAgFwB,WAAa;AAhFrC,EAgFS,YAAe;AAhFxB,EAgFS,aAA+B;AAhFxC,EAgF8C;AAhF9C,EAgF8C,W5ClCzB;A4C9CrB,EAgF8C,W5ClCZ;A4C9ClC,EAgF8C,W5ClCC;A4C9C/C,EAgF8C,W5ClCc;A4C9C5D,EAgFS,YAAqC;AAhF9C,EAgFS,A5CiFrB,U4CjFqB;AAhFT,EAgFS;AAhFT,EAgFS;AAhFT,EAgFS;AAhFT,EAgFS;AAhFT,EAgFS;AAhFT,EAgFZ,sBAAqB;AAhFT,EAiFZ,iBAAiB,gCAA0B,iCAAkC;AAAA,GACzE,OAAO;AADkE,GAEzE,wBAAwB;AAFiD,GAIzE,SAAS;AAJgE,GAKzE,wBAAwB;AALiD,GAOzE,EAAI,SAAQ,UACR;AAAA,YAAQ;AAAR,UAEC,EAAI,SAAQ,UACb;AAAA,YAAQ;AAAR;AAXqE,GAazE,EAAI,aAAY,KACZ;AAAA,eAAW;AAAX;AAdqE,GAgBzE,sBAAgC,AAAK,qBAAoB;AAhBgB,GAmBrE,QAAS,WAAW,WAAW,SAAS,OAAO,SAAS;AAnBa,GAmBrE,QACA,WAAW,WAAW,SAAS;AApBsC,GAmBrE,QAEA,WAAW,WAAW,SAAS,OAAO,SAAS;AArBsB,GAmBrE;AAnBqE,GAmBrE;AAnBqE,GAmBrE;AAnBqE,GAmBrE;AAnBqE,GAwBrE;AAxBqE,GAwBrE,WAAS;AAxB4D,GAwBrE,WAAc;AAxBuD,GAwBrE,WAAmB;AAxBkD,GAyBrE;AAzBqE,GAyBrE,a7D5GU;A6DmF2D,GAyBrE,a7D3GU;A6DkF2D,GAyBrE,a7D1GU;A6DiF2D,GAyBrE,a7DzGU;A6DgF2D,GAyBrE,a7D5G2B;A6DmF0C,GAyBrE,a7D3G2B;A6DkF0C,GAyBrE,a7D1G2B;A6DiF0C,GAyBrE,a7DzG2B;A6DgF0C,GAyBrE,a7D5G4C;A6DmFyB,GAyBrE,a7D3G4C;A6DkFyB,GAyBrE,a7D1G4C;A6DiFyB,GAyBrE,a7DzG4C;A6DgFyB,GAyBrE,a7D5G6D;A6DmFQ,GAyBrE,a7D3G6D;A6DkFQ,GAyBrE,a7D1G6D;A6DiFQ,GAyBrE,a7DzG6D;A6DgFQ,GAkBhE,WAAY,eACjB,OAIA,OACA,OACA;AAzBqE,GA0BzE;AA1ByE,GA0BzE,a7D7Gc;A6DmF2D,GA0BzE,a7D5Gc;A6DkF2D,GA0BzE,a7D3Gc;A6DiF2D,GA0BzE,a7D1Gc;A6DgF2D,GA0BzE,a7D7G+B;A6DmF0C,GA0BzE,a7D5G+B;A6DkF0C,GA0BzE,a7D3G+B;A6DiF0C,GA0BzE,a7D1G+B;A6DgF0C,GA0BzE,a7D7GgD;A6DmFyB,GA0BzE,a7D5GgD;A6DkFyB,GA0BzE,a7D3GgD;A6DiFyB,GA0BzE,a7D1GgD;A6DgFyB,GA0BzE,a7D7GiE;A6DmFQ,GA0BzE,a7D5GiE;A6DkFQ,GA0BzE,a7D3GiE;A6DiFQ,GA0BzE,a7D1GiE;A6DgFQ,GAkBhE,aAQT;AA1ByE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAAA;AAAA;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBhE;AAlBgE,GAkBzE,WAAS;AAlBgE,GA2BxE,2BAAyB;AA3B+C,GA6BzE,mBAA6B,AAAK,kBAAiB;AA7BsB,GA8BzE,uBAAiC,AAAK,qBAAqB;AA9Bc,GAgCd;AAhCc,GAgCd,a7DnH7C;A6DmF2D,GAgCd,a7DlH7C;A6DkF2D,GAgCd,a7DjH7C;A6DiF2D,GAgCd,a7DhH7C;A6DgF2D,GAgCd,a7DnH5B;A6DmF0C,GAgCd,a7DlH5B;A6DkF0C,GAgCd,a7DjH5B;A6DiF0C,GAgCd,a7DhH5B;A6DgF0C,GAgCd,a7DnHX;A6DmFyB,GAgCd,a7DlHX;A6DkFyB,GAgCd,a7DjHX;A6DiFyB,GAgCd,a7DhHX;A6DgFyB,GAgCd,a7DnHM;A6DmFQ,GAgCd,a7DlHM;A6DkFQ,GAgCd,a7DjHM;A6DiFQ,GAgCd,a7DhHM;A6DgFQ,GAgC5B,aAAc;AAhCc,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgC5B;AAhC4B,GAgCpD,aAAwB;AAhC4B,GAgCpD,SAAW,gBAAX,AAAW;AAhCyC,GAgCpD,SAAW,gBAAX,AAAW;AAhCyC,GAgCpD,SAAW,gBAAX,AAAW;AAhCyC,GAgCpD,SAAW,gBAAX;AAhCoD,GAgCpD,SAAW,gBAAX;AAhCoD,GAgCpD,SAAW,gBAAX;AAhCoD,GAgCpD,SAAW,gBAAX;AAhCoD,GAgCpD,SAAW,gBAAX;AAhCoD,GAgCpD,SAAW,gBAAX;AAhCoD,GAgCpD,SAAW,gBAAX;AAhCoD,GAgCpD,SAAW,gBAAX;AAhCoD,GAgCpD,SAAW,gBAAX;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD,SAAmD;AAhCC,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7DmTrB,M6DnTqB;AAAA,I7DoTrB,M6DpTqB;AAAA;AAAA,I7DuTrB,M6DvTqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7DwTrB,M6DxTqB;AAAA;AAAA,I7D2TrB,M6D3TqB;AAAA,I7D4TrB,M6D5TqB;AAAA;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgCpD;AAhCoD,GAgC1E,wBAAsB;AAhCoD,GAiCN;AAjCM,GAiCN,a7DpHrD;A6DmF2D,GAiCN,a7DnHrD;A6DkF2D,GAiCN,a7DlHrD;A6DiF2D,GAiCN,a7DjHrD;A6DgF2D,GAiCN,a7DpHpC;A6DmF0C,GAiCN,a7DnHpC;A6DkF0C,GAiCN,a7DlHpC;A6DiF0C,GAiCN,a7DjHpC;A6DgF0C,GAiCN,a7DpHnB;A6DmFyB,GAiCN,a7DnHnB;A6DkFyB,GAiCN,a7DlHnB;A6DiFyB,GAiCN,a7DjHnB;A6DgFyB,GAiCN,a7DpHF;A6DmFQ,GAiCN,a7DnHF;A6DkFQ,GAiCN,a7DlHF;A6DiFQ,GAiCN,a7DjHF;A6DgFQ,GAiCpB,aAAc;AAjCM,G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,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I9DqZ9B,K8DrZ8B;AAAA,I9DsZ9B,K8DtZ8B;AAAA;AAAA,I9DyZ9B,K8DzZ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I9D0Z9B,K8D1Z8B;AAAA;AAAA,I9D6Z9B,K8D7Z8B;AAAA,I9D8Z9B,K8D9Z8B;AAAA;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC,SAE3B;AAtBP,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I9DqZ9B,M8DrZ8B;AAAA,I9DsZ9B,M8DtZ8B;AAAA;AAAA,I9DyZ9B,M8DzZ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I9D0Z9B,M8D1Z8B;AAAA;AAAA,I9D6Z9B,M8D7Z8B;AAAA,I9D8Z9B,M8D9Z8B;AAAA;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAsB6C;AAtB7C,GAsB6C,WAAS;AAtBtD,GAsB6C,WAAe;AAtB5D,GAsB6C,WAAqB;AAtBlE,GAsBmC,aAAU;AAtB7C,GAsByE;AAtBzE,GAsByE,a9DnBvD;A8DHlB,GAsByE,a9DlBvD;A8DJlB,GAsByE,a9DjBvD;A8DLlB,GAsByE,a9DhBvD;A8DNlB,GAsByE,a9DnBtC;A8DHnC,GAsByE,a9DlBtC;A8DJnC,GAsByE,a9DjBtC;A8DLnC,GAsByE,a9DhBtC;A8DNnC,GAsByE,a9DnBrB;A8DHpD,GAsByE,a9DlBrB;A8DJpD,GAsByE,a9DjBrB;A8DLpD,GAsByE,a9DhBrB;A8DNpD,GAsByE,a9DnBJ;A8DHrE,GAsByE,a9DlBJ;A8DJrE,GAsByE,a9DjBJ;A8DLrE,GAsByE,a9DhBJ;A8DNrE,GAsBmC,YAAsC;AAtBzE,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAsBmC;AAtBnC,GAoBkC,SAEC;AAtBnC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I9DqZ9B,M8DrZ8B;AAAA,I9DsZ9B,M8DtZ8B;AAAA;AAAA,I9DyZ9B,M8DzZ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I9D0Z9B,M8D1Z8B;AAAA;AAAA,I9D6Z9B,M8D7Z8B;AAAA,I9D8Z9B,M8D9Z8B;AAAA;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;AApBlC,GAoBkC;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B;A8DuDkC,GA2BR,a9DjF1B;A8DsDkC,GA2BR,a9DpFT;A8DyDiB,GA2BR,a9DnFT;A8DwDiB,GA2BR,a9DlFT;A8DuDiB,GA2BR,a9DjFT;A8DsDiB,GA2BR,a9DpFQ;A8DyDA,GA2BR,a9DnFQ;A8DwDA,GA2BR,a9DlFQ;A8DuDA,GA2BR,a9DjFQ;A8DsDA,GA2BrC,YAA6B;AA3BQ,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC,SAA2C;AA3BN,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I9DkV5B,M8DlV4B;AAAA,I9DmV5B,M8DnV4B;AAAA;AAAA,I9DsV5B,M8DtV4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I9DuV5B,M8DvV4B;AAAA;AAAA,I9D0V5B,M8D1V4B;AAAA,I9D2V5B,M8D3V4B;AAAA;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BrC;AA3BqC,GA2BjE,6BAA4B;AA3BqC,GA6BxB;AA7BwB,GA6BjE,aAAY,qBAAc,cAAe;AA7BwB,GAgChE,cAAc;AAhCkD,GAkCjE,cAAc;AAlCmD,GAoCjE;AApCiE,GAoCjE,WAAa,mBAAb;AAAA,IAAK,WAAL,AAAa,WAAb;AAAA;AAAA,IACG,cAAc;AADjB;AApCiE,GAuCjE,iBAAiB,gCAA0B,iCAAkC;AAAA,IAEzE,4BAAoC,AAAK,yBAAyB;AAFO,IAGjB;AAHiB,IAGjB,WAAS;AAHQ,IAGjB,WAAc;AAHG,IAGjB,WAAmB;AAHF,IAGhC,WAAe;AAHiB,IAGhC,YAAwC;AAHR,IAGc;AAHd,IAGc,W7CnD9D;A6CgDgD,IAGc,W7CnDjD;A6CgDmC,IAGc,W7CnDpC;A6CgDsB,IAGc,W7CnDvB;A6CgDS,IAGhC,YAA8C;AAHd,IAGhC,A7CgEjD,S6ChEiD;AAHgC,IAGhC;AAHgC,IAGhC;AAHgC,IAGhC;AAHgC,IAGhC;AAHgC,IAGhC;AAHgC,IAG3C,eAAW;AAHgC,IAG2B;AAH3B,IAG2B,a9DnG1F;A8DgG+D,IAG2B,a9DlG1F;A8D+F+D,IAG2B,a9DjG1F;A8D8F+D,IAG2B,a9DhG1F;A8D6F+D,IAG2B,a9DnGzE;A8DgG8C,IAG2B,a9DlGzE;A8D+F8C,IAG2B,a9DjGzE;A8D8F8C,IAG2B,a9DhGzE;A8D6F8C,IAG2B,a9DnGxD;A8DgG6B,IAG2B,a9DlGxD;A8D+F6B,IAG2B,a9DjGxD;A8D8F6B,IAG2B,a9DhGxD;A8D6F6B,IAG2B,a9DnGvC;A8DgGY,IAG2B,a9DlGvC;A8D+FY,IAG2B,a9DjGvC;A8D8FY,IAG2B,a9DhGvC;A8D6FY,IAG3C,aAAsE;AAH3B,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C,SAAoF;AAHzC,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K9DmUlC,M8DnUkC;AAAA,K9DoUlC,M8DpUkC;AAAA;AAAA,K9DuUlC,M8DvUkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K9DwUlC,M8DxUkC;AAAA;AAAA,K9D2UlC,M8D3UkC;AAAA,K9D4UlC,M8D5UkC;AAAA;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AAH2C,IAG3C;AA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/GjJxC;A+G0IiB,EAOuB,Y/GpJvB;A+G6IA,EAOuB,Y/GnJvB;A+G4IA,EAOuB,Y/GlJvB;A+G2IA,EAOuB,Y/GjJvB;A+G0IA,EAOuB,Y/GpJN;A+G6IjB,EAOuB,Y/GnJN;A+G4IjB,EAOuB,Y/GlJN;A+G2IjB,EAOuB,Y/GjJN;A+G0IjB,EAOuB,Y/GpJW;A+G6IlC,EAOuB,Y/GnJW;A+G4IlC,EAOuB,Y/GlJW;A+G2IlC,EAOuB,Y/GjJW;A+G0IlC,EAOS,YAAc;AAPvB,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOuB;AAPvB,EAOuB,Y/GpJxC;A+G6IiB,EAOuB,Y/GnJxC;A+G4IiB,EAOuB,Y/GlJxC;A+G2IiB,EAOuB,Y/GjJxC;A+G0IiB,EAOuB,Y/GpJvB;A+G6IA,EAOuB,Y/GnJvB;A+G4IA,EAOuB,Y/GlJvB;A+G2IA,EAOuB,Y/GjJvB;A+G0IA,EAOuB,Y/GpJN;A+G6IjB,EAOuB,Y/GnJN;A+G4IjB,EAOuB,Y/GlJN;A+G2IjB,EAOuB,Y/GjJN;A+G0IjB,EAOuB,Y/GpJW;A+G6IlC,EAOuB,Y/GnJW;A+G4IlC,EAOuB,Y/GlJW;A+G2IlC,EAOuB,Y/GjJW;A+G0IlC,EAOS,YAAc;AAPvB,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOS;AAPT,EAOuB;AAPvB,EAOuB,Y/GpJxC;A+G6IiB,EAOuB,Y/GnJxC;A+G4IiB,EAOuB,Y/GlJxC;A+G2IiB,EAOuB,Y/GjJxC;A+G0IiB,EAOuB,Y/GpJvB;A+G6IA,EAOuB,Y/GnJvB;A+G4IA,EAOuB,Y/GlJvB;A+G2IA,EAOuB,Y/GjJvB;A+G0IA,EAOuB,Y/GpJN;A+G6IjB,EAOu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B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EAC5B;AAD4B,EACxC,UAAY;AAD4B,EACT;AADS,EACT,Y/GpTpC;A+GmT6C,EACT,Y/GnTpC;A+GkT6C,EACT,Y/GlTpC;A+GiT6C,EACT,Y/GjTpC;A+GgT6C,EACT,Y/GpTnB;A+GmT4B,EACT,Y/GnTnB;A+GkT4B,EACT,Y/GlTnB;A+GiT4B,EACT,Y/GjTnB;A+GgT4B,EACT,Y/GpTF;A+GmTW,EACT,Y/GnTF;A+GkTW,EACT,Y/GlTF;A+GiTW,EACT,Y/GjTF;A+GgTW,EACT,Y/GpTe;A+GmTN,EACT,Y/GnTe;A+GkTN,EACT,Y/GlTe;A+GiTN,EACT,Y/GjTe;A+GgTN,EACxC,YAA+B;AADS,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AAAA;AAAA;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACxC;AADwC,EACjD,QAAS;AADwC,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AADiD,EACjD;AAD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pEtG;A0MkEiD,IAEqD,a1MnEtG;A0MiEiD,IAEqD,a1MlEtG;A0MgEiD,IAEqD,a1MjEtG;A0M+DiD,IAEqD,a1MpErF;A0MkEgC,IAEqD,a1MnErF;A0MiEgC,IAEqD,a1MlErF;A0MgEgC,IAEqD,a1MjErF;A0M+DgC,IAEqD,a1MpEpE;A0MkEe,IAEqD,a1MnEpE;A0MiEe,IAEqD,a1MlEpE;A0MgEe,IAEqD,a1MjEpE;A0M+De,IAEqD,a1MpEnD;A0MkEF,IAEqD,a1MnEnD;A0MiEF,IAEqD,a1MlEnD;A0MgEF,IAEqD,a1MjEnD;A0M+DF,IAEhB,YAAqE;AAFrD,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEhB;AAFgB,IAEvC,QAAuB;AAFgB,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAFuC,IAEvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K1MkWxB,K0MlWwB;AAAA,K1MmWxB,K0MnWwB;AAAA;AAAA,K1MsWxB,K0MtWwB;AAAA;AAAA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F;A6MNwB,GAK6D,a7MErF;A6MPwB,GAK6D,a7MDpE;A6MJO,GAK6D,a7MApE;A6MLO,GAK6D,a7MCpE;A6MNO,GAK6D,a7MEpE;A6MPO,GAKnB,YAAgF;AAL7D,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKnB;AALmB,GAKpE,QAAiD;AALmB,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7MqaJ,K6MraI;AAAA,I7MsaJ,K6MtaI;AAAA;AAAA,I7MyaJ,K6MzaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7M0aJ,K6M1aI;AAAA;AAAA,I7M6aJ,K6M7aI;AAAA,I7M8aJ,K6M9aI;AAAA;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAKpE;AALoE,GAGxE,uBACc,0CACV;AALoE,GAQxE,4BAA0C;AAR8B,GASlC;AATkC,GASlC,WAAS;AATyB,GASlC,WAAa;AATqB,GASlC,WAAiB;AATiB,GASlC,WAAqB;AATa,GASxE,uCAAsC;AATkC,GAWlD,+CAAe,mCAAoB,yCAA8B,sBAAuB,iCAA2B;AAXjE,GAWxE,sCAAsB;AAXkD,GAYlB;AAZkB,GAYlB,WAAS;AAZS,GAYlB,WAAe;AAZG,GAYlB,WAAoB;AAZF,GAYhC,kBAAc;AAZkB,GAYQ;AAZR,GAYQ,a7MRlE;A6MJ0D,GAYQ,a7MPlE;A6ML0D,GAYQ,a7MNlE;A6MN0D,GAYQ,a7MLlE;A6MP0D,GAYQ,a7MRjD;A6MJyC,GAYQ,a7MPjD;A6MLyC,GAYQ,a7MNjD;A6MNyC,GAYQ,a7MLjD;A6MPyC,GAYQ,a7MRhC;A6MJwB,GAYQ,a7MPhC;A6MLwB,GAYQ,a7MNhC;A6MNwB,GAYQ,a7MLhC;A6MPwB,GAYQ,a7MRf;A6MJO,GAYQ,a7MPf;A6MLO,GAYQ,a7MNf;A6MNO,GAYQ,a7MLf;A6MPO,GAYhC,YAAwC;AAZR,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAa9D;AAb8D,GAa9D,WAAS;AAbqD,GAa9D,WAAc;AAbgD,GAa9D,WAAmB;AAb2C,GAaxE,cAAU;AAb8D,GAarC;AAbqC,GAarC,a7MTrB;A6MJ0D,GAarC,a7MRrB;A6ML0D,GAarC,a7MPrB;A6MN0D,GAarC,a7MNrB;A6MP0D,GAarC,a7MTJ;A6MJyC,GAarC,a7MRJ;A6MLyC,GAarC,a7MPJ;A6MNyC,GAarC,a7MNJ;A6MPyC,GAarC,a7MTa;A6MJwB,GAarC,a7MRa;A6MLwB,GAarC,a7MPa;A6MNwB,GAarC,a7MNa;A6MPwB,GAarC,a7MT8B;A6MJO,GAarC,a7MR8B;A6MLO,GAarC,a7MP8B;A6MNO,GAarC,a7MN8B;A6MPO,GAaxE,YAAmC;AAbqC,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAaxE;AAbwE,GAYhC,SACxC;AAbwE,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAZgC,GAYhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7M8ZxC,M6M9ZwC;AAAA,I7M+ZxC,M6M/ZwC;AAAA;AAAA,I7MkaxC,M6MlawC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7MmaxC,M6MnawC;AAAA;AAAA,I7MsaxC,M6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oBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAoBxE;AApBwE,GAmBhC,SACxC;AApBwE,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7MuZxC,M6MvZwC;AAAA,I7MwZxC,M6MxZwC;AAAA;AAAA,I7M2ZxC,M6M3ZwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7M4ZxC,M6M5ZwC;AAAA;AAAA,I7M+ZxC,M6M/ZwC;AAAA,I7MgaxC,M6MhawC;AAAA;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,GAmBhC;AAnBgC,G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A1BzD,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BsB;AA1BtB,GA0BhC,SAAsD;AA1BtB,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7MgZxC,M6MhZwC;AAAA,I7MiZxC,M6MjZwC;AAAA;AAAA,I7MoZxC,M6MpZwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I7MqZxC,M6MrZwC;AAAA;AAAA,I7MwZxC,M6MxZwC;AAAA,I7MyZxC,M6MzZwC;AAAA;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;AA1BgC,GA0BhC;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G;A+MFc,GAIU,YAAgF;AAJ1F,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIU;AAJV,GAIvC,QAAiD;AAJV,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I/MiaxC,K+MjawC;AAAA,I/MkaxC,K+MlawC;AAAA;AAAA,I/MqaxC,K+MrawC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I/MsaxC,K+MtawC;AAAA;AAAA,I/MyaxC,K+MzawC;AAAA,I/M0axC,K+M1awC;AAAA;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAIvC;AAJuC,GAG/E,uBACc,0CAA0B;AAJuC,GAM/E,cAAc;AANiE;AA3BvE,EAoCZ;AApCY,EAsCZ,iBAAiB,gCAA0B,uBACvC;AAAA,0BAAuB,EAAG;AAA1B;AAvCQ,EA0CZ;AA1CY;;;;;;;;;ACsByB;A9MaZ,6BAA6B,AAA8D;AAC5F,kBAAkB,AAAyC;AAE3D,iBAAiB,AAAwC;AAEvD,2BAAqC,AAAoE;AAC1G,gBAA0B;AAErC;AACI;AACF;AACD;AACC;AACD;A2EzCiB,0BAAQ;AC0HtC;AYlHR,sBAAyB,AAAM,8BAAsB,UAAW,QAAM,WAAM;AAAA,QAAM,OAAQ;AAAd;AAwL5E,kBAAe,AAAM;6B3F7Ie;8BACC;+BAEE;gCAEA;+BACD;2BACJ;iCACM;gCACD;kCACE;gCACF;iCACC;iCACA;+BACF;gCACC;iCACC;gCACD;sBM/FX;8BAEQ;iCAEG;mBACd;wBACK;qDAC6B;uCACd;qDACc;;oCGwD1B;+BAQL;qDAOsB;qCAMhB;qBAMhB,mBASK,0BAEb,wBAOqB,qDAOG,0DAaH,iDAiBN,6BAEd,mBAUgB,qCAML,8CAMc,wDAOL,2CAWb,kCAcM,4BAEb,mBAMgB,wCAOF,0CAQD,qCAOH,oCAOE,wCAWC,mCAkBN,6BASC,qCAQO,uCASL;yBAOQ,uBAQF,+CAaH,gCAEb,aAQU,kCAEA,8BAGV,SAEK,wBAMoB,uDASN,6CAMJ,wCAMD,sCAMD,oCAMF,uCAMK,6CASH,4CAOI,gEAOgB,yEAOR,8CAGzB,aAES,mCASE,qCAcC,4CAQM,+CAGR,sCACA,mBACA,sBAEG,SAEd,oBAOkB,gDAOA,qDAQA,sCAUR,iDAQY,uDAWL,oDAUE,qCAElB,mBAcgB,wCACH,uCASH,8BAET,kBAQc,8DAeiB,gDAGhC,mCAOgC,oEAYP,yDAQJ,6DASS,sEASL;uBYnmBhB;sB6LPS;+BAkBL;gCAEC;6BAEH;4BAED;iCAEK;8BAEH;6BAED;4BAED;oCxLhCW;+BAKL;wCAKS;mCAKL;6CAKU;wCAKL;gDAKQ;2CAKL;0CAKD;qCAKL;uCAKE;kCAKL;2CAKS;sCAKL;yCAKG;oCAKL;4CAKQ;uCAKL;kDAKW;6CAKL;wCAKL;mCAKL;6CAKU;wCAKL;6CAKK;wCAKL;8CAKM;yCAKL;8CAKK;yCAKL;iDAKQ;4CAKL;gDAKI;2CAKL;uDAKY;kDAKL;uCAKX;sCAKD;qCAKD;uCAKE;wCAKC;6CAKK;6CAKA;2CAKF;2CAKA;wCAKH;yDAqCa;oDACL;kDACF;0DACQ;0DACA;sDACJ;yDACG;+EACsB;6EACF;8EACC;kDAC5B;oDACE;8DACU;gFACkB;8CAClC;0EAG4B;wEACF;yEACC;6CAC5B;+CACE;yDACU;2EACkB;yCAClC;oDACW,yDAA2B;+CAChC,oDAAsB;6CACxB,kDAAoB;qDACZ,0DAA4B;qDAC5B,0DAA4B;iDAChC,sDAAwB;oDACrB,yDAA2B;2EAEJ;kFACO;uDGxQvB;sDAKD;6CAKT;8CAKC;8CAYA;8CAKA;0CAKJ;uCAKH;sDAKe;yDAKG;oDAKL;8CAKN;qCAMT;mDAMc;4DAKS;oCAiCnB,UAAU;qCACT,UAAU;qCACV;6BA2FR;yCKjMY;yCAIA;qCAIJ;kCAIH;iDAKe;oDAIG;gDEpCL;+CAKD;wDASS;wDAMA;6CAWX;kDAMK;oCClEhB;qCAYC;qCAKA;wCAKG;+BACT;8BAGD;qCAKO;gCAGL;yDCVc;yDACA;yDACA;0DAGC;yDACD;2DACE;wDACH;4DACI;yDACH;wDACD;6DACK;wDACL;4DACI;oEACQ;8DAEN;4DACF;4EACgB;kEACV;+DACH;;wCQlDhB;sDGgEkB,CAAC,EAAG,EAAG,EAAG;2DACL,CAAC,EAAG,EAAG;0DACR,CAAC,EAAG,EAAG,EAAG;2DACT,CAAC,EAAG,EAAG;4BWzClC;iCACK,aAAa,4BAAS,MAAM,4BAAS;kCAEpC,aAAa,4BAAS,MAAM,4BAAS;oCAEnC,aAAa,4BAAS,MAAM,4BAAS;uCEPrC;oCACH;wCEOK;wCACA,UAAU,MAAM;oCACpB;;kBMVC;2BKEE;2BACA,uBAAuB;0BYoG1C,aAAoB,gBAAuB;0CEtChC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG;wCAChE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI;2CAChF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;yCAC1E,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM;wCAC5G,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;wBOrF1C;2BAOG;2BAOA;4BAKe;6BACC;0BAIH;yBAKf;iBAKA,IAAI;wBAQJ,IAAI;4BACO,IAAI;mB/B7CnB,uEAAuE;4BiC+B5E;2DczB6B;+DACI;sDACT;sDACA;0DACI;2CSId;+CACI;+CACA;+CACA;mDACI;mDACA;oDACC;6CAEN;2CACF;+BCxBP;kDCIqB;mDACC;mDACA;iDACF;qDW+GI;kDAClB;sDAEI;;iD6E7Hd;sDACK;kDACJ;uDACK;gDACP;uDvEwL+B;sDACD;qDACD;yDACI;2DACE;2DACA;6CAEL;kDACK;2CACP;0CACO;8CACQ;wCACL;uCACZ;2CAkFC,CAChD,eACA;0CEnRqD;uCUsES;sCACpB,oCAAqB;qCSqjBnB;sCACC;gCAkOpB;kCAGiB;yCClsBE;wBIvHhB;2BAKG;oDI5C0B;kDAkO1B;yCACc;;yCKnKL;8CACK;gEGhDU;oCAC5B;yDACqB;0DACC;0DAEA;0DACA;4DAEE;4DACA;6DACC;6DACA;6DAEA;6DACA;0CACnB;wCACF;wDACgB;0CACD;uCAyBF;qCAgBF;kDAgBa;uCAsD5B;2CAEI;0CACD;sCACJ;sCACA;qCACD;8CK5JY;gDERK;qDACK;iDACJ;4CAEZ,CAAE,WACrC,gBACA;+CAE6C,AAAC;oDACI,AAAC;gDACL,AAAC;wCENF;uCACD;+CACQ;oDACK;0CACV;0CACA;8CACI;gDACE;gDACA;iDACC;4CACL;sDACU;uDACC;uDACA;4CACX;2CACD;sCACL;qCACM,CAC7C,WACA,UACA,iBACA,sBACA,YACA,YACA,gBACA,kBACA,kBACA,mBACA,cACA,uBACA,wBACA,wBACA,cACA,aACA;uCAEiC;sCACM;8CACQ;mDACK;yCACV;yCACA;6CACI,AAAC;+CACC,AAAC;+CACD,AAAC;gDACA;2CACL;qDACU,AAAC;sDACA,AAAC;sDACD,AAAC;2CACZ;0CACR;AAAA;AAAA;AAAA,W1KqEH;A0KrEG,W1KqEU;A0KrEV,W1KqEuB;A0KrEvB,W1KqEoC;A0KrEpC;AAAA;AAAA;2CAGC;0CEnCI;0BlIlBf;+BACK;qC4INN;oCGQA;mDCiBK;oDACC;+CCRD;gDACC;4CAEJ;yCACH;0CCHM;2CACC;uCAEJ;uCACA;2CCNG;4CACC;4CCAD;6CACC;yCAEJ;2CACE;0CCHC;2CACC;;;;"
}