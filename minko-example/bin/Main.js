// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["minko"] = $hx_exports["minko"] || {};
$hx_exports["minko"]["signal"] = $hx_exports["minko"]["signal"] || {};
;$hx_exports["minko"]["scene"] = $hx_exports["minko"]["scene"] || {};
;$hx_exports["minko"]["net"] = $hx_exports["minko"]["net"] || {};
;$hx_exports["minko"]["math"] = $hx_exports["minko"]["math"] || {};
;$hx_exports["minko"]["material"] = $hx_exports["minko"]["material"] || {};
;$hx_exports["minko"]["input"] = $hx_exports["minko"]["input"] || {};
;$hx_exports["minko"]["geometry"] = $hx_exports["minko"]["geometry"] || {};
;$hx_exports["minko"]["render"] = $hx_exports["minko"]["render"] || {};
;$hx_exports["minko"]["file"] = $hx_exports["minko"]["file"] || {};
;$hx_exports["minko"]["data"] = $hx_exports["minko"]["data"] || {};
;$hx_exports["minko"]["component"] = $hx_exports["minko"]["component"] || {};
;$hx_exports["minko"]["audio"] = $hx_exports["minko"]["audio"] || {};
;$hx_exports["minko"]["async"] = $hx_exports["minko"]["async"] || {};
;$hx_exports["minko"]["animation"] = $hx_exports["minko"]["animation"] || {};
$hx_exports["glm"] = $hx_exports["glm"] || {};
$hx_exports["haxe"] = $hx_exports["haxe"] || {};
$hx_exports["haxe"]["io"] = $hx_exports["haxe"]["io"] || {};
;$hx_exports["haxe"]["ds"] = $hx_exports["haxe"]["ds"] || {};
$hx_exports["haxe"]["ds"]["_StringMap"] = $hx_exports["haxe"]["ds"]["_StringMap"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.flatten = function(it) {
	var l = new List();
	var e = $iterator(it)();
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $iterator(e1)();
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(x1);
		}
	}
	return l;
};
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.iter = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.fold = function(it,f,first) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$iterator(it)().hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $iterator(it)();
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $iterator(it)();
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,filter: function(f) {
		var l2 = new List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	new ExampleAssimp();
};
var ExampleAssimp = function() {
	var _gthis = this;
	var canvas = minko_WebCanvas.create("Minko Example - Assimp",ExampleAssimp.WINDOW_WIDTH,ExampleAssimp.WINDOW_HEIGHT);
	var sceneManager = minko_component_SceneManager.create(canvas);
	var defaultOptions = sceneManager.get_assets().get_loader().get_options();
	defaultOptions.set_generateMipmaps(true);
	defaultOptions.set_skinningFramerate(60);
	defaultOptions.set_skinningMethod(1);
	defaultOptions.set_startAnimation(true);
	defaultOptions.registerParser("assbin",function() {
		return new minko_file_ASSIMPParser();
	});
	defaultOptions.registerParser("png",function() {
		return new minko_file_PNGParser();
	});
	defaultOptions.registerParser("jpg",function() {
		return new minko_file_JPEGParser();
	});
	var fxLoader = minko_file_Loader.createbyLoader(sceneManager.get_assets().get_loader());
	fxLoader.queue("effect/Basic.effect").queue("effect/Phong.effect");
	var fxComplete = fxLoader.get_complete().connect(function(l) {
		sceneManager.get_assets().get_loader().queue(ExampleAssimp.MODEL_FILENAME);
		sceneManager.get_assets().get_loader().load();
	});
	var beIdle = true;
	var doPunch = false;
	var doKick = false;
	var doWalk = false;
	var doRun = false;
	var beStun = false;
	var reverseAnim = false;
	var speedId = 0;
	var root = minko_scene_Node.create("root");
	root.addComponent(sceneManager);
	var camera = minko_scene_Node.create("camera");
	var tmp = minko_component_Renderer.create(2139062271);
	camera.addComponent(tmp);
	var this1 = new glm_Vec3Base();
	this1.x = 0.25;
	this1.y = 0.75;
	this1.z = 2.5;
	var this2 = new glm_Vec3Base();
	this2.x = 0.0;
	this2.y = 0.75;
	this2.z = 0.0;
	var this3 = new glm_Vec3Base();
	this3.x = 0;
	this3.y = 1;
	this3.z = 0;
	var this4 = new glm_Mat4Base();
	this4._00 = 0;
	this4._01 = 0;
	this4._02 = 0;
	this4._03 = 0;
	this4._10 = 0;
	this4._11 = 0;
	this4._12 = 0;
	this4._13 = 0;
	this4._20 = 0;
	this4._21 = 0;
	this4._22 = 0;
	this4._23 = 0;
	this4._30 = 0;
	this4._31 = 0;
	this4._32 = 0;
	this4._33 = 0;
	var src = glm_GLM.lookAt(this1,this2,this3,this4);
	var this5 = new glm_Mat4Base();
	this5._00 = 0;
	this5._01 = 0;
	this5._02 = 0;
	this5._03 = 0;
	this5._10 = 0;
	this5._11 = 0;
	this5._12 = 0;
	this5._13 = 0;
	this5._20 = 0;
	this5._21 = 0;
	this5._22 = 0;
	this5._23 = 0;
	this5._30 = 0;
	this5._31 = 0;
	this5._32 = 0;
	this5._33 = 0;
	var dest = this5;
	var a00 = src._00;
	var a01 = src._10;
	var a02 = src._20;
	var a03 = src._30;
	var a10 = src._01;
	var a11 = src._11;
	var a12 = src._21;
	var a13 = src._31;
	var a20 = src._02;
	var a21 = src._12;
	var a22 = src._22;
	var a23 = src._32;
	var a30 = src._03;
	var a31 = src._13;
	var a32 = src._23;
	var a33 = src._33;
	var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
	var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
	var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
	var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
	var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
	if(Math.abs(det) <= glm_GLM.EPSILON) {
		throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
	}
	var idet = 1 / det;
	dest._00 = t00 * idet;
	dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
	dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
	dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
	dest._10 = t01 * idet;
	dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
	dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
	dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
	dest._20 = t02 * idet;
	dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
	dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
	dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
	dest._30 = t03 * idet;
	dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
	dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
	dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
	var mat = dest;
	var tmp1 = minko_component_Transform.createbyMatrix4(mat);
	camera.addComponent(tmp1);
	var tmp2 = minko_component_PerspectiveCamera.create(canvas.get_aspectRatio());
	camera.addComponent(tmp2);
	root.addChild(camera);
	var error = sceneManager.get_assets().get_loader().get_error().connect(function(loader,e) {
		console.log("error");
		console.log(e);
		console.log("\n");
	});
	var _ = sceneManager.get_assets().get_loader().get_complete().connect(function(loader1) {
		var model = sceneManager.get_assets().symbol(ExampleAssimp.MODEL_FILENAME);
		var surfaceNodeSet = minko_scene_NodeSet.createbyNode(model).descendants(true).where(function(n) {
			return n.hasComponent(minko_component_Surface);
		});
		var _1 = minko_component_AmbientLight.create();
		root.addComponent(_1);
		var _2 = minko_component_DirectionalLight.create();
		root.addComponent(_2);
		root.addChild(model);
		var skinnedNodes = minko_scene_NodeSet.createbyNode(model).descendants(true).where(function(n1) {
			return n1.hasComponent(minko_component_MasterAnimation);
		});
		var skinnedNode = HxOverrides.iter(skinnedNodes.get_nodes()).hasNext() ? HxOverrides.iter(skinnedNodes.get_nodes()).next() : null;
		_gthis.anim = skinnedNode.getComponent(minko_component_MasterAnimation);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_RUN_START,0);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_RUN_STOP,800);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_IDLE,900);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_WALK_START,1400);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_WALK_STOP,2300);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_PUNCH_START,2333);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_PUNCH_HIT,2600);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_PUNCH_STOP,3000);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_KICK_START,3033);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_KICK_HIT,3316);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_KICK_STOP,3600);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_STUN_START,3633);
		_gthis.anim.addLabel(ExampleAssimp.LABEL_STUN_STOP,5033);
		_gthis.started = _gthis.anim.get_started().connect(function(UnnamedParameter1) {
			console.log("\nanimation started");
			console.log("\n");
		});
		_gthis.stopped = _gthis.anim.get_stopped().connect(function(UnnamedParameter11) {
			console.log("animation stopped");
			console.log("\n");
		});
		_gthis.looped = _gthis.anim.get_looped().connect(function(UnnamedParameter12) {
			console.log("\nanimation looped");
			console.log("\n");
		});
		_gthis.labelHit = _gthis.anim.get_labelHit().connect(function(UnnamedParameter13,name,time) {
			console.log("label '");
			console.log(name);
			console.log("'\thit at t = ");
			console.log(time);
			console.log("\n");
		});
		_gthis.printAnimationInfo(_gthis.anim);
		_gthis.idle(_gthis.anim);
	});
	var resized = canvas.get_resized().connect(function(canvas1,w,h) {
		var perspectiveCamera = camera.getComponent(minko_component_PerspectiveCamera);
		perspectiveCamera.set_aspectRatio(w / h);
	});
	var keyDown = canvas.get_keyboard().get_keyDown().connect(function(k) {
		if(_gthis.anim == null) {
			return;
		}
		if(k.keyIsDown(38)) {
			reverseAnim = false;
			beStun = reverseAnim;
			doWalk = beStun;
			doKick = doWalk;
			doPunch = doKick;
			beIdle = doPunch;
			speedId = 0;
			doRun = true;
		} else if(k.keyIsDown(40)) {
			reverseAnim = false;
			beStun = reverseAnim;
			doKick = beStun;
			doRun = doKick;
			doPunch = doRun;
			beIdle = doPunch;
			speedId = 0;
			doWalk = true;
		} else if(k.keyIsDown(37)) {
			reverseAnim = false;
			beStun = reverseAnim;
			doWalk = beStun;
			doKick = doWalk;
			doRun = doKick;
			beIdle = doRun;
			speedId = 0;
			doPunch = true;
		} else if(k.keyIsDown(39)) {
			reverseAnim = false;
			beStun = reverseAnim;
			doWalk = beStun;
			doRun = doWalk;
			doPunch = doRun;
			beIdle = doPunch;
			speedId = 0;
			doKick = true;
		} else if(k.keyIsDown(32)) {
			reverseAnim = false;
			doWalk = reverseAnim;
			doKick = doWalk;
			doRun = doKick;
			doPunch = doRun;
			beIdle = doPunch;
			speedId = 0;
			beStun = true;
		} else if(k.keyIsDown(35)) {
			reverseAnim = false;
			beStun = reverseAnim;
			doWalk = beStun;
			doKick = doWalk;
			doRun = doKick;
			doPunch = doRun;
			speedId = 0;
			beIdle = true;
		} else if(k.keyIsDown(49)) {
			reverseAnim = false;
			beIdle = reverseAnim;
			beStun = beIdle;
			doWalk = beStun;
			doKick = doWalk;
			doRun = doKick;
			doPunch = doRun;
			speedId = 1;
		} else if(k.keyIsDown(50)) {
			reverseAnim = false;
			beIdle = reverseAnim;
			beStun = beIdle;
			doWalk = beStun;
			doKick = doWalk;
			doRun = doKick;
			doPunch = doRun;
			speedId = 2;
		} else if(k.keyIsDown(51)) {
			reverseAnim = false;
			beIdle = reverseAnim;
			beStun = beIdle;
			doWalk = beStun;
			doKick = doWalk;
			doRun = doKick;
			doPunch = doRun;
			speedId = 3;
		} else if(k.keyIsDown(82)) {
			beIdle = false;
			beStun = beIdle;
			doWalk = beStun;
			doKick = doWalk;
			doRun = doKick;
			doPunch = doRun;
			reverseAnim = true;
			speedId = 0;
		}
	});
	var keyUp = canvas.get_keyboard().get_keyUp().connect(function(k1) {
		if(_gthis.anim == null) {
			return;
		}
		if(doWalk) {
			_gthis.walk(_gthis.anim);
		} else if(doRun) {
			_gthis.run(_gthis.anim);
		} else if(doKick) {
			_gthis.kick(_gthis.anim);
		} else if(doPunch) {
			_gthis.punch(_gthis.anim);
		} else if(beIdle) {
			_gthis.idle(_gthis.anim);
		} else if(beStun) {
			_gthis.stun(_gthis.anim);
		} else if(reverseAnim) {
			_gthis.anim.set_isReversed(!_gthis.anim.get_isReversed());
			console.log("animation is ");
			console.log(!_gthis.anim.get_isReversed() ? "not " : "");
			console.log("reversed");
			console.log("\n");
		} else if(speedId > 0) {
			if(speedId == 1) {
				_gthis.anim.set_timeFunction(function(t) {
					return Math.floor(t / 2);
				});
				console.log("animation's speed is decreased");
				console.log("\n");
			} else if(speedId == 2) {
				_gthis.anim.set_timeFunction(function(t1) {
					return t1;
				});
				console.log("animation is back to normal speed");
				console.log("\n");
			} else if(speedId == 3) {
				_gthis.anim.set_timeFunction(function(t2) {
					return t2 * 2;
				});
				console.log("animation's speed is increased");
				console.log("\n");
			}
			speedId = 0;
		}
	});
	var enterFrame = canvas.get_enterFrame().connect(function(canvas2,time1,deltaTime) {
		sceneManager.nextFrame(time1,deltaTime);
	});
	fxLoader.load();
	canvas.run();
};
ExampleAssimp.__name__ = true;
ExampleAssimp.prototype = {
	run: function(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(true);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_RUN_START,ExampleAssimp.LABEL_RUN_STOP);
		anim.play();
	}
	,walk: function(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(true);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_WALK_START,ExampleAssimp.LABEL_WALK_STOP);
		anim.play();
	}
	,kick: function(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(false);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_KICK_START,ExampleAssimp.LABEL_KICK_STOP,true);
		anim.play();
	}
	,punch: function(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(false);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_PUNCH_START,ExampleAssimp.LABEL_PUNCH_STOP,true);
		anim.play();
	}
	,idle: function(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(false);
		anim.resetPlaybackWindow();
		anim.seekLabel(ExampleAssimp.LABEL_IDLE);
		anim.stop();
	}
	,stun: function(anim) {
		if(anim == null) {
			return;
		}
		anim.set_isLooping(true);
		anim.setPlaybackWindowbyName(ExampleAssimp.LABEL_STUN_START,ExampleAssimp.LABEL_STUN_STOP);
		anim.play();
	}
	,printAnimationInfo: function(anim) {
		if(anim == null) {
			return;
		}
		console.log("Animation labels\n--------------");
		console.log("\n");
		var _g1 = 0;
		var _g = anim.get_numLabels();
		while(_g1 < _g) {
			var labelId = _g1++;
			console.log("\t'");
			console.log(anim.labelName(labelId));
			console.log("'\tat t = ");
			console.log(anim.labelTime(labelId));
			console.log("\n");
		}
		console.log("Animation controls\n--------------\n\t[up]\trun\n\t[down]\twalk\n\t[left]\tpunch\n\t[right]\tkick\n\t[space]\tstun\n\t[end]\tidle");
		console.log("\n");
		console.log("\t[r]\treverse animation\n\t[1]\tlow speed\n\t[2]\tnormal speed\n\t[3]\thigh speed\n");
		console.log("\n");
	}
	,__class__: ExampleAssimp
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var assimp_No = function() {
	this.VALIDATEDS_PROCESS = true;
};
assimp_No.__name__ = true;
assimp_No.prototype = {
	__class__: assimp_No
};
var assimp_Process = function() {
};
assimp_Process.__name__ = true;
assimp_Process.prototype = {
	__class__: assimp_Process
};
var assimp_Assimp = function() {
};
assimp_Assimp.__name__ = true;
assimp_Assimp.prototype = {
	__class__: assimp_Assimp
};
var assimp_BaseImporter = function() {
};
assimp_BaseImporter.__name__ = true;
assimp_BaseImporter.AI_MAKE_MAGIC = function(string) {
	return (HxOverrides.cca(string,0) << 24) + (HxOverrides.cca(string,1) << 16) + (HxOverrides.cca(string,2) << 8) + HxOverrides.cca(string,3);
};
assimp_BaseImporter.prototype = {
	canRead: function(file,ioStream,checkSig) {
		return false;
	}
	,readFile: function(imp,ioStream,filePath) {
		this.progress = imp.progressHandler;
		this.setupProperties(imp);
		var sc = new assimp_format_AiScene();
		this.internReadFile(filePath,ioStream,sc);
		return sc;
	}
	,setupProperties: function(imp) {
	}
	,extensionList: function() {
		return this.info.fileExtensions;
	}
	,internReadFile: function(file,ioSystem,scene) {
	}
	,getExtension: function(file) {
		var pos = file.lastIndexOf(".");
		if(pos == -1) {
			return "";
		}
		return file.substring(pos + 1).toLowerCase();
	}
	,__class__: assimp_BaseImporter
};
var assimp_SharedPostProcessInfo = function() { };
assimp_SharedPostProcessInfo.__name__ = true;
assimp_SharedPostProcessInfo.prototype = {
	addProperty: function(name,data) {
	}
	,getProperty: function(name) {
	}
	,removeProperty: function(name) {
	}
	,__class__: assimp_SharedPostProcessInfo
};
var assimp_BaseProcess = function() {
};
assimp_BaseProcess.__name__ = true;
assimp_BaseProcess.prototype = {
	isActive: function(flags) {
		return false;
	}
	,executeOnScene: function(imp) {
		this.progress = imp.progressHandler;
		this.setupProperties(imp);
		this.execute(imp.scene);
	}
	,setupProperties: function(imp) {
	}
	,execute: function(scene) {
	}
	,__class__: assimp_BaseProcess
};
var assimp_Config = function() { };
assimp_Config.__name__ = true;
assimp_Config.COLORSn = function(n) {
	return 1 << n + 20;
};
assimp_Config.TEXCOORDSn = function(n) {
	return 1 << n + 25;
};
var assimp_AiConfig = function() { };
assimp_AiConfig.__name__ = true;
var assimp_IOStream = function() {
};
assimp_IOStream.__name__ = true;
assimp_IOStream.prototype = {
	get_length: function() {
		return this.bytesInput.totlen;
	}
	,get_position: function() {
		return this.bytesInput.pos;
	}
	,set_position: function(p) {
		return this.bytesInput.set_position(p);
	}
	,seek: function(n) {
		var _g = this.bytesInput;
		_g.set_position(_g.pos + n);
	}
	,readByte: function() {
		return this.bytesInput.readByte();
	}
	,readBytes: function(buf,pos,len) {
		return this.bytesInput.readBytes(buf,pos,len);
	}
	,readFloat: function() {
		return this.bytesInput.readFloat();
	}
	,readDouble: function() {
		return this.bytesInput.readDouble();
	}
	,readInt8: function() {
		return this.bytesInput.readInt8();
	}
	,readInt16: function() {
		return this.bytesInput.readInt16();
	}
	,readUInt16: function() {
		return this.bytesInput.readUInt16();
	}
	,readInt32: function() {
		return this.bytesInput.readInt32();
	}
	,readString: function(len) {
		return this.bytesInput.readString(len);
	}
	,__class__: assimp_IOStream
};
var assimp_DefaultIOSystem = function() {
	assimp_IOStream.call(this);
};
assimp_DefaultIOSystem.__name__ = true;
assimp_DefaultIOSystem.__super__ = assimp_IOStream;
assimp_DefaultIOSystem.prototype = $extend(assimp_IOStream.prototype,{
	__class__: assimp_DefaultIOSystem
});
var assimp_ProgressHandler = function() {
	this._progressFunction = function(v) {
	};
};
assimp_ProgressHandler.__name__ = true;
assimp_ProgressHandler.prototype = {
	progressFunction: function(f) {
		this._progressFunction = f;
	}
	,update: function(percentage) {
		if(percentage == null) {
			percentage = -1;
		}
		this._progressFunction(percentage);
		return false;
	}
	,updateFileRead: function(currentStep,numberOfSteps) {
		var f = numberOfSteps != 0 ? currentStep / numberOfSteps : 1;
		this.update(f * 0.5);
	}
	,updatePostProcess: function(currentStep,numberOfSteps) {
		var f = numberOfSteps != 0 ? currentStep / numberOfSteps : 1;
		this.update(f * 0.5 + 0.5);
	}
	,__class__: assimp_ProgressHandler
};
var assimp_DefaultProgressHandler = function() {
	assimp_ProgressHandler.call(this);
};
assimp_DefaultProgressHandler.__name__ = true;
assimp_DefaultProgressHandler.__super__ = assimp_ProgressHandler;
assimp_DefaultProgressHandler.prototype = $extend(assimp_ProgressHandler.prototype,{
	__class__: assimp_DefaultProgressHandler
});
var assimp_Hash = function() { };
assimp_Hash.__name__ = true;
assimp_Hash.superFastHash = function(key,len,hash) {
	if(hash == null) {
		hash = 0;
	}
	if(len == null) {
		len = 0;
	}
	if(len == 0) {
		len = key.length;
	}
	var length = len;
	var hash1 = length;
	var tmp = 0;
	var rem = 0;
	rem = length & 3;
	length >>= 2;
	var i = 0;
	while(i < length) {
		hash1 += HxOverrides.cca(key,i) | HxOverrides.cca(key,i + 1) << 8;
		var index = i + 2;
		tmp = (HxOverrides.cca(key,index) | HxOverrides.cca(key,index + 1) << 8) << 11 ^ hash1;
		hash1 = hash1 << 16 ^ tmp;
		hash1 += hash1 >> 11;
		i += 4;
	}
	switch(rem) {
	case 1:
		hash1 += HxOverrides.cca(key,i);
		hash1 ^= hash1 << 10;
		hash1 += hash1 >> 1;
		break;
	case 2:
		hash1 += HxOverrides.cca(key,i) | HxOverrides.cca(key,i + 1) << 8;
		hash1 ^= hash1 << 11;
		hash1 += hash1 >> 17;
		break;
	case 3:
		hash1 += HxOverrides.cca(key,i) | HxOverrides.cca(key,i + 1) << 8;
		hash1 ^= hash1 << 16;
		hash1 ^= HxOverrides.cca(key,i + 1);
		hash1 += hash1 >> 11;
		break;
	}
	hash1 ^= hash1 << 3;
	hash1 += hash1 >> 5;
	hash1 ^= hash1 << 4;
	hash1 += hash1 >> 17;
	hash1 ^= hash1 << 25;
	hash1 += hash1 >> 6;
	return hash1;
};
var assimp_IOStreamUtil = function() { };
assimp_IOStreamUtil.__name__ = true;
assimp_IOStreamUtil.readT = function(stream,r) {
	var t = r(stream);
	return t;
};
assimp_IOStreamUtil.readAiVector3D = function(stream) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var v = this1;
	v.x = stream.bytesInput.readFloat();
	v.y = stream.bytesInput.readFloat();
	v.z = stream.bytesInput.readFloat();
	return v;
};
assimp_IOStreamUtil.readAiColor3D = function(stream) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var c = this1;
	c.x = stream.bytesInput.readFloat();
	c.y = stream.bytesInput.readFloat();
	c.z = stream.bytesInput.readFloat();
	return c;
};
assimp_IOStreamUtil.readAiColor4D = function(stream) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var c = this1;
	c.x = stream.bytesInput.readFloat();
	c.y = stream.bytesInput.readFloat();
	c.z = stream.bytesInput.readFloat();
	c.w = stream.bytesInput.readFloat();
	return c;
};
assimp_IOStreamUtil.readAiQuaternion = function(stream) {
	var this1 = new glm_QuatBase();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 1;
	var v = this1;
	v.w = stream.bytesInput.readFloat();
	v.x = stream.bytesInput.readFloat();
	v.y = stream.bytesInput.readFloat();
	v.z = stream.bytesInput.readFloat();
	return v;
};
assimp_IOStreamUtil.readAiString = function(stream) {
	var len = stream.bytesInput.readInt32();
	if(len > 0) {
		var s = stream.bytesInput.readString(len);
		return s;
	}
	return null;
};
assimp_IOStreamUtil.readAiVertexWeight = function(stream) {
	var w = new assimp_format_AiVertexWeight();
	w.vertexId = stream.bytesInput.readInt32();
	w.weight = stream.bytesInput.readFloat();
	return w;
};
assimp_IOStreamUtil.readAiMatrix4x4 = function(stream) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < 16) {
		var i = _g1++;
		_g.push(stream.bytesInput.readFloat());
	}
	var tmp = _g;
	var this1 = new glm_Mat4Base();
	this1._00 = tmp[0];
	this1._01 = tmp[1];
	this1._02 = tmp[2];
	this1._03 = tmp[3];
	this1._10 = tmp[4];
	this1._11 = tmp[5];
	this1._12 = tmp[6];
	this1._13 = tmp[7];
	this1._20 = tmp[8];
	this1._21 = tmp[9];
	this1._22 = tmp[10];
	this1._23 = tmp[11];
	this1._30 = tmp[12];
	this1._31 = tmp[13];
	this1._32 = tmp[14];
	this1._33 = tmp[15];
	var m = this1;
	return m;
};
assimp_IOStreamUtil.readAiVectorKey = function(stream) {
	var v = new assimp_format_AiVectorKey();
	v.time = stream.bytesInput.readDouble();
	v.value = assimp_IOStreamUtil.readAiVector3D(stream);
	return v;
};
assimp_IOStreamUtil.readAiQuatKey = function(stream) {
	var v = new assimp_format_AiQuatKey();
	v.time = stream.bytesInput.readDouble();
	v.value = assimp_IOStreamUtil.readAiQuaternion(stream);
	return v;
};
assimp_IOStreamUtil.readArray = function(stream,r,out,size) {
	var _g1 = 0;
	var _g = size;
	while(_g1 < _g) {
		var i = _g1++;
		var t = r(stream);
		out[i] = t;
	}
	return out;
};
assimp_IOStreamUtil.readBounds = function(stream,size,n) {
};
var assimp_IOSystem = function() {
};
assimp_IOSystem.__name__ = true;
assimp_IOSystem.prototype = {
	exists: function(file) {
		return false;
	}
	,open: function(file) {
		return null;
	}
	,close: function(stream) {
	}
	,__class__: assimp_IOSystem
};
var assimp_MemoryIOSystem = function(filename,bytes) {
	assimp_IOSystem.call(this);
	this.filename = filename;
	this.bytes = bytes;
};
assimp_MemoryIOSystem.__name__ = true;
assimp_MemoryIOSystem.__super__ = assimp_IOSystem;
assimp_MemoryIOSystem.prototype = $extend(assimp_IOSystem.prototype,{
	__class__: assimp_MemoryIOSystem
});
var assimp_MemoryIOStream = function(b,pos,len) {
	assimp_IOStream.call(this);
	this.bytesInput = new haxe_io_BytesInput(b,pos,len);
};
assimp_MemoryIOStream.__name__ = true;
assimp_MemoryIOStream.__super__ = assimp_IOStream;
assimp_MemoryIOStream.prototype = $extend(assimp_IOStream.prototype,{
	__class__: assimp_MemoryIOStream
});
var assimp_ImporterPimpl = function() {
	this.properties = new haxe_ds_IntMap();
	this.ppShared = [];
	this.importer = this.importerInstanceList();
	this.postProcessingSteps = this.postProcessingStepInstanceList();
};
assimp_ImporterPimpl.__name__ = true;
assimp_ImporterPimpl.prototype = {
	isDefaultHandler: function() {
		return js_Boot.__instanceof(this.ioSystem,assimp_DefaultIOSystem);
	}
	,importerInstanceList: function() {
		return [new assimp_format_assbin_AssbinLoader()];
	}
	,postProcessingStepInstanceList: function() {
		return [];
	}
	,__class__: assimp_ImporterPimpl
};
var haxe_IMap = $hx_exports["haxe"]["IMap"] = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_IntMap = $hx_exports["haxe"]["ds"]["IntMap"] = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var assimp_Importer = function() {
};
assimp_Importer.__name__ = true;
assimp_Importer.prototype = {
	getErrorString: function() {
		return "";
	}
	,registerLoader: function(imp) {
		var st = imp.extensionList();
		var baked = "";
		var _g = 0;
		while(_g < st.length) {
			var it = st[_g];
			++_g;
			if(assimp_Assimp.DEBUG && this.isExtensionSupported(it)) {
				console.log("The file extension $it is already in use");
			}
			baked += "$it ";
		}
		assimp_Importer.impl.importer.push(imp);
		console.log("Registering custom importer for these file extensions: $baked");
		return 0;
	}
	,unregisterLoader: function(imp) {
		if(HxOverrides.remove(assimp_Importer.impl.importer,imp)) {
			console.log("Unregistering custom importer: ");
			return 0;
		} else {
			console.log("Unable to remove custom importer: I can't find you ...");
			return -1;
		}
	}
	,registerPPStep: function(imp) {
		assimp_Importer.impl.postProcessingSteps.push(imp);
		console.log("Registering custom post-processing step");
		return 0;
	}
	,unregisterPPStep: function(imp) {
		if(HxOverrides.remove(assimp_Importer.impl.postProcessingSteps,imp)) {
			console.log("Unregistering custom post-processing step");
			return 0;
		} else {
			console.log("Unable to remove custom post-processing step: I can't find you ..");
			return -1;
		}
	}
	,set: function(szName,value) {
		var _this = assimp_Importer.impl.properties;
		var key = assimp_Hash.superFastHash(szName);
		_this.h[key] = value;
	}
	,get: function(szName) {
		var _this = assimp_Importer.impl.properties;
		var key = assimp_Hash.superFastHash(szName);
		return _this.h[key];
	}
	,writeLogOpening: function(file) {
	}
	,get_progressHandler: function() {
		return assimp_Importer.impl.progressHandler;
	}
	,set_progressHandler: function(value) {
		assimp_Importer.impl.progressHandler = value;
		return value;
	}
	,get_ioHandler: function() {
		return assimp_Importer.impl.ioSystem;
	}
	,set_ioHandler: function(value) {
		assimp_Importer.impl.ioSystem = value;
		return value;
	}
	,readFile: function(file,ioSystem,flags) {
		this.writeLogOpening(file);
		if(assimp_Importer.impl.scene != null) {
			console.log("(Deleting previous scene)");
			this.freeScene();
		}
		var stream = this.get_ioHandler().open(file);
		this.readFileFromStream(file,stream,flags);
		this.get_ioHandler().close(stream);
		return assimp_Importer.impl.scene;
	}
	,readFileFromMemory: function(buffer,flags,hint) {
		if(hint == null) {
			hint = "";
		}
		var MaxLenHint = 200;
		if(buffer.length == 0 || hint.length > MaxLenHint) {
			assimp_Importer.impl.errorString = "Invalid parameters passed to ReadFileFromMemory()";
			return null;
		}
		var AI_MEMORYIO_MAGIC_FILENAME = "___magic___";
		var fileName = AI_MEMORYIO_MAGIC_FILENAME + "." + hint;
		var stream = new assimp_MemoryIOStream(buffer);
		if(assimp_Importer.impl.scene != null) {
			console.log("(Deleting previous scene)");
			this.freeScene();
		}
		return this.readFileFromStream(fileName,stream,flags);
	}
	,readFileFromStream: function(file,stream,flags) {
		var imp = Lambda.find(assimp_Importer.impl.importer,function(it) {
			return it.canRead(file,stream,false);
		});
		if(imp == null) {
			console.log("Assimp could not find an importer for the file!");
			return null;
		}
		var fileSize = stream.bytesInput.totlen;
		var desc = imp.info;
		var ext = desc.name;
		console.log("Found a matching importer for this file format: $ext.");
		assimp_Importer.impl.progressHandler.updateFileRead(0,fileSize);
		assimp_Importer.impl.scene = imp.readFile(assimp_Importer.impl,stream,file);
		assimp_Importer.impl.progressHandler.updateFileRead(fileSize,fileSize);
		if(assimp_Importer.impl.scene != null) {
			if(!assimp_Assimp.NO.VALIDATEDS_PROCESS) {
				if((flags & 1024) != 0) {
					new assimp_postProcess_ValidateDSProcess().executeOnScene(assimp_Importer.impl);
					if(assimp_Importer.impl.scene == null) {
						return null;
					}
				}
			}
			new assimp_ScenePreprocessor().processScene(assimp_Importer.impl.scene);
			this.applyPostProcessing(flags & ~1024);
		} else if(assimp_Importer.impl.scene == null) {
			assimp_Importer.impl.errorString = imp.errorText;
		}
		return assimp_Importer.impl.scene;
	}
	,applyPostProcessing: function(flags_) {
		if(assimp_Importer.impl.scene == null) {
			return null;
		}
		if(flags_ == 0) {
			return assimp_Importer.impl.scene;
		}
		return assimp_Importer.impl.scene;
	}
	,applyCustomizedPostProcessing: function(rootProcess,requestValidation) {
		if(null == assimp_Importer.impl.scene) {
			return null;
		}
		if(null == rootProcess) {
			return assimp_Importer.impl.scene;
		}
		console.log("Entering customized post processing pipeline");
		if(!assimp_Assimp.NO.VALIDATEDS_PROCESS) {
			if(requestValidation) {
				new assimp_postProcess_ValidateDSProcess().executeOnScene(assimp_Importer.impl);
				if(assimp_Importer.impl.scene == null) {
					return null;
				}
			}
		}
		if(assimp_Assimp.DEBUG && assimp_Importer.impl.extraVerbose && assimp_Assimp.NO.VALIDATEDS_PROCESS) {
			console.log("Verbose Import is not available due to build settings");
		} else if(assimp_Importer.impl.extraVerbose) {
			console.log("Not a debug build, ignoring extra verbose setting");
		}
		rootProcess.executeOnScene(assimp_Importer.impl);
		if(assimp_Importer.impl.extraVerbose || requestValidation) {
			console.log("Verbose Import: revalidating data structures");
			new assimp_postProcess_ValidateDSProcess().executeOnScene(assimp_Importer.impl);
			if(assimp_Importer.impl.scene == null) {
				console.log("Verbose Import: failed to revalidate data structures");
			}
		}
		console.log("Leaving customized post processing pipeline");
		return assimp_Importer.impl.scene;
	}
	,freeScene: function() {
		assimp_Importer.impl.scene = null;
		assimp_Importer.impl.errorString = "";
	}
	,errorString: function() {
		return assimp_Importer.impl.errorString;
	}
	,scene: function() {
		return assimp_Importer.impl.scene;
	}
	,isExtensionSupported: function(szExtension) {
		return null != this.getImporterExtension(szExtension);
	}
	,extensionList: function() {
		return Lambda.flatten(assimp_Importer.impl.importer.map(function(e) {
			return e.extensionList();
		}));
	}
	,importerCount: function() {
		return assimp_Importer.impl.importer.length;
	}
	,getImporterInfo: function(index) {
		return assimp_Importer.impl.importer[index].info;
	}
	,getImporter: function(index) {
		if(assimp_Importer.impl.importer.length > index) {
			return assimp_Importer.impl.importer[index];
		} else {
			return null;
		}
	}
	,getImporterExtension: function(szExtension) {
		return this.getImporter(this.getImporterIndex(szExtension));
	}
	,getImporterIndex: function(szExtension) {
		var p = 0;
		while(szExtension.charAt(p) == "*" || szExtension.charAt(p) == ".") ++p;
		var ext = szExtension.substring(p);
		if(ext == "") {
			return -1;
		}
		ext = ext.toLowerCase();
		return Lambda.indexOf(assimp_Importer.impl.importer,Lambda.find(assimp_Importer.impl.importer,function(i) {
			return Lambda.has(i.extensionList(),ext);
		}));
	}
	,_validateFlags: function(flags) {
		if((flags & 64) != 0 && (flags & 32) != 0) {
			console.log("AiProcess_GenSmoothNormals and AiProcess_GenNormals are incompatible");
			return false;
		}
		if((flags & 4194304) != 0 && (flags & 256) != 0) {
			console.log("AiProcess_OptimizeGraph and AiProcess_PreTransformVertices are incompatible");
			return false;
		}
		return true;
	}
	,__class__: assimp_Importer
};
var assimp_AiImporterDesc = function() {
};
assimp_AiImporterDesc.__name__ = true;
assimp_AiImporterDesc.prototype = {
	__class__: assimp_AiImporterDesc
};
var assimp_ProcessHelper = function() { };
assimp_ProcessHelper.__name__ = true;
assimp_ProcessHelper.getMeshVFormatUnique = function(pcMesh) {
	var iRet = 1;
	if(pcMesh.hasNormals()) {
		iRet |= 2;
	}
	if(pcMesh.hasTangentsAndBitangents()) {
		iRet |= 4;
	}
	var p = 0;
	while(pcMesh.hasTextureCoords(p)) {
		iRet |= 256 << p;
		++p;
	}
	p = 0;
	while(pcMesh.hasVertexColors(p)) iRet |= 16777216 << p++;
	return iRet;
};
var assimp_ScenePreprocessor = function() {
};
assimp_ScenePreprocessor.__name__ = true;
assimp_ScenePreprocessor.prototype = {
	processScene: function(scene) {
		this.scene = scene;
		var _g = 0;
		var _g1 = scene.meshes;
		while(_g < _g1.length) {
			var it = _g1[_g];
			++_g;
			this.AiMesh_process(it);
		}
		var _g2 = 0;
		var _g11 = scene.animations;
		while(_g2 < _g11.length) {
			var it1 = _g11[_g2];
			++_g2;
			this.AiAnimation_process(it1);
		}
		if(scene.numMaterials == 0 && scene.numMeshes > 0) {
			var tmp = new assimp_format_AiMaterial();
			tmp.color = new assimp_format_Color();
			var this1 = new glm_Vec3Base();
			this1.x = 0.6;
			this1.y = 0;
			this1.z = 0;
			tmp.color.diffuse = this1;
			tmp.name = assimp_format_AiDefines.AI_DEFAULT_MATERIAL_NAME;
			scene.materials.push(tmp);
			console.log("ScenePreprocessor: Adding default material '$ Material.AI_DEFAULT_MATERIAL_NAME'");
			var _g3 = 0;
			var _g12 = scene.meshes;
			while(_g3 < _g12.length) {
				var it2 = _g12[_g3];
				++_g3;
				it2.materialIndex = scene.numMaterials;
			}
			scene.numMaterials++;
		}
	}
	,AiMesh_process: function(this1) {
		var _g = 0;
		var _g1 = this1.textureCoords;
		while(_g < _g1.length) {
			var it = _g1[_g];
			++_g;
			var _g3 = 0;
			var _g2 = it.length;
			while(_g3 < _g2) {
				var i = _g3++;
				var this2 = it[i];
				if(Lambda.empty([this2.x,this2.y,this2.z])) {
					var this3 = new glm_Vec3Base();
					this3.x = 0;
					this3.y = 0;
					this3.z = 0;
					it[i] = this3;
				}
			}
		}
		if(this1.primitiveTypes == 0) {
			var _g4 = 0;
			var _g11 = this1.faces;
			while(_g4 < _g11.length) {
				var it1 = _g11[_g4];
				++_g4;
				var _g21 = it1.numIndices;
				var tmp;
				switch(_g21) {
				case 1:
					tmp = this1.primitiveTypes | 1;
					break;
				case 2:
					tmp = this1.primitiveTypes | 2;
					break;
				case 3:
					tmp = this1.primitiveTypes | 4;
					break;
				default:
					tmp = this1.primitiveTypes | 8;
				}
				this1.primitiveTypes = tmp;
			}
		}
		if(!Lambda.empty(this1.tangents) && !Lambda.empty(this1.normals) && Lambda.empty(this1.bitangents)) {
			var _g5 = [];
			var _g22 = 0;
			var _g12 = this1.numVertices;
			while(_g22 < _g12) {
				var i1 = _g22++;
				var this4 = new glm_Vec3Base();
				this4.x = 0;
				this4.y = 0;
				this4.z = 0;
				_g5.push(this4);
			}
			this1.bitangents = _g5;
			var _g23 = 0;
			var _g13 = this1.numVertices;
			while(_g23 < _g13) {
				var i2 = _g23++;
				var a = this1.normals[i2];
				var b = this1.tangents[i2];
				var dest = this1.bitangents[i2];
				var x = a.y * b.z - a.z * b.y;
				var y = a.z * b.x - a.x * b.z;
				var z = a.x * b.y - a.y * b.x;
				var this5 = new glm_Vec3Base();
				this5.x = x;
				this5.y = y;
				this5.z = z;
				dest = this5;
			}
		}
	}
	,AiAnimation_process: function(this1) {
		var first = 10e10;
		var last = -10e10;
		var _g = 0;
		var _g1 = this1.channels;
		while(_g < _g1.length) {
			var channel = _g1[_g];
			++_g;
			if(this1.duration == -1.0) {
				var _g2 = 0;
				var _g3 = channel.positionKeys;
				while(_g2 < _g3.length) {
					var it = _g3[_g2];
					++_g2;
					first = Math.min(first,it.time);
					last = Math.max(last,it.time);
				}
				var _g21 = 0;
				var _g31 = channel.scalingKeys;
				while(_g21 < _g31.length) {
					var it1 = _g31[_g21];
					++_g21;
					first = Math.min(first,it1.time);
					last = Math.max(last,it1.time);
				}
				var _g22 = 0;
				var _g32 = channel.rotationKeys;
				while(_g22 < _g32.length) {
					var it2 = _g32[_g22];
					++_g22;
					first = Math.min(first,it2.time);
					last = Math.max(last,it2.time);
				}
			}
			if(channel.numRotationKeys == 0 || channel.numPositionKeys == 0 || channel.numScalingKeys == 0) {
				var it3 = this.scene.rootNode.findNode(channel.nodeName);
				if(it3 != null) {
					var this2 = new glm_Vec3Base();
					this2.x = 0;
					this2.y = 0;
					this2.z = 0;
					var scaling = this2;
					var this3 = new glm_Vec3Base();
					this3.x = 0;
					this3.y = 0;
					this3.z = 0;
					var position = this3;
					var this4 = new glm_QuatBase();
					this4.x = 0;
					this4.y = 0;
					this4.z = 0;
					this4.w = 1;
					var rotation = this4;
					assimp_format_Defs.decompose(it3.transformation,scaling,rotation,position);
					if(channel.numRotationKeys == 0) {
						channel.numRotationKeys = 1;
						channel.rotationKeys = [new assimp_format_AiQuatKey(0.0,rotation)];
						console.log("ScenePreprocessor: Dummy rotation track has been generated");
					}
					if(channel.numScalingKeys == 0) {
						channel.numScalingKeys = 1;
						channel.scalingKeys = [new assimp_format_AiVectorKey(0.0,scaling)];
						console.log("ScenePreprocessor: Dummy scaling track has been generated");
					}
					if(channel.numPositionKeys == 0) {
						channel.numPositionKeys = 1;
						channel.positionKeys = [new assimp_format_AiVectorKey(0.0,position)];
						console.log("ScenePreprocessor: Dummy position track has been generated");
					}
				}
			}
		}
		if(this1.duration == -1.0) {
			console.log("ScenePreprocessor: Setting animation duration");
			this1.duration = last - Math.min(first,0.0);
		}
	}
	,__class__: assimp_ScenePreprocessor
};
var assimp_StringUtil = function() { };
assimp_StringUtil.__name__ = true;
assimp_StringUtil.formatString = function(s,d) {
	return StringTools.replace(s,"%",Std.string(d) + "");
};
var assimp_Types = function() { };
assimp_Types.__name__ = true;
var assimp_AiMemoryInfo = function() { };
assimp_AiMemoryInfo.__name__ = true;
var assimp_format_AiMatKeys = function() {
};
assimp_format_AiMatKeys.__name__ = true;
assimp_format_AiMatKeys.getFullTextureName = function(baseName,texType,texIndex) {
	return "{$baseName},{$texType},{$texIndex}";
};
assimp_format_AiMatKeys.getBaseName = function(fullyQualifiedName) {
	if(fullyQualifiedName == null) {
		return "";
	}
	var substrings = fullyQualifiedName.split(",");
	if(substrings != null && substrings.length == 3) {
		return substrings[0];
	}
	return "";
};
assimp_format_AiMatKeys.prototype = {
	__class__: assimp_format_AiMatKeys
};
var assimp_format_AiKey = function() { };
assimp_format_AiKey.__name__ = true;
assimp_format_AiKey.prototype = {
	__class__: assimp_format_AiKey
};
var assimp_format_AiVectorKey = function(t,v) {
	this.time = t;
	var tmp;
	if(v != null) {
		tmp = v;
	} else {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		tmp = this1;
	}
	this.value = tmp;
};
assimp_format_AiVectorKey.__name__ = true;
assimp_format_AiVectorKey.__interfaces__ = [assimp_format_AiKey];
assimp_format_AiVectorKey.prototype = {
	__class__: assimp_format_AiVectorKey
};
var assimp_format_AiQuatKey = function(t,v) {
	if(t == null) {
		t = 0;
	}
	this.time = t;
	var tmp;
	if(v != null) {
		tmp = v;
	} else {
		var this1 = new glm_QuatBase();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 1;
		tmp = this1;
	}
	this.value = tmp;
};
assimp_format_AiQuatKey.__name__ = true;
assimp_format_AiQuatKey.__interfaces__ = [assimp_format_AiKey];
assimp_format_AiQuatKey.prototype = {
	__class__: assimp_format_AiQuatKey
};
var assimp_format_AiMeshKey = function() {
	this.time = 0;
	this.value = 0;
};
assimp_format_AiMeshKey.__name__ = true;
assimp_format_AiMeshKey.__interfaces__ = [assimp_format_AiKey];
assimp_format_AiMeshKey.prototype = {
	__class__: assimp_format_AiMeshKey
};
var assimp_format_AiMeshMorphKey = function() {
};
assimp_format_AiMeshMorphKey.__name__ = true;
assimp_format_AiMeshMorphKey.__interfaces__ = [assimp_format_AiKey];
assimp_format_AiMeshMorphKey.prototype = {
	__class__: assimp_format_AiMeshMorphKey
};
var assimp_format_AiNodeAnim = function() {
	this.nodeName = "";
	this.numPositionKeys = 0;
	this.numRotationKeys = 0;
	this.numScalingKeys = 0;
	this.scalingKeys = [];
	this.positionKeys = [];
	this.rotationKeys = [];
	this.preState = 0;
	this.postState = 0;
};
assimp_format_AiNodeAnim.__name__ = true;
assimp_format_AiNodeAnim.prototype = {
	__class__: assimp_format_AiNodeAnim
};
var assimp_format_AiMeshAnim = function() {
	this.mKeys = [];
	this.mName = "";
	this.mNumKeys = 0;
};
assimp_format_AiMeshAnim.__name__ = true;
assimp_format_AiMeshAnim.prototype = {
	__class__: assimp_format_AiMeshAnim
};
var assimp_format_AiMeshMorphAnim = function() {
	this.name = "";
	this.numKeys = 0;
	this.keys = [];
};
assimp_format_AiMeshMorphAnim.__name__ = true;
assimp_format_AiMeshMorphAnim.prototype = {
	__class__: assimp_format_AiMeshMorphAnim
};
var assimp_format_AiAnimation = function() {
	this.name = "";
	this.duration = -1.0;
	this.ticksPerSecond = 0;
	this.numChannels = 0;
	this.mNumMeshChannels = 0;
	this.numMorphMeshChannels = 0;
	this.channels = [];
	this.mMeshChannels = [[]];
	this.morphMeshChannels = [];
};
assimp_format_AiAnimation.__name__ = true;
assimp_format_AiAnimation.prototype = {
	__class__: assimp_format_AiAnimation
};
var assimp_format_AiCamera = function() {
	this.name = "";
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 1;
	this1.z = 0;
	this.up = this1;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	this.position = this2;
	var this3 = new glm_Vec3Base();
	this3.x = 0;
	this3.y = 0;
	this3.z = 1;
	this.lookAt = this3;
	this.horizontalFOV = .25 * assimp_format_Defs.AI_MATH_HALF_PI;
	this.clipPlaneNear = 0.1;
	this.clipPlaneFar = 1000.0;
};
assimp_format_AiCamera.__name__ = true;
assimp_format_AiCamera.prototype = {
	__class__: assimp_format_AiCamera
};
var assimp_format_AiDefines = function() { };
assimp_format_AiDefines.__name__ = true;
var assimp_format_Defs = function() { };
assimp_format_Defs.__name__ = true;
assimp_format_Defs.AI_MAX_ALLOC = function(size) {
	return 268435456 / size;
};
assimp_format_Defs.AI_DEG_TO_RAD = function(x) {
	return x * 0.0174532925;
};
assimp_format_Defs.AI_RAD_TO_DEG = function(x) {
	return x * 57.2957795;
};
assimp_format_Defs.is_special_float = function(f) {
	return f == 255;
};
assimp_format_Defs.distance = function(this1,other) {
	return Math.sqrt(Math.pow(this1.x + other.x,2.0) + Math.pow(this1.y + other.y,2.0) + Math.pow(this1.z + other.z,2.0));
};
assimp_format_Defs.squareLength = function(this1) {
	return Math.sqrt(Math.pow(this1.x,2.0) + Math.pow(this1.y,2.0) + Math.pow(this1.z,2.0));
};
assimp_format_Defs.toQuaternion = function(matrix) {
	var trace1 = matrix._00 + matrix._11 + matrix._22;
	var X = 0.0;
	var Y = 0.0;
	var Z = 0.0;
	var W = 0.0;
	if(trace1 > 0) {
		var s = Math.sqrt(trace1 + 1.0) * 2.0;
		W = .25 * s;
		X = (matrix._21 - matrix._12) / s;
		Y = (matrix._02 - matrix._20) / s;
		Z = (matrix._10 - matrix._01) / s;
	} else if(matrix._00 > matrix._11 && matrix._00 > matrix._22) {
		var s1 = Math.sqrt(1.0 + matrix._00 - matrix._11 - matrix._22) * 2.0;
		W = (matrix._21 - matrix._12) / s1;
		X = .25 * s1;
		Y = (matrix._01 + matrix._10) / s1;
		Z = (matrix._02 + matrix._20) / s1;
	} else if(matrix._11 > matrix._22) {
		var s2 = Math.sqrt(1.0 + matrix._11 - matrix._00 - matrix._22) * 2.0;
		W = (matrix._02 - matrix._20) / s2;
		X = (matrix._01 + matrix._10) / s2;
		Y = .25 * s2;
		Z = (matrix._12 + matrix._21) / s2;
	} else {
		var s3 = Math.sqrt(1.0 + matrix._22 - matrix._00 - matrix._11) * 2.0;
		W = (matrix._10 - matrix._01) / s3;
		X = (matrix._02 + matrix._20) / s3;
		Y = (matrix._12 + matrix._21) / s3;
		Z = .25 * s3;
	}
	var this1 = new glm_QuatBase();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 1;
	var tmp = this1;
	var this2 = new glm_QuatBase();
	this2.x = X;
	this2.y = Y;
	this2.z = Z;
	this2.w = W;
	var q = this2;
	var length = Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	tmp.x = q.x * mult;
	tmp.y = q.y * mult;
	tmp.z = q.z * mult;
	tmp.w = q.w * mult;
	return tmp;
};
assimp_format_Defs.decompose = function(this1,pScaling,pRotation,pPosition) {
	pPosition.x = this1._13;
	pPosition.y = this1._23;
	pPosition.z = this1._33;
	var x = this1._00;
	var y = this1._01;
	var z = this1._02;
	var this2 = new glm_Vec3Base();
	this2.x = x;
	this2.y = y;
	this2.z = z;
	var vCols_0 = this2;
	var x1 = this1._10;
	var y1 = this1._11;
	var z1 = this1._12;
	var this3 = new glm_Vec3Base();
	this3.x = x1;
	this3.y = y1;
	this3.z = z1;
	var vCols_1 = this3;
	var x2 = this1._20;
	var y2 = this1._21;
	var z2 = this1._22;
	var this4 = new glm_Vec3Base();
	this4.x = x2;
	this4.y = y2;
	this4.z = z2;
	var vCols_2 = this4;
	var this5 = vCols_0;
	pScaling.x = Math.sqrt(this5.x * this5.x + this5.y * this5.y + this5.z * this5.z);
	var this6 = vCols_1;
	pScaling.y = Math.sqrt(this6.x * this6.x + this6.y * this6.y + this6.z * this6.z);
	var this7 = vCols_2;
	pScaling.z = Math.sqrt(this7.x * this7.x + this7.y * this7.y + this7.z * this7.z);
	if(pScaling.x != 0) {
		var a = vCols_0;
		var s = 1 / pScaling.x;
		var this8 = new glm_Vec3Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		var dest = this8;
		dest.x = a.x * s;
		dest.y = a.y * s;
		dest.z = a.z * s;
		vCols_0 = dest;
	}
	if(pScaling.y != 0) {
		var a1 = vCols_1;
		var s1 = 1 / pScaling.y;
		var this9 = new glm_Vec3Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		var dest1 = this9;
		dest1.x = a1.x * s1;
		dest1.y = a1.y * s1;
		dest1.z = a1.z * s1;
		vCols_1 = dest1;
	}
	if(pScaling.z != 0) {
		var a2 = vCols_2;
		var s2 = 1 / pScaling.z;
		var this10 = new glm_Vec3Base();
		this10.x = 0;
		this10.y = 0;
		this10.z = 0;
		var dest2 = this10;
		dest2.x = a2.x * s2;
		dest2.y = a2.y * s2;
		dest2.z = a2.z * s2;
		vCols_2 = dest2;
	}
	var _r0c0 = vCols_0.x;
	var _r0c1 = vCols_1.x;
	var _r0c2 = vCols_2.x;
	var _r1c0 = vCols_0.y;
	var _r1c1 = vCols_1.y;
	var _r1c2 = vCols_2.y;
	var _r2c0 = vCols_0.z;
	var _r2c1 = vCols_1.z;
	var _r2c2 = vCols_2.z;
	var this11 = new glm_Mat3Base();
	this11._00 = _r0c0;
	this11._01 = _r1c0;
	this11._02 = _r2c0;
	this11._10 = _r0c1;
	this11._11 = _r1c1;
	this11._12 = _r2c1;
	this11._20 = _r0c2;
	this11._21 = _r1c2;
	this11._22 = _r2c2;
	var m = this11;
	var q = assimp_format_Defs.toQuaternion(m);
	pRotation.x = q.x;
	pRotation.y = q.y;
	pRotation.z = q.z;
	pRotation.w = q.w;
};
assimp_format_Defs.getMatrix = function(q) {
	var X = q.x;
	var Y = q.y;
	var Z = q.z;
	var W = q.z;
	var xx = X * X;
	var yy = Y * Y;
	var zz = Z * Z;
	var xy = X * Y;
	var zw = Z * W;
	var zx = Z * X;
	var yw = Y * W;
	var yz = Y * Z;
	var xw = X * W;
	var this1 = new glm_Mat3Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	var mat = this1;
	mat._00 = 1.0 - 2.0 * (yy + zz);
	mat._10 = 2.0 * (xy + zw);
	mat._20 = 2.0 * (zx - yw);
	mat._01 = 2.0 * (xy - zw);
	mat._11 = 1.0 - 2.0 * (zz + xx);
	mat._21 = 2.0 * (yz + xw);
	mat._02 = 2.0 * (zx + yw);
	mat._12 = 2.0 * (yz - xw);
	mat._22 = 1.0 - 2.0 * (yy + xx);
	return mat;
};
assimp_format_Defs.slerp = function(start,end,factor) {
	var cosom = start.x * end.x + start.y * end.y + start.z * end.z + start.w * end.w;
	if(cosom < 0.0) {
		cosom = -cosom;
		end.x = -end.x;
		end.y = -end.y;
		end.z = -end.z;
		end.w = -end.w;
	}
	var sclp = 0;
	var sclq = 0;
	if(1.0 - cosom > 0.0001) {
		var omega = 0;
		var sinom = 0;
		omega = Math.acos(cosom);
		sinom = Math.sin(omega);
		sclp = Math.sin((1.0 - factor) * omega) / sinom;
		sclq = Math.sin(factor * omega) / sinom;
	} else {
		sclp = 1.0 - factor;
		sclq = factor;
	}
	var this1 = new glm_QuatBase();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 1;
	var q = this1;
	q.x = sclp * start.x + sclq * end.x;
	q.y = sclp * start.y + sclq * end.y;
	q.z = sclp * start.z + sclq * end.z;
	q.w = sclp * start.w + sclq * end.w;
	return q;
};
assimp_format_Defs.isBlack = function(this1) {
	if(Math.abs(this1.x) < assimp_format_Defs.epsilon && Math.abs(this1.y) < assimp_format_Defs.epsilon) {
		return Math.abs(this1.z) < assimp_format_Defs.epsilon;
	} else {
		return false;
	}
};
var assimp_format_AiLight = function() {
	this.name = "";
	this.type = 0;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this.position = this1;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	this.direction = this2;
	var this3 = new glm_Vec3Base();
	this3.x = 0;
	this3.y = 0;
	this3.z = 0;
	this.up = this3;
	this.attenuationConstant = 0;
	this.attenuationLinear = 1;
	this.attenuationQuadratic = 0;
	var this4 = new glm_Vec3Base();
	this4.x = 0;
	this4.y = 0;
	this4.z = 0;
	this.colorDiffuse = this4;
	var this5 = new glm_Vec3Base();
	this5.x = 0;
	this5.y = 0;
	this5.z = 0;
	this.colorSpecular = this5;
	var this6 = new glm_Vec3Base();
	this6.x = 0;
	this6.y = 0;
	this6.z = 0;
	this.colorAmbient = this6;
	this.angleInnerCone = assimp_format_Defs.AI_MATH_TWO_PIf;
	this.angleOuterCone = assimp_format_Defs.AI_MATH_TWO_PIf;
	var this7 = new glm_Vec2Base();
	this7.x = 0;
	this7.y = 0;
	this.size = this7;
};
assimp_format_AiLight.__name__ = true;
assimp_format_AiLight.prototype = {
	__class__: assimp_format_AiLight
};
var assimp_format_AiMaterialProperty = function() {
};
assimp_format_AiMaterialProperty.__name__ = true;
assimp_format_AiMaterialProperty.prototype = {
	get_fullyQualifiedName: function() {
		return assimp_format_AiMaterial.createFullyQualifiedName(this.mKey,this.mType,this.mIndex);
	}
	,getFloatValue: function() {
		if(this.mType == 1 || this.mType == 4) {
			return new haxe_io_BytesInput(this.mData).readFloat();
		}
		return 0;
	}
	,getStringValue: function() {
		if(this.mType != 3) {
			return null;
		}
		var stream = new assimp_MemoryIOStream(this.mData);
		return assimp_IOStreamUtil.readAiString(stream);
	}
	,getIntegerValue: function() {
		if(this.mType == 1 || this.mType == 4) {
			return new haxe_io_BytesInput(this.mData).readInt32();
		}
		return 0;
	}
	,getColor4DValue: function() {
		if(this.mType != 1 || this.mData == null) {
			var this1 = new glm_Vec4Base();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this1.w = 0;
			return this1;
		}
		if(this.mData.length >= 32) {
			var stream = new assimp_MemoryIOStream(this.mData);
			return assimp_IOStreamUtil.readAiColor4D(stream);
		} else if(this.mData.length >= 24) {
			var stream1 = new assimp_MemoryIOStream(this.mData);
			var color3D = assimp_IOStreamUtil.readAiColor3D(stream1);
			var x = color3D.x;
			var y = color3D.y;
			var z = color3D.z;
			var this2 = new glm_Vec4Base();
			this2.x = x;
			this2.y = y;
			this2.z = z;
			this2.w = 1.0;
			return this2;
		}
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 0;
		return this3;
	}
	,__class__: assimp_format_AiMaterialProperty
};
var assimp_format_AiTexture = function() {
};
assimp_format_AiTexture.__name__ = true;
assimp_format_AiTexture.prototype = {
	__class__: assimp_format_AiTexture
};
var assimp_format_AiUVTransform = function() {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	this.translation = this1;
	var this2 = new glm_Vec2Base();
	this2.x = 0;
	this2.y = 0;
	this.scaling = this2;
	this.rotation = 0;
};
assimp_format_AiUVTransform.__name__ = true;
assimp_format_AiUVTransform.prototype = {
	__class__: assimp_format_AiUVTransform
};
var assimp_format_AiString = function() {
};
assimp_format_AiString.__name__ = true;
assimp_format_AiString.prototype = {
	__class__: assimp_format_AiString
};
var assimp_format_Color = function() {
};
assimp_format_Color.__name__ = true;
assimp_format_Color.prototype = {
	__class__: assimp_format_Color
};
var assimp_format_AiMaterialTexture = function() {
};
assimp_format_AiMaterialTexture.__name__ = true;
assimp_format_AiMaterialTexture.prototype = {
	__class__: assimp_format_AiMaterialTexture
};
var assimp_format_AiMaterial = function() {
};
assimp_format_AiMaterial.__name__ = true;
assimp_format_AiMaterial.createFullyQualifiedName = function(baseName,texType,texIndex) {
	if(null == baseName) {
		return null;
	}
	return "{$baseName},{$texType},{$texIndex}";
};
assimp_format_AiMaterial.prototype = {
	getNonTextureProperty: function(baseName) {
		if(null == baseName) {
			return null;
		}
		var fullyQualifiedName = assimp_format_AiMaterial.createFullyQualifiedName(baseName,0,0);
		return this.getProperty(fullyQualifiedName);
	}
	,getMaterialProperty: function(baseName,texType,texIndex) {
		if(null == baseName) {
			return null;
		}
		var fullyQualifiedName = assimp_format_AiMaterial.createFullyQualifiedName(baseName,texType,texIndex);
		return this.getProperty(fullyQualifiedName);
	}
	,getProperty: function(fullyQualifiedName) {
		if(null == fullyQualifiedName) {
			return null;
		}
		return Lambda.find(this.properties,function(p) {
			return p.mKey == fullyQualifiedName;
		});
	}
	,hasNonTextureProperty: function(baseName) {
		if(null == baseName) {
			return false;
		}
		var fullyQualifiedName = assimp_format_AiMaterial.createFullyQualifiedName(baseName,0,0);
		return this.hasProperty(fullyQualifiedName);
	}
	,hasMaterialProperty: function(baseName,texType,texIndex) {
		if(null == baseName) {
			return false;
		}
		var fullyQualifiedName = assimp_format_AiMaterial.createFullyQualifiedName(baseName,texType,texIndex);
		return this.hasProperty(fullyQualifiedName);
	}
	,hasProperty: function(fullyQualifiedName) {
		if(null == fullyQualifiedName) {
			return false;
		}
		return Lambda.exists(this.properties,function(p) {
			return p.mKey == fullyQualifiedName;
		});
	}
	,addProperty: function(matProp) {
		if(matProp == null) {
			return false;
		}
		if(this.hasProperty(matProp.get_fullyQualifiedName())) {
			return false;
		}
		this.properties.push(matProp);
		return true;
	}
	,removeNonTextureProperty: function(baseName) {
		if(null == baseName) {
			return false;
		}
		return this.removeProperty(assimp_format_AiMaterial.createFullyQualifiedName(baseName,0,0));
	}
	,removeMaterialProperty: function(baseName,texType,texIndex) {
		if(null == baseName) {
			return false;
		}
		return this.removeProperty(assimp_format_AiMaterial.createFullyQualifiedName(baseName,texType,texIndex));
	}
	,removeProperty: function(fullyQualifiedName) {
		if(null == fullyQualifiedName) {
			return false;
		}
		this.properties = this.properties.filter(function(p) {
			return p.get_fullyQualifiedName() != fullyQualifiedName;
		});
		return true;
	}
	,clear: function() {
		this.properties = [];
	}
	,getAllProperties: function() {
		return this.properties.slice();
	}
	,getMaterialTextureCount: function(texType) {
		var count = 0;
		var _g = 0;
		var _g1 = this.properties;
		while(_g < _g1.length) {
			var matProp = _g1[_g];
			++_g;
			if(StringTools.startsWith(matProp.mKey,assimp_format_AiMatKeys.TEXTURE_BASE) && matProp.mType == texType) {
				++count;
			}
		}
		return count;
	}
	,getMaterialTexture: function(texType,texIndex,texture) {
		var texName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.TEXTURE_BASE,texType,texIndex);
		var texNameProp = this.getProperty(texName);
		if(texNameProp == null) {
			return false;
		}
		var mappingName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.MAPPING_BASE,texType,texIndex);
		var uvIndexName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.UVWSRC_BASE,texType,texIndex);
		var blendFactorName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.TEXBLEND_BASE,texType,texIndex);
		var texOpName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.TEXOP_BASE,texType,texIndex);
		var uMapModeName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.MAPPINGMODE_U_BASE,texType,texIndex);
		var vMapModeName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.MAPPINGMODE_V_BASE,texType,texIndex);
		var texFlagsName = assimp_format_AiMaterial.createFullyQualifiedName(assimp_format_AiMatKeys.TEXFLAGS_BASE,texType,texIndex);
		var mappingNameProp = this.getProperty(mappingName);
		var uvIndexNameProp = this.getProperty(uvIndexName);
		var blendFactorNameProp = this.getProperty(blendFactorName);
		var texOpNameProp = this.getProperty(texOpName);
		var uMapModeNameProp = this.getProperty(uMapModeName);
		var vMapModeNameProp = this.getProperty(vMapModeName);
		var texFlagsNameProp = this.getProperty(texFlagsName);
		texture.file = texNameProp.getStringValue();
		texture.type = texType;
		texture.textureIndex = texIndex;
		texture.mapping = mappingNameProp != null ? mappingNameProp.getIntegerValue() : 0;
		texture.uvwsrc = uvIndexNameProp != null ? uvIndexNameProp.getIntegerValue() : 0;
		texture.blend = blendFactorNameProp != null ? blendFactorNameProp.getFloatValue() : 0.0;
		texture.op = texOpNameProp != null ? texOpNameProp.getIntegerValue() : 0;
		texture.mapModeU = uMapModeNameProp != null ? uMapModeNameProp.getIntegerValue() : 0;
		texture.mapModeV = vMapModeNameProp != null ? vMapModeNameProp.getIntegerValue() : 0;
		texture.flags = texFlagsNameProp != null ? texFlagsNameProp.getIntegerValue() : 0;
		return true;
	}
	,__class__: assimp_format_AiMaterial
};
var assimp_format_AiFace = function() {
};
assimp_format_AiFace.__name__ = true;
assimp_format_AiFace.prototype = {
	__class__: assimp_format_AiFace
};
var assimp_format_Mesh = function() {
};
assimp_format_Mesh.__name__ = true;
assimp_format_Mesh.AI_PRIMITIVE_TYPE_FOR_N_INDICES = function(n) {
	if(n > 3) {
		return 8;
	} else {
		return 1 << n - 1;
	}
};
assimp_format_Mesh.prototype = {
	__class__: assimp_format_Mesh
};
var assimp_format_AiVertexWeight = function() {
	this.vertexId = 0;
	this.weight = 0;
};
assimp_format_AiVertexWeight.__name__ = true;
assimp_format_AiVertexWeight.prototype = {
	__class__: assimp_format_AiVertexWeight
};
var assimp_format_AiBone = function() {
	this.name = "";
	this.numWeights = 0;
	this.weights = [];
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	this.offsetMatrix = this1;
};
assimp_format_AiBone.__name__ = true;
assimp_format_AiBone.prototype = {
	__class__: assimp_format_AiBone
};
var assimp_format_AiAnimMesh = function() { };
assimp_format_AiAnimMesh.__name__ = true;
assimp_format_AiAnimMesh.prototype = {
	__class__: assimp_format_AiAnimMesh
};
var assimp_format_AiMesh = function() {
	this.primitiveTypes = 0;
	this.numVertices = 0;
	this.numFaces = 0;
	this.vertices = [];
	this.normals = [];
	this.tangents = [];
	this.bitangents = [];
	this.colors = [[]];
	this.textureCoords = [[]];
	this.faces = [];
	this.numBones = 0;
	this.bones = [];
	this.materialIndex = 0;
	this.name = "";
	this.mNumAnimMeshes = 0;
	this.mAnimMeshes = [];
	this.mMethod = 0;
	this.numUVComponents = [];
};
assimp_format_AiMesh.__name__ = true;
assimp_format_AiMesh.prototype = {
	hasPositions: function() {
		return this.numVertices > 0;
	}
	,hasFaces: function() {
		return this.numFaces > 0;
	}
	,hasNormals: function() {
		if(!Lambda.empty(this.normals)) {
			return this.numVertices > 0;
		} else {
			return false;
		}
	}
	,hasTangentsAndBitangents: function() {
		if(!Lambda.empty(this.tangents) && !Lambda.empty(this.bitangents)) {
			return this.numVertices > 0;
		} else {
			return false;
		}
	}
	,hasVertexColors: function(index) {
		if(index >= assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {
			return false;
		} else if(index < this.colors.length) {
			return this.numVertices > 0;
		} else {
			return false;
		}
	}
	,hasTextureCoords: function(index) {
		if(index >= assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS || index >= this.textureCoords.length) {
			return false;
		} else if(!Lambda.empty(this.textureCoords[index])) {
			return this.numVertices > 0;
		} else {
			return false;
		}
	}
	,getNumUVChannels: function() {
		var n = 0;
		while(n < assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS && n < this.textureCoords.length && !Lambda.empty(this.textureCoords[n])) ++n;
		return n;
	}
	,getNumColorChannels: function() {
		var n = 0;
		while(n < assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS && n < this.colors.length) ++n;
		return n;
	}
	,hasBones: function() {
		if(!Lambda.empty(this.bones)) {
			return this.numBones > 0;
		} else {
			return false;
		}
	}
	,__class__: assimp_format_AiMesh
};
var assimp_format_AiMetadataEntry = function(t,value) {
	this.data = value;
	this.type = t;
};
assimp_format_AiMetadataEntry.__name__ = true;
assimp_format_AiMetadataEntry.prototype = {
	__class__: assimp_format_AiMetadataEntry
};
var assimp_format_AiMetadata = function() {
	this.map = new haxe_ds_StringMap();
};
assimp_format_AiMetadata.__name__ = true;
assimp_format_AiMetadata.prototype = {
	numProperties: function() {
		return Lambda.count(this.map);
	}
	,keys: function() {
		return this.map.keys();
	}
	,set: function(key,value) {
		if(key == null) {
			return false;
		} else {
			var _this = this.map;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
			return true;
		}
	}
	,clear: function() {
		this.map = new haxe_ds_StringMap();
	}
	,isEmpty: function() {
		return Lambda.empty(this.map);
	}
	,isNotEmpty: function() {
		return !Lambda.empty(this.map);
	}
	,get: function(key) {
		var _this = this.map;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.map;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		} else {
			return null;
		}
	}
	,__class__: assimp_format_AiMetadata
};
var assimp_format_Scene = function() { };
assimp_format_Scene.__name__ = true;
var assimp_format_AiNode = function() {
};
assimp_format_AiNode.__name__ = true;
assimp_format_AiNode.prototype = {
	findNode: function(name) {
		if(this.name == name) {
			return this;
		}
		var tmp = this.children.filter(function(it) {
			return it.findNode(name) != null;
		});
		if(tmp.length > 0) {
			return tmp[0];
		}
		return null;
	}
	,__class__: assimp_format_AiNode
};
var assimp_format_AiScene = function() {
};
assimp_format_AiScene.__name__ = true;
assimp_format_AiScene.prototype = {
	hasMeshes: function() {
		return !Lambda.empty(this.meshes);
	}
	,hasMaterials: function() {
		return !Lambda.empty(this.materials);
	}
	,hasLights: function() {
		return !Lambda.empty(this.lights);
	}
	,hasTextures: function() {
		return !Lambda.empty(this.textures);
	}
	,hasCameras: function() {
		return !Lambda.empty(this.cameras);
	}
	,hasAnimations: function() {
		return !Lambda.empty(this.animations);
	}
	,__class__: assimp_format_AiScene
};
var assimp_format_Version = function() {
};
assimp_format_Version.__name__ = true;
assimp_format_Version.prototype = {
	__class__: assimp_format_Version
};
var assimp_format_assbin_AssbinLoader = function() {
	assimp_BaseImporter.call(this);
	this.info = new assimp_AiImporterDesc();
	this.info.name = ".assbin Importer";
	this.info.comments = "Gargaj / Conspiracy";
	this.info.flags = 2 | 4;
	this.info.fileExtensions = ["assbin"];
	this.shortened = false;
	this.compressed = false;
};
assimp_format_assbin_AssbinLoader.__name__ = true;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TEXCOORD = function(n) {
	return assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TEXCOORD_BASE << n;
};
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_COLOR = function(n) {
	return assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_COLOR_BASE << n;
};
assimp_format_assbin_AssbinLoader.fitsIntoUI16 = function(mNumVertices) {
	return mNumVertices < 65536;
};
assimp_format_assbin_AssbinLoader.__super__ = assimp_BaseImporter;
assimp_format_assbin_AssbinLoader.prototype = $extend(assimp_BaseImporter.prototype,{
	canRead: function(file,ioStream,checkSig) {
		var s = ioStream.bytesInput.readString(32);
		s = HxOverrides.substr(s,0,19);
		return s == "ASSIMP.binary-dump.";
	}
	,internReadFile: function(pFile,ioStream,pScene) {
		var stream = ioStream;
		if(null == stream) {
			return;
		}
		var _g = stream.bytesInput;
		_g.set_position(_g.pos + 44);
		var versionMajor = stream.bytesInput.readInt32();
		var versionMinor = stream.bytesInput.readInt32();
		if(versionMinor != assimp_format_assbin_AssbinLoader.ASSBIN_VERSION_MINOR || versionMajor != assimp_format_assbin_AssbinLoader.ASSBIN_VERSION_MAJOR) {
			throw new js__$Boot_HaxeError("Invalid version, data format not compatible!");
		}
		var versionRevision = stream.bytesInput.readInt32();
		var compileFlags = stream.bytesInput.readInt32();
		this.shortened = stream.bytesInput.readUInt16() > 0;
		this.compressed = stream.bytesInput.readUInt16() > 0;
		if(this.shortened) {
			throw new js__$Boot_HaxeError("Shortened binaries are not supported!");
		}
		var _g1 = stream.bytesInput;
		_g1.set_position(_g1.pos + 256);
		var _g2 = stream.bytesInput;
		_g2.set_position(_g2.pos + 128);
		var _g3 = stream.bytesInput;
		_g3.set_position(_g3.pos + 64);
		if(this.compressed) {
			var uncompressedSize = stream.bytesInput.readInt32();
			var compressedSize = stream.bytesInput.totlen;
			var compressedData = new haxe_io_Bytes(new ArrayBuffer(compressedSize));
			stream.bytesInput.readBytes(compressedData,stream.bytesInput.totlen,compressedSize);
			var io = new assimp_MemoryIOStream(haxe_zip_Uncompress.run(compressedData));
			this.readBinaryScene(io,pScene);
		} else {
			this.readBinaryScene(stream,pScene);
		}
	}
	,readBinaryNode: function(stream,onode,parent) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AINODE) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		var node = onode;
		node.name = assimp_IOStreamUtil.readAiString(stream);
		node.transformation = assimp_IOStreamUtil.readAiMatrix4x4(stream);
		var numChildren = stream.bytesInput.readInt32();
		var numMeshes = stream.bytesInput.readInt32();
		var nb_metadata = stream.bytesInput.readInt32();
		if(parent != null) {
			node.parent = parent;
		}
		if(numMeshes > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = numMeshes;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(0);
			}
			node.meshes = _g;
			var _g21 = 0;
			var _g11 = numMeshes;
			while(_g21 < _g11) {
				var i1 = _g21++;
				node.meshes[i1] = stream.bytesInput.readInt32();
				node.numMeshes++;
			}
		}
		if(numChildren > 0) {
			var _g3 = [];
			var _g22 = 0;
			var _g12 = numMeshes;
			while(_g22 < _g12) {
				var i2 = _g22++;
				_g3.push(new assimp_format_AiNode());
			}
			node.children = _g3;
			var _g23 = 0;
			var _g13 = numChildren;
			while(_g23 < _g13) {
				var i3 = _g23++;
				this.readBinaryNode(stream,node.children[i3],node);
				node.numChildren++;
			}
		}
		if(nb_metadata > 0) {
			node.metaData = new assimp_format_AiMetadata();
			var _g14 = 0;
			var _g4 = nb_metadata;
			while(_g14 < _g4) {
				var i4 = _g14++;
				var mKeys = assimp_IOStreamUtil.readAiString(stream);
				var mType = stream.bytesInput.readUInt16();
				var data = null;
				switch(mType) {
				case 0:
					data = stream.bytesInput.readByte() == 1;
					break;
				case 1:
					data = stream.bytesInput.readInt32();
					break;
				case 2:
					data = stream.bytesInput.readDouble();
					break;
				case 3:
					data = stream.bytesInput.readFloat();
					break;
				case 4:
					data = stream.bytesInput.readDouble();
					break;
				case 5:
					data = assimp_IOStreamUtil.readAiString(stream);
					break;
				case 6:
					data = assimp_IOStreamUtil.readAiVector3D(stream);
					break;
				default:
				}
				node.metaData.set(mKeys,new assimp_format_AiMetadataEntry(mType,data));
			}
		}
	}
	,readBinaryBone: function(stream,b) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIBONE) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		b.name = assimp_IOStreamUtil.readAiString(stream);
		b.numWeights = stream.bytesInput.readInt32();
		b.offsetMatrix = assimp_IOStreamUtil.readAiMatrix4x4(stream);
		if(this.shortened) {
			assimp_IOStreamUtil.readBounds(stream,b.weights,b.numWeights);
		} else {
			var _g = [];
			var _g2 = 0;
			var _g1 = b.numWeights;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(new assimp_format_AiVertexWeight());
			}
			b.weights = _g;
			assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVertexWeight,b.weights,b.numWeights);
		}
	}
	,readBinaryMesh: function(stream,mesh) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMESH) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		mesh.primitiveTypes = stream.bytesInput.readInt32();
		mesh.numVertices = stream.bytesInput.readInt32();
		mesh.numFaces = stream.bytesInput.readInt32();
		mesh.numBones = stream.bytesInput.readInt32();
		mesh.materialIndex = stream.bytesInput.readInt32();
		var c = stream.bytesInput.readInt32();
		if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_POSITIONS) != 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.vertices,mesh.numVertices);
			} else {
				var _g = [];
				var _g2 = 0;
				var _g1 = mesh.numVertices;
				while(_g2 < _g1) {
					var i = _g2++;
					var this1 = new glm_Vec3Base();
					this1.x = 0;
					this1.y = 0;
					this1.z = 0;
					_g.push(this1);
				}
				mesh.vertices = _g;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.vertices,mesh.numVertices);
			}
		}
		if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_NORMALS) != 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.normals,mesh.numVertices);
			} else {
				var _g3 = [];
				var _g21 = 0;
				var _g11 = mesh.numVertices;
				while(_g21 < _g11) {
					var i1 = _g21++;
					var this2 = new glm_Vec3Base();
					this2.x = 0;
					this2.y = 0;
					this2.z = 0;
					_g3.push(this2);
				}
				mesh.normals = _g3;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.normals,mesh.numVertices);
			}
		}
		if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) != 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.tangents,mesh.numVertices);
				assimp_IOStreamUtil.readBounds(stream,mesh.bitangents,mesh.numVertices);
			} else {
				var _g4 = [];
				var _g22 = 0;
				var _g12 = mesh.numVertices;
				while(_g22 < _g12) {
					var i2 = _g22++;
					var this3 = new glm_Vec3Base();
					this3.x = 0;
					this3.y = 0;
					this3.z = 0;
					_g4.push(this3);
				}
				mesh.tangents = _g4;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.tangents,mesh.numVertices);
				var _g13 = [];
				var _g31 = 0;
				var _g23 = mesh.numVertices;
				while(_g31 < _g23) {
					var i3 = _g31++;
					var this4 = new glm_Vec3Base();
					this4.x = 0;
					this4.y = 0;
					this4.z = 0;
					_g13.push(this4);
				}
				mesh.bitangents = _g13;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.bitangents,mesh.numVertices);
			}
		}
		var _g14 = 0;
		var _g5 = assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS;
		while(_g14 < _g5) {
			var n = _g14++;
			if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_COLOR(n)) == 0) {
				break;
			}
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.colors[n],mesh.numVertices);
			} else {
				var mesh1 = mesh.colors;
				var _g24 = [];
				var _g41 = 0;
				var _g32 = mesh.numVertices;
				while(_g41 < _g32) {
					var i4 = _g41++;
					var this5 = new glm_Vec4Base();
					this5.x = 0;
					this5.y = 0;
					this5.z = 0;
					this5.w = 0;
					_g24.push(this5);
				}
				mesh1[n] = _g24;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiColor4D,mesh.colors[n],mesh.numVertices);
			}
		}
		var _g15 = 0;
		var _g6 = assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS;
		while(_g15 < _g6) {
			var n1 = _g15++;
			if((c & assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TEXCOORD(n1)) == 0) {
				break;
			}
			mesh.numUVComponents[n1] = stream.bytesInput.readInt32();
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,mesh.textureCoords[n1],mesh.numVertices);
			} else {
				var mesh2 = mesh.textureCoords;
				var _g25 = [];
				var _g42 = 0;
				var _g33 = mesh.numVertices;
				while(_g42 < _g33) {
					var i5 = _g42++;
					var this6 = new glm_Vec3Base();
					this6.x = 0;
					this6.y = 0;
					this6.z = 0;
					_g25.push(this6);
				}
				mesh2[n1] = _g25;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVector3D,mesh.textureCoords[n1],mesh.numVertices);
			}
		}
		if(this.shortened) {
			stream.bytesInput.readInt32();
		} else {
			var _g7 = [];
			var _g26 = 0;
			var _g16 = mesh.numVertices;
			while(_g26 < _g16) {
				var i6 = _g26++;
				_g7.push(new assimp_format_AiFace());
			}
			mesh.faces = _g7;
			var _g27 = 0;
			var _g17 = mesh.numFaces;
			while(_g27 < _g17) {
				var i7 = _g27++;
				var f = mesh.faces[i7];
				f.numIndices = stream.bytesInput.readUInt16();
				var _g34 = [];
				var _g51 = 0;
				var _g43 = f.numIndices;
				while(_g51 < _g43) {
					var i8 = _g51++;
					_g34.push(0);
				}
				f.indices = _g34;
				var _g52 = 0;
				var _g44 = f.numIndices;
				while(_g52 < _g44) {
					var a = _g52++;
					if(assimp_format_assbin_AssbinLoader.fitsIntoUI16(mesh.numVertices)) {
						f.indices[a] = stream.bytesInput.readUInt16();
					} else {
						f.indices[a] = stream.bytesInput.readInt32();
					}
				}
			}
		}
		if(mesh.numBones > 0) {
			var _g8 = [];
			var _g28 = 0;
			var _g18 = mesh.numBones;
			while(_g28 < _g18) {
				var i9 = _g28++;
				_g8.push(new assimp_format_AiBone());
			}
			mesh.bones = _g8;
			var _g29 = 0;
			var _g19 = mesh.numBones;
			while(_g29 < _g19) {
				var a1 = _g29++;
				mesh.bones[a1] = new assimp_format_AiBone();
				this.readBinaryBone(stream,mesh.bones[a1]);
			}
		}
	}
	,readBinaryMaterialProperty: function(stream,prop) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMATERIALPROPERTY) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		prop.mKey = assimp_IOStreamUtil.readAiString(stream);
		prop.mSemantic = stream.bytesInput.readInt32();
		prop.mIndex = stream.bytesInput.readInt32();
		prop.mDataLength = stream.bytesInput.readInt32();
		prop.mType = stream.bytesInput.readInt32();
		prop.mData = new haxe_io_Bytes(new ArrayBuffer(prop.mDataLength));
		stream.bytesInput.readBytes(prop.mData,0,prop.mDataLength);
	}
	,readBinaryMaterial: function(stream,mat) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMATERIAL) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		mat.numAllocated = mat.numProperties = stream.bytesInput.readInt32();
		if(mat.numProperties > 0) {
			if(mat.properties != null) {
				mat.properties = [];
			}
			var _g = [];
			var _g2 = 0;
			var _g1 = mat.numProperties;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(new assimp_format_AiMaterialProperty());
			}
			mat.properties = _g;
			var _g21 = 0;
			var _g11 = mat.numProperties;
			while(_g21 < _g11) {
				var i1 = _g21++;
				this.readBinaryMaterialProperty(stream,mat.properties[i1]);
			}
		}
	}
	,readBinaryNodeAnim: function(stream,nd) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AINODEANIM) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		nd.nodeName = assimp_IOStreamUtil.readAiString(stream);
		nd.numPositionKeys = stream.bytesInput.readInt32();
		nd.numRotationKeys = stream.bytesInput.readInt32();
		nd.numScalingKeys = stream.bytesInput.readInt32();
		nd.preState = stream.bytesInput.readInt32();
		nd.postState = stream.bytesInput.readInt32();
		if(nd.numPositionKeys > 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,nd.positionKeys,nd.numPositionKeys);
			} else {
				var _g = [];
				var _g2 = 0;
				var _g1 = nd.numPositionKeys;
				while(_g2 < _g1) {
					var i = _g2++;
					_g.push(new assimp_format_AiVectorKey());
				}
				nd.positionKeys = _g;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVectorKey,nd.positionKeys,nd.numPositionKeys);
			}
		}
		if(nd.numRotationKeys > 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,nd.rotationKeys,nd.numRotationKeys);
			} else {
				var _g3 = [];
				var _g21 = 0;
				var _g11 = nd.numRotationKeys;
				while(_g21 < _g11) {
					var i1 = _g21++;
					_g3.push(new assimp_format_AiQuatKey());
				}
				nd.rotationKeys = _g3;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiQuatKey,nd.rotationKeys,nd.numRotationKeys);
			}
		}
		if(nd.numScalingKeys > 0) {
			if(this.shortened) {
				assimp_IOStreamUtil.readBounds(stream,nd.scalingKeys,nd.numScalingKeys);
			} else {
				var _g4 = [];
				var _g22 = 0;
				var _g12 = nd.numScalingKeys;
				while(_g22 < _g12) {
					var i2 = _g22++;
					_g4.push(new assimp_format_AiVectorKey());
				}
				nd.scalingKeys = _g4;
				assimp_IOStreamUtil.readArray(stream,assimp_IOStreamUtil.readAiVectorKey,nd.scalingKeys,nd.numScalingKeys);
			}
		}
	}
	,readBinaryAnim: function(stream,anim) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIANIMATION) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		anim.name = assimp_IOStreamUtil.readAiString(stream);
		anim.duration = stream.bytesInput.readDouble();
		anim.ticksPerSecond = stream.bytesInput.readDouble();
		anim.numChannels = stream.bytesInput.readInt32();
		if(anim.numChannels > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = anim.numChannels;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(new assimp_format_AiNodeAnim());
			}
			anim.channels = _g;
			var _g21 = 0;
			var _g11 = anim.numChannels;
			while(_g21 < _g11) {
				var a = _g21++;
				anim.channels[a] = new assimp_format_AiNodeAnim();
				this.readBinaryNodeAnim(stream,anim.channels[a]);
			}
		}
	}
	,readBinaryTexture: function(stream,tex) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AITEXTURE) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		tex.width = stream.bytesInput.readInt32();
		tex.height = stream.bytesInput.readInt32();
		tex.achFormatHint = stream.bytesInput.readString(4);
		if(!this.shortened) {
			if(tex.height > 0) {
				tex.pcData = new haxe_io_Bytes(new ArrayBuffer(tex.width * 4));
				stream.bytesInput.readBytes(tex.pcData,0,tex.width * 4);
			} else {
				tex.pcData = new haxe_io_Bytes(new ArrayBuffer(tex.width * tex.height * 4));
				stream.bytesInput.readBytes(tex.pcData,0,tex.width * tex.height * 4);
			}
		}
	}
	,readBinaryLight: function(stream,l) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AILIGHT) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		l.name = assimp_IOStreamUtil.readAiString(stream);
		l.type = stream.bytesInput.readInt32();
		if(l.type != 1) {
			l.attenuationConstant = stream.bytesInput.readFloat();
			l.attenuationLinear = stream.bytesInput.readFloat();
			l.attenuationQuadratic = stream.bytesInput.readFloat();
		}
		l.colorDiffuse = assimp_IOStreamUtil.readAiColor3D(stream);
		l.colorSpecular = assimp_IOStreamUtil.readAiColor3D(stream);
		l.colorAmbient = assimp_IOStreamUtil.readAiColor3D(stream);
		if(l.type == 3) {
			l.angleInnerCone = stream.bytesInput.readFloat();
			l.angleOuterCone = stream.bytesInput.readFloat();
		}
	}
	,readBinaryCamera: function(stream,cam) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AICAMERA) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		cam.name = assimp_IOStreamUtil.readAiString(stream);
		cam.position = assimp_IOStreamUtil.readAiVector3D(stream);
		cam.lookAt = assimp_IOStreamUtil.readAiVector3D(stream);
		cam.up = assimp_IOStreamUtil.readAiVector3D(stream);
		cam.horizontalFOV = stream.bytesInput.readFloat();
		cam.clipPlaneNear = stream.bytesInput.readFloat();
		cam.clipPlaneFar = stream.bytesInput.readFloat();
		cam.aspect = stream.bytesInput.readFloat();
	}
	,readBinaryScene: function(stream,scene) {
		if(stream.bytesInput.readInt32() != assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AISCENE) {
			throw new js__$Boot_HaxeError("Magic chunk identifiers are wrong!");
		}
		var size = stream.bytesInput.readInt32();
		scene.flags = stream.bytesInput.readInt32();
		scene.numMeshes = stream.bytesInput.readInt32();
		scene.numMaterials = stream.bytesInput.readInt32();
		scene.numAnimations = stream.bytesInput.readInt32();
		scene.numTextures = stream.bytesInput.readInt32();
		scene.numLights = stream.bytesInput.readInt32();
		scene.numCameras = stream.bytesInput.readInt32();
		this.readBinaryNode(stream,scene.rootNode,null);
		if(scene.numMeshes > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = scene.numMeshes;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(new assimp_format_AiMesh());
			}
			scene.meshes = _g;
			var _g21 = 0;
			var _g11 = scene.numMeshes;
			while(_g21 < _g11) {
				var i1 = _g21++;
				this.readBinaryMesh(stream,scene.meshes[i1]);
			}
		}
		if(scene.numMaterials > 0) {
			var _g3 = [];
			var _g22 = 0;
			var _g12 = scene.numMaterials;
			while(_g22 < _g12) {
				var i2 = _g22++;
				_g3.push(new assimp_format_AiMaterial());
			}
			scene.materials = _g3;
			var _g23 = 0;
			var _g13 = scene.numMaterials;
			while(_g23 < _g13) {
				var i3 = _g23++;
				this.readBinaryMaterial(stream,scene.materials[i3]);
			}
		}
		if(scene.numAnimations > 0) {
			var _g4 = [];
			var _g24 = 0;
			var _g14 = scene.numAnimations;
			while(_g24 < _g14) {
				var i4 = _g24++;
				_g4.push(new assimp_format_AiAnimation());
			}
			scene.animations = _g4;
			var _g25 = 0;
			var _g15 = scene.numAnimations;
			while(_g25 < _g15) {
				var i5 = _g25++;
				this.readBinaryAnim(stream,scene.animations[i5]);
			}
		}
		if(scene.numTextures > 0) {
			var _g5 = [];
			var _g26 = 0;
			var _g16 = scene.numTextures;
			while(_g26 < _g16) {
				var i6 = _g26++;
				_g5.push(new assimp_format_AiTexture());
			}
			scene.textures = _g5;
			var _g27 = 0;
			var _g17 = scene.numTextures;
			while(_g27 < _g17) {
				var i7 = _g27++;
				this.readBinaryTexture(stream,scene.textures[i7]);
			}
		}
		if(scene.numLights > 0) {
			var _g6 = [];
			var _g28 = 0;
			var _g18 = scene.numLights;
			while(_g28 < _g18) {
				var i8 = _g28++;
				_g6.push(new assimp_format_AiLight());
			}
			scene.lights = _g6;
			var _g29 = 0;
			var _g19 = scene.numLights;
			while(_g29 < _g19) {
				var i9 = _g29++;
				this.readBinaryLight(stream,scene.lights[i9]);
			}
		}
		if(scene.numCameras > 0) {
			var _g7 = [];
			var _g210 = 0;
			var _g110 = scene.numCameras;
			while(_g210 < _g110) {
				var i10 = _g210++;
				_g7.push(new assimp_format_AiCamera());
			}
			scene.cameras = _g7;
			var _g211 = 0;
			var _g111 = scene.numCameras;
			while(_g211 < _g111) {
				var i11 = _g211++;
				this.readBinaryCamera(stream,scene.cameras[i11]);
			}
		}
	}
	,__class__: assimp_format_assbin_AssbinLoader
});
var assimp_postProcess_ValidateDSProcess = function() {
	assimp_BaseProcess.call(this);
};
assimp_postProcess_ValidateDSProcess.__name__ = true;
assimp_postProcess_ValidateDSProcess.__super__ = assimp_BaseProcess;
assimp_postProcess_ValidateDSProcess.prototype = $extend(assimp_BaseProcess.prototype,{
	reportError: function(msg,args) {
		throw new js__$Boot_HaxeError("Validation failed: $msg $args");
	}
	,reportWarning: function(msg,args) {
		console.log("Validation warning: $msg $args");
	}
	,isActive: function(flags) {
		return (flags & 1024) != 0;
	}
	,execute: function(scene) {
		this.scene = scene;
		console.log("ValidateDataStructureProcess begin");
		this.validateAiNode(scene.rootNode);
		if(scene.numMeshes != 0) {
			this.doValidation(scene.meshes,scene.numMeshes,"meshes","numMeshes");
		} else if((scene.flags & assimp_format_Scene.AI_SCENE_FLAGS_INCOMPLETE) == 0) {
			this.reportError("AiScene.numMeshes is 0. At least one mesh must be there");
		} else if(!Lambda.empty(scene.meshes)) {
			this.reportError("AiScene.meshes is not empty although there are no meshes");
		}
		if(scene.numAnimations != 0) {
			this.doValidation(scene.animations,scene.numAnimations,"animations","numAnimations");
		} else if(!Lambda.empty(scene.animations)) {
			this.reportError("AiScene.animations is not empty although there are no animations");
		}
		if(scene.numCameras != 0) {
			this.doValidationWithNameCheck(scene.cameras,scene.numCameras,"cameras","numCameras");
		} else if(!Lambda.empty(scene.cameras)) {
			this.reportError("AiScene.cameras is not empty although there are no cameras");
		}
		if(scene.numLights > 0) {
			this.doValidationWithNameCheck(scene.lights,scene.numLights,"lights","numLights");
		} else if(!Lambda.empty(scene.lights)) {
			this.reportError("AiScene.lights is not empty although there are no lights");
		}
		if(scene.numTextures > 0) {
			this.doValidation(Lambda.array(scene.textures),scene.numTextures,"textures","numTextures");
		} else if(!Lambda.empty(scene.textures)) {
			this.reportError("AiScene.textures is not empty although there are no textures");
		}
		if(scene.numMaterials > 0) {
			this.doValidation(scene.materials,scene.numMaterials,"materials","numMaterials");
		} else if(!Lambda.empty(scene.materials)) {
			this.reportError("AiScene.materials is not empty although there are no materials");
		}
		console.log("ValidateDataStructureProcess end");
	}
	,validateAiMesh: function(mesh) {
		if(this.scene.numMaterials != 0 && mesh.materialIndex >= this.scene.numMaterials) {
			this.reportError("AiMesh.materialIndex is invalid (value: ${mesh.materialIndex} maximum: ${scene.numMaterials - 1})");
		}
		this.validateString(mesh.name);
		var _g1 = 0;
		var _g = mesh.numFaces;
		while(_g1 < _g) {
			var i = _g1++;
			var face = mesh.faces[i];
			if(mesh.primitiveTypes != 0) {
				var _g2 = face.numIndices;
				switch(_g2) {
				case 0:
					this.reportError("AiMesh.faces[$i].numIndices is 0");
					break;
				case 1:
					if((mesh.primitiveTypes & 1) == 0) {
						this.reportError("AiMesh.faces[$i] is a POINT but AiMesh.primitiveTypes does not report the POINT flag");
					}
					break;
				case 2:
					if((mesh.primitiveTypes & 2) == 0) {
						this.reportError("AiMesh.faces[$i] is a LINE but AiMesh.primitiveTypes does not report the LINE flag");
					}
					break;
				case 3:
					if((mesh.primitiveTypes & 4) == 0) {
						this.reportError("AiMesh.faces[$i] is a TRIANGLE but AiMesh.primitiveTypes does not report the TRIANGLE flag");
					}
					break;
				default:
					if((mesh.primitiveTypes & 8) == 0) {
						this.reportError("AiMesh.faces[$i] is a POLYGON but AiMesh.primitiveTypes does not report the POLYGON flag");
					}
				}
			}
			if(face.numIndices == 0) {
				this.reportError("AiMesh.faces[$i] is empty");
			}
		}
		if(mesh.numVertices == 0 || Lambda.empty(mesh.vertices) && this.scene.flags == 0) {
			this.reportError("The mesh contains no vertices");
		}
		if(mesh.numVertices > assimp_format_Mesh.AI_MAX_VERTICES) {
			this.reportError("Mesh has too many vertices: ${mesh.numVertices}, but the limit is $AI_MAX_VERTICES");
		}
		if(mesh.numFaces > assimp_format_Mesh.AI_MAX_FACES) {
			this.reportError("Mesh has too many faces: ${mesh.numFaces}, but the limit is $AI_MAX_FACES");
		}
		if(!Lambda.empty(mesh.tangents) != !Lambda.empty(mesh.bitangents)) {
			this.reportError("If there are tangents, bitangent vectors must be present as well");
		}
		if(mesh.numFaces == 0 || Lambda.empty(mesh.faces) && this.scene.flags == 0) {
			this.reportError("Mesh contains no faces");
		}
		var _g3 = [];
		var _g21 = 0;
		var _g11 = mesh.numVertices;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g3.push(false);
		}
		var abRefList = _g3;
		var _g22 = 0;
		var _g12 = mesh.numFaces;
		while(_g22 < _g12) {
			var i2 = _g22++;
			var face1 = mesh.faces[i2];
			if(face1.numIndices > assimp_format_Mesh.AI_MAX_FACE_INDICES) {
				this.reportError("Face $i has too many faces: ${face.size}, but the limit is $AI_MAX_FACE_INDICES");
			}
			var _g4 = 0;
			var _g31 = face1.numIndices;
			while(_g4 < _g31) {
				var a = _g4++;
				if(face1.indices[a] >= mesh.numVertices) {
					this.reportError("AiMesh.faces[$i][$a] is out of range");
				}
				abRefList[face1.indices[a]] = true;
			}
		}
		var _g23 = 0;
		var _g13 = mesh.numVertices;
		while(_g23 < _g13) {
			var i3 = _g23++;
			if(!abRefList[i3]) {
				this.reportWarning("There are unreferenced vertices");
			}
		}
		var i4 = 0;
		while(i4 < assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS) {
			if(!mesh.hasTextureCoords(i4)) {
				break;
			}
			++i4;
		}
		while(i4 < assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS) {
			if(mesh.hasTextureCoords(i4)) {
				this.reportError("Texture coordinate channel $i exists although the previous channel didn't exist.");
			}
			++i4;
		}
		var i5 = 0;
		while(i5 < assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {
			if(!mesh.hasVertexColors(i5)) {
				break;
			}
			++i5;
		}
		while(i5 < assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS) {
			if(mesh.hasVertexColors(i5)) {
				this.reportError("Vertex color channel $i is exists although the previous channel didn't exist.");
			}
			++i5;
		}
		if(mesh.numBones > 0) {
			if(Lambda.empty(mesh.bones)) {
				this.reportError("AiMesh.bones is empty (AiMesh.numBones is ${mesh.numBones})");
			}
			var _g14 = [];
			var _g32 = 0;
			var _g24 = mesh.numVertices;
			while(_g32 < _g24) {
				var i6 = _g32++;
				_g14.push(0.0);
			}
			var afSum = _g14;
			var _g33 = 0;
			var _g25 = mesh.numBones;
			while(_g33 < _g25) {
				var i7 = _g33++;
				var bone = mesh.bones[i7];
				if(bone.numWeights > assimp_format_Mesh.AI_MAX_BONE_WEIGHTS) {
					this.reportError("Bone $i has too many weights: ${bone.numWeights}, but the limit is $Mesh.AI_MAX_BONE_WEIGHTS");
				}
				if(i7 >= mesh.bones.length) {
					this.reportError("AiMesh.bones[$i] doesn't exist (AiMesh.numBones is ${mesh.numBones})");
				}
				this.validateAiBone(mesh,mesh.bones[i7],afSum);
				var _g5 = i7 + 1;
				var _g41 = mesh.numBones;
				while(_g5 < _g41) {
					var a1 = _g5++;
					if(mesh.bones[i7].name == mesh.bones[a1].name) {
						this.reportError("AiMesh.bones[$i] has the same name as AiMesh.bones[$a]");
					}
				}
			}
			var _g34 = 0;
			var _g26 = mesh.numVertices;
			while(_g34 < _g26) {
				var i8 = _g34++;
				if(afSum[i8] != 0 && (afSum[i8] <= 0.94 || afSum[i8] >= 1.05)) {
					this.reportWarning("AiMesh.vertices[$i]: bone weight sum != 1f (sum is ${afSum[i]})");
				}
			}
		} else if(!Lambda.empty(mesh.bones)) {
			this.reportError("AiMesh.bones is no empty although there are no bones");
		}
	}
	,validateAiBone: function(mesh,bone,afSum) {
		this.validateString(bone.name);
		if(bone.numWeights == 0) {
			this.reportError("aiBone::mNumWeights is zero");
		}
		var _g1 = 0;
		var _g = bone.numWeights;
		while(_g1 < _g) {
			var i = _g1++;
			if(bone.weights[i].vertexId >= mesh.numVertices) {
				this.reportError("AiBone.weights[$i].vertexId is out of range");
			} else if(bone.weights[i].weight == 0 || bone.weights[i].weight > 1) {
				this.reportWarning("AiBone.weights[$i].weight has an invalid value");
			}
			afSum[bone.weights[i].vertexId] += bone.weights[i].weight;
		}
	}
	,validateAiAnimation: function(animation) {
		this.validateString(animation.name);
		if(animation.numChannels > 0) {
			if(Lambda.empty(animation.channels)) {
				this.reportError("AiAnimation.channels is empty (AiAnimation.numChannels is ${animation.numChannels})");
			}
			var _g1 = 0;
			var _g = animation.numChannels;
			while(_g1 < _g) {
				var i = _g1++;
				if(i >= animation.channels.length) {
					this.reportError("AiAnimation.channels[$i] doesn't exist (AiAnimation.numChannels is ${animation.numChannels})");
				}
				this.validateChannels(animation,animation.channels[i]);
			}
		} else {
			this.reportError("aiAnimation::mNumChannels is 0. At least one node animation channel must be there.");
		}
	}
	,validateAiMaterial: function(material) {
		var temp = 0;
		if(material.shadingModel != null) {
			var _g = material.shadingModel;
			if(_g != null) {
				switch(_g) {
				case 3:case 4:case 8:
					if(material.shininess == null) {
						this.reportWarning("A specular shading model is specified but there is no Shininess key");
					}
					if(material.shininessStrength != null) {
						if(material.shininessStrength == 0) {
							this.reportWarning("A specular shading model is specified but the value of the Shininess Strenght key is 0");
						}
					}
					break;
				default:
				}
			}
		}
		if(material.opacity != null) {
			if(material.opacity == 0 || material.opacity > 1.01) {
				this.reportWarning("Invalid opacity value (must be 0 < opacity < 1f)");
			}
		}
		this.searchForInvalidTextures(material);
	}
	,searchForInvalidTextures: function(material) {
		var index = 0;
		var noSpecified = true;
		var _g = 0;
		var _g1 = material.textures;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			if(texture.uvwsrc != null) {
				var it = texture.uvwsrc;
				noSpecified = false;
				index = it;
				var _g3 = 0;
				var _g2 = this.scene.numMeshes;
				while(_g3 < _g2) {
					var a = _g3++;
					var mesh = this.scene.meshes[a];
					if(mesh.materialIndex == this.scene.materials.indexOf(material)) {
						var channels = 0;
						while(mesh.hasTextureCoords(channels)) ++channels;
						if(it >= channels) {
							this.reportWarning("Invalid UV index: $it (key uvwsrc). Mesh $a has only $channels UV channels");
						}
					}
				}
			}
		}
		if(noSpecified) {
			var _g11 = 0;
			var _g4 = this.scene.numMeshes;
			while(_g11 < _g4) {
				var a1 = _g11++;
				var mesh1 = this.scene.meshes[a1];
				if(mesh1.materialIndex == index && Lambda.empty(mesh1.textureCoords[0])) {
					this.reportWarning("UV-mapped texture, but there are no UV coords");
				}
			}
		}
	}
	,validateAiTexture: function(texture) {
		if(null == texture.pcData) {
			this.reportError("AiTexture.pcData is empty");
		}
		if(texture.height > 0 && texture.width == 0) {
			this.reportError("AiTexture.width is zero (AiTexture.height is ${texture.height}, uncompressed texture)");
		} else if(texture.width == 0) {
			this.reportError("AiTexture.width is zero (compressed texture)");
		} else if("." == texture.achFormatHint.charAt(0)) {
			this.reportWarning("AiTexture.achFormatHint should contain a file extension  without a leading dot (format hint: ${texture.achFormatHint}).");
		}
		if(texture.achFormatHint.toLowerCase() != texture.achFormatHint) {
			this.reportError("AiTexture.achFormatHint contains non-lowercase letters");
		}
	}
	,validateAiLight: function(light) {
		if(light.type == 0) {
			this.reportWarning("AiLight.type is undefined");
		}
		if(light.attenuationConstant == 0 && light.attenuationLinear == 0 && light.attenuationQuadratic == 0) {
			this.reportWarning("AiLight.attenuation* - all are zero");
		}
		if(light.angleInnerCone > light.angleOuterCone) {
			this.reportError("AiLight.angleInnerCone is larger than AiLight.angleOuterCone");
		}
		if(assimp_format_Defs.isBlack(light.colorDiffuse) && assimp_format_Defs.isBlack(light.colorAmbient) && assimp_format_Defs.isBlack(light.colorSpecular)) {
			this.reportWarning("AiLight.color* - all are black and won't have any influence");
		}
	}
	,validateAiCamera: function(camera) {
		if(camera.clipPlaneFar <= camera.clipPlaneNear) {
			this.reportError("AiCamera.clipPlaneFar must be >= AiCamera.clipPlaneNear");
		}
		if(camera.horizontalFOV == 0 || camera.horizontalFOV >= Math.PI) {
			this.reportWarning("${camera.horizontalFOV} is not a valid value for AiCamera.horizontalFOV");
		}
	}
	,validateChannels: function(animation,boneAnim) {
		this.validateString(boneAnim.nodeName);
		if(boneAnim.numPositionKeys == 0 && Lambda.empty(boneAnim.scalingKeys) && boneAnim.numRotationKeys == 0) {
			this.reportError("Empty node animation channel");
		}
		if(boneAnim.numPositionKeys > 0) {
			if(Lambda.empty(boneAnim.positionKeys)) {
				this.reportError("AiNodeAnim.positionKeys is empty (AiNodeAnim.numPositionKeys is ${boneAnim.numPositionKeys})");
			}
			var last = -10e10;
			var _g1 = 0;
			var _g = boneAnim.numPositionKeys;
			while(_g1 < _g) {
				var i = _g1++;
				if(animation.duration > 0 && boneAnim.positionKeys[i].time > animation.duration + 0.001) {
					var t = boneAnim.positionKeys[i].time;
					var d = assimp_StringUtil.formatString("%.5f",animation.duration);
					this.reportError("AiNodeAnim.positionKeys[$i].time ($t) is larger than AiAnimation.duration (which is $d)");
				}
				if(i > 0 && boneAnim.positionKeys[i].time <= last) {
					var t1 = assimp_StringUtil.formatString("%.5f",boneAnim.positionKeys[i].time);
					var l = assimp_StringUtil.formatString("%.5f",last);
					this.reportWarning("AiNodeAnim.positionKeys[$i].time ($t) is smaller than AiAnimation.positionKeys[${i - 1}] (which is $l)");
				}
				last = boneAnim.positionKeys[i].time;
			}
		}
		if(boneAnim.numRotationKeys > 0) {
			if(Lambda.empty(boneAnim.rotationKeys)) {
				this.reportError("AiNodeAnim.rotationKeys is empty (AiNodeAnim.numRotationKeys is ${boneAnim.numRotationKeys})");
			}
			var last1 = -10e10;
			var _g11 = 0;
			var _g2 = boneAnim.numRotationKeys;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(animation.duration > 0 && boneAnim.rotationKeys[i1].time > animation.duration + 0.001) {
					var t2 = assimp_StringUtil.formatString("%.5f",boneAnim.rotationKeys[i1].time);
					var d1 = assimp_StringUtil.formatString("%.5f",animation.duration);
					this.reportError("aiNodeAnim::mRotationKeys[$i].time ($t) is larger than AiAnimation.duration (which is $d)");
				}
				if(i1 > 0 && boneAnim.rotationKeys[i1].time <= last1) {
					var t3 = assimp_StringUtil.formatString("%.5f",boneAnim.rotationKeys[i1].time);
					var l1 = assimp_StringUtil.formatString("%.5f",last1);
					this.reportWarning("AiNodeAnim.rotationKeys[$i].time ($t) is smaller than AiAnimation.rotationKeys[${i - 1}] (which is $l)");
				}
				last1 = boneAnim.rotationKeys[i1].time;
			}
		}
		if(boneAnim.numScalingKeys > 0) {
			if(Lambda.empty(boneAnim.scalingKeys)) {
				this.reportError("AiNodeAnim.scalingKeys is empty (AiNodeAnim.numScalingKeys is ${boneAnim.numScalingKeys})");
			}
			var last2 = -10e10;
			var _g12 = 0;
			var _g3 = boneAnim.numScalingKeys;
			while(_g12 < _g3) {
				var i2 = _g12++;
				if(animation.duration > 0 && boneAnim.scalingKeys[i2].time > animation.duration + 0.001) {
					var t4 = boneAnim.scalingKeys[i2].time;
					var d2 = animation.duration;
					this.reportError("AiNodeAnim.scalingKeys[$i].time ($t) is larger than AiAnimation.duration (which is $d)");
				}
				if(i2 > 0 && boneAnim.scalingKeys[i2].time <= last2) {
					var t5 = assimp_StringUtil.formatString("%.5f",boneAnim.scalingKeys[i2].time);
					var l2 = assimp_StringUtil.formatString("%.5f",last2);
					this.reportWarning("AiNodeAnim.scalingKeys[$i].time ($t) is smaller than AiAnimation.scalingKeys[${i - 1}] (which is $l)");
				}
				last2 = boneAnim.scalingKeys[i2].time;
			}
		}
		if(boneAnim.numScalingKeys == 0 && boneAnim.numRotationKeys == 0 && boneAnim.numPositionKeys == 0) {
			this.reportError("A node animation channel must have at least one subtrack");
		}
	}
	,validateAiNode: function(node) {
		if(node != this.scene.rootNode && node.parent == null) {
			this.reportError("A node has no valid parent (AiNode.parent is null)");
		}
		this.validateString(node.name);
		if(node.numMeshes > 0) {
			if(Lambda.empty(node.meshes)) {
				this.reportError("AiNode.meshes is empty (AiNode.numMeshes is ${node.numMeshes})");
			}
			var _g = [];
			var _g2 = 0;
			var _g1 = this.scene.numMeshes;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(false);
			}
			var abHadMesh = _g;
			var _g21 = 0;
			var _g11 = node.numMeshes;
			while(_g21 < _g11) {
				var i1 = _g21++;
				if(node.meshes[i1] >= this.scene.numMeshes) {
					this.reportError("AiNode.meshes[${node.meshes[i]}] is out of range (maximum is ${scene.numMeshes - 1})");
				}
				if(abHadMesh[node.meshes[i1]]) {
					this.reportError("AiNode.meshes[$i] is already referenced by this node (value: ${node.meshes[i]})");
				}
				abHadMesh[node.meshes[i1]] = true;
			}
		}
		if(node.numChildren > 0) {
			if(Lambda.empty(node.children)) {
				this.reportError("AiNode.children is empty (AiNode.numChildren is ${node.numChildren})");
			}
			var _g12 = 0;
			var _g3 = node.numChildren;
			while(_g12 < _g3) {
				var i2 = _g12++;
				this.validateAiNode(node.children[i2]);
			}
		}
	}
	,validateString: function(string) {
		if(string.length > assimp_Types.MAXLEN) {
			this.reportError("String.length is too large (${string.length}, maximum is $MAXLEN)");
		}
		if(string.indexOf("\x00") != -1) {
			this.reportError("String data is invalid: it contains the terminal zero");
		}
	}
	,doValidation: function(array,size,firstName,secondName) {
		if(size > 0) {
			if(Lambda.empty(array)) {
				this.reportError("AiScene.$firstName is empty (AiScene.$secondName is $size)");
			}
			var _g1 = 0;
			var _g = size;
			while(_g1 < _g) {
				var i = _g1++;
				var element = array[i];
				if(js_Boot.__instanceof(element,assimp_format_AiMesh)) {
					this.validateAiMesh(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiAnimation)) {
					this.validateAiAnimation(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiCamera)) {
					this.validateAiCamera(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiLight)) {
					this.validateAiLight(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiTexture)) {
					this.validateAiTexture(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiMaterial)) {
					this.validateAiMesh(element);
				}
			}
		}
	}
	,doValidationEx: function(array,size,firstName,secondName) {
		if(size > 0) {
			if(Lambda.empty(array)) {
				this.reportError("AiScene.$firstName is empty (AiScene.$secondName is $size)");
			}
			var _g1 = 0;
			var _g = size;
			while(_g1 < _g) {
				var i = _g1++;
				var element = array[i];
				if(js_Boot.__instanceof(element,assimp_format_AiMesh)) {
					this.validateAiMesh(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiAnimation)) {
					this.validateAiAnimation(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiCamera)) {
					this.validateAiCamera(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiLight)) {
					this.validateAiLight(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiTexture)) {
					this.validateAiTexture(element);
				}
				if(js_Boot.__instanceof(element,assimp_format_AiMaterial)) {
					this.validateAiMesh(element);
				}
				var _g3 = i + 1;
				var _g2 = size;
				while(_g3 < _g2) {
					var a = _g3++;
					var nameI = Reflect.field(element,"name");
					var elementA = array[a];
					var nameA = Reflect.field(elementA,"name");
					if(nameI == nameA) {
						this.reportError("AiScene.$firstName[$i] has the same name as AiScene.$secondName[$a]");
					}
				}
			}
		}
	}
	,doValidationWithNameCheck: function(array,size,firstName,secondName) {
		this.doValidationEx(array,size,firstName,secondName);
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			var element = array[i];
			var name = Reflect.field(element,"name");
			var res = this.hasNameMatch(name,this.scene.rootNode);
			if(res == 0) {
				this.reportError("AiScene$firstName[$i] has no corresponding node in the scene graph ($name)");
			} else if(1 != res) {
				this.reportError("AiScene.$firstName[$i]: there are more than one nodes with $name as name");
			}
		}
	}
	,hasNameMatch: function(sIn,node) {
		var _gthis = this;
		return (node.name == sIn ? 1 : 0) + Lambda.fold(node.children,function(it,sum) {
			return _gthis.hasNameMatch(sIn,it) + sum;
		},0);
	}
	,__class__: assimp_postProcess_ValidateDSProcess
});
var glm_GLM = $hx_exports["glm"]["GLM"] = function() { };
glm_GLM.__name__ = true;
glm_GLM.lerp = function(a,b,t) {
	return a + t * (b - a);
};
glm_GLM.translate = function(translation,dest) {
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	dest._30 = translation.x;
	dest._31 = translation.y;
	dest._32 = translation.z;
	return dest;
};
glm_GLM.rotate = function(rotation,dest) {
	var x2 = rotation.x + rotation.x;
	var y2 = rotation.y + rotation.y;
	var z2 = rotation.z + rotation.z;
	var xx = rotation.x * x2;
	var xy = rotation.x * y2;
	var xz = rotation.x * z2;
	var yy = rotation.y * y2;
	var yz = rotation.y * z2;
	var zz = rotation.z * z2;
	var wx = rotation.w * x2;
	var wy = rotation.w * y2;
	var wz = rotation.w * z2;
	dest._00 = 1 - (yy + zz);
	dest._10 = xy - wz;
	dest._20 = xz + wy;
	dest._30 = 0;
	dest._01 = xy + wz;
	dest._11 = 1 - (xx + zz);
	dest._21 = yz - wx;
	dest._31 = 0;
	dest._02 = xz - wy;
	dest._12 = yz + wx;
	dest._22 = 1 - (xx + yy);
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	return dest;
};
glm_GLM.scale = function(amount,dest) {
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	dest._00 = amount.x;
	dest._11 = amount.y;
	dest._22 = amount.z;
	return dest;
};
glm_GLM.transform = function(translation,rotation,scale,dest) {
	var x2 = rotation.x + rotation.x;
	var y2 = rotation.y + rotation.y;
	var z2 = rotation.z + rotation.z;
	var xx = rotation.x * x2;
	var xy = rotation.x * y2;
	var xz = rotation.x * z2;
	var yy = rotation.y * y2;
	var yz = rotation.y * z2;
	var zz = rotation.z * z2;
	var wx = rotation.w * x2;
	var wy = rotation.w * y2;
	var wz = rotation.w * z2;
	dest._00 = (1 - (yy + zz)) * scale.x;
	dest._01 = (xy + wz) * scale.x;
	dest._02 = (xz - wy) * scale.x;
	dest._03 = 0;
	dest._10 = (xy - wz) * scale.y;
	dest._11 = (1 - (xx + zz)) * scale.y;
	dest._12 = (yz + wx) * scale.y;
	dest._13 = 0;
	dest._20 = (xz + wy) * scale.z;
	dest._21 = (yz - wx) * scale.z;
	dest._22 = (1 - (xx + yy)) * scale.z;
	dest._23 = 0;
	dest._30 = translation.x;
	dest._31 = translation.y;
	dest._32 = translation.z;
	dest._33 = 1;
	return dest;
};
glm_GLM.lookAt = function(eye,centre,up,dest) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest1 = this1;
	dest1.x = centre.x - eye.x;
	dest1.y = centre.y - eye.y;
	dest1.z = centre.z - eye.z;
	var f = dest1;
	var length = Math.sqrt(f.x * f.x + f.y * f.y + f.z * f.z);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	f.x *= mult;
	f.y *= mult;
	f.z *= mult;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	var dest2 = this2;
	var x = f.y * up.z - f.z * up.y;
	var y = f.z * up.x - f.x * up.z;
	var z = f.x * up.y - f.y * up.x;
	var this3 = new glm_Vec3Base();
	this3.x = x;
	this3.y = y;
	this3.z = z;
	dest2 = this3;
	var s = dest2;
	var length1 = Math.sqrt(s.x * s.x + s.y * s.y + s.z * s.z);
	var mult1 = 0;
	if(length1 >= glm_GLM.EPSILON) {
		mult1 = 1 / length1;
	}
	s.x *= mult1;
	s.y *= mult1;
	s.z *= mult1;
	var this4 = new glm_Vec3Base();
	this4.x = 0;
	this4.y = 0;
	this4.z = 0;
	var dest3 = this4;
	var x1 = s.y * f.z - s.z * f.y;
	var y1 = s.z * f.x - s.x * f.z;
	var z1 = s.x * f.y - s.y * f.x;
	var this5 = new glm_Vec3Base();
	this5.x = x1;
	this5.y = y1;
	this5.z = z1;
	dest3 = this5;
	var u = dest3;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	dest._00 = s.x;
	dest._10 = s.y;
	dest._20 = s.z;
	dest._01 = u.x;
	dest._11 = u.y;
	dest._21 = u.z;
	dest._02 = -f.x;
	dest._12 = -f.y;
	dest._22 = -f.z;
	dest._30 = -(s.x * eye.x + s.y * eye.y + s.z * eye.z);
	dest._31 = -(u.x * eye.x + u.y * eye.y + u.z * eye.z);
	dest._32 = f.x * eye.x + f.y * eye.y + f.z * eye.z;
	return dest;
};
glm_GLM.perspective = function(fovy,aspectRatio,near,far,dest) {
	var f = 1 / Math.tan(fovy / 2);
	var nf = 1 / (near - far);
	dest._00 = f / aspectRatio;
	dest._01 = 0;
	dest._02 = 0;
	dest._03 = 0;
	dest._10 = 0;
	dest._11 = f;
	dest._12 = 0;
	dest._13 = 0;
	dest._20 = 0;
	dest._21 = 0;
	dest._22 = (far + near) * nf;
	dest._23 = -1;
	dest._30 = 0;
	dest._31 = 0;
	dest._32 = 2 * far * near * nf;
	dest._33 = 0;
	return dest;
};
glm_GLM.orthographic = function(left,right,bottom,top,near,far,dest) {
	if(far == null) {
		far = 1;
	}
	if(near == null) {
		near = -1;
	}
	var rl = 1 / (right - left);
	var tb = 1 / (top - bottom);
	var fn = 1 / (far - near);
	dest._00 = 2 * rl;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = -1 * (left + right) * rl;
	dest._01 = 0;
	dest._11 = 2 * tb;
	dest._21 = 0;
	dest._31 = -1 * (top + bottom) * tb;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = -2 * fn;
	dest._32 = -1 * (far + near) * fn;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	return dest;
};
glm_GLM.frustum = function(left,right,bottom,top,near,far,dest) {
	if(far == null) {
		far = 1;
	}
	if(near == null) {
		near = -1;
	}
	var rl = 1 / (right - left);
	var tb = 1 / (top - bottom);
	var nf = 1 / (near - far);
	dest._00 = near * 2 * rl;
	dest._01 = 0;
	dest._02 = 0;
	dest._03 = 0;
	dest._10 = 0;
	dest._11 = near * 2 * tb;
	dest._12 = 0;
	dest._13 = 0;
	dest._20 = (right + left) * tb;
	dest._21 = (top + bottom) * tb;
	dest._22 = (far + near) * nf;
	dest._23 = -1;
	dest._30 = 0;
	dest._31 = 0;
	dest._32 = far * near * 2 * nf;
	dest._33 = 0;
	return dest;
};
var glm_Mat3Base = $hx_exports["glm"]["Mat3Base"] = function() {
};
glm_Mat3Base.__name__ = true;
glm_Mat3Base.prototype = {
	__class__: glm_Mat3Base
};
var glm__$Mat3_Mat3_$Impl_$ = $hx_exports["glm"]["Mat3Util"] = {};
glm__$Mat3_Mat3_$Impl_$.__name__ = true;
glm__$Mat3_Mat3_$Impl_$._new = function(_r0c0,_r0c1,_r0c2,_r1c0,_r1c1,_r1c2,_r2c0,_r2c1,_r2c2) {
	if(_r2c2 == null) {
		_r2c2 = 0;
	}
	if(_r2c1 == null) {
		_r2c1 = 0;
	}
	if(_r2c0 == null) {
		_r2c0 = 0;
	}
	if(_r1c2 == null) {
		_r1c2 = 0;
	}
	if(_r1c1 == null) {
		_r1c1 = 0;
	}
	if(_r1c0 == null) {
		_r1c0 = 0;
	}
	if(_r0c2 == null) {
		_r0c2 = 0;
	}
	if(_r0c1 == null) {
		_r0c1 = 0;
	}
	if(_r0c0 == null) {
		_r0c0 = 0;
	}
	var this1 = new glm_Mat3Base();
	this1._00 = _r0c0;
	this1._01 = _r1c0;
	this1._02 = _r2c0;
	this1._10 = _r0c1;
	this1._11 = _r1c1;
	this1._12 = _r2c1;
	this1._20 = _r0c2;
	this1._21 = _r1c2;
	this1._22 = _r2c2;
	return this1;
};
glm__$Mat3_Mat3_$Impl_$.get_r0c0 = function(this1) {
	return this1._00;
};
glm__$Mat3_Mat3_$Impl_$.set_r0c0 = function(this1,v) {
	return this1._00 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r1c0 = function(this1) {
	return this1._01;
};
glm__$Mat3_Mat3_$Impl_$.set_r1c0 = function(this1,v) {
	return this1._01 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r2c0 = function(this1) {
	return this1._02;
};
glm__$Mat3_Mat3_$Impl_$.set_r2c0 = function(this1,v) {
	return this1._02 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r0c1 = function(this1) {
	return this1._10;
};
glm__$Mat3_Mat3_$Impl_$.set_r0c1 = function(this1,v) {
	return this1._10 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r1c1 = function(this1) {
	return this1._11;
};
glm__$Mat3_Mat3_$Impl_$.set_r1c1 = function(this1,v) {
	return this1._11 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r2c1 = function(this1) {
	return this1._12;
};
glm__$Mat3_Mat3_$Impl_$.set_r2c1 = function(this1,v) {
	return this1._12 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r0c2 = function(this1) {
	return this1._20;
};
glm__$Mat3_Mat3_$Impl_$.set_r0c2 = function(this1,v) {
	return this1._20 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r1c2 = function(this1) {
	return this1._21;
};
glm__$Mat3_Mat3_$Impl_$.set_r1c2 = function(this1,v) {
	return this1._21 = v;
};
glm__$Mat3_Mat3_$Impl_$.get_r2c2 = function(this1) {
	return this1._22;
};
glm__$Mat3_Mat3_$Impl_$.set_r2c2 = function(this1,v) {
	return this1._22 = v;
};
glm__$Mat3_Mat3_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1._00;
	case 1:
		return this1._01;
	case 2:
		return this1._02;
	case 3:
		return this1._10;
	case 4:
		return this1._11;
	case 5:
		return this1._12;
	case 6:
		return this1._20;
	case 7:
		return this1._21;
	case 8:
		return this1._22;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-8)!");
	}
};
glm__$Mat3_Mat3_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1._00 = value;
	case 1:
		return this1._01 = value;
	case 2:
		return this1._02 = value;
	case 3:
		return this1._10 = value;
	case 4:
		return this1._11 = value;
	case 5:
		return this1._12 = value;
	case 6:
		return this1._20 = value;
	case 7:
		return this1._21 = value;
	case 8:
		return this1._22 = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-8)!");
	}
};
glm__$Mat3_Mat3_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1._00 - b._00) >= glm_GLM.EPSILON || Math.abs(this1._10 - b._10) >= glm_GLM.EPSILON || Math.abs(this1._20 - b._20) >= glm_GLM.EPSILON || Math.abs(this1._01 - b._01) >= glm_GLM.EPSILON || Math.abs(this1._11 - b._11) >= glm_GLM.EPSILON || Math.abs(this1._21 - b._21) >= glm_GLM.EPSILON || Math.abs(this1._02 - b._02) >= glm_GLM.EPSILON || Math.abs(this1._12 - b._12) >= glm_GLM.EPSILON || Math.abs(this1._22 - b._22) >= glm_GLM.EPSILON);
};
glm__$Mat3_Mat3_$Impl_$.toString = function(this1) {
	return "[" + this1._00 + ", " + this1._10 + ", " + this1._20 + "]\n" + ("[" + this1._01 + ", " + this1._11 + ", " + this1._21 + "]\n") + ("[" + this1._02 + ", " + this1._12 + ", " + this1._22 + "]\n");
};
glm__$Mat3_Mat3_$Impl_$.identity = function(dest) {
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.copy = function(src,dest) {
	dest._00 = src._00;
	dest._10 = src._10;
	dest._20 = src._20;
	dest._01 = src._01;
	dest._11 = src._11;
	dest._21 = src._21;
	dest._02 = src._02;
	dest._12 = src._12;
	dest._22 = src._22;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.transpose = function(src,dest) {
	var src_r1c0 = src._01;
	var src_r2c0 = src._02;
	var src_r2c1 = src._12;
	dest._00 = src._00;
	dest._01 = src._10;
	dest._02 = src._20;
	dest._10 = src_r1c0;
	dest._11 = src._11;
	dest._12 = src._21;
	dest._20 = src_r2c0;
	dest._21 = src_r2c1;
	dest._22 = src._22;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.cofactor = function(a,b,c,d) {
	return a * d - b * c;
};
glm__$Mat3_Mat3_$Impl_$.determinant = function(src) {
	var c00 = src._11 * src._22 - src._21 * src._12;
	var c01 = src._10 * src._22 - src._20 * src._12;
	var c02 = src._10 * src._21 - src._20 * src._11;
	return src._00 * c00 - src._01 * c01 + src._02 * c02;
};
glm__$Mat3_Mat3_$Impl_$.invert = function(src,dest) {
	var c00 = src._11 * src._22 - src._21 * src._12;
	var c01 = src._10 * src._22 - src._20 * src._12;
	var c02 = src._10 * src._21 - src._20 * src._11;
	var det = src._00 * c00 - src._01 * c01 + src._02 * c02;
	if(Math.abs(det) < glm_GLM.EPSILON) {
		throw new js__$Boot_HaxeError("determinant is too small");
	}
	var c10 = src._01 * src._22 - src._21 * src._02;
	var c11 = src._00 * src._22 - src._20 * src._02;
	var c12 = src._00 * src._21 - src._20 * src._01;
	var c20 = src._01 * src._12 - src._11 * src._02;
	var c21 = src._00 * src._12 - src._10 * src._02;
	var c22 = src._00 * src._11 - src._10 * src._01;
	var invdet = 1.0 / det;
	dest._00 = c00 * invdet;
	dest._01 = -c01 * invdet;
	dest._02 = c02 * invdet;
	dest._10 = -c10 * invdet;
	dest._11 = c11 * invdet;
	dest._12 = -c12 * invdet;
	dest._20 = c20 * invdet;
	dest._21 = -c21 * invdet;
	dest._22 = c22 * invdet;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.multMat = function(a,b,dest) {
	var _a;
	var _b;
	if(dest == a) {
		var this1 = new glm_Mat3Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		var dest1 = this1;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._20 = a._20;
		dest1._01 = a._01;
		dest1._11 = a._11;
		dest1._21 = a._21;
		dest1._02 = a._02;
		dest1._12 = a._12;
		dest1._22 = a._22;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this2 = new glm_Mat3Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		var dest2 = this2;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._20 = b._20;
		dest2._01 = b._01;
		dest2._11 = b._11;
		dest2._21 = b._21;
		dest2._02 = b._02;
		dest2._12 = b._12;
		dest2._22 = b._22;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12;
	dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12;
	dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22;
	dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02;
	dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12;
	dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.multMatOp = function(a,b) {
	var this1 = new glm_Mat3Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	var dest = this1;
	var _a;
	var _b;
	if(dest == a) {
		var this2 = new glm_Mat3Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		var dest1 = this2;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._20 = a._20;
		dest1._01 = a._01;
		dest1._11 = a._11;
		dest1._21 = a._21;
		dest1._02 = a._02;
		dest1._12 = a._12;
		dest1._22 = a._22;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this3 = new glm_Mat3Base();
		this3._00 = 0;
		this3._01 = 0;
		this3._02 = 0;
		this3._10 = 0;
		this3._11 = 0;
		this3._12 = 0;
		this3._20 = 0;
		this3._21 = 0;
		this3._22 = 0;
		var dest2 = this3;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._20 = b._20;
		dest2._01 = b._01;
		dest2._11 = b._11;
		dest2._21 = b._21;
		dest2._02 = b._02;
		dest2._12 = b._12;
		dest2._22 = b._22;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12;
	dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12;
	dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22;
	dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02;
	dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12;
	dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.multVec = function(m,v,dest) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	dest.x = m._00 * x + m._10 * y + m._20 * z;
	dest.y = m._01 * x + m._11 * y + m._21 * z;
	dest.z = m._02 * x + m._12 * y + m._22 * z;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.multVecOp = function(m,v) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	var x = v.x;
	var y = v.y;
	var z = v.z;
	dest.x = m._00 * x + m._10 * y + m._20 * z;
	dest.y = m._01 * x + m._11 * y + m._21 * z;
	dest.z = m._02 * x + m._12 * y + m._22 * z;
	return dest;
};
glm__$Mat3_Mat3_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Mat3Base();
	this1._00 = arr[0];
	this1._01 = arr[1];
	this1._02 = arr[2];
	this1._10 = arr[3];
	this1._11 = arr[4];
	this1._12 = arr[5];
	this1._20 = arr[6];
	this1._21 = arr[7];
	this1._22 = arr[8];
	return this1;
};
glm__$Mat3_Mat3_$Impl_$.toFloatArray = function(this1) {
	return [this1._00,this1._01,this1._02,this1._10,this1._11,this1._12,this1._20,this1._21,this1._22];
};
var glm_Mat4Base = $hx_exports["glm"]["Mat4Base"] = function() {
};
glm_Mat4Base.__name__ = true;
glm_Mat4Base.prototype = {
	__class__: glm_Mat4Base
};
var glm__$Mat4_Mat4_$Impl_$ = $hx_exports["glm"]["Mat4Util"] = {};
glm__$Mat4_Mat4_$Impl_$.__name__ = true;
glm__$Mat4_Mat4_$Impl_$._new = function(_r0c0,_r0c1,_r0c2,_r0c3,_r1c0,_r1c1,_r1c2,_r1c3,_r2c0,_r2c1,_r2c2,_r2c3,_r3c0,_r3c1,_r3c2,_r3c3) {
	if(_r3c3 == null) {
		_r3c3 = 0;
	}
	if(_r3c2 == null) {
		_r3c2 = 0;
	}
	if(_r3c1 == null) {
		_r3c1 = 0;
	}
	if(_r3c0 == null) {
		_r3c0 = 0;
	}
	if(_r2c3 == null) {
		_r2c3 = 0;
	}
	if(_r2c2 == null) {
		_r2c2 = 0;
	}
	if(_r2c1 == null) {
		_r2c1 = 0;
	}
	if(_r2c0 == null) {
		_r2c0 = 0;
	}
	if(_r1c3 == null) {
		_r1c3 = 0;
	}
	if(_r1c2 == null) {
		_r1c2 = 0;
	}
	if(_r1c1 == null) {
		_r1c1 = 0;
	}
	if(_r1c0 == null) {
		_r1c0 = 0;
	}
	if(_r0c3 == null) {
		_r0c3 = 0;
	}
	if(_r0c2 == null) {
		_r0c2 = 0;
	}
	if(_r0c1 == null) {
		_r0c1 = 0;
	}
	if(_r0c0 == null) {
		_r0c0 = 0;
	}
	var this1 = new glm_Mat4Base();
	this1._00 = _r0c0;
	this1._01 = _r1c0;
	this1._02 = _r2c0;
	this1._03 = _r3c0;
	this1._10 = _r0c1;
	this1._11 = _r1c1;
	this1._12 = _r2c1;
	this1._13 = _r3c1;
	this1._20 = _r0c2;
	this1._21 = _r1c2;
	this1._22 = _r2c2;
	this1._23 = _r3c2;
	this1._30 = _r0c3;
	this1._31 = _r1c3;
	this1._32 = _r2c3;
	this1._33 = _r3c3;
	return this1;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c0 = function(this1) {
	return this1._00;
};
glm__$Mat4_Mat4_$Impl_$.set_r0c0 = function(this1,v) {
	return this1._00 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c0 = function(this1) {
	return this1._01;
};
glm__$Mat4_Mat4_$Impl_$.set_r1c0 = function(this1,v) {
	return this1._01 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c0 = function(this1) {
	return this1._02;
};
glm__$Mat4_Mat4_$Impl_$.set_r2c0 = function(this1,v) {
	return this1._02 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c0 = function(this1) {
	return this1._03;
};
glm__$Mat4_Mat4_$Impl_$.set_r3c0 = function(this1,v) {
	return this1._03 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c1 = function(this1) {
	return this1._10;
};
glm__$Mat4_Mat4_$Impl_$.set_r0c1 = function(this1,v) {
	return this1._10 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c1 = function(this1) {
	return this1._11;
};
glm__$Mat4_Mat4_$Impl_$.set_r1c1 = function(this1,v) {
	return this1._11 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c1 = function(this1) {
	return this1._12;
};
glm__$Mat4_Mat4_$Impl_$.set_r2c1 = function(this1,v) {
	return this1._12 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c1 = function(this1) {
	return this1._13;
};
glm__$Mat4_Mat4_$Impl_$.set_r3c1 = function(this1,v) {
	return this1._13 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c2 = function(this1) {
	return this1._20;
};
glm__$Mat4_Mat4_$Impl_$.set_r0c2 = function(this1,v) {
	return this1._20 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c2 = function(this1) {
	return this1._21;
};
glm__$Mat4_Mat4_$Impl_$.set_r1c2 = function(this1,v) {
	return this1._21 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c2 = function(this1) {
	return this1._22;
};
glm__$Mat4_Mat4_$Impl_$.set_r2c2 = function(this1,v) {
	return this1._22 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c2 = function(this1) {
	return this1._23;
};
glm__$Mat4_Mat4_$Impl_$.set_r3c2 = function(this1,v) {
	return this1._23 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c3 = function(this1) {
	return this1._30;
};
glm__$Mat4_Mat4_$Impl_$.set_r0c3 = function(this1,v) {
	return this1._30 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c3 = function(this1) {
	return this1._31;
};
glm__$Mat4_Mat4_$Impl_$.set_r1c3 = function(this1,v) {
	return this1._31 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c3 = function(this1) {
	return this1._32;
};
glm__$Mat4_Mat4_$Impl_$.set_r2c3 = function(this1,v) {
	return this1._32 = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c3 = function(this1) {
	return this1._33;
};
glm__$Mat4_Mat4_$Impl_$.set_r3c3 = function(this1,v) {
	return this1._33 = v;
};
glm__$Mat4_Mat4_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1._00;
	case 1:
		return this1._01;
	case 2:
		return this1._02;
	case 3:
		return this1._03;
	case 4:
		return this1._10;
	case 5:
		return this1._11;
	case 6:
		return this1._12;
	case 7:
		return this1._13;
	case 8:
		return this1._20;
	case 9:
		return this1._21;
	case 10:
		return this1._22;
	case 11:
		return this1._23;
	case 12:
		return this1._30;
	case 13:
		return this1._31;
	case 14:
		return this1._32;
	case 15:
		return this1._33;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-15)!");
	}
};
glm__$Mat4_Mat4_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1._00 = value;
	case 1:
		return this1._01 = value;
	case 2:
		return this1._02 = value;
	case 3:
		return this1._03 = value;
	case 4:
		return this1._10 = value;
	case 5:
		return this1._11 = value;
	case 6:
		return this1._12 = value;
	case 7:
		return this1._13 = value;
	case 8:
		return this1._20 = value;
	case 9:
		return this1._21 = value;
	case 10:
		return this1._22 = value;
	case 11:
		return this1._23 = value;
	case 12:
		return this1._30 = value;
	case 13:
		return this1._31 = value;
	case 14:
		return this1._32 = value;
	case 15:
		return this1._33 = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-15)!");
	}
};
glm__$Mat4_Mat4_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1._00 - b._00) >= glm_GLM.EPSILON || Math.abs(this1._10 - b._10) >= glm_GLM.EPSILON || Math.abs(this1._20 - b._20) >= glm_GLM.EPSILON || Math.abs(this1._30 - b._30) >= glm_GLM.EPSILON || Math.abs(this1._01 - b._01) >= glm_GLM.EPSILON || Math.abs(this1._11 - b._11) >= glm_GLM.EPSILON || Math.abs(this1._21 - b._21) >= glm_GLM.EPSILON || Math.abs(this1._31 - b._31) >= glm_GLM.EPSILON || Math.abs(this1._02 - b._02) >= glm_GLM.EPSILON || Math.abs(this1._12 - b._12) >= glm_GLM.EPSILON || Math.abs(this1._22 - b._22) >= glm_GLM.EPSILON || Math.abs(this1._32 - b._32) >= glm_GLM.EPSILON || Math.abs(this1._03 - b._03) >= glm_GLM.EPSILON || Math.abs(this1._13 - b._13) >= glm_GLM.EPSILON || Math.abs(this1._23 - b._23) >= glm_GLM.EPSILON || Math.abs(this1._33 - b._33) >= glm_GLM.EPSILON);
};
glm__$Mat4_Mat4_$Impl_$.toString = function(this1) {
	return "[" + this1._00 + ", " + this1._10 + ", " + this1._20 + ", " + this1._30 + "]\n" + ("[" + this1._01 + ", " + this1._11 + ", " + this1._21 + ", " + this1._31 + "]\n") + ("[" + this1._02 + ", " + this1._12 + ", " + this1._22 + ", " + this1._32 + "]\n") + ("[" + this1._03 + ", " + this1._13 + ", " + this1._23 + ", " + this1._33 + "]\n");
};
glm__$Mat4_Mat4_$Impl_$.identity = function(dest) {
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.copy = function(src,dest) {
	dest._00 = src._00;
	dest._10 = src._10;
	dest._20 = src._20;
	dest._30 = src._30;
	dest._01 = src._01;
	dest._11 = src._11;
	dest._21 = src._21;
	dest._31 = src._31;
	dest._02 = src._02;
	dest._12 = src._12;
	dest._22 = src._22;
	dest._32 = src._32;
	dest._03 = src._03;
	dest._13 = src._13;
	dest._23 = src._23;
	dest._33 = src._33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.transpose = function(src,dest) {
	var src_r1c0 = src._01;
	var src_r2c0 = src._02;
	var src_r2c1 = src._12;
	var src_r3c0 = src._03;
	var src_r3c1 = src._13;
	var src_r3c2 = src._23;
	dest._00 = src._00;
	dest._01 = src._10;
	dest._02 = src._20;
	dest._03 = src._30;
	dest._10 = src_r1c0;
	dest._11 = src._11;
	dest._12 = src._21;
	dest._13 = src._31;
	dest._20 = src_r2c0;
	dest._21 = src_r2c1;
	dest._22 = src._22;
	dest._23 = src._32;
	dest._30 = src_r3c0;
	dest._31 = src_r3c1;
	dest._32 = src_r3c2;
	dest._33 = src._33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.determinant = function(src) {
	var a00 = src._00;
	var a01 = src._01;
	var a02 = src._02;
	var a03 = src._03;
	var a10 = src._10;
	var a11 = src._11;
	var a12 = src._12;
	var a13 = src._13;
	var a20 = src._20;
	var a21 = src._21;
	var a22 = src._22;
	var a23 = src._23;
	var a30 = src._30;
	var a31 = src._31;
	var a32 = src._32;
	var a33 = src._33;
	var b00 = a00 * a11 - a01 * a10;
	var b01 = a00 * a12 - a02 * a10;
	var b02 = a00 * a13 - a03 * a10;
	var b03 = a01 * a12 - a02 * a11;
	var b04 = a01 * a13 - a03 * a11;
	var b05 = a02 * a13 - a03 * a12;
	var b06 = a20 * a31 - a21 * a30;
	var b07 = a20 * a32 - a22 * a30;
	var b08 = a20 * a33 - a23 * a30;
	var b09 = a21 * a32 - a22 * a31;
	var b10 = a21 * a33 - a23 * a31;
	var b11 = a22 * a33 - a23 * a32;
	return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};
glm__$Mat4_Mat4_$Impl_$.invert = function(src,dest) {
	var a00 = src._00;
	var a01 = src._10;
	var a02 = src._20;
	var a03 = src._30;
	var a10 = src._01;
	var a11 = src._11;
	var a12 = src._21;
	var a13 = src._31;
	var a20 = src._02;
	var a21 = src._12;
	var a22 = src._22;
	var a23 = src._32;
	var a30 = src._03;
	var a31 = src._13;
	var a32 = src._23;
	var a33 = src._33;
	var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
	var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
	var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
	var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
	var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
	if(Math.abs(det) <= glm_GLM.EPSILON) {
		throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
	}
	var idet = 1 / det;
	dest._00 = t00 * idet;
	dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
	dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
	dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
	dest._10 = t01 * idet;
	dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
	dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
	dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
	dest._20 = t02 * idet;
	dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
	dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
	dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
	dest._30 = t03 * idet;
	dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
	dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
	dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multMat = function(a,b,dest) {
	var _a;
	var _b;
	if(dest == a) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest1 = this1;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._20 = a._20;
		dest1._30 = a._30;
		dest1._01 = a._01;
		dest1._11 = a._11;
		dest1._21 = a._21;
		dest1._31 = a._31;
		dest1._02 = a._02;
		dest1._12 = a._12;
		dest1._22 = a._22;
		dest1._32 = a._32;
		dest1._03 = a._03;
		dest1._13 = a._13;
		dest1._23 = a._23;
		dest1._33 = a._33;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest2 = this2;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._20 = b._20;
		dest2._30 = b._30;
		dest2._01 = b._01;
		dest2._11 = b._11;
		dest2._21 = b._21;
		dest2._31 = b._31;
		dest2._02 = b._02;
		dest2._12 = b._12;
		dest2._22 = b._22;
		dest2._32 = b._32;
		dest2._03 = b._03;
		dest2._13 = b._13;
		dest2._23 = b._23;
		dest2._33 = b._33;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
	dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
	dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
	dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
	dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
	dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
	dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
	dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
	dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
	dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
	dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
	dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
	dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multMatOp = function(a,b) {
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	var _a;
	var _b;
	if(dest == a) {
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		dest1._00 = a._00;
		dest1._10 = a._10;
		dest1._20 = a._20;
		dest1._30 = a._30;
		dest1._01 = a._01;
		dest1._11 = a._11;
		dest1._21 = a._21;
		dest1._31 = a._31;
		dest1._02 = a._02;
		dest1._12 = a._12;
		dest1._22 = a._22;
		dest1._32 = a._32;
		dest1._03 = a._03;
		dest1._13 = a._13;
		dest1._23 = a._23;
		dest1._33 = a._33;
		_a = dest1;
		_b = b;
	} else if(dest == b) {
		_a = a;
		var this3 = new glm_Mat4Base();
		this3._00 = 0;
		this3._01 = 0;
		this3._02 = 0;
		this3._03 = 0;
		this3._10 = 0;
		this3._11 = 0;
		this3._12 = 0;
		this3._13 = 0;
		this3._20 = 0;
		this3._21 = 0;
		this3._22 = 0;
		this3._23 = 0;
		this3._30 = 0;
		this3._31 = 0;
		this3._32 = 0;
		this3._33 = 0;
		var dest2 = this3;
		dest2._00 = b._00;
		dest2._10 = b._10;
		dest2._20 = b._20;
		dest2._30 = b._30;
		dest2._01 = b._01;
		dest2._11 = b._11;
		dest2._21 = b._21;
		dest2._31 = b._31;
		dest2._02 = b._02;
		dest2._12 = b._12;
		dest2._22 = b._22;
		dest2._32 = b._32;
		dest2._03 = b._03;
		dest2._13 = b._13;
		dest2._23 = b._23;
		dest2._33 = b._33;
		_b = dest2;
	} else {
		_a = a;
		_b = b;
	}
	dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
	dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
	dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
	dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
	dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
	dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
	dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
	dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
	dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
	dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
	dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
	dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
	dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
	dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
	dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
	dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multVec = function(m,v,dest) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	var w = v.w;
	dest.x = m._00 * x + m._10 * y + m._20 * z + m._30 * w;
	dest.y = m._01 * x + m._11 * y + m._21 * z + m._31 * w;
	dest.z = m._02 * x + m._12 * y + m._22 * z + m._32 * w;
	dest.w = m._03 * x + m._13 * y + m._23 * z + m._33 * w;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multVecOp = function(m,v) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	var x = v.x;
	var y = v.y;
	var z = v.z;
	var w = v.w;
	dest.x = m._00 * x + m._10 * y + m._20 * z + m._30 * w;
	dest.y = m._01 * x + m._11 * y + m._21 * z + m._31 * w;
	dest.z = m._02 * x + m._12 * y + m._22 * z + m._32 * w;
	dest.w = m._03 * x + m._13 * y + m._23 * z + m._33 * w;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Mat4Base();
	this1._00 = arr[0];
	this1._01 = arr[1];
	this1._02 = arr[2];
	this1._03 = arr[3];
	this1._10 = arr[4];
	this1._11 = arr[5];
	this1._12 = arr[6];
	this1._13 = arr[7];
	this1._20 = arr[8];
	this1._21 = arr[9];
	this1._22 = arr[10];
	this1._23 = arr[11];
	this1._30 = arr[12];
	this1._31 = arr[13];
	this1._32 = arr[14];
	this1._33 = arr[15];
	return this1;
};
glm__$Mat4_Mat4_$Impl_$.toFloatArray = function(this1) {
	return [this1._00,this1._01,this1._02,this1._03,this1._10,this1._11,this1._12,this1._13,this1._20,this1._21,this1._22,this1._23,this1._30,this1._31,this1._32,this1._33];
};
var glm_QuatBase = $hx_exports["glm"]["QuatBase"] = function() {
};
glm_QuatBase.__name__ = true;
glm_QuatBase.prototype = {
	__class__: glm_QuatBase
};
var glm__$Quat_Quat_$Impl_$ = $hx_exports["glm"]["QuatUtil"] = {};
glm__$Quat_Quat_$Impl_$.__name__ = true;
glm__$Quat_Quat_$Impl_$.get_x = function(this1) {
	return this1.x;
};
glm__$Quat_Quat_$Impl_$.set_x = function(this1,v) {
	return this1.x = v;
};
glm__$Quat_Quat_$Impl_$.get_y = function(this1) {
	return this1.y;
};
glm__$Quat_Quat_$Impl_$.set_y = function(this1,v) {
	return this1.y = v;
};
glm__$Quat_Quat_$Impl_$.get_z = function(this1) {
	return this1.z;
};
glm__$Quat_Quat_$Impl_$.set_z = function(this1,v) {
	return this1.z = v;
};
glm__$Quat_Quat_$Impl_$.get_w = function(this1) {
	return this1.w;
};
glm__$Quat_Quat_$Impl_$.set_w = function(this1,v) {
	return this1.w = v;
};
glm__$Quat_Quat_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	case 3:
		return this1.w;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Quat_Quat_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1.x = value;
	case 1:
		return this1.y = value;
	case 2:
		return this1.z = value;
	case 3:
		return this1.w = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Quat_Quat_$Impl_$._new = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new glm_QuatBase();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	this1.w = w;
	return this1;
};
glm__$Quat_Quat_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON || Math.abs(this1.z - b.z) >= glm_GLM.EPSILON || Math.abs(this1.w - b.w) >= glm_GLM.EPSILON);
};
glm__$Quat_Quat_$Impl_$.toString = function(this1) {
	return "{" + this1.x + ", " + this1.y + ", " + this1.z + ", " + this1.w + "}";
};
glm__$Quat_Quat_$Impl_$.lengthSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
glm__$Quat_Quat_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
};
glm__$Quat_Quat_$Impl_$.normalize = function(q,dest) {
	var length = Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest.x = q.x * mult;
	dest.y = q.y * mult;
	dest.z = q.z * mult;
	dest.w = q.w * mult;
	return dest;
};
glm__$Quat_Quat_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
glm__$Quat_Quat_$Impl_$.identity = function(dest) {
	dest.x = 0;
	dest.y = 0;
	dest.z = 0;
	dest.w = 1;
	return dest;
};
glm__$Quat_Quat_$Impl_$.copy = function(src,dest) {
	dest.x = src.x;
	dest.y = src.y;
	dest.z = src.z;
	dest.w = src.w;
	return dest;
};
glm__$Quat_Quat_$Impl_$.axisAngle = function(axis,angle,dest) {
	angle *= 0.5;
	var s = Math.sin(angle);
	dest.x = s * axis.x;
	dest.y = s * axis.y;
	dest.z = s * axis.z;
	dest.w = Math.cos(angle);
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyQuats = function(a,b,dest) {
	var ax = a.x;
	var ay = a.y;
	var az = a.z;
	var aw = a.w;
	var bx = b.x;
	var by = b.y;
	var bz = b.z;
	var bw = b.w;
	dest.x = ax * bw + aw * bx + ay * bz - az * by;
	dest.y = ay * bw + aw * by + az * bx - ax * bz;
	dest.z = az * bw + aw * bz + ax * by - ay * bx;
	dest.w = aw * bw - ax * bx - ay * by - az * bz;
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyQuatsOp = function(a,b) {
	var this1 = new glm_QuatBase();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 1;
	var dest = this1;
	var ax = a.x;
	var ay = a.y;
	var az = a.z;
	var aw = a.w;
	var bx = b.x;
	var by = b.y;
	var bz = b.z;
	var bw = b.w;
	dest.x = ax * bw + aw * bx + ay * bz - az * by;
	dest.y = ay * bw + aw * by + az * bx - ax * bz;
	dest.z = az * bw + aw * bz + ax * by - ay * bx;
	dest.w = aw * bw - ax * bx - ay * by - az * bz;
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	dest.w = a.w * s;
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new glm_QuatBase();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 1;
	var dest = this1;
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	dest.w = a.w * s;
	return dest;
};
glm__$Quat_Quat_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a.x;
	dest.x = a1 + t * (b.x - a1);
	var a2 = a.y;
	dest.y = a2 + t * (b.y - a2);
	var a3 = a.z;
	dest.z = a3 + t * (b.z - a3);
	var a4 = a.w;
	dest.w = a4 + t * (b.w - a4);
	return dest;
};
glm__$Quat_Quat_$Impl_$.slerp = function(a,b,t,dest) {
	var bx = b.x;
	var by = b.y;
	var bz = b.z;
	var bw = b.w;
	var cosTheta = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	if(cosTheta < 0) {
		cosTheta = -cosTheta;
		bx = -bx;
		by = -by;
		bz = -bz;
		bw = -bw;
	}
	if(cosTheta > 1 - glm_GLM.EPSILON) {
		var a1 = a.x;
		dest.x = a1 + t * (b.x - a1);
		var a2 = a.y;
		dest.y = a2 + t * (b.y - a2);
		var a3 = a.z;
		dest.z = a3 + t * (b.z - a3);
		var a4 = a.w;
		dest.w = a4 + t * (b.w - a4);
		return dest;
	} else {
		var angle = Math.acos(cosTheta);
		var sa = 1 / Math.sin(angle);
		var i = Math.sin((1 - t) * angle);
		var j = Math.sin(t * angle);
		dest.x = (i * a.x + j * bx) * sa;
		dest.y = (i * a.y + j * by) * sa;
		dest.z = (i * a.z + j * bz) * sa;
		dest.w = (i * a.w + j * bw) * sa;
		return dest;
	}
};
glm__$Quat_Quat_$Impl_$.invert = function(q,dest) {
	var x = q.x;
	var y = q.y;
	var z = q.z;
	var w = q.w;
	var d = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;
	var oneOverD = d < glm_GLM.EPSILON ? 0 : 1 / d;
	dest.x = -x * oneOverD;
	dest.y = -y * oneOverD;
	dest.z = -z * oneOverD;
	dest.w = w * oneOverD;
	return dest;
};
glm__$Quat_Quat_$Impl_$.conjugate = function(q,dest) {
	dest.x = -1 * q.x;
	dest.y = -1 * q.y;
	dest.z = -1 * q.z;
	dest.w = q.w;
	return dest;
};
glm__$Quat_Quat_$Impl_$.fromEuler = function(x,y,z,dest) {
	var c1 = Math.cos(x / 2);
	var c2 = Math.cos(y / 2);
	var c3 = Math.cos(z / 2);
	var s1 = Math.sin(x / 2);
	var s2 = Math.sin(y / 2);
	var s3 = Math.sin(z / 2);
	dest.x = s1 * c2 * c3 + c1 * s2 * s3;
	dest.y = c1 * s2 * c3 - s1 * c2 * s3;
	dest.z = c1 * c2 * s3 + s1 * s2 * c3;
	dest.w = c1 * c2 * c3 - s1 * s2 * s3;
	return dest;
};
glm__$Quat_Quat_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_QuatBase();
	this1.x = arr[0];
	this1.y = arr[1];
	this1.z = arr[2];
	this1.w = arr[3];
	return this1;
};
glm__$Quat_Quat_$Impl_$.toFloatArray = function(this1) {
	return [this1.x,this1.y,this1.z,this1.w];
};
var glm_Vec2Base = $hx_exports["glm"]["Vec2Base"] = function() {
};
glm_Vec2Base.__name__ = true;
glm_Vec2Base.prototype = {
	__class__: glm_Vec2Base
};
var glm__$Vec2_Vec2_$Impl_$ = $hx_exports["glm"]["Vec2Util"] = {};
glm__$Vec2_Vec2_$Impl_$.__name__ = true;
glm__$Vec2_Vec2_$Impl_$.get_x = function(this1) {
	return this1.x;
};
glm__$Vec2_Vec2_$Impl_$.set_x = function(this1,v) {
	return this1.x = v;
};
glm__$Vec2_Vec2_$Impl_$.get_y = function(this1) {
	return this1.y;
};
glm__$Vec2_Vec2_$Impl_$.set_y = function(this1,v) {
	return this1.y = v;
};
glm__$Vec2_Vec2_$Impl_$.get_i = function(this1) {
	return this1.x;
};
glm__$Vec2_Vec2_$Impl_$.set_i = function(this1,v) {
	return this1.x = v;
};
glm__$Vec2_Vec2_$Impl_$.get_j = function(this1) {
	return this1.y;
};
glm__$Vec2_Vec2_$Impl_$.set_j = function(this1,v) {
	return this1.y = v;
};
glm__$Vec2_Vec2_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-1)!");
	}
};
glm__$Vec2_Vec2_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1.x = value;
	case 1:
		return this1.y = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-1)!");
	}
};
glm__$Vec2_Vec2_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new glm_Vec2Base();
	this1.x = x;
	this1.y = y;
	return this1;
};
glm__$Vec2_Vec2_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON);
};
glm__$Vec2_Vec2_$Impl_$.toString = function(this1) {
	return "<" + this1.x + ", " + this1.y + ">";
};
glm__$Vec2_Vec2_$Impl_$.lengthSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y;
};
glm__$Vec2_Vec2_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
glm__$Vec2_Vec2_$Impl_$.copy = function(src,dest) {
	dest.x = src.x;
	dest.y = src.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.setComponents = function(dest,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	dest.x = x;
	dest.y = y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.addVec = function(a,b,dest) {
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.subtractVec = function(a,b,dest) {
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.addVecOp = function(a,b) {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.subtractVecOp = function(a,b) {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.addScalar = function(a,s,dest) {
	dest.x = a.x + s;
	dest.y = a.y + s;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest.x = a.x * s;
	dest.y = a.y * s;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.addScalarOp = function(a,s) {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x + s;
	dest.y = a.y + s;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.subtractScalarOp = function(a,s) {
	var s1 = -s;
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x + s1;
	dest.y = a.y + s1;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x * s;
	dest.y = a.y * s;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.divideScalarOp = function(a,s) {
	var s1 = 1 / s;
	var this1 = new glm_Vec2Base();
	this1.x = 0;
	this1.y = 0;
	var dest = this1;
	dest.x = a.x * s1;
	dest.y = a.y * s1;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.distanceSquared = function(a,b) {
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
};
glm__$Vec2_Vec2_$Impl_$.distance = function(a,b) {
	return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
};
glm__$Vec2_Vec2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
glm__$Vec2_Vec2_$Impl_$.cross = function(a,b,dest) {
	var z = a.x * b.y - a.y * b.x;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = z;
	dest = this1;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.normalize = function(v,dest) {
	var length = Math.sqrt(v.x * v.x + v.y * v.y);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest.x = v.x * mult;
	dest.y = v.y * mult;
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a.x;
	dest.x = a1 + t * (b.x - a1);
	var a2 = a.y;
	dest.y = a2 + t * (b.y - a2);
	return dest;
};
glm__$Vec2_Vec2_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Vec2Base();
	this1.x = arr[0];
	this1.y = arr[1];
	return this1;
};
glm__$Vec2_Vec2_$Impl_$.toFloatArray = function(this1) {
	return [this1.x,this1.y];
};
var glm_Vec3Base = $hx_exports["glm"]["Vec3Base"] = function() {
};
glm_Vec3Base.__name__ = true;
glm_Vec3Base.prototype = {
	__class__: glm_Vec3Base
};
var glm__$Vec3_Vec3_$Impl_$ = $hx_exports["glm"]["Vec3Util"] = {};
glm__$Vec3_Vec3_$Impl_$.__name__ = true;
glm__$Vec3_Vec3_$Impl_$.get_x = function(this1) {
	return this1.x;
};
glm__$Vec3_Vec3_$Impl_$.set_x = function(this1,v) {
	return this1.x = v;
};
glm__$Vec3_Vec3_$Impl_$.get_y = function(this1) {
	return this1.y;
};
glm__$Vec3_Vec3_$Impl_$.set_y = function(this1,v) {
	return this1.y = v;
};
glm__$Vec3_Vec3_$Impl_$.get_z = function(this1) {
	return this1.z;
};
glm__$Vec3_Vec3_$Impl_$.set_z = function(this1,v) {
	return this1.z = v;
};
glm__$Vec3_Vec3_$Impl_$.get_r = function(this1) {
	return this1.x;
};
glm__$Vec3_Vec3_$Impl_$.set_r = function(this1,v) {
	return this1.x = v;
};
glm__$Vec3_Vec3_$Impl_$.get_g = function(this1) {
	return this1.y;
};
glm__$Vec3_Vec3_$Impl_$.set_g = function(this1,v) {
	return this1.y = v;
};
glm__$Vec3_Vec3_$Impl_$.get_b = function(this1) {
	return this1.z;
};
glm__$Vec3_Vec3_$Impl_$.set_b = function(this1,v) {
	return this1.z = v;
};
glm__$Vec3_Vec3_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-2)!");
	}
};
glm__$Vec3_Vec3_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1.x = value;
	case 1:
		return this1.y = value;
	case 2:
		return this1.z = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-2)!");
	}
};
glm__$Vec3_Vec3_$Impl_$._new = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	return this1;
};
glm__$Vec3_Vec3_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON || Math.abs(this1.z - b.z) >= glm_GLM.EPSILON);
};
glm__$Vec3_Vec3_$Impl_$.toString = function(this1) {
	return "<" + this1.x + ", " + this1.y + ", " + this1.z + ">";
};
glm__$Vec3_Vec3_$Impl_$.lengthSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z;
};
glm__$Vec3_Vec3_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
};
glm__$Vec3_Vec3_$Impl_$.copy = function(src,dest) {
	dest.x = src.x;
	dest.y = src.y;
	dest.z = src.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.setComponents = function(dest,x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	dest.x = x;
	dest.y = y;
	dest.z = z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addVec = function(a,b,dest) {
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	dest.z = a.z + b.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.subtractVec = function(a,b,dest) {
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addVecOp = function(a,b) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	dest.z = a.z + b.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.subtractVecOp = function(a,b) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addScalar = function(a,s,dest) {
	dest.x = a.x + s;
	dest.y = a.y + s;
	dest.z = a.z + s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addScalarOp = function(a,s) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x + s;
	dest.y = a.y + s;
	dest.z = a.z + s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.subtractScalarOp = function(a,s) {
	var s1 = -s;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x + s1;
	dest.y = a.y + s1;
	dest.z = a.z + s1;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.divideScalarOp = function(a,s) {
	var s1 = 1 / s;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x * s1;
	dest.y = a.y * s1;
	dest.z = a.z * s1;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.distanceSquared = function(a,b) {
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z);
};
glm__$Vec3_Vec3_$Impl_$.distance = function(a,b) {
	return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));
};
glm__$Vec3_Vec3_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z;
};
glm__$Vec3_Vec3_$Impl_$.cross = function(a,b,dest) {
	var x = a.y * b.z - a.z * b.y;
	var y = a.z * b.x - a.x * b.z;
	var z = a.x * b.y - a.y * b.x;
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	dest = this1;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.normalize = function(v,dest) {
	var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest.x = v.x * mult;
	dest.y = v.y * mult;
	dest.z = v.z * mult;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a.x;
	dest.x = a1 + t * (b.x - a1);
	var a2 = a.y;
	dest.y = a2 + t * (b.y - a2);
	var a3 = a.z;
	dest.z = a3 + t * (b.z - a3);
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Vec3Base();
	this1.x = arr[0];
	this1.y = arr[1];
	this1.z = arr[2];
	return this1;
};
glm__$Vec3_Vec3_$Impl_$.toFloatArray = function(this1) {
	return [this1.x,this1.y,this1.z];
};
var glm_Vec4Base = $hx_exports["glm"]["Vec4Base"] = function() {
};
glm_Vec4Base.__name__ = true;
glm_Vec4Base.prototype = {
	__class__: glm_Vec4Base
};
var glm__$Vec4_Vec4_$Impl_$ = $hx_exports["glm"]["Vec4Util"] = {};
glm__$Vec4_Vec4_$Impl_$.__name__ = true;
glm__$Vec4_Vec4_$Impl_$.get_x = function(this1) {
	return this1.x;
};
glm__$Vec4_Vec4_$Impl_$.set_x = function(this1,v) {
	return this1.x = v;
};
glm__$Vec4_Vec4_$Impl_$.get_y = function(this1) {
	return this1.y;
};
glm__$Vec4_Vec4_$Impl_$.set_y = function(this1,v) {
	return this1.y = v;
};
glm__$Vec4_Vec4_$Impl_$.get_z = function(this1) {
	return this1.z;
};
glm__$Vec4_Vec4_$Impl_$.set_z = function(this1,v) {
	return this1.z = v;
};
glm__$Vec4_Vec4_$Impl_$.get_w = function(this1) {
	return this1.w;
};
glm__$Vec4_Vec4_$Impl_$.set_w = function(this1,v) {
	return this1.w = v;
};
glm__$Vec4_Vec4_$Impl_$.get_r = function(this1) {
	return this1.x;
};
glm__$Vec4_Vec4_$Impl_$.set_r = function(this1,v) {
	return this1.x = v;
};
glm__$Vec4_Vec4_$Impl_$.get_g = function(this1) {
	return this1.y;
};
glm__$Vec4_Vec4_$Impl_$.set_g = function(this1,v) {
	return this1.y = v;
};
glm__$Vec4_Vec4_$Impl_$.get_b = function(this1) {
	return this1.z;
};
glm__$Vec4_Vec4_$Impl_$.set_b = function(this1,v) {
	return this1.z = v;
};
glm__$Vec4_Vec4_$Impl_$.get_a = function(this1) {
	return this1.w;
};
glm__$Vec4_Vec4_$Impl_$.set_a = function(this1,v) {
	return this1.w = v;
};
glm__$Vec4_Vec4_$Impl_$.get = function(this1,key) {
	switch(key) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	case 3:
		return this1.w;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Vec4_Vec4_$Impl_$.set = function(this1,key,value) {
	switch(key) {
	case 0:
		return this1.x = value;
	case 1:
		return this1.y = value;
	case 2:
		return this1.z = value;
	case 3:
		return this1.w = value;
	default:
		throw new js__$Boot_HaxeError("Index " + key + " out of bounds (0-3)!");
	}
};
glm__$Vec4_Vec4_$Impl_$._new = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new glm_Vec4Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	this1.w = w;
	return this1;
};
glm__$Vec4_Vec4_$Impl_$.equals = function(this1,b) {
	return !(Math.abs(this1.x - b.x) >= glm_GLM.EPSILON || Math.abs(this1.y - b.y) >= glm_GLM.EPSILON || Math.abs(this1.z - b.z) >= glm_GLM.EPSILON || Math.abs(this1.w - b.w) >= glm_GLM.EPSILON);
};
glm__$Vec4_Vec4_$Impl_$.toString = function(this1) {
	return "<" + this1.x + ", " + this1.y + ", " + this1.z + ", " + this1.w + ">";
};
glm__$Vec4_Vec4_$Impl_$.lengthSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
glm__$Vec4_Vec4_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
};
glm__$Vec4_Vec4_$Impl_$.copy = function(src,dest) {
	dest.x = src.x;
	dest.y = src.y;
	dest.z = src.z;
	dest.w = src.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.setComponents = function(dest,x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	dest.x = x;
	dest.y = y;
	dest.z = z;
	dest.w = w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addVec = function(a,b,dest) {
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	dest.z = a.z + b.z;
	dest.w = a.w + b.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.subtractVec = function(a,b,dest) {
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	dest.w = a.w - b.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addVecOp = function(a,b) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x + b.x;
	dest.y = a.y + b.y;
	dest.z = a.z + b.z;
	dest.w = a.w + b.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.subtractVecOp = function(a,b) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	dest.w = a.w - b.w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addScalar = function(a,s,dest) {
	dest.x = a.x + s;
	dest.y = a.y + s;
	dest.z = a.z + s;
	dest.w = a.w + s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	dest.w = a.w * s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addScalarOp = function(a,s) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x + s;
	dest.y = a.y + s;
	dest.z = a.z + s;
	dest.w = a.w + s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.subtractScalarOp = function(a,s) {
	var s1 = -s;
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x + s1;
	dest.y = a.y + s1;
	dest.z = a.z + s1;
	dest.w = a.w + s1;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x * s;
	dest.y = a.y * s;
	dest.z = a.z * s;
	dest.w = a.w * s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.divideScalarOp = function(a,s) {
	var s1 = 1 / s;
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	var dest = this1;
	dest.x = a.x * s1;
	dest.y = a.y * s1;
	dest.z = a.z * s1;
	dest.w = a.w * s1;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.distanceSquared = function(a,b) {
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z) + (a.w - b.w) * (a.w - b.w);
};
glm__$Vec4_Vec4_$Impl_$.distance = function(a,b) {
	return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z) + (a.w - b.w) * (a.w - b.w));
};
glm__$Vec4_Vec4_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
glm__$Vec4_Vec4_$Impl_$.normalize = function(v,dest) {
	var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest.x = v.x * mult;
	dest.y = v.y * mult;
	dest.z = v.z * mult;
	dest.w = v.w * mult;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a.x;
	dest.x = a1 + t * (b.x - a1);
	var a2 = a.y;
	dest.y = a2 + t * (b.y - a2);
	var a3 = a.z;
	dest.z = a3 + t * (b.z - a3);
	var a4 = a.w;
	dest.w = a4 + t * (b.w - a4);
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.fromFloatArray = function(arr) {
	var this1 = new glm_Vec4Base();
	this1.x = arr[0];
	this1.y = arr[1];
	this1.z = arr[2];
	this1.w = arr[3];
	return this1;
};
glm__$Vec4_Vec4_$Impl_$.toFloatArray = function(this1) {
	return [this1.x,this1.y,this1.z,this1.w];
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = true;
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = $hx_exports["haxe"]["io"]["Bytes"] = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ObjectMap = $hx_exports["haxe"]["ds"]["ObjectMap"] = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = $hx_exports["haxe"]["ds"]["_StringMap"]["StringMapIterator"] = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = $hx_exports["haxe"]["ds"]["StringMap"] = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_format_JsonParser = function(str) {
	this.str = str;
	this.pos = 0;
};
haxe_format_JsonParser.__name__ = true;
haxe_format_JsonParser.prototype = {
	parseRec: function() {
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				return this.parseString();
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var c1 = c;
				var start = this.pos - 1;
				var minus = c1 == 45;
				var digit = !minus;
				var zero = c1 == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				while(true) {
					c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				var f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
				var i = f | 0;
				if(i == f) {
					return i;
				} else {
					return f;
				}
				break;
			case 91:
				var arr = [];
				var comma = null;
				while(true) {
					var c2 = this.str.charCodeAt(this.pos++);
					switch(c2) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						if(comma == false) {
							this.invalidChar();
						}
						return arr;
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				var save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				var save1 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				var save2 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				var obj = { };
				var field = null;
				var comma1 = null;
				while(true) {
					var c3 = this.str.charCodeAt(this.pos++);
					switch(c3) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(comma1) {
							this.invalidChar();
						}
						field = this.parseString();
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						obj[field] = this.parseRec();
						field = null;
						comma1 = true;
						break;
					case 125:
						if(field != null || comma1 == false) {
							this.invalidChar();
						}
						return obj;
					default:
						this.invalidChar();
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.str;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.str.charCodeAt(this.pos++);
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCharCode(c);
					break;
				case 98:
					buf.b += "\x08";
					break;
				case 102:
					buf.b += "\x0C";
					break;
				case 110:
					buf.b += "\n";
					break;
				case 114:
					buf.b += "\r";
					break;
				case 116:
					buf.b += "\t";
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCharCode(uc);
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) {
				throw new js__$Boot_HaxeError("Unclosed string");
			}
		}
		if(buf == null) {
			return HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			var s1 = this.str;
			var len1 = this.pos - start - 1;
			buf.b += len1 == null ? HxOverrides.substr(s1,start,null) : HxOverrides.substr(s1,start,len1);
			return buf.b;
		}
	}
	,invalidChar: function() {
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	,invalidNumber: function(start) {
		throw new js__$Boot_HaxeError("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
	,__class__: haxe_format_JsonParser
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		var _this = this.b;
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = buf.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
var haxe_zip_Huffman = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
var haxe_zip_HuffTools = function() {
};
haxe_zip_HuffTools.__name__ = true;
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = true;
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = true;
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		if(len < 0 || len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = output.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			output.b.push(b2[i1]);
		}
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
haxe_zip_Uncompress.__name__ = true;
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var minko_AbstractBackend = $hx_exports["minko"]["AbstractBackend"] = function() {
};
minko_AbstractBackend.__name__ = true;
minko_AbstractBackend.create = function() {
	return new minko_AbstractBackend();
};
minko_AbstractBackend.prototype = {
	initialize: function(canvas) {
	}
	,swapBuffers: function(canvas) {
	}
	,run: function(canvas) {
		while(canvas.get_active()) canvas.step();
	}
	,wait: function(canvas,ms) {
	}
	,__class__: minko_AbstractBackend
};
var minko_AbstractCanvas = $hx_exports["minko"]["AbstractCanvas"] = function(name,width,height,flags) {
	this._workers = new haxe_ds_StringMap();
	this._name = name;
	this._flags = flags;
	this._data = minko_data_Provider.create();
	this._active = false;
	this._swapBuffersAtEnterFrame = true;
	this._enterFrame = new minko_signal_Signal3();
	this._resized = new minko_signal_Signal3();
	this._fileDropped = new minko_signal_Signal();
	this._joystickAdded = new minko_signal_Signal2();
	this._joystickRemoved = new minko_signal_Signal2();
	this._suspended = new minko_signal_Signal();
	this._resumed = new minko_signal_Signal();
	this._width = width;
	this._height = height;
	this._x = 0;
	this._y = 0;
	this._onWindow = false;
	this._enableRendering = true;
	this._activeWorkers = [];
	var tmp = this._data;
	var this1 = new glm_Vec4Base();
	this1.x = 0.0;
	this1.y = 0.0;
	this1.z = width;
	this1.w = height;
	tmp.set("viewport",this1);
};
minko_AbstractCanvas.__name__ = true;
minko_AbstractCanvas.get_defaultCanvas = function() {
	return minko_AbstractCanvas._defaultCanvas;
};
minko_AbstractCanvas.set_defaultCanvas = function(value) {
	minko_AbstractCanvas._defaultCanvas = value;
	return value;
};
minko_AbstractCanvas.prototype = {
	get_framerate: function() {
		return minko_Timer.fps();
	}
	,getJoystickAxis: function(joystick,axis) {
		return 0;
	}
	,isWorkerRegistered: function(name) {
		return false;
	}
	,registerWorker: function(name,cls) {
		var key = name.toString();
		var _this = this._workers;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,cls);
		} else {
			_this.h[key] = cls;
		}
	}
	,initialize: function() {
	}
	,get_enterFrame: function() {
		return this._enterFrame;
	}
	,joystick: function(id) {
		if(id < this.get_numJoysticks()) {
			return this._joysticks.h[id];
		} else {
			return null;
		}
	}
	,get_aspectRatio: function() {
		return this.get_width() / this.get_height();
	}
	,get_data: function() {
		return this._data;
	}
	,get_context: function() {
		return this._context;
	}
	,get_mouse: function() {
		return this._mouse;
	}
	,get_keyboard: function() {
		return this._keyboard;
	}
	,get_touch: function() {
		return this._touch;
	}
	,get_numJoysticks: function() {
		return Lambda.count(this._joysticks);
	}
	,get_resized: function() {
		return this._resized;
	}
	,get_joystickAdded: function() {
		return this._joystickAdded;
	}
	,get_joystickRemoved: function() {
		return this._joystickRemoved;
	}
	,get_suspended: function() {
		return this._suspended;
	}
	,get_resumed: function() {
		return this._resumed;
	}
	,get_active: function() {
		return this._active;
	}
	,createScene: function() {
		var _gthis = this;
		var sceneManager = minko_component_SceneManager.create(this);
		var root = minko_scene_Node.create("root").addComponent(sceneManager);
		var this1 = new glm_Vec3Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 3.0;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var this3 = new glm_Vec3Base();
		this3.x = 0.0;
		this3.y = 1.0;
		this3.z = 0.0;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var camera_mat = glm_GLM.lookAt(this1,this2,this3,this4);
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		var a00 = camera_mat._00;
		var a01 = camera_mat._10;
		var a02 = camera_mat._20;
		var a03 = camera_mat._30;
		var a10 = camera_mat._01;
		var a11 = camera_mat._11;
		var a12 = camera_mat._21;
		var a13 = camera_mat._31;
		var a20 = camera_mat._02;
		var a21 = camera_mat._12;
		var a22 = camera_mat._22;
		var a23 = camera_mat._32;
		var a30 = camera_mat._03;
		var a31 = camera_mat._13;
		var a32 = camera_mat._23;
		var a33 = camera_mat._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		camera_mat = dest;
		this._camera = minko_scene_Node.create("camera").addComponent(minko_component_Renderer.create(2139062271)).addComponent(minko_component_Transform.createbyMatrix4(camera_mat)).addComponent(minko_component_PerspectiveCamera.create(this.get_aspectRatio()));
		root.addChild(this._camera);
		this._resizedSlot = this._resized.connect(function(canvas,w,h) {
			var perspectiveCamera = _gthis._camera.getComponent(minko_component_PerspectiveCamera);
			perspectiveCamera.set_aspectRatio(w / h);
		});
		return root;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_x: function(value) {
		if(value != this._x) {
			var viewport = this._data.get("viewport");
			this._x = value;
			viewport.x = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	,set_y: function(value) {
		if(value != this._y) {
			var viewport = this._data.get("viewport");
			this._y = value;
			viewport.y = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	,set_width: function(value) {
		if(value != this._width) {
			var viewport = this._data.get("viewport");
			this._width = value;
			viewport.z = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	,set_height: function(value) {
		if(value != this._height) {
			var viewport = this._data.get("viewport");
			this._height = value;
			viewport.w = value;
			this._data.set("viewport",viewport);
		}
		return value;
	}
	,step: function() {
		var that = this;
		minko_Timer.update();
		if(this._enableRendering) {
			this._enterFrame.execute(that,(minko_Timer.startTimeStamp - minko_Timer.lastTimeStamp) * 1000.0,minko_Timer.dt * 1000.0);
			if(this._swapBuffersAtEnterFrame) {
				this.swapBuffers();
			}
		}
		if(minko_Timer.remainingTime > 0) {
			this._backend.wait(that,minko_Timer.remainingTime);
		}
	}
	,run: function() {
		this._active = true;
		this._backend.run(this);
	}
	,quit: function() {
		this._active = false;
	}
	,getWorker: function(name) {
		var _this = this._workers;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			return null;
		}
		var _this1 = this._workers;
		var worker = (__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name])(name);
		this._activeWorkers.push(worker);
		return worker;
	}
	,swapBuffers: function() {
		this._backend.swapBuffers(this);
	}
	,resetInputs: function() {
		while(this._touch.get_numTouches() > 0) {
			var id = this._touch.get_identifiers()[0];
			var touch = this._touch.get_touches().h[id];
			var x = touch.x;
			var y = touch.y;
			this._touch.updateTouch(id,x,y,0,0);
			this._touch.get_touchMove().execute(this._touch,id,0,0);
			this._touch.removeTouch(id);
			this._touch.get_touchUp().execute(this._touch,id,x,y);
		}
		this._mouse.set_dX(0);
		this._mouse.set_dY(0);
		if(this._mouse.get_leftButtonIsDown()) {
			this._mouse.get_leftButtonUp().execute(this._mouse);
		}
		if(this._mouse.get_rightButtonIsDown()) {
			this._mouse.get_rightButtonUp().execute(this._mouse);
		}
		if(this._mouse.get_middleButtonIsDown()) {
			this._mouse.get_middleButtonUp().execute(this._mouse);
		}
	}
	,__class__: minko_AbstractCanvas
};
var minko_EventKind = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"] };
minko_EventKind.EPush = ["EPush",0];
minko_EventKind.EPush.toString = $estr;
minko_EventKind.EPush.__enum__ = minko_EventKind;
minko_EventKind.ERelease = ["ERelease",1];
minko_EventKind.ERelease.toString = $estr;
minko_EventKind.ERelease.__enum__ = minko_EventKind;
minko_EventKind.EMove = ["EMove",2];
minko_EventKind.EMove.toString = $estr;
minko_EventKind.EMove.__enum__ = minko_EventKind;
minko_EventKind.EOver = ["EOver",3];
minko_EventKind.EOver.toString = $estr;
minko_EventKind.EOver.__enum__ = minko_EventKind;
minko_EventKind.EOut = ["EOut",4];
minko_EventKind.EOut.toString = $estr;
minko_EventKind.EOut.__enum__ = minko_EventKind;
minko_EventKind.EWheel = ["EWheel",5];
minko_EventKind.EWheel.toString = $estr;
minko_EventKind.EWheel.__enum__ = minko_EventKind;
minko_EventKind.EFocus = ["EFocus",6];
minko_EventKind.EFocus.toString = $estr;
minko_EventKind.EFocus.__enum__ = minko_EventKind;
minko_EventKind.EFocusLost = ["EFocusLost",7];
minko_EventKind.EFocusLost.toString = $estr;
minko_EventKind.EFocusLost.__enum__ = minko_EventKind;
minko_EventKind.EKeyDown = ["EKeyDown",8];
minko_EventKind.EKeyDown.toString = $estr;
minko_EventKind.EKeyDown.__enum__ = minko_EventKind;
minko_EventKind.EKeyUp = ["EKeyUp",9];
minko_EventKind.EKeyUp.toString = $estr;
minko_EventKind.EKeyUp.__enum__ = minko_EventKind;
minko_EventKind.EReleaseOutside = ["EReleaseOutside",10];
minko_EventKind.EReleaseOutside.toString = $estr;
minko_EventKind.EReleaseOutside.__enum__ = minko_EventKind;
minko_EventKind.ETextInput = ["ETextInput",11];
minko_EventKind.ETextInput.toString = $estr;
minko_EventKind.ETextInput.__enum__ = minko_EventKind;
minko_EventKind.ECheck = ["ECheck",12];
minko_EventKind.ECheck.toString = $estr;
minko_EventKind.ECheck.__enum__ = minko_EventKind;
var minko_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
minko_Event.__name__ = true;
minko_Event.prototype = {
	toString: function() {
		var tmp = Std.string(this.kind) + "[" + (this.relX | 0) + "," + (this.relY | 0) + "]";
		var _g = this.kind;
		var tmp1;
		switch(_g[1]) {
		case 0:case 1:case 10:
			tmp1 = ",button=" + this.button;
			break;
		case 2:case 3:case 4:case 6:case 7:case 12:
			tmp1 = "";
			break;
		case 5:
			tmp1 = ",wheelDelta=" + this.wheelDelta;
			break;
		case 8:case 9:
			tmp1 = ",keyCode=" + this.keyCode;
			break;
		case 11:
			tmp1 = ",charCode=" + this.charCode;
			break;
		}
		return tmp + tmp1;
	}
	,__class__: minko_Event
};
var minko_Canvas = $hx_exports["minko"]["Canvas"] = function(name,width,height,flags) {
	minko_AbstractCanvas.call(this,name,width,height,flags);
};
minko_Canvas.__name__ = true;
minko_Canvas.__super__ = minko_AbstractCanvas;
minko_Canvas.prototype = $extend(minko_AbstractCanvas.prototype,{
	__class__: minko_Canvas
});
var minko_Timer = function() { };
minko_Timer.__name__ = true;
minko_Timer.update = function() {
	minko_Timer.frameCount++;
	var newTime = new Date().getTime() / 1000;
	minko_Timer.elapsedTime = newTime - minko_Timer.lastTimeStamp;
	minko_Timer.lastTimeStamp = newTime;
	if(minko_Timer.elapsedTime < minko_Timer.maxDeltaTime) {
		var from = minko_Timer.elapsedTime;
		minko_Timer.currentDT = from + (minko_Timer.currentDT - from) * Math.min(Math.max(minko_Timer.smoothFactor,0),1);
		minko_Timer.remainingTime = 1 / minko_Timer.wantedFPS - minko_Timer.currentDT;
	} else {
		minko_Timer.elapsedTime = 1 / minko_Timer.wantedFPS;
		minko_Timer.remainingTime = 0;
	}
	minko_Timer.dt = minko_Timer.currentDT;
};
minko_Timer.get_tmod = function() {
	return minko_Timer.dt * minko_Timer.wantedFPS;
};
minko_Timer.set_tmod = function(v) {
	minko_Timer.dt = v / minko_Timer.wantedFPS;
	return v;
};
minko_Timer.fps = function() {
	return 1. / minko_Timer.currentDT;
};
minko_Timer.skip = function() {
	minko_Timer.lastTimeStamp = new Date().getTime() / 1000;
};
minko_Timer.reset = function() {
	minko_Timer.startTimeStamp = minko_Timer.lastTimeStamp = new Date().getTime() / 1000;
	minko_Timer.dt = minko_Timer.currentDT = 1. / minko_Timer.wantedFPS;
};
var minko_Tuple = $hx_exports["minko"]["Tuple"] = function(f,s) {
	this.first = f;
	this.second = s;
};
minko_Tuple.__name__ = true;
minko_Tuple.prototype = {
	__class__: minko_Tuple
};
var minko_Tuple3 = $hx_exports["minko"]["Tuple3"] = function(f,s,t) {
	this.first = f;
	this.second = s;
	this.thiree = t;
};
minko_Tuple3.__name__ = true;
minko_Tuple3.prototype = {
	__class__: minko_Tuple3
};
var minko_Tuple4 = $hx_exports["minko"]["Tuple4"] = function(a,b,c,d) {
	this.first = a;
	this.second = b;
	this.thiree = c;
	this.four = d;
};
minko_Tuple4.__name__ = true;
minko_Tuple4.prototype = {
	__class__: minko_Tuple4
};
var minko_Tuple5 = $hx_exports["minko"]["Tuple5"] = function(a,b,c,d,e) {
	this.first = a;
	this.second = b;
	this.thiree = c;
	this.four = d;
	this.five = e;
};
minko_Tuple5.__name__ = true;
minko_Tuple5.prototype = {
	__class__: minko_Tuple5
};
var minko_Tuple6 = $hx_exports["minko"]["Tuple6"] = function(a,b,c,d,e,f) {
	this.first = a;
	this.second = b;
	this.thiree = c;
	this.four = d;
	this.five = e;
	this.six = f;
};
minko_Tuple6.__name__ = true;
minko_Tuple6.prototype = {
	__class__: minko_Tuple6
};
var minko_Uuid = $hx_exports["minko"]["Uuid"] = function() { };
minko_Uuid.__name__ = true;
minko_Uuid.getUuid = function() {
	var seed = minko_math_Random.makeRandomSeed();
	var chars = minko_Uuid.CHARS;
	var uuid = [];
	var rnd = 0;
	var r;
	var _g = 0;
	while(_g < 36) {
		var i = _g++;
		if(i == 8 || i == 13 || i == 18 || i == 23) {
			uuid[i] = "-";
		} else if(i == 14) {
			uuid[i] = "4";
		} else {
			if(rnd <= 2) {
				seed = Math.floor(seed * 16807.0 % 2147483647.0);
				rnd = 33554432 + Math.floor(seed * 16777216) | 0;
			}
			r = rnd & 15;
			rnd >>= 4;
			uuid[i] = chars[i == 19 ? r & 3 | 8 : r];
		}
	}
	return uuid.join("");
};
var minko_Has_$uuid = $hx_exports["minko"]["Has_uuid"] = function() {
};
minko_Has_$uuid.__name__ = true;
minko_Has_$uuid.prototype = {
	set_uuid: function(value) {
		this._uuid = value;
		return value;
	}
	,get_uuid: function() {
		return this._uuid;
	}
	,__class__: minko_Has_$uuid
};
var minko_Enable_$uuid = $hx_exports["minko"]["Enable_uuid"] = function() {
	minko_Has_$uuid.call(this);
};
minko_Enable_$uuid.__name__ = true;
minko_Enable_$uuid.__super__ = minko_Has_$uuid;
minko_Enable_$uuid.prototype = $extend(minko_Has_$uuid.prototype,{
	enable_uuid: function() {
		this._uuid = minko_Uuid.getUuid();
	}
	,__class__: minko_Enable_$uuid
});
var minko_WebBackend = $hx_exports["minko"]["WebBackend"] = function() {
	minko_AbstractBackend.call(this);
};
minko_WebBackend.__name__ = true;
minko_WebBackend.create = function() {
	return new minko_WebBackend();
};
minko_WebBackend.getCurrentLoop = function() {
	return minko_WebBackend.loopFunc;
};
minko_WebBackend.setLoop = function(f) {
	if(!minko_WebBackend.loopInit) {
		minko_WebBackend.loopInit = true;
		minko_WebBackend.browserLoop();
	}
	minko_WebBackend.loopFunc = f;
};
minko_WebBackend.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(minko_WebBackend.browserLoop);
	if(minko_WebBackend.loopFunc != null) {
		minko_WebBackend.loopFunc();
	}
};
minko_WebBackend.__super__ = minko_AbstractBackend;
minko_WebBackend.prototype = $extend(minko_AbstractBackend.prototype,{
	initialize: function(canvas) {
	}
	,swapBuffers: function(canvas) {
	}
	,run: function(canvas) {
		this.currentCanvas = canvas;
		minko_WebBackend.setLoop($bind(this,this.emscriptenMainLoop));
	}
	,wait: function(canvas,ms) {
	}
	,emscriptenMainLoop: function() {
		this.currentCanvas.step();
	}
	,__class__: minko_WebBackend
});
var minko_WebCanvas = $hx_exports["minko"]["WebCanvas"] = function(name,width,height,flags) {
	minko_Canvas.call(this,name,width,height,flags);
	this.events = [];
};
minko_WebCanvas.__name__ = true;
minko_WebCanvas.create = function(name,width,height,flags) {
	if(flags == null) {
		flags = 2;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	var canvas = new minko_WebCanvas(name,width,height,flags);
	canvas.initialize();
	if(minko_AbstractCanvas.get_defaultCanvas() == null) {
		minko_AbstractCanvas.set_defaultCanvas(canvas);
	}
	return canvas;
};
minko_WebCanvas.__super__ = minko_Canvas;
minko_WebCanvas.prototype = $extend(minko_Canvas.prototype,{
	initialize: function() {
		minko_file_Options.registerDefaultProtocol("file",function() {
			return new minko_net_WebHTTPProtocol();
		});
		this.initializeInputs();
		this.initializeWindow();
		this.initializeContext();
	}
	,initializeInputs: function() {
		minko_Stage.getInstance().addEventTarget($bind(this,this.onEvent));
	}
	,initializeWindow: function() {
		this._keyboard = minko_input_Keyboard.create();
		this._mouse = minko_input_Mouse.create(this);
		this._touch = minko_input_Touch.create(this);
	}
	,initializeContext: function() {
		this._backend = minko_WebBackend.create();
		this._backend.initialize(this);
		var context = minko_render_GlContext.create();
		if(context == null) {
			throw new js__$Boot_HaxeError("Could not create context");
		}
		var antiAlias = 0;
		var canvas = minko_Stage.getInstance().canvas;
		var gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(canvas,{ alpha : false, stencil : true, antialias : antiAlias > 0});
		if(gl == null) {
			throw new js__$Boot_HaxeError("Could not acquire GL context");
		}
		context.gl = gl;
		context.initialize();
		this._context = context;
	}
	,onResize: function() {
		this.set_width(minko_Stage.getInstance().get_width());
		this.set_height(minko_Stage.getInstance().get_height());
		this._context.configureViewport(this.get_x(),this.get_y(),this.get_width(),this.get_height());
		this._resized.execute(this,this.get_width(),this.get_height());
	}
	,onEvent: function(e) {
		this.events.push(e);
	}
	,stepEvent: function() {
		var ee = this.events.concat([]);
		this.events = [];
		var executeMouseMove = false;
		var mouseDX = 0;
		var mouseDY = 0;
		var _g = 0;
		try {
			while(_g < ee.length) {
				var e = ee[_g];
				++_g;
				var kind = e.kind;
				switch(kind[1]) {
				case 0:
					this._mouse.set_x(Math.floor(e.relX));
					this._mouse.set_y(Math.floor(e.relY));
					var _g1 = e.button;
					switch(_g1) {
					case 0:
						this._mouse.get_leftButtonDown().execute(this._mouse);
						throw "__break__";
						break;
					case 1:
						this._mouse.get_rightButtonDown().execute(this._mouse);
						throw "__break__";
						break;
					case 2:
						this._mouse.get_middleButtonDown().execute(this._mouse);
						throw "__break__";
						break;
					}
					break;
				case 1:
					this._mouse.set_x(Math.floor(e.relX));
					this._mouse.set_y(Math.floor(e.relY));
					var _g11 = e.button;
					switch(_g11) {
					case 0:
						this._mouse.get_leftButtonUp().execute(this._mouse);
						throw "__break__";
						break;
					case 1:
						this._mouse.get_rightButtonUp().execute(this._mouse);
						throw "__break__";
						break;
					case 2:
						this._mouse.get_middleButtonUp().execute(this._mouse);
						throw "__break__";
						break;
					}
					break;
				case 2:
					var dX = Math.floor(e.relX) - this.get_mouse().get_x();
					var dY = Math.floor(e.relY) - this.get_mouse().get_y();
					this.get_mouse().set_x(Math.floor(e.relX));
					this.get_mouse().set_y(Math.floor(e.relY));
					mouseDX += dX;
					mouseDY += dY;
					executeMouseMove = true;
					break;
				case 3:
					break;
				case 4:
					break;
				case 5:
					this._mouse.get_wheel().execute(this._mouse,e.wheelDelta,e.wheelDelta);
					break;
				case 6:
					break;
				case 7:
					break;
				case 8:
					var keyCode = e.keyCode;
					this._keyboard.setKeyboardState(keyCode,1);
					this._keyboard.get_keyDown().execute(this._keyboard);
					var _g2 = 0;
					var _g12 = minko_input_Keyboard.NUM_KEYS;
					while(_g2 < _g12) {
						var i = _g2++;
						var code = i;
						if(!this._keyboard.hasKeyDownSignal(code)) {
							continue;
						}
						if(minko_input_KeyMap.keyToKeyCodeMap.h.hasOwnProperty(code) && minko_input_KeyMap.keyToKeyCodeMap.h[code] == keyCode) {
							this._keyboard.getKeyDown(code).execute(this._keyboard,i);
						}
					}
					break;
				case 9:
					var keyCode1 = e.keyCode;
					this._keyboard.setKeyboardState(keyCode1,0);
					this._keyboard.get_keyUp().execute(this._keyboard);
					var _g21 = 0;
					var _g13 = minko_input_Keyboard.NUM_KEYS;
					while(_g21 < _g13) {
						var i1 = _g21++;
						var code1 = i1;
						if(!this._keyboard.hasKeyUpSignal(code1)) {
							continue;
						}
						if(minko_input_KeyMap.keyToKeyCodeMap.h.hasOwnProperty(code1) && minko_input_KeyMap.keyToKeyCodeMap.h[code1] == keyCode1) {
							this._keyboard.getKeyUp(code1).execute(this._keyboard,i1);
						}
					}
					var _g22 = 0;
					var _g14 = minko_input_Keyboard.NUM_KEYS;
					while(_g22 < _g14) {
						var i2 = _g22++;
						var code2 = i2;
						if(this._keyboard.hasKeyUpSignal(code2)) {
							this._keyboard.getKeyUp(code2).execute(this._keyboard,i2);
						}
					}
					break;
				case 10:
					break;
				case 11:
					var c = e.charCode;
					this._keyboard.get_textInput().execute(this._keyboard,c);
					break;
				case 12:
					break;
				}
				if(executeMouseMove) {
					this._mouse.get_move().execute(this._mouse,mouseDX,mouseDY);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,step: function() {
		this.stepEvent();
		minko_Canvas.prototype.step.call(this);
	}
	,__class__: minko_WebCanvas
});
var minko_Stage = function(canvas) {
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	this.eventTargets = new List();
	this.resizeEvents = new List();
	this.element = canvas == null ? window : canvas;
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw new js__$Boot_HaxeError("Missing canvas #webgl");
		}
	}
	this.canvas = canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mousemove",$bind(this,this.onMouseMove));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("mousewheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	if(this.element == canvas) {
		canvas.setAttribute("tabindex","1");
		canvas.style.outline = "none";
	} else {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		canvas.oncontextmenu = function(e1) {
			e1.stopPropagation();
			e1.preventDefault();
			return false;
		};
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
minko_Stage.__name__ = true;
minko_Stage.getInstance = function() {
	if(minko_Stage.inst == null) {
		minko_Stage.inst = new minko_Stage();
	}
	return minko_Stage.inst;
};
minko_Stage.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,dispose: function() {
		this.timer.stop();
	}
	,onClose: function() {
		return true;
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		this.eventTargets = this.eventTargets.filter(function(e) {
			return !Reflect.compareMethods(e,et);
		});
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		this.resizeEvents = this.resizeEvents.filter(function(e) {
			return !Reflect.compareMethods(e,f);
		});
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,resize: function(width,height) {
	}
	,setFullScreen: function(v) {
	}
	,setCurrent: function() {
		minko_Stage.inst = this;
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * window.devicePixelRatio);
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * window.devicePixelRatio);
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * window.devicePixelRatio);
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * window.devicePixelRatio);
	}
	,get_mouseLock: function() {
		return false;
	}
	,set_mouseLock: function(v) {
		if(v) {
			throw new js__$Boot_HaxeError("Not implemented");
		}
		return false;
	}
	,get_vsync: function() {
		return true;
	}
	,set_vsync: function(b) {
		if(!b) {
			throw new js__$Boot_HaxeError("Can't disable vsync on this platform");
		}
		return true;
	}
	,onMouseDown: function(e) {
		var ev = new minko_Event(minko_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		var ev = new minko_Event(minko_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new minko_Event(minko_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		var ev = new minko_Event(minko_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = -e.wheelDelta / 30.0;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new minko_Event(minko_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new minko_Event(minko_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * window.devicePixelRatio);
			y = Math.round((touch.clientY - this.canvasPos.top) * window.devicePixelRatio);
			ev = new minko_Event(minko_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new minko_Event(minko_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	,onKeyDown: function(e) {
		var ev = new minko_Event(minko_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
	}
	,onKeyPress: function(e) {
		var ev = new minko_Event(minko_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
	}
	,__class__: minko_Stage
};
var minko_animation_AbstractTimeline = $hx_exports["minko"]["animation"]["AbstractTimeline"] = function(propertyName,duration) {
	this._propertyName = propertyName;
	this._duration = duration;
	this._isLocked = false;
};
minko_animation_AbstractTimeline.__name__ = true;
minko_animation_AbstractTimeline.prototype = {
	clone: function() {
		throw new js__$Boot_HaxeError("Missing clone function for a component.");
	}
	,get_propertyName: function() {
		return this._propertyName;
	}
	,set_propertyName: function(value) {
		this._propertyName = value;
		return value;
	}
	,get_duration: function() {
		return this._duration;
	}
	,set_duration: function(value) {
		this._duration = value;
		return value;
	}
	,get_isLocked: function() {
		return this._isLocked;
	}
	,set_isLocked: function(value) {
		this._isLocked = value;
		return value;
	}
	,update: function(time,data,skipPropertyNameFormatting) {
		if(skipPropertyNameFormatting == null) {
			skipPropertyNameFormatting = true;
		}
	}
	,dispose: function() {
	}
	,__class__: minko_animation_AbstractTimeline
};
var minko_animation_TimelineLookup = $hx_exports["minko"]["animation"]["TimelineLookup"] = function() {
};
minko_animation_TimelineLookup.__name__ = true;
minko_animation_TimelineLookup.interpolate = function(thisMat,toMat,percent) {
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var m = this1;
	m._00 = thisMat._00 + (toMat._00 - thisMat._00) * percent;
	m._10 = thisMat._10 + (toMat._10 - thisMat._10) * percent;
	m._20 = thisMat._20 + (toMat._20 - thisMat._20) * percent;
	m._30 = thisMat._30 + (toMat._30 - thisMat._30) * percent;
	m._01 = thisMat._01 + (toMat._01 - thisMat._01) * percent;
	m._11 = thisMat._11 + (toMat._11 - thisMat._11) * percent;
	m._21 = thisMat._21 + (toMat._21 - thisMat._21) * percent;
	m._31 = thisMat._31 + (toMat._31 - thisMat._31) * percent;
	m._02 = thisMat._02 + (toMat._02 - thisMat._02) * percent;
	m._12 = thisMat._12 + (toMat._12 - thisMat._12) * percent;
	m._22 = thisMat._22 + (toMat._22 - thisMat._22) * percent;
	m._32 = thisMat._32 + (toMat._32 - thisMat._32) * percent;
	m._03 = thisMat._03 + (toMat._03 - thisMat._03) * percent;
	m._13 = thisMat._13 + (toMat._13 - thisMat._13) * percent;
	m._23 = thisMat._23 + (toMat._23 - thisMat._23) * percent;
	m._33 = thisMat._33 + (toMat._33 - thisMat._33) * percent;
	return m;
};
minko_animation_TimelineLookup.getTimeInRange = function(time,duration) {
	var t = duration > 0 ? time >= 0 ? time % duration : (time % duration + duration) % duration : 0;
	return t;
};
minko_animation_TimelineLookup.getIndexForTime = function(time,timetable) {
	var numKeys = timetable.length;
	if(numKeys == 0) {
		return 0;
	}
	var id = 0;
	var lowerId = 0;
	var upperId = numKeys;
	while(upperId - lowerId > 1) {
		id = lowerId + upperId >> 1;
		if(timetable[id].timetable > time) {
			upperId = id;
		} else {
			lowerId = id;
		}
	}
	return lowerId;
};
minko_animation_TimelineLookup.prototype = {
	__class__: minko_animation_TimelineLookup
};
var minko_animation_Matrix4x4Timeline = $hx_exports["minko"]["animation"]["Matrix4x4Timeline"] = function(propertyName,duration,timetable,matrices,interpolate) {
	if(interpolate == null) {
		interpolate = false;
	}
	minko_animation_AbstractTimeline.call(this,propertyName,duration);
	this._matrices = [];
	this._interpolate = interpolate;
	this.initializeMatrixTimetable(timetable,matrices);
};
minko_animation_Matrix4x4Timeline.__name__ = true;
minko_animation_Matrix4x4Timeline.create = function(propertyName,duration,timetable,matrices,interpolate) {
	if(interpolate == null) {
		interpolate = false;
	}
	var ptr = new minko_animation_Matrix4x4Timeline(propertyName,duration,timetable,matrices,interpolate);
	return ptr;
};
minko_animation_Matrix4x4Timeline.createbyMatrix4x4Timeline = function(matrix) {
	var ptr = new minko_animation_Matrix4x4Timeline(matrix._propertyName,matrix._duration);
	ptr._matrices = [];
	ptr._interpolate = matrix._interpolate;
	var _g1 = 0;
	var _g = matrix._matrices.length;
	while(_g1 < _g) {
		var keyId = _g1++;
		ptr._matrices[keyId] = matrix._matrices[keyId];
	}
	return ptr;
};
minko_animation_Matrix4x4Timeline.__super__ = minko_animation_AbstractTimeline;
minko_animation_Matrix4x4Timeline.prototype = $extend(minko_animation_AbstractTimeline.prototype,{
	clone: function() {
		return minko_animation_Matrix4x4Timeline.createbyMatrix4x4Timeline(this);
	}
	,get_matrices: function() {
		return this._matrices;
	}
	,get_interpolate: function() {
		return this._interpolate;
	}
	,update: function(time,data,skipPropertyNameFormatting) {
		if(skipPropertyNameFormatting == null) {
			skipPropertyNameFormatting = true;
		}
		if(this._isLocked || this._duration == 0 || this._matrices.length == 0) {
			return;
		}
		if(this._interpolate) {
			data.set(this._propertyName,this.interpolateTime(time));
		} else {
			var t = minko_animation_TimelineLookup.getTimeInRange(time,this._duration + 1);
			var keyId = minko_animation_TimelineLookup.getIndexForTime(t,this._matrices);
			data.set(this._propertyName,this._matrices[keyId].mat4);
		}
	}
	,interpolateTime: function(time) {
		var t = minko_animation_TimelineLookup.getTimeInRange(time,this._duration + 1);
		var keyId = minko_animation_TimelineLookup.getIndexForTime(t,this._matrices);
		if(t < this._matrices[0].timetable || t >= this._matrices[this._matrices.length - 1].timetable) {
			return this._matrices[keyId].mat4;
		}
		var current = this._matrices[keyId];
		var next = this._matrices[keyId + 1];
		var ratio = current.timetable < next.timetable ? (t - current.timetable) / (next.timetable - current.timetable) : 0.0;
		return minko_animation_TimelineLookup.interpolate(current.mat4,next.mat4,ratio);
	}
	,initializeMatrixTimetable: function(timetable,matrices) {
		if(timetable.length == 0) {
			throw new js__$Boot_HaxeError("timetable");
		}
		if(matrices.length == 0) {
			throw new js__$Boot_HaxeError("matrices");
		}
		if(timetable.length != matrices.length) {
			throw new js__$Boot_HaxeError("The number of keys must match in both the 'timetable' and 'matrices' parameters.");
		}
		var numKeys = timetable.length;
		var _g = [];
		var _g2 = 0;
		var _g1 = numKeys;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(new minko_animation_TimelineLookup());
		}
		this._matrices = _g;
		var _g21 = 0;
		var _g11 = numKeys;
		while(_g21 < _g11) {
			var keyId = _g21++;
			this._matrices[keyId].timetable = timetable[keyId];
			this._matrices[keyId].mat4 = matrices[keyId];
		}
		this._matrices.sort(function(a,b) {
			return a.timetable - b.timetable;
		});
	}
	,dispose: function() {
	}
	,__class__: minko_animation_Matrix4x4Timeline
});
var minko_async_Worker = $hx_exports["minko"]["async"]["Worker"] = function(name) {
	this._impl = new minko_async_WorkerImpl(this,name);
};
minko_async_Worker.__name__ = true;
minko_async_Worker.prototype = {
	start: function(input) {
		this._impl.start(input);
	}
	,get_message: function() {
		return this._impl.get_message();
	}
	,post: function(message) {
		this._impl.post(message);
	}
	,run: function(input) {
	}
	,poll: function() {
		this._impl.poll();
	}
	,dispose: function() {
	}
	,__class__: minko_async_Worker
};
var minko_async_Message = $hx_exports["minko"]["async"]["Message"] = function() {
};
minko_async_Message.__name__ = true;
minko_async_Message.prototype = {
	__class__: minko_async_Message
};
var minko_async_WorkerImpl = $hx_exports["minko"]["async"]["WorkerImpl"] = function(that,name) {
};
minko_async_WorkerImpl.__name__ = true;
minko_async_WorkerImpl.prototype = {
	start: function(input) {
	}
	,poll: function() {
	}
	,post: function(message) {
	}
	,get_message: function() {
		return null;
	}
	,dispose: function() {
	}
	,__class__: minko_async_WorkerImpl
};
var minko_audio_Sound = $hx_exports["minko"]["audio"]["Sound"] = function() {
};
minko_audio_Sound.__name__ = true;
minko_audio_Sound.prototype = {
	dispose: function() {
	}
	,__class__: minko_audio_Sound
};
var minko_component_AnimationLabel = $hx_exports["minko"]["component"]["AnimationLabel"] = function(n,t) {
	this.name = n;
	this.time = t;
};
minko_component_AnimationLabel.__name__ = true;
minko_component_AnimationLabel.prototype = {
	__class__: minko_component_AnimationLabel
};
var minko_component_AbstractComponent = $hx_exports["minko"]["component"]["AbstractComponent"] = function(layoutMask) {
	if(layoutMask == null) {
		layoutMask = -1;
	}
	minko_Enable_$uuid.call(this);
	this._layoutMask = layoutMask;
	this._layoutMaskChanged = new minko_signal_Signal();
};
minko_component_AbstractComponent.__name__ = true;
minko_component_AbstractComponent.__super__ = minko_Enable_$uuid;
minko_component_AbstractComponent.prototype = $extend(minko_Enable_$uuid.prototype,{
	dispose: function() {
		this._target = null;
	}
	,clone: function(option) {
		throw new js__$Boot_HaxeError("Missing clone function for a component.");
	}
	,get_target: function() {
		return this._target;
	}
	,get_layoutMask: function() {
		return this._layoutMask;
	}
	,set_layoutMask: function(value) {
		if(this._layoutMask != value) {
			this._layoutMask = value;
			this._layoutMaskChanged.execute(this);
		}
		return value;
	}
	,get_layoutMaskChanged: function() {
		return this._layoutMaskChanged;
	}
	,set_target: function(v) {
		if(this._target != v) {
			if(v == null) {
				var oldTarget = this._target;
				this.targetRemoved(oldTarget);
				this._target = null;
			} else {
				this._target = v;
				this.targetAdded(this._target);
			}
		}
		return v;
	}
	,targetAdded: function(node) {
	}
	,targetRemoved: function(node) {
	}
	,rebindDependencies: function(componentsMap,nodeMap,option) {
	}
	,__class__: minko_component_AbstractComponent
});
var minko_component_AbstractAnimation = $hx_exports["minko"]["component"]["AbstractAnimation"] = function(isLooping) {
	minko_component_AbstractComponent.call(this);
	this._maxTime = 0;
	this._loopMinTime = 0;
	this._loopMaxTime = 0;
	this._loopTimeRange = 0;
	this._currentTime = 0;
	this._previousTime = 0;
	this._previousGlobalTime = 0;
	this._isPlaying = false;
	this._isLooping = isLooping;
	this._isReversed = false;
	this._mustUpdateOnce = false;
	this._clockStart = new Date().getTime();
	this._timeFunction = null;
	this._labels = [];
	this._nextLabelIds = [];
	this._sceneManager = null;
	this._started = new minko_signal_Signal();
	this._looped = new minko_signal_Signal();
	this._stopped = new minko_signal_Signal();
	this._labelHit = new minko_signal_Signal3();
	this._targetAddedSlot = null;
	this._targetRemovedSlot = null;
	this._addedSlot = null;
	this._removedSlot = null;
	this._frameBeginSlot = null;
	this._timeFunction = function(t) {
		return t;
	};
};
minko_component_AbstractAnimation.__name__ = true;
minko_component_AbstractAnimation.__super__ = minko_component_AbstractComponent;
minko_component_AbstractAnimation.prototype = $extend(minko_component_AbstractComponent.prototype,{
	play: function() {
		this._previousGlobalTime = this._timeFunction(this._sceneManager != null ? Math.floor(this._sceneManager.get_time()) : 0);
		this._isPlaying = true;
		this._started.execute(this);
		this.checkLabelHit(this._currentTime,this._currentTime);
	}
	,stop: function() {
		if(this._isPlaying) {
			this.updateNextLabelIds(this._currentTime);
			this.checkLabelHit(this._currentTime,this._currentTime);
		}
		this._isPlaying = false;
		this._stopped.execute(this);
		this._mustUpdateOnce = true;
		this._previousGlobalTime = this._timeFunction(this._sceneManager != null ? this._sceneManager.get_time() | 0 : 0);
	}
	,clone: function(option) {
		return null;
	}
	,seekLabel: function(labelName) {
		this.seek(this.labelTimebyName(labelName));
		return;
	}
	,seek: function(currentTime) {
		if(!this.isInPlaybackWindow(currentTime)) {
			throw new js__$Boot_HaxeError("Provided time value is outside of playback window. In order to reset playback window, call resetPlaybackWindow().");
		}
		this._currentTime = currentTime;
		this.updateNextLabelIds(this._currentTime);
	}
	,get_currentTime: function() {
		return this._currentTime;
	}
	,get_loopStartTime: function() {
		if(!this._isReversed) {
			return this._loopMinTime;
		} else {
			return this._loopMaxTime;
		}
	}
	,get_loopEndTime: function() {
		if(!this._isReversed) {
			return this._loopMaxTime;
		} else {
			return this._loopMinTime;
		}
	}
	,hasLabel: function(name) {
		return Lambda.exists(this._labels,function(l) {
			return l.name == name;
		});
	}
	,getLabel: function(name) {
		return Lambda.find(this._labels,function(l) {
			return l.name == name;
		});
	}
	,addLabel: function(name,time) {
		if(this.hasLabel(name)) {
			throw new js__$Boot_HaxeError("A label called '" + name + "' already exists.");
		}
		this._labels.push(new minko_component_AnimationLabel(name,time));
		this.updateNextLabelIds(this._currentTime);
	}
	,changeLabel: function(name,newName) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		var label = this.getLabel(name);
		label.name = newName;
	}
	,setTimeForLabel: function(name,newTime) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		var label = this.getLabel(name);
		label.time = newTime;
	}
	,removeLabel: function(name) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		this._labels = this._labels.filter(function(l) {
			return l.name != name;
		});
	}
	,setPlaybackWindow: function(beginTime,endTime,forceRestart) {
		if(forceRestart == null) {
			forceRestart = false;
		}
		this._loopMinTime = beginTime;
		this._loopMaxTime = endTime;
		if(this._loopMinTime > this._loopMaxTime) {
			this._loopMinTime = endTime;
			this._loopMaxTime = beginTime;
		}
		this._loopTimeRange = this._loopMaxTime - this._loopMinTime + 1;
		if(!this.isInPlaybackWindow(this._currentTime) || forceRestart) {
			this._currentTime = this.get_loopStartTime();
		}
		this.updateNextLabelIds(this._currentTime);
	}
	,setPlaybackWindowbyName: function(beginLabelName,endLabelName,forceRestart) {
		if(forceRestart == null) {
			forceRestart = false;
		}
		this.setPlaybackWindow(this.getLabel(beginLabelName).time,this.getLabel(endLabelName).time,forceRestart);
	}
	,resetPlaybackWindow: function() {
		this.setPlaybackWindow(0,this._maxTime);
	}
	,get_numLabels: function() {
		return this._labels.length;
	}
	,labelTimeLabel: function(labelId) {
		return this.getLabel(labelId).time;
	}
	,labelName: function(labelId) {
		return this._labels[labelId].name;
	}
	,labelTime: function(labelId) {
		return this._labels[labelId].time;
	}
	,labelTimebyName: function(name) {
		var foundLabelIt = this.hasLabel(name);
		if(foundLabelIt == false) {
			throw new js__$Boot_HaxeError("No label called '" + name + "' currently exists.");
		}
		return this.getLabel(name).time;
	}
	,get_isPlaying: function() {
		return this._isPlaying;
	}
	,set_isPlaying: function(value) {
		this._isPlaying = value;
		return value;
	}
	,get_isLooping: function() {
		return this._isLooping;
	}
	,set_isLooping: function(value) {
		this._isLooping = value;
		return value;
	}
	,get_isReversed: function() {
		return this._isReversed;
	}
	,set_isReversed: function(value) {
		this._isReversed = value;
		return value;
	}
	,get_maxTime: function() {
		return this._maxTime;
	}
	,set_timeFunction: function(func) {
		this._timeFunction = func;
		return func;
	}
	,get_started: function() {
		return this._started;
	}
	,get_looped: function() {
		return this._looped;
	}
	,get_stopped: function() {
		return this._stopped;
	}
	,get_labelHit: function() {
		return this._labelHit;
	}
	,copyFrom: function(absAnimation,option) {
		this._maxTime = absAnimation._maxTime;
		this._loopMinTime = absAnimation._loopMinTime;
		this._loopMaxTime = absAnimation._loopMaxTime;
		this._loopTimeRange = absAnimation._loopTimeRange;
		this._currentTime = 0;
		this._previousTime = 0;
		this._previousGlobalTime = 0;
		this._isPlaying = false;
		this._isLooping = absAnimation._isLooping;
		this._isReversed = absAnimation._isReversed;
		this._mustUpdateOnce = absAnimation._mustUpdateOnce;
		this._clockStart = new Date().getTime();
		this._timeFunction = null;
		this._labels = [];
		this._nextLabelIds = [];
		this._sceneManager = null;
		this._started = new minko_signal_Signal();
		this._looped = new minko_signal_Signal();
		this._stopped = new minko_signal_Signal();
		this._labelHit = new minko_signal_Signal3();
		this._targetAddedSlot = null;
		this._targetRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
		this._frameBeginSlot = null;
		if(option == 1) {
			this._currentTime = absAnimation._currentTime;
			this._previousTime = absAnimation._previousTime;
			this._previousGlobalTime = absAnimation._previousGlobalTime;
			this._isPlaying = absAnimation._isPlaying;
		}
		this._timeFunction = function(t) {
			return t;
		};
		return this;
	}
	,dispose: function() {
		this._targetAddedSlot = null;
		this._targetRemovedSlot = null;
		this._addedSlot = null;
		this._removedSlot = null;
		this._frameBeginSlot = null;
	}
	,initialize: function() {
	}
	,targetAdded: function(node) {
		this._addedSlot = node.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = node.get_removed().connect($bind(this,this.removedHandler));
		this._target = node;
	}
	,targetRemoved: function(node) {
		this._addedSlot = null;
		this._removedSlot = null;
	}
	,addedHandler: function(node,target,parent) {
		this.findSceneManager();
	}
	,removedHandler: function(node,target,parent) {
		this.findSceneManager();
	}
	,componentAddedHandler: function(node,target,component) {
	}
	,componentRemovedHandler: function(node,target,component) {
	}
	,findSceneManager: function() {
		var roots = minko_scene_NodeSet.createbyNode(this.get_target()).roots().where(function(node) {
			return node.hasComponent(minko_component_SceneManager);
		});
		if(roots.get_nodes().length > 1) {
			throw new js__$Boot_HaxeError("Renderer cannot be in two separate scenes.");
		} else if(roots.get_nodes().length == 1) {
			this.setSceneManager(roots.get_nodes()[0].getComponent(minko_component_SceneManager));
		} else {
			this.setSceneManager(null);
		}
	}
	,setSceneManager: function(sceneManager) {
		if(sceneManager != null && sceneManager != this._sceneManager) {
			this._frameBeginSlot = sceneManager.get_frameBegin().connect($bind(this,this.frameBeginHandler));
			if(this._sceneManager == null) {
				this._previousGlobalTime = this._timeFunction(Math.floor(sceneManager.get_time()));
			}
		} else if(this._frameBeginSlot != null && sceneManager == null) {
			this.stop();
			this._frameBeginSlot.disconnect();
			this._frameBeginSlot = null;
		}
		this._sceneManager = sceneManager;
	}
	,frameBeginHandler: function(sceneManager,time,UnnamedParameter1) {
		this.updateRaw(Math.floor(time));
	}
	,updateNextLabelIds: function(time) {
		this._nextLabelIds = [];
		if(this._labels.length == 0) {
			return;
		}
		var UINT_MAX = 10000;
		var nextLabelTime = !this._isReversed ? UINT_MAX : 0;
		var _g1 = 0;
		var _g = this._labels.length;
		while(_g1 < _g) {
			var labelId = _g1++;
			var labelTime = this._labels[labelId].time;
			if(!this.isInPlaybackWindow(labelTime)) {
				continue;
			}
			if(!this._isReversed && time < labelTime) {
				if(labelTime < nextLabelTime) {
					nextLabelTime = labelTime;
					this._nextLabelIds = [];
					this._nextLabelIds.push(labelId);
				} else if(labelTime == nextLabelTime) {
					this._nextLabelIds.push(labelId);
				}
			} else if(this._isReversed && labelTime < time) {
				if(nextLabelTime < labelTime) {
					nextLabelTime = labelTime;
					this._nextLabelIds = [];
					this._nextLabelIds.push(labelId);
				} else if(labelTime == nextLabelTime) {
					this._nextLabelIds.push(labelId);
				}
			}
		}
		if(this._nextLabelIds.length == 0) {
			if(time != this.get_loopStartTime()) {
				this.updateNextLabelIds(this.get_loopStartTime());
			}
		} else if(this._isLooping && nextLabelTime == this.get_loopEndTime()) {
			var _g11 = 0;
			var _g2 = this._labels.length;
			while(_g11 < _g2) {
				var labelId1 = _g11++;
				if(this._labels[labelId1].time == this.get_loopStartTime() && this._nextLabelIds.indexOf(labelId1) == -1) {
					this._nextLabelIds.push(labelId1);
				}
			}
		}
	}
	,checkLabelHit: function(previousTime,newTime) {
		if(!this._isPlaying || this._nextLabelIds.length == 0) {
			return;
		}
		var nextLabel = this._labels[this._nextLabelIds[0]];
		var nextLabelTime = nextLabel.time;
		var trigger = false;
		if(!this._isReversed) {
			if(previousTime <= newTime) {
				if(newTime == nextLabelTime || previousTime < nextLabelTime && nextLabelTime <= newTime) {
					trigger = true;
				}
			} else if(previousTime < nextLabelTime) {
				trigger = true;
			} else if(nextLabelTime < newTime) {
				trigger = true;
			}
		} else if(newTime <= previousTime) {
			if(newTime == nextLabelTime || newTime <= nextLabelTime != null && nextLabelTime < previousTime) {
				trigger = true;
			}
		} else if(nextLabelTime < previousTime) {
			trigger = true;
		} else if(newTime < nextLabelTime) {
			trigger = true;
		}
		if(trigger) {
			var nextLabelIds = this._nextLabelIds;
			var _g = 0;
			while(_g < nextLabelIds.length) {
				var labelId = nextLabelIds[_g];
				++_g;
				var label = this._labels[labelId];
				this._labelHit.execute(this,label.name,label.time);
			}
			this.updateNextLabelIds(this.getNewLoopTime(this._currentTime,!this._isReversed ? 1 : -1));
		}
	}
	,isInPlaybackWindow: function(time) {
		if(this._loopMinTime <= time) {
			return time <= this._loopMaxTime;
		} else {
			return false;
		}
	}
	,update: function() {
	}
	,updateRaw: function(rawGlobalTime) {
		if(rawGlobalTime == null) {
			rawGlobalTime = 0;
		}
		if(!this._isPlaying && !this._mustUpdateOnce) {
			return false;
		}
		this._mustUpdateOnce = false;
		var globalTime = this._timeFunction(rawGlobalTime);
		var globalDeltaTime = globalTime - this._previousGlobalTime;
		var deltaTime = (!this._isReversed ? globalDeltaTime : -globalDeltaTime) | 0;
		this._previousTime = this._currentTime;
		if(this._isPlaying) {
			this._currentTime = this.getNewLoopTime(this._currentTime,deltaTime);
		}
		this._previousGlobalTime = globalTime;
		var looped = !this._isReversed && this._currentTime < this._previousTime || this._isReversed && this._previousTime < this._currentTime;
		if(looped) {
			if(this._isLooping) {
				this._looped.execute(this);
			} else {
				this._currentTime = this.get_loopEndTime();
				this.stop();
			}
		}
		this.update();
		this.checkLabelHit(this._previousTime,this._currentTime);
		if(!this._isPlaying) {
			return this._mustUpdateOnce;
		} else {
			return true;
		}
	}
	,getNewLoopTime: function(time,deltaTime) {
		var relTime = time - this._loopMinTime + deltaTime;
		var timeOffset = (relTime + this._loopTimeRange | 0) % this._loopTimeRange;
		return this._loopMinTime + timeOffset;
	}
	,__class__: minko_component_AbstractAnimation
});
var minko_component_AbstractRootDataComponent = $hx_exports["minko"]["component"]["AbstractRootDataComponent"] = function(collectionName) {
	minko_component_AbstractComponent.call(this);
	this._provider = new minko_data_Provider();
	this._collectionName = collectionName;
	this._enabled = true;
};
minko_component_AbstractRootDataComponent.__name__ = true;
minko_component_AbstractRootDataComponent.__super__ = minko_component_AbstractComponent;
minko_component_AbstractRootDataComponent.prototype = $extend(minko_component_AbstractComponent.prototype,{
	dispose: function() {
		this._provider = null;
		this._root = null;
		this._addedSlot = null;
		this._removedSlot = null;
		minko_component_AbstractComponent.prototype.dispose.call(this);
	}
	,get_provider: function() {
		return this._provider;
	}
	,get_root: function() {
		return this._root;
	}
	,targetAdded: function(target) {
		this._addedSlot = target.get_added().connect($bind(this,this.addedOrRemovedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.addedOrRemovedHandler));
		this.updateRoot(target.get_root());
	}
	,targetRemoved: function(target) {
		this._addedSlot.disconnect();
		this._addedSlot = null;
		this._removedSlot.disconnect();
		this._removedSlot = null;
		this.updateRoot(null);
	}
	,addedOrRemovedHandler: function(node,target,ancestor) {
		this.updateRoot(node.get_root());
	}
	,updateRoot: function(root) {
		var _gthis = this;
		if(root == this._root) {
			return;
		}
		if(this._root != null) {
			var collections = this._root.get_data().get_collections();
			var collectionIt = Lambda.find(collections,function(c) {
				return c.get_name() == _gthis._collectionName;
			});
			var collection = collectionIt;
			collection.remove(this._provider);
		}
		this._root = root;
		if(this._root != null) {
			var collections1 = this._root.get_data().get_collections();
			var collectionIt1 = Lambda.find(collections1,function(c1) {
				return c1.get_name() == _gthis._collectionName;
			});
			if(collectionIt1 == null) {
				var collection1 = minko_data_Collection.create(this._collectionName);
				collection1.pushBack(this._provider);
				this._root.get_data().addCollection(collection1);
			} else {
				collectionIt1.pushBack(this._provider);
			}
		}
	}
	,__class__: minko_component_AbstractRootDataComponent
});
var minko_component_AbstractLight = $hx_exports["minko"]["component"]["AbstractLight"] = function(collectionName) {
	minko_component_AbstractRootDataComponent.call(this,collectionName);
	var this1 = new glm_Vec3Base();
	this1.x = 1.0;
	this1.y = 1.0;
	this1.z = 1.0;
	this._color = this1;
	this.get_data().set("color",this._color);
};
minko_component_AbstractLight.__name__ = true;
minko_component_AbstractLight.__super__ = minko_component_AbstractRootDataComponent;
minko_component_AbstractLight.prototype = $extend(minko_component_AbstractRootDataComponent.prototype,{
	get_data: function() {
		return this.get_provider();
	}
	,dispose: function() {
		minko_component_AbstractRootDataComponent.prototype.dispose.call(this);
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		if(value != this._color) {
			this._color = value;
			this.get_data().set("color",this._color);
		}
		return value;
	}
	,get_layoutMask: function() {
		return minko_component_AbstractRootDataComponent.prototype.get_layoutMask.call(this);
	}
	,set_layoutMask: function(value) {
		this.get_data().set("layoutMask",value);
		minko_component_AbstractRootDataComponent.prototype.set_layoutMask.call(this,value);
		return value;
	}
	,__class__: minko_component_AbstractLight
});
var minko_component_AbstractDiscreteLight = $hx_exports["minko"]["component"]["AbstractDiscreteLight"] = function(arrayName,diffuse,specular) {
	if(specular == null) {
		specular = 1.0;
	}
	if(diffuse == null) {
		diffuse = 1.0;
	}
	minko_component_AbstractLight.call(this,arrayName);
	this.get_data().set("diffuse",diffuse).set("specular",specular);
};
minko_component_AbstractDiscreteLight.__name__ = true;
minko_component_AbstractDiscreteLight.__super__ = minko_component_AbstractLight;
minko_component_AbstractDiscreteLight.prototype = $extend(minko_component_AbstractLight.prototype,{
	get_diffuse: function() {
		return this.get_data().get("diffuse");
	}
	,set_diffuse: function(diffuse) {
		this.get_data().set("diffuse",diffuse);
		return diffuse;
	}
	,get_specular: function() {
		return this.get_data().get("specular");
	}
	,set_specular: function(specular) {
		this.get_data().set("specular",specular);
		return specular;
	}
	,targetAdded: function(target) {
		var _gthis = this;
		minko_component_AbstractLight.prototype.targetAdded.call(this,target);
		this._modelToWorldChangedSlot = target.get_data().getPropertyChanged("modelToWorldMatrix").connect(function(_1,_2,_3) {
			_gthis.modelToWorldMatrixChangedHandler(_1,_3);
		});
		if(target.get_data().hasProperty("modelToWorldMatrix")) {
			this.updateModelToWorldMatrix(target.get_data().get("modelToWorldMatrix"));
		}
	}
	,targetRemoved: function(target) {
		minko_component_AbstractLight.prototype.targetRemoved.call(this,target);
		this._modelToWorldChangedSlot = null;
	}
	,modelToWorldMatrixChangedHandler: function(container,propertyName) {
		this.updateModelToWorldMatrix(container.get(propertyName));
	}
	,updateModelToWorldMatrix: function(modelToWorld) {
	}
	,__class__: minko_component_AbstractDiscreteLight
});
var minko_component_AbstractScript = $hx_exports["minko"]["component"]["AbstractScript"] = function() {
	minko_component_AbstractComponent.call(this);
	this._enabled = true;
	this._started = false;
	this._time = 0.0;
	this._deltaTime = 0.0;
	this._targetAddedSlot = null;
	this._targetRemovedSlot = null;
	this._addedSlot = null;
	this._removedSlot = null;
	this._componentAddedSlot = null;
	this._componentRemovedSlot = null;
	this._frameBeginSlot = null;
	this._frameEndSlot = null;
};
minko_component_AbstractScript.__name__ = true;
minko_component_AbstractScript.__super__ = minko_component_AbstractComponent;
minko_component_AbstractScript.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_enabled: function() {
		return this._enabled;
	}
	,set_enabled: function(v) {
		if(v != this._enabled) {
			this._enabled = v;
			this._started = !v;
			if(this.get_target() != null) {
				this.setSceneManager(this.get_target().get_root().getComponent(minko_component_SceneManager));
			}
		}
		return v;
	}
	,get_time: function() {
		return this._time;
	}
	,get_deltaTime: function() {
		return this._deltaTime;
	}
	,start: function(target) {
	}
	,update: function(target) {
	}
	,end: function(target) {
	}
	,stop: function(target) {
	}
	,get_ready: function() {
		return true;
	}
	,get_priority: function() {
		return 0.0;
	}
	,targetAdded: function(target) {
		this._componentAddedSlot = target.get_componentAdded().connect($bind(this,this.componentAddedHandler));
		this._componentRemovedSlot = target.get_componentRemoved().connect($bind(this,this.componentRemovedHandler));
		this._addedSlot = target.get_added().connect($bind(this,this.addedOrRemovedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.addedOrRemovedHandler));
		this._started = false;
		if(target.get_root().hasComponent(minko_component_SceneManager)) {
			this.setSceneManager(target.get_root().getComponent(minko_component_SceneManager));
		}
	}
	,addedOrRemovedHandler: function(node,target,parent) {
		if(node.get_root() != target.get_root()) {
			return;
		}
		this.setSceneManager(target.get_root().getComponent(minko_component_SceneManager));
	}
	,targetRemoved: function(target) {
		this._componentAddedSlot = null;
		this._componentRemovedSlot = null;
		this._frameBeginSlot = null;
		this._frameEndSlot = null;
		if(this._started) {
			this._started = false;
			this.stop(target);
		}
	}
	,componentAddedHandler: function(nod,target,component) {
		var sceneManager = js_Boot.__cast(component , minko_component_SceneManager);
		if(sceneManager != null) {
			this.setSceneManager(sceneManager);
		}
	}
	,componentRemovedHandler: function(nod,target,component) {
		var sceneManager = js_Boot.__cast(component , minko_component_SceneManager);
		if(sceneManager != null) {
			this.setSceneManager(null);
		}
	}
	,frameBeginHandler: function(sceneManager,time,deltaTime) {
		var target = this.get_target();
		this._time = time;
		this._deltaTime = deltaTime;
		if(!this._started && this.get_ready() && target != null) {
			this._started = true;
			this.start(target);
		}
		if(this._started) {
			this.update(target);
		}
		if(!this._started) {
			this.stop(target);
		}
	}
	,frameEndHandler: function(sceneManager,time,deltaTime) {
		if(this._started) {
			this.end(this.get_target());
		}
	}
	,setSceneManager: function(sceneManager) {
		if(sceneManager != null && this._enabled) {
			if(this._frameBeginSlot == null) {
				this._frameBeginSlot = sceneManager.get_frameBegin().connect($bind(this,this.frameBeginHandler),this.get_priority());
				if(this._frameEndSlot == null) {
					this._frameEndSlot = sceneManager.get_frameEnd().connect($bind(this,this.frameEndHandler),this.get_priority());
				} else if(this._frameBeginSlot != null) {
					if(this._started) {
						this._started = false;
						this.stop(this.get_target());
					}
					this._frameBeginSlot = null;
					this._frameEndSlot = null;
				}
			}
		}
	}
	,__class__: minko_component_AbstractScript
});
var minko_component_AmbientLight = $hx_exports["minko"]["component"]["AmbientLight"] = function(ambient) {
	if(ambient == null) {
		ambient = .2;
	}
	minko_component_AbstractLight.call(this,"ambientLight");
	this._ambient = ambient;
	this.get_data().set("ambient",ambient);
};
minko_component_AmbientLight.__name__ = true;
minko_component_AmbientLight.create = function(ambient) {
	if(ambient == null) {
		ambient = .2;
	}
	return new minko_component_AmbientLight(ambient);
};
minko_component_AmbientLight.__super__ = minko_component_AbstractLight;
minko_component_AmbientLight.prototype = $extend(minko_component_AbstractLight.prototype,{
	clone: function(option) {
		var al = minko_component_AmbientLight.create().copyFrom(this,option);
		return al;
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(ambient) {
		this._ambient = ambient;
		this.get_data().set("ambient",ambient);
		return ambient;
	}
	,copyFrom: function(ambientLight,option) {
		this._ambient = ambientLight._ambient;
		this.get_data().set("ambient",ambientLight._ambient);
		return this;
	}
	,__class__: minko_component_AmbientLight
});
var minko_component_Animation = $hx_exports["minko"]["component"]["Animation"] = function(timelines,isLooping) {
	minko_component_AbstractAnimation.call(this,isLooping);
	this._timelines = timelines;
};
minko_component_Animation.__name__ = true;
minko_component_Animation.create = function(timelines,isLooping) {
	if(isLooping == null) {
		isLooping = true;
	}
	var ptr = new minko_component_Animation(timelines,isLooping);
	ptr.initialize();
	return ptr;
};
minko_component_Animation.__super__ = minko_component_AbstractAnimation;
minko_component_Animation.prototype = $extend(minko_component_AbstractAnimation.prototype,{
	clone: function(option) {
		var anim = new minko_component_Animation(this._timelines,this.get_isLooping());
		anim.copyFromAnimation(this,option);
		anim.initialize();
		return anim;
	}
	,rebindDependencies: function(componentsMap,nodeMap,option) {
	}
	,get_numTimelines: function() {
		return this._timelines.length;
	}
	,getTimeline: function(timelineId) {
		return this._timelines[timelineId];
	}
	,get_timelines: function() {
		return this._timelines;
	}
	,initialize: function() {
		minko_component_AbstractAnimation.prototype.initialize.call(this);
		this._maxTime = 0;
		var _g = 0;
		var _g1 = this._timelines;
		while(_g < _g1.length) {
			var timeline = _g1[_g];
			++_g;
			this._maxTime = Math.floor(Math.max(this._maxTime,timeline.get_duration()));
		}
		this.setPlaybackWindow(0,this._maxTime);
		this.seek(0);
	}
	,copyFromAnimation: function(anim,option) {
		this.copyFrom(anim,option);
		this._timelines = [];
		var _g1 = 0;
		var _g = anim._timelines.length;
		while(_g1 < _g) {
			var i = _g1++;
			var clone = anim._timelines[i].clone();
			this._timelines[i] = clone;
		}
		return this;
	}
	,update: function() {
		minko_component_AbstractAnimation.prototype.update.call(this);
		var _g = 0;
		var _g1 = this._timelines;
		while(_g < _g1.length) {
			var timeline = _g1[_g];
			++_g;
			var currentTime = this._currentTime % (timeline.get_duration() + 1);
			timeline.update(currentTime,this.get_target().get_data());
		}
	}
	,frameBeginHandler: function(manager,time,deltaTime) {
		minko_component_AbstractAnimation.prototype.frameBeginHandler.call(this,manager,time,deltaTime);
	}
	,updateNextLabelIds: function(time) {
		minko_component_AbstractAnimation.prototype.updateNextLabelIds.call(this,time);
	}
	,checkLabelHit: function(previousTime,newTime) {
		minko_component_AbstractAnimation.prototype.checkLabelHit.call(this,previousTime,newTime);
	}
	,__class__: minko_component_Animation
});
var minko_component_DirectionalLight = $hx_exports["minko"]["component"]["DirectionalLight"] = function(diffuse,specular) {
	minko_component_AbstractDiscreteLight.call(this,"directionalLight",diffuse,specular);
	this._shadowMappingEnabled = false;
	this._numShadowCascades = 0;
	this._shadowMap = null;
	this._shadowMapSize = 0;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) {
		var i = _g1++;
		_g.push(null);
	}
	this._shadowRenderers = _g;
	var _g11 = [];
	var _g2 = 0;
	while(_g2 < 4) {
		var i1 = _g2++;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		_g11.push(dest);
	}
	this._shadowProjections = _g11;
	var this2 = new glm_Mat4Base();
	this2._00 = 0;
	this2._01 = 0;
	this2._02 = 0;
	this2._03 = 0;
	this2._10 = 0;
	this2._11 = 0;
	this2._12 = 0;
	this2._13 = 0;
	this2._20 = 0;
	this2._21 = 0;
	this2._22 = 0;
	this2._23 = 0;
	this2._30 = 0;
	this2._31 = 0;
	this2._32 = 0;
	this2._33 = 0;
	var dest1 = this2;
	dest1._00 = 1;
	dest1._10 = 0;
	dest1._20 = 0;
	dest1._30 = 0;
	dest1._01 = 0;
	dest1._11 = 1;
	dest1._21 = 0;
	dest1._31 = 0;
	dest1._02 = 0;
	dest1._12 = 0;
	dest1._22 = 1;
	dest1._32 = 0;
	dest1._03 = 0;
	dest1._13 = 0;
	dest1._23 = 0;
	dest1._33 = 1;
	this.updateModelToWorldMatrix(dest1);
};
minko_component_DirectionalLight.__name__ = true;
minko_component_DirectionalLight.create = function(diffuse,specular) {
	if(specular == null) {
		specular = 1.0;
	}
	if(diffuse == null) {
		diffuse = 1.0;
	}
	return new minko_component_DirectionalLight(diffuse,specular);
};
minko_component_DirectionalLight.__super__ = minko_component_AbstractDiscreteLight;
minko_component_DirectionalLight.prototype = $extend(minko_component_AbstractDiscreteLight.prototype,{
	clone: function(option) {
		return minko_component_DirectionalLight.create(this.get_diffuse(),this.get_specular());
	}
	,get_shadowMap: function() {
		return this._shadowMap;
	}
	,set_shadowSpread: function(spread) {
		this.get_data().set("shadowSpread",spread);
		return spread;
	}
	,get_shadowProjections: function() {
		return this._shadowProjections;
	}
	,get_shadowMappingEnabled: function() {
		return this._shadowMappingEnabled;
	}
	,get_numShadowCascades: function() {
		return this._numShadowCascades;
	}
	,computeShadowProjection: function(view,projection,zFar,fitToCascade) {
		if(fitToCascade == null) {
			fitToCascade = false;
		}
		if(zFar == null) {
			zFar = 100000.0;
		}
		if(!this._shadowMappingEnabled) {
			return;
		}
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var a00 = projection._00;
		var a01 = projection._10;
		var a02 = projection._20;
		var a03 = projection._30;
		var a10 = projection._01;
		var a11 = projection._11;
		var a12 = projection._21;
		var a13 = projection._31;
		var a20 = projection._02;
		var a21 = projection._12;
		var a22 = projection._22;
		var a23 = projection._32;
		var a30 = projection._03;
		var a31 = projection._13;
		var a32 = projection._23;
		var a33 = projection._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var invProjection = dest;
		var this2 = new glm_Vec4Base();
		this2.x = -1.0;
		this2.y = 1.0;
		this2.z = -1.0;
		this2.w = 1.0;
		var v = this2;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 0;
		var dest1 = this3;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest1.x = invProjection._00 * x + invProjection._10 * y + invProjection._20 * z + invProjection._30 * w;
		dest1.y = invProjection._01 * x + invProjection._11 * y + invProjection._21 * z + invProjection._31 * w;
		dest1.z = invProjection._02 * x + invProjection._12 * y + invProjection._22 * z + invProjection._32 * w;
		dest1.w = invProjection._03 * x + invProjection._13 * y + invProjection._23 * z + invProjection._33 * w;
		var v_0 = dest1;
		var this4 = new glm_Vec4Base();
		this4.x = 1.0;
		this4.y = 1.0;
		this4.z = -1.0;
		this4.w = 1.0;
		var v1 = this4;
		var this5 = new glm_Vec4Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		this5.w = 0;
		var dest2 = this5;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest2.x = invProjection._00 * x1 + invProjection._10 * y1 + invProjection._20 * z1 + invProjection._30 * w1;
		dest2.y = invProjection._01 * x1 + invProjection._11 * y1 + invProjection._21 * z1 + invProjection._31 * w1;
		dest2.z = invProjection._02 * x1 + invProjection._12 * y1 + invProjection._22 * z1 + invProjection._32 * w1;
		dest2.w = invProjection._03 * x1 + invProjection._13 * y1 + invProjection._23 * z1 + invProjection._33 * w1;
		var v_1 = dest2;
		var this6 = new glm_Vec4Base();
		this6.x = 1.0;
		this6.y = -1.0;
		this6.z = -1.0;
		this6.w = 1.0;
		var v2 = this6;
		var this7 = new glm_Vec4Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		this7.w = 0;
		var dest3 = this7;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest3.x = invProjection._00 * x2 + invProjection._10 * y2 + invProjection._20 * z2 + invProjection._30 * w2;
		dest3.y = invProjection._01 * x2 + invProjection._11 * y2 + invProjection._21 * z2 + invProjection._31 * w2;
		dest3.z = invProjection._02 * x2 + invProjection._12 * y2 + invProjection._22 * z2 + invProjection._32 * w2;
		dest3.w = invProjection._03 * x2 + invProjection._13 * y2 + invProjection._23 * z2 + invProjection._33 * w2;
		var v_2 = dest3;
		var this8 = new glm_Vec4Base();
		this8.x = -1.0;
		this8.y = -1.0;
		this8.z = -1.0;
		this8.w = 1.0;
		var v3 = this8;
		var this9 = new glm_Vec4Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		this9.w = 0;
		var dest4 = this9;
		var x3 = v3.x;
		var y3 = v3.y;
		var z3 = v3.z;
		var w3 = v3.w;
		dest4.x = invProjection._00 * x3 + invProjection._10 * y3 + invProjection._20 * z3 + invProjection._30 * w3;
		dest4.y = invProjection._01 * x3 + invProjection._11 * y3 + invProjection._21 * z3 + invProjection._31 * w3;
		dest4.z = invProjection._02 * x3 + invProjection._12 * y3 + invProjection._22 * z3 + invProjection._32 * w3;
		dest4.w = invProjection._03 * x3 + invProjection._13 * y3 + invProjection._23 * z3 + invProjection._33 * w3;
		var v_3 = dest4;
		var this10 = new glm_Vec4Base();
		this10.x = -1.0;
		this10.y = 1.0;
		this10.z = 1.0;
		this10.w = 1.0;
		var v4 = this10;
		var this11 = new glm_Vec4Base();
		this11.x = 0;
		this11.y = 0;
		this11.z = 0;
		this11.w = 0;
		var dest5 = this11;
		var x4 = v4.x;
		var y4 = v4.y;
		var z4 = v4.z;
		var w4 = v4.w;
		dest5.x = invProjection._00 * x4 + invProjection._10 * y4 + invProjection._20 * z4 + invProjection._30 * w4;
		dest5.y = invProjection._01 * x4 + invProjection._11 * y4 + invProjection._21 * z4 + invProjection._31 * w4;
		dest5.z = invProjection._02 * x4 + invProjection._12 * y4 + invProjection._22 * z4 + invProjection._32 * w4;
		dest5.w = invProjection._03 * x4 + invProjection._13 * y4 + invProjection._23 * z4 + invProjection._33 * w4;
		var v_4 = dest5;
		var this12 = new glm_Vec4Base();
		this12.x = 1.0;
		this12.y = 1.0;
		this12.z = 1.0;
		this12.w = 1.0;
		var v5 = this12;
		var this13 = new glm_Vec4Base();
		this13.x = 0;
		this13.y = 0;
		this13.z = 0;
		this13.w = 0;
		var dest6 = this13;
		var x5 = v5.x;
		var y5 = v5.y;
		var z5 = v5.z;
		var w5 = v5.w;
		dest6.x = invProjection._00 * x5 + invProjection._10 * y5 + invProjection._20 * z5 + invProjection._30 * w5;
		dest6.y = invProjection._01 * x5 + invProjection._11 * y5 + invProjection._21 * z5 + invProjection._31 * w5;
		dest6.z = invProjection._02 * x5 + invProjection._12 * y5 + invProjection._22 * z5 + invProjection._32 * w5;
		dest6.w = invProjection._03 * x5 + invProjection._13 * y5 + invProjection._23 * z5 + invProjection._33 * w5;
		var v_5 = dest6;
		var this14 = new glm_Vec4Base();
		this14.x = 1.0;
		this14.y = -1.0;
		this14.z = 1.0;
		this14.w = 1.0;
		var v6 = this14;
		var this15 = new glm_Vec4Base();
		this15.x = 0;
		this15.y = 0;
		this15.z = 0;
		this15.w = 0;
		var dest7 = this15;
		var x6 = v6.x;
		var y6 = v6.y;
		var z6 = v6.z;
		var w6 = v6.w;
		dest7.x = invProjection._00 * x6 + invProjection._10 * y6 + invProjection._20 * z6 + invProjection._30 * w6;
		dest7.y = invProjection._01 * x6 + invProjection._11 * y6 + invProjection._21 * z6 + invProjection._31 * w6;
		dest7.z = invProjection._02 * x6 + invProjection._12 * y6 + invProjection._22 * z6 + invProjection._32 * w6;
		dest7.w = invProjection._03 * x6 + invProjection._13 * y6 + invProjection._23 * z6 + invProjection._33 * w6;
		var v_6 = dest7;
		var this16 = new glm_Vec4Base();
		this16.x = -1.0;
		this16.y = -1.0;
		this16.z = 1.0;
		this16.w = 1.0;
		var v7 = this16;
		var this17 = new glm_Vec4Base();
		this17.x = 0;
		this17.y = 0;
		this17.z = 0;
		this17.w = 0;
		var dest8 = this17;
		var x7 = v7.x;
		var y7 = v7.y;
		var z7 = v7.z;
		var w7 = v7.w;
		dest8.x = invProjection._00 * x7 + invProjection._10 * y7 + invProjection._20 * z7 + invProjection._30 * w7;
		dest8.y = invProjection._01 * x7 + invProjection._11 * y7 + invProjection._21 * z7 + invProjection._31 * w7;
		dest8.z = invProjection._02 * x7 + invProjection._12 * y7 + invProjection._22 * z7 + invProjection._32 * w7;
		dest8.w = invProjection._03 * x7 + invProjection._13 * y7 + invProjection._23 * z7 + invProjection._33 * w7;
		var v_7 = dest8;
		zFar = Math.floor(Math.min(zFar,-(v_4.z / v_4.w)));
		var a = v_0;
		var s = 1 / v_0.w;
		var this18 = new glm_Vec4Base();
		this18.x = 0;
		this18.y = 0;
		this18.z = 0;
		this18.w = 0;
		var dest9 = this18;
		dest9.x = a.x * s;
		dest9.y = a.y * s;
		dest9.z = a.z * s;
		dest9.w = a.w * s;
		var zNear = -dest9.z;
		var fov = Math.atan(1.0 / projection._11) * 2.0;
		var ratio = projection._11 / projection._00;
		var splitFar = [zFar,zFar,zFar,zFar];
		var splitNear = [zNear,zNear,zNear,zNear];
		var lambda = .5;
		var j = 1.0;
		var _g1 = 0;
		var _g = this._numShadowCascades - 1;
		while(_g1 < _g) {
			var i = _g1++;
			splitFar[i] = zNear * Math.pow(zFar / zNear,j / this._numShadowCascades) * lambda + (zNear + j / this._numShadowCascades * (zFar - zNear)) * (1 - lambda);
			splitNear[i + 1] = splitFar[i];
			j += 1.0;
		}
		var _g11 = 0;
		var _g2 = this._numShadowCascades;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var far = splitFar[i1];
			var this19 = new glm_Mat4Base();
			this19._00 = 0;
			this19._01 = 0;
			this19._02 = 0;
			this19._03 = 0;
			this19._10 = 0;
			this19._11 = 0;
			this19._12 = 0;
			this19._13 = 0;
			this19._20 = 0;
			this19._21 = 0;
			this19._22 = 0;
			this19._23 = 0;
			this19._30 = 0;
			this19._31 = 0;
			this19._32 = 0;
			this19._33 = 0;
			var dest10 = this19;
			var f = 1 / Math.tan(fov / 2);
			var nf = 1 / (zNear - far);
			dest10._00 = f / ratio;
			dest10._01 = 0;
			dest10._02 = 0;
			dest10._03 = 0;
			dest10._10 = 0;
			dest10._11 = f;
			dest10._12 = 0;
			dest10._13 = 0;
			dest10._20 = 0;
			dest10._21 = 0;
			dest10._22 = (far + zNear) * nf;
			dest10._23 = -1;
			dest10._30 = 0;
			dest10._31 = 0;
			dest10._32 = 2 * far * zNear * nf;
			dest10._33 = 0;
			var a1 = dest10;
			var this20 = new glm_Mat4Base();
			this20._00 = 0;
			this20._01 = 0;
			this20._02 = 0;
			this20._03 = 0;
			this20._10 = 0;
			this20._11 = 0;
			this20._12 = 0;
			this20._13 = 0;
			this20._20 = 0;
			this20._21 = 0;
			this20._22 = 0;
			this20._23 = 0;
			this20._30 = 0;
			this20._31 = 0;
			this20._32 = 0;
			this20._33 = 0;
			var dest11 = this20;
			var _a;
			var _b;
			if(dest11 == a1) {
				var this21 = new glm_Mat4Base();
				this21._00 = 0;
				this21._01 = 0;
				this21._02 = 0;
				this21._03 = 0;
				this21._10 = 0;
				this21._11 = 0;
				this21._12 = 0;
				this21._13 = 0;
				this21._20 = 0;
				this21._21 = 0;
				this21._22 = 0;
				this21._23 = 0;
				this21._30 = 0;
				this21._31 = 0;
				this21._32 = 0;
				this21._33 = 0;
				var dest12 = this21;
				dest12._00 = a1._00;
				dest12._10 = a1._10;
				dest12._20 = a1._20;
				dest12._30 = a1._30;
				dest12._01 = a1._01;
				dest12._11 = a1._11;
				dest12._21 = a1._21;
				dest12._31 = a1._31;
				dest12._02 = a1._02;
				dest12._12 = a1._12;
				dest12._22 = a1._22;
				dest12._32 = a1._32;
				dest12._03 = a1._03;
				dest12._13 = a1._13;
				dest12._23 = a1._23;
				dest12._33 = a1._33;
				_a = dest12;
				_b = view;
			} else if(dest11 == view) {
				_a = a1;
				var this22 = new glm_Mat4Base();
				this22._00 = 0;
				this22._01 = 0;
				this22._02 = 0;
				this22._03 = 0;
				this22._10 = 0;
				this22._11 = 0;
				this22._12 = 0;
				this22._13 = 0;
				this22._20 = 0;
				this22._21 = 0;
				this22._22 = 0;
				this22._23 = 0;
				this22._30 = 0;
				this22._31 = 0;
				this22._32 = 0;
				this22._33 = 0;
				var dest13 = this22;
				dest13._00 = view._00;
				dest13._10 = view._10;
				dest13._20 = view._20;
				dest13._30 = view._30;
				dest13._01 = view._01;
				dest13._11 = view._11;
				dest13._21 = view._21;
				dest13._31 = view._31;
				dest13._02 = view._02;
				dest13._12 = view._12;
				dest13._22 = view._22;
				dest13._32 = view._32;
				dest13._03 = view._03;
				dest13._13 = view._13;
				dest13._23 = view._23;
				dest13._33 = view._33;
				_b = dest13;
			} else {
				_a = a1;
				_b = view;
			}
			dest11._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest11._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest11._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest11._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest11._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest11._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest11._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest11._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest11._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest11._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest11._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest11._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest11._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest11._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest11._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest11._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			var cameraViewProjection = dest11;
			var box = this.computeBox(cameraViewProjection);
			var tmp = this._shadowProjections;
			var left = box.first.x;
			var right = box.second.x;
			var bottom = box.first.y;
			var top = box.second.y;
			var near = -box.second.z;
			var far1 = -box.first.z;
			var this23 = new glm_Mat4Base();
			this23._00 = 0;
			this23._01 = 0;
			this23._02 = 0;
			this23._03 = 0;
			this23._10 = 0;
			this23._11 = 0;
			this23._12 = 0;
			this23._13 = 0;
			this23._20 = 0;
			this23._21 = 0;
			this23._22 = 0;
			this23._23 = 0;
			this23._30 = 0;
			this23._31 = 0;
			this23._32 = 0;
			this23._33 = 0;
			var dest14 = this23;
			var rl = 1 / (right - left);
			var tb = 1 / (top - bottom);
			var fn = 1 / (far1 - near);
			dest14._00 = 2 * rl;
			dest14._10 = 0;
			dest14._20 = 0;
			dest14._30 = -1 * (left + right) * rl;
			dest14._01 = 0;
			dest14._11 = 2 * tb;
			dest14._21 = 0;
			dest14._31 = -1 * (top + bottom) * tb;
			dest14._02 = 0;
			dest14._12 = 0;
			dest14._22 = -2 * fn;
			dest14._32 = -1 * (far1 + near) * fn;
			dest14._03 = 0;
			dest14._13 = 0;
			dest14._23 = 0;
			dest14._33 = 1;
			tmp[i1] = dest14;
			if(fitToCascade) {
				zNear = splitFar[i1];
			}
		}
		var _g3 = this._numShadowCascades;
		while(_g3 < 4) {
			var i2 = _g3++;
			splitFar[i2] = -Infinity;
			splitNear[i2] = Infinity;
		}
		var tmp1 = this.get_data();
		var this24 = new glm_Vec4Base();
		this24.x = splitFar[0];
		this24.y = splitFar[1];
		this24.z = splitFar[2];
		this24.w = splitFar[3];
		tmp1.set("shadowSplitFar",this24);
		var tmp2 = this.get_data();
		var this25 = new glm_Vec4Base();
		this25.x = splitNear[0];
		this25.y = splitNear[1];
		this25.z = splitNear[2];
		this25.w = splitNear[3];
		tmp2.set("shadowSplitNear",this25);
		this.updateWorldToScreenMatrix();
	}
	,enableShadowMapping: function(shadowMapSize,numCascades) {
		if(numCascades == null) {
			numCascades = 4;
		}
		if(shadowMapSize == null) {
			shadowMapSize = 512;
		}
		if(!this._shadowMappingEnabled || shadowMapSize != this._shadowMapSize || numCascades != this._numShadowCascades) {
			if(this._shadowMap == null || shadowMapSize != this._shadowMapSize || numCascades != this._numShadowCascades) {
				this._numShadowCascades = numCascades;
				this._shadowMapSize = shadowMapSize;
				this.initializeShadowMapping();
			} else {
				var _g = 0;
				var _g1 = this._shadowRenderers;
				while(_g < _g1.length) {
					var renderer = _g1[_g];
					++_g;
					if(renderer != null) {
						renderer.set_enabled(true);
					}
				}
				this.get_data().set("shadowMap",this._shadowMap);
			}
			this._shadowMappingEnabled = true;
		}
	}
	,disableShadowMapping: function(disposeResources) {
		if(disposeResources == null) {
			disposeResources = false;
		}
		if(this._shadowMappingEnabled) {
			var _g = 0;
			var _g1 = this._shadowRenderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				if(renderer != null) {
					renderer.set_enabled(false);
				}
			}
			this.get_data().unset("shadowMap");
			if(disposeResources) {
				this._shadowMap = null;
				var _g2 = 0;
				var _g11 = this._shadowRenderers;
				while(_g2 < _g11.length) {
					var renderer1 = _g11[_g2];
					++_g2;
					if(renderer1 != null && this.get_target().existsComponent(renderer1)) {
						this.get_target().removeComponent(renderer1);
						renderer1 = null;
					}
				}
			}
			this._shadowMappingEnabled = false;
		}
	}
	,updateModelToWorldMatrix: function(modelToWorld) {
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = -1.0;
		this1.w = 0;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = modelToWorld._00 * x + modelToWorld._10 * y + modelToWorld._20 * z + modelToWorld._30 * w;
		dest.y = modelToWorld._01 * x + modelToWorld._11 * y + modelToWorld._21 * z + modelToWorld._31 * w;
		dest.z = modelToWorld._02 * x + modelToWorld._12 * y + modelToWorld._22 * z + modelToWorld._32 * w;
		dest.w = modelToWorld._03 * x + modelToWorld._13 * y + modelToWorld._23 * z + modelToWorld._33 * w;
		var tmp = dest;
		var x1 = tmp.x;
		var y1 = tmp.y;
		var z1 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x1;
		this3.y = y1;
		this3.z = z1;
		this._worldDirection = this3;
		var v1 = this._worldDirection;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest1 = this4;
		var length = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v1.x * mult;
		dest1.y = v1.y * mult;
		dest1.z = v1.z * mult;
		this._worldDirection = dest1;
		this.get_data().set("direction",this._worldDirection);
		this.updateWorldToScreenMatrix();
	}
	,updateRoot: function(root) {
		minko_component_AbstractDiscreteLight.prototype.updateRoot.call(this,root);
		if(root != null && this._shadowMappingEnabled && this._shadowMap == null) {
			this.initializeShadowMapping();
		}
	}
	,targetRemoved: function(target) {
		minko_component_AbstractDiscreteLight.prototype.targetRemoved.call(this,target);
		var _g = 0;
		var _g1 = this._shadowRenderers;
		while(_g < _g1.length) {
			var renderer = _g1[_g];
			++_g;
			if(renderer != null && target.existsComponent(renderer)) {
				target.removeComponent(renderer);
			}
		}
	}
	,copyFrom: function(directionalLight,option) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
	}
	,initializeShadowMapping: function() {
		if(this.get_target() == null || !this.get_target().get_root().hasComponent(minko_component_SceneManager)) {
			return false;
		}
		var sm = this.get_target().get_root().getComponent(minko_component_SceneManager);
		var assets = sm.get_assets();
		var effectName = "effect/ShadowMap.effect";
		var fx = assets.effect(effectName);
		var smTechnique = this.get_target().get_root().hasComponent(minko_component_ShadowMappingTechnique) ? this.get_target().get_root().get_data().get("shadowMappingTechnique") : 0;
		if(fx == null) {
			throw new js__$Boot_HaxeError("no effect/ShadowMap.effect");
		}
		this._shadowMap = minko_render_Texture.create(assets.get_context(),this._shadowMapSize * 2,this._shadowMapSize * 2,false,true);
		this._shadowMap.upload();
		this.get_data().set("shadowMap",this._shadowMap).set("shadowMaxDistance",0.9).set("shadowSpread",1.0).set("shadowBias",-0.001).set("shadowMapSize",this._shadowMapSize * 2.0);
		var y = this._shadowMapSize;
		var z = this._shadowMapSize;
		var w = this._shadowMapSize;
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = y;
		this1.z = z;
		this1.w = w;
		var x = this._shadowMapSize;
		var y1 = this._shadowMapSize;
		var z1 = this._shadowMapSize;
		var w1 = this._shadowMapSize;
		var this2 = new glm_Vec4Base();
		this2.x = x;
		this2.y = y1;
		this2.z = z1;
		this2.w = w1;
		var z2 = this._shadowMapSize;
		var w2 = this._shadowMapSize;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = z2;
		this3.w = w2;
		var x1 = this._shadowMapSize;
		var z3 = this._shadowMapSize;
		var w3 = this._shadowMapSize;
		var this4 = new glm_Vec4Base();
		this4.x = x1;
		this4.y = 0;
		this4.z = z3;
		this4.w = w3;
		var viewports = [this1,this2,this3,this4];
		var _g1 = 0;
		var _g = this._numShadowCascades;
		while(_g1 < _g) {
			var i = _g1++;
			var techniqueName = "shadow-map-cascade" + i;
			if(smTechnique == 1) {
				techniqueName += "-esm";
			}
			var renderer = minko_component_Renderer.create(-1,this._shadowMap,fx,techniqueName,minko_render__$Priority_Priority_$Impl_$.FIRST - i);
			renderer.set_clearBeforeRender(i == 0);
			renderer.set_viewport(viewports[i]);
			renderer.get_effectVariables().push(new minko_Tuple("lightUuid",this.get_data().get_uuid()));
			renderer.set_layoutMask(1024);
			this.get_target().addComponent(renderer);
			this._shadowRenderers[i] = renderer;
		}
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest = this5;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		var this6 = new glm_Mat4Base();
		this6._00 = 0;
		this6._01 = 0;
		this6._02 = 0;
		this6._03 = 0;
		this6._10 = 0;
		this6._11 = 0;
		this6._12 = 0;
		this6._13 = 0;
		this6._20 = 0;
		this6._21 = 0;
		this6._22 = 0;
		this6._23 = 0;
		this6._30 = 0;
		this6._31 = 0;
		this6._32 = 0;
		this6._33 = 0;
		var dest1 = this6;
		var f = 1 / Math.tan(0.3925);
		var nf = -0.001000100010001;
		dest1._00 = f / 1.0;
		dest1._01 = 0;
		dest1._02 = 0;
		dest1._03 = 0;
		dest1._10 = 0;
		dest1._11 = f;
		dest1._12 = 0;
		dest1._13 = 0;
		dest1._20 = 0;
		dest1._21 = 0;
		dest1._22 = 1000.1 * nf;
		dest1._23 = -1;
		dest1._30 = 0;
		dest1._31 = 0;
		dest1._32 = 200. * nf;
		dest1._33 = 0;
		this.computeShadowProjection(dest,dest1);
		return true;
	}
	,updateWorldToScreenMatrix: function() {
		if(this.get_target() != null && this.get_target().get_data().hasProperty("modelToWorldMatrix")) {
			var src = this.get_target().get_data().get("modelToWorldMatrix");
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			var a00 = src._00;
			var a01 = src._10;
			var a02 = src._20;
			var a03 = src._30;
			var a10 = src._01;
			var a11 = src._11;
			var a12 = src._21;
			var a13 = src._31;
			var a20 = src._02;
			var a21 = src._12;
			var a22 = src._22;
			var a23 = src._32;
			var a30 = src._03;
			var a31 = src._13;
			var a32 = src._23;
			var a33 = src._33;
			var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
			var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
			var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
			var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
			var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
			if(Math.abs(det) <= glm_GLM.EPSILON) {
				throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
			}
			var idet = 1 / det;
			dest._00 = t00 * idet;
			dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
			dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
			dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
			dest._10 = t01 * idet;
			dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
			dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
			dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
			dest._20 = t02 * idet;
			dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
			dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
			dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
			dest._30 = t03 * idet;
			dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
			dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
			dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
			this._view = dest;
		} else {
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest1 = this2;
			dest1._00 = 1;
			dest1._10 = 0;
			dest1._20 = 0;
			dest1._30 = 0;
			dest1._01 = 0;
			dest1._11 = 1;
			dest1._21 = 0;
			dest1._31 = 0;
			dest1._02 = 0;
			dest1._12 = 0;
			dest1._22 = 1;
			dest1._32 = 0;
			dest1._03 = 0;
			dest1._13 = 0;
			dest1._23 = 0;
			dest1._33 = 1;
			this._view = dest1;
		}
		var zFar = [0.0,0.0,0.0,0.0];
		var zNear = [0.0,0.0,0.0,0.0];
		var viewProjections = [];
		var _g1 = 0;
		var _g = this._numShadowCascades;
		while(_g1 < _g) {
			var i = _g1++;
			var projection = this._shadowProjections[i];
			var istr = i == null ? "null" : "" + i;
			var farMinusNear = 2.0 / projection._22;
			var farPlusNear = projection._32 * farMinusNear;
			zNear[i] = (farMinusNear + farPlusNear) / 2.0;
			zFar[i] = farPlusNear - zNear[i];
			var b = this._view;
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			var _a;
			var _b;
			if(dest2 == projection) {
				var this4 = new glm_Mat4Base();
				this4._00 = 0;
				this4._01 = 0;
				this4._02 = 0;
				this4._03 = 0;
				this4._10 = 0;
				this4._11 = 0;
				this4._12 = 0;
				this4._13 = 0;
				this4._20 = 0;
				this4._21 = 0;
				this4._22 = 0;
				this4._23 = 0;
				this4._30 = 0;
				this4._31 = 0;
				this4._32 = 0;
				this4._33 = 0;
				var dest3 = this4;
				dest3._00 = projection._00;
				dest3._10 = projection._10;
				dest3._20 = projection._20;
				dest3._30 = projection._30;
				dest3._01 = projection._01;
				dest3._11 = projection._11;
				dest3._21 = projection._21;
				dest3._31 = projection._31;
				dest3._02 = projection._02;
				dest3._12 = projection._12;
				dest3._22 = projection._22;
				dest3._32 = projection._32;
				dest3._03 = projection._03;
				dest3._13 = projection._13;
				dest3._23 = projection._23;
				dest3._33 = projection._33;
				_a = dest3;
				_b = b;
			} else if(dest2 == b) {
				_a = projection;
				var this5 = new glm_Mat4Base();
				this5._00 = 0;
				this5._01 = 0;
				this5._02 = 0;
				this5._03 = 0;
				this5._10 = 0;
				this5._11 = 0;
				this5._12 = 0;
				this5._13 = 0;
				this5._20 = 0;
				this5._21 = 0;
				this5._22 = 0;
				this5._23 = 0;
				this5._30 = 0;
				this5._31 = 0;
				this5._32 = 0;
				this5._33 = 0;
				var dest4 = this5;
				dest4._00 = b._00;
				dest4._10 = b._10;
				dest4._20 = b._20;
				dest4._30 = b._30;
				dest4._01 = b._01;
				dest4._11 = b._11;
				dest4._21 = b._21;
				dest4._31 = b._31;
				dest4._02 = b._02;
				dest4._12 = b._12;
				dest4._22 = b._22;
				dest4._32 = b._32;
				dest4._03 = b._03;
				dest4._13 = b._13;
				dest4._23 = b._23;
				dest4._33 = b._33;
				_b = dest4;
			} else {
				_a = projection;
				_b = b;
			}
			dest2._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest2._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest2._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest2._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest2._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest2._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest2._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest2._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest2._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest2._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest2._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest2._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest2._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest2._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest2._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest2._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			var mat4 = dest2;
			viewProjections.push(mat4);
		}
		this.get_data().set("viewProjection",viewProjections).set("zNear",zNear).set("zFar",zFar);
	}
	,computeBox: function(viewProjection) {
		var a = this._view;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var a00 = viewProjection._00;
		var a01 = viewProjection._10;
		var a02 = viewProjection._20;
		var a03 = viewProjection._30;
		var a10 = viewProjection._01;
		var a11 = viewProjection._11;
		var a12 = viewProjection._21;
		var a13 = viewProjection._31;
		var a20 = viewProjection._02;
		var a21 = viewProjection._12;
		var a22 = viewProjection._22;
		var a23 = viewProjection._32;
		var a30 = viewProjection._03;
		var a31 = viewProjection._13;
		var a32 = viewProjection._23;
		var a33 = viewProjection._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest._00 = t00 * idet;
		dest._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest._10 = t01 * idet;
		dest._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest._20 = t02 * idet;
		dest._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest._30 = t03 * idet;
		dest._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var b = dest;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		var _a;
		var _b;
		if(dest1 == a) {
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = a._00;
			dest2._10 = a._10;
			dest2._20 = a._20;
			dest2._30 = a._30;
			dest2._01 = a._01;
			dest2._11 = a._11;
			dest2._21 = a._21;
			dest2._31 = a._31;
			dest2._02 = a._02;
			dest2._12 = a._12;
			dest2._22 = a._22;
			dest2._32 = a._32;
			dest2._03 = a._03;
			dest2._13 = a._13;
			dest2._23 = a._23;
			dest2._33 = a._33;
			_a = dest2;
			_b = b;
		} else if(dest1 == b) {
			_a = a;
			var this4 = new glm_Mat4Base();
			this4._00 = 0;
			this4._01 = 0;
			this4._02 = 0;
			this4._03 = 0;
			this4._10 = 0;
			this4._11 = 0;
			this4._12 = 0;
			this4._13 = 0;
			this4._20 = 0;
			this4._21 = 0;
			this4._22 = 0;
			this4._23 = 0;
			this4._30 = 0;
			this4._31 = 0;
			this4._32 = 0;
			this4._33 = 0;
			var dest3 = this4;
			dest3._00 = b._00;
			dest3._10 = b._10;
			dest3._20 = b._20;
			dest3._30 = b._30;
			dest3._01 = b._01;
			dest3._11 = b._11;
			dest3._21 = b._21;
			dest3._31 = b._31;
			dest3._02 = b._02;
			dest3._12 = b._12;
			dest3._22 = b._22;
			dest3._32 = b._32;
			dest3._03 = b._03;
			dest3._13 = b._13;
			dest3._23 = b._23;
			dest3._33 = b._33;
			_b = dest3;
		} else {
			_a = a;
			_b = b;
		}
		dest1._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest1._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest1._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest1._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest1._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest1._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest1._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest1._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest1._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest1._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest1._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest1._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest1._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest1._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest1._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest1._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		var t = dest1;
		var this5 = new glm_Vec4Base();
		this5.x = -1.0;
		this5.y = 1.0;
		this5.z = -1.0;
		this5.w = 1.0;
		var v = this5;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var dest4 = this6;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest4.x = t._00 * x + t._10 * y + t._20 * z + t._30 * w;
		dest4.y = t._01 * x + t._11 * y + t._21 * z + t._31 * w;
		dest4.z = t._02 * x + t._12 * y + t._22 * z + t._32 * w;
		dest4.w = t._03 * x + t._13 * y + t._23 * z + t._33 * w;
		var this7 = new glm_Vec4Base();
		this7.x = 1.0;
		this7.y = 1.0;
		this7.z = -1.0;
		this7.w = 1.0;
		var v1 = this7;
		var this8 = new glm_Vec4Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		this8.w = 0;
		var dest5 = this8;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest5.x = t._00 * x1 + t._10 * y1 + t._20 * z1 + t._30 * w1;
		dest5.y = t._01 * x1 + t._11 * y1 + t._21 * z1 + t._31 * w1;
		dest5.z = t._02 * x1 + t._12 * y1 + t._22 * z1 + t._32 * w1;
		dest5.w = t._03 * x1 + t._13 * y1 + t._23 * z1 + t._33 * w1;
		var this9 = new glm_Vec4Base();
		this9.x = 1.0;
		this9.y = -1.0;
		this9.z = -1.0;
		this9.w = 1.0;
		var v2 = this9;
		var this10 = new glm_Vec4Base();
		this10.x = 0;
		this10.y = 0;
		this10.z = 0;
		this10.w = 0;
		var dest6 = this10;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest6.x = t._00 * x2 + t._10 * y2 + t._20 * z2 + t._30 * w2;
		dest6.y = t._01 * x2 + t._11 * y2 + t._21 * z2 + t._31 * w2;
		dest6.z = t._02 * x2 + t._12 * y2 + t._22 * z2 + t._32 * w2;
		dest6.w = t._03 * x2 + t._13 * y2 + t._23 * z2 + t._33 * w2;
		var this11 = new glm_Vec4Base();
		this11.x = -1.0;
		this11.y = -1.0;
		this11.z = -1.0;
		this11.w = 1.0;
		var v3 = this11;
		var this12 = new glm_Vec4Base();
		this12.x = 0;
		this12.y = 0;
		this12.z = 0;
		this12.w = 0;
		var dest7 = this12;
		var x3 = v3.x;
		var y3 = v3.y;
		var z3 = v3.z;
		var w3 = v3.w;
		dest7.x = t._00 * x3 + t._10 * y3 + t._20 * z3 + t._30 * w3;
		dest7.y = t._01 * x3 + t._11 * y3 + t._21 * z3 + t._31 * w3;
		dest7.z = t._02 * x3 + t._12 * y3 + t._22 * z3 + t._32 * w3;
		dest7.w = t._03 * x3 + t._13 * y3 + t._23 * z3 + t._33 * w3;
		var this13 = new glm_Vec4Base();
		this13.x = -1.0;
		this13.y = 1.0;
		this13.z = 1.0;
		this13.w = 1.0;
		var v4 = this13;
		var this14 = new glm_Vec4Base();
		this14.x = 0;
		this14.y = 0;
		this14.z = 0;
		this14.w = 0;
		var dest8 = this14;
		var x4 = v4.x;
		var y4 = v4.y;
		var z4 = v4.z;
		var w4 = v4.w;
		dest8.x = t._00 * x4 + t._10 * y4 + t._20 * z4 + t._30 * w4;
		dest8.y = t._01 * x4 + t._11 * y4 + t._21 * z4 + t._31 * w4;
		dest8.z = t._02 * x4 + t._12 * y4 + t._22 * z4 + t._32 * w4;
		dest8.w = t._03 * x4 + t._13 * y4 + t._23 * z4 + t._33 * w4;
		var this15 = new glm_Vec4Base();
		this15.x = 1.0;
		this15.y = 1.0;
		this15.z = 1.0;
		this15.w = 1.0;
		var v5 = this15;
		var this16 = new glm_Vec4Base();
		this16.x = 0;
		this16.y = 0;
		this16.z = 0;
		this16.w = 0;
		var dest9 = this16;
		var x5 = v5.x;
		var y5 = v5.y;
		var z5 = v5.z;
		var w5 = v5.w;
		dest9.x = t._00 * x5 + t._10 * y5 + t._20 * z5 + t._30 * w5;
		dest9.y = t._01 * x5 + t._11 * y5 + t._21 * z5 + t._31 * w5;
		dest9.z = t._02 * x5 + t._12 * y5 + t._22 * z5 + t._32 * w5;
		dest9.w = t._03 * x5 + t._13 * y5 + t._23 * z5 + t._33 * w5;
		var this17 = new glm_Vec4Base();
		this17.x = 1.0;
		this17.y = -1.0;
		this17.z = 1.0;
		this17.w = 1.0;
		var v6 = this17;
		var this18 = new glm_Vec4Base();
		this18.x = 0;
		this18.y = 0;
		this18.z = 0;
		this18.w = 0;
		var dest10 = this18;
		var x6 = v6.x;
		var y6 = v6.y;
		var z6 = v6.z;
		var w6 = v6.w;
		dest10.x = t._00 * x6 + t._10 * y6 + t._20 * z6 + t._30 * w6;
		dest10.y = t._01 * x6 + t._11 * y6 + t._21 * z6 + t._31 * w6;
		dest10.z = t._02 * x6 + t._12 * y6 + t._22 * z6 + t._32 * w6;
		dest10.w = t._03 * x6 + t._13 * y6 + t._23 * z6 + t._33 * w6;
		var this19 = new glm_Vec4Base();
		this19.x = -1.0;
		this19.y = -1.0;
		this19.z = 1.0;
		this19.w = 1.0;
		var v7 = this19;
		var this20 = new glm_Vec4Base();
		this20.x = 0;
		this20.y = 0;
		this20.z = 0;
		this20.w = 0;
		var dest11 = this20;
		var x7 = v7.x;
		var y7 = v7.y;
		var z7 = v7.z;
		var w7 = v7.w;
		dest11.x = t._00 * x7 + t._10 * y7 + t._20 * z7 + t._30 * w7;
		dest11.y = t._01 * x7 + t._11 * y7 + t._21 * z7 + t._31 * w7;
		dest11.z = t._02 * x7 + t._12 * y7 + t._22 * z7 + t._32 * w7;
		dest11.w = t._03 * x7 + t._13 * y7 + t._23 * z7 + t._33 * w7;
		var v8 = [dest4,dest5,dest6,dest7,dest8,dest9,dest10,dest11];
		var _g1 = 0;
		var _g = v8.length;
		while(_g1 < _g) {
			var i = _g1++;
			var p = v8[i];
			var s = 1 / p.w;
			var this21 = new glm_Vec4Base();
			this21.x = 0;
			this21.y = 0;
			this21.z = 0;
			this21.w = 0;
			var dest12 = this21;
			dest12.x = p.x * s;
			dest12.y = p.y * s;
			dest12.z = p.z * s;
			dest12.w = p.w * s;
			v8[i] = dest12;
		}
		var this22 = new glm_Vec3Base();
		this22.x = Infinity;
		this22.y = Infinity;
		this22.z = Infinity;
		var bottomLeft = this22;
		var this23 = new glm_Vec3Base();
		this23.x = -Infinity;
		this23.y = -Infinity;
		this23.z = -Infinity;
		var topRight = this23;
		var _g2 = 0;
		while(_g2 < v8.length) {
			var p1 = v8[_g2];
			++_g2;
			if(p1.x < bottomLeft.x) {
				bottomLeft.x = p1.x;
			}
			if(p1.x > topRight.x) {
				topRight.x = p1.x;
			}
			if(p1.y < bottomLeft.y) {
				bottomLeft.y = p1.y;
			}
			if(p1.y > topRight.y) {
				topRight.y = p1.y;
			}
			if(p1.z < bottomLeft.z) {
				bottomLeft.z = p1.z;
			}
			if(p1.z > topRight.z) {
				topRight.z = p1.z;
			}
		}
		return new minko_Tuple(bottomLeft,topRight);
	}
	,computeBoundingSphere: function(view,projection) {
		var a = this._view;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var _a;
		var _b;
		if(dest == projection) {
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest1 = this2;
			dest1._00 = projection._00;
			dest1._10 = projection._10;
			dest1._20 = projection._20;
			dest1._30 = projection._30;
			dest1._01 = projection._01;
			dest1._11 = projection._11;
			dest1._21 = projection._21;
			dest1._31 = projection._31;
			dest1._02 = projection._02;
			dest1._12 = projection._12;
			dest1._22 = projection._22;
			dest1._32 = projection._32;
			dest1._03 = projection._03;
			dest1._13 = projection._13;
			dest1._23 = projection._23;
			dest1._33 = projection._33;
			_a = dest1;
			_b = view;
		} else if(dest == view) {
			_a = projection;
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = view._00;
			dest2._10 = view._10;
			dest2._20 = view._20;
			dest2._30 = view._30;
			dest2._01 = view._01;
			dest2._11 = view._11;
			dest2._21 = view._21;
			dest2._31 = view._31;
			dest2._02 = view._02;
			dest2._12 = view._12;
			dest2._22 = view._22;
			dest2._32 = view._32;
			dest2._03 = view._03;
			dest2._13 = view._13;
			dest2._23 = view._23;
			dest2._33 = view._33;
			_b = dest2;
		} else {
			_a = projection;
			_b = view;
		}
		dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		var src = dest;
		var this4 = new glm_Mat4Base();
		this4._00 = 0;
		this4._01 = 0;
		this4._02 = 0;
		this4._03 = 0;
		this4._10 = 0;
		this4._11 = 0;
		this4._12 = 0;
		this4._13 = 0;
		this4._20 = 0;
		this4._21 = 0;
		this4._22 = 0;
		this4._23 = 0;
		this4._30 = 0;
		this4._31 = 0;
		this4._32 = 0;
		this4._33 = 0;
		var dest3 = this4;
		var a00 = src._00;
		var a01 = src._10;
		var a02 = src._20;
		var a03 = src._30;
		var a10 = src._01;
		var a11 = src._11;
		var a12 = src._21;
		var a13 = src._31;
		var a20 = src._02;
		var a21 = src._12;
		var a22 = src._22;
		var a23 = src._32;
		var a30 = src._03;
		var a31 = src._13;
		var a32 = src._23;
		var a33 = src._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest3._00 = t00 * idet;
		dest3._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest3._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest3._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest3._10 = t01 * idet;
		dest3._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest3._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest3._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest3._20 = t02 * idet;
		dest3._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest3._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest3._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest3._30 = t03 * idet;
		dest3._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest3._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest3._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		var b = dest3;
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest4 = this5;
		var _a1;
		var _b1;
		if(dest4 == a) {
			var this6 = new glm_Mat4Base();
			this6._00 = 0;
			this6._01 = 0;
			this6._02 = 0;
			this6._03 = 0;
			this6._10 = 0;
			this6._11 = 0;
			this6._12 = 0;
			this6._13 = 0;
			this6._20 = 0;
			this6._21 = 0;
			this6._22 = 0;
			this6._23 = 0;
			this6._30 = 0;
			this6._31 = 0;
			this6._32 = 0;
			this6._33 = 0;
			var dest5 = this6;
			dest5._00 = a._00;
			dest5._10 = a._10;
			dest5._20 = a._20;
			dest5._30 = a._30;
			dest5._01 = a._01;
			dest5._11 = a._11;
			dest5._21 = a._21;
			dest5._31 = a._31;
			dest5._02 = a._02;
			dest5._12 = a._12;
			dest5._22 = a._22;
			dest5._32 = a._32;
			dest5._03 = a._03;
			dest5._13 = a._13;
			dest5._23 = a._23;
			dest5._33 = a._33;
			_a1 = dest5;
			_b1 = b;
		} else if(dest4 == b) {
			_a1 = a;
			var this7 = new glm_Mat4Base();
			this7._00 = 0;
			this7._01 = 0;
			this7._02 = 0;
			this7._03 = 0;
			this7._10 = 0;
			this7._11 = 0;
			this7._12 = 0;
			this7._13 = 0;
			this7._20 = 0;
			this7._21 = 0;
			this7._22 = 0;
			this7._23 = 0;
			this7._30 = 0;
			this7._31 = 0;
			this7._32 = 0;
			this7._33 = 0;
			var dest6 = this7;
			dest6._00 = b._00;
			dest6._10 = b._10;
			dest6._20 = b._20;
			dest6._30 = b._30;
			dest6._01 = b._01;
			dest6._11 = b._11;
			dest6._21 = b._21;
			dest6._31 = b._31;
			dest6._02 = b._02;
			dest6._12 = b._12;
			dest6._22 = b._22;
			dest6._32 = b._32;
			dest6._03 = b._03;
			dest6._13 = b._13;
			dest6._23 = b._23;
			dest6._33 = b._33;
			_b1 = dest6;
		} else {
			_a1 = a;
			_b1 = b;
		}
		dest4._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
		dest4._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
		dest4._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
		dest4._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
		dest4._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
		dest4._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
		dest4._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
		dest4._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
		dest4._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
		dest4._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
		dest4._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
		dest4._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
		dest4._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
		dest4._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
		dest4._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
		dest4._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
		var invProj = dest4;
		var this8 = new glm_Vec4Base();
		this8.x = 0.0;
		this8.y = 0.0;
		this8.z = 0.0;
		this8.w = 1.0;
		var v = this8;
		var this9 = new glm_Vec4Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		this9.w = 0;
		var dest7 = this9;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest7.x = invProj._00 * x + invProj._10 * y + invProj._20 * z + invProj._30 * w;
		dest7.y = invProj._01 * x + invProj._11 * y + invProj._21 * z + invProj._31 * w;
		dest7.z = invProj._02 * x + invProj._12 * y + invProj._22 * z + invProj._32 * w;
		dest7.w = invProj._03 * x + invProj._13 * y + invProj._23 * z + invProj._33 * w;
		var center = dest7;
		var s = 1 / center.w;
		var this10 = new glm_Vec4Base();
		this10.x = 0;
		this10.y = 0;
		this10.z = 0;
		this10.w = 0;
		var dest8 = this10;
		dest8.x = center.x * s;
		dest8.y = center.y * s;
		dest8.z = center.z * s;
		dest8.w = center.w * s;
		center = dest8;
		var this11 = new glm_Vec4Base();
		this11.x = 1.0;
		this11.y = 1.0;
		this11.z = 1.0;
		this11.w = 1.0;
		var v1 = this11;
		var this12 = new glm_Vec4Base();
		this12.x = 0;
		this12.y = 0;
		this12.z = 0;
		this12.w = 0;
		var dest9 = this12;
		var x1 = v1.x;
		var y1 = v1.y;
		var z1 = v1.z;
		var w1 = v1.w;
		dest9.x = invProj._00 * x1 + invProj._10 * y1 + invProj._20 * z1 + invProj._30 * w1;
		dest9.y = invProj._01 * x1 + invProj._11 * y1 + invProj._21 * z1 + invProj._31 * w1;
		dest9.z = invProj._02 * x1 + invProj._12 * y1 + invProj._22 * z1 + invProj._32 * w1;
		dest9.w = invProj._03 * x1 + invProj._13 * y1 + invProj._23 * z1 + invProj._33 * w1;
		var max = dest9;
		var this13 = new glm_Vec4Base();
		this13.x = -1.0;
		this13.y = -1.0;
		this13.z = -1.0;
		this13.w = 1.0;
		var v2 = this13;
		var this14 = new glm_Vec4Base();
		this14.x = 0;
		this14.y = 0;
		this14.z = 0;
		this14.w = 0;
		var dest10 = this14;
		var x2 = v2.x;
		var y2 = v2.y;
		var z2 = v2.z;
		var w2 = v2.w;
		dest10.x = invProj._00 * x2 + invProj._10 * y2 + invProj._20 * z2 + invProj._30 * w2;
		dest10.y = invProj._01 * x2 + invProj._11 * y2 + invProj._21 * z2 + invProj._31 * w2;
		dest10.z = invProj._02 * x2 + invProj._12 * y2 + invProj._22 * z2 + invProj._32 * w2;
		dest10.w = invProj._03 * x2 + invProj._13 * y2 + invProj._23 * z2 + invProj._33 * w2;
		var min = dest10;
		var s1 = 1 / max.w;
		var this15 = new glm_Vec4Base();
		this15.x = 0;
		this15.y = 0;
		this15.z = 0;
		this15.w = 0;
		var dest11 = this15;
		dest11.x = max.x * s1;
		dest11.y = max.y * s1;
		dest11.z = max.z * s1;
		dest11.w = max.w * s1;
		max = dest11;
		var s2 = 1 / min.w;
		var this16 = new glm_Vec4Base();
		this16.x = 0;
		this16.y = 0;
		this16.z = 0;
		this16.w = 0;
		var dest12 = this16;
		dest12.x = min.x * s2;
		dest12.y = min.y * s2;
		dest12.z = min.z * s2;
		dest12.w = min.w * s2;
		min = dest12;
		var radius = Math.max((max.x - center.x) * (max.x - center.x) + (max.y - center.y) * (max.y - center.y) + (max.z - center.z) * (max.z - center.z) + (max.w - center.w) * (max.w - center.w),(min.x - center.x) * (min.x - center.x) + (min.y - center.y) * (min.y - center.y) + (min.z - center.z) * (min.z - center.z) + (min.w - center.w) * (min.w - center.w));
		var x3 = center.x;
		var y3 = center.y;
		var z3 = center.z;
		var this17 = new glm_Vec3Base();
		this17.x = x3;
		this17.y = y3;
		this17.z = z3;
		return { first : this17, second : radius};
	}
	,minSphere: function(pt,np,bnd,nb) {
	}
	,__class__: minko_component_DirectionalLight
});
var minko_component_MasterAnimation = $hx_exports["minko"]["component"]["MasterAnimation"] = function(isLooping) {
	minko_component_AbstractAnimation.call(this,isLooping);
	this._animations = [];
};
minko_component_MasterAnimation.__name__ = true;
minko_component_MasterAnimation.create = function(isLooping) {
	if(isLooping == null) {
		isLooping = true;
	}
	var ptr = new minko_component_MasterAnimation(isLooping);
	return ptr;
};
minko_component_MasterAnimation.__super__ = minko_component_AbstractAnimation;
minko_component_MasterAnimation.prototype = $extend(minko_component_AbstractAnimation.prototype,{
	play: function() {
		minko_component_AbstractAnimation.prototype.play.call(this);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.play();
		}
	}
	,stop: function() {
		minko_component_AbstractAnimation.prototype.stop.call(this);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.stop();
		}
	}
	,seek: function(time) {
		minko_component_AbstractAnimation.prototype.seek.call(this,time);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.seek(time);
		}
	}
	,clone: function(option) {
		var anim = new minko_component_MasterAnimation(this.get_isLooping());
		anim.copyFrom(this,option);
		return anim;
	}
	,addLabel: function(name,time) {
		minko_component_AbstractAnimation.prototype.addLabel.call(this,name,time);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.addLabel(name,time);
		}
	}
	,changeLabel: function(name,newName) {
		minko_component_AbstractAnimation.prototype.changeLabel.call(this,name,newName);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.changeLabel(name,newName);
		}
	}
	,setTimeForLabel: function(name,newTime) {
		minko_component_AbstractAnimation.prototype.setTimeForLabel.call(this,name,newTime);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.setTimeForLabel(name,newTime);
		}
	}
	,removeLabel: function(name) {
		minko_component_AbstractAnimation.prototype.removeLabel.call(this,name);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.removeLabel(name);
		}
	}
	,setPlaybackWindow: function(beginLabelName,endLabelName,forceRestart) {
		if(forceRestart == null) {
			forceRestart = false;
		}
		minko_component_AbstractAnimation.prototype.setPlaybackWindow.call(this,beginLabelName,endLabelName,forceRestart);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.setPlaybackWindow(beginLabelName,endLabelName,forceRestart);
		}
	}
	,resetPlaybackWindow: function() {
		minko_component_AbstractAnimation.prototype.resetPlaybackWindow.call(this);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.resetPlaybackWindow();
		}
	}
	,initAnimations: function() {
		var target = this.get_target();
		var targetParent = target.get_parent();
		var rootNode = targetParent != null ? targetParent : target;
		var descendants = minko_scene_NodeSet.createbyNode(rootNode).descendants(true);
		var nodes = descendants.get_nodes();
		var _g = 0;
		while(_g < nodes.length) {
			var descendant = nodes[_g];
			++_g;
			var _g1 = 0;
			var _g2 = descendant.getComponents(minko_component_Skinning);
			while(_g1 < _g2.length) {
				var skinning = _g2[_g1];
				++_g1;
				this._animations.push(skinning);
			}
			var _g11 = 0;
			var _g21 = descendant.getComponents(minko_component_Animation);
			while(_g11 < _g21.length) {
				var animation = _g21[_g11];
				++_g11;
				this._animations.push(animation);
			}
		}
		this._maxTime = 0;
		var _g3 = 0;
		var _g12 = this._animations;
		while(_g3 < _g12.length) {
			var animation1 = _g12[_g3];
			++_g3;
			this._maxTime = Math.floor(Math.max(this._maxTime,animation1.get_maxTime()));
		}
		this.setPlaybackWindow(0,this._maxTime);
		this.seek(0);
		this.play();
	}
	,rebindDependencies: function(componentsMap,nodeMap,option) {
		var newAnimations = [];
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			var it = componentsMap.h[animation.__id__];
			if(it != null) {
				newAnimations.push(animation);
			}
		}
		this._animations = newAnimations;
	}
	,set_timeFunction: function(func) {
		minko_component_AbstractAnimation.prototype.set_timeFunction.call(this,func);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.set_timeFunction(func);
		}
		return func;
	}
	,set_isReversed: function(value) {
		minko_component_AbstractAnimation.prototype.set_isReversed.call(this,value);
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			animation.set_isReversed(value);
		}
		return value;
	}
	,targetAdded: function(target) {
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.removedHandler));
		this._target = target;
		this.initAnimations();
	}
	,targetRemoved: function(target) {
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			var anim = animation;
			if(anim != null) {
				anim._currentTime = this._currentTime;
				anim.update();
			}
		}
	}
	,__class__: minko_component_MasterAnimation
});
var minko_component_Metadata = $hx_exports["minko"]["component"]["Metadata"] = function() {
	minko_component_AbstractComponent.call(this);
	this._data = new haxe_ds_StringMap();
};
minko_component_Metadata.__name__ = true;
minko_component_Metadata.create = function(data) {
	var m = new minko_component_Metadata();
	m.set_data(data);
	return m;
};
minko_component_Metadata.__super__ = minko_component_AbstractComponent;
minko_component_Metadata.prototype = $extend(minko_component_AbstractComponent.prototype,{
	set_data: function(__data) {
		this._data = __data;
		return this._data;
	}
	,get_data: function() {
		return this._data;
	}
	,keys: function() {
		return this._data.keys();
	}
	,get: function(propertyName) {
		var _this = this._data;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	,set: function(propertyName,value) {
		var _this = this._data;
		if(__map_reserved[propertyName] != null) {
			_this.setReserved(propertyName,value);
		} else {
			_this.h[propertyName] = value;
		}
		return;
	}
	,has: function(propertyName) {
		var _this = this._data;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,__class__: minko_component_Metadata
});
var minko_component_PerspectiveCamera = $hx_exports["minko"]["component"]["PerspectiveCamera"] = function(fov,aspectRatio,zNear,zFar,postPerspective) {
	minko_component_AbstractComponent.call(this);
	this._data = minko_data_Provider.create();
	this._fov = fov;
	this._aspectRatio = aspectRatio;
	this._zNear = zNear;
	this._zFar = zFar;
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this._view = dest;
	var this2 = new glm_Mat4Base();
	this2._00 = 0;
	this2._01 = 0;
	this2._02 = 0;
	this2._03 = 0;
	this2._10 = 0;
	this2._11 = 0;
	this2._12 = 0;
	this2._13 = 0;
	this2._20 = 0;
	this2._21 = 0;
	this2._22 = 0;
	this2._23 = 0;
	this2._30 = 0;
	this2._31 = 0;
	this2._32 = 0;
	this2._33 = 0;
	var dest1 = this2;
	var f = 1 / Math.tan(fov / 2);
	var nf = 1 / (zNear - zFar);
	dest1._00 = f / aspectRatio;
	dest1._01 = 0;
	dest1._02 = 0;
	dest1._03 = 0;
	dest1._10 = 0;
	dest1._11 = f;
	dest1._12 = 0;
	dest1._13 = 0;
	dest1._20 = 0;
	dest1._21 = 0;
	dest1._22 = (zFar + zNear) * nf;
	dest1._23 = -1;
	dest1._30 = 0;
	dest1._31 = 0;
	dest1._32 = 2 * zFar * zNear * nf;
	dest1._33 = 0;
	this._projection = dest1;
	this._viewProjection = this._projection;
	var this3 = new glm_Vec3Base();
	this3.x = 0;
	this3.y = 0;
	this3.z = 0;
	this._position = this3;
	var this4 = new glm_Vec3Base();
	this4.x = 0.0;
	this4.y = 0.0;
	this4.z = 1.0;
	this._direction = this4;
	this._postProjection = postPerspective;
	this._data.set("eyeDirection",this._direction).set("eyePosition",this._position).set("viewMatrix",this._view).set("projectionMatrix",this._projection).set("worldToScreenMatrix",this._viewProjection).set("fov",this._fov).set("aspectRatio",this._aspectRatio).set("zNear",this._zNear).set("zFar",this._zFar);
};
minko_component_PerspectiveCamera.__name__ = true;
minko_component_PerspectiveCamera.create = function(aspectRatio,fov,zNear,zFar,postProjection) {
	if(zFar == null) {
		zFar = 1000.0;
	}
	if(zNear == null) {
		zNear = 0.1;
	}
	if(fov == null) {
		fov = .785;
	}
	var tmp;
	if(postProjection == null) {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		tmp = dest;
	} else {
		tmp = postProjection;
	}
	return new minko_component_PerspectiveCamera(fov,aspectRatio,zNear,zFar,tmp);
};
minko_component_PerspectiveCamera.projectWorldPosition = function(worldPosition,viewportWidth,viewportHeight,viewMatrix,viewProjectionMatrix) {
	var width = viewportWidth;
	var height = viewportHeight;
	var x = worldPosition.x;
	var y = worldPosition.y;
	var z = worldPosition.z;
	var this1 = new glm_Vec4Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	this1.w = 1.0;
	var pos = this1;
	var this2 = new glm_Vec4Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	this2.w = 0;
	var dest = this2;
	var x1 = pos.x;
	var y1 = pos.y;
	var z1 = pos.z;
	var w = pos.w;
	dest.x = viewProjectionMatrix._00 * x1 + viewProjectionMatrix._10 * y1 + viewProjectionMatrix._20 * z1 + viewProjectionMatrix._30 * w;
	dest.y = viewProjectionMatrix._01 * x1 + viewProjectionMatrix._11 * y1 + viewProjectionMatrix._21 * z1 + viewProjectionMatrix._31 * w;
	dest.z = viewProjectionMatrix._02 * x1 + viewProjectionMatrix._12 * y1 + viewProjectionMatrix._22 * z1 + viewProjectionMatrix._32 * w;
	dest.w = viewProjectionMatrix._03 * x1 + viewProjectionMatrix._13 * y1 + viewProjectionMatrix._23 * z1 + viewProjectionMatrix._33 * w;
	var vector = dest;
	var s = 1 / vector.w;
	var this3 = new glm_Vec4Base();
	this3.x = 0;
	this3.y = 0;
	this3.z = 0;
	this3.w = 0;
	var dest1 = this3;
	dest1.x = vector.x * s;
	dest1.y = vector.y * s;
	dest1.z = vector.z * s;
	dest1.w = vector.w * s;
	vector = dest1;
	var this4 = new glm_Vec4Base();
	this4.x = 0;
	this4.y = 0;
	this4.z = 0;
	this4.w = 0;
	var dest2 = this4;
	var x2 = pos.x;
	var y2 = pos.y;
	var z2 = pos.z;
	var w1 = pos.w;
	dest2.x = viewMatrix._00 * x2 + viewMatrix._10 * y2 + viewMatrix._20 * z2 + viewMatrix._30 * w1;
	dest2.y = viewMatrix._01 * x2 + viewMatrix._11 * y2 + viewMatrix._21 * z2 + viewMatrix._31 * w1;
	dest2.z = viewMatrix._02 * x2 + viewMatrix._12 * y2 + viewMatrix._22 * z2 + viewMatrix._32 * w1;
	dest2.w = viewMatrix._03 * x2 + viewMatrix._13 * y2 + viewMatrix._23 * z2 + viewMatrix._33 * w1;
	pos = dest2;
	var x3 = width * (vector.x + 1.0) * .5;
	var y3 = height * (1.0 - (vector.y + 1.0) * .5);
	var z3 = -pos.z;
	var this5 = new glm_Vec3Base();
	this5.x = x3;
	this5.y = y3;
	this5.z = z3;
	return this5;
};
minko_component_PerspectiveCamera.__super__ = minko_component_AbstractComponent;
minko_component_PerspectiveCamera.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_fieldOfView: function() {
		return this._fov;
	}
	,set_fieldOfView: function(fov) {
		if(fov != this._fov) {
			this._fov = fov;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return fov;
	}
	,get_aspectRatio: function() {
		return this._aspectRatio;
	}
	,set_aspectRatio: function(v) {
		if(v != this._aspectRatio) {
			this._aspectRatio = v;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return v;
	}
	,get_zNear: function() {
		return this._zNear;
	}
	,set_zNear: function(v) {
		if(v != this._zNear) {
			this._zNear = v;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return v;
	}
	,get_zFar: function() {
		return this._zFar;
	}
	,set_zFar: function(v) {
		if(v != this._zFar) {
			this._zFar = v;
			this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
		}
		return v;
	}
	,get_data: function() {
		return this._data;
	}
	,get_viewMatrix: function() {
		return this._view;
	}
	,get_projectionMatrix: function() {
		return this._projection;
	}
	,get_viewProjectionMatrix: function() {
		return this._viewProjection;
	}
	,updateProjection: function(fov,aspectRatio,zNear,zFar) {
		this._fov = fov;
		this._aspectRatio = aspectRatio;
		this._zNear = zNear;
		this._zFar = zFar;
		var a = this._postProjection;
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		var f = 1 / Math.tan(fov / 2);
		var nf = 1 / (zNear - zFar);
		dest._00 = f / aspectRatio;
		dest._01 = 0;
		dest._02 = 0;
		dest._03 = 0;
		dest._10 = 0;
		dest._11 = f;
		dest._12 = 0;
		dest._13 = 0;
		dest._20 = 0;
		dest._21 = 0;
		dest._22 = (zFar + zNear) * nf;
		dest._23 = -1;
		dest._30 = 0;
		dest._31 = 0;
		dest._32 = 2 * zFar * zNear * nf;
		dest._33 = 0;
		var b = dest;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var dest1 = this2;
		var _a;
		var _b;
		if(dest1 == a) {
			var this3 = new glm_Mat4Base();
			this3._00 = 0;
			this3._01 = 0;
			this3._02 = 0;
			this3._03 = 0;
			this3._10 = 0;
			this3._11 = 0;
			this3._12 = 0;
			this3._13 = 0;
			this3._20 = 0;
			this3._21 = 0;
			this3._22 = 0;
			this3._23 = 0;
			this3._30 = 0;
			this3._31 = 0;
			this3._32 = 0;
			this3._33 = 0;
			var dest2 = this3;
			dest2._00 = a._00;
			dest2._10 = a._10;
			dest2._20 = a._20;
			dest2._30 = a._30;
			dest2._01 = a._01;
			dest2._11 = a._11;
			dest2._21 = a._21;
			dest2._31 = a._31;
			dest2._02 = a._02;
			dest2._12 = a._12;
			dest2._22 = a._22;
			dest2._32 = a._32;
			dest2._03 = a._03;
			dest2._13 = a._13;
			dest2._23 = a._23;
			dest2._33 = a._33;
			_a = dest2;
			_b = b;
		} else if(dest1 == b) {
			_a = a;
			var this4 = new glm_Mat4Base();
			this4._00 = 0;
			this4._01 = 0;
			this4._02 = 0;
			this4._03 = 0;
			this4._10 = 0;
			this4._11 = 0;
			this4._12 = 0;
			this4._13 = 0;
			this4._20 = 0;
			this4._21 = 0;
			this4._22 = 0;
			this4._23 = 0;
			this4._30 = 0;
			this4._31 = 0;
			this4._32 = 0;
			this4._33 = 0;
			var dest3 = this4;
			dest3._00 = b._00;
			dest3._10 = b._10;
			dest3._20 = b._20;
			dest3._30 = b._30;
			dest3._01 = b._01;
			dest3._11 = b._11;
			dest3._21 = b._21;
			dest3._31 = b._31;
			dest3._02 = b._02;
			dest3._12 = b._12;
			dest3._22 = b._22;
			dest3._32 = b._32;
			dest3._03 = b._03;
			dest3._13 = b._13;
			dest3._23 = b._23;
			dest3._33 = b._33;
			_b = dest3;
		} else {
			_a = a;
			_b = b;
		}
		dest1._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
		dest1._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
		dest1._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
		dest1._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
		dest1._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
		dest1._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
		dest1._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
		dest1._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
		dest1._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
		dest1._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
		dest1._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
		dest1._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
		dest1._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
		dest1._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
		dest1._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
		dest1._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
		this._projection = dest1;
		var a1 = this._projection;
		var b1 = this._view;
		var this5 = new glm_Mat4Base();
		this5._00 = 0;
		this5._01 = 0;
		this5._02 = 0;
		this5._03 = 0;
		this5._10 = 0;
		this5._11 = 0;
		this5._12 = 0;
		this5._13 = 0;
		this5._20 = 0;
		this5._21 = 0;
		this5._22 = 0;
		this5._23 = 0;
		this5._30 = 0;
		this5._31 = 0;
		this5._32 = 0;
		this5._33 = 0;
		var dest4 = this5;
		var _a1;
		var _b1;
		if(dest4 == a1) {
			var this6 = new glm_Mat4Base();
			this6._00 = 0;
			this6._01 = 0;
			this6._02 = 0;
			this6._03 = 0;
			this6._10 = 0;
			this6._11 = 0;
			this6._12 = 0;
			this6._13 = 0;
			this6._20 = 0;
			this6._21 = 0;
			this6._22 = 0;
			this6._23 = 0;
			this6._30 = 0;
			this6._31 = 0;
			this6._32 = 0;
			this6._33 = 0;
			var dest5 = this6;
			dest5._00 = a1._00;
			dest5._10 = a1._10;
			dest5._20 = a1._20;
			dest5._30 = a1._30;
			dest5._01 = a1._01;
			dest5._11 = a1._11;
			dest5._21 = a1._21;
			dest5._31 = a1._31;
			dest5._02 = a1._02;
			dest5._12 = a1._12;
			dest5._22 = a1._22;
			dest5._32 = a1._32;
			dest5._03 = a1._03;
			dest5._13 = a1._13;
			dest5._23 = a1._23;
			dest5._33 = a1._33;
			_a1 = dest5;
			_b1 = b1;
		} else if(dest4 == b1) {
			_a1 = a1;
			var this7 = new glm_Mat4Base();
			this7._00 = 0;
			this7._01 = 0;
			this7._02 = 0;
			this7._03 = 0;
			this7._10 = 0;
			this7._11 = 0;
			this7._12 = 0;
			this7._13 = 0;
			this7._20 = 0;
			this7._21 = 0;
			this7._22 = 0;
			this7._23 = 0;
			this7._30 = 0;
			this7._31 = 0;
			this7._32 = 0;
			this7._33 = 0;
			var dest6 = this7;
			dest6._00 = b1._00;
			dest6._10 = b1._10;
			dest6._20 = b1._20;
			dest6._30 = b1._30;
			dest6._01 = b1._01;
			dest6._11 = b1._11;
			dest6._21 = b1._21;
			dest6._31 = b1._31;
			dest6._02 = b1._02;
			dest6._12 = b1._12;
			dest6._22 = b1._22;
			dest6._32 = b1._32;
			dest6._03 = b1._03;
			dest6._13 = b1._13;
			dest6._23 = b1._23;
			dest6._33 = b1._33;
			_b1 = dest6;
		} else {
			_a1 = a1;
			_b1 = b1;
		}
		dest4._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
		dest4._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
		dest4._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
		dest4._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
		dest4._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
		dest4._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
		dest4._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
		dest4._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
		dest4._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
		dest4._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
		dest4._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
		dest4._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
		dest4._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
		dest4._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
		dest4._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
		dest4._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
		this._viewProjection = dest4;
		this._data.set("fov",this._fov).set("aspectRatio",this._aspectRatio).set("zNear",this._zNear).set("zFar",this._zFar).set("projectionMatrix",this._projection).set("worldToScreenMatrix",this._viewProjection);
	}
	,unproject: function(x,y) {
		var fovDiv2 = this._fov * .5;
		var dx = Math.tan(fovDiv2) * x * this._aspectRatio;
		var dy = -Math.tan(fovDiv2) * y;
		var x1 = dx * this._zNear;
		var y1 = dy * this._zNear;
		var z = -this._zNear;
		var this1 = new glm_Vec3Base();
		this1.x = x1;
		this1.y = y1;
		this1.z = z;
		var origin = this1;
		var x2 = dx * this._zNear;
		var y2 = dy * this._zNear;
		var z1 = -this._zNear;
		var this2 = new glm_Vec3Base();
		this2.x = x2;
		this2.y = y2;
		this2.z = z1;
		var direction = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var dest = this3;
		var length = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest.x = direction.x * mult;
		dest.y = direction.y * mult;
		dest.z = direction.z * mult;
		direction = dest;
		var t = this.get_target().getComponent(minko_component_Transform);
		if(t != null) {
			var tModelToWorld = t.get_modelToWorldMatrix();
			var x3 = origin.x;
			var y3 = origin.y;
			var z2 = origin.z;
			var this4 = new glm_Vec4Base();
			this4.x = x3;
			this4.y = y3;
			this4.z = z2;
			this4.w = 1;
			var v = this4;
			var this5 = new glm_Vec4Base();
			this5.x = 0;
			this5.y = 0;
			this5.z = 0;
			this5.w = 0;
			var dest1 = this5;
			var x4 = v.x;
			var y4 = v.y;
			var z3 = v.z;
			var w = v.w;
			dest1.x = tModelToWorld._00 * x4 + tModelToWorld._10 * y4 + tModelToWorld._20 * z3 + tModelToWorld._30 * w;
			dest1.y = tModelToWorld._01 * x4 + tModelToWorld._11 * y4 + tModelToWorld._21 * z3 + tModelToWorld._31 * w;
			dest1.z = tModelToWorld._02 * x4 + tModelToWorld._12 * y4 + tModelToWorld._22 * z3 + tModelToWorld._32 * w;
			dest1.w = tModelToWorld._03 * x4 + tModelToWorld._13 * y4 + tModelToWorld._23 * z3 + tModelToWorld._33 * w;
			var tmp = dest1;
			var x5 = tmp.x;
			var y5 = tmp.y;
			var z4 = tmp.z;
			var this6 = new glm_Vec3Base();
			this6.x = x5;
			this6.y = y5;
			this6.z = z4;
			origin = this6;
			var _r0c0 = tModelToWorld._00;
			var _r0c1 = tModelToWorld._10;
			var _r0c2 = tModelToWorld._20;
			var _r1c0 = tModelToWorld._01;
			var _r1c1 = tModelToWorld._11;
			var _r1c2 = tModelToWorld._21;
			var _r2c0 = tModelToWorld._02;
			var _r2c1 = tModelToWorld._22;
			var _r2c2 = tModelToWorld._22;
			var this7 = new glm_Mat3Base();
			this7._00 = _r0c0;
			this7._01 = _r1c0;
			this7._02 = _r2c0;
			this7._10 = _r0c1;
			this7._11 = _r1c1;
			this7._12 = _r2c1;
			this7._20 = _r0c2;
			this7._21 = _r1c2;
			this7._22 = _r2c2;
			var m = this7;
			var this8 = new glm_Vec3Base();
			this8.x = 0;
			this8.y = 0;
			this8.z = 0;
			var dest2 = this8;
			var x6 = direction.x;
			var y6 = direction.y;
			var z5 = direction.z;
			dest2.x = m._00 * x6 + m._10 * y6 + m._20 * z5;
			dest2.y = m._01 * x6 + m._11 * y6 + m._21 * z5;
			dest2.z = m._02 * x6 + m._12 * y6 + m._22 * z5;
			direction = dest2;
			var this9 = new glm_Vec3Base();
			this9.x = 0;
			this9.y = 0;
			this9.z = 0;
			var dest3 = this9;
			var length1 = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);
			var mult1 = 0;
			if(length1 >= glm_GLM.EPSILON) {
				mult1 = 1 / length1;
			}
			dest3.x = direction.x * mult1;
			dest3.y = direction.y * mult1;
			dest3.z = direction.z * mult1;
			direction = dest3;
		}
		return minko_math_Ray.createbyVector3(origin,direction);
	}
	,project: function(worldPosition) {
		var sm = this.get_target().get_root().getComponent(minko_component_SceneManager);
		var context = sm.get_assets().get_context();
		return minko_component_PerspectiveCamera.projectWorldPosition(worldPosition,context.get_viewportWidth(),context.get_viewportHeight(),this._view,this._viewProjection);
	}
	,targetAdded: function(target) {
		var _gthis = this;
		target.get_data().addProvider(this._data);
		this._modelToWorldChangedSlot = target.get_data().getPropertyChanged("modelToWorldMatrix").connect(function(s,p,s1) {
			_gthis.localToWorldChangedHandler(s);
		});
		if(target.get_data().hasProperty("modelToWorldMatrix")) {
			this.updateMatrices(target.get_data().get("modelToWorldMatrix"));
		}
	}
	,targetRemoved: function(target) {
		target.get_data().removeProvider(this._data);
	}
	,localToWorldChangedHandler: function(data) {
		this.updateMatrices(data.get("modelToWorldMatrix"));
	}
	,updateMatrices: function(modelToWorldMatrix) {
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 0.0;
		this1.w = 1.0;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = modelToWorldMatrix._00 * x + modelToWorldMatrix._10 * y + modelToWorldMatrix._20 * z + modelToWorldMatrix._30 * w;
		dest.y = modelToWorldMatrix._01 * x + modelToWorldMatrix._11 * y + modelToWorldMatrix._21 * z + modelToWorldMatrix._31 * w;
		dest.z = modelToWorldMatrix._02 * x + modelToWorldMatrix._12 * y + modelToWorldMatrix._22 * z + modelToWorldMatrix._32 * w;
		dest.w = modelToWorldMatrix._03 * x + modelToWorldMatrix._13 * y + modelToWorldMatrix._23 * z + modelToWorldMatrix._33 * w;
		var tmp = dest;
		var x1 = tmp.x;
		var y1 = tmp.y;
		var z1 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x1;
		this3.y = y1;
		this3.z = z1;
		this._position = this3;
		var _r0c0 = modelToWorldMatrix._00;
		var _r0c1 = modelToWorldMatrix._10;
		var _r0c2 = modelToWorldMatrix._20;
		var _r1c0 = modelToWorldMatrix._01;
		var _r1c1 = modelToWorldMatrix._11;
		var _r1c2 = modelToWorldMatrix._21;
		var _r2c0 = modelToWorldMatrix._02;
		var _r2c1 = modelToWorldMatrix._22;
		var _r2c2 = modelToWorldMatrix._22;
		var this4 = new glm_Mat3Base();
		this4._00 = _r0c0;
		this4._01 = _r1c0;
		this4._02 = _r2c0;
		this4._10 = _r0c1;
		this4._11 = _r1c1;
		this4._12 = _r2c1;
		this4._20 = _r0c2;
		this4._21 = _r1c2;
		this4._22 = _r2c2;
		var m = this4;
		var this5 = new glm_Vec3Base();
		this5.x = 0.0;
		this5.y = 0.0;
		this5.z = 1.0;
		var v1 = this5;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		var dest1 = this6;
		var x2 = v1.x;
		var y2 = v1.y;
		var z2 = v1.z;
		dest1.x = m._00 * x2 + m._10 * y2 + m._20 * z2;
		dest1.y = m._01 * x2 + m._11 * y2 + m._21 * z2;
		dest1.z = m._02 * x2 + m._12 * y2 + m._22 * z2;
		this._direction = dest1;
		var v2 = this._direction;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var dest2 = this7;
		var length = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest2.x = v2.x * mult;
		dest2.y = v2.y * mult;
		dest2.z = v2.z * mult;
		this._direction = dest2;
		var this8 = new glm_Mat4Base();
		this8._00 = 0;
		this8._01 = 0;
		this8._02 = 0;
		this8._03 = 0;
		this8._10 = 0;
		this8._11 = 0;
		this8._12 = 0;
		this8._13 = 0;
		this8._20 = 0;
		this8._21 = 0;
		this8._22 = 0;
		this8._23 = 0;
		this8._30 = 0;
		this8._31 = 0;
		this8._32 = 0;
		this8._33 = 0;
		var dest3 = this8;
		var a00 = modelToWorldMatrix._00;
		var a01 = modelToWorldMatrix._10;
		var a02 = modelToWorldMatrix._20;
		var a03 = modelToWorldMatrix._30;
		var a10 = modelToWorldMatrix._01;
		var a11 = modelToWorldMatrix._11;
		var a12 = modelToWorldMatrix._21;
		var a13 = modelToWorldMatrix._31;
		var a20 = modelToWorldMatrix._02;
		var a21 = modelToWorldMatrix._12;
		var a22 = modelToWorldMatrix._22;
		var a23 = modelToWorldMatrix._32;
		var a30 = modelToWorldMatrix._03;
		var a31 = modelToWorldMatrix._13;
		var a32 = modelToWorldMatrix._23;
		var a33 = modelToWorldMatrix._33;
		var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
		var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
		var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
		var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
		var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
		if(Math.abs(det) <= glm_GLM.EPSILON) {
			throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
		}
		var idet = 1 / det;
		dest3._00 = t00 * idet;
		dest3._01 = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
		dest3._02 = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
		dest3._03 = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
		dest3._10 = t01 * idet;
		dest3._11 = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
		dest3._12 = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
		dest3._13 = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
		dest3._20 = t02 * idet;
		dest3._21 = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
		dest3._22 = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
		dest3._23 = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
		dest3._30 = t03 * idet;
		dest3._31 = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
		dest3._32 = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
		dest3._33 = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
		this._view = dest3;
		this._data.set("eyeDirection",this._direction).set("eyePosition",this._position).set("viewMatrix",this._view);
		this.updateProjection(this._fov,this._aspectRatio,this._zNear,this._zFar);
	}
	,__class__: minko_component_PerspectiveCamera
});
var minko_component_PointLight = $hx_exports["minko"]["component"]["PointLight"] = function(diffuse,specular,attenuationConstant,attenuationLinear,attenuationQuadratic) {
	minko_component_AbstractDiscreteLight.call(this,"pointLight",diffuse,specular);
	var this1 = new glm_Vec3Base();
	this1.x = attenuationConstant;
	this1.y = attenuationLinear;
	this1.z = attenuationQuadratic;
	this._attenuationCoeffs = this1;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	this._worldPosition = this2;
	this.get_data().set("attenuationCoeffs",this._attenuationCoeffs);
	var this3 = new glm_Mat4Base();
	this3._00 = 0;
	this3._01 = 0;
	this3._02 = 0;
	this3._03 = 0;
	this3._10 = 0;
	this3._11 = 0;
	this3._12 = 0;
	this3._13 = 0;
	this3._20 = 0;
	this3._21 = 0;
	this3._22 = 0;
	this3._23 = 0;
	this3._30 = 0;
	this3._31 = 0;
	this3._32 = 0;
	this3._33 = 0;
	var dest = this3;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this.updateModelToWorldMatrix(dest);
};
minko_component_PointLight.__name__ = true;
minko_component_PointLight.create = function(diffuse,specular,attenuationConstant,attenuationLinear,attenuationQuadratic) {
	if(attenuationQuadratic == null) {
		attenuationQuadratic = -1.0;
	}
	if(attenuationLinear == null) {
		attenuationLinear = -1.0;
	}
	if(attenuationConstant == null) {
		attenuationConstant = -1.0;
	}
	if(specular == null) {
		specular = 1.0;
	}
	if(diffuse == null) {
		diffuse = 1.0;
	}
	return new minko_component_PointLight(diffuse,specular,attenuationConstant,attenuationLinear,attenuationQuadratic);
};
minko_component_PointLight.__super__ = minko_component_AbstractDiscreteLight;
minko_component_PointLight.prototype = $extend(minko_component_AbstractDiscreteLight.prototype,{
	clone: function(option) {
		var light = minko_component_PointLight.create().copyFrom(this,option);
		return light;
	}
	,get_attenuationEnabled: function() {
		return !(this._attenuationCoeffs.x < 0.0 || this._attenuationCoeffs.y < 0.0 || this._attenuationCoeffs.z < 0.0);
	}
	,get_attenuationCoefficients: function() {
		return this._attenuationCoeffs;
	}
	,setAttenuationCoefficients: function(constant,linear,quadratic) {
		var this1 = new glm_Vec3Base();
		this1.x = constant;
		this1.y = linear;
		this1.z = quadratic;
		return this.set_attenuationCoefficients(this1);
	}
	,set_attenuationCoefficients: function(value) {
		this.get_data().set("attenuationCoeffs",this._attenuationCoeffs = value);
		return value;
	}
	,get_position: function() {
		return this.get_data().get("position");
	}
	,updateModelToWorldMatrix: function(modelToWorld) {
		var this1 = new glm_Vec4Base();
		this1.x = 0.0;
		this1.y = 0.0;
		this1.z = 0.0;
		this1.w = 1.0;
		var v = this1;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var dest = this2;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var w = v.w;
		dest.x = modelToWorld._00 * x + modelToWorld._10 * y + modelToWorld._20 * z + modelToWorld._30 * w;
		dest.y = modelToWorld._01 * x + modelToWorld._11 * y + modelToWorld._21 * z + modelToWorld._31 * w;
		dest.z = modelToWorld._02 * x + modelToWorld._12 * y + modelToWorld._22 * z + modelToWorld._32 * w;
		dest.w = modelToWorld._03 * x + modelToWorld._13 * y + modelToWorld._23 * z + modelToWorld._33 * w;
		var tmp = dest;
		var tmp1 = this.get_data();
		var x1 = tmp.x;
		var y1 = tmp.y;
		var z1 = tmp.z;
		var this3 = new glm_Vec3Base();
		this3.x = x1;
		this3.y = y1;
		this3.z = z1;
		tmp1.set("position",this3);
	}
	,copyFrom: function(pointLight,option) {
		this.get_data().set("diffuse",pointLight.get_diffuse()).set("specular",pointLight.get_specular());
		this._attenuationCoeffs = pointLight.get_attenuationCoefficients();
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
		return this;
	}
	,__class__: minko_component_PointLight
});
var minko_component_Renderer = $hx_exports["minko"]["component"]["Renderer"] = function(renderTarget,effect,effectTechnique,priority) {
	this.enable_uuid();
	minko_component_AbstractComponent.call(this,1);
	this._backgroundColor = 0;
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = -1;
	this1.w = -1;
	this._viewportBox = this1;
	var this2 = new glm_Vec4Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = -1;
	this2.w = -1;
	this._scissorBox = this2;
	this._enabled = true;
	this._mustZSort = true;
	this._renderingBegin = new minko_signal_Signal();
	this._renderingEnd = new minko_signal_Signal();
	this._beforePresent = new minko_signal_Signal();
	this._effect = effect;
	this._effectTechnique = effectTechnique;
	this._clearBeforeRender = true;
	this._priority = priority;
	this._renderTarget = renderTarget;
	this._postProcessingGeom = null;
	this._filterChanged = new minko_signal_Signal4();
	this._numDrawCalls = 0;
	this._numTriangles = 0;
	this._drawCallPool = new minko_render_DrawCallPool();
	this._name = "";
	this._sceneManager = null;
	this._variables = [];
	this._toCollect = [];
	this._drawCallToZSortNeededSlot = new haxe_ds_ObjectMap();
	this._surfaceChangedSlots = new haxe_ds_ObjectMap();
	this._surfaceToDrawCallIterator = new haxe_ds_ObjectMap();
	this._filterChanged = new minko_signal_Signal4();
	this._nodeLayoutChangedSlot = new haxe_ds_ObjectMap();
	this._surfaceLayoutMaskChangedSlot = new haxe_ds_ObjectMap();
};
minko_component_Renderer.__name__ = true;
minko_component_Renderer.create = function(backgroundColor,renderTarget,effect,effectTechnique,priority,name) {
	if(name == null) {
		name = "";
	}
	if(priority == null) {
		priority = 0.0;
	}
	if(effectTechnique == null) {
		effectTechnique = "default";
	}
	if(backgroundColor == null) {
		backgroundColor = 0;
	}
	var ctrl = new minko_component_Renderer(renderTarget,effect,effectTechnique,priority);
	ctrl.set_backgroundColor(backgroundColor);
	ctrl.set_name(name);
	return ctrl;
};
minko_component_Renderer.__super__ = minko_component_AbstractComponent;
minko_component_Renderer.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_effect: function() {
		return this._effect;
	}
	,set_effect: function(v) {
		this.changeEffectOrTechnique(v,this._effectTechnique);
		return v;
	}
	,setEffect: function(effect,technique) {
		this.changeEffectOrTechnique(effect,technique);
	}
	,get_numDrawCalls: function() {
		return this._numDrawCalls;
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,get_backgroundColor: function() {
		return this._backgroundColor;
	}
	,set_backgroundColor: function(value) {
		this._backgroundColor = value;
		return value;
	}
	,set_name: function(value) {
		this._name = value;
		return value;
	}
	,get_name: function() {
		return this._name;
	}
	,get_priority: function() {
		return this._priority;
	}
	,set_priority: function(value) {
		this._priority = value;
		return value;
	}
	,set_viewport: function(value) {
		this._viewportBox = value;
		return value;
	}
	,scissorBox: function(x,y,w,h) {
		this._scissorBox.x = x;
		this._scissorBox.y = y;
		this._scissorBox.z = w;
		this._scissorBox.w = h;
	}
	,get_renderTarget: function() {
		return this._renderTarget;
	}
	,set_renderTarget: function(target) {
		this._renderTarget = target;
		return target;
	}
	,get_clearBeforeRender: function() {
		return this._clearBeforeRender;
	}
	,set_clearBeforeRender: function(value) {
		this._clearBeforeRender = value;
		return value;
	}
	,get_effectVariables: function() {
		return this._variables;
	}
	,get_effectTechnique: function() {
		return this._effectTechnique;
	}
	,set_effectTechnique: function(value) {
		this.changeEffectOrTechnique(this._effect,value);
		return value;
	}
	,get_enabled: function() {
		return this._enabled;
	}
	,set_enabled: function(value) {
		this._enabled = value;
		return value;
	}
	,get_drawCallPool: function() {
		return this._drawCallPool;
	}
	,get_renderingBegin: function() {
		return this._renderingBegin;
	}
	,get_beforePresent: function() {
		return this._beforePresent;
	}
	,get_renderingEnd: function() {
		return this._renderingEnd;
	}
	,reset: function() {
		this._toCollect = [];
		var s = this._surfaceToDrawCallIterator.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			this.removeSurface(s1);
		}
		this._surfaceToDrawCallIterator = new haxe_ds_ObjectMap();
		this._drawCallPool.clear();
	}
	,initializePostProcessingGeometry: function() {
		var context = this._sceneManager.get_assets().get_context();
		var vb = minko_render_VertexBuffer.createbyData(context,[-1.0,1.0,0.0,1.0,-1.0,-1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,0.0,0.0,1.0,-1.0,1.0,0.0]);
		vb.addAttribute("position",2);
		vb.addAttribute("uv",2,2);
		var p = minko_data_Provider.create();
		p.set("postProcessingPosition",vb.attribute("position"));
		p.set("postProcessingUV",vb.attribute("uv"));
		this._postProcessingGeom = minko_geometry_Geometry.createbyName();
		this._postProcessingGeom.addVertexBuffer(vb);
		this.get_target().get_data().addProvider(p);
	}
	,targetAdded: function(target) {
		if(this._effect != null) {
			target.get_data().addProviderbyName(this._effect.get_data(),"effect");
		}
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
		this._removedSlot = target.get_removed().connect($bind(this,this.removedHandler));
		this.addedHandler(target.get_root(),target,target.get_parent());
	}
	,addedHandler: function(node,target,parent) {
		this.findSceneManager();
		this.removeRootSlot();
		this._rootDescendantAddedSlot = target.get_root().get_added().connect($bind(this,this.rootDescendantAddedHandler),Infinity);
		this._rootDescendantRemovedSlot = target.get_root().get_removed().connect($bind(this,this.rootDescendantRemovedHandler),Infinity);
		this._componentAddedSlot = target.get_root().get_componentAdded().connect($bind(this,this.componentAddedHandler),Infinity);
		this._componentRemovedSlot = target.get_root().get_componentRemoved().connect($bind(this,this.componentRemovedHandler),Infinity);
		this.reset();
		this.rootDescendantAddedHandler(null,target.get_root(),null);
	}
	,removeRootSlot: function() {
		if(this._rootDescendantAddedSlot != null) {
			this._rootDescendantAddedSlot.disconnect();
		}
		if(this._rootDescendantRemovedSlot != null) {
			this._rootDescendantRemovedSlot.disconnect();
		}
		if(this._componentAddedSlot != null) {
			this._componentAddedSlot.disconnect();
		}
		if(this._componentRemovedSlot != null) {
			this._componentRemovedSlot.disconnect();
		}
		this._rootDescendantAddedSlot = null;
		this._rootDescendantRemovedSlot = null;
		this._componentAddedSlot = null;
		this._componentRemovedSlot = null;
	}
	,targetRemoved: function(target) {
		this.removeRootSlot();
		if(this._addedSlot != null) {
			this._addedSlot.disconnect();
		}
		if(this._removedSlot != null) {
			this._removedSlot.disconnect();
		}
		if(this._renderingBeginSlot != null) {
			this._renderingBeginSlot.disconnect();
		}
		this._addedSlot = null;
		this._removedSlot = null;
		this._renderingBeginSlot = null;
		this._surfaceChangedSlots = null;
		this._drawCallPool.clear();
		if(this._effect != null) {
			target.get_data().removeProviderbyName(this._effect.get_data(),"effect");
		}
	}
	,removedHandler: function(node,target,parent) {
		this.findSceneManager();
		this.removeRootSlot();
		this.rootDescendantRemovedHandler(null,target.get_root(),null);
	}
	,rootDescendantAddedHandler: function(node,target,parent) {
		var surfaceNodes = minko_scene_NodeSet.createbyNode(target).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaceNodes.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = surfaceNode.getComponents(minko_component_Surface);
			while(_g2 < _g3.length) {
				var surface = _g3[_g2];
				++_g2;
				this.addToCollect(surface);
			}
		}
	}
	,rootDescendantRemovedHandler: function(node,target,parent) {
		var surfaceNodes = minko_scene_NodeSet.createbyNode(target).descendants(true).where(function(node1) {
			return node1.hasComponent(minko_component_Surface);
		});
		var _g = 0;
		var _g1 = surfaceNodes.get_nodes();
		while(_g < _g1.length) {
			var surfaceNode = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = surfaceNode.getComponents(minko_component_Surface);
			while(_g2 < _g3.length) {
				var surface = _g3[_g2];
				++_g2;
				this.unwatchSurface(surface,surfaceNode);
				this.removeSurface(surface);
			}
		}
	}
	,componentAddedHandler: function(node,target,ctrl) {
		var _gthis = this;
		if(js_Boot.__instanceof(ctrl,minko_component_Surface)) {
			var surfaceCtrl = js_Boot.__cast(ctrl , minko_component_Surface);
			this.addToCollect(surfaceCtrl);
		} else if(js_Boot.__instanceof(ctrl,minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(ctrl , minko_component_SceneManager);
			this.setSceneManager(sceneManager);
		} else if(js_Boot.__instanceof(ctrl,minko_component_PerspectiveCamera)) {
			var perspectiveCamera = js_Boot.__cast(ctrl , minko_component_PerspectiveCamera);
			this._worldToScreenMatrixPropertyChangedSlot = perspectiveCamera.get_target().get_data().getPropertyChanged("worldToScreenMatrix").connect(function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
				_gthis._mustZSort = true;
			});
		}
	}
	,addToCollect: function(surfaceCtrl) {
		this._toCollect.push(surfaceCtrl);
	}
	,componentRemovedHandler: function(node,target,cmp) {
		if(js_Boot.__instanceof(cmp,minko_component_Surface)) {
			var surface = js_Boot.__cast(cmp , minko_component_Surface);
			this.unwatchSurface(surface,target);
			this.removeSurface(surface);
		} else if(js_Boot.__instanceof(cmp,minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(cmp , minko_component_SceneManager);
			this.setSceneManager(null);
		} else if(js_Boot.__instanceof(cmp,minko_component_PerspectiveCamera)) {
			var perspectiveCamera = js_Boot.__cast(cmp , minko_component_PerspectiveCamera);
			this._worldToScreenMatrixPropertyChangedSlot = null;
		}
	}
	,addSurface: function(surface) {
		if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null) {
			throw new js__$Boot_HaxeError("surface");
		}
		if(this._surfaceChangedSlots.h.__keys__[surface.__id__] != null == false) {
			this._surfaceChangedSlots.set(surface,[]);
		}
		if(this._effect != null || surface.get_effect() != null) {
			if(!this.checkSurfaceLayout(surface)) {
				return;
			}
			var variables = this._variables.concat([]);
			variables.push(new minko_Tuple("surfaceUuid",surface.get_uuid()));
			variables.push(new minko_Tuple("geometryUuid",surface.get_geometry().get_uuid()));
			variables.push(new minko_Tuple("materialUuid",surface.get_material().get_uuid()));
			variables.push(new minko_Tuple("effectUuid",this._effect != null ? this._effect.get_uuid() : surface.get_effect().get_uuid()));
			var drawCalls = this._drawCallPool.addDrawCalls(this._effect != null ? this._effect : surface.get_effect(),this._effect != null ? this._effectTechnique : surface.get_technique(),variables,surface.get_target().get_root().get_data(),this.get_target().get_data(),surface.get_target().get_data());
			this._surfaceToDrawCallIterator.set(surface,drawCalls);
			this._surfaceChangedSlots.h[surface.__id__].push(surface.get_geometryChanged().connect($bind(this,this.surfaceGeometryOrMaterialChangedHandler)));
			this._surfaceChangedSlots.h[surface.__id__].push(surface.get_materialChanged().connect($bind(this,this.surfaceGeometryOrMaterialChangedHandler)));
		}
		this._surfaceChangedSlots.h[surface.__id__].push(surface.get_effectChanged().connect($bind(this,this.surfaceEffectChangedHandler)));
	}
	,removeSurface: function(surface) {
		HxOverrides.remove(this._toCollect,surface);
		if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null == true) {
			this._drawCallPool.removeDrawCalls(this._surfaceToDrawCallIterator.h[surface.__id__]);
			this._surfaceToDrawCallIterator.remove(surface);
			var changedSlots = this._surfaceChangedSlots.h[surface.__id__];
			var _g = 0;
			while(_g < changedSlots.length) {
				var s = changedSlots[_g];
				++_g;
				s.disconnect();
			}
			this._surfaceChangedSlots.remove(surface);
		}
	}
	,surfaceGeometryOrMaterialChangedHandler: function(surface) {
		var variables = this._variables.concat([]);
		variables.push(new minko_Tuple("surfaceUuid",surface.get_uuid()));
		variables.push(new minko_Tuple("geometryUuid",surface.get_geometry().get_uuid()));
		variables.push(new minko_Tuple("materialUuid",surface.get_material().get_uuid()));
		variables.push(new minko_Tuple("effectUuid",this._effect != null ? this._effect.get_uuid() : surface.get_effect().get_uuid()));
		this._drawCallPool.invalidateDrawCalls(this._surfaceToDrawCallIterator.h[surface.__id__],variables);
	}
	,surfaceEffectChangedHandler: function(surface) {
		this.removeSurface(surface);
		this.addToCollect(surface);
	}
	,render: function(context,renderTarget) {
		var _gthis = this;
		if(!this._enabled) {
			return;
		}
		var forceSort = !Lambda.empty(this._toCollect);
		var _g = 0;
		var _g1 = this._toCollect;
		while(_g < _g1.length) {
			var surface = _g1[_g];
			++_g;
			this.watchSurface(surface);
			this.addSurface(surface);
		}
		this._toCollect = [];
		this._renderingBegin.execute(this);
		var rt = this._renderTarget != null ? this._renderTarget : renderTarget;
		if(this._scissorBox.z >= 0 && this._scissorBox.w >= 0) {
			context.setScissorTest(true,this._scissorBox);
		} else {
			context.setScissorTest(false,this._scissorBox);
		}
		if(rt != null) {
			context.setRenderToTexture(rt.get_id(),true);
		} else {
			context.setRenderToBackBuffer();
		}
		if(this._viewportBox.z >= 0 && this._viewportBox.w >= 0) {
			context.configureViewport(Math.floor(this._viewportBox.x),Math.floor(this._viewportBox.y),Math.floor(this._viewportBox.z),Math.floor(this._viewportBox.w));
		}
		if(this._clearBeforeRender) {
			context.clear((this._backgroundColor >> 24 & 255) / 255.0,(this._backgroundColor >> 16 & 255) / 255.0,(this._backgroundColor >> 8 & 255) / 255.0,(this._backgroundColor & 255) / 255.0);
		}
		this._drawCallPool.update(forceSort,this._mustZSort);
		this._mustZSort = false;
		var drawCallKeys = this._drawCallPool.get_drawCallsKeys();
		var drawCalls = this._drawCallPool.get_drawCalls();
		this._numDrawCalls = 0;
		this._numTriangles = 0;
		var _g2 = 0;
		while(_g2 < drawCallKeys.length) {
			var dk = drawCallKeys[_g2];
			++_g2;
			var priorityToDrawCalls = __map_reserved[dk] != null ? drawCalls.getReserved(dk) : drawCalls.h[dk];
			var drawCalls1 = priorityToDrawCalls.first;
			var _g3 = 0;
			while(_g3 < drawCalls1.length) {
				var drawCall = drawCalls1[_g3];
				++_g3;
				if(drawCall.get_enabled()) {
					drawCall.render(context,rt,_gthis._viewportBox,_gthis._backgroundColor);
					++_gthis._numDrawCalls;
					_gthis._numTriangles += drawCall.get_numTriangles();
				}
			}
			var drawCalls2 = priorityToDrawCalls.second;
			var _g4 = 0;
			while(_g4 < drawCalls2.length) {
				var drawCall1 = drawCalls2[_g4];
				++_g4;
				if(drawCall1.get_enabled()) {
					drawCall1.render(context,rt,_gthis._viewportBox,_gthis._backgroundColor);
					++_gthis._numDrawCalls;
					_gthis._numTriangles += drawCall1.get_numTriangles();
				}
			}
		}
		this._beforePresent.execute(this);
		context.present();
		this._renderingEnd.execute(this);
	}
	,clear: function(canvas) {
		var x = (this._backgroundColor >> 24 & 255) / 255.0;
		var y = (this._backgroundColor >> 16 & 255) / 255.0;
		var z = (this._backgroundColor >> 8 & 255) / 255.0;
		var w = (this._backgroundColor & 255) / 255.0;
		var this1 = new glm_Vec4Base();
		this1.x = x;
		this1.y = y;
		this1.z = z;
		this1.w = w;
		var backgroundColor = this1;
		this.clearbyVector4(canvas,backgroundColor);
	}
	,clearbyVector4: function(canvas,clearColor) {
		canvas.get_context().clear(clearColor.x,clearColor.y,clearColor.z,clearColor.w);
		canvas.swapBuffers();
		canvas.get_context().clear(clearColor.x,clearColor.y,clearColor.z,clearColor.w);
	}
	,findSceneManager: function() {
		var roots = minko_scene_NodeSet.createbyNode(this.get_target()).roots().where(function(node) {
			return node.hasComponent(minko_component_SceneManager);
		});
		if(roots.get_nodes().length > 1) {
			throw new js__$Boot_HaxeError("Renderer cannot be in two separate scenes.");
		} else if(roots.get_nodes().length == 1) {
			this.setSceneManager(roots.get_nodes()[0].getComponent(minko_component_SceneManager));
		} else {
			this.setSceneManager(null);
		}
	}
	,setSceneManager: function(sceneManager) {
		if(sceneManager != this._sceneManager) {
			if(sceneManager != null) {
				this._sceneManager = sceneManager;
				this._renderingBeginSlot = this._sceneManager.get_renderingEnd().connect($bind(this,this.sceneManagerRenderingBeginHandler),this._priority);
				this.initializePostProcessingGeometry();
			} else {
				this._sceneManager = null;
				this._renderingBeginSlot = null;
				if(this._postProcessingGeom != null) {
					this.get_target().get_data().removeProviderbyName(this._postProcessingGeom.get_data(),"geometry");
					this._postProcessingGeom = null;
				}
			}
		}
	}
	,sceneManagerRenderingBeginHandler: function(sceneManager,frameId,renderTarget) {
		this.render(sceneManager.get_assets().get_context(),renderTarget);
	}
	,addFilter: function(filter,source) {
		return this;
	}
	,removeFilter: function(filter,source) {
		return this;
	}
	,surfaceLayoutMaskChangedHandler: function(surface) {
		if(this.checkSurfaceLayout(surface)) {
			this.enableDrawCalls(surface,true);
			if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null == false) {
				this.addToCollect(surface);
			}
		} else if((surface.get_target().get_layout() & 32) != 0 || (surface.get_target().get_layout() & 128) == 0) {
			this.enableDrawCalls(surface,false);
		} else if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] != null) {
			this.removeSurface(surface);
		}
	}
	,watchSurface: function(surface) {
		var _gthis = this;
		var node = surface.get_target();
		if(this._nodeLayoutChangedSlot.h.__keys__[node.__id__] != null == false) {
			this._nodeLayoutChangedSlot.set(node,node.get_layoutChanged().connect(function(n,t) {
				var _g = 0;
				var _g1 = t.getComponents(minko_component_Surface);
				while(_g < _g1.length) {
					var surface1 = _g1[_g];
					++_g;
					_gthis.surfaceLayoutMaskChangedHandler(surface1);
				}
			}));
		}
		if(this._surfaceLayoutMaskChangedSlot.h.__keys__[surface.__id__] != null == false) {
			this._surfaceLayoutMaskChangedSlot.set(surface,surface.get_layoutMaskChanged().connect(function(surface2) {
				_gthis.surfaceLayoutMaskChangedHandler(surface2);
			}));
		}
	}
	,unwatchSurface: function(surface,node) {
		if(this._surfaceLayoutMaskChangedSlot.h.__keys__[surface.__id__] != null) {
			this._surfaceLayoutMaskChangedSlot.h[surface.__id__].disconnect();
			this._surfaceLayoutMaskChangedSlot.remove(surface);
		}
		if(!node.hasComponent(minko_component_Surface)) {
			this._nodeLayoutChangedSlot.h[node.__id__].disconnect();
			this._nodeLayoutChangedSlot.remove(node);
		}
	}
	,checkSurfaceLayout: function(surface) {
		return (surface.get_target().get_layout() & surface.get_layoutMask() & this.get_layoutMask()) != 0;
	}
	,set_layoutMask: function(value) {
		minko_component_AbstractComponent.prototype.set_layoutMask.call(this,value);
		if(this.get_target() != null) {
			this._drawCallPool.clear();
			this.rootDescendantRemovedHandler(null,this.get_target().get_root(),null);
		}
		return value;
	}
	,enableDrawCalls: function(surface,enabled) {
		if(this._surfaceToDrawCallIterator.h.__keys__[surface.__id__] == null) {
			return;
		}
		var drawCallId = this._surfaceToDrawCallIterator.h[surface.__id__];
		var _this = this._drawCallPool.get_drawCalls();
		var priorityToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(priorityToDrawCalls.hasNext()) {
			var priorityToDrawCalls1 = priorityToDrawCalls.next();
			var drawCalls = priorityToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				if(drawCall.get_batchIDs().length > 1) {
					continue;
				}
				if(drawCall.get_batchIDs()[0] == drawCallId) {
					drawCall.set_enabled(enabled);
				}
			}
			var drawCalls1 = priorityToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls1.length) {
				var drawCall1 = drawCalls1[_g1];
				++_g1;
				if(drawCall1.get_batchIDs().length > 1) {
					continue;
				}
				if(drawCall1.get_batchIDs()[0] == drawCallId) {
					drawCall1.set_enabled(enabled);
				}
			}
		}
	}
	,changeEffectOrTechnique: function(effect,technique) {
		if(effect != this._effect || technique != this._effectTechnique) {
			this._effect = effect;
			this._effectTechnique = technique;
			this.reset();
			this.rootDescendantAddedHandler(this.get_target().get_root(),this.get_target().get_root(),this.get_target().get_parent());
		}
	}
	,__class__: minko_component_Renderer
});
var minko_component_SceneManager = $hx_exports["minko"]["component"]["SceneManager"] = function(canvas) {
	minko_component_AbstractComponent.call(this);
	this._canvas = canvas;
	this._frameId = 0;
	this._time = 0.0;
	this._assets = minko_file_AssetLibrary.create(canvas.get_context());
	this._frameBegin = new minko_signal_Signal3();
	this._frameEnd = new minko_signal_Signal3();
	this._cullBegin = new minko_signal_Signal();
	this._cullEnd = new minko_signal_Signal();
	this._renderBegin = new minko_signal_Signal3();
	this._renderEnd = new minko_signal_Signal3();
	this._data = minko_data_Provider.create();
};
minko_component_SceneManager.__name__ = true;
minko_component_SceneManager.create = function(canvas) {
	var sm = new minko_component_SceneManager(canvas);
	return sm;
};
minko_component_SceneManager.__super__ = minko_component_AbstractComponent;
minko_component_SceneManager.prototype = $extend(minko_component_AbstractComponent.prototype,{
	get_canvas: function() {
		return this._canvas;
	}
	,get_frameId: function() {
		return this._frameId;
	}
	,get_assets: function() {
		return this._assets;
	}
	,get_frameBegin: function() {
		return this._frameBegin;
	}
	,get_frameEnd: function() {
		return this._frameEnd;
	}
	,get_cullingBegin: function() {
		return this._cullBegin;
	}
	,get_cullingEnd: function() {
		return this._cullEnd;
	}
	,get_renderingBegin: function() {
		return this._renderBegin;
	}
	,get_renderingEnd: function() {
		return this._renderEnd;
	}
	,get_time: function() {
		return this._time;
	}
	,targetAdded: function(target) {
		if(target.get_root() != target) {
			throw new js__$Boot_HaxeError("SceneManager must be on the root node only.");
		}
		if(target.getComponents(minko_component_SceneManager).length > 1) {
			throw new js__$Boot_HaxeError("The same root node cannot have more than one SceneManager.");
		}
		target.get_data().addProvider(this._data);
		target.get_data().addProvider(this._canvas.get_data());
		this._addedSlot = target.get_added().connect($bind(this,this.addedHandler));
	}
	,targetRemoved: function(target) {
		this._addedSlot = null;
		target.get_data().removeProvider(this._data);
		target.get_data().removeProvider(this._canvas.get_data());
	}
	,addedHandler: function(node,target,ancestor) {
		if(target == this.get_target()) {
			throw new js__$Boot_HaxeError("SceneManager must be on the root node only.");
		}
	}
	,nextFrame: function(time,deltaTime,renderTarget) {
		this._time = time;
		this._data.set("time",this._time);
		this._frameBegin.execute(this,time,deltaTime);
		this._cullBegin.execute(this);
		this._cullEnd.execute(this);
		this._renderBegin.execute(this,this._frameId,renderTarget);
		this._renderEnd.execute(this,this._frameId,renderTarget);
		this._frameEnd.execute(this,time,deltaTime);
		++this._frameId;
	}
	,__class__: minko_component_SceneManager
});
var minko_component_ShadowMappingTechnique = $hx_exports["minko"]["component"]["ShadowMappingTechnique"] = function(technique) {
	minko_component_AbstractComponent.call(this);
	this._technique = technique;
	this._data = minko_data_Provider.create();
	this._data.set("shadowMappingTechnique",technique);
};
minko_component_ShadowMappingTechnique.__name__ = true;
minko_component_ShadowMappingTechnique.create = function(technique) {
	return new minko_component_ShadowMappingTechnique(technique);
};
minko_component_ShadowMappingTechnique.__super__ = minko_component_AbstractComponent;
minko_component_ShadowMappingTechnique.prototype = $extend(minko_component_AbstractComponent.prototype,{
	targetAdded: function(target) {
		target.get_data().addProvider(this._data);
	}
	,__class__: minko_component_ShadowMappingTechnique
});
var minko_component_Skinning = $hx_exports["minko"]["component"]["Skinning"] = function(skin,method,context,skeletonRoot,moveTargetBelowRoot,isLooping) {
	minko_component_AbstractAnimation.call(this,isLooping);
	this._skin = skin;
	this._context = context;
	this._method = method;
	this._skeletonRoot = skeletonRoot;
	this._moveTargetBelowRoot = moveTargetBelowRoot;
	this._boneVertexBuffer = null;
	this._targetGeometry = new haxe_ds_ObjectMap();
	this._targetInputPositions = new haxe_ds_ObjectMap();
	this._targetInputNormals = new haxe_ds_ObjectMap();
};
minko_component_Skinning.__name__ = true;
minko_component_Skinning.create = function(skin,method,context,skeletonRoot,moveTargetBelowRoot,isLooping) {
	if(isLooping == null) {
		isLooping = true;
	}
	if(moveTargetBelowRoot == null) {
		moveTargetBelowRoot = false;
	}
	var ptr = new minko_component_Skinning(skin,method,context,skeletonRoot,moveTargetBelowRoot,isLooping);
	ptr.initialize();
	return ptr;
};
minko_component_Skinning.__super__ = minko_component_AbstractAnimation;
minko_component_Skinning.prototype = $extend(minko_component_AbstractAnimation.prototype,{
	clone: function(option) {
		var skin = minko_component_Skinning.create(null,null,null,null).copyFromSkinning(this,option);
		skin.initialize();
		return skin;
	}
	,get_skin: function() {
		return this._skin;
	}
	,initialize: function() {
		minko_component_AbstractAnimation.prototype.initialize.call(this);
		if(this._skin == null) {
			throw new js__$Boot_HaxeError("skin");
		}
		if(this._context == null) {
			throw new js__$Boot_HaxeError("context");
		}
		if(this._method != 0 && this._skin.get_maxNumVertexBones() > minko_component_Skinning.MAX_NUM_BONES_PER_VERTEX) {
			var error_msg = "The maximum number of bones per vertex gets too high (" + this._skin.get_maxNumVertexBones() + ") to propose hardware skinning (max allowed = " + minko_component_Skinning.MAX_NUM_BONES_PER_VERTEX + ")";
			this._method = 0;
		}
		this._boneVertexBuffer = this._method == 0 ? null : this.createVertexBufferForBones();
		this._maxTime = this._skin.get_duration();
		this.setPlaybackWindow(0,this._maxTime);
		this.seek(0);
	}
	,targetAdded: function(target) {
		minko_component_AbstractAnimation.prototype.targetAdded.call(this,target);
		if(this._skeletonRoot == null || !this._moveTargetBelowRoot) {
			return;
		}
		if(target.get_parent() != null) {
			target.get_parent().removeChild(target);
		}
		this._skeletonRoot.addChild(target);
		if(target.hasComponent(minko_component_Transform)) {
			var transform = target.getComponent(minko_component_Transform);
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			dest._00 = 1;
			dest._10 = 0;
			dest._20 = 0;
			dest._30 = 0;
			dest._01 = 0;
			dest._11 = 1;
			dest._21 = 0;
			dest._31 = 0;
			dest._02 = 0;
			dest._12 = 0;
			dest._22 = 1;
			dest._32 = 0;
			dest._03 = 0;
			dest._13 = 0;
			dest._23 = 0;
			dest._33 = 1;
			transform.set_matrix(dest);
		}
		if(target.hasComponent(minko_component_MasterAnimation)) {
			var masterAnimation = target.getComponent(minko_component_MasterAnimation);
			masterAnimation.initAnimations();
		}
	}
	,copyFromSkinning: function(skinning,option) {
		this.copyFrom(skinning,option);
		this._skin = new minko_geometry_Skin();
		this._context = skinning._context;
		this._method = skinning._method;
		this._skeletonRoot = skinning._skeletonRoot;
		this._moveTargetBelowRoot = skinning._moveTargetBelowRoot;
		this._boneVertexBuffer = null;
		this._targetGeometry = new haxe_ds_ObjectMap();
		this._targetInputPositions = new haxe_ds_ObjectMap();
		this._targetInputNormals = new haxe_ds_ObjectMap();
		this._skin = skinning._skin.clone();
		var targetGeometry = skinning._targetGeometry;
		var it = targetGeometry.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			this._targetGeometry.set(it1,targetGeometry.h[it1.__id__]);
		}
		return this;
	}
	,addedHandler: function(node,target,parent) {
		minko_component_AbstractAnimation.prototype.addedHandler.call(this,node,target,parent);
		if(this._skin.get_duration() == 0) {
			return;
		}
		if(node.getComponents(minko_component_Surface).length > 1) {
			throw new js__$Boot_HaxeError("Warning: The skinning component is not intended to work on node with several surfaces. Attempts to apply skinning to first surface.");
		}
		if(node.hasComponent(minko_component_Surface)) {
			var geometry = (js_Boot.__cast(node.getComponent(minko_component_Surface) , minko_component_Surface)).get_geometry();
			if(geometry.hasVertexAttribute(minko_component_Skinning.ATTRNAME_POSITION) && geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_POSITION).get_numVertices() == this._skin.get_numVertices() && !geometry.hasVertexBuffer(this._boneVertexBuffer)) {
				this._targetGeometry.set(node,geometry);
				this._targetInputPositions.set(node,geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_POSITION).get_data());
				if(geometry.hasVertexAttribute(minko_component_Skinning.ATTRNAME_NORMAL) && geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_NORMAL).get_numVertices() == this._skin.get_numVertices()) {
					this._targetInputNormals.set(node,geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_NORMAL).get_data());
				}
				if(this._method != 0) {
					geometry.addVertexBuffer(this._boneVertexBuffer);
					geometry.get_data().set(minko_component_Skinning.PNAME_BONE_MATRICES,[]);
					geometry.get_data().set(minko_component_Skinning.PNAME_NUM_BONES,0);
				}
			}
		}
	}
	,removedHandler: function(node,target,parent) {
		minko_component_AbstractAnimation.prototype.removedHandler.call(this,node,target,parent);
		if(this._targetGeometry.h.__keys__[target.__id__] != null) {
			var geometry = this._targetGeometry.h[target.__id__];
			if(this._method != 0) {
				geometry.removeVertexBuffer(this._boneVertexBuffer);
				geometry.get_data().unset(minko_component_Skinning.PNAME_BONE_MATRICES);
				geometry.get_data().unset(minko_component_Skinning.PNAME_NUM_BONES);
			}
			this._targetGeometry.remove(target);
		}
		if(this._targetInputPositions.h.__keys__[target.__id__] != null) {
			this._targetInputPositions.remove(target);
		}
		if(this._targetInputNormals.h.__keys__[target.__id__] != null) {
			this._targetInputNormals.remove(target);
		}
	}
	,update: function() {
		var frameId = this._skin.getFrameId(this._currentTime);
		this.updateFrame(frameId,this.get_target());
	}
	,updateFrame: function(frameId,target) {
		if(this._targetGeometry.h.__keys__[target.__id__] != null == false) {
			return;
		}
		var geometry = this._targetGeometry.h[target.__id__];
		var boneMatrices = this._skin.getMatrices(frameId);
		if(this._method == 1) {
			if(!geometry.get_data().hasProperty(minko_component_Skinning.PNAME_NUM_BONES) || geometry.get_data().get(minko_component_Skinning.PNAME_NUM_BONES) != this._skin.get_numBones()) {
				geometry.get_data().set(minko_component_Skinning.PNAME_NUM_BONES,this._skin.get_numBones());
			}
			geometry.get_data().set(minko_component_Skinning.PNAME_BONE_MATRICES,boneMatrices);
			geometry.get_data().set(minko_component_Skinning.PNAME_NUM_BONES,this._skin.get_numBones());
		} else {
			this.performSoftwareSkinningFrame(target,boneMatrices);
		}
	}
	,performSoftwareSkinningFrame: function(target,boneMatrices) {
		var geometry = this._targetGeometry.h[target.__id__];
		var xyzBuffer = geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_POSITION);
		var xyzAttr = xyzBuffer.attribute(minko_component_Skinning.ATTRNAME_POSITION);
		this.performSoftwareSkinning(xyzAttr,xyzBuffer,this._targetInputPositions.h[target.__id__],boneMatrices,false);
		if(geometry.hasVertexAttribute(minko_component_Skinning.ATTRNAME_NORMAL) && this._targetInputNormals.h.__keys__[target.__id__] != null) {
			var normalBuffer = geometry.vertexBuffer(minko_component_Skinning.ATTRNAME_NORMAL);
			var normalAttr = normalBuffer.attribute(minko_component_Skinning.ATTRNAME_NORMAL);
			this.performSoftwareSkinning(normalAttr,normalBuffer,this._targetInputNormals.h[target.__id__],boneMatrices,true);
		}
	}
	,performSoftwareSkinning: function(attr,vertexBuffer,inputData,boneMatrices,doDeltaTransform) {
		var vertexSize = vertexBuffer.get_vertexSize();
		var outputData = vertexBuffer.get_data();
		var numVertices = Math.floor(outputData.length / vertexSize);
		var index = attr.offset;
		var _g1 = 0;
		var _g = numVertices;
		while(_g1 < _g) {
			var vId = _g1++;
			var this1 = new glm_Vec4Base();
			this1.x = inputData[index];
			this1.y = inputData[index + 1];
			this1.z = inputData[index + 2];
			this1.w = 1.0;
			var v1 = this1;
			var this2 = new glm_Vec4Base();
			this2.x = 0.0;
			this2.y = 0;
			this2.z = 0;
			this2.w = 0;
			var v2 = this2;
			var numVertexBones = this._skin.numVertexBones(vId);
			var _g3 = 0;
			var _g2 = numVertexBones;
			while(_g3 < _g2) {
				var j = _g3++;
				var boneId = 0;
				var boneWeight = 0.0;
				var t = this._skin.vertexBoneData(vId,j,boneId,boneWeight);
				boneId = t.first;
				boneWeight = t.second;
				var boneMatrix = boneMatrices[boneId];
				if(!doDeltaTransform) {
					var this3 = new glm_Vec4Base();
					this3.x = 0;
					this3.y = 0;
					this3.z = 0;
					this3.w = 0;
					var dest = this3;
					dest.x = v1.x * boneWeight;
					dest.y = v1.y * boneWeight;
					dest.z = v1.z * boneWeight;
					dest.w = v1.w * boneWeight;
					var v = dest;
					var this4 = new glm_Vec4Base();
					this4.x = 0;
					this4.y = 0;
					this4.z = 0;
					this4.w = 0;
					var dest1 = this4;
					var x = v.x;
					var y = v.y;
					var z = v.z;
					var w = v.w;
					dest1.x = boneMatrix._00 * x + boneMatrix._10 * y + boneMatrix._20 * z + boneMatrix._30 * w;
					dest1.y = boneMatrix._01 * x + boneMatrix._11 * y + boneMatrix._21 * z + boneMatrix._31 * w;
					dest1.z = boneMatrix._02 * x + boneMatrix._12 * y + boneMatrix._22 * z + boneMatrix._32 * w;
					dest1.w = boneMatrix._03 * x + boneMatrix._13 * y + boneMatrix._23 * z + boneMatrix._33 * w;
					var b = dest1;
					var this5 = new glm_Vec4Base();
					this5.x = 0;
					this5.y = 0;
					this5.z = 0;
					this5.w = 0;
					var dest2 = this5;
					dest2.x = v2.x + b.x;
					dest2.y = v2.y + b.y;
					dest2.z = v2.z + b.z;
					dest2.w = v2.w + b.w;
					v2 = dest2;
				} else {
					var _r0c0 = boneMatrix._00;
					var _r0c1 = boneMatrix._10;
					var _r0c2 = boneMatrix._20;
					var _r1c0 = boneMatrix._01;
					var _r1c1 = boneMatrix._11;
					var _r1c2 = boneMatrix._21;
					var _r2c0 = boneMatrix._02;
					var _r2c1 = boneMatrix._22;
					var _r2c2 = boneMatrix._22;
					var this6 = new glm_Mat3Base();
					this6._00 = _r0c0;
					this6._01 = _r1c0;
					this6._02 = _r2c0;
					this6._10 = _r0c1;
					this6._11 = _r1c1;
					this6._12 = _r2c1;
					this6._20 = _r0c2;
					this6._21 = _r1c2;
					this6._22 = _r2c2;
					var mat3 = this6;
					var x1 = v1.x;
					var y1 = v1.y;
					var z1 = v1.z;
					var this7 = new glm_Vec3Base();
					this7.x = x1;
					this7.y = y1;
					this7.z = z1;
					var vec3 = this7;
					var this8 = new glm_Vec3Base();
					this8.x = 0;
					this8.y = 0;
					this8.z = 0;
					var dest3 = this8;
					dest3.x = vec3.x * boneWeight;
					dest3.y = vec3.y * boneWeight;
					dest3.z = vec3.z * boneWeight;
					var v3 = dest3;
					var this9 = new glm_Vec3Base();
					this9.x = 0;
					this9.y = 0;
					this9.z = 0;
					var dest4 = this9;
					var x2 = v3.x;
					var y2 = v3.y;
					var z2 = v3.z;
					dest4.x = mat3._00 * x2 + mat3._10 * y2 + mat3._20 * z2;
					dest4.y = mat3._01 * x2 + mat3._11 * y2 + mat3._21 * z2;
					dest4.z = mat3._02 * x2 + mat3._12 * y2 + mat3._22 * z2;
					var v4 = dest4;
					var x3 = v4.x;
					var y3 = v4.y;
					var z3 = v4.z;
					var this10 = new glm_Vec4Base();
					this10.x = x3;
					this10.y = y3;
					this10.z = z3;
					this10.w = 0;
					var b1 = this10;
					var this11 = new glm_Vec4Base();
					this11.x = 0;
					this11.y = 0;
					this11.z = 0;
					this11.w = 0;
					var dest5 = this11;
					dest5.x = v2.x + b1.x;
					dest5.y = v2.y + b1.y;
					dest5.z = v2.z + b1.z;
					dest5.w = v2.w + b1.w;
					v2 = dest5;
				}
			}
			outputData[index] = v2.x;
			outputData[index + 1] = v2.y;
			outputData[index + 2] = v2.z;
			index += vertexSize;
		}
		vertexBuffer.upload();
	}
	,createVertexBufferForBones: function() {
		var vertexSize = 16;
		var numVertices = this._skin.get_numVertices();
		var _g = [];
		var _g2 = 0;
		var _g1 = numVertices * vertexSize;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0.0);
		}
		var vertexData = _g;
		var index = 0;
		var _g21 = 0;
		var _g11 = numVertices;
		while(_g21 < _g11) {
			var vId = _g21++;
			var numVertexBones = this._skin.numVertexBones(vId);
			var j = 0;
			while(j < numVertexBones && j < vertexSize >> 2) {
				vertexData[index + j] = this._skin.vertexBoneId(vId,j);
				++j;
			}
			index += vertexSize >> 1;
			j = 0;
			while(j < numVertexBones && j < vertexSize >> 2) {
				vertexData[index + j] = this._skin.vertexBoneWeight(vId,j);
				++j;
			}
			index += vertexSize >> 1;
		}
		var vertexBuffer = minko_render_VertexBuffer.createbyData(this._context,vertexData);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_IDS_A,4,0);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_IDS_B,4,4);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_A,4,8);
		vertexBuffer.addAttribute(minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_B,4,12);
		return vertexBuffer;
	}
	,rebindDependencies: function(componentsMap,nodeMap,option) {
		this._skeletonRoot = nodeMap.h[this._skeletonRoot.__id__];
		var oldSurface = null;
		var node = this._targetGeometry.keys();
		while(node.hasNext()) {
			var node1 = node.next();
			oldSurface = node1.getComponent(minko_component_Surface);
			break;
		}
		var oldGeometry = oldSurface.get_geometry();
		var componentsMapSurface = js_Boot.__cast(componentsMap.h[oldSurface.__id__] , minko_component_Surface);
		componentsMapSurface.set_geometry(oldGeometry.clone());
	}
	,__class__: minko_component_Skinning
});
var minko_component_SpotLight = $hx_exports["minko"]["component"]["SpotLight"] = function(diffuse,specular,innerAngleRadians,outerAngleRadians,attenuationConstant,attenuationLinear,attenuationQuadratic) {
	minko_component_AbstractDiscreteLight.call(this,"spotLight",diffuse,specular);
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this.updateModelToWorldMatrix(dest);
	var this2 = new glm_Vec3Base();
	this2.x = attenuationConstant;
	this2.y = attenuationLinear;
	this2.z = attenuationQuadratic;
	this.set_attenuationCoefficients(this2);
	this.set_innerConeAngle(innerAngleRadians);
	this.set_outerConeAngle(outerAngleRadians);
};
minko_component_SpotLight.__name__ = true;
minko_component_SpotLight.create = function(diffuse,specular,innerAngleRadians,outerAngleRadians,attenuationConstant,attenuationLinear,attenuationQuadratic) {
	if(attenuationQuadratic == null) {
		attenuationQuadratic = -1.0;
	}
	if(attenuationLinear == null) {
		attenuationLinear = -1.0;
	}
	if(attenuationConstant == null) {
		attenuationConstant = -1.0;
	}
	if(outerAngleRadians == null) {
		outerAngleRadians = 0.78539816339744828;
	}
	if(innerAngleRadians == null) {
		innerAngleRadians = 0.62831853071795862;
	}
	if(specular == null) {
		specular = 1.0;
	}
	if(diffuse == null) {
		diffuse = 1.0;
	}
	return new minko_component_SpotLight(diffuse,specular,innerAngleRadians,outerAngleRadians,attenuationConstant,attenuationLinear,attenuationQuadratic);
};
minko_component_SpotLight.__super__ = minko_component_AbstractDiscreteLight;
minko_component_SpotLight.prototype = $extend(minko_component_AbstractDiscreteLight.prototype,{
	clone: function(option) {
		var light = minko_component_SpotLight.create().copyFrom(this,option);
		return light;
	}
	,get_innerConeAngle: function() {
		return Math.acos(this.get_data().get("cosInnerConeAngle"));
	}
	,set_innerConeAngle: function(radians) {
		this.get_data().set("cosInnerConeAngle",Math.cos(Math.max(0.0,Math.min(0.5 * Math.PI,radians))));
		return radians;
	}
	,get_outerConeAngle: function() {
		return Math.acos(this.get_data().get("cosOuterConeAngle"));
	}
	,set_outerConeAngle: function(radians) {
		this.get_data().set("cosOuterConeAngle",Math.cos(Math.max(0.0,Math.min(0.5 * Math.PI,radians))));
		return radians;
	}
	,get_attenuationEnabled: function() {
		var coef = this.get_attenuationCoefficients();
		return !(coef.x < 0.0 || coef.y < 0.0 || coef.z < 0.0);
	}
	,get_attenuationCoefficients: function() {
		return this.get_data().get("attenuationCoeffs");
	}
	,setAttenuationCoefficients: function(constant,linear,quadratic) {
		var this1 = new glm_Vec3Base();
		this1.x = constant;
		this1.y = linear;
		this1.z = quadratic;
		return this.set_attenuationCoefficients(this1);
	}
	,set_attenuationCoefficients: function(value) {
		this.get_data().set("attenuationCoeffs",value);
		return value;
	}
	,get_position: function() {
		return this.get_data().get("position");
	}
	,updateModelToWorldMatrix: function(modelToWorld) {
		var _r0c0 = modelToWorld._00;
		var _r0c1 = modelToWorld._10;
		var _r0c2 = modelToWorld._20;
		var _r1c0 = modelToWorld._01;
		var _r1c1 = modelToWorld._11;
		var _r1c2 = modelToWorld._21;
		var _r2c0 = modelToWorld._02;
		var _r2c1 = modelToWorld._22;
		var _r2c2 = modelToWorld._22;
		var this1 = new glm_Mat3Base();
		this1._00 = _r0c0;
		this1._01 = _r1c0;
		this1._02 = _r2c0;
		this1._10 = _r0c1;
		this1._11 = _r1c1;
		this1._12 = _r2c1;
		this1._20 = _r0c2;
		this1._21 = _r1c2;
		this1._22 = _r2c2;
		var m = this1;
		var this2 = new glm_Vec3Base();
		this2.x = 0.0;
		this2.y = 0.0;
		this2.z = -1.0;
		var v = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var dest = this3;
		var x = v.x;
		var y = v.y;
		var z = v.z;
		dest.x = m._00 * x + m._10 * y + m._20 * z;
		dest.y = m._01 * x + m._11 * y + m._21 * z;
		dest.z = m._02 * x + m._12 * y + m._22 * z;
		var v1 = dest;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest1 = this4;
		var length = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v1.x * mult;
		dest1.y = v1.y * mult;
		dest1.z = v1.z * mult;
		var tmp2 = dest1;
		var tmp = this.get_data();
		var this5 = new glm_Vec4Base();
		this5.x = 0.0;
		this5.y = 0.0;
		this5.z = 0.0;
		this5.w = 1.0;
		var v2 = this5;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var dest2 = this6;
		var x1 = v2.x;
		var y1 = v2.y;
		var z1 = v2.z;
		var w = v2.w;
		dest2.x = modelToWorld._00 * x1 + modelToWorld._10 * y1 + modelToWorld._20 * z1 + modelToWorld._30 * w;
		dest2.y = modelToWorld._01 * x1 + modelToWorld._11 * y1 + modelToWorld._21 * z1 + modelToWorld._31 * w;
		dest2.z = modelToWorld._02 * x1 + modelToWorld._12 * y1 + modelToWorld._22 * z1 + modelToWorld._32 * w;
		dest2.w = modelToWorld._03 * x1 + modelToWorld._13 * y1 + modelToWorld._23 * z1 + modelToWorld._33 * w;
		var v3 = dest2;
		var x2 = v3.x;
		var y2 = v3.y;
		var z2 = v3.z;
		var this7 = new glm_Vec3Base();
		this7.x = x2;
		this7.y = y2;
		this7.z = z2;
		tmp.set("position",this7).set("direction",tmp2);
	}
	,copyFrom: function(spotlight,option) {
		this.get_data().set("diffuse",spotlight.get_diffuse()).set("specular",spotlight.get_specular());
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var dest = this1;
		dest._00 = 1;
		dest._10 = 0;
		dest._20 = 0;
		dest._30 = 0;
		dest._01 = 0;
		dest._11 = 1;
		dest._21 = 0;
		dest._31 = 0;
		dest._02 = 0;
		dest._12 = 0;
		dest._22 = 1;
		dest._32 = 0;
		dest._03 = 0;
		dest._13 = 0;
		dest._23 = 0;
		dest._33 = 1;
		this.updateModelToWorldMatrix(dest);
		var test = spotlight.get_attenuationCoefficients();
		this.get_data().set("attenuationCoeffs",spotlight.get_attenuationCoefficients());
		this.get_data().set("cosInnerConeAngle",spotlight.get_innerConeAngle());
		this.get_data().set("cosOuterConeAngle",spotlight.get_outerConeAngle());
		return this;
	}
	,__class__: minko_component_SpotLight
});
var minko_component_Surface = $hx_exports["minko"]["component"]["Surface"] = function(name,geometry,material,effect,technique) {
	minko_component_AbstractComponent.call(this);
	this._name = name;
	this._geometry = geometry;
	this._material = material;
	this._effect = effect;
	this._provider = minko_data_Provider.create();
	this._technique = technique;
	if(this._effect != null && !this._effect.hasTechnique(this._technique)) {
		var message = "Effect " + this._effect.get_name() + " does not provide a '" + this._technique + "' technique.";
		throw new js__$Boot_HaxeError(message);
	}
	this._geometryChanged = new minko_signal_Signal();
	this._materialChanged = new minko_signal_Signal();
	this._effectChanged = new minko_signal_Signal();
	this.initializeIndexRange(geometry);
};
minko_component_Surface.__name__ = true;
minko_component_Surface.create = function(geometry,material,effect,technique,name) {
	if(name == null) {
		name = "";
	}
	if(technique == null) {
		technique = "default";
	}
	return new minko_component_Surface(name,geometry,material,effect,technique);
};
minko_component_Surface.__super__ = minko_component_AbstractComponent;
minko_component_Surface.prototype = $extend(minko_component_AbstractComponent.prototype,{
	dispose: function() {
		minko_component_AbstractComponent.prototype.dispose.call(this);
	}
	,get_uuid: function() {
		return this._provider.get_uuid();
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(value) {
		this._name = value;
		return value;
	}
	,get_data: function() {
		return this._provider;
	}
	,get_geometry: function() {
		return this._geometry;
	}
	,set_firstIndex: function(index) {
		this.get_data().set("firstIndex",index);
		return index;
	}
	,set_numIndices: function(numIndices) {
		this.get_data().set("numIndices",numIndices);
		return numIndices;
	}
	,get_material: function() {
		return this._material;
	}
	,set_effect: function(v) {
		this._effect = v;
		return v;
	}
	,get_effect: function() {
		return this._effect;
	}
	,get_technique: function() {
		return this._technique;
	}
	,get_geometryChanged: function() {
		return this._geometryChanged;
	}
	,get_materialChanged: function() {
		return this._materialChanged;
	}
	,get_effectChanged: function() {
		return this._effectChanged;
	}
	,targetAdded: function(target) {
		var targetData = target.get_data();
		targetData.addProviderbyName(this._provider,"surface");
		targetData.addProviderbyName(this._material.get_data(),"material");
		targetData.addProviderbyName(this._geometry.get_data(),"geometry");
		if(this._effect != null) {
			targetData.addProviderbyName(this._effect.get_data(),"effect");
		}
	}
	,targetRemoved: function(target) {
		var _gthis = this;
		this._bubbleUpSlot = target.get_root().get_componentRemoved().connect(function(n,t,c) {
			_gthis._bubbleUpSlot = null;
			var targetData = target.get_data();
			targetData.removeProviderbyName(_gthis._provider,"surface");
			targetData.removeProviderbyName(_gthis._material.get_data(),"material");
			targetData.removeProviderbyName(_gthis._geometry.get_data(),"geometry");
			if(_gthis._effect != null) {
				targetData.removeProviderbyName(_gthis._effect.get_data(),"effect");
			}
		});
	}
	,set_geometry: function(value) {
		if(value == this._geometry) {
			return value;
		}
		var t = this.get_target();
		if(t != null) {
			t.get_data().removeProviderbyName(this._geometry.get_data(),"geometry");
		}
		this._geometry = value;
		if(t != null) {
			t.get_data().addProviderbyName(this._geometry.get_data(),"geometry");
		}
		this.initializeIndexRange(value);
		this._geometryChanged.execute(this);
		return value;
	}
	,set_material: function(value) {
		if(value == this._material) {
			return value;
		}
		var t = this.get_target();
		if(t != null) {
			t.get_data().removeProviderbyName(this._material.get_data(),"material");
		}
		this._material = value;
		if(t != null) {
			t.get_data().addProviderbyName(this._material.get_data(),"material");
		}
		this._materialChanged.execute(this);
		return value;
	}
	,setEffectAndTechnique: function(effect,technique) {
		if(effect == null) {
			throw new js__$Boot_HaxeError("effect");
		}
		if(!effect.hasTechnique(technique)) {
			throw new js__$Boot_HaxeError("The effect \"" + effect.get_name() + "\" does not provide the \"" + this._technique + "\" technique.");
		}
		var changed = false;
		if(effect != this._effect) {
			changed = true;
			if(this.get_target() != null) {
				if(this._effect != null) {
					this.get_target().get_data().removeProviderbyName(this._effect.get_data(),"effect");
				}
				if(effect != null) {
					this.get_target().get_data().addProviderbyName(effect.get_data(),"effect");
				}
			}
			this._effect = effect;
		}
		if(technique != this._technique) {
			changed = true;
			this._technique = technique;
			this._provider.set("technique",technique);
		}
		if(changed) {
			this._effectChanged.execute(this);
		}
	}
	,initializeIndexRange: function(geometry) {
		this.set_firstIndex(0);
		this.set_numIndices(geometry.get_data().hasProperty("numIndices") ? geometry.get_data().get("numIndices") : 0);
	}
	,__class__: minko_component_Surface
});
var minko_component_RootTransform = $hx_exports["minko"]["component"]["RootTransform"] = function() {
	minko_component_AbstractComponent.call(this);
	this._nodeTransformCache = [];
	this._nodeToId = new haxe_ds_ObjectMap();
	this._nodes = [];
	this._invalidLists = false;
	this._targetSlots = [];
	this._renderingBeginSlot = null;
	this._toAdd = [];
	this._toRemove = [];
	this._nodeToPropertyChangedSlot = new haxe_ds_ObjectMap();
};
minko_component_RootTransform.__name__ = true;
minko_component_RootTransform.create = function() {
	return new minko_component_RootTransform();
};
minko_component_RootTransform.__super__ = minko_component_AbstractComponent;
minko_component_RootTransform.prototype = $extend(minko_component_AbstractComponent.prototype,{
	dispose: function() {
		this._nodeTransformCache = null;
		this._nodeToId = null;
		var _n = this._nodeToPropertyChangedSlot.iterator();
		while(_n.hasNext()) {
			var _n1 = _n.next();
			_n1.dispose();
		}
		this._nodeToPropertyChangedSlot = null;
		var _g = 0;
		var _g1 = this._targetSlots;
		while(_g < _g1.length) {
			var _t = _g1[_g];
			++_g;
			_t.dispose();
		}
		this._targetSlots = null;
		if(this._renderingBeginSlot != null) {
			this._renderingBeginSlot.dispose();
		}
		this._renderingBeginSlot = null;
		minko_component_AbstractComponent.prototype.dispose.call(this);
	}
	,setDirty: function(target,d) {
		if(!this._invalidLists) {
			this._nodeTransformCache[this._nodeToId.h[target.__id__]]._dirty = true;
		}
	}
	,clone: function(option) {
		return minko_component_RootTransform.create();
	}
	,targetAdded: function(target) {
		this._targetSlots.push(target.get_added().connect($bind(this,this.addedHandler)));
		this._targetSlots.push(target.get_removed().connect($bind(this,this.removedHandler)));
		this._targetSlots.push(target.get_componentAdded().connect($bind(this,this.componentAddedHandler)));
		this._targetSlots.push(target.get_componentRemoved().connect($bind(this,this.componentRemovedHandler)));
		var sceneManager = target.get_root().getComponent(minko_component_SceneManager);
		if(sceneManager != null) {
			this._renderingBeginSlot = sceneManager.get_renderingBegin().connect($bind(this,this.renderingBeginHandler),1000.0);
		}
		this.addedHandler(target,target.get_root(),target.get_parent());
	}
	,targetRemoved: function(target) {
		var _g = 0;
		var _g1 = this._targetSlots;
		while(_g < _g1.length) {
			var _t = _g1[_g];
			++_g;
			_t.dispose();
		}
		this._targetSlots = [];
		if(this._renderingBeginSlot != null) {
			this._renderingBeginSlot.dispose();
		}
		this._renderingBeginSlot = null;
	}
	,componentAddedHandler: function(node,target,ctrl) {
		if(js_Boot.__instanceof(ctrl,minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(ctrl , minko_component_SceneManager);
			this._renderingBeginSlot = sceneManager.get_renderingBegin().connect($bind(this,this.renderingBeginHandler),1000.0);
		} else if(js_Boot.__instanceof(ctrl,minko_component_Transform)) {
			var removeIt = Lambda.has(this._toRemove,target);
			if(removeIt) {
				HxOverrides.remove(this._toRemove,target);
			} else {
				this._toAdd.push(target);
				this._invalidLists = true;
			}
		}
	}
	,componentRemovedHandler: function(node,target,ctrl) {
		if(js_Boot.__instanceof(ctrl,minko_component_SceneManager)) {
			var sceneManager = js_Boot.__cast(ctrl , minko_component_SceneManager);
			this._renderingBeginSlot = null;
		} else if(js_Boot.__instanceof(ctrl,minko_component_Transform)) {
			var addIt = Lambda.has(this._toAdd,target);
			if(addIt) {
				HxOverrides.remove(this._toAdd,target);
			} else {
				this._toRemove.push(target);
				this._invalidLists = true;
			}
		}
	}
	,addedHandler: function(node,target,ancestor) {
		if(node.get_root() == this.get_target() && node != target) {
			var otherRoot = target.getComponent(minko_component_RootTransform);
			if(otherRoot != null) {
				this._toAdd = this._toAdd.concat(otherRoot._nodes.concat(otherRoot._toAdd));
				var _g = 0;
				var _g1 = this._toRemove;
				while(_g < _g1.length) {
					var toRemove = _g1[_g];
					++_g;
					HxOverrides.remove(this._toAdd,toRemove);
				}
				this._invalidLists = true;
				target.removeComponent(otherRoot);
			}
		}
	}
	,removedHandler: function(node,target,ancestor) {
		this._invalidLists = true;
		var withTransforms = minko_scene_NodeSet.createbyNode(target).descendants(true,false).where(function(n) {
			return n.hasComponent(minko_component_Transform);
		});
		this._toRemove = withTransforms.get_nodes().concat(this._toRemove);
	}
	,updateTransformsList: function() {
		var _gthis = this;
		if(this._toAdd.length == 0 && this._toRemove.length == 0) {
			return;
		}
		var _g = 0;
		var _g1 = this._toRemove;
		while(_g < _g1.length) {
			var toRemove = _g1[_g];
			++_g;
			this._nodeToId.remove(toRemove);
			this._nodeToPropertyChangedSlot.h[toRemove.__id__].disconnect();
			this._nodeToPropertyChangedSlot.remove(toRemove);
		}
		this._nodes = [];
		var nodeAndId = this._nodeToId.keys();
		while(nodeAndId.hasNext()) {
			var nodeAndId1 = nodeAndId.next();
			this._nodes.push(nodeAndId1);
		}
		var _g2 = 0;
		var _g11 = this._toAdd;
		while(_g2 < _g11.length) {
			var node = [_g11[_g2]];
			++_g2;
			this._nodes.push(node[0]);
			this._nodeToPropertyChangedSlot.set(node[0],node[0].get_data().getPropertyChanged("matrix").connect((function(node1) {
				return function(store,provider,propertyName) {
					_gthis._nodeTransformCache[_gthis._nodeToId.h[node1[0].__id__]]._dirty = true;
				};
			})(node)));
		}
		this._toAdd = [];
		this._toRemove = [];
		var _g3 = [];
		var _g21 = 0;
		var _g12 = this._nodes.length;
		while(_g21 < _g12) {
			var i = _g21++;
			_g3.push(new minko_component_NodeTransformCacheEntry());
		}
		this._nodeTransformCache = _g3;
		var _g13 = 0;
		var _g22 = this._nodes;
		while(_g13 < _g22.length) {
			var node2 = _g22[_g13];
			++_g13;
			var transform = node2.getComponent(minko_component_Transform);
			transform.set_dirty(true);
		}
		this.sortNodes();
		var nodeId = 0;
		var ancestor = null;
		var ancestorId = -1;
		var firstSiblingId = -1;
		var numSiblings = 0;
		var _g14 = 0;
		var _g23 = this._nodes;
		while(_g14 < _g23.length) {
			var node3 = _g23[_g14];
			++_g14;
			var previousAncestor = ancestor;
			ancestor = node3.get_parent();
			while(ancestor != null && !ancestor.hasComponent(minko_component_Transform)) ancestor = ancestor.get_parent();
			if(previousAncestor == null && ancestor == null) {
				numSiblings = 0;
			} else if(ancestor != previousAncestor) {
				if(previousAncestor == null) {
					ancestorId = this._nodeToId.h[ancestor.__id__];
					firstSiblingId = nodeId;
					++numSiblings;
				} else {
					var previousAncestorId = this._nodeToId.h[previousAncestor.__id__];
					var previousAncestorCacheEntry = this._nodeTransformCache[previousAncestorId];
					previousAncestorCacheEntry._firstChildId = firstSiblingId;
					previousAncestorCacheEntry._numChildren = numSiblings;
					firstSiblingId = nodeId;
					if(ancestor != null) {
						numSiblings = 1;
					} else {
						numSiblings = 0;
					}
					previousAncestor = ancestor;
					if(ancestor != null) {
						ancestorId = this._nodeToId.h[ancestor.__id__];
					} else {
						ancestorId = -1;
					}
				}
			} else {
				++numSiblings;
			}
			this._nodeToId.set(node3,nodeId);
			var nodeCacheEntry = this._nodeTransformCache[nodeId];
			nodeCacheEntry._node = node3;
			nodeCacheEntry._parentId = ancestorId;
			nodeCacheEntry._matrix = node3.get_data().getUnsafePointer("matrix");
			nodeCacheEntry._modelToWorldMatrix = node3.get_data().getUnsafePointer("modelToWorldMatrix");
			nodeCacheEntry._provider = (js_Boot.__cast(node3.getComponent(minko_component_Transform) , minko_component_Transform)).get_data();
			++nodeId;
		}
		if(ancestor != null) {
			ancestorId = this._nodeToId.h[ancestor.__id__];
			var ancestorCacheEntry = this._nodeTransformCache[ancestorId];
			ancestorCacheEntry._firstChildId = firstSiblingId;
			ancestorCacheEntry._numChildren = numSiblings;
		}
		this._invalidLists = false;
	}
	,sortNodes: function() {
		var sortedNodeSet = minko_scene_NodeSet.createbyNode(this._nodes[0].get_root()).descendants(true,false).where(function(descendant) {
			var transform = descendant.getComponent(minko_component_Transform);
			if(transform != null) {
				return transform.get_dirty();
			} else {
				return false;
			}
		});
		this._nodes = sortedNodeSet.get_nodes().concat([]);
	}
	,updateTransforms: function() {
		var modelToWorldMatrix = null;
		var nodeId = 0;
		var propertyName = "modelToWorldMatrix";
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			var nodeCacheEntry = this._nodeTransformCache[nodeId];
			if(nodeCacheEntry._dirty) {
				var parentId = nodeCacheEntry._parentId;
				if(parentId < 0) {
					modelToWorldMatrix = nodeCacheEntry._matrix;
				} else {
					var parentCacheEntry = this._nodeTransformCache[parentId];
					var a = parentCacheEntry._modelToWorldMatrix;
					var b = nodeCacheEntry._matrix;
					var this1 = new glm_Mat4Base();
					this1._00 = 0;
					this1._01 = 0;
					this1._02 = 0;
					this1._03 = 0;
					this1._10 = 0;
					this1._11 = 0;
					this1._12 = 0;
					this1._13 = 0;
					this1._20 = 0;
					this1._21 = 0;
					this1._22 = 0;
					this1._23 = 0;
					this1._30 = 0;
					this1._31 = 0;
					this1._32 = 0;
					this1._33 = 0;
					var dest = this1;
					var _a;
					var _b;
					if(dest == a) {
						var this2 = new glm_Mat4Base();
						this2._00 = 0;
						this2._01 = 0;
						this2._02 = 0;
						this2._03 = 0;
						this2._10 = 0;
						this2._11 = 0;
						this2._12 = 0;
						this2._13 = 0;
						this2._20 = 0;
						this2._21 = 0;
						this2._22 = 0;
						this2._23 = 0;
						this2._30 = 0;
						this2._31 = 0;
						this2._32 = 0;
						this2._33 = 0;
						var dest1 = this2;
						dest1._00 = a._00;
						dest1._10 = a._10;
						dest1._20 = a._20;
						dest1._30 = a._30;
						dest1._01 = a._01;
						dest1._11 = a._11;
						dest1._21 = a._21;
						dest1._31 = a._31;
						dest1._02 = a._02;
						dest1._12 = a._12;
						dest1._22 = a._22;
						dest1._32 = a._32;
						dest1._03 = a._03;
						dest1._13 = a._13;
						dest1._23 = a._23;
						dest1._33 = a._33;
						_a = dest1;
						_b = b;
					} else if(dest == b) {
						_a = a;
						var this3 = new glm_Mat4Base();
						this3._00 = 0;
						this3._01 = 0;
						this3._02 = 0;
						this3._03 = 0;
						this3._10 = 0;
						this3._11 = 0;
						this3._12 = 0;
						this3._13 = 0;
						this3._20 = 0;
						this3._21 = 0;
						this3._22 = 0;
						this3._23 = 0;
						this3._30 = 0;
						this3._31 = 0;
						this3._32 = 0;
						this3._33 = 0;
						var dest2 = this3;
						dest2._00 = b._00;
						dest2._10 = b._10;
						dest2._20 = b._20;
						dest2._30 = b._30;
						dest2._01 = b._01;
						dest2._11 = b._11;
						dest2._21 = b._21;
						dest2._31 = b._31;
						dest2._02 = b._02;
						dest2._12 = b._12;
						dest2._22 = b._22;
						dest2._32 = b._32;
						dest2._03 = b._03;
						dest2._13 = b._13;
						dest2._23 = b._23;
						dest2._33 = b._33;
						_b = dest2;
					} else {
						_a = a;
						_b = b;
					}
					dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
					dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
					dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
					dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
					dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
					dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
					dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
					dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
					dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
					dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
					dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
					dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
					dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
					dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
					dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
					dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
					modelToWorldMatrix = dest;
				}
				var this4 = nodeCacheEntry._modelToWorldMatrix;
				if(!(!(Math.abs(this4._00 - modelToWorldMatrix._00) >= glm_GLM.EPSILON || Math.abs(this4._10 - modelToWorldMatrix._10) >= glm_GLM.EPSILON || Math.abs(this4._20 - modelToWorldMatrix._20) >= glm_GLM.EPSILON || Math.abs(this4._30 - modelToWorldMatrix._30) >= glm_GLM.EPSILON || Math.abs(this4._01 - modelToWorldMatrix._01) >= glm_GLM.EPSILON || Math.abs(this4._11 - modelToWorldMatrix._11) >= glm_GLM.EPSILON || Math.abs(this4._21 - modelToWorldMatrix._21) >= glm_GLM.EPSILON || Math.abs(this4._31 - modelToWorldMatrix._31) >= glm_GLM.EPSILON || Math.abs(this4._02 - modelToWorldMatrix._02) >= glm_GLM.EPSILON || Math.abs(this4._12 - modelToWorldMatrix._12) >= glm_GLM.EPSILON || Math.abs(this4._22 - modelToWorldMatrix._22) >= glm_GLM.EPSILON || Math.abs(this4._32 - modelToWorldMatrix._32) >= glm_GLM.EPSILON || Math.abs(this4._03 - modelToWorldMatrix._03) >= glm_GLM.EPSILON || Math.abs(this4._13 - modelToWorldMatrix._13) >= glm_GLM.EPSILON || Math.abs(this4._23 - modelToWorldMatrix._23) >= glm_GLM.EPSILON || Math.abs(this4._33 - modelToWorldMatrix._33) >= glm_GLM.EPSILON))) {
					var nodeData = node.get_data();
					var provider = nodeCacheEntry._provider;
					var a1 = nodeCacheEntry._modelToWorldMatrix;
					a1._00 = modelToWorldMatrix._00;
					a1._10 = modelToWorldMatrix._10;
					a1._20 = modelToWorldMatrix._20;
					a1._30 = modelToWorldMatrix._30;
					a1._01 = modelToWorldMatrix._01;
					a1._11 = modelToWorldMatrix._11;
					a1._21 = modelToWorldMatrix._21;
					a1._31 = modelToWorldMatrix._31;
					a1._02 = modelToWorldMatrix._02;
					a1._12 = modelToWorldMatrix._12;
					a1._22 = modelToWorldMatrix._22;
					a1._32 = modelToWorldMatrix._32;
					a1._03 = modelToWorldMatrix._03;
					a1._13 = modelToWorldMatrix._13;
					a1._23 = modelToWorldMatrix._23;
					a1._33 = modelToWorldMatrix._33;
					nodeData.get_propertyChanged().execute(nodeData,provider,propertyName);
					if(nodeData.hasPropertyChangedSignal("modelToWorldMatrix")) {
						nodeData.getPropertyChanged("modelToWorldMatrix").execute(nodeData,provider,propertyName);
					}
					var numChildren = nodeCacheEntry._numChildren;
					if(numChildren > 0) {
						var firstChildId = nodeCacheEntry._firstChildId;
						var lastChildId = firstChildId + numChildren;
						var _g3 = firstChildId;
						var _g2 = lastChildId;
						while(_g3 < _g2) {
							var childId = _g3++;
							var childCacheEntry = this._nodeTransformCache[childId];
							childCacheEntry._dirty = true;
						}
					}
				}
				nodeCacheEntry._dirty = false;
				var transform = node.getComponent(minko_component_Transform);
				transform.set_dirty(false);
			}
			++nodeId;
		}
	}
	,forceUpdate: function(node,updateTransformLists) {
		if(this._invalidLists || updateTransformLists) {
			this.updateTransformsList();
		}
		this.updateTransforms();
	}
	,renderingBeginHandler: function(sceneManager,frameId,abstractTexture) {
		if(this._invalidLists) {
			this.updateTransformsList();
		}
		this.updateTransforms();
	}
	,__class__: minko_component_RootTransform
});
var minko_component_NodeTransformCacheEntry = $hx_exports["minko"]["component"]["NodeTransformCacheEntry"] = function() {
	this._node = null;
	this._matrix = null;
	this._modelToWorldMatrix = null;
	this._parentId = -1;
	this._firstChildId = -1;
	this._numChildren = 0;
	this._dirty = true;
	this._provider = null;
};
minko_component_NodeTransformCacheEntry.__name__ = true;
minko_component_NodeTransformCacheEntry.prototype = {
	__class__: minko_component_NodeTransformCacheEntry
};
var minko_component_Transform = $hx_exports["minko"]["component"]["Transform"] = function() {
	minko_component_AbstractComponent.call(this);
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	this._matrix = dest;
	var this2 = new glm_Mat4Base();
	this2._00 = 0;
	this2._01 = 0;
	this2._02 = 0;
	this2._03 = 0;
	this2._10 = 0;
	this2._11 = 0;
	this2._12 = 0;
	this2._13 = 0;
	this2._20 = 0;
	this2._21 = 0;
	this2._22 = 0;
	this2._23 = 0;
	this2._30 = 0;
	this2._31 = 0;
	this2._32 = 0;
	this2._33 = 0;
	var dest1 = this2;
	dest1._00 = 1;
	dest1._10 = 0;
	dest1._20 = 0;
	dest1._30 = 0;
	dest1._01 = 0;
	dest1._11 = 1;
	dest1._21 = 0;
	dest1._31 = 0;
	dest1._02 = 0;
	dest1._12 = 0;
	dest1._22 = 1;
	dest1._32 = 0;
	dest1._03 = 0;
	dest1._13 = 0;
	dest1._23 = 0;
	dest1._33 = 1;
	this._modelToWorld = dest1;
	this._data = minko_data_Provider.create();
	this._dirty = false;
	this._data.set("matrix",this._matrix).set("modelToWorldMatrix",this._modelToWorld);
};
minko_component_Transform.__name__ = true;
minko_component_Transform.create = function() {
	var ctrl = new minko_component_Transform();
	var this1 = new glm_Mat4Base();
	this1._00 = 0;
	this1._01 = 0;
	this1._02 = 0;
	this1._03 = 0;
	this1._10 = 0;
	this1._11 = 0;
	this1._12 = 0;
	this1._13 = 0;
	this1._20 = 0;
	this1._21 = 0;
	this1._22 = 0;
	this1._23 = 0;
	this1._30 = 0;
	this1._31 = 0;
	this1._32 = 0;
	this1._33 = 0;
	var dest = this1;
	dest._00 = 1;
	dest._10 = 0;
	dest._20 = 0;
	dest._30 = 0;
	dest._01 = 0;
	dest._11 = 1;
	dest._21 = 0;
	dest._31 = 0;
	dest._02 = 0;
	dest._12 = 0;
	dest._22 = 1;
	dest._32 = 0;
	dest._03 = 0;
	dest._13 = 0;
	dest._23 = 0;
	dest._33 = 1;
	ctrl.set_matrix(dest);
	return ctrl;
};
minko_component_Transform.createbyMatrix4 = function(transform) {
	var ctrl = minko_component_Transform.create();
	ctrl.set_matrix(transform);
	return ctrl;
};
minko_component_Transform.__super__ = minko_component_AbstractComponent;
minko_component_Transform.prototype = $extend(minko_component_AbstractComponent.prototype,{
	dispose: function() {
		minko_component_AbstractComponent.prototype.dispose.call(this);
		if(this._addedSlot != null) {
			this._addedSlot.dispose();
		}
		this._addedSlot = null;
		if(this._removedSlot != null) {
			this._removedSlot.dispose();
		}
		this._removedSlot = null;
		this._modelToWorld = null;
		this._matrix = null;
		if(this._data != null) {
			this._data.dispose();
		}
		this._data = null;
	}
	,clone: function(option) {
		var this1 = this.get_matrix();
		var arr_0 = this1._00;
		var arr_1 = this1._01;
		var arr_2 = this1._02;
		var arr_3 = this1._03;
		var arr_4 = this1._10;
		var arr_5 = this1._11;
		var arr_6 = this1._12;
		var arr_7 = this1._13;
		var arr_8 = this1._20;
		var arr_9 = this1._21;
		var arr_10 = this1._22;
		var arr_11 = this1._23;
		var arr_12 = this1._30;
		var arr_13 = this1._31;
		var arr_14 = this1._32;
		var arr_15 = this1._33;
		var this2 = new glm_Mat4Base();
		this2._00 = arr_0;
		this2._01 = arr_1;
		this2._02 = arr_2;
		this2._03 = arr_3;
		this2._10 = arr_4;
		this2._11 = arr_5;
		this2._12 = arr_6;
		this2._13 = arr_7;
		this2._20 = arr_8;
		this2._21 = arr_9;
		this2._22 = arr_10;
		this2._23 = arr_11;
		this2._30 = arr_12;
		this2._31 = arr_13;
		this2._32 = arr_14;
		this2._33 = arr_15;
		return minko_component_Transform.createbyMatrix4(this2);
	}
	,get_data: function() {
		return this._data;
	}
	,get_dirty: function() {
		return this._dirty;
	}
	,set_dirty: function(v) {
		this._dirty = v;
		return v;
	}
	,get_matrix: function() {
		return this._matrix;
	}
	,set_matrix: function(value) {
		var b = this._matrix;
		if(!(!(Math.abs(value._00 - b._00) >= glm_GLM.EPSILON || Math.abs(value._10 - b._10) >= glm_GLM.EPSILON || Math.abs(value._20 - b._20) >= glm_GLM.EPSILON || Math.abs(value._30 - b._30) >= glm_GLM.EPSILON || Math.abs(value._01 - b._01) >= glm_GLM.EPSILON || Math.abs(value._11 - b._11) >= glm_GLM.EPSILON || Math.abs(value._21 - b._21) >= glm_GLM.EPSILON || Math.abs(value._31 - b._31) >= glm_GLM.EPSILON || Math.abs(value._02 - b._02) >= glm_GLM.EPSILON || Math.abs(value._12 - b._12) >= glm_GLM.EPSILON || Math.abs(value._22 - b._22) >= glm_GLM.EPSILON || Math.abs(value._32 - b._32) >= glm_GLM.EPSILON || Math.abs(value._03 - b._03) >= glm_GLM.EPSILON || Math.abs(value._13 - b._13) >= glm_GLM.EPSILON || Math.abs(value._23 - b._23) >= glm_GLM.EPSILON || Math.abs(value._33 - b._33) >= glm_GLM.EPSILON))) {
			var a = this._matrix;
			a._00 = value._00;
			a._10 = value._10;
			a._20 = value._20;
			a._30 = value._30;
			a._01 = value._01;
			a._11 = value._11;
			a._21 = value._21;
			a._31 = value._31;
			a._02 = value._02;
			a._12 = value._12;
			a._22 = value._22;
			a._32 = value._32;
			a._03 = value._03;
			a._13 = value._13;
			a._23 = value._23;
			a._33 = value._33;
		}
		if(this.get_target() != null) {
			var rootTransform = this.get_target().get_root().getComponent(minko_component_RootTransform);
			if(rootTransform != null) {
				rootTransform.setDirty(this.get_target(),true);
			}
		}
		return value;
	}
	,get_modelToWorldMatrix: function() {
		return this._modelToWorldMatrix(false);
	}
	,_modelToWorldMatrix: function(forceUpdate) {
		if(forceUpdate) {
			this.updateModelToWorldMatrix();
		}
		return this._modelToWorld;
	}
	,updateModelToWorldMatrix: function() {
		var rt = this.get_target().get_root().getComponent(minko_component_RootTransform);
		rt.forceUpdate(this.get_target(),true);
	}
	,targetAdded: function(target) {
		if(target.getComponents(minko_component_Transform).length > 1) {
			throw new js__$Boot_HaxeError("A node cannot have more than one Transform.");
		}
		target.get_data().addProvider(this._data);
		this._addedSlot = target.get_added().connect($bind(this,this.addedOrRemovedHandler));
		this.addedOrRemovedHandler(null,target,target.get_parent());
	}
	,addedOrRemovedHandler: function(node,target,parent) {
		if(!target.get_root().hasComponent(minko_component_RootTransform)) {
			target.get_root().addComponent(minko_component_RootTransform.create());
		}
	}
	,targetRemoved: function(target) {
		target.get_data().removeProvider(this._data);
		if(this._addedSlot != null) {
			this._addedSlot.disconnect();
		}
		this._addedSlot = null;
		if(this._removedSlot != null) {
			this._removedSlot.disconnect();
		}
		this._removedSlot = null;
	}
	,__class__: minko_component_Transform
});
var minko_data_AbstractFilter = $hx_exports["minko"]["data"]["AbstractFilter"] = function() {
	this._watchedProperties = [];
	this._currentSurface = null;
	this._currentSurfaceRemovedSlot = null;
	this._currentSurfaceTargetRemovedSlot = null;
	this._changed = new minko_signal_Signal2();
};
minko_data_AbstractFilter.__name__ = true;
minko_data_AbstractFilter.prototype = {
	get_currentSurface: function() {
		return this._currentSurface;
	}
	,get_changed: function() {
		return this._changed;
	}
	,watchProperty: function(propertyName) {
		this._watchedProperties.push(propertyName);
		this.get_changed().execute(this,null);
	}
	,unwatchProperty: function(propertyName) {
		var it = Lambda.find(this._watchedProperties,function(value) {
			return value == propertyName;
		});
		if(it == null) {
			throw new js__$Boot_HaxeError("This property is not watching currently.");
		}
		HxOverrides.remove(this._watchedProperties,propertyName);
		this.get_changed().execute(this,null);
	}
	,currentSurfaceRemovedHandler: function(UnnamedParameter1,UnnamedParameter2) {
		this.forgetCurrentSurface();
	}
	,currentSurfaceTargetRemovedHandler: function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
		this.forgetCurrentSurface();
	}
	,forgetCurrentSurface: function() {
		this._currentSurface = null;
		this._currentSurfaceRemovedSlot.disconnect();
		this._currentSurfaceRemovedSlot = null;
		this._currentSurfaceTargetRemovedSlot.disconnect();
		this._currentSurfaceTargetRemovedSlot = null;
	}
	,__class__: minko_data_AbstractFilter
};
var minko_data_Binding = $hx_exports["minko"]["data"]["Binding"] = function() {
	this.propertyName = "";
	this.source = 0;
	minko_Enable_$uuid.call(this);
	this.enable_uuid();
};
minko_data_Binding.__name__ = true;
minko_data_Binding.__super__ = minko_Enable_$uuid;
minko_data_Binding.prototype = $extend(minko_Enable_$uuid.prototype,{
	setBinding: function(propertyName,source) {
		this.propertyName = propertyName;
		this.source = source;
		return this;
	}
	,__class__: minko_data_Binding
});
var minko_data_MacroBinding = $hx_exports["minko"]["data"]["MacroBinding"] = function() {
	minko_data_Binding.call(this);
	this.minValue = -Infinity;
	this.maxValue = Infinity;
};
minko_data_MacroBinding.__name__ = true;
minko_data_MacroBinding.__super__ = minko_data_Binding;
minko_data_MacroBinding.prototype = $extend(minko_data_Binding.prototype,{
	setBindingMinMax: function(min,max) {
		this.minValue = min;
		this.maxValue = max;
	}
	,dispose: function() {
	}
	,__class__: minko_data_MacroBinding
});
var minko_data_BindingMapBase = $hx_exports["minko"]["data"]["BindingMapBase"] = function() {
	minko_Enable_$uuid.call(this);
	this.defaultValues = new minko_data_Store();
	this.bindings = new haxe_ds_StringMap();
};
minko_data_BindingMapBase.__name__ = true;
minko_data_BindingMapBase.copyFrom = function(t,m) {
	t.bindings = new haxe_ds_StringMap();
	var k = m.bindings.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		var _this = t.bindings;
		var _this1 = m.bindings;
		var value = __map_reserved[k1] != null ? _this1.getReserved(k1) : _this1.h[k1];
		if(__map_reserved[k1] != null) {
			_this.setReserved(k1,value);
		} else {
			_this.h[k1] = value;
		}
	}
	t.defaultValues = new minko_data_Store();
	t.defaultValues.copyFrom(m.defaultValues,true);
	return t;
};
minko_data_BindingMapBase.__super__ = minko_Enable_$uuid;
minko_data_BindingMapBase.prototype = $extend(minko_Enable_$uuid.prototype,{
	setBindingsAndStore: function(bindings,defaultValues) {
		this.bindings = bindings;
		this.defaultValues = defaultValues;
	}
	,dispose: function() {
	}
	,__class__: minko_data_BindingMapBase
});
var minko_data_MacroBindingMap = $hx_exports["minko"]["data"]["MacroBindingMap"] = function() {
	minko_data_BindingMapBase.call(this);
	this.types = new haxe_ds_StringMap();
	this.enable_uuid();
};
minko_data_MacroBindingMap.__name__ = true;
minko_data_MacroBindingMap.copyFrom2 = function(t,m) {
	minko_data_BindingMapBase.copyFrom(t,m);
	var ts = (js_Boot.__cast(m , minko_data_MacroBindingMap)).types;
	var key = ts.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var _this = t.types;
		var value = __map_reserved[key1] != null ? ts.getReserved(key1) : ts.h[key1];
		if(__map_reserved[key1] != null) {
			_this.setReserved(key1,value);
		} else {
			_this.h[key1] = value;
		}
	}
	return t;
};
minko_data_MacroBindingMap.stringToMacroType = function(s) {
	if(s == "int") {
		return 1;
	}
	if(s == "int2") {
		return 2;
	}
	if(s == "int3") {
		return 3;
	}
	if(s == "int4") {
		return 4;
	}
	if(s == "float") {
		return 9;
	}
	if(s == "float2") {
		return 10;
	}
	if(s == "float3") {
		return 11;
	}
	if(s == "float4") {
		return 12;
	}
	if(s == "bool") {
		return 5;
	}
	if(s == "bool2") {
		return 6;
	}
	if(s == "bool3") {
		return 7;
	}
	if(s == "bool4") {
		return 8;
	}
	return 0;
};
minko_data_MacroBindingMap.__super__ = minko_data_BindingMapBase;
minko_data_MacroBindingMap.prototype = $extend(minko_data_BindingMapBase.prototype,{
	__class__: minko_data_MacroBindingMap
});
var minko_data_Collection = $hx_exports["minko"]["data"]["Collection"] = function(name) {
	this._name = name;
	this._items = [];
	this._itemAdded = new minko_signal_Signal2();
	this._itemRemoved = new minko_signal_Signal2();
};
minko_data_Collection.__name__ = true;
minko_data_Collection.create = function(name) {
	return new minko_data_Collection(name);
};
minko_data_Collection.createbyCollection = function(collection,deepCopy) {
	if(deepCopy == null) {
		deepCopy = false;
	}
	var copy = minko_data_Collection.create(collection._name);
	if(deepCopy) {
		var _g = 0;
		var _g1 = collection._items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			copy._items.push(minko_data_Provider.createbyProvider(item));
		}
	} else {
		copy._items = collection._items;
	}
	return copy;
};
minko_data_Collection.prototype = {
	dispose: function() {
		if(this._itemAdded != null) {
			this._itemAdded.dispose();
		}
		this._itemAdded = null;
		if(this._itemRemoved != null) {
			this._itemRemoved.dispose();
		}
		this._itemRemoved = null;
		this._items = null;
	}
	,get_name: function() {
		return this._name;
	}
	,get_items: function() {
		return this._items;
	}
	,get_itemAdded: function() {
		return this._itemAdded;
	}
	,get_itemRemoved: function() {
		return this._itemRemoved;
	}
	,get_front: function() {
		return this._items[0];
	}
	,get_back: function() {
		return this._items[this._items.length - 1];
	}
	,insert: function(position,provider) {
		this._items.splice(position,0,provider);
		this._itemAdded.execute(this,provider);
		return this;
	}
	,erase: function(position) {
		var provider = this._items[position];
		return this.remove(provider);
	}
	,remove: function(provider) {
		HxOverrides.remove(this._items,provider);
		this._itemRemoved.execute(this,provider);
		return this;
	}
	,pushBack: function(provider) {
		this._items.push(provider);
		this._itemAdded.execute(this,provider);
		return this;
	}
	,popBack: function() {
		var provider = this._items.pop();
		this._itemRemoved.execute(this,provider);
		return this;
	}
	,__class__: minko_data_Collection
};
var minko_data_PixelData = $hx_exports["minko"]["data"]["PixelData"] = function(w,h,p) {
	this.width = w;
	this.height = h;
	this.pixels = p;
};
minko_data_PixelData.__name__ = true;
minko_data_PixelData.prototype = {
	__class__: minko_data_PixelData
};
var minko_data_Provider = $hx_exports["minko"]["data"]["Provider"] = function() {
	minko_Enable_$uuid.call(this);
	this._values = new haxe_ds_StringMap();
	this._propertyAdded = new minko_signal_Signal2();
	this._propertyChanged = new minko_signal_Signal2();
	this._propertyRemoved = new minko_signal_Signal2();
	this.enable_uuid();
};
minko_data_Provider.__name__ = true;
minko_data_Provider.create = function() {
	var provider = new minko_data_Provider();
	return provider;
};
minko_data_Provider.createbyUuid = function(uuid) {
	var provider = new minko_data_Provider();
	provider.set_uuid(uuid);
	return provider;
};
minko_data_Provider.createbyStringMap = function(values) {
	var provider = new minko_data_Provider();
	provider.setProvider(values);
	return provider;
};
minko_data_Provider.createbyProvider = function(source) {
	var provider = minko_data_Provider.create();
	return provider.copyFrom(source);
};
minko_data_Provider.__super__ = minko_Enable_$uuid;
minko_data_Provider.prototype = $extend(minko_Enable_$uuid.prototype,{
	dispose: function() {
		if(this._values != null) {
			this._values = null;
		}
		if(this._propertyAdded != null) {
			this._propertyAdded.dispose();
		}
		if(this._propertyChanged != null) {
			this._propertyChanged.dispose();
		}
		if(this._propertyRemoved != null) {
			this._propertyRemoved.dispose();
		}
		this._propertyAdded = null;
		this._propertyChanged = null;
		this._propertyRemoved = null;
	}
	,front: function() {
		var _this = this._values;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys()).next();
	}
	,hasProperty: function(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,get_values: function() {
		return this._values;
	}
	,get_propertyAdded: function() {
		return this._propertyAdded;
	}
	,get_propertyChanged: function() {
		return this._propertyChanged;
	}
	,get_propertyRemoved: function() {
		return this._propertyRemoved;
	}
	,get: function(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	,getUnsafePointer: function(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	,set: function(propertyName,value) {
		if(this.hasProperty(propertyName)) {
			var _this = this._values;
			var ptr = __map_reserved[propertyName] != null ? _this.getReserved(propertyName) : _this.h[propertyName];
			var changed = ptr != value;
			var _this1 = this._values;
			var value1 = value;
			if(__map_reserved[propertyName] != null) {
				_this1.setReserved(propertyName,value1);
			} else {
				_this1.h[propertyName] = value1;
			}
			if(changed) {
				this._propertyChanged.execute(this,propertyName);
			}
		} else {
			var _this2 = this._values;
			var value2 = value;
			if(__map_reserved[propertyName] != null) {
				_this2.setReserved(propertyName,value2);
			} else {
				_this2.h[propertyName] = value2;
			}
			this._propertyAdded.execute(this,propertyName);
			this._propertyChanged.execute(this,propertyName);
		}
		return this;
	}
	,setProvider: function(values) {
		var p = values.keys();
		while(p.hasNext()) {
			var p1 = p.next();
			var value = __map_reserved[p1] != null ? values.getReserved(p1) : values.h[p1];
			var _this = this._values;
			var value1 = value;
			if(__map_reserved[p1] != null) {
				_this.setReserved(p1,value1);
			} else {
				_this.h[p1] = value1;
			}
		}
	}
	,propertyHasType: function(propertyName) {
		var _this = this._values;
		return (__map_reserved[propertyName] != null ? _this.getReserved(propertyName) : _this.h[propertyName]) != null;
	}
	,clear: function() {
		this._values = new haxe_ds_StringMap();
	}
	,unset: function(propertyName) {
		var _this = this._values;
		var propertyIt = __map_reserved[propertyName] != null ? _this.getReserved(propertyName) : _this.h[propertyName];
		if(propertyIt != null) {
			this._values.remove(propertyName);
			this._propertyRemoved.execute(this,propertyName);
		}
	}
	,copyFrom: function(source) {
		var nameAnd = source._values.keys();
		while(nameAnd.hasNext()) {
			var nameAnd1 = nameAnd.next();
			var _this = this._values;
			var value = source.get(nameAnd1);
			if(__map_reserved[nameAnd1] != null) {
				_this.setReserved(nameAnd1,value);
			} else {
				_this.h[nameAnd1] = value;
			}
		}
		return this;
	}
	,getValue: function(propertyName) {
		var _this = this._values;
		if(__map_reserved[propertyName] != null) {
			return _this.getReserved(propertyName);
		} else {
			return _this.h[propertyName];
		}
	}
	,setValue: function(propertyName,value) {
		var _this = this._values;
		var value1 = value;
		if(__map_reserved[propertyName] != null) {
			_this.setReserved(propertyName,value1);
		} else {
			_this.h[propertyName] = value1;
		}
	}
	,__class__: minko_data_Provider
});
var minko_data_ResolvedBinding = $hx_exports["minko"]["data"]["ResolvedBinding"] = function(binding,propertyName,store) {
	this.binding = binding;
	this.propertyName = propertyName;
	this.store = store;
};
minko_data_ResolvedBinding.__name__ = true;
minko_data_ResolvedBinding.prototype = {
	__class__: minko_data_ResolvedBinding
};
var minko_data_Store = $hx_exports["minko"]["data"]["Store"] = function() {
	minko_Enable_$uuid.call(this);
	this.enable_uuid();
	this.initialize();
};
minko_data_Store.__name__ = true;
minko_data_Store.getActualPropertyName = function(vars,propertyName) {
	var s = propertyName;
	var _g = 0;
	while(_g < vars.length) {
		var variableName = vars[_g];
		++_g;
		var pos = propertyName.indexOf("@{" + variableName.first + "}");
		if(pos != -1) {
			s = HxOverrides.substr(s,0,pos) + variableName.second + HxOverrides.substr(s,pos + variableName.first.length + 3,null);
			break;
		} else {
			pos = propertyName.indexOf("@" + variableName.first);
			if(pos != -1) {
				s = HxOverrides.substr(s,0,pos) + variableName.second + HxOverrides.substr(s,pos + variableName.first.length + 1,null);
				break;
			}
		}
	}
	return s;
};
minko_data_Store.__super__ = minko_Enable_$uuid;
minko_data_Store.prototype = $extend(minko_Enable_$uuid.prototype,{
	initialize: function() {
		this._providers = [];
		this._collections = [];
		this._lengthProvider = null;
		this._propertyAdded = new minko_signal_Signal3();
		this._propertyRemoved = new minko_signal_Signal3();
		this._propertyChanged = new minko_signal_Signal3();
		this._propertyNameToChangedSignal = new haxe_ds_StringMap();
		this._propertyNameToAddedSignal = new haxe_ds_StringMap();
		this._propertyNameToRemovedSignal = new haxe_ds_StringMap();
		this._propertySlots = new haxe_ds_ObjectMap();
		this._collectionItemAddedSlots = new haxe_ds_ObjectMap();
		this._collectionItemRemovedSlots = new haxe_ds_ObjectMap();
	}
	,dispose: function() {
		if(this._propertyNameToChangedSignal != null) {
			var _this = this._propertyNameToChangedSignal;
			var it = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(it.hasNext()) {
				var it1 = it.next();
				if(it1 != null) {
					it1.dispose();
				}
			}
		}
		if(this._propertyNameToAddedSignal != null) {
			var _this1 = this._propertyNameToAddedSignal;
			var it2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(it2.hasNext()) {
				var it3 = it2.next();
				if(it3 != null) {
					it3.dispose();
				}
			}
		}
		if(this._propertyNameToRemovedSignal != null) {
			var _this2 = this._propertyNameToRemovedSignal;
			var it4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(it4.hasNext()) {
				var it5 = it4.next();
				if(it5 != null) {
					it5.dispose();
				}
			}
		}
		if(this._propertySlots != null) {
			var _ps = this._propertySlots.iterator();
			while(_ps.hasNext()) {
				var _ps1 = _ps.next();
				var _g = 0;
				while(_g < _ps1.length) {
					var _p = _ps1[_g];
					++_g;
					_p.dispose();
				}
			}
			this._propertySlots = null;
		}
		if(this._collectionItemAddedSlots != null) {
			this._collectionItemAddedSlots = null;
		}
		if(this._collectionItemRemovedSlots != null) {
			this._collectionItemRemovedSlots = null;
		}
	}
	,propertyHasType: function(propertyName) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			throw new js__$Boot_HaxeError("");
		}
		return provider.propertyHasType(providerAndToken.second);
	}
	,get: function(propertyName) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			throw new js__$Boot_HaxeError("");
		}
		return provider.get(providerAndToken.second);
	}
	,getUnsafePointer: function(propertyName) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			return null;
		}
		return provider.getUnsafePointer(providerAndToken.second);
	}
	,set: function(propertyName,value) {
		var providerAndToken = this.getProviderByPropertyName(propertyName);
		var provider = providerAndToken.first;
		if(provider == null) {
			throw new js__$Boot_HaxeError("");
		}
		provider.set(providerAndToken.second,value);
		return this;
	}
	,get_propertyAdded: function() {
		return this._propertyAdded;
	}
	,get_propertyRemoved: function() {
		return this._propertyRemoved;
	}
	,get_propertyChanged: function() {
		return this._propertyChanged;
	}
	,getPropertyAdded: function(propertyName) {
		return this.getOrInsertSignal(this._propertyNameToAddedSignal,propertyName);
	}
	,getPropertyRemoved: function(propertyName) {
		return this.getOrInsertSignal(this._propertyNameToRemovedSignal,propertyName);
	}
	,getPropertyChanged: function(propertyName) {
		return this.getOrInsertSignal(this._propertyNameToChangedSignal,propertyName);
	}
	,get_providers: function() {
		return this._providers;
	}
	,set_providers: function(v) {
		this._providers = v;
		return v;
	}
	,get_collections: function() {
		return this._collections;
	}
	,addProvider: function(provider) {
		this.doAddProvider(provider);
	}
	,addProviderbyName: function(provider,collectionName) {
		this.addProviderToCollection(provider,collectionName);
	}
	,removeProvider: function(provider) {
		this.doRemoveProvider(provider);
	}
	,removeProviderbyName: function(provider,collectionName) {
		this.removeProviderFromCollection(provider,collectionName);
	}
	,addCollection: function(collection) {
		var _gthis = this;
		this._collections.push(collection);
		var tmp = this._collectionItemAddedSlots;
		var tmp1 = collection.get_itemAdded().connect(function(UnnamedParameter1,provider) {
			_gthis.doAddProvider(provider,collection);
		});
		tmp.set(collection,tmp1);
		var tmp2 = this._collectionItemRemovedSlots;
		var tmp3 = collection.get_itemRemoved().connect(function(UnnamedParameter11,provider1) {
			_gthis.doRemoveProvider(provider1,collection);
		});
		tmp2.set(collection,tmp3);
		if(collection.get_items().length != 0) {
			var _g = 0;
			var _g1 = collection.get_items();
			while(_g < _g1.length) {
				var provider2 = _g1[_g];
				++_g;
				this.doAddProvider(provider2,collection);
			}
		} else {
			this.updateCollectionLength(collection);
		}
	}
	,removeCollection: function(collection) {
		HxOverrides.remove(this._collections,collection);
		this._collectionItemAddedSlots.h[collection.__id__].dispose();
		this._collectionItemAddedSlots.remove(collection);
		this._collectionItemRemovedSlots.h[collection.__id__].dispose();
		this._collectionItemRemovedSlots.remove(collection);
		var _g = 0;
		var _g1 = collection.get_items();
		while(_g < _g1.length) {
			var provider = _g1[_g];
			++_g;
			this.doRemoveProvider(provider,collection);
		}
	}
	,hasProperty: function(propertyName) {
		return this.getProviderByPropertyName(propertyName).first != null;
	}
	,hasPropertyAddedSignal: function(propertyName) {
		var _this = this._propertyNameToAddedSignal;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,hasPropertyRemovedSignal: function(propertyName) {
		var _this = this._propertyNameToRemovedSignal;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,hasPropertyChangedSignal: function(propertyName) {
		var _this = this._propertyNameToChangedSignal;
		if(__map_reserved[propertyName] != null) {
			return _this.existsReserved(propertyName);
		} else {
			return _this.h.hasOwnProperty(propertyName);
		}
	}
	,getProviderByPropertyName: function(propertyName) {
		var pos = propertyName.indexOf("[");
		if(pos != -1) {
			var collectionName = HxOverrides.substr(propertyName,0,pos);
			var _g = 0;
			var _g1 = this._collections;
			while(_g < _g1.length) {
				var collection = _g1[_g];
				++_g;
				if(collection.get_name() == collectionName) {
					var pos2 = propertyName.indexOf("]");
					var indexStr = HxOverrides.substr(propertyName,pos + 1,pos2 - pos - 1);
					var pos3 = indexStr.indexOf("-");
					var token = HxOverrides.substr(propertyName,pos2 + 2,null);
					if(pos3 != -1 && pos3 < pos2) {
						var _g2 = 0;
						var _g3 = collection.get_items();
						while(_g2 < _g3.length) {
							var provider = _g3[_g2];
							++_g2;
							if(provider.get_uuid() == indexStr && provider.hasProperty(token)) {
								return new minko_Tuple(provider,token);
							}
						}
					} else {
						var index = Std.parseInt(indexStr);
						if(index < collection.get_items().length) {
							var provider1 = collection.get_items()[index];
							if(provider1.hasProperty(token)) {
								return new minko_Tuple(provider1,token);
							}
						}
					}
					return new minko_Tuple(null,token);
				}
			}
		} else {
			var _g4 = 0;
			var _g11 = this._providers;
			while(_g4 < _g11.length) {
				var provider2 = _g11[_g4];
				++_g4;
				if(provider2.hasProperty(propertyName)) {
					return new minko_Tuple(provider2,propertyName);
				}
			}
		}
		return new minko_Tuple(null,propertyName);
	}
	,doRemoveProvider: function(provider,collection) {
		HxOverrides.remove(this._providers,provider);
		var property = provider.get_values().keys();
		while(property.hasNext()) {
			var property1 = property.next();
			this.providerPropertyRemovedHandler(provider,collection,property1);
		}
		if(this._propertySlots.h.__keys__[provider.__id__] != null) {
			var _slots = this._propertySlots.h[provider.__id__];
			var _g = 0;
			while(_g < _slots.length) {
				var s = _slots[_g];
				++_g;
				s.disconnect();
			}
			this._propertySlots.remove(provider);
		}
		if(collection == null) {
			var nameAndValue = provider.get_values().keys();
			while(nameAndValue.hasNext()) {
				var nameAndValue1 = nameAndValue.next();
				var tmp;
				var _this = this._propertyNameToChangedSignal;
				if(__map_reserved[nameAndValue1] != null ? _this.existsReserved(nameAndValue1) : _this.h.hasOwnProperty(nameAndValue1)) {
					var _this1 = this._propertyNameToChangedSignal;
					tmp = (__map_reserved[nameAndValue1] != null ? _this1.getReserved(nameAndValue1) : _this1.h[nameAndValue1]).get_numCallbacks() == 0;
				} else {
					tmp = false;
				}
				if(tmp) {
					this._propertyNameToChangedSignal.remove(nameAndValue1);
				}
			}
		} else {
			var providerIndex = collection.get_items().indexOf(provider);
			var prefix = collection.get_name() + "[" + providerIndex + "].";
			var nameAndValue2 = provider.get_values().keys();
			while(nameAndValue2.hasNext()) {
				var nameAndValue3 = nameAndValue2.next();
				var _this2 = this._propertyNameToChangedSignal;
				var key = prefix + nameAndValue3;
				if(__map_reserved[key] != null ? _this2.existsReserved(key) : _this2.h.hasOwnProperty(key)) {
					var _this3 = this._propertyNameToChangedSignal;
					var key1 = prefix + nameAndValue3;
					(__map_reserved[key1] != null ? _this3.getReserved(key1) : _this3.h[key1]).dispose();
					this._propertyNameToChangedSignal.remove(prefix + nameAndValue3);
				}
			}
			this.updateCollectionLength(collection);
			var _g1 = 0;
			var _g11 = collection.get_items();
			while(_g1 < _g11.length) {
				var provider1 = _g11[_g1];
				++_g1;
				var property2 = provider1.get_values().keys();
				while(property2.hasNext()) {
					var property3 = property2.next();
					this.executePropertySignal(provider1,collection,property3,this._propertyChanged,this._propertyNameToChangedSignal);
				}
			}
		}
	}
	,formatPropertyName: function(collection,provider,propertyName,useUuid) {
		if(useUuid == null) {
			useUuid = false;
		}
		if(collection == null) {
			return propertyName;
		}
		if(useUuid) {
			return this.formatPropertyIndexName(collection,provider.get_uuid(),propertyName);
		}
		var it = collection.get_items().indexOf(provider);
		return this.formatPropertyIndexName(collection,it == null ? "null" : "" + it,propertyName);
	}
	,formatPropertyIndexName: function(collection,index,propertyName) {
		if(collection == null) {
			return propertyName;
		}
		return collection.get_name() + "[" + index + "]." + propertyName;
	}
	,executePropertySignal: function(provider,collection,propertyName,anyChangedSignal,propertyNameToSignal) {
		anyChangedSignal.execute(this,provider,propertyName);
		if(collection != null) {
			var formattedPropertyName = this.formatPropertyName(collection,provider,propertyName,true);
			if(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.existsReserved(formattedPropertyName) : propertyNameToSignal.h.hasOwnProperty(formattedPropertyName)) {
				(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.getReserved(formattedPropertyName) : propertyNameToSignal.h[formattedPropertyName]).execute(this,provider,propertyName);
			}
			formattedPropertyName = this.formatPropertyName(collection,provider,propertyName);
			if(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.existsReserved(formattedPropertyName) : propertyNameToSignal.h.hasOwnProperty(formattedPropertyName)) {
				(__map_reserved[formattedPropertyName] != null ? propertyNameToSignal.getReserved(formattedPropertyName) : propertyNameToSignal.h[formattedPropertyName]).execute(this,provider,propertyName);
			}
		} else if(__map_reserved[propertyName] != null ? propertyNameToSignal.existsReserved(propertyName) : propertyNameToSignal.h.hasOwnProperty(propertyName)) {
			(__map_reserved[propertyName] != null ? propertyNameToSignal.getReserved(propertyName) : propertyNameToSignal.h[propertyName]).execute(this,provider,propertyName);
		}
	}
	,providerPropertyAddedHandler: function(provider,collection,propertyName) {
		this.executePropertySignal(provider,collection,propertyName,this._propertyAdded,this._propertyNameToAddedSignal);
		this.executePropertySignal(provider,collection,propertyName,this._propertyChanged,this._propertyNameToChangedSignal);
	}
	,providerPropertyRemovedHandler: function(provider,collection,propertyName) {
		this.executePropertySignal(provider,collection,propertyName,this._propertyChanged,this._propertyNameToChangedSignal);
		this.executePropertySignal(provider,collection,propertyName,this._propertyRemoved,this._propertyNameToRemovedSignal);
		var formattedName = this.formatPropertyName(collection,provider,propertyName);
		var _this = this._propertyNameToAddedSignal;
		var it = __map_reserved[formattedName] != null ? _this.getReserved(formattedName) : _this.h[formattedName];
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToAddedSignal.remove(formattedName);
		}
		var _this1 = this._propertyNameToRemovedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this1.getReserved(formattedName);
		} else {
			it = _this1.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToRemovedSignal.remove(formattedName);
		}
		var _this2 = this._propertyNameToChangedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this2.getReserved(formattedName);
		} else {
			it = _this2.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToChangedSignal.remove(formattedName);
		}
		formattedName = this.formatPropertyName(collection,provider,propertyName,true);
		var _this3 = this._propertyNameToAddedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this3.getReserved(formattedName);
		} else {
			it = _this3.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToAddedSignal.remove(formattedName);
		}
		var _this4 = this._propertyNameToRemovedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this4.getReserved(formattedName);
		} else {
			it = _this4.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToRemovedSignal.remove(formattedName);
		}
		var _this5 = this._propertyNameToChangedSignal;
		if(__map_reserved[formattedName] != null) {
			it = _this5.getReserved(formattedName);
		} else {
			it = _this5.h[formattedName];
		}
		if(it != null && it.get_numCallbacks() == 0) {
			this._propertyNameToChangedSignal.remove(formattedName);
		}
	}
	,addProviderToCollection: function(provider,collectionName) {
		var collectionIt = Lambda.find(this._collections,function(c) {
			return c.get_name() == collectionName;
		});
		var collection = null;
		if(collectionIt == null) {
			collection = minko_data_Collection.create(collectionName);
			this.addCollection(collection);
		} else {
			collection = collectionIt;
		}
		collection.pushBack(provider);
	}
	,removeProviderFromCollection: function(provider,collectionName) {
		var collectionIt = Lambda.find(this._collections,function(c) {
			return c.get_name() == collectionName;
		});
		if(collectionIt == null) {
			throw new js__$Boot_HaxeError("collectionName = " + collectionName);
		}
		collectionIt.remove(provider);
	}
	,doAddProvider: function(provider,collection) {
		var _gthis = this;
		this._providers.push(provider);
		this._propertySlots.set(provider,[provider.get_propertyAdded().connect(function(p,propertyName) {
			_gthis.providerPropertyAddedHandler(p,collection,propertyName);
		}),provider.get_propertyRemoved().connect(function(p1,propertyName1) {
			_gthis.providerPropertyRemovedHandler(p1,collection,propertyName1);
		}),provider.get_propertyChanged().connect(function(p2,propertyName2) {
			_gthis.executePropertySignal(p2,collection,propertyName2,_gthis._propertyChanged,_gthis._propertyNameToChangedSignal);
		})]);
		var property = provider.get_values().keys();
		while(property.hasNext()) {
			var property1 = property.next();
			this.providerPropertyAddedHandler(provider,collection,property1);
		}
		if(collection != null) {
			this.updateCollectionLength(collection);
		}
	}
	,updateCollectionLength: function(collection) {
		if(this._lengthProvider == null) {
			this._lengthProvider = minko_data_Provider.create();
			this.doAddProvider(this._lengthProvider);
		}
		this._lengthProvider.set(collection.get_name() + ".length",collection.get_items().length);
	}
	,copyFrom: function(store,deepCopy) {
		if(deepCopy == null) {
			deepCopy = false;
		}
		if(deepCopy) {
			var added = [];
			var _g = 0;
			var _g1 = store._collections;
			while(_g < _g1.length) {
				var collection = _g1[_g];
				++_g;
				added = added.concat(collection.get_items());
				this.addCollection(minko_data_Collection.createbyCollection(collection));
			}
			var _g2 = 0;
			var _g11 = store._providers;
			while(_g2 < _g11.length) {
				var provider = _g11[_g2];
				++_g2;
				var it = Lambda.has(added,provider);
				if(it == false) {
					this._providers.push(minko_data_Provider.createbyProvider(provider));
				}
			}
		} else {
			this._collections = [].concat(store._collections);
			this._providers = [].concat(store._providers);
			if(store._lengthProvider != null) {
				this._lengthProvider = minko_data_Provider.createbyProvider(store._lengthProvider);
			}
		}
		return this;
	}
	,getOrInsertSignal: function(signals,propertyName) {
		var signal;
		if(!(__map_reserved[propertyName] != null ? signals.existsReserved(propertyName) : signals.h.hasOwnProperty(propertyName))) {
			signal = new minko_signal_Signal3();
			if(__map_reserved[propertyName] != null) {
				signals.setReserved(propertyName,signal);
			} else {
				signals.h[propertyName] = signal;
			}
		} else {
			signal = __map_reserved[propertyName] != null ? signals.getReserved(propertyName) : signals.h[propertyName];
		}
		return signal;
	}
	,__class__: minko_data_Store
});
var minko_file_AbstractParser = $hx_exports["minko"]["file"]["AbstractParser"] = function() {
	this._progress = new minko_signal_Signal2();
	this._complete = new minko_signal_Signal();
	this._error = new minko_signal_Signal2();
};
minko_file_AbstractParser.__name__ = true;
minko_file_AbstractParser.prototype = {
	dispose: function() {
	}
	,get_progress: function() {
		return this._progress;
	}
	,get_complete: function() {
		return this._complete;
	}
	,get_error: function() {
		return this._error;
	}
	,parse: function(filename,resolvedFilename,options,data,assetLibrary) {
	}
	,__class__: minko_file_AbstractParser
};
var minko_file_AbstractASSIMPParser = function() {
	minko_file_AbstractParser.call(this);
	this._numDependencies = 0;
	this._numLoadedDependencies = 0;
	this._filename = "";
	this._assetLibrary = null;
	this._options = null;
	this._symbol = null;
	this._aiNodeToNode = new haxe_ds_ObjectMap();
	this._aiMeshToNode = new haxe_ds_ObjectMap();
	this._nameToNode = new haxe_ds_StringMap();
	this._nameToAnimMatrices = new haxe_ds_StringMap();
	this._alreadyAnimatedNodes = [];
	this._meshNames = [];
	this._loaderCompleteSlots = new haxe_ds_ObjectMap();
	this._loaderErrorSlots = new haxe_ds_ObjectMap();
	this._importer = null;
};
minko_file_AbstractASSIMPParser.__name__ = true;
minko_file_AbstractASSIMPParser.initializeTextureTypeToName = function() {
	var typeToString = new haxe_ds_IntMap();
	typeToString.h[1] = "diffuseMap";
	typeToString.h[2] = "specularMap";
	typeToString.h[8] = "alphaMap";
	typeToString.h[6] = "normalMap";
	typeToString.h[11] = "environmentMap2d";
	typeToString.h[10] = "lightMap";
	return typeToString;
};
minko_file_AbstractASSIMPParser.createIndexBuffer = function(mesh,context) {
	var _g = [];
	var _g2 = 0;
	var _g1 = 3 * mesh.numFaces;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(0);
	}
	var indexData = _g;
	var _g21 = 0;
	var _g11 = mesh.numFaces;
	while(_g21 < _g11) {
		var faceId = _g21++;
		var face = mesh.faces[faceId];
		var _g3 = 0;
		while(_g3 < 3) {
			var j = _g3++;
			indexData[j + 3 * faceId] = face.indices[j];
		}
	}
	return minko_render_IndexBuffer.createbyData(context,indexData);
};
minko_file_AbstractASSIMPParser.packColor = function(color) {
	var this1 = new glm_Vec4Base();
	this1.x = 1.0;
	this1.y = 0.00392156862745098;
	this1.z = 1.5378700499807768e-005;
	this1.w = 6.0308629411010845e-008;
	var b = this1;
	return color.x * b.x + color.y * b.y + color.z * b.z + color.w * b.w;
};
minko_file_AbstractASSIMPParser.__super__ = minko_file_AbstractParser;
minko_file_AbstractASSIMPParser.prototype = $extend(minko_file_AbstractParser.prototype,{
	provideLoaders: function(importer) {
	}
	,dispose: function() {
		this._importer = null;
	}
	,parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var _gthis = this;
		var pos = resolvedFilename.lastIndexOf("\\/");
		options = options.clone();
		if(pos > 0) {
			options.get_includePaths().push(resolvedFilename.substring(0,pos));
		}
		this._filename = filename;
		this._resolvedFilename = resolvedFilename;
		this._assetLibrary = assetLibrary;
		this._options = options;
		this.initImporter();
		var ioHandlerOptions = options.clone();
		ioHandlerOptions.set_loadAsynchronously(false);
		var ioHandler = new minko_file_IOHandler(ioHandlerOptions,this._assetLibrary,this._resolvedFilename);
		ioHandler.errorFunction(function(self,filename1,error) {
			_gthis._error.execute(_gthis,"MissingAssetDependency" + filename1 + error);
		});
		this._importer.set_ioHandler(ioHandler);
		var progressHandler = new assimp_ProgressHandler();
		progressHandler.progressFunction(function(progress) {
			_gthis.get_progress().execute(_gthis,progress);
		});
		this._importer.set_progressHandler(progressHandler);
		var scene = this.importScene(filename,resolvedFilename,options,data,assetLibrary);
		if(scene == null) {
			return;
		}
		this.parseDependencies(resolvedFilename,scene);
		if(this._numDependencies == 0) {
			this.allDependenciesLoaded(scene);
		}
	}
	,importScene: function(filename,resolvedFilename,options,data,assetLibrary) {
		var scene = this._importer.readFileFromMemory(data,0,minko_file_File.getExtension(filename));
		if(scene == null) {
			this._error.execute(this,this._importer.getErrorString());
			return null;
		}
		return scene;
	}
	,getPostProcessingFlags: function(scene,options) {
		if(scene.numMeshes == 0) {
			return 0;
		}
		var numMaterials = scene.numMaterials;
		var numTextures = scene.numTextures;
		var _g1 = 0;
		var _g = numMaterials;
		while(_g1 < _g) {
			var materialId = _g1++;
			var aiMat = scene.materials[materialId];
			var textureType = minko_file_AbstractASSIMPParser._textureTypeToName.keys();
			while(textureType.hasNext()) {
				var textureType1 = textureType.next();
				numTextures += aiMat.getMaterialTextureCount(textureType1);
			}
		}
		var flags = 2 | 64 | 512 | 262144 | 8388608 | 32768 | 8 | 2048 | 131072 | 1024 | 16;
		if(options.get_optimizeForRendering()) {
			flags |= 128;
		}
		var removeComponentFlags = 0;
		if(numMaterials == 0 || numTextures == 0) {
			removeComponentFlags |= 4;
		}
		var _this = this._importer;
		var szName = assimp_Assimp.AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE;
		var value = options.get_normalMaxSmoothingAngle();
		var _this1 = assimp_Importer.impl.properties;
		var key = assimp_Hash.superFastHash(szName);
		_this1.h[key] = value;
		var _this2 = this._importer;
		var _this3 = assimp_Importer.impl.properties;
		var key1 = assimp_Hash.superFastHash(assimp_Assimp.AI_CONFIG_PP_RVC_FLAGS);
		_this3.h[key1] = removeComponentFlags;
		if(!options.get_preserveMaterials()) {
			flags |= 4096;
		}
		return flags;
	}
	,applyPostProcessing: function(scene,postProcessingFlags) {
		var processedScene = this._importer.applyPostProcessing(postProcessingFlags);
		return processedScene;
	}
	,allDependenciesLoaded: function(scene) {
		var processedScene = scene;
		var postProcessingFlags = this.getPostProcessingFlags(scene,this._options);
		if(postProcessingFlags != 0) {
			processedScene = this.applyPostProcessing(scene,postProcessingFlags);
		}
		if(processedScene == null) {
			this._error.execute(this,this._importer.getErrorString());
			return;
		}
		this.convertScene(scene);
	}
	,initImporter: function() {
		if(this._importer != null) {
			return;
		}
		this._importer = new assimp_Importer();
		this.provideLoaders(this._importer);
		var _this = this._importer;
		var szName = assimp_Assimp.AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS;
		var value = this._options.get_includeAnimation();
		var _this1 = assimp_Importer.impl.properties;
		var key = assimp_Hash.superFastHash(szName);
		_this1.h[key] = value;
	}
	,convertScene: function(scene) {
		var arg = this._numDependencies + " dependencies loaded!";
		var symbolRootName = minko_file_File.removePrefixPathFromFilename(this._filename);
		this._symbol = this.createNode(scene,null,symbolRootName);
		this.createSceneTree(this._symbol,scene,scene.rootNode,this._options.get_assetLibrary());
		if(this._options.get_preserveMaterials()) {
			this.createUnusedMaterials(scene,this._options.get_assetLibrary(),this._options);
		}
		this.createLights(scene);
		this.createCameras(scene);
		if(this._options.get_includeAnimation()) {
			this.createSkins(scene);
			this.createAnimations(scene,true);
		}
		this.applyFunc(this._symbol,this._options.get_nodeFunction());
		if(this._options.get_includeAnimation()) {
			var animations = minko_scene_NodeSet.createbyNode(this._symbol).descendants(true).where(function(n) {
				return n.hasComponent(minko_component_AbstractAnimation);
			});
			var _g = 0;
			var _g1 = animations.get_nodes();
			while(_g < _g1.length) {
				var n1 = _g1[_g];
				++_g;
				if(this._options.get_startAnimation()) {
					var ani = n1.getComponent(minko_component_AbstractAnimation);
					ani.play();
				} else {
					var ani1 = n1.getComponent(minko_component_AbstractAnimation);
					ani1.stop();
				}
			}
		}
		if(this._numDependencies == this._numLoadedDependencies) {
			this.finalize();
		}
	}
	,createNode: function(scene,node,name) {
		var metadata = new minko_component_Metadata();
		if(node == null || !this.parseMetadata(scene,node,this._options,metadata.get_data())) {
			return minko_scene_Node.create(name);
		}
		var minkoNode = new minko_scene_Node();
		var uuidIt = metadata.has("minko_uuid");
		if(uuidIt != false) {
			minkoNode = minko_scene_Node.create(name);
			minkoNode.set_uuid(metadata.get("minko_uuid"));
		} else {
			minkoNode = minko_scene_Node.create(name);
		}
		var entry = metadata._data.keys();
		while(entry.hasNext()) {
			var entry1 = entry.next();
			(this._options.get_attributeFunction())(minkoNode,entry1,metadata.get(entry1));
		}
		minkoNode.addComponent(minko_component_Metadata.create(metadata.get_data()));
		return minkoNode;
	}
	,createSceneTree: function(minkoNode,scene,ainode,assets) {
		minkoNode.addComponent(this.getTransformFromAssimp(ainode));
		var _g1 = 0;
		var _g = ainode.numMeshes;
		while(_g1 < _g) {
			var j = _g1++;
			var aimesh = scene.meshes[ainode.meshes[j]];
			if(aimesh == null) {
				continue;
			}
			this._aiMeshToNode.set(aimesh,minkoNode);
			this.createMeshSurface(minkoNode,scene,aimesh);
		}
		var _g11 = 0;
		var _g2 = ainode.numChildren;
		while(_g11 < _g2) {
			var i = _g11++;
			var aichild = ainode.children[i];
			if(aichild == null) {
				continue;
			}
			var childName = aichild.name;
			var childNode = this.createNode(scene,aichild,childName);
			this._nodeToAiNode.set(childNode,aichild);
			this._aiNodeToNode.set(aichild,childNode);
			if(childName != null) {
				var _this = this._nameToNode;
				if(__map_reserved[childName] != null) {
					_this.setReserved(childName,childNode);
				} else {
					_this.h[childName] = childNode;
				}
			}
			this.createSceneTree(childNode,scene,aichild,assets);
			minkoNode.addChild(childNode);
		}
	}
	,parseMetadata: function(scene,ainode,options,metadata) {
		if(ainode.metaData == null) {
			return false;
		}
		var key = ainode.metaData.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var data = ainode.metaData.get(key1);
			var dataString = "";
			var _g = data.type;
			switch(_g) {
			case 0:
				dataString = Std.string(data.data);
				break;
			case 1:
				dataString = Std.string(data.data);
				break;
			case 2:
				dataString = Std.string(data.data);
				break;
			case 3:
				dataString = Std.string(data.data);
				break;
			case 5:
				dataString = data.data;
				break;
			case 6:
				var vec3 = data.data;
				dataString = "<" + vec3.x + ", " + vec3.y + ", " + vec3.z + ">";
				break;
			default:
			}
			if(__map_reserved[key1] != null) {
				metadata.setReserved(key1,dataString);
			} else {
				metadata.h[key1] = dataString;
			}
		}
		return true;
	}
	,applyFunc: function(node,func) {
		func(node);
		if(node != null) {
			var _g = 0;
			var _g1 = node.get_children();
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				this.applyFunc(n,func);
			}
		}
	}
	,getTransformFromAssimp: function(ainode) {
		return minko_component_Transform.createbyMatrix4(ainode.transformation);
	}
	,createMeshGeometry: function(minkoNode,mesh,meshName) {
		var existingGeometry = this._aiMeshToGeometry.h.__keys__[mesh.__id__] != null;
		if(existingGeometry != false) {
			return this._aiMeshToGeometry.h[mesh.__id__];
		}
		var vertexSize = 0;
		if(mesh.hasPositions()) {
			vertexSize += 3;
		}
		if(mesh.hasNormals()) {
			vertexSize += 3;
		}
		if(mesh.getNumUVChannels() > 0) {
			vertexSize += Math.floor(Math.min(mesh.getNumUVChannels() * 2,minko_file_AbstractASSIMPParser.MAX_NUM_UV_CHANNELS * 2));
		}
		if(mesh.hasVertexColors(0)) {
			vertexSize += 4;
		}
		var _g = [];
		var _g2 = 0;
		var _g1 = vertexSize * mesh.numVertices;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0.0);
		}
		var vertexData = _g;
		var vId = 0;
		var _g21 = 0;
		var _g11 = mesh.numVertices;
		while(_g21 < _g11) {
			var vertexId = _g21++;
			if(mesh.hasPositions()) {
				var vec = mesh.vertices[vertexId];
				vertexData[vId++] = vec.x;
				vertexData[vId++] = vec.y;
				vertexData[vId++] = vec.z;
			}
			if(mesh.hasNormals()) {
				var vec1 = mesh.normals[vertexId];
				vertexData[vId++] = vec1.x;
				vertexData[vId++] = vec1.y;
				vertexData[vId++] = vec1.z;
			}
			var _g4 = 0;
			var _g3 = Math.floor(Math.min(mesh.getNumUVChannels(),minko_file_AbstractASSIMPParser.MAX_NUM_UV_CHANNELS));
			while(_g4 < _g3) {
				var i1 = _g4++;
				var vec2 = mesh.textureCoords[i1][vertexId];
				vertexData[vId++] = vec2.x;
				vertexData[vId++] = vec2.y;
			}
			if(mesh.hasVertexColors(0)) {
				var color = mesh.colors[0][vertexId];
				var x = color.x;
				var y = color.y;
				var z = color.z;
				var w = color.w;
				var this1 = new glm_Vec4Base();
				this1.x = x;
				this1.y = y;
				this1.z = z;
				this1.w = w;
				var packedColor = this1;
				vertexData[vId++] = packedColor.x;
				vertexData[vId++] = packedColor.y;
				vertexData[vId++] = packedColor.z;
				vertexData[vId++] = packedColor.w;
			}
		}
		var indices = null;
		var numIndices = mesh.numFaces * 3;
		if(this._options.get_optimizeForRendering() || numIndices <= Infinity) {
			indices = minko_file_AbstractASSIMPParser.createIndexBuffer(mesh,this._assetLibrary.get_context());
		} else {
			indices = minko_file_AbstractASSIMPParser.createIndexBuffer(mesh,this._assetLibrary.get_context());
		}
		var geometry = minko_geometry_Geometry.create();
		var vertexBuffer = minko_render_VertexBuffer.createbyData(this._assetLibrary.get_context(),vertexData);
		var attrOffset = 0;
		if(mesh.hasPositions()) {
			vertexBuffer.addAttribute("position",3,attrOffset);
			attrOffset += 3;
		}
		if(mesh.hasNormals()) {
			vertexBuffer.addAttribute("normal",3,attrOffset);
			attrOffset += 3;
		}
		var _g22 = 0;
		var _g12 = Math.floor(Math.min(mesh.getNumUVChannels(),minko_file_AbstractASSIMPParser.MAX_NUM_UV_CHANNELS));
		while(_g22 < _g12) {
			var i2 = _g22++;
			var attributeName = "uv" + (i2 > 0 ? i2 == null ? "null" : "" + i2 : "");
			vertexBuffer.addAttribute(attributeName,2,attrOffset);
			attrOffset += 2;
		}
		if(mesh.hasVertexColors(0)) {
			vertexBuffer.addAttribute("color",4,attrOffset);
			attrOffset += 4;
		}
		geometry.addVertexBuffer(vertexBuffer);
		geometry.set_indices(indices);
		geometry = (this._options.get_geometryFunction())(meshName,geometry);
		this._aiMeshToGeometry.set(mesh,geometry);
		this._assetLibrary.setGeometry(meshName,geometry);
		return geometry;
	}
	,getValidAssetName: function(name) {
		var _this = this._validAssetNames;
		var validAssetNameIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(validAssetNameIt != false) {
			var _this1 = this._validAssetNames;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		}
		var validAssetName = name;
		validAssetName = minko_file_File.removePrefixPathFromFilename(validAssetName);
		var invalidSymbolRegex_r = new RegExp("[^a-zA-Z0-9_\\\\.-]+","".split("u").join(""));
		validAssetName = validAssetName.replace(invalidSymbolRegex_r,"");
		var _this2 = this._validAssetNames;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,validAssetName);
		} else {
			_this2.h[name] = validAssetName;
		}
		return validAssetName;
	}
	,getMaterialName: function(materialName) {
		return this.getValidAssetName(materialName);
	}
	,getMeshName: function(meshName) {
		return this.getValidAssetName(meshName);
	}
	,LOG_WARNING: function(arg) {
	}
	,createMeshSurface: function(minkoNode,scene,mesh) {
		if(mesh == null) {
			return;
		}
		var meshName = this.getMeshName(mesh.name);
		var primitiveType = mesh.primitiveTypes;
		if(primitiveType != 4) {
			return;
		}
		var realMeshName = meshName;
		while(Lambda.has(this._meshNames,realMeshName)) realMeshName = meshName + "_" + this.createMeshSurface_id++;
		this._meshNames.push(realMeshName);
		var aiMat = scene.materials[mesh.materialIndex];
		var geometry = this.createMeshGeometry(minkoNode,mesh,realMeshName);
		var material = this.createMaterial(aiMat);
		var effect = this.chooseEffectByShadingMode(aiMat);
		minkoNode.addComponent(minko_component_Surface.create(geometry,material,effect,"default",realMeshName));
	}
	,createCameras: function(scene) {
		var _g1 = 0;
		var _g = scene.numCameras;
		while(_g1 < _g) {
			var i = _g1++;
			var aiCamera = scene.cameras[i];
			var aiPosition = aiCamera.position;
			var aiLookAt = aiCamera.lookAt;
			var aiUp = aiCamera.up;
			var cameraName = aiCamera.name;
			var cameraNode = cameraName != null ? this.findNode(cameraName) : null;
			if(cameraNode != null) {
				var half_fovy = Math.atan(Math.tan(aiCamera.horizontalFOV * .5) * aiCamera.aspect);
				cameraNode.addComponent(minko_component_PerspectiveCamera.create(aiCamera.aspect,half_fovy,aiCamera.clipPlaneNear,aiCamera.clipPlaneFar));
				if(!cameraNode.hasComponent(minko_component_Transform)) {
					cameraNode.addComponent(minko_component_Transform.create());
				}
			}
		}
	}
	,createUnusedMaterials: function(scene,assetLibrary,options) {
		var _g1 = 0;
		var _g = scene.numMaterials;
		while(_g1 < _g) {
			var i = _g1++;
			var aiMaterial = scene.materials[i];
			this.createMaterial(aiMaterial);
		}
	}
	,createLights: function(scene) {
		var _g1 = 0;
		var _g = scene.numLights;
		while(_g1 < _g) {
			var i = _g1++;
			var aiLight = scene.lights[i];
			var lightName = aiLight.name;
			if(aiLight.type == 0) {
				continue;
			}
			var lightNode = this.findNode(lightName);
			if(lightNode == null) {
				continue;
			}
			var aiDiffuseColor = aiLight.colorDiffuse;
			var aiDirection = aiLight.direction;
			var aiPosition = aiLight.position;
			if(Math.sqrt(aiDirection.x * aiDirection.x + aiDirection.y * aiDirection.y + aiDirection.z * aiDirection.z) > 0.0) {
				var x = aiDirection.x;
				var y = aiDirection.y;
				var z = aiDirection.z;
				var this1 = new glm_Vec3Base();
				this1.x = x;
				this1.y = y;
				this1.z = z;
				var direction = this1;
				var x1 = aiPosition.x;
				var y1 = aiPosition.y;
				var z1 = aiPosition.z;
				var this2 = new glm_Vec3Base();
				this2.x = x1;
				this2.y = y1;
				this2.z = z1;
				var position = this2;
				var transform = lightNode.getComponent(minko_component_Transform);
				if(transform != null) {
					var a = transform.get_matrix();
					var _r0c0 = a._00;
					var _r0c1 = a._10;
					var _r0c2 = a._20;
					var _r1c0 = a._01;
					var _r1c1 = a._11;
					var _r1c2 = a._21;
					var _r2c0 = a._02;
					var _r2c1 = a._22;
					var _r2c2 = a._22;
					var this3 = new glm_Mat3Base();
					this3._00 = _r0c0;
					this3._01 = _r1c0;
					this3._02 = _r2c0;
					this3._10 = _r0c1;
					this3._11 = _r1c1;
					this3._12 = _r2c1;
					this3._20 = _r0c2;
					this3._21 = _r1c2;
					this3._22 = _r2c2;
					var m = this3;
					var this4 = new glm_Vec3Base();
					this4.x = 0;
					this4.y = 0;
					this4.z = 0;
					var dest = this4;
					var x2 = direction.x;
					var y2 = direction.y;
					var z2 = direction.z;
					dest.x = m._00 * x2 + m._10 * y2 + m._20 * z2;
					dest.y = m._01 * x2 + m._11 * y2 + m._21 * z2;
					dest.z = m._02 * x2 + m._12 * y2 + m._22 * z2;
					direction = dest;
					var m1 = transform.get_matrix();
					var x3 = position.x;
					var y3 = position.y;
					var z3 = position.z;
					var this5 = new glm_Vec4Base();
					this5.x = x3;
					this5.y = y3;
					this5.z = z3;
					this5.w = 1.0;
					var v = this5;
					var this6 = new glm_Vec4Base();
					this6.x = 0;
					this6.y = 0;
					this6.z = 0;
					this6.w = 0;
					var dest1 = this6;
					var x4 = v.x;
					var y4 = v.y;
					var z4 = v.z;
					var w = v.w;
					dest1.x = m1._00 * x4 + m1._10 * y4 + m1._20 * z4 + m1._30 * w;
					dest1.y = m1._01 * x4 + m1._11 * y4 + m1._21 * z4 + m1._31 * w;
					dest1.z = m1._02 * x4 + m1._12 * y4 + m1._22 * z4 + m1._32 * w;
					dest1.w = m1._03 * x4 + m1._13 * y4 + m1._23 * z4 + m1._33 * w;
					var v1 = dest1;
					var x5 = v1.x;
					var y5 = v1.y;
					var z5 = v1.z;
					var this7 = new glm_Vec3Base();
					this7.x = x5;
					this7.y = y5;
					this7.z = z5;
					position = this7;
				} else {
					lightNode.addComponent(minko_component_Transform.create());
				}
				var this8 = new glm_Vec3Base();
				this8.x = 0;
				this8.y = 0;
				this8.z = 0;
				var dest2 = this8;
				dest2.x = position.x + direction.x;
				dest2.y = position.y + direction.y;
				dest2.z = position.z + direction.z;
				var lookAt = dest2;
				var this9 = new glm_Vec3Base();
				this9.x = 0;
				this9.y = 0;
				this9.z = 0;
				var b = this9;
				if(!(!(Math.abs(lookAt.x - b.x) >= glm_GLM.EPSILON || Math.abs(lookAt.y - b.y) >= glm_GLM.EPSILON || Math.abs(lookAt.z - b.z) >= glm_GLM.EPSILON))) {
					var this10 = new glm_Vec3Base();
					this10.x = 0;
					this10.y = 0;
					this10.z = 0;
					var dest3 = this10;
					var length = Math.sqrt(lookAt.x * lookAt.x + lookAt.y * lookAt.y + lookAt.z * lookAt.z);
					var mult = 0;
					if(length >= glm_GLM.EPSILON) {
						mult = 1 / length;
					}
					dest3.x = lookAt.x * mult;
					dest3.y = lookAt.y * mult;
					dest3.z = lookAt.z * mult;
					lookAt = dest3;
				} else {
					lookAt = lookAt;
				}
				var this11 = new glm_Vec3Base();
				this11.x = 0.0;
				this11.y = 1.0;
				this11.z = 0.0;
				var this12 = new glm_Mat4Base();
				this12._00 = 0;
				this12._01 = 0;
				this12._02 = 0;
				this12._03 = 0;
				this12._10 = 0;
				this12._11 = 0;
				this12._12 = 0;
				this12._13 = 0;
				this12._20 = 0;
				this12._21 = 0;
				this12._22 = 0;
				this12._23 = 0;
				this12._30 = 0;
				this12._31 = 0;
				this12._32 = 0;
				this12._33 = 0;
				var matrix = glm_GLM.lookAt(position,lookAt,this11,this12);
				transform.set_matrix(matrix);
			}
			var diffuse = 1.0;
			var specular = 1.0;
			var x6 = aiDiffuseColor.x;
			var y6 = aiDiffuseColor.y;
			var z6 = aiDiffuseColor.z;
			var this13 = new glm_Vec3Base();
			this13.x = x6;
			this13.y = y6;
			this13.z = z6;
			var color = this13;
			var _g2 = aiLight.type;
			switch(_g2) {
			case 1:
				var dir = minko_component_DirectionalLight.create(diffuse,specular);
				dir.set_color(color);
				lightNode.addComponent(dir);
				break;
			case 2:
				var point = minko_component_PointLight.create(diffuse,specular,aiLight.attenuationConstant,aiLight.attenuationLinear,aiLight.attenuationQuadratic);
				point.set_color(color);
				lightNode.addComponent(point);
				break;
			case 3:
				var spot = minko_component_SpotLight.create(aiLight.angleInnerCone,aiLight.angleOuterCone,diffuse,specular,aiLight.attenuationConstant,aiLight.attenuationLinear,aiLight.attenuationQuadratic);
				spot.set_color(color);
				lightNode.addComponent(spot);
				break;
			default:
			}
		}
	}
	,findNode: function(name) {
		var _this = this._nameToNode;
		var foundNodeIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundNodeIt != false) {
			var _this1 = this._nameToNode;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,parseDependencies: function(filename,scene) {
		this._numDependencies = 0;
		var path = new assimp_format_AiMaterialTexture();
		var _g1 = 0;
		var _g = scene.numMaterials;
		while(_g1 < _g) {
			var materialId = _g1++;
			var aiMat = scene.materials[materialId];
			var textureType = minko_file_AbstractASSIMPParser._textureTypeToName.keys();
			while(textureType.hasNext()) {
				var textureType1 = textureType.next();
				var numTextures = aiMat.getMaterialTextureCount(textureType1);
				var _g3 = 0;
				var _g2 = numTextures;
				while(_g3 < _g2) {
					var textureId = _g3++;
					var texFound = aiMat.getMaterialTexture(textureType1,textureId,path);
					if(texFound) {
						var filename1 = path.file;
						if(filename1 == null) {
							continue;
						}
						var assetName = minko_file_File.removePrefixPathFromFilename(filename1);
						var _this = this._textureFilenameToAssetName;
						if(__map_reserved[filename1] != null) {
							_this.setReserved(filename1,assetName);
						} else {
							_this.h[filename1] = assetName;
						}
					}
				}
			}
		}
		this._numDependencies = Lambda.count(this._textureFilenameToAssetName);
		var filenameToAssetNamePair = this._textureFilenameToAssetName.keys();
		while(filenameToAssetNamePair.hasNext()) {
			var filenameToAssetNamePair1 = filenameToAssetNamePair.next();
			var _this1 = this._textureFilenameToAssetName;
			this.loadTexture(filenameToAssetNamePair1,__map_reserved[filenameToAssetNamePair1] != null ? _this1.getReserved(filenameToAssetNamePair1) : _this1.h[filenameToAssetNamePair1],this._options,scene);
		}
	}
	,finalize: function() {
		Lambda.iter(this._loaderCompleteSlots,function(l) {
			l.dispose();
		});
		Lambda.iter(this._loaderErrorSlots,function(l1) {
			l1.dispose();
		});
		this._loaderCompleteSlots = new haxe_ds_ObjectMap();
		this._loaderErrorSlots = new haxe_ds_ObjectMap();
		this._assetLibrary.setSymbol(this._filename,this._symbol);
		this.get_complete().execute(this);
	}
	,loadTexture: function(textureFilename,assetName,options,scene) {
		var _gthis = this;
		var textureParentPrefixPath = minko_file_File.extractPrefixPathFromFilename(this._resolvedFilename);
		var texturePrefixPath = minko_file_File.extractPrefixPathFromFilename(textureFilename);
		var loader = minko_file_Loader.create();
		loader.set_options(options.clone());
		loader.get_options().get_includePaths().push(textureParentPrefixPath + "/" + texturePrefixPath);
		this._loaderCompleteSlots.set(loader,loader.get_complete().connect(function(l) {
			_gthis.textureCompleteHandler(l,scene);
		}));
		this._loaderErrorSlots.set(loader,loader.get_error().connect(function(textureLoader,error) {
			++_gthis._numLoadedDependencies;
			_gthis._error.execute(_gthis,"MissingTextureDependency" + assetName);
			if(_gthis._numDependencies == _gthis._numLoadedDependencies) {
				_gthis.allDependenciesLoaded(scene);
			}
		}));
		loader.queue(assetName).load();
	}
	,LOG_DEBUG: function(arg) {
	}
	,textureCompleteHandler: function(loader,scene) {
		var arg = this._numLoadedDependencies + "/" + this._numDependencies + " texture(s) loaded";
		++this._numLoadedDependencies;
		if(this._numDependencies == this._numLoadedDependencies) {
			this.allDependenciesLoaded(scene);
		}
	}
	,getSkinNumFrames: function(aimesh) {
		var minkoMesh = this._aiMeshToNode.h[aimesh.__id__];
		var meshNode = minkoMesh.get_parent();
		var numFrames = 0;
		var _g1 = 0;
		var _g = aimesh.numBones;
		while(_g1 < _g) {
			var boneId = _g1++;
			var currentNode = this.findNode(aimesh.bones[boneId].name);
			while(currentNode != null) {
				var _this = this._nameToAnimMatrices;
				var key = currentNode.get_name();
				if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
					var _this1 = this._nameToAnimMatrices;
					var key1 = currentNode.get_name();
					var numNodeFrames = Lambda.count(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
					if(numFrames == 0) {
						numFrames = numNodeFrames;
					} else if(numFrames != numNodeFrames) {
						numFrames = Math.floor(Math.max(numFrames,numNodeFrames));
					}
				}
				currentNode = currentNode.get_parent();
				if(!(currentNode != meshNode)) {
					break;
				}
			}
		}
		return numFrames;
	}
	,createSkins: function(aiscene) {
		if(this._options.get_skinningFramerate() == 0) {
			return;
		}
		this.sampleAnimations(aiscene);
		var _g1 = 0;
		var _g = aiscene.numMeshes;
		while(_g1 < _g) {
			var meshId = _g1++;
			this.createSkin(aiscene.meshes[meshId]);
		}
	}
	,createSkin: function(aimesh) {
		if(aimesh == null || aimesh.numBones == 0) {
			return;
		}
		var meshName = aimesh.name;
		if(this._aiMeshToNode.h.__keys__[aimesh.__id__] == null) {
			return;
		}
		var supposedSkeletonRoot = this.getSkeletonRoot(aimesh);
		var meshNode = this._aiMeshToNode.h[aimesh.__id__];
		var numBones = aimesh.numBones;
		var numFrames = this.getSkinNumFrames(aimesh);
		if(numFrames == 0) {
			return;
		}
		var duration = Math.floor(1e+3 * numFrames / this._options.get_skinningFramerate()) | 0;
		var skin = minko_geometry_Skin.create(numBones,duration,numFrames);
		var skeletonRoot = this.getSkeletonRoot(aimesh);
		var boneTransforms_0 = [];
		var _g = [];
		var _g2 = 0;
		var _g1 = numFrames;
		while(_g2 < _g1) {
			var i = _g2++;
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			_g.push(this1);
		}
		var modelToRootMatrices = _g;
		var boneNodes = [];
		var _g21 = 0;
		var _g11 = numBones;
		while(_g21 < _g11) {
			var boneId = _g21++;
			var bone = this.createBone(aimesh.bones[boneId]);
			var boneName = aimesh.bones[boneId].name;
			var _this = this._nameToNode;
			var node = __map_reserved[boneName] != null ? _this.getReserved(boneName) : _this.h[boneName];
			boneNodes.push(node);
			if(bone == null) {
				return;
			}
			var boneOffsetMatrix = bone.get_offsetMatrix();
			this.precomputeModelToRootMatrices(node,skeletonRoot,modelToRootMatrices);
			skin.setBone(boneId,bone);
			var _g4 = 0;
			var _g3 = numFrames;
			while(_g4 < _g3) {
				var frameId = _g4++;
				var a = modelToRootMatrices[frameId];
				var this2 = new glm_Mat4Base();
				this2._00 = 0;
				this2._01 = 0;
				this2._02 = 0;
				this2._03 = 0;
				this2._10 = 0;
				this2._11 = 0;
				this2._12 = 0;
				this2._13 = 0;
				this2._20 = 0;
				this2._21 = 0;
				this2._22 = 0;
				this2._23 = 0;
				this2._30 = 0;
				this2._31 = 0;
				this2._32 = 0;
				this2._33 = 0;
				var dest = this2;
				var _a;
				var _b;
				if(dest == a) {
					var this3 = new glm_Mat4Base();
					this3._00 = 0;
					this3._01 = 0;
					this3._02 = 0;
					this3._03 = 0;
					this3._10 = 0;
					this3._11 = 0;
					this3._12 = 0;
					this3._13 = 0;
					this3._20 = 0;
					this3._21 = 0;
					this3._22 = 0;
					this3._23 = 0;
					this3._30 = 0;
					this3._31 = 0;
					this3._32 = 0;
					this3._33 = 0;
					var dest1 = this3;
					dest1._00 = a._00;
					dest1._10 = a._10;
					dest1._20 = a._20;
					dest1._30 = a._30;
					dest1._01 = a._01;
					dest1._11 = a._11;
					dest1._21 = a._21;
					dest1._31 = a._31;
					dest1._02 = a._02;
					dest1._12 = a._12;
					dest1._22 = a._22;
					dest1._32 = a._32;
					dest1._03 = a._03;
					dest1._13 = a._13;
					dest1._23 = a._23;
					dest1._33 = a._33;
					_a = dest1;
					_b = boneOffsetMatrix;
				} else if(dest == boneOffsetMatrix) {
					_a = a;
					var this4 = new glm_Mat4Base();
					this4._00 = 0;
					this4._01 = 0;
					this4._02 = 0;
					this4._03 = 0;
					this4._10 = 0;
					this4._11 = 0;
					this4._12 = 0;
					this4._13 = 0;
					this4._20 = 0;
					this4._21 = 0;
					this4._22 = 0;
					this4._23 = 0;
					this4._30 = 0;
					this4._31 = 0;
					this4._32 = 0;
					this4._33 = 0;
					var dest2 = this4;
					dest2._00 = boneOffsetMatrix._00;
					dest2._10 = boneOffsetMatrix._10;
					dest2._20 = boneOffsetMatrix._20;
					dest2._30 = boneOffsetMatrix._30;
					dest2._01 = boneOffsetMatrix._01;
					dest2._11 = boneOffsetMatrix._11;
					dest2._21 = boneOffsetMatrix._21;
					dest2._31 = boneOffsetMatrix._31;
					dest2._02 = boneOffsetMatrix._02;
					dest2._12 = boneOffsetMatrix._12;
					dest2._22 = boneOffsetMatrix._22;
					dest2._32 = boneOffsetMatrix._32;
					dest2._03 = boneOffsetMatrix._03;
					dest2._13 = boneOffsetMatrix._13;
					dest2._23 = boneOffsetMatrix._23;
					dest2._33 = boneOffsetMatrix._33;
					_b = dest2;
				} else {
					_a = a;
					_b = boneOffsetMatrix;
				}
				dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
				dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
				dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
				dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
				dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
				dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
				dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
				dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
				dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
				dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
				dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
				dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
				dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
				dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
				dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
				dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
				modelToRootMatrices[frameId] = dest;
				skin.setMatrix(frameId,boneId,modelToRootMatrices[frameId]);
			}
		}
		var slaves = [];
		var slaveAnimations = [];
		var _g22 = 0;
		var _g12 = numBones;
		while(_g22 < _g12) {
			var boneId1 = _g22++;
			var childrenWithSurface = minko_scene_NodeSet.createbyNode(boneNodes[boneId1]).descendants(true).where(function(n) {
				return n.hasComponent(minko_component_Surface);
			});
			slaves = slaves.concat(childrenWithSurface.get_nodes());
		}
		var _g13 = [];
		var _g31 = 0;
		var _g23 = numFrames;
		while(_g31 < _g23) {
			var i1 = _g31++;
			_g13.push(0);
		}
		var timetable = _g13;
		var _g32 = 0;
		var _g24 = numFrames;
		while(_g32 < _g24) {
			var i2 = _g32++;
			timetable[i2] = Math.floor(i2 * duration / (numFrames - 1)) | 0;
		}
		var _g25 = 0;
		while(_g25 < slaves.length) {
			var n1 = slaves[_g25];
			++_g25;
			var _g33 = [];
			var _g5 = 0;
			var _g41 = numFrames;
			while(_g5 < _g41) {
				var m = _g5++;
				var this5 = new glm_Mat4Base();
				this5._00 = 0;
				this5._01 = 0;
				this5._02 = 0;
				this5._03 = 0;
				this5._10 = 0;
				this5._11 = 0;
				this5._12 = 0;
				this5._13 = 0;
				this5._20 = 0;
				this5._21 = 0;
				this5._22 = 0;
				this5._23 = 0;
				this5._30 = 0;
				this5._31 = 0;
				this5._32 = 0;
				this5._33 = 0;
				_g33.push(this5);
			}
			var matrices = _g33;
			this.precomputeModelToRootMatrices(n1,skeletonRoot,matrices);
			var timeline = minko_animation_Matrix4x4Timeline.create(minko_file_AbstractASSIMPParser.PNAME_TRANSFORM,duration,timetable,matrices);
			var animation = minko_component_Animation.create([timeline]);
			n1.addComponent(animation);
			slaveAnimations.push(animation);
			this._alreadyAnimatedNodes.push(n1);
		}
		var skinning = minko_component_Skinning.create(skin.reorganizeByVertices(),this._options.get_skinningMethod(),this._assetLibrary.get_context(),skeletonRoot);
		meshNode.addComponent(skinning);
		console.log("skinned node: ");
		console.log(meshNode.get_name());
		console.log("\n");
		console.log("skinned node parent: ");
		console.log(meshNode.get_parent().get_name());
		console.log("\n");
		meshNode.addComponent(minko_component_MasterAnimation.create());
		var irrelevantTransformNodes = [];
		var _g26 = 0;
		while(_g26 < boneNodes.length) {
			var boneNode = boneNodes[_g26];
			++_g26;
			var boneNodeDescendants = minko_scene_NodeSet.createbyNode(boneNode).descendants(true).where(function(descendant) {
				return descendant.hasComponent(minko_component_Transform);
			});
			irrelevantTransformNodes = irrelevantTransformNodes.concat(boneNodeDescendants.get_nodes());
			var boneNodeParent = boneNode.get_parent();
			while(boneNodeParent != skeletonRoot) {
				irrelevantTransformNodes.push(boneNodeParent);
				boneNodeParent = boneNodeParent.get_parent();
			}
		}
		var animatedNodes = minko_scene_NodeSet.createbyNode(skeletonRoot).descendants(true).where(function(descendant1) {
			if(!descendant1.hasComponent(minko_component_Animation)) {
				return descendant1.hasComponent(minko_component_Skinning);
			} else {
				return true;
			}
		});
		var _g34 = 0;
		var _g27 = animatedNodes.get_nodes().length;
		while(_g34 < _g27) {
			var i3 = _g34++;
			var animatedNode = animatedNodes.get_nodes()[i3];
			var animatedNodeDescendants = minko_scene_NodeSet.createbyNode(animatedNode).descendants(true).where(function(animatedNodeDescendant) {
				return animatedNodeDescendant.hasComponent(minko_component_Transform);
			});
			irrelevantTransformNodes = irrelevantTransformNodes.concat(animatedNodeDescendants.get_nodes());
		}
		var _g28 = 0;
		while(_g28 < irrelevantTransformNodes.length) {
			var irrelevantTransformNode = irrelevantTransformNodes[_g28];
			++_g28;
			var transform = irrelevantTransformNode.getComponent(minko_component_Transform);
			var this6 = new glm_Mat4Base();
			this6._00 = 0;
			this6._01 = 0;
			this6._02 = 0;
			this6._03 = 0;
			this6._10 = 0;
			this6._11 = 0;
			this6._12 = 0;
			this6._13 = 0;
			this6._20 = 0;
			this6._21 = 0;
			this6._22 = 0;
			this6._23 = 0;
			this6._30 = 0;
			this6._31 = 0;
			this6._32 = 0;
			this6._33 = 0;
			transform.set_matrix(this6);
		}
	}
	,getSkeletonRoot: function(aimesh) {
		var skeletonRoot = null;
		var boneAncestor = this.getBoneCommonAncestor(aimesh);
		var currentNode = boneAncestor;
		while(currentNode != null) {
			var _this = this._nameToAnimMatrices;
			var key = currentNode.get_name();
			if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
				skeletonRoot = currentNode;
			}
			currentNode = currentNode.get_parent();
		}
		if(skeletonRoot != null) {
			if(skeletonRoot.get_parent() != null) {
				return skeletonRoot.get_parent();
			} else {
				return this._symbol;
			}
		} else {
			return boneAncestor;
		}
	}
	,getBoneCommonAncestor: function(aimesh) {
		if(aimesh != null && aimesh.numBones > 0) {
			var bonePath = [[]];
			var minDepth = 2147483647;
			var _g1 = 0;
			var _g = aimesh.numBones;
			while(_g1 < _g) {
				var boneId = _g1++;
				var boneNode = this.findNode(aimesh.bones[boneId].name);
				if(boneNode == null) {
					continue;
				}
				var tmp = [];
				bonePath.push(tmp);
				var currentNode = boneNode;
				while(currentNode != null) {
					tmp.push(currentNode);
					currentNode = currentNode.get_parent();
				}
				tmp.reverse();
				if(tmp.length < minDepth) {
					minDepth = tmp.length;
				}
			}
			if(bonePath.length == 0) {
				return this._symbol;
			}
			var _g11 = 0;
			var _g2 = minDepth;
			while(_g11 < _g2) {
				var d = _g11++;
				var node = bonePath[0][d];
				var isCommon = true;
				var boneId1 = 1;
				while(boneId1 < aimesh.numBones && isCommon) {
					if(bonePath[boneId1][d] != node) {
						isCommon = false;
						break;
					}
					++boneId1;
				}
				if(!isCommon) {
					if(d > 0) {
						return bonePath[0][d - 1];
					} else {
						return this._symbol;
					}
				}
			}
		}
		return this._symbol;
	}
	,precomputeModelToRootMatrices: function(node,root,modelToRootMatrices) {
		var transformsUpToRoot = [];
		var currentNode = node;
		while(currentNode != null) {
			var currentName = currentNode.get_name();
			var tmp = new minko_Tuple3(null,null,null);
			transformsUpToRoot.push(tmp);
			tmp.first = currentNode;
			tmp.second = null;
			tmp.thiree = null;
			var _this = this._nameToAnimMatrices;
			var foundAnimMatricesIt = __map_reserved[currentName] != null ? _this.existsReserved(currentName) : _this.h.hasOwnProperty(currentName);
			if(foundAnimMatricesIt != false) {
				var _this1 = this._nameToAnimMatrices;
				tmp.second = __map_reserved[currentName] != null ? _this1.getReserved(currentName) : _this1.h[currentName];
			} else if(currentNode.hasComponent(minko_component_Transform)) {
				var t = currentNode.getComponent(minko_component_Transform);
				tmp.thiree = t.get_matrix();
			}
			currentNode = currentNode.get_parent();
			if(!(currentNode != root)) {
				break;
			}
		}
		var numFrames = modelToRootMatrices.length;
		var _g1 = 0;
		var _g = numFrames;
		while(_g1 < _g) {
			var frameId = _g1++;
			var modelToRoot = modelToRootMatrices[frameId];
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			modelToRoot = this1;
			var _g2 = 0;
			while(_g2 < transformsUpToRoot.length) {
				var trfInfo = transformsUpToRoot[_g2];
				++_g2;
				var animMatrices = trfInfo.second;
				var matrix = trfInfo.thiree;
				if(animMatrices != null && animMatrices.length > 0) {
					var a = animMatrices[Math.floor(Math.min(frameId,animMatrices.length - 1))];
					var this2 = new glm_Mat4Base();
					this2._00 = 0;
					this2._01 = 0;
					this2._02 = 0;
					this2._03 = 0;
					this2._10 = 0;
					this2._11 = 0;
					this2._12 = 0;
					this2._13 = 0;
					this2._20 = 0;
					this2._21 = 0;
					this2._22 = 0;
					this2._23 = 0;
					this2._30 = 0;
					this2._31 = 0;
					this2._32 = 0;
					this2._33 = 0;
					var dest = this2;
					var _a;
					var _b;
					if(dest == a) {
						var this3 = new glm_Mat4Base();
						this3._00 = 0;
						this3._01 = 0;
						this3._02 = 0;
						this3._03 = 0;
						this3._10 = 0;
						this3._11 = 0;
						this3._12 = 0;
						this3._13 = 0;
						this3._20 = 0;
						this3._21 = 0;
						this3._22 = 0;
						this3._23 = 0;
						this3._30 = 0;
						this3._31 = 0;
						this3._32 = 0;
						this3._33 = 0;
						var dest1 = this3;
						dest1._00 = a._00;
						dest1._10 = a._10;
						dest1._20 = a._20;
						dest1._30 = a._30;
						dest1._01 = a._01;
						dest1._11 = a._11;
						dest1._21 = a._21;
						dest1._31 = a._31;
						dest1._02 = a._02;
						dest1._12 = a._12;
						dest1._22 = a._22;
						dest1._32 = a._32;
						dest1._03 = a._03;
						dest1._13 = a._13;
						dest1._23 = a._23;
						dest1._33 = a._33;
						_a = dest1;
						_b = modelToRoot;
					} else if(dest == modelToRoot) {
						_a = a;
						var this4 = new glm_Mat4Base();
						this4._00 = 0;
						this4._01 = 0;
						this4._02 = 0;
						this4._03 = 0;
						this4._10 = 0;
						this4._11 = 0;
						this4._12 = 0;
						this4._13 = 0;
						this4._20 = 0;
						this4._21 = 0;
						this4._22 = 0;
						this4._23 = 0;
						this4._30 = 0;
						this4._31 = 0;
						this4._32 = 0;
						this4._33 = 0;
						var dest2 = this4;
						dest2._00 = modelToRoot._00;
						dest2._10 = modelToRoot._10;
						dest2._20 = modelToRoot._20;
						dest2._30 = modelToRoot._30;
						dest2._01 = modelToRoot._01;
						dest2._11 = modelToRoot._11;
						dest2._21 = modelToRoot._21;
						dest2._31 = modelToRoot._31;
						dest2._02 = modelToRoot._02;
						dest2._12 = modelToRoot._12;
						dest2._22 = modelToRoot._22;
						dest2._32 = modelToRoot._32;
						dest2._03 = modelToRoot._03;
						dest2._13 = modelToRoot._13;
						dest2._23 = modelToRoot._23;
						dest2._33 = modelToRoot._33;
						_b = dest2;
					} else {
						_a = a;
						_b = modelToRoot;
					}
					dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
					dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
					dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
					dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
					dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
					dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
					dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
					dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
					dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
					dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
					dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
					dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
					dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
					dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
					dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
					dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
					modelToRoot = dest;
				} else if(matrix != null) {
					var this5 = new glm_Mat4Base();
					this5._00 = 0;
					this5._01 = 0;
					this5._02 = 0;
					this5._03 = 0;
					this5._10 = 0;
					this5._11 = 0;
					this5._12 = 0;
					this5._13 = 0;
					this5._20 = 0;
					this5._21 = 0;
					this5._22 = 0;
					this5._23 = 0;
					this5._30 = 0;
					this5._31 = 0;
					this5._32 = 0;
					this5._33 = 0;
					var dest3 = this5;
					var _a1;
					var _b1;
					if(dest3 == matrix) {
						var this6 = new glm_Mat4Base();
						this6._00 = 0;
						this6._01 = 0;
						this6._02 = 0;
						this6._03 = 0;
						this6._10 = 0;
						this6._11 = 0;
						this6._12 = 0;
						this6._13 = 0;
						this6._20 = 0;
						this6._21 = 0;
						this6._22 = 0;
						this6._23 = 0;
						this6._30 = 0;
						this6._31 = 0;
						this6._32 = 0;
						this6._33 = 0;
						var dest4 = this6;
						dest4._00 = matrix._00;
						dest4._10 = matrix._10;
						dest4._20 = matrix._20;
						dest4._30 = matrix._30;
						dest4._01 = matrix._01;
						dest4._11 = matrix._11;
						dest4._21 = matrix._21;
						dest4._31 = matrix._31;
						dest4._02 = matrix._02;
						dest4._12 = matrix._12;
						dest4._22 = matrix._22;
						dest4._32 = matrix._32;
						dest4._03 = matrix._03;
						dest4._13 = matrix._13;
						dest4._23 = matrix._23;
						dest4._33 = matrix._33;
						_a1 = dest4;
						_b1 = modelToRoot;
					} else if(dest3 == modelToRoot) {
						_a1 = matrix;
						var this7 = new glm_Mat4Base();
						this7._00 = 0;
						this7._01 = 0;
						this7._02 = 0;
						this7._03 = 0;
						this7._10 = 0;
						this7._11 = 0;
						this7._12 = 0;
						this7._13 = 0;
						this7._20 = 0;
						this7._21 = 0;
						this7._22 = 0;
						this7._23 = 0;
						this7._30 = 0;
						this7._31 = 0;
						this7._32 = 0;
						this7._33 = 0;
						var dest5 = this7;
						dest5._00 = modelToRoot._00;
						dest5._10 = modelToRoot._10;
						dest5._20 = modelToRoot._20;
						dest5._30 = modelToRoot._30;
						dest5._01 = modelToRoot._01;
						dest5._11 = modelToRoot._11;
						dest5._21 = modelToRoot._21;
						dest5._31 = modelToRoot._31;
						dest5._02 = modelToRoot._02;
						dest5._12 = modelToRoot._12;
						dest5._22 = modelToRoot._22;
						dest5._32 = modelToRoot._32;
						dest5._03 = modelToRoot._03;
						dest5._13 = modelToRoot._13;
						dest5._23 = modelToRoot._23;
						dest5._33 = modelToRoot._33;
						_b1 = dest5;
					} else {
						_a1 = matrix;
						_b1 = modelToRoot;
					}
					dest3._00 = _a1._00 * _b1._00 + _a1._10 * _b1._01 + _a1._20 * _b1._02 + _a1._30 * _b1._03;
					dest3._10 = _a1._00 * _b1._10 + _a1._10 * _b1._11 + _a1._20 * _b1._12 + _a1._30 * _b1._13;
					dest3._20 = _a1._00 * _b1._20 + _a1._10 * _b1._21 + _a1._20 * _b1._22 + _a1._30 * _b1._23;
					dest3._30 = _a1._00 * _b1._30 + _a1._10 * _b1._31 + _a1._20 * _b1._32 + _a1._30 * _b1._33;
					dest3._01 = _a1._01 * _b1._00 + _a1._11 * _b1._01 + _a1._21 * _b1._02 + _a1._31 * _b1._03;
					dest3._11 = _a1._01 * _b1._10 + _a1._11 * _b1._11 + _a1._21 * _b1._12 + _a1._31 * _b1._13;
					dest3._21 = _a1._01 * _b1._20 + _a1._11 * _b1._21 + _a1._21 * _b1._22 + _a1._31 * _b1._23;
					dest3._31 = _a1._01 * _b1._30 + _a1._11 * _b1._31 + _a1._21 * _b1._32 + _a1._31 * _b1._33;
					dest3._02 = _a1._02 * _b1._00 + _a1._12 * _b1._01 + _a1._22 * _b1._02 + _a1._32 * _b1._03;
					dest3._12 = _a1._02 * _b1._10 + _a1._12 * _b1._11 + _a1._22 * _b1._12 + _a1._32 * _b1._13;
					dest3._22 = _a1._02 * _b1._20 + _a1._12 * _b1._21 + _a1._22 * _b1._22 + _a1._32 * _b1._23;
					dest3._32 = _a1._02 * _b1._30 + _a1._12 * _b1._31 + _a1._22 * _b1._32 + _a1._32 * _b1._33;
					dest3._03 = _a1._03 * _b1._00 + _a1._13 * _b1._01 + _a1._23 * _b1._02 + _a1._33 * _b1._03;
					dest3._13 = _a1._03 * _b1._10 + _a1._13 * _b1._11 + _a1._23 * _b1._12 + _a1._33 * _b1._13;
					dest3._23 = _a1._03 * _b1._20 + _a1._13 * _b1._21 + _a1._23 * _b1._22 + _a1._33 * _b1._23;
					dest3._33 = _a1._03 * _b1._30 + _a1._13 * _b1._31 + _a1._23 * _b1._32 + _a1._33 * _b1._33;
					modelToRoot = dest3;
				}
			}
		}
	}
	,createBone: function(aibone) {
		var boneName = aibone.name;
		var tmp;
		if(aibone != null) {
			var _this = this._nameToNode;
			tmp = (__map_reserved[boneName] != null ? _this.existsReserved(boneName) : _this.h.hasOwnProperty(boneName)) == false;
		} else {
			tmp = true;
		}
		if(tmp) {
			return null;
		}
		var offsetMatrix = aibone.offsetMatrix;
		var _g = [];
		var _g2 = 0;
		var _g1 = aibone.numWeights;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0);
		}
		var boneVertexIds = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g21 = aibone.numWeights;
		while(_g3 < _g21) {
			var i1 = _g3++;
			_g11.push(0.0);
		}
		var boneVertexWeights = _g11;
		var _g31 = 0;
		var _g22 = aibone.numWeights;
		while(_g31 < _g22) {
			var i2 = _g31++;
			boneVertexIds[i2] = aibone.weights[i2].vertexId;
			boneVertexWeights[i2] = aibone.weights[i2].weight;
		}
		var _this1 = this._nameToNode;
		return minko_geometry_Bone.create(__map_reserved[boneName] != null ? _this1.getReserved(boneName) : _this1.h[boneName],offsetMatrix,boneVertexIds,boneVertexWeights);
	}
	,sampleAnimations: function(scene) {
		this._nameToAnimMatrices = new haxe_ds_StringMap();
		if(scene == null) {
			return;
		}
		var _g1 = 0;
		var _g = scene.numAnimations;
		while(_g1 < _g) {
			var animId = _g1++;
			this.sampleAnimation(scene.animations[animId]);
		}
	}
	,sampleAnimation: function(animation) {
		if(animation == null || animation.ticksPerSecond < 1e-6 || this._options.get_skinningFramerate() == 0) {
			return;
		}
		var numFrames = Math.floor(this._options.get_skinningFramerate() * animation.duration / animation.ticksPerSecond) | 0;
		if(numFrames < 2) {
			numFrames = 2;
		} else {
			numFrames = numFrames;
		}
		var timeStep = animation.duration / (numFrames - 1);
		var _g = [];
		var _g2 = 0;
		var _g1 = numFrames;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0.0);
		}
		var sampleTimes = _g;
		var _g21 = 1;
		var _g11 = numFrames;
		while(_g21 < _g11) {
			var frameId = _g21++;
			sampleTimes[frameId] = sampleTimes[frameId - 1] + timeStep;
		}
		var _g22 = 0;
		var _g12 = animation.numChannels;
		while(_g22 < _g12) {
			var channelId = _g22++;
			var nodeAnimation = animation.channels[channelId];
			var nodeName = nodeAnimation.nodeName;
			if(nodeName != null) {
				var _this = this._nameToAnimMatrices;
				var value = [];
				if(__map_reserved[nodeName] != null) {
					_this.setReserved(nodeName,value);
				} else {
					_this.h[nodeName] = value;
				}
				var _this1 = this._nameToAnimMatrices;
				this.sample(nodeAnimation,sampleTimes,__map_reserved[nodeName] != null ? _this1.getReserved(nodeName) : _this1.h[nodeName]);
			}
		}
	}
	,sample: function(nodeAnimation,times,matrices) {
		var sample_position;
		var sample_scaling;
		var sample_rotation;
		var sample_rotationMatrix;
		var positionKeyTimeFactors = [];
		var rotationKeyTimeFactors = [];
		var scalingKeyTimeFactors = [];
		var numKeys = nodeAnimation.numPositionKeys;
		var keys = nodeAnimation.positionKeys;
		if(!(numKeys == 0 || keys == null)) {
			var _g1 = 0;
			var _g = numKeys - 1;
			while(_g1 < _g) {
				var keyId = _g1++;
				positionKeyTimeFactors[keyId] = 1.0 / (keys[keyId + 1].time - keys[keyId].time + 1e-6);
			}
			positionKeyTimeFactors[positionKeyTimeFactors.length - 1] = 1.0;
		}
		var numKeys1 = nodeAnimation.numRotationKeys;
		var keys1 = nodeAnimation.rotationKeys;
		if(!(numKeys1 == 0 || keys1 == null)) {
			var _g11 = 0;
			var _g2 = numKeys1 - 1;
			while(_g11 < _g2) {
				var keyId1 = _g11++;
				rotationKeyTimeFactors[keyId1] = 1.0 / (keys1[keyId1 + 1].time - keys1[keyId1].time + 1e-6);
			}
			rotationKeyTimeFactors[rotationKeyTimeFactors.length - 1] = 1.0;
		}
		var numKeys2 = nodeAnimation.numScalingKeys;
		var keys2 = nodeAnimation.scalingKeys;
		if(!(numKeys2 == 0 || keys2 == null)) {
			var _g12 = 0;
			var _g3 = numKeys2 - 1;
			while(_g12 < _g3) {
				var keyId2 = _g12++;
				scalingKeyTimeFactors[keyId2] = 1.0 / (keys2[keyId2 + 1].time - keys2[keyId2].time + 1e-6);
			}
			scalingKeyTimeFactors[scalingKeyTimeFactors.length - 1] = 1.0;
		}
		var _g13 = 0;
		var _g4 = times.length;
		while(_g13 < _g4) {
			var frameId = _g13++;
			var time = times[frameId];
			sample_position = this.sampleVec3(nodeAnimation.positionKeys,positionKeyTimeFactors,time);
			sample_rotation = this.sampleQuat(nodeAnimation.rotationKeys,rotationKeyTimeFactors,time);
			var this1 = new glm_QuatBase();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this1.w = 1;
			var dest = this1;
			var length = Math.sqrt(sample_rotation.x * sample_rotation.x + sample_rotation.y * sample_rotation.y + sample_rotation.z * sample_rotation.z + sample_rotation.w * sample_rotation.w);
			var mult = 0;
			if(length >= glm_GLM.EPSILON) {
				mult = 1 / length;
			}
			dest.x = sample_rotation.x * mult;
			dest.y = sample_rotation.y * mult;
			dest.z = sample_rotation.z * mult;
			dest.w = sample_rotation.w * mult;
			sample_rotation = dest;
			if(Math.sqrt(sample_rotation.x * sample_rotation.x + sample_rotation.y * sample_rotation.y + sample_rotation.z * sample_rotation.z + sample_rotation.w * sample_rotation.w) == 0.0) {
				var this2 = new glm_Mat3Base();
				this2._00 = 0;
				this2._01 = 0;
				this2._02 = 0;
				this2._10 = 0;
				this2._11 = 0;
				this2._12 = 0;
				this2._20 = 0;
				this2._21 = 0;
				this2._22 = 0;
				sample_rotationMatrix = this2;
			} else {
				sample_rotationMatrix = assimp_format_Defs.getMatrix(sample_rotation);
			}
			sample_scaling = this.sampleVec3(nodeAnimation.scalingKeys,scalingKeyTimeFactors,time);
			var _r0c0 = sample_scaling.x * sample_rotationMatrix._00;
			var _r0c1 = sample_scaling.y * sample_rotationMatrix._10;
			var _r0c2 = sample_scaling.z * sample_rotationMatrix._20;
			var _r1c0 = sample_scaling.x * sample_rotationMatrix._01;
			var _r1c1 = sample_scaling.y * sample_rotationMatrix._11;
			var _r1c2 = sample_scaling.z * sample_rotationMatrix._21;
			var _r2c0 = sample_scaling.x * sample_rotationMatrix._02;
			var _r2c1 = sample_scaling.y * sample_rotationMatrix._12;
			var _r2c2 = sample_scaling.z * sample_rotationMatrix._22;
			var _r3c0 = sample_position.x;
			var _r3c1 = sample_position.y;
			var _r3c2 = sample_position.z;
			var this3 = new glm_Mat4Base();
			this3._00 = _r0c0;
			this3._01 = _r1c0;
			this3._02 = _r2c0;
			this3._03 = _r3c0;
			this3._10 = _r0c1;
			this3._11 = _r1c1;
			this3._12 = _r2c1;
			this3._13 = _r3c1;
			this3._20 = _r0c2;
			this3._21 = _r1c2;
			this3._22 = _r2c2;
			this3._23 = _r3c2;
			this3._30 = 0.0;
			this3._31 = 0.0;
			this3._32 = 0.0;
			this3._33 = 1.0;
			matrices[frameId] = this3;
		}
	}
	,sampleVec3: function(keys,keyTimeFactors,time) {
		var this1 = new glm_Vec3Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		var output = this1;
		var numKeys = keyTimeFactors.length;
		var id;
		if(numKeys == 0 || keys == null) {
			id = 0;
		} else {
			var id1 = 0;
			var lowerId = 0;
			var upperId = numKeys - 1;
			while(upperId - lowerId > 1) {
				id1 = lowerId + upperId >> 1;
				if(keys[id1].time > time) {
					upperId = id1;
				} else {
					lowerId = id1;
				}
			}
			id = lowerId;
		}
		var value0 = keys[id].value;
		if(id == numKeys - 1) {
			var x = value0.x;
			var y = value0.y;
			var z = value0.z;
			var this2 = new glm_Vec3Base();
			this2.x = x;
			this2.y = y;
			this2.z = z;
			output = this2;
		} else {
			var w1 = (time - keys[id].time) * keyTimeFactors[id];
			var w0 = 1.0 - w1;
			var value1 = keys[id + 1].value;
			var x1 = w0 * value0.x + w1 * value1.x;
			var y1 = w0 * value0.y + w1 * value1.y;
			var z1 = w0 * value0.z + w1 * value1.z;
			var this3 = new glm_Vec3Base();
			this3.x = x1;
			this3.y = y1;
			this3.z = z1;
			output = this3;
		}
		return output;
	}
	,sampleQuat: function(keys,keyTimeFactors,time) {
		var this1 = new glm_QuatBase();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 1;
		var output = this1;
		var numKeys = keyTimeFactors.length;
		var id;
		if(numKeys == 0 || keys == null) {
			id = 0;
		} else {
			var id1 = 0;
			var lowerId = 0;
			var upperId = numKeys - 1;
			while(upperId - lowerId > 1) {
				id1 = lowerId + upperId >> 1;
				if(keys[id1].time > time) {
					upperId = id1;
				} else {
					lowerId = id1;
				}
			}
			id = lowerId;
		}
		var value0 = keys[id].value;
		if(id == numKeys - 1) {
			var x = value0.w;
			var y = value0.x;
			var z = value0.y;
			var w = value0.z;
			var this2 = new glm_QuatBase();
			this2.x = x;
			this2.y = y;
			this2.z = z;
			this2.w = w;
			output = this2;
		} else {
			var w1 = (time - keys[id].time) * keyTimeFactors[id];
			var w0 = 1.0 - w1;
			var value1 = keys[id + 1].value;
			var interp = assimp_format_Defs.slerp(value0,value1,w1);
			output = interp;
		}
		return output;
	}
	,computeTimeFactors: function(numKeys,keys,keyTimeFactors) {
		if(numKeys == 0 || keys == null) {
			return;
		}
		var _g1 = 0;
		var _g = numKeys - 1;
		while(_g1 < _g) {
			var keyId = _g1++;
			keyTimeFactors[keyId] = 1.0 / (keys[keyId + 1].time - keys[keyId].time + 1e-6);
		}
		keyTimeFactors[keyTimeFactors.length - 1] = 1.0;
	}
	,getIndexForTime: function(numKeys,keys,time) {
		if(numKeys == 0 || keys == null) {
			return 0;
		}
		var id = 0;
		var lowerId = 0;
		var upperId = numKeys - 1;
		while(upperId - lowerId > 1) {
			id = lowerId + upperId >> 1;
			if(keys[id].time > time) {
				upperId = id;
			} else {
				lowerId = id;
			}
		}
		return lowerId;
	}
	,createMaterial: function(aiMat) {
		var existingMaterial = this._aiMaterialToMaterial.h.__keys__[aiMat.__id__] != null;
		if(existingMaterial != false) {
			return this._aiMaterialToMaterial.h[aiMat.__id__];
		}
		var material = this.chooseMaterialByShadingMode(aiMat);
		if(aiMat == null) {
			return material;
		}
		var materialName = "";
		var rawMaterialName = "";
		if(aiMat.hasProperty(assimp_format_AiMatKeys.NAME)) {
			rawMaterialName = aiMat.getProperty(assimp_format_AiMatKeys.NAME).getStringValue();
			materialName = rawMaterialName;
		}
		materialName = this.getMaterialName(materialName);
		var blendingMode = this.getBlendingMode(aiMat);
		var srcBlendingMode = blendingMode & 255;
		var dstBlendingMode = blendingMode & 65280;
		material.get_data().set("blendingMode",blendingMode);
		material.get_data().set("blendingSource",srcBlendingMode);
		material.get_data().set("blendingDestination",dstBlendingMode);
		material.get_data().set("triangleCulling",this.getTriangleCulling(aiMat));
		material.get_data().set("wireframe",this.getWireframe(aiMat));
		if((blendingMode & 256) == 0) {
			material.get_data().set("priority",minko_render__$Priority_Priority_$Impl_$.TRANSPARENT);
			material.get_data().set("zSorted",true);
		} else {
			material.get_data().set("priority",minko_render__$Priority_Priority_$Impl_$.OPAQUE);
			material.get_data().set("zSorted",false);
		}
		var opacity = this.setScalarProperty(material,"opacity",aiMat,assimp_format_AiMatKeys.OPACITY,1.0);
		var shininess = this.setScalarProperty(material,"shininess",aiMat,assimp_format_AiMatKeys.SHININESS,0.0);
		var reflectivity = this.setScalarProperty(material,"reflectivity",aiMat,assimp_format_AiMatKeys.REFLECTIVITY,1.0);
		var shininessStr = this.setScalarProperty(material,"shininessStrength",aiMat,assimp_format_AiMatKeys.SHININESS_STRENGTH,1.0);
		var refractiveIdx = this.setScalarProperty(material,"refractiveIndex",aiMat,assimp_format_AiMatKeys.REFRACTI,1.0);
		var bumpScaling = this.setScalarProperty(material,"bumpScaling",aiMat,assimp_format_AiMatKeys.BUMPSCALING,1.0);
		var diffuseColor = assimp_format_AiMatKeys.COLOR_DIFFUSE;
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var diffuseColor1 = this.setColorProperty(material,"diffuseColor",aiMat,diffuseColor,this1);
		var specularColor = assimp_format_AiMatKeys.COLOR_SPECULAR;
		var this2 = new glm_Vec4Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		this2.w = 0;
		var specularColor1 = this.setColorProperty(material,"specularColor",aiMat,specularColor,this2);
		var ambientColor = assimp_format_AiMatKeys.COLOR_AMBIENT;
		var this3 = new glm_Vec4Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		this3.w = 0;
		var ambientColor1 = this.setColorProperty(material,"ambientColor",aiMat,ambientColor,this3);
		var emissiveColor = assimp_format_AiMatKeys.COLOR_EMISSIVE;
		var this4 = new glm_Vec4Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		this4.w = 0;
		var emissiveColor1 = this.setColorProperty(material,"emissiveColor",aiMat,emissiveColor,this4);
		var reflectiveColor = assimp_format_AiMatKeys.COLOR_REFLECTIVE;
		var this5 = new glm_Vec4Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		this5.w = 0;
		var reflectiveColor1 = this.setColorProperty(material,"reflectiveColor",aiMat,reflectiveColor,this5);
		var transparentColor = assimp_format_AiMatKeys.COLOR_TRANSPARENT;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var transparentColor1 = this.setColorProperty(material,"transparentColor",aiMat,transparentColor,this6);
		var epsilon = 0.1;
		var hasSpecular;
		var hasSpecular1;
		var hasSpecular2;
		var this7 = new glm_Vec4Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		this7.w = 0;
		var b = this7;
		if(!(!(Math.abs(specularColor1.x - b.x) >= glm_GLM.EPSILON || Math.abs(specularColor1.y - b.y) >= glm_GLM.EPSILON || Math.abs(specularColor1.z - b.z) >= glm_GLM.EPSILON || Math.abs(specularColor1.w - b.w) >= glm_GLM.EPSILON))) {
			hasSpecular2 = specularColor1.w > 0.0;
		} else {
			hasSpecular2 = false;
		}
		if(!hasSpecular2) {
			hasSpecular1 = aiMat.getMaterialTextureCount(2) >= 1;
		} else {
			hasSpecular1 = true;
		}
		if(hasSpecular1) {
			hasSpecular = shininess > 1.0 + epsilon;
		} else {
			hasSpecular = false;
		}
		if(!hasSpecular) {
			material.get_data().unset("shininess");
			specularColor1.w = 0.0;
		}
		var transparent = opacity > 0.0 && opacity < 1.0;
		if(transparent) {
			diffuseColor1.w = opacity;
			if(hasSpecular) {
				specularColor1.w = opacity;
			}
			ambientColor1.w = opacity;
			emissiveColor1.w = opacity;
			reflectiveColor1.w = opacity;
			transparentColor1.w = opacity;
			material.get_data().set("diffuseColor",diffuseColor1);
			if(hasSpecular) {
				material.get_data().set("specularColor",specularColor1);
			}
			material.get_data().set("ambientColor",ambientColor1);
			material.get_data().set("emissiveColor",emissiveColor1);
			material.get_data().set("reflectiveColor",reflectiveColor1);
			material.get_data().set("transparentColor",transparentColor1);
			this.enableTransparency(material);
		}
		var textureType = minko_file_AbstractASSIMPParser._textureTypeToName.keys();
		while(textureType.hasNext()) {
			var textureType1 = textureType.next();
			var textureName = minko_file_AbstractASSIMPParser._textureTypeToName.h[textureType1];
			var numTextures = aiMat.getMaterialTextureCount(textureType1);
			if(numTextures == 0) {
				continue;
			}
			var path = new assimp_format_AiMaterialTexture();
			if(aiMat.getMaterialTexture(textureType1,0,path)) {
				var textureFilename = path.file;
				var _this = this._textureFilenameToAssetName;
				var textureAssetNameIt = __map_reserved[textureFilename] != null ? _this.existsReserved(textureFilename) : _this.h.hasOwnProperty(textureFilename);
				if(textureAssetNameIt == false) {
					continue;
				}
				var _this1 = this._textureFilenameToAssetName;
				var textureAssetName = __map_reserved[textureFilename] != null ? _this1.getReserved(textureFilename) : _this1.h[textureFilename];
				var texture = this._assetLibrary.texture(textureAssetName);
				var textureIsValid = texture != null;
				texture = (this._options.get_textureFunction())(textureAssetName,texture);
				if(!textureIsValid && texture != null) {
					this._assetLibrary.setTexture(textureAssetName,texture);
				}
				if(texture != null) {
					material.get_data().set(textureName,texture.get_sampler());
					this.textureSet(material,textureName,texture);
				}
			}
		}
		var createMaterial_materialNameId = 0;
		var uniqueMaterialName = materialName;
		while(this._assetLibrary.material(uniqueMaterialName) != null) uniqueMaterialName = materialName + "_" + createMaterial_materialNameId++;
		material.get_data().set("name",uniqueMaterialName);
		var processedMaterial = (this._options.get_materialFunction())(uniqueMaterialName,material);
		this._aiMaterialToMaterial.set(aiMat,processedMaterial);
		this._assetLibrary.setMaterial(uniqueMaterialName,processedMaterial);
		return processedMaterial;
	}
	,LOG_ERROR: function(arg) {
	}
	,textureSet: function(material,textureTypeName,texture) {
		if(textureTypeName == minko_file_AbstractASSIMPParser._textureTypeToName.h[8]) {
			this.enableTransparency(material);
			if(!material.get_data().hasProperty("alphaThreshold")) {
				material.get_data().set("alphaThreshold",.5);
			}
		}
	}
	,chooseMaterialByShadingMode: function(aiMat) {
		if(aiMat == null || this._options.get_material() != null) {
			return minko_material_Material.createbyMaterial(this._options.get_material());
		}
		if(aiMat.hasProperty(assimp_format_AiMatKeys.SHADING_MODEL)) {
			var shadingMode = aiMat.getProperty(assimp_format_AiMatKeys.SHADING_MODEL).getIntegerValue();
			switch(shadingMode) {
			case 1:
				return minko_material_BasicMaterial.create();
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:
				return minko_material_PhongMaterial.create();
			default:
				return minko_material_Material.createbyMaterial(this._options.get_material());
			}
		} else {
			return minko_material_Material.createbyMaterial(this._options.get_material());
		}
	}
	,chooseEffectByShadingMode: function(aiMat) {
		var effect = this._options.get_effect();
		if(effect == null && aiMat != null) {
			if(aiMat.hasProperty(assimp_format_AiMatKeys.SHADING_MODEL)) {
				var shadingMode = aiMat.getProperty(assimp_format_AiMatKeys.SHADING_MODEL).getIntegerValue();
				switch(shadingMode) {
				case 1:
					break;
				case 2:
					break;
				case 3:
					break;
				case 4:
					break;
				case 5:
					break;
				case 6:
					break;
				case 7:
					if(this._assetLibrary.effect("effect/Basic.effect") != null) {
						effect = this._assetLibrary.effect("effect/Basic.effect");
					}
					break;
				case 8:
					break;
				case 9:
					break;
				case 10:
					if(this._assetLibrary.effect("effect/Phong.effect") != null) {
						effect = this._assetLibrary.effect("effect/Phong.effect");
					}
					break;
				default:
				}
			}
		}
		return (this._options.get_effectFunction())(effect);
	}
	,getBlendingMode: function(aiMat) {
		var blendMode;
		if(aiMat != null && aiMat.hasProperty(assimp_format_AiMatKeys.BLEND_FUNC)) {
			blendMode = aiMat.getProperty(assimp_format_AiMatKeys.BLEND_FUNC).getIntegerValue();
			switch(blendMode) {
			case 0:
				return 16 | 8192;
			case 1:
				return 16 | 512;
			default:
				return 2 | 256;
			}
		} else {
			return 2 | 256;
		}
	}
	,getTriangleCulling: function(aiMat) {
		var twoSided;
		if(aiMat != null && aiMat.hasProperty(assimp_format_AiMatKeys.TWOSIDED)) {
			twoSided = aiMat.getProperty(assimp_format_AiMatKeys.TWOSIDED).getIntegerValue();
			if(twoSided == 0) {
				return 0;
			} else {
				return 2;
			}
		} else {
			return 2;
		}
	}
	,getWireframe: function(aiMat) {
		var wireframe = 0;
		if(aiMat != null && aiMat.hasProperty(assimp_format_AiMatKeys.TWOSIDED)) {
			wireframe = aiMat.getProperty(assimp_format_AiMatKeys.TWOSIDED).getIntegerValue();
		}
		return wireframe != 0;
	}
	,setColorProperty: function(material,propertyName,aiMat,aiMatKeyName,defaultValue) {
		var this1 = new glm_Vec4Base();
		this1.x = 0;
		this1.y = 0;
		this1.z = 0;
		this1.w = 0;
		var color = this1;
		color.x = defaultValue.x;
		color.y = defaultValue.y;
		color.z = defaultValue.z;
		color.w = defaultValue.w;
		var ret = aiMat.getProperty(aiMatKeyName).getColor4DValue();
		var tmp = material.get_data();
		var x = color.x;
		var y = color.y;
		var z = color.z;
		var w = color.w;
		var this2 = new glm_Vec4Base();
		this2.x = x;
		this2.y = y;
		this2.z = z;
		this2.w = w;
		tmp.set(propertyName,this2);
		return material.get_data().get(propertyName);
	}
	,setScalarProperty: function(material,propertyName,aiMat,aiMatKeyName,defaultValue) {
		var scalar = defaultValue;
		if(aiMat != null && aiMat.hasProperty(aiMatKeyName)) {
			scalar = aiMat.getProperty(aiMatKeyName).getFloatValue();
		}
		material.get_data().set(propertyName,scalar);
		return material.get_data().get(propertyName);
	}
	,createAnimations: function(scene,interpolate) {
		if(scene.numAnimations == 0) {
			return;
		}
		this.sampleAnimations(scene);
		if(Lambda.empty(this._nameToAnimMatrices)) {
			return;
		}
		var nodeToTimelines = new haxe_ds_ObjectMap();
		var nameToMatricesPair = this._nameToAnimMatrices.keys();
		while(nameToMatricesPair.hasNext()) {
			var nameToMatricesPair1 = nameToMatricesPair.next();
			var _this = this._nameToNode;
			var node = __map_reserved[nameToMatricesPair1] != null ? _this.getReserved(nameToMatricesPair1) : _this.h[nameToMatricesPair1];
			nodeToTimelines.set(node,[]);
		}
		var nameToMatricesPair2 = this._nameToAnimMatrices.keys();
		while(nameToMatricesPair2.hasNext()) {
			var nameToMatricesPair3 = nameToMatricesPair2.next();
			var _this1 = this._nameToNode;
			var node1 = __map_reserved[nameToMatricesPair3] != null ? _this1.getReserved(nameToMatricesPair3) : _this1.h[nameToMatricesPair3];
			var ainode = this._nodeToAiNode.h[node1.__id__];
			var aiParentNode = ainode;
			var isSkinned = false;
			while(aiParentNode != null && !isSkinned) {
				var _g1 = 0;
				var _g = aiParentNode.numMeshes;
				while(_g1 < _g) {
					var i = _g1++;
					var meshId = aiParentNode.meshes[i];
					if(!isSkinned) {
						isSkinned = scene.meshes[meshId].numBones > 0;
					} else {
						isSkinned = true;
					}
				}
				aiParentNode = aiParentNode.parent;
			}
			if(isSkinned) {
				continue;
			}
			var _this2 = this._nameToAnimMatrices;
			var matrices = __map_reserved[nameToMatricesPair3] != null ? _this2.getReserved(nameToMatricesPair3) : _this2.h[nameToMatricesPair3];
			var numFrames = matrices.length;
			var duration = numFrames * this._options.get_skinningFramerate();
			var _g2 = [];
			var _g21 = 0;
			var _g11 = numFrames;
			while(_g21 < _g11) {
				var i1 = _g21++;
				_g2.push(0);
			}
			var timetable = _g2;
			var timeStep = duration / (numFrames - 1);
			var _g22 = 1;
			var _g12 = numFrames;
			while(_g22 < _g12) {
				var frameId = _g22++;
				timetable[frameId] = timetable[frameId - 1] + timeStep | 0;
			}
			nodeToTimelines.h[node1.__id__].push(minko_animation_Matrix4x4Timeline.create(minko_file_AbstractASSIMPParser.PNAME_TRANSFORM,duration,timetable,matrices,interpolate));
		}
		var _this3 = this._nameToNode;
		var key = this._nameToAnimMatrices.keys().next();
		var animationRootNode = (__map_reserved[key] != null ? _this3.getReserved(key) : _this3.h[key]).get_root();
		var nodeAndTimelines = nodeToTimelines.keys();
		while(nodeAndTimelines.hasNext()) {
			var nodeAndTimelines1 = nodeAndTimelines.next();
			nodeAndTimelines1.addComponent(minko_component_Animation.create(nodeToTimelines.h[nodeAndTimelines1.__id__]));
		}
		if(!animationRootNode.hasComponent(minko_component_MasterAnimation)) {
			animationRootNode.addComponent(minko_component_MasterAnimation.create());
		}
	}
	,enableTransparency: function(material) {
		material.get_data().set("priority",minko_render__$Priority_Priority_$Impl_$.TRANSPARENT);
		material.get_data().set("zSorted",true);
		var blendingMode = 16 | 8192;
		var srcBlendingMode = blendingMode & 255;
		var dstBlendingMode = blendingMode & 65280;
		material.get_data().set("blendingMode",blendingMode);
		material.get_data().set("blendingSource",srcBlendingMode);
		material.get_data().set("blendingDestination",dstBlendingMode);
	}
	,__class__: minko_file_AbstractASSIMPParser
});
var minko_file_ASSIMPParser = function() {
	minko_file_AbstractASSIMPParser.call(this);
};
minko_file_ASSIMPParser.__name__ = true;
minko_file_ASSIMPParser.__super__ = minko_file_AbstractASSIMPParser;
minko_file_ASSIMPParser.prototype = $extend(minko_file_AbstractASSIMPParser.prototype,{
	__class__: minko_file_ASSIMPParser
});
var minko_file_AbstractAssetDescriptor = $hx_exports["minko"]["file"]["AbstractAssetDescriptor"] = function() {
};
minko_file_AbstractAssetDescriptor.__name__ = true;
minko_file_AbstractAssetDescriptor.prototype = {
	get_location: function() {
		return null;
	}
	,set_location: function(l) {
		return null;
	}
	,dispose: function() {
	}
	,__class__: minko_file_AbstractAssetDescriptor
};
var minko_file_AbstractProtocol = $hx_exports["minko"]["file"]["AbstractProtocol"] = function() {
	this._file = minko_file_File.create();
	this._options = minko_file_Options.empty();
	this._complete = new minko_signal_Signal();
	this._progress = new minko_signal_Signal2();
	this._error = new minko_signal_Signal2();
};
minko_file_AbstractProtocol.__name__ = true;
minko_file_AbstractProtocol.create = function() {
	return new minko_file_AbstractProtocol();
};
minko_file_AbstractProtocol.prototype = {
	dispose: function() {
	}
	,get_file: function() {
		return this._file;
	}
	,get_options: function() {
		return this._options;
	}
	,set_options: function(v) {
		this._options = v;
		return v;
	}
	,get_complete: function() {
		return this._complete;
	}
	,get_progress: function() {
		return this._progress;
	}
	,get_error: function() {
		return this._error;
	}
	,loadFile: function(filename,resolvedFilename,options) {
		this._options = options;
		this._file.set_filename(filename);
		this._file.set_resolvedFilename(resolvedFilename);
		this.load();
	}
	,load: function() {
	}
	,fileExists: function(filename) {
		return false;
	}
	,isAbsolutePath: function(filename) {
		return false;
	}
	,get_resolvedFilename: function() {
		return this._file._resolvedFilename;
	}
	,get_data: function() {
		return this._file._data;
	}
	,set_data: function(d) {
		this._file._data = d;
		return d;
	}
	,__class__: minko_file_AbstractProtocol
};
var minko_file_AssetLibrary = $hx_exports["minko"]["file"]["AssetLibrary"] = function(context) {
	this._context = context;
	this._loader = minko_file_Loader.create();
	this._materials = new haxe_ds_StringMap();
	this._geometries = new haxe_ds_StringMap();
	this._effects = new haxe_ds_StringMap();
	this._textures = new haxe_ds_StringMap();
	this._cubeTextures = new haxe_ds_StringMap();
	this._rectangleTextures = new haxe_ds_StringMap();
	this._symbols = new haxe_ds_StringMap();
	this._blobs = new haxe_ds_StringMap();
	this._scripts = new haxe_ds_StringMap();
	this._layouts = new haxe_ds_StringMap();
	this._sounds = new haxe_ds_StringMap();
	this._assetDescriptors = new haxe_ds_StringMap();
	this._parserError = new minko_signal_Signal2();
	this._ready = new minko_signal_Signal();
};
minko_file_AssetLibrary.__name__ = true;
minko_file_AssetLibrary.create = function(context) {
	var al = new minko_file_AssetLibrary(context);
	al._loader.get_options().set_context(context);
	al._loader.get_options().set_assetLibrary(al);
	return al;
};
minko_file_AssetLibrary.createbyAssetLibrary = function(original) {
	var al = minko_file_AssetLibrary.create(original._context);
	var it = original._materials.keys();
	while(it.hasNext()) {
		var it1 = it.next();
		var _this = al._materials;
		var _this1 = original._materials;
		var value = __map_reserved[it1] != null ? _this1.getReserved(it1) : _this1.h[it1];
		if(__map_reserved[it1] != null) {
			_this.setReserved(it1,value);
		} else {
			_this.h[it1] = value;
		}
	}
	var it2 = original._geometries.keys();
	while(it2.hasNext()) {
		var it3 = it2.next();
		var _this2 = al._geometries;
		var _this3 = original._geometries;
		var value1 = __map_reserved[it3] != null ? _this3.getReserved(it3) : _this3.h[it3];
		if(__map_reserved[it3] != null) {
			_this2.setReserved(it3,value1);
		} else {
			_this2.h[it3] = value1;
		}
	}
	var it4 = original._effects.keys();
	while(it4.hasNext()) {
		var it5 = it4.next();
		var _this4 = al._effects;
		var _this5 = original._effects;
		var value2 = __map_reserved[it5] != null ? _this5.getReserved(it5) : _this5.h[it5];
		if(__map_reserved[it5] != null) {
			_this4.setReserved(it5,value2);
		} else {
			_this4.h[it5] = value2;
		}
	}
	var it6 = original._textures.keys();
	while(it6.hasNext()) {
		var it7 = it6.next();
		var _this6 = al._textures;
		var _this7 = original._textures;
		var value3 = __map_reserved[it7] != null ? _this7.getReserved(it7) : _this7.h[it7];
		if(__map_reserved[it7] != null) {
			_this6.setReserved(it7,value3);
		} else {
			_this6.h[it7] = value3;
		}
	}
	var it8 = original._cubeTextures.keys();
	while(it8.hasNext()) {
		var it9 = it8.next();
		var _this8 = al._cubeTextures;
		var _this9 = original._cubeTextures;
		var value4 = __map_reserved[it9] != null ? _this9.getReserved(it9) : _this9.h[it9];
		if(__map_reserved[it9] != null) {
			_this8.setReserved(it9,value4);
		} else {
			_this8.h[it9] = value4;
		}
	}
	var it10 = original._rectangleTextures.keys();
	while(it10.hasNext()) {
		var it11 = it10.next();
		var _this10 = al._rectangleTextures;
		var _this11 = original._rectangleTextures;
		var value5 = __map_reserved[it11] != null ? _this11.getReserved(it11) : _this11.h[it11];
		if(__map_reserved[it11] != null) {
			_this10.setReserved(it11,value5);
		} else {
			_this10.h[it11] = value5;
		}
	}
	var it12 = original._symbols.keys();
	while(it12.hasNext()) {
		var it13 = it12.next();
		var _this12 = al._symbols;
		var _this13 = original._symbols;
		var value6 = __map_reserved[it13] != null ? _this13.getReserved(it13) : _this13.h[it13];
		if(__map_reserved[it13] != null) {
			_this12.setReserved(it13,value6);
		} else {
			_this12.h[it13] = value6;
		}
	}
	var it14 = original._blobs.keys();
	while(it14.hasNext()) {
		var it15 = it14.next();
		var _this14 = al._blobs;
		var _this15 = original._blobs;
		var value7 = __map_reserved[it15] != null ? _this15.getReserved(it15) : _this15.h[it15];
		if(__map_reserved[it15] != null) {
			_this14.setReserved(it15,value7);
		} else {
			_this14.h[it15] = value7;
		}
	}
	var it16 = original._scripts.keys();
	while(it16.hasNext()) {
		var it17 = it16.next();
		var _this16 = al._scripts;
		var _this17 = original._scripts;
		var value8 = __map_reserved[it17] != null ? _this17.getReserved(it17) : _this17.h[it17];
		if(__map_reserved[it17] != null) {
			_this16.setReserved(it17,value8);
		} else {
			_this16.h[it17] = value8;
		}
	}
	var it18 = original._layouts.keys();
	while(it18.hasNext()) {
		var it19 = it18.next();
		var _this18 = al._layouts;
		var _this19 = original._layouts;
		var value9 = __map_reserved[it19] != null ? _this19.getReserved(it19) : _this19.h[it19];
		if(__map_reserved[it19] != null) {
			_this18.setReserved(it19,value9);
		} else {
			_this18.h[it19] = value9;
		}
	}
	var it20 = original._assetDescriptors.keys();
	while(it20.hasNext()) {
		var it21 = it20.next();
		var _this20 = al._assetDescriptors;
		var _this21 = original._assetDescriptors;
		var value10 = __map_reserved[it21] != null ? _this21.getReserved(it21) : _this21.h[it21];
		if(__map_reserved[it21] != null) {
			_this20.setReserved(it21,value10);
		} else {
			_this20.h[it21] = value10;
		}
	}
	return al;
};
minko_file_AssetLibrary.prototype = {
	get_numGeometries: function() {
		return Lambda.count(this._geometries);
	}
	,get_numMaterials: function() {
		return Lambda.count(this._materials);
	}
	,get_numEffects: function() {
		return Lambda.count(this._effects);
	}
	,get_numTextures: function() {
		return Lambda.count(this._textures);
	}
	,get_context: function() {
		return this._context;
	}
	,get_loader: function() {
		return this._loader;
	}
	,disposeLoader: function() {
		this._loader = null;
	}
	,geometry: function(name) {
		var _this = this._geometries;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._geometries;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setGeometry: function(name,geometry) {
		var tempname = name;
		var _this = this._geometries;
		if(__map_reserved[tempname] != null ? _this.existsReserved(tempname) : _this.h.hasOwnProperty(tempname)) {
			tempname = tempname + "_" + this.get_numGeometries();
		}
		var _this1 = this._geometries;
		if(__map_reserved[tempname] != null) {
			_this1.setReserved(tempname,geometry);
		} else {
			_this1.h[tempname] = geometry;
		}
		return this;
	}
	,geometryName: function(geometry) {
		var it = this._geometries.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._geometries;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == geometry) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this geometry.");
	}
	,texture: function(name) {
		var _this = this._textures;
		var foundTextureIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundTextureIt) {
			var _this1 = this._textures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setTexture: function(name,texture) {
		var _this = this._textures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return this;
	}
	,getTextureByUuid: function(uuid,failIfNotReady) {
		var it = Lambda.find(this._textures,function(t) {
			if(t.get_sampler().uuid == uuid) {
				if(!(!failIfNotReady)) {
					return t.get_isReady();
				} else {
					return true;
				}
			} else {
				return false;
			}
		});
		return it;
	}
	,cubeTexture: function(name) {
		var _this = this._cubeTextures;
		var foundTextureIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundTextureIt) {
			var _this1 = this._cubeTextures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setCubeTexture: function(name,texture) {
		var _this = this._cubeTextures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return this;
	}
	,rectangleTexture: function(name) {
		var _this = this._rectangleTextures;
		var foundTextureIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundTextureIt) {
			var _this1 = this._rectangleTextures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setRectangleTexture: function(name,texture) {
		var _this = this._rectangleTextures;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return this;
	}
	,textureName: function(texture) {
		var it = this._textures.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._textures;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == texture) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this texture.");
	}
	,symbol: function(name) {
		var _this = this._symbols;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._symbols;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setSymbol: function(name,node) {
		var _this = this._symbols;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,node);
		} else {
			_this.h[name] = node;
		}
		return this;
	}
	,symbolName: function(node) {
		var it = this._symbols.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._symbols;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == node) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this symbol.");
	}
	,material: function(name) {
		var _this = this._materials;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._materials;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setMaterial: function(name,material) {
		var mat = material;
		var _this = this._materials;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,material);
		} else {
			_this.h[name] = material;
		}
		return this;
	}
	,materialName: function(material) {
		var it = this._materials.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._materials;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == material) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this material.");
	}
	,effect: function(name) {
		var _this = this._effects;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._effects;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setEffect: function(name,effect) {
		var _this = this._effects;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,effect);
		} else {
			_this.h[name] = effect;
		}
		return this;
	}
	,effectName: function(effect) {
		var it = this._effects.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._effects;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == effect) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this effect.");
	}
	,hasBlob: function(name) {
		var _this = this._blobs;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,blob: function(name) {
		var _this = this._blobs;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			throw new js__$Boot_HaxeError("");
		}
		var _this1 = this._blobs;
		if(__map_reserved[name] != null) {
			return _this1.getReserved(name);
		} else {
			return _this1.h[name];
		}
	}
	,setBlob: function(name,blob) {
		var _this = this._blobs;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,blob);
		} else {
			_this.h[name] = blob;
		}
		return this;
	}
	,script: function(name) {
		var _this = this._scripts;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._scripts;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setScript: function(name,script) {
		var _this = this._scripts;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,script);
		} else {
			_this.h[name] = script;
		}
		return this;
	}
	,scriptName: function(script) {
		var it = this._scripts.keys();
		while(it.hasNext()) {
			var it1 = it.next();
			var _this = this._scripts;
			var itr = __map_reserved[it1] != null ? _this.getReserved(it1) : _this.h[it1];
			if(itr == script) {
				return it1;
			}
		}
		throw new js__$Boot_HaxeError("AssetLibrary does not reference this script.");
	}
	,layout: function(name) {
		var _this = this._layouts;
		if((__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) == false) {
			var existingMask = 0;
			var layout = this._layouts.keys();
			while(layout.hasNext()) {
				var layout1 = layout.next();
				var _this1 = this._layouts;
				existingMask |= __map_reserved[layout1] != null ? _this1.getReserved(layout1) : _this1.h[layout1];
			}
			var mask = 1;
			var i = 0;
			while(i < 32 && (existingMask & mask) == 1) {
				++i;
				mask <<= 1;
				continue;
			}
			if(mask == 0) {
				throw new js__$Boot_HaxeError("");
			}
			var _this2 = this._layouts;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,mask);
			} else {
				_this2.h[name] = mask;
			}
		}
		var _this3 = this._layouts;
		if(__map_reserved[name] != null) {
			return _this3.getReserved(name);
		} else {
			return _this3.h[name];
		}
	}
	,setLayout: function(name,mask) {
		var _this = this._layouts;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,mask);
		} else {
			_this.h[name] = mask;
		}
		return this;
	}
	,sound: function(name) {
		var _this = this._sounds;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,setSound: function(name,sound) {
		var _this = this._sounds;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,sound);
		} else {
			_this.h[name] = sound;
		}
		return this;
	}
	,assetDescriptor: function(name) {
		var _this = this._assetDescriptors;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this._assetDescriptors;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			return null;
		}
	}
	,setAssetDescriptor: function(name,assetDescriptor) {
		var _this = this._assetDescriptors;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,assetDescriptor);
		} else {
			_this.h[name] = assetDescriptor;
		}
		return this;
	}
	,__class__: minko_file_AssetLibrary
};
var minko_file_AssetLocation = $hx_exports["minko"]["file"]["AssetLocation"] = function(filename,offset,length) {
	this.filename = filename;
	this.offset = offset;
	this.length = length;
};
minko_file_AssetLocation.__name__ = true;
minko_file_AssetLocation.prototype = {
	__class__: minko_file_AssetLocation
};
var minko_file_GLSLBlockTree = $hx_exports["minko"]["file"]["GLSLBlockTree"] = function(n) {
	this.leaf = [];
	this.node = n;
};
minko_file_GLSLBlockTree.__name__ = true;
minko_file_GLSLBlockTree.prototype = {
	__class__: minko_file_GLSLBlockTree
};
var minko_file_Block = $hx_exports["minko"]["file"]["Block"] = function() {
};
minko_file_Block.__name__ = true;
minko_file_Block.prototype = {
	dispose: function() {
	}
	,__class__: minko_file_Block
};
var minko_file_AttributeBlock = $hx_exports["minko"]["file"]["AttributeBlock"] = function() {
	minko_file_Block.call(this);
	this.bindingMap = new minko_data_BindingMapBase();
};
minko_file_AttributeBlock.__name__ = true;
minko_file_AttributeBlock.__super__ = minko_file_Block;
minko_file_AttributeBlock.prototype = $extend(minko_file_Block.prototype,{
	copyFrom: function(s) {
		minko_data_BindingMapBase.copyFrom(this.bindingMap,s.bindingMap);
		return this;
	}
	,__class__: minko_file_AttributeBlock
});
var minko_file_MacroBlock = $hx_exports["minko"]["file"]["MacroBlock"] = function() {
	minko_file_Block.call(this);
	this.bindingMap = new minko_data_MacroBindingMap();
};
minko_file_MacroBlock.__name__ = true;
minko_file_MacroBlock.__super__ = minko_file_Block;
minko_file_MacroBlock.prototype = $extend(minko_file_Block.prototype,{
	copyFrom: function(s) {
		minko_data_MacroBindingMap.copyFrom2(this.bindingMap,s.bindingMap);
		return this;
	}
	,__class__: minko_file_MacroBlock
});
var minko_file_UniformBlock = $hx_exports["minko"]["file"]["UniformBlock"] = function() {
	minko_file_Block.call(this);
	this.bindingMap = new minko_data_BindingMapBase();
};
minko_file_UniformBlock.__name__ = true;
minko_file_UniformBlock.__super__ = minko_file_Block;
minko_file_UniformBlock.prototype = $extend(minko_file_Block.prototype,{
	copyFrom: function(s) {
		minko_data_BindingMapBase.copyFrom(this.bindingMap,s.bindingMap);
		return this;
	}
	,__class__: minko_file_UniformBlock
});
var minko_file_StateBlock = $hx_exports["minko"]["file"]["StateBlock"] = function() {
	minko_file_Block.call(this);
	this.bindingMap = new minko_data_BindingMapBase();
	this.states = new minko_render_States();
	this.states.set_priority(minko_render_States.UNSET_PRIORITY_VALUE);
	this.bindingMap.defaultValues.addProvider(this.states.get_data());
};
minko_file_StateBlock.__name__ = true;
minko_file_StateBlock.__super__ = minko_file_Block;
minko_file_StateBlock.prototype = $extend(minko_file_Block.prototype,{
	copyFrom: function(s) {
		minko_data_BindingMapBase.copyFrom(this.bindingMap,s.bindingMap);
		this.states = new minko_render_States().copyFrom(s.states);
		console.log("this.states = new States().copyFrom(s.states);");
		console.log(this.states);
		this.bindingMap.defaultValues.removeProvider(this.bindingMap.defaultValues.get_providers()[0]);
		this.bindingMap.defaultValues.addProvider(this.states.get_data());
		return this;
	}
	,__class__: minko_file_StateBlock
});
var minko_file_Scope = $hx_exports["minko"]["file"]["Scope"] = function() {
	this.parent = null;
	this.children = [];
	this.attributeBlock = new minko_file_AttributeBlock();
	this.uniformBlock = new minko_file_UniformBlock();
	this.stateBlock = new minko_file_StateBlock();
	this.macroBlock = new minko_file_MacroBlock();
	this.defaultTechnique = "";
	this.passes = [];
	this.techniques = new haxe_ds_StringMap();
};
minko_file_Scope.__name__ = true;
minko_file_Scope.prototype = {
	copyFrom: function(scope) {
		this.parent = scope.parent;
		this.children = [];
		this.attributeBlock.copyFrom(scope.attributeBlock);
		this.uniformBlock.copyFrom(scope.uniformBlock);
		this.stateBlock = new minko_file_StateBlock().copyFrom(scope.stateBlock);
		this.macroBlock.copyFrom(scope.macroBlock);
		this.defaultTechnique = scope.defaultTechnique;
		this.passes = scope.passes.concat([]);
		this.techniques = scope.techniques;
		return this;
	}
	,copyFromParent: function(scope,parent) {
		this.copyFrom(scope);
		this.parent = parent;
		parent.children.push(this);
		return this;
	}
	,__class__: minko_file_Scope
};
var minko_render__$Priority_Priority_$Impl_$ = $hx_exports["minko"]["render"]["Priority"] = {};
minko_render__$Priority_Priority_$Impl_$.__name__ = true;
var minko_file_EffectParser = $hx_exports["minko"]["file"]["EffectParser"] = function() {
	minko_file_AbstractParser.call(this);
	this._effect = null;
	this._numDependencies = 0;
	this._numLoadedDependencies = 0;
	this._effectData = minko_data_Provider.create();
	this._filename = "";
	this._resolvedFilename = "";
	this._options = null;
	this._effectName = "";
	this._assetLibrary = null;
	this._globalScope = new minko_file_Scope();
	this._shaderToGLSL = new haxe_ds_ObjectMap();
	this._loaderCompleteSlots = new haxe_ds_ObjectMap();
	this._loaderErrorSlots = new haxe_ds_ObjectMap();
};
minko_file_EffectParser.__name__ = true;
minko_file_EffectParser.initialize_blendingSourceMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 1;
	if(__map_reserved["zero"] != null) {
		tmp.setReserved("zero",value);
	} else {
		tmp.h["zero"] = value;
	}
	var value1 = 2;
	if(__map_reserved["one"] != null) {
		tmp.setReserved("one",value1);
	} else {
		tmp.h["one"] = value1;
	}
	var value2 = 4;
	if(__map_reserved["color"] != null) {
		tmp.setReserved("color",value2);
	} else {
		tmp.h["color"] = value2;
	}
	var value3 = 8;
	if(__map_reserved["one_minus_src_color"] != null) {
		tmp.setReserved("one_minus_src_color",value3);
	} else {
		tmp.h["one_minus_src_color"] = value3;
	}
	var value4 = 16;
	if(__map_reserved["src_alpha"] != null) {
		tmp.setReserved("src_alpha",value4);
	} else {
		tmp.h["src_alpha"] = value4;
	}
	var value5 = 32;
	if(__map_reserved["one_minus_src_alpha"] != null) {
		tmp.setReserved("one_minus_src_alpha",value5);
	} else {
		tmp.h["one_minus_src_alpha"] = value5;
	}
	var value6 = 64;
	if(__map_reserved["dst_alpha"] != null) {
		tmp.setReserved("dst_alpha",value6);
	} else {
		tmp.h["dst_alpha"] = value6;
	}
	var value7 = 128;
	if(__map_reserved["one_minus_dst_alpha"] != null) {
		tmp.setReserved("one_minus_dst_alpha",value7);
	} else {
		tmp.h["one_minus_dst_alpha"] = value7;
	}
	return tmp;
};
minko_file_EffectParser.initialize_blendingDestinationMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 256;
	if(__map_reserved["zero"] != null) {
		tmp.setReserved("zero",value);
	} else {
		tmp.h["zero"] = value;
	}
	var value1 = 512;
	if(__map_reserved["one"] != null) {
		tmp.setReserved("one",value1);
	} else {
		tmp.h["one"] = value1;
	}
	var value2 = 1024;
	if(__map_reserved["dst_color"] != null) {
		tmp.setReserved("dst_color",value2);
	} else {
		tmp.h["dst_color"] = value2;
	}
	var value3 = 2048;
	if(__map_reserved["one_minus_dst_color"] != null) {
		tmp.setReserved("one_minus_dst_color",value3);
	} else {
		tmp.h["one_minus_dst_color"] = value3;
	}
	var value4 = 4096;
	if(__map_reserved["src_alpha_saturate"] != null) {
		tmp.setReserved("src_alpha_saturate",value4);
	} else {
		tmp.h["src_alpha_saturate"] = value4;
	}
	var value5 = 8192;
	if(__map_reserved["one_minus_src_alpha"] != null) {
		tmp.setReserved("one_minus_src_alpha",value5);
	} else {
		tmp.h["one_minus_src_alpha"] = value5;
	}
	var value6 = 16384;
	if(__map_reserved["dst_alpha"] != null) {
		tmp.setReserved("dst_alpha",value6);
	} else {
		tmp.h["dst_alpha"] = value6;
	}
	var value7 = 32768;
	if(__map_reserved["one_minus_dst_alpha"] != null) {
		tmp.setReserved("one_minus_dst_alpha",value7);
	} else {
		tmp.h["one_minus_dst_alpha"] = value7;
	}
	return tmp;
};
minko_file_EffectParser.initialize_blendingModeMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 2 | 256;
	if(__map_reserved["default"] != null) {
		tmp.setReserved("default",value);
	} else {
		tmp.h["default"] = value;
	}
	var value1 = 16 | 8192;
	if(__map_reserved["alpha"] != null) {
		tmp.setReserved("alpha",value1);
	} else {
		tmp.h["alpha"] = value1;
	}
	var value2 = 16 | 512;
	if(__map_reserved["additive"] != null) {
		tmp.setReserved("additive",value2);
	} else {
		tmp.h["additive"] = value2;
	}
	return tmp;
};
minko_file_EffectParser.initialize_compareFuncMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 0;
	if(__map_reserved["always"] != null) {
		tmp.setReserved("always",value);
	} else {
		tmp.h["always"] = value;
	}
	var value1 = 1;
	if(__map_reserved["equal"] != null) {
		tmp.setReserved("equal",value1);
	} else {
		tmp.h["equal"] = value1;
	}
	var value2 = 2;
	if(__map_reserved["greater"] != null) {
		tmp.setReserved("greater",value2);
	} else {
		tmp.h["greater"] = value2;
	}
	var value3 = 3;
	if(__map_reserved["greater_equal"] != null) {
		tmp.setReserved("greater_equal",value3);
	} else {
		tmp.h["greater_equal"] = value3;
	}
	var value4 = 4;
	if(__map_reserved["less"] != null) {
		tmp.setReserved("less",value4);
	} else {
		tmp.h["less"] = value4;
	}
	var value5 = 5;
	if(__map_reserved["less_equal"] != null) {
		tmp.setReserved("less_equal",value5);
	} else {
		tmp.h["less_equal"] = value5;
	}
	var value6 = 6;
	if(__map_reserved["never"] != null) {
		tmp.setReserved("never",value6);
	} else {
		tmp.h["never"] = value6;
	}
	var value7 = 7;
	if(__map_reserved["not_equal"] != null) {
		tmp.setReserved("not_equal",value7);
	} else {
		tmp.h["not_equal"] = value7;
	}
	return tmp;
};
minko_file_EffectParser.initialize_triangleCullingMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 0;
	if(__map_reserved["none"] != null) {
		tmp.setReserved("none",value);
	} else {
		tmp.h["none"] = value;
	}
	var value1 = 1;
	if(__map_reserved["front"] != null) {
		tmp.setReserved("front",value1);
	} else {
		tmp.h["front"] = value1;
	}
	var value2 = 2;
	if(__map_reserved["back"] != null) {
		tmp.setReserved("back",value2);
	} else {
		tmp.h["back"] = value2;
	}
	var value3 = 3;
	if(__map_reserved["both"] != null) {
		tmp.setReserved("both",value3);
	} else {
		tmp.h["both"] = value3;
	}
	return tmp;
};
minko_file_EffectParser.initialize_stencilOpMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = 0;
	if(__map_reserved["keep"] != null) {
		tmp.setReserved("keep",value);
	} else {
		tmp.h["keep"] = value;
	}
	var value1 = 1;
	if(__map_reserved["zero"] != null) {
		tmp.setReserved("zero",value1);
	} else {
		tmp.h["zero"] = value1;
	}
	var value2 = 2;
	if(__map_reserved["replace"] != null) {
		tmp.setReserved("replace",value2);
	} else {
		tmp.h["replace"] = value2;
	}
	var value3 = 3;
	if(__map_reserved["incr"] != null) {
		tmp.setReserved("incr",value3);
	} else {
		tmp.h["incr"] = value3;
	}
	var value4 = 4;
	if(__map_reserved["incr_wrap"] != null) {
		tmp.setReserved("incr_wrap",value4);
	} else {
		tmp.h["incr_wrap"] = value4;
	}
	var value5 = 5;
	if(__map_reserved["decr"] != null) {
		tmp.setReserved("decr",value5);
	} else {
		tmp.h["decr"] = value5;
	}
	var value6 = 6;
	if(__map_reserved["decr_wrap"] != null) {
		tmp.setReserved("decr_wrap",value6);
	} else {
		tmp.h["decr_wrap"] = value6;
	}
	var value7 = 7;
	if(__map_reserved["invert"] != null) {
		tmp.setReserved("invert",value7);
	} else {
		tmp.h["invert"] = value7;
	}
	return tmp;
};
minko_file_EffectParser.initialize_priorityMap = function() {
	var tmp = new haxe_ds_StringMap();
	var value = minko_render__$Priority_Priority_$Impl_$.FIRST;
	if(__map_reserved["first"] != null) {
		tmp.setReserved("first",value);
	} else {
		tmp.h["first"] = value;
	}
	var value1 = minko_render__$Priority_Priority_$Impl_$.BACKGROUND;
	if(__map_reserved["background"] != null) {
		tmp.setReserved("background",value1);
	} else {
		tmp.h["background"] = value1;
	}
	var value2 = minko_render__$Priority_Priority_$Impl_$.OPAQUE;
	if(__map_reserved["opaque"] != null) {
		tmp.setReserved("opaque",value2);
	} else {
		tmp.h["opaque"] = value2;
	}
	var value3 = minko_render__$Priority_Priority_$Impl_$.TRANSPARENT;
	if(__map_reserved["transparent"] != null) {
		tmp.setReserved("transparent",value3);
	} else {
		tmp.h["transparent"] = value3;
	}
	var value4 = minko_render__$Priority_Priority_$Impl_$.LAST;
	if(__map_reserved["last"] != null) {
		tmp.setReserved("last",value4);
	} else {
		tmp.h["last"] = value4;
	}
	return tmp;
};
minko_file_EffectParser.create = function() {
	return new minko_file_EffectParser();
};
minko_file_EffectParser.__super__ = minko_file_AbstractParser;
minko_file_EffectParser.prototype = $extend(minko_file_AbstractParser.prototype,{
	get_effect: function() {
		return this._effect;
	}
	,get_effectName: function() {
		return this._effectName;
	}
	,isDynamic: function(o) {
		if(!((o instanceof Array) && o.__enum__ == null) && !(typeof(o) == "number" && ((o | 0) === o)) && typeof(o) != "number" && typeof(o) != "string" && typeof(o) != "boolean") {
			return o != null;
		} else {
			return false;
		}
	}
	,parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var root = { };
		var tempData = data.getString(0,data.length);
		try {
			root = new haxe_format_JsonParser(tempData).parseRec();
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				this._error.execute(this,resolvedFilename + ": " + e);
			} else throw(e);
		}
		this._options = options.clone();
		var pos = resolvedFilename.lastIndexOf("/");
		if(pos == -1) {
			pos = resolvedFilename.lastIndexOf("\\");
		}
		if(pos != -1) {
			this._options = this._options.clone();
			this._options.set_includePaths([]);
			this._options.get_includePaths().push(HxOverrides.substr(resolvedFilename,0,pos));
		}
		this._filename = filename;
		this._resolvedFilename = resolvedFilename;
		this._assetLibrary = assetLibrary;
		if(Object.prototype.hasOwnProperty.call(root,"name")) {
			this._effectName = Reflect.field(root,"name");
		} else {
			this._effectName = filename;
		}
		this.parseGlobalScope(root,this._globalScope);
		this._effect = minko_render_Effect.create(this._effectName);
		if(this._numDependencies == this._numLoadedDependencies && this._effect != null) {
			this.finalize();
		}
	}
	,getPriorityValue: function(name) {
		var _this = minko_file_EffectParser._priorityMap;
		var foundPriorityIt = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		if(foundPriorityIt) {
			var _this1 = minko_file_EffectParser._priorityMap;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			var _this2 = minko_file_EffectParser._priorityMap;
			if(__map_reserved["opaque"] != null) {
				return _this2.getReserved("opaque");
			} else {
				return _this2.h["opaque"];
			}
		}
	}
	,parseGlobalScope: function(node,scope) {
		this.parseAttributes(node,scope,scope.attributeBlock);
		this.parseUniforms(node,scope,scope.uniformBlock);
		this.parseMacros(node,scope,scope.macroBlock);
		this.parseStates(node,scope,scope.stateBlock);
		this.parsePasses(node,scope,scope.passes);
		this.parseTechniques(node,scope,scope.techniques);
	}
	,parseConfiguration: function(node) {
		var confValue = Reflect.field(node,"configuration");
		var platforms = this._options.get_platforms();
		var userFlags = this._options.get_userFlags();
		var r = false;
		if((confValue instanceof Array) && confValue.__enum__ == null) {
			var tmps = confValue;
			var _g = 0;
			while(_g < tmps.length) {
				var value = tmps[_g];
				++_g;
				if(typeof(value) == "string" && Lambda.has(platforms,value) || Lambda.has(userFlags,value)) {
					return true;
				} else if((value instanceof Array) && value.__enum__ == null) {
					var tmp = value;
					var _g1 = 0;
					while(_g1 < tmp.length) {
						var str = tmp[_g1];
						++_g1;
						if(typeof(str) == "string" && Lambda.has(platforms,str) || Lambda.has(userFlags,str)) {
							r = r;
							break;
						}
					}
				}
			}
		} else {
			return true;
		}
		return r;
	}
	,fixMissingPassPriorities: function(passes) {
		var numPasses = passes.length;
		var passOne = passes[0];
		if(numPasses == 1) {
			if(passOne.get_states().get_priority() == minko_render_States.UNSET_PRIORITY_VALUE) {
				passOne.get_states().set_priority(minko_render_States.DEFAULT_PRIORITY);
			}
		} else {
			var _g1 = 0;
			var _g = numPasses;
			while(_g1 < _g) {
				var i = _g1++;
				var pass = passes[i];
				if(pass.get_states().get_priority() == minko_render_States.UNSET_PRIORITY_VALUE) {
					var nextPassWithPriority = i + 1;
					while(nextPassWithPriority < numPasses && passes[nextPassWithPriority].get_states().get_priority() == minko_render_States.UNSET_PRIORITY_VALUE) ++nextPassWithPriority;
					if(nextPassWithPriority >= numPasses) {
						pass.get_states().set_priority(minko_render_States.DEFAULT_PRIORITY + (numPasses - i - 1));
					} else {
						pass.get_states().set_priority(nextPassWithPriority - i + passes[nextPassWithPriority].get_states().get_priority());
					}
				}
			}
		}
	}
	,parseTechniques: function(node,scope,techniques) {
		var techniquesNode = Reflect.field(node,"techniques");
		if((techniquesNode instanceof Array) && techniquesNode.__enum__ == null) {
			var tmp = techniquesNode;
			var _g = 0;
			while(_g < tmp.length) {
				var techniqueNode = tmp[_g];
				++_g;
				if(!this.parseConfiguration(techniqueNode)) {
					continue;
				}
				var techniqueNameNode = Reflect.field(techniqueNode,"name");
				var techniqueName = "";
				if(typeof(techniqueNameNode) == "string") {
					techniqueName = js_Boot.__cast(techniqueNameNode , String);
				} else if((techniqueNameNode instanceof Array) && techniqueNameNode.__enum__ == null) {
					var tmp1 = techniqueNameNode;
					if(tmp1.length == 1) {
						techniqueName = "default";
					} else {
						techniqueName = this._effectName + "-technique-" + Lambda.count(techniques);
					}
				} else {
					techniqueName = "default";
				}
				var techniqueScope = new minko_file_Scope().copyFromParent(scope,scope);
				if(!(__map_reserved[techniqueName] != null ? techniques.existsReserved(techniqueName) : techniques.h.hasOwnProperty(techniqueName))) {
					var value = [];
					if(__map_reserved[techniqueName] != null) {
						techniques.setReserved(techniqueName,value);
					} else {
						techniques.h[techniqueName] = value;
					}
				}
				this.parseAttributes(techniqueNode,techniqueScope,techniqueScope.attributeBlock);
				this.parseUniforms(techniqueNode,techniqueScope,techniqueScope.uniformBlock);
				this.parseMacros(techniqueNode,techniqueScope,techniqueScope.macroBlock);
				this.parseStates(techniqueNode,techniqueScope,techniqueScope.stateBlock);
				this.parsePasses(techniqueNode,techniqueScope,__map_reserved[techniqueName] != null ? techniques.getReserved(techniqueName) : techniques.h[techniqueName]);
				this.fixMissingPassPriorities(__map_reserved[techniqueName] != null ? techniques.getReserved(techniqueName) : techniques.h[techniqueName]);
			}
		}
	}
	,getPassToExtend: function(extendNode,callBack) {
		var _gthis = this;
		var pass = null;
		var passName;
		if(typeof(extendNode) == "string") {
			passName = extendNode;
			var passIt = Lambda.find(this._globalScope.passes,function(p) {
				return p.get_name() == passName;
			});
			if(passIt != null) {
				pass = passIt;
			}
		} else if(this.isDynamic(extendNode)) {
			passName = Reflect.field(extendNode,"pass");
			var techniqueName = Reflect.field(extendNode,"technique");
			var effectFilename = Reflect.field(extendNode,"effect");
			if(techniqueName == "") {
				techniqueName = "default";
			}
			if(this._assetLibrary.effect(effectFilename) == null) {
				var options = this._options.clone();
				var loader = minko_file_Loader.createbyLoader(this._assetLibrary.get_loader());
				loader.setQueue(effectFilename,options);
				this._numDependencies++;
				var effectComplete = loader.get_complete().connect(function(l) {
					pass = _gthis.findPassFromEffectFilename(effectFilename,techniqueName,passName);
					callBack(pass);
					_gthis._numLoadedDependencies++;
					if(_gthis._numDependencies == _gthis._numLoadedDependencies && _gthis._effect != null) {
						_gthis.finalize();
					}
				});
				loader.load();
				return;
			} else {
				pass = this.findPassFromEffectFilename(effectFilename,techniqueName,passName);
			}
		} else {
			throw new js__$Boot_HaxeError("");
		}
		if(pass == null) {
			throw new js__$Boot_HaxeError("Undefined base pass with name '" + passName + "'.");
		}
		callBack(pass);
	}
	,findPassFromEffectFilename: function(effectFilename,techniqueName,passName) {
		var effect = this._assetLibrary.effect(effectFilename);
		if(effect == null) {
			return null;
		}
		var techniqueNameAndPasses = effect.get_techniques().keys();
		while(techniqueNameAndPasses.hasNext()) {
			var techniqueNameAndPasses1 = techniqueNameAndPasses.next();
			if(techniqueNameAndPasses1 == techniqueName) {
				var _g = 0;
				var _this = effect.get_techniques();
				var _g1 = __map_reserved[techniqueNameAndPasses1] != null ? _this.getReserved(techniqueNameAndPasses1) : _this.h[techniqueNameAndPasses1];
				while(_g < _g1.length) {
					var p = _g1[_g];
					++_g;
					if(p.get_name() == passName) {
						return p;
					}
				}
			}
		}
		return null;
	}
	,parsePassDynamic: function(node,scope,passes,pass) {
		var passScope = new minko_file_Scope().copyFromParent(scope,scope);
		var vertexShader = null;
		var fragmentShader = null;
		var passName = this._effectName + "-pass" + scope.passes.length;
		var nameNode = Reflect.field(node,"name");
		var isForward = true;
		if(Object.prototype.hasOwnProperty.call(node,"extends") && pass != null) {
			var extendNode = Reflect.field(node,"extends");
			var a = passScope.attributeBlock.bindingMap.bindings;
			var b = pass.get_attributeBindings().bindings;
			var k = b.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				if(!(__map_reserved[k1] != null ? a.existsReserved(k1) : a.h.hasOwnProperty(k1))) {
					var value = __map_reserved[k1] != null ? b.getReserved(k1) : b.h[k1];
					if(__map_reserved[k1] != null) {
						a.setReserved(k1,value);
					} else {
						a.h[k1] = value;
					}
				}
			}
			var a1 = passScope.uniformBlock.bindingMap.bindings;
			var b1 = pass.get_uniformBindings().bindings;
			var k2 = b1.keys();
			while(k2.hasNext()) {
				var k3 = k2.next();
				if(!(__map_reserved[k3] != null ? a1.existsReserved(k3) : a1.h.hasOwnProperty(k3))) {
					var value1 = __map_reserved[k3] != null ? b1.getReserved(k3) : b1.h[k3];
					if(__map_reserved[k3] != null) {
						a1.setReserved(k3,value1);
					} else {
						a1.h[k3] = value1;
					}
				}
			}
			var a2 = passScope.macroBlock.bindingMap.bindings;
			var b2 = pass.get_macroBindings().bindings;
			var k4 = b2.keys();
			while(k4.hasNext()) {
				var k5 = k4.next();
				if(!(__map_reserved[k5] != null ? a2.existsReserved(k5) : a2.h.hasOwnProperty(k5))) {
					var value2 = __map_reserved[k5] != null ? b2.getReserved(k5) : b2.h[k5];
					if(__map_reserved[k5] != null) {
						a2.setReserved(k5,value2);
					} else {
						a2.h[k5] = value2;
					}
				}
			}
			var a3 = passScope.macroBlock.bindingMap.types;
			var b3 = pass.get_macroBindings().types;
			var k6 = b3.keys();
			while(k6.hasNext()) {
				var k7 = k6.next();
				if(!(__map_reserved[k7] != null ? a3.existsReserved(k7) : a3.h.hasOwnProperty(k7))) {
					var value3 = __map_reserved[k7] != null ? b3.getReserved(k7) : b3.h[k7];
					if(__map_reserved[k7] != null) {
						a3.setReserved(k7,value3);
					} else {
						a3.h[k7] = value3;
					}
				}
			}
			var a4 = passScope.stateBlock.bindingMap.bindings;
			var b4 = pass.get_stateBindings().bindings;
			var k8 = b4.keys();
			while(k8.hasNext()) {
				var k9 = k8.next();
				if(!(__map_reserved[k9] != null ? a4.existsReserved(k9) : a4.h.hasOwnProperty(k9))) {
					var value4 = __map_reserved[k9] != null ? b4.getReserved(k9) : b4.h[k9];
					if(__map_reserved[k9] != null) {
						a4.setReserved(k9,value4);
					} else {
						a4.h[k9] = value4;
					}
				}
			}
			if(pass.get_attributeBindings().defaultValues.get_providers().length > 0) {
				if(passScope.attributeBlock.bindingMap.defaultValues.get_providers().length == 0) {
					var tmp = new minko_data_Store();
					passScope.attributeBlock.bindingMap.defaultValues = tmp.copyFrom(pass.get_attributeBindings().defaultValues,true);
				} else {
					var _g = [];
					var _g1 = 0;
					var _g2 = pass.get_attributeBindings().defaultValues.get_providers();
					while(_g1 < _g2.length) {
						var provider = _g2[_g1];
						++_g1;
						_g.push(new minko_data_Provider().copyFrom(provider));
					}
					var tmp1 = _g;
					passScope.attributeBlock.bindingMap.defaultValues.set_providers(tmp1);
				}
			}
			if(pass.get_uniformBindings().defaultValues.get_providers().length > 0) {
				if(passScope.uniformBlock.bindingMap.defaultValues.get_providers().length == 0) {
					var tmp2 = new minko_data_Store();
					passScope.uniformBlock.bindingMap.defaultValues = tmp2.copyFrom(pass.get_uniformBindings().defaultValues,true);
				} else {
					var _g3 = [];
					var _g11 = 0;
					var _g21 = pass.get_uniformBindings().defaultValues.get_providers();
					while(_g11 < _g21.length) {
						var provider1 = _g21[_g11];
						++_g11;
						_g3.push(new minko_data_Provider().copyFrom(provider1));
					}
					var tmp3 = _g3;
					passScope.uniformBlock.bindingMap.defaultValues.set_providers(tmp3);
				}
			}
			if(pass.get_macroBindings().defaultValues.get_providers().length > 0) {
				if(passScope.macroBlock.bindingMap.defaultValues.get_providers().length == 0) {
					var tmp4 = new minko_data_Store();
					passScope.macroBlock.bindingMap.defaultValues = tmp4.copyFrom(pass.get_macroBindings().defaultValues,true);
				} else {
					var _g4 = [];
					var _g12 = 0;
					var _g22 = pass.get_macroBindings().defaultValues.get_providers();
					while(_g12 < _g22.length) {
						var provider2 = _g22[_g12];
						++_g12;
						_g4.push(new minko_data_Provider().copyFrom(provider2));
					}
					var tmp5 = _g4;
					passScope.macroBlock.bindingMap.defaultValues.set_providers(tmp5);
				}
			}
			passScope.stateBlock.states.set_data(minko_data_Provider.createbyProvider(pass.get_stateBindings().defaultValues.get_providers()[0]));
			passScope.stateBlock.bindingMap.defaultValues.removeProvider(passScope.stateBlock.bindingMap.defaultValues.get_providers()[0]);
			passScope.stateBlock.bindingMap.defaultValues.addProvider(passScope.stateBlock.states.get_data());
			vertexShader = pass.get_program().get_vertexShader();
			fragmentShader = pass.get_program().get_fragmentShader();
			isForward = pass.get_isForward();
			passName = pass.get_name();
		}
		if(typeof(nameNode) == "string") {
			passName = nameNode;
		}
		this.parseAttributes(node,passScope,passScope.attributeBlock);
		this.parseUniforms(node,passScope,passScope.uniformBlock);
		this.parseMacros(node,passScope,passScope.macroBlock);
		this.parseStates(node,passScope,passScope.stateBlock);
		if(Object.prototype.hasOwnProperty.call(node,"vertexShader")) {
			vertexShader = this.parseShader(Reflect.field(node,"vertexShader"),passScope,0);
		} else if(vertexShader == null) {
			throw new js__$Boot_HaxeError("Missing vertex shader for pass \"" + passName + "\"");
		}
		if(Object.prototype.hasOwnProperty.call(node,"fragmentShader")) {
			fragmentShader = this.parseShader(Reflect.field(node,"fragmentShader"),passScope,1);
		} else if(fragmentShader == null) {
			throw new js__$Boot_HaxeError("Missing fragment shader for pass \"" + passName + "\"");
		}
		if(Object.prototype.hasOwnProperty.call(node,"forward")) {
			isForward = Reflect.field(node,"forward");
		}
		if(!isForward) {
			this.checkDeferredPassBindings(passScope);
		}
		passes.push(minko_render_Pass.create(passName,isForward,minko_render_Program.createbyShader(passName,this._options.get_context(),vertexShader,fragmentShader),passScope.attributeBlock.bindingMap,passScope.uniformBlock.bindingMap,passScope.stateBlock.bindingMap,passScope.macroBlock.bindingMap));
	}
	,parsePassString: function(node,scope,passes,pass) {
		passes.push(minko_render_Pass.createbyPass(pass,true));
	}
	,parsePass: function(node,scope,passes) {
		var _gthis = this;
		if(typeof(node) == "string") {
			this.getPassToExtend(node,function(pass) {
				_gthis.parsePassString(node,scope,passes,pass);
			});
		} else if(this.isDynamic(node)) {
			if(Object.prototype.hasOwnProperty.call(node,"extends")) {
				var extendNode = Reflect.field(node,"extends");
				this.getPassToExtend(extendNode,function(pass1) {
					_gthis.parsePassDynamic(node,scope,passes,pass1);
				});
			} else {
				this.parsePassDynamic(node,scope,passes,null);
			}
		}
	}
	,checkDeferredPassBindings: function(passScope) {
		var _this = passScope.attributeBlock.bindingMap.bindings;
		var bindingNameAndValue = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(bindingNameAndValue.hasNext()) {
			var bindingNameAndValue1 = bindingNameAndValue.next();
			if(bindingNameAndValue1.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
		var _this1 = passScope.uniformBlock.bindingMap.bindings;
		var bindingNameAndValue2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(bindingNameAndValue2.hasNext()) {
			var bindingNameAndValue3 = bindingNameAndValue2.next();
			if(bindingNameAndValue3.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
		var _this2 = passScope.stateBlock.bindingMap.bindings;
		var bindingNameAndValue4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(bindingNameAndValue4.hasNext()) {
			var bindingNameAndValue5 = bindingNameAndValue4.next();
			if(bindingNameAndValue5.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
		var _this3 = passScope.macroBlock.bindingMap.bindings;
		var bindingNameAndValue6 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
		while(bindingNameAndValue6.hasNext()) {
			var bindingNameAndValue7 = bindingNameAndValue6.next();
			if(bindingNameAndValue7.source == 0) {
				throw new js__$Boot_HaxeError("");
			}
		}
	}
	,parsePasses: function(node,scope,passes) {
		var passesNode = Reflect.field(node,"passes");
		if((passesNode instanceof Array) && passesNode.__enum__ == null) {
			var tmp = passesNode;
			var _g = 0;
			while(_g < tmp.length) {
				var passNode = tmp[_g];
				++_g;
				if(this.isDynamic(passNode) && !this.parseConfiguration(passNode)) {
					continue;
				}
				this.parsePass(passNode,scope,passes);
			}
		}
	}
	,parseDefaultValue: function(node,scope,valueName,defaultValues) {
		if(!this.isDynamic(node)) {
			return;
		}
		var memberNames = Reflect.fields(node);
		if(Lambda.has(memberNames,"default") == false) {
			return;
		}
		var defaultValueNode = Reflect.field(node,"default");
		if(this.isDynamic(defaultValueNode)) {
			this.parseDefaultValueVectorObject(defaultValueNode,scope,valueName,defaultValues);
		} else if((defaultValueNode instanceof Array) && defaultValueNode.__enum__ == null) {
			var tmps = defaultValueNode;
			if(tmps.length == 1 && ((tmps[0] instanceof Array) && tmps[0].__enum__ == null)) {
				this.parseDefaultValueVectorArray(tmps[0],scope,valueName,defaultValues);
			} else {
				throw new js__$Boot_HaxeError("");
			}
		} else if(typeof(defaultValueNode) == "boolean") {
			defaultValues.set(valueName,js_Boot.__cast(defaultValueNode , Bool) ? 1 : 0);
		} else if(typeof(defaultValueNode) == "number" && ((defaultValueNode | 0) === defaultValueNode)) {
			defaultValues.set(valueName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "number") {
			defaultValues.set(valueName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "string") {
			this.loadTexture(js_Boot.__cast(defaultValueNode , String),valueName,defaultValues);
		}
	}
	,parseDefaultValueSamplerStates: function(cls,node,scope,valueName,defaultValues) {
		if(!this.isDynamic(node)) {
			return;
		}
		var memberNames = Reflect.fields(node);
		if(Lambda.has(memberNames,"default") == false) {
			return;
		}
		var defaultValueNode = Reflect.field(node,"default");
		if(typeof(defaultValueNode) == "string") {
			if(cls == "WrapMode") {
				defaultValues.set(valueName,minko_render_SamplerStates.stringToWrapMode(defaultValueNode));
			} else if(cls == "TextureFilter") {
				defaultValues.set(valueName,minko_render_SamplerStates.stringToTextureFilter(defaultValueNode));
			} else if(cls == "MipFilter") {
				defaultValues.set(valueName,minko_render_SamplerStates.stringToMipFilter(defaultValueNode));
			}
		}
	}
	,parseDefaultValueStates: function(node,scope,stateName,defaultValues) {
		if(!this.isDynamic(node)) {
			return;
		}
		var memberNames = Reflect.fields(node);
		if(Lambda.has(memberNames,"default") == false) {
			return;
		}
		var defaultValueNode = Reflect.field(node,"default");
		if(typeof(defaultValueNode) == "boolean") {
			defaultValues.set(stateName,defaultValueNode ? 1 : 0);
		} else if(typeof(defaultValueNode) == "number" && ((defaultValueNode | 0) === defaultValueNode)) {
			defaultValues.set(stateName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "number") {
			defaultValues.set(stateName,defaultValueNode);
		} else if(typeof(defaultValueNode) == "string") {
			defaultValues.set(stateName,defaultValueNode);
		} else if((defaultValueNode instanceof Array) && defaultValueNode.__enum__ == null) {
			if(stateName == "priority" && typeof(node[0]) == "string" && typeof(node[1]) == "number") {
				defaultValues.set(stateName,this.getPriorityValue(node[0]) + node[1]);
			} else {
				throw new js__$Boot_HaxeError("");
			}
		}
	}
	,parseDefaultValueVectorArray: function(defaultValueNode,scope,valueName,defaultValues) {
		var size = defaultValueNode.length;
		var type = defaultValueNode[0];
		if(typeof(type) == "number" && ((type | 0) === type) || typeof(type) == "number") {
			var value = [];
			var _g1 = 0;
			var _g = size;
			while(_g1 < _g) {
				var i = _g1++;
				value[i] = defaultValueNode[i];
			}
			if(size == 2) {
				var this1 = new glm_Vec2Base();
				this1.x = value[0];
				this1.y = value[1];
				defaultValues.set(valueName,this1);
			} else if(size == 3) {
				var this2 = new glm_Vec3Base();
				this2.x = value[0];
				this2.y = value[1];
				this2.z = value[2];
				defaultValues.set(valueName,this2);
			} else if(size == 4) {
				var this3 = new glm_Vec4Base();
				this3.x = value[0];
				this3.y = value[1];
				this3.z = value[2];
				this3.w = value[3];
				defaultValues.set(valueName,this3);
			}
		} else if(typeof(type) == "boolean") {
			var value1 = [];
			var _g11 = 0;
			var _g2 = size;
			while(_g11 < _g2) {
				var i1 = _g11++;
				value1[i1] = defaultValueNode[i1] ? 1 : 0;
			}
			if(size == 2) {
				var this4 = new glm_Vec2Base();
				this4.x = value1[0];
				this4.y = value1[1];
				defaultValues.set(valueName,this4);
			} else if(size == 3) {
				var this5 = new glm_Vec3Base();
				this5.x = value1[0];
				this5.y = value1[1];
				this5.z = value1[2];
				defaultValues.set(valueName,this5);
			} else if(size == 4) {
				var this6 = new glm_Vec4Base();
				this6.x = value1[0];
				this6.y = value1[1];
				this6.z = value1[2];
				this6.w = value1[3];
				defaultValues.set(valueName,this6);
			}
		}
	}
	,parseDefaultValueVectorObject: function(defaultValueNode,scope,valueName,defaultValues) {
		var memberNames = Reflect.fields(defaultValueNode);
		var size = memberNames.length;
		var type = Reflect.field(defaultValueNode,memberNames[0]);
		var offsets = ["x","y","z","w"];
		if(typeof(type) == "number" && ((type | 0) === type) || typeof(type) == "number") {
			var value = [];
			var _g1 = 0;
			var _g = size;
			while(_g1 < _g) {
				var i = _g1++;
				value[i] = Reflect.field(defaultValueNode,offsets[i]);
			}
			if(size == 2) {
				var this1 = new glm_Vec2Base();
				this1.x = value[0];
				this1.y = value[1];
				defaultValues.set(valueName,this1);
			} else if(size == 3) {
				var this2 = new glm_Vec3Base();
				this2.x = value[0];
				this2.y = value[1];
				this2.z = value[2];
				defaultValues.set(valueName,this2);
			} else if(size == 4) {
				var this3 = new glm_Vec4Base();
				this3.x = value[0];
				this3.y = value[1];
				this3.z = value[2];
				this3.w = value[3];
				defaultValues.set(valueName,this3);
			}
		} else if(typeof(type) == "boolean") {
			var value1 = [];
			var _g11 = 0;
			var _g2 = size;
			while(_g11 < _g2) {
				var i1 = _g11++;
				value1[i1] = Reflect.field(defaultValueNode,offsets[i1]) ? 1 : 0;
			}
			if(size == 2) {
				var this4 = new glm_Vec2Base();
				this4.x = value1[0];
				this4.y = value1[1];
				defaultValues.set(valueName,this4);
			} else if(size == 3) {
				var this5 = new glm_Vec3Base();
				this5.x = value1[0];
				this5.y = value1[1];
				this5.z = value1[2];
				defaultValues.set(valueName,this5);
			} else if(size == 4) {
				var this6 = new glm_Vec4Base();
				this6.x = value1[0];
				this6.y = value1[1];
				this6.z = value1[2];
				this6.w = value1[3];
				defaultValues.set(valueName,this6);
			}
		}
	}
	,parseBinding: function(node,scope,binding) {
		binding.source = 0;
		if(typeof(node) == "string") {
			binding.propertyName = node;
			return true;
		} else {
			var bindingNode = Reflect.field(node,"binding");
			if(typeof(bindingNode) == "string") {
				binding.propertyName = bindingNode;
				return true;
			} else if(this.isDynamic(bindingNode)) {
				var propertyNode = Reflect.field(bindingNode,"property");
				var sourceNode = Reflect.field(bindingNode,"source");
				if(typeof(propertyNode) == "string") {
					binding.propertyName = propertyNode;
				}
				if(typeof(sourceNode) == "string") {
					var sourceStr = sourceNode;
					if(sourceStr == "target") {
						binding.source = 0;
					} else if(sourceStr == "renderer") {
						binding.source = 1;
					} else if(sourceStr == "root") {
						binding.source = 2;
					}
				}
				return true;
			}
		}
		return false;
	}
	,parseMacroBinding: function(node,scope,binding) {
		if(!this.isDynamic(node)) {
			return;
		}
		var bindingNode = Reflect.field(node,"binding");
		if(!this.isDynamic(bindingNode)) {
			return;
		}
		var minNode = Reflect.field(bindingNode,"min");
		if(typeof(minNode) == "number" && ((minNode | 0) === minNode)) {
			binding.minValue = minNode;
		}
		var maxNode = Reflect.field(bindingNode,"max");
		if(typeof(maxNode) == "number" && ((maxNode | 0) === maxNode)) {
			binding.maxValue = maxNode;
		}
	}
	,parseMacroBindings: function(node,scope,bindings) {
	}
	,parseAttributes: function(node,scope,attributes) {
		var attributesNode = Reflect.field(node,"attributes");
		if(this.isDynamic(attributesNode)) {
			var defaultValuesProvider = null;
			if(attributes.bindingMap.defaultValues.get_providers().length > 0) {
				defaultValuesProvider = attributes.bindingMap.defaultValues.get_providers()[0];
			} else {
				defaultValuesProvider = minko_data_Provider.create();
				attributes.bindingMap.defaultValues.addProvider(defaultValuesProvider);
			}
			var memberNames = Reflect.fields(attributesNode);
			var _g = 0;
			while(_g < memberNames.length) {
				var attributeName = memberNames[_g];
				++_g;
				var attributeNode = Reflect.field(attributesNode,attributeName);
				var binding = new minko_data_Binding();
				if(this.parseBinding(attributeNode,scope,binding)) {
					var _this = attributes.bindingMap.bindings;
					if(__map_reserved[attributeName] != null) {
						_this.setReserved(attributeName,binding);
					} else {
						_this.h[attributeName] = binding;
					}
				}
			}
		}
	}
	,parseUniforms: function(node,scope,uniforms) {
		var uniformsNode = Reflect.field(node,"uniforms");
		if(this.isDynamic(uniformsNode)) {
			var defaultValuesProvider = null;
			if(uniforms.bindingMap.defaultValues.get_providers().length > 0) {
				defaultValuesProvider = uniforms.bindingMap.defaultValues.get_providers()[0];
			} else {
				defaultValuesProvider = minko_data_Provider.create();
				uniforms.bindingMap.defaultValues.addProvider(defaultValuesProvider);
			}
			var _g = 0;
			var _g1 = Reflect.fields(uniformsNode);
			while(_g < _g1.length) {
				var uniformName = _g1[_g];
				++_g;
				var uniformNode = Reflect.field(uniformsNode,uniformName);
				var binding = new minko_data_Binding();
				if(this.parseBinding(uniformNode,scope,binding)) {
					var _this = uniforms.bindingMap.bindings;
					if(__map_reserved[uniformName] != null) {
						_this.setReserved(uniformName,binding);
					} else {
						_this.h[uniformName] = binding;
					}
				}
				this.parseSamplerStates(uniformNode,scope,uniformName,defaultValuesProvider,uniforms.bindingMap);
				this.parseDefaultValue(uniformNode,scope,uniformName,defaultValuesProvider);
			}
		}
	}
	,parseMacros: function(node,scope,macros) {
		var macrosNode = Reflect.field(node,"macros");
		if(this.isDynamic(macrosNode)) {
			var defaultValuesProvider = null;
			if(macros.bindingMap.defaultValues.get_providers().length > 0) {
				defaultValuesProvider = macros.bindingMap.defaultValues.get_providers()[0];
			} else {
				defaultValuesProvider = minko_data_Provider.create();
				macros.bindingMap.defaultValues.addProvider(defaultValuesProvider);
			}
			var _g = 0;
			var _g1 = Reflect.fields(macrosNode);
			while(_g < _g1.length) {
				var macroName = _g1[_g];
				++_g;
				var macroNode = Reflect.field(macrosNode,macroName);
				var binding = new minko_data_MacroBinding();
				if(this.parseBinding(macroNode,scope,binding)) {
					this.parseMacroBinding(macroNode,scope,binding);
					var _this = macros.bindingMap.bindings;
					if(__map_reserved[macroName] != null) {
						_this.setReserved(macroName,binding);
					} else {
						_this.h[macroName] = binding;
					}
				}
				this.parseDefaultValue(macroNode,scope,macroName,defaultValuesProvider);
				var _this1 = macros.bindingMap.types;
				var value = 0;
				if(__map_reserved[macroName] != null) {
					_this1.setReserved(macroName,value);
				} else {
					_this1.h[macroName] = value;
				}
				if(this.isDynamic(macroNode)) {
					var typeNode = Reflect.field(macroNode,"type");
					if(typeof(typeNode) == "string") {
						var _this2 = macros.bindingMap.types;
						var value1 = minko_data_MacroBindingMap.stringToMacroType(typeNode);
						if(__map_reserved[macroName] != null) {
							_this2.setReserved(macroName,value1);
						} else {
							_this2.h[macroName] = value1;
						}
					}
				}
			}
		}
	}
	,parseStates: function(node,scope,stateBlock) {
		var statesNode = Reflect.field(node,"states");
		var memberNames = Reflect.fields(statesNode);
		if(this.isDynamic(statesNode)) {
			var _g = 0;
			while(_g < memberNames.length) {
				var stateName = memberNames[_g];
				++_g;
				if(Lambda.has(minko_render_States.PROPERTY_NAMES,stateName)) {
					var parse_states = Reflect.field(statesNode,stateName);
					if(this.isDynamic(parse_states)) {
						var binding = new minko_data_Binding();
						if(this.parseBinding(parse_states,scope,binding)) {
							var _this = stateBlock.bindingMap.bindings;
							if(__map_reserved[stateName] != null) {
								_this.setReserved(stateName,binding);
							} else {
								_this.h[stateName] = binding;
							}
						} else {
							this.parseState(parse_states,scope,stateBlock,stateName);
						}
						if(Object.prototype.hasOwnProperty.call(parse_states,"default")) {
							var defaultValueNode = Reflect.field(parse_states,"default");
							this.parseState(defaultValueNode,scope,stateBlock,stateName);
						}
					} else {
						this.parseState(parse_states,scope,stateBlock,stateName);
					}
				} else if(Lambda.has(minko_file_EffectParser._extraStateNames,stateName)) {
					var parse_states1 = Reflect.field(statesNode,stateName);
					if(stateName == "blendingMode") {
						this.parseBlendingMode(parse_states1,scope,stateBlock);
					} else if(stateName == "stencilTest") {
						this.parseStencilState(parse_states1,scope,stateBlock);
					}
				}
			}
		}
	}
	,parseState: function(node,scope,stateBlock,stateProperty) {
		if(stateProperty == "priority") {
			this.parsePriority(node,scope,stateBlock);
		} else if(stateProperty == minko_file_EffectParser._extraStateNames[0]) {
			this.parseBlendingMode(node,scope,stateBlock);
		} else if(stateProperty == "blendingSource") {
			this.parseBlendingSource(node,scope,stateBlock);
		} else if(stateProperty == "blendingDestination") {
			this.parseBlendingDestination(node,scope,stateBlock);
		} else if(stateProperty == "zSorted") {
			this.parseZSort(node,scope,stateBlock);
		} else if(stateProperty == "colorMask") {
			this.parseColorMask(node,scope,stateBlock);
		} else if(stateProperty == "depthMask") {
			this.parseDepthMask(node,scope,stateBlock);
		} else if(stateProperty == "depthFunction") {
			this.parseDepthFunction(node,scope,stateBlock);
		} else if(stateProperty == "triangleCulling") {
			this.parseTriangleCulling(node,scope,stateBlock);
		} else if(stateProperty == "stencilFunction") {
			this.parseStencilFunction(node,scope,stateBlock);
		} else if(stateProperty == "stencilReference") {
			this.parseStencilReference(node,scope,stateBlock);
		} else if(stateProperty == "stencilMask") {
			this.parseStencilMask(node,scope,stateBlock);
		} else if(stateProperty == "stencilFailOperation") {
			this.parseStencilFailOperation(node,scope,stateBlock);
		} else if(stateProperty == "stencilZFailOperation") {
			this.parseStencilZFailOperation(node,scope,stateBlock);
		} else if(stateProperty == "stencilZPassOperation") {
			this.parseStencilZPassOperation(node,scope,stateBlock);
		} else if(stateProperty == "scissorTest") {
			this.parseScissorTest(node,scope,stateBlock);
		} else if(stateProperty == "scissorBox") {
			this.parseScissorBox(node,scope,stateBlock);
		} else if(stateProperty == "target") {
			this.parseTarget(node,scope,stateBlock);
		}
	}
	,parsePriority: function(node,scope,stateBlock) {
		if(node != null) {
			var priority = 0.0;
			if(typeof(node) == "number" && ((node | 0) === node)) {
				priority = node;
			} else if(typeof(node) == "number") {
				priority = node;
			} else if(typeof(node) == "string") {
				priority = this.getPriorityValue(node);
			} else if((node instanceof Array) && node.__enum__ == null) {
				var tmp = node;
				if(typeof(tmp[0]) == "string" && typeof(tmp[1]) == "number") {
					priority = this.getPriorityValue(tmp[0]) + tmp[1];
				}
			}
			stateBlock.states.set_priority(priority);
		}
	}
	,parseBlendingMode: function(node,scope,stateBlock) {
		if((node instanceof Array) && node.__enum__ == null) {
			var blendingSrcString = node[0];
			var _this = minko_file_EffectParser._blendingSourceMap;
			if(__map_reserved[blendingSrcString] != null ? _this.existsReserved(blendingSrcString) : _this.h.hasOwnProperty(blendingSrcString)) {
				var _this1 = minko_file_EffectParser._blendingSourceMap;
				stateBlock.states.set_blendingSourceFactor(__map_reserved[blendingSrcString] != null ? _this1.getReserved(blendingSrcString) : _this1.h[blendingSrcString]);
			}
			var blendingDstString = node[1];
			var _this2 = minko_file_EffectParser._blendingDestinationMap;
			if(__map_reserved[blendingDstString] != null ? _this2.existsReserved(blendingDstString) : _this2.h.hasOwnProperty(blendingDstString)) {
				var _this3 = minko_file_EffectParser._blendingDestinationMap;
				stateBlock.states.set_blendingDestinationFactor(__map_reserved[blendingDstString] != null ? _this3.getReserved(blendingDstString) : _this3.h[blendingDstString]);
			}
		} else if(typeof(node) == "string") {
			var blendingModeString = node;
			var _this4 = minko_file_EffectParser._blendingModeMap;
			if(__map_reserved[blendingModeString] != null ? _this4.existsReserved(blendingModeString) : _this4.h.hasOwnProperty(blendingModeString)) {
				var _this5 = minko_file_EffectParser._blendingModeMap;
				var blendingMode = __map_reserved[blendingModeString] != null ? _this5.getReserved(blendingModeString) : _this5.h[blendingModeString];
				stateBlock.states.set_blendingSourceFactor(blendingMode & 255);
				stateBlock.states.set_blendingDestinationFactor(blendingMode & 65280);
			}
		}
	}
	,parseBlendingSource: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._blendingSourceMap;
			var key = node;
			var blendingSourceString = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			stateBlock.states.set_blendingSourceFactor(blendingSourceString);
		}
	}
	,parseBlendingDestination: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._blendingDestinationMap;
			var key = node;
			var blendingDestination = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			stateBlock.states.set_blendingDestinationFactor(blendingDestination);
		}
	}
	,parseZSort: function(node,scope,stateBlock) {
		if(typeof(node) == "boolean") {
			stateBlock.states.set_zSorted(node);
		}
	}
	,parseColorMask: function(node,scope,stateBlock) {
		if(typeof(node) == "boolean") {
			stateBlock.states.set_colorMask(node);
		}
	}
	,parseDepthMask: function(node,scope,stateBlock) {
		if(typeof(node) == "boolean") {
			stateBlock.states.set_depthMask(node);
		}
	}
	,parseDepthFunction: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var compareModeString = node;
			var _this = minko_file_EffectParser._compareFuncMap;
			var exist = __map_reserved[compareModeString] != null ? _this.existsReserved(compareModeString) : _this.h.hasOwnProperty(compareModeString);
			if(exist) {
				var _this1 = minko_file_EffectParser._compareFuncMap;
				stateBlock.states.set_depthFunction(__map_reserved[compareModeString] != null ? _this1.getReserved(compareModeString) : _this1.h[compareModeString]);
			}
		}
	}
	,parseTriangleCulling: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var triangleCullingString = node;
			var _this = minko_file_EffectParser._triangleCullingMap;
			var exist = __map_reserved[triangleCullingString] != null ? _this.existsReserved(triangleCullingString) : _this.h.hasOwnProperty(triangleCullingString);
			if(exist) {
				var _this1 = minko_file_EffectParser._triangleCullingMap;
				stateBlock.states.set_triangleCulling(__map_reserved[triangleCullingString] != null ? _this1.getReserved(triangleCullingString) : _this1.h[triangleCullingString]);
			}
		}
	}
	,parseTarget: function(node,scope,stateBlock) {
		var target = null;
		var targetName = "";
		if(this.isDynamic(node)) {
			var nameValue = Reflect.field(node,"name");
			if(typeof(nameValue) == "string") {
				targetName = nameValue;
			}
			if(!Object.prototype.hasOwnProperty.call(node,"size") && !(Object.prototype.hasOwnProperty.call(node,"width") && Object.prototype.hasOwnProperty.call(node,"height"))) {
				return;
			}
			var width = 0;
			var height = 0;
			if(Object.prototype.hasOwnProperty.call(node,"size")) {
				height = Reflect.field(node,"size");
				width = height;
			} else {
				if(!Object.prototype.hasOwnProperty.call(node,"width") || !Object.prototype.hasOwnProperty.call(node,"height")) {
					this._error.execute(this,this._resolvedFilename + ": render target definition requires both \"width\" and \"height\" properties.");
				}
				width = Reflect.field(node,"width");
				height = Reflect.field(node,"height");
			}
			var isCubeTexture = Object.prototype.hasOwnProperty.call(node,"isCube") && Reflect.field(node,"isCube");
			if(isCubeTexture) {
				target = minko_render_CubeTexture.create(this._options.get_context(),width,height,false,true);
				if(targetName.length != 0) {
					this._assetLibrary.setCubeTexture(targetName,target);
				}
			} else {
				target = minko_render_Texture.create(this._options.get_context(),width,height,false,true);
				if(targetName.length != 0) {
					this._assetLibrary.setTexture(targetName,target);
				}
			}
			target.upload();
			this._effectData.set(targetName,target);
		} else if(typeof(node) == "string") {
			targetName = node;
			target = this._assetLibrary.texture(targetName);
			if(target == null) {
				throw new js__$Boot_HaxeError("");
			}
			this._effectData.set(targetName,target);
		}
		if(target != null) {
			stateBlock.states.set_target(target);
			console.log("      stateBlock.states.target = (target );");
			console.log(target);
		}
	}
	,parseStencilState: function(node,scope,stateBlock) {
		if(this.isDynamic(node)) {
			var stencilFuncValue = Reflect.field(node,"stencilFunction");
			var stencilRefValue = Reflect.field(node,"stencilReference");
			var stencilMaskValue = Reflect.field(node,"stencilMask");
			var stencilOpsValue = Reflect.field(node,"stencilOps");
			this.parseStencilFunction(stencilFuncValue,scope,stateBlock);
			this.parseStencilReference(stencilRefValue,scope,stateBlock);
			this.parseStencilMask(stencilMaskValue,scope,stateBlock);
			this.parseStencilOperations(stencilOpsValue,scope,stateBlock);
		} else if((node instanceof Array) && node.__enum__ == null) {
			this.parseStencilFunction(node[0],scope,stateBlock);
			this.parseStencilReference(node[1],scope,stateBlock);
			this.parseStencilMask(node[2],scope,stateBlock);
			this.parseStencilOperations(node[3],scope,stateBlock);
		}
	}
	,parseStencilFunction: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._compareFuncMap;
			var key = node;
			stateBlock.states.set_stencilFunction(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	,parseStencilReference: function(node,scope,stateBlock) {
		if(typeof(node) == "number" && ((node | 0) === node)) {
			stateBlock.states.set_stencilReference(node);
		}
	}
	,parseStencilMask: function(node,scope,stateBlock) {
		if(typeof(node) == "number" && ((node | 0) === node)) {
			stateBlock.states.set_stencilMask(node);
		}
	}
	,parseStencilOperations: function(node,scope,stateBlock) {
		if((node instanceof Array) && node.__enum__ == null) {
			if(typeof(node[0]) == "string") {
				var _this = minko_file_EffectParser._stencilOpMap;
				var key = node[0];
				stateBlock.states.set_stencilFailOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
			}
			if(typeof(node[1]) == "string") {
				var _this1 = minko_file_EffectParser._stencilOpMap;
				var key1 = node[1];
				stateBlock.states.set_stencilZFailOperation(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
			}
			if(typeof(node[2]) == "string") {
				var _this2 = minko_file_EffectParser._stencilOpMap;
				var key2 = node[2];
				stateBlock.states.set_stencilZPassOperation(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]);
			}
		} else {
			this.parseStencilFailOperation(Reflect.field(node,"fail"),scope,stateBlock);
			this.parseStencilZFailOperation(Reflect.field(node,"zfail"),scope,stateBlock);
			this.parseStencilZPassOperation(Reflect.field(node,"zpass"),scope,stateBlock);
		}
	}
	,parseStencilFailOperation: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._stencilOpMap;
			var key = node;
			stateBlock.states.set_stencilFailOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	,parseStencilZFailOperation: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._stencilOpMap;
			var key = node;
			stateBlock.states.set_stencilZFailOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	,parseStencilZPassOperation: function(node,scope,stateBlock) {
		if(typeof(node) == "string") {
			var _this = minko_file_EffectParser._stencilOpMap;
			var key = node;
			stateBlock.states.set_stencilZPassOperation(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
		}
	}
	,parseScissorTest: function(node,scope,stateBlock) {
		if(node != null && typeof(node) == "boolean") {
			stateBlock.states.set_scissorTest(node);
		}
	}
	,parseScissorBox: function(node,scope,stateBlock) {
		if(node != null && ((node instanceof Array) && node.__enum__ == null)) {
			var this1 = new glm_Vec4Base();
			this1.x = 0;
			this1.y = 0;
			this1.z = 0;
			this1.w = 0;
			var scissorBox = this1;
			if(js_Boot.__instanceof(node[0],Int)) {
				scissorBox.x = node[0];
			}
			if(js_Boot.__instanceof(node[1],Int)) {
				scissorBox.y = node[1];
			}
			if(js_Boot.__instanceof(node[2],Int)) {
				scissorBox.z = node[2];
			}
			if(js_Boot.__instanceof(node[3],Int)) {
				scissorBox.w = node[3];
			}
			stateBlock.states.set_scissorBox(scissorBox);
		}
	}
	,parseSamplerStates: function(node,scope,uniformName,defaultValues,bindingMap) {
		if(this.isDynamic(node)) {
			var wrapModeNode = Reflect.field(node,"wrapMode");
			if(typeof(wrapModeNode) == "string") {
				var wrapModeStr = wrapModeNode;
				var wrapMode = minko_render_SamplerStates.stringToWrapMode(wrapModeStr);
				defaultValues.set(minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"wrapMode"),wrapMode);
			} else if(this.isDynamic(wrapModeNode)) {
				var uniformWrapModeBindingName = minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"wrapMode");
				var _this = bindingMap.bindings;
				if(!(__map_reserved[uniformWrapModeBindingName] != null ? _this.existsReserved(uniformWrapModeBindingName) : _this.h.hasOwnProperty(uniformWrapModeBindingName))) {
					var _this1 = bindingMap.bindings;
					var value = new minko_data_Binding();
					if(__map_reserved[uniformWrapModeBindingName] != null) {
						_this1.setReserved(uniformWrapModeBindingName,value);
					} else {
						_this1.h[uniformWrapModeBindingName] = value;
					}
				}
				var _this2 = bindingMap.bindings;
				this.parseBinding(wrapModeNode,scope,__map_reserved[uniformWrapModeBindingName] != null ? _this2.getReserved(uniformWrapModeBindingName) : _this2.h[uniformWrapModeBindingName]);
				this.parseDefaultValueSamplerStates("WrapMode",wrapModeNode,scope,uniformWrapModeBindingName,defaultValues);
			}
			var textureFilterNode = Reflect.field(node,"textureFilter");
			if(typeof(textureFilterNode) == "string") {
				var textureFilterStr = textureFilterNode;
				var textureFilter = minko_render_SamplerStates.stringToTextureFilter(textureFilterStr);
				defaultValues.set(minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"textureFilter"),textureFilter);
			} else if(this.isDynamic(textureFilterNode)) {
				var uniformTextureFilterBindingName = minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"textureFilter");
				var _this3 = bindingMap.bindings;
				if(!(__map_reserved[uniformTextureFilterBindingName] != null ? _this3.existsReserved(uniformTextureFilterBindingName) : _this3.h.hasOwnProperty(uniformTextureFilterBindingName))) {
					var _this4 = bindingMap.bindings;
					var value1 = new minko_data_Binding();
					if(__map_reserved[uniformTextureFilterBindingName] != null) {
						_this4.setReserved(uniformTextureFilterBindingName,value1);
					} else {
						_this4.h[uniformTextureFilterBindingName] = value1;
					}
				}
				var _this5 = bindingMap.bindings;
				this.parseBinding(textureFilterNode,scope,__map_reserved[uniformTextureFilterBindingName] != null ? _this5.getReserved(uniformTextureFilterBindingName) : _this5.h[uniformTextureFilterBindingName]);
				this.parseDefaultValueSamplerStates("TextureFilter",textureFilterNode,scope,uniformTextureFilterBindingName,defaultValues);
			}
			var mipFilterNode = Reflect.field(node,"mipFilter");
			if(typeof(mipFilterNode) == "string") {
				var mipFilterStr = mipFilterNode;
				var mipFilter = minko_render_SamplerStates.stringToMipFilter(mipFilterStr);
				defaultValues.set(minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"mipFilter"),mipFilter);
			} else if(this.isDynamic(mipFilterNode)) {
				var uniformMipFilterBindingName = minko_render_SamplerStates.uniformNameToSamplerStateName(uniformName,"mipFilter");
				var _this6 = bindingMap.bindings;
				if(!(__map_reserved[uniformMipFilterBindingName] != null ? _this6.existsReserved(uniformMipFilterBindingName) : _this6.h.hasOwnProperty(uniformMipFilterBindingName))) {
					var _this7 = bindingMap.bindings;
					var value2 = new minko_data_Binding();
					if(__map_reserved[uniformMipFilterBindingName] != null) {
						_this7.setReserved(uniformMipFilterBindingName,value2);
					} else {
						_this7.h[uniformMipFilterBindingName] = value2;
					}
				}
				var _this8 = bindingMap.bindings;
				this.parseBinding(mipFilterNode,scope,__map_reserved[uniformMipFilterBindingName] != null ? _this8.getReserved(uniformMipFilterBindingName) : _this8.h[uniformMipFilterBindingName]);
				this.parseDefaultValueSamplerStates("MipFilter",mipFilterNode,scope,uniformMipFilterBindingName,defaultValues);
			}
		}
	}
	,parseShader: function(node,scope,type) {
		if(typeof(node) != "string") {
			throw new js__$Boot_HaxeError("");
		}
		var glsl = node;
		var shader = minko_render_Shader.createbySource(this._options.get_context(),type,glsl);
		var blocks = new minko_file_GLSLBlockTree(new minko_Tuple(0,""));
		var includes = [];
		this._shaderToGLSL.set(shader,blocks);
		this.parseGLSL(glsl,this._options,blocks,includes);
		shader.set_source(glsl);
		return shader;
	}
	,parseGLSL: function(glsl,options,blocks,includes) {
		var stream = glsl.split("\n");
		var i = 0;
		var lastBlockEnd = 0;
		var numIncludes = 0;
		var _g = 0;
		while(_g < stream.length) {
			var line = stream[_g];
			++_g;
			var pos = line.indexOf("#pragma include ");
			var commentPos = line.indexOf("//");
			if(pos != -1 && (commentPos == -1 || pos < commentPos) && (line.indexOf("\"",pos) != -1 || line.indexOf("'",pos) != -1)) {
				var splitStr = "'";
				if(line.indexOf("\"",pos) != -1) {
					splitStr = "\"";
				}
				var filename = line.substring(line.indexOf(splitStr,pos) + splitStr.length,line.lastIndexOf(splitStr));
				if(lastBlockEnd != i) {
					blocks.leaf.push(new minko_file_GLSLBlockTree(new minko_Tuple(0,HxOverrides.substr(glsl,lastBlockEnd,i - lastBlockEnd))));
				}
				if(!Lambda.has(includes,filename)) {
					includes.push(filename);
					blocks.leaf.push(new minko_file_GLSLBlockTree(new minko_Tuple(1,filename)));
				}
				lastBlockEnd = i + line.length + 1;
				++numIncludes;
			}
			i += line.length + 1;
		}
		if(i != lastBlockEnd) {
			blocks.leaf.push(new minko_file_GLSLBlockTree(new minko_Tuple(0,HxOverrides.substr(glsl,lastBlockEnd,null))));
		}
		if(numIncludes > 0) {
			this.loadGLSLDependencies(blocks,options,includes);
		}
	}
	,loadGLSLDependencies: function(blocks,options,includes) {
		var _gthis = this;
		var _g = 0;
		var _g1 = blocks.leaf;
		while(_g < _g1.length) {
			var blockIt = [_g1[_g]];
			++_g;
			var block = [blockIt[0].node];
			if(block[0].first == 1) {
				if(options.get_assetLibrary().hasBlob(block[0].second)) {
					var data = options.get_assetLibrary().blob(block[0].second);
					block[0].first = 0;
					block[0].second = "\n";
					this.parseGLSL(data.toString(),options,blockIt[0],includes);
				} else {
					var loader = minko_file_Loader.createbyOptions(options);
					this._numDependencies++;
					this._loaderCompleteSlots.set(loader,loader.get_complete().connect((function(block1,blockIt1) {
						return function(_1) {
							_gthis.glslIncludeCompleteHandler(_1,blockIt1[0],block1[0].second,includes);
							_gthis._numLoadedDependencies++;
							if(_gthis._numDependencies == _gthis._numLoadedDependencies && _gthis._effect != null) {
								_gthis.finalize();
							}
						};
					})(block,blockIt),0,true));
					this._loaderErrorSlots.set(loader,loader.get_error().connect((function(block2) {
						return function(_11,_2) {
							_gthis.dependencyErrorHandler(_11,_2,block2[0].second);
						};
					})(block),0,true));
					loader.queue(block[0].second).load();
				}
			}
		}
	}
	,checkLoadedAndfinalize: function() {
		if(this._numDependencies == this._numLoadedDependencies && this._effect != null) {
			this.finalize();
		}
	}
	,dependencyErrorHandler: function(loader,error,filename) {
		var err = "Unable to load '" + filename + "' required by \"" + this._filename + "\", included paths are: " + Std.string(loader.get_options().get_includePaths());
		this._error.execute(this,err);
	}
	,createStates: function(block) {
		return null;
	}
	,concatenateGLSLBlocks: function(blocks) {
		var glsl = blocks.node.second;
		var _g = 0;
		var _g1 = blocks.leaf;
		while(_g < _g1.length) {
			var block = _g1[_g];
			++_g;
			glsl += this.concatenateGLSLBlocks(block);
		}
		return glsl;
	}
	,glslIncludeCompleteHandler: function(loader,blocks,filename,includes) {
		var block = blocks.node;
		block.first = 0;
		block.second = "\n";
		var _this = loader.get_files();
		var file = __map_reserved[filename] != null ? _this.getReserved(filename) : _this.h[filename];
		var resolvedFilename = file.get_resolvedFilename();
		var options = loader.get_options();
		var pos = resolvedFilename.lastIndexOf("/");
		if(pos == -1) {
			pos = resolvedFilename.lastIndexOf("\\");
		}
		if(pos != -1) {
			options = options.clone();
			options.set_includePaths([]);
			options.get_includePaths().push(HxOverrides.substr(resolvedFilename,0,pos));
		}
		this.parseGLSL(file.get_data().toString(),options,blocks,includes);
	}
	,loadTexture: function(textureFilename,uniformName,defaultValues) {
		var _gthis = this;
		if(this._options.get_assetLibrary().texture(textureFilename) != null) {
			var tmp = this._assetLibrary.texture(textureFilename);
			defaultValues.set(uniformName,tmp);
			return;
		}
		var loader = minko_file_Loader.createbyOptions(this._options);
		this._numDependencies++;
		this._loaderCompleteSlots.set(loader,loader.get_complete().connect(function(loader1) {
			var texture = _gthis._assetLibrary.texture(textureFilename);
			defaultValues.set(uniformName,texture);
			texture.upload();
			_gthis._numLoadedDependencies++;
			if(_gthis._numDependencies == _gthis._numLoadedDependencies && _gthis._effect != null) {
				_gthis.finalize();
			}
		}));
		this._loaderErrorSlots.set(loader,loader.get_error().connect(function(_1,_2) {
			_gthis.dependencyErrorHandler(_1,_2,textureFilename);
		}));
		loader.queue(textureFilename).load();
	}
	,finalize: function() {
		var technique = this._globalScope.techniques.keys();
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _this = this._globalScope.techniques;
			var technique_second = __map_reserved[technique1] != null ? _this.getReserved(technique1) : _this.h[technique1];
			this._effect.addTechnique(technique1,technique_second);
			var _g = 0;
			while(_g < technique_second.length) {
				var pass = technique_second[_g];
				++_g;
				var vs = pass.get_program().get_vertexShader();
				var fs = pass.get_program().get_fragmentShader();
				if(this._shaderToGLSL.h.__keys__[vs.__id__] != null) {
					vs.set_source("#define VERTEX_SHADER\n" + this.concatenateGLSLBlocks(this._shaderToGLSL.h[vs.__id__]));
				}
				if(this._shaderToGLSL.h.__keys__[fs.__id__] != null) {
					fs.set_source("#define FRAGMENT_SHADER\n" + this.concatenateGLSLBlocks(this._shaderToGLSL.h[fs.__id__]));
				}
			}
		}
		this._effect.get_data().copyFrom(this._effectData);
		this._options.get_assetLibrary().setEffect(this._filename,this._effect);
		this._complete.execute(this);
		var lc = this._loaderCompleteSlots.iterator();
		while(lc.hasNext()) {
			var lc1 = lc.next();
			lc1.disconnect();
		}
		this._loaderCompleteSlots = new haxe_ds_ObjectMap();
		var lc2 = this._loaderErrorSlots.iterator();
		while(lc2.hasNext()) {
			var lc3 = lc2.next();
			lc3.disconnect();
		}
		this._loaderErrorSlots = new haxe_ds_ObjectMap();
	}
	,__class__: minko_file_EffectParser
});
var minko_file_File = $hx_exports["minko"]["file"]["File"] = function() {
};
minko_file_File.__name__ = true;
minko_file_File.create = function() {
	return new minko_file_File();
};
minko_file_File.getCurrentWorkingDirectory = function() {
	return ".";
};
minko_file_File.getBinaryDirectory = function() {
	return ".";
};
minko_file_File.sanitizeFilename = function(filename) {
	var f = StringTools.replace(filename,"\\","/");
	return f;
};
minko_file_File.canonizeFilename = function(filename) {
	var r = new EReg("[\\/]","ig");
	var segments = r.split(filename);
	var path = [];
	var _g = 0;
	while(_g < segments.length) {
		var current = segments[_g];
		++_g;
		if(StringTools.trim(current) == "" || current == ".") {
			continue;
		}
		if(current != "..") {
			path.push(current);
		} else if(path.length > 0 && path[path.length - 1] != "..") {
			path.pop();
		} else {
			path.push(current);
		}
	}
	var ss = filename.length > 0 && filename.charAt(0) == "/" ? "/" : "";
	var output = ss + path.join("/");
	if(path.length != 0) {
		output = HxOverrides.substr(output,0,output.length);
	}
	if(output.length == 0) {
		output = ".";
	}
	return output;
};
minko_file_File.removePrefixPathFromFilename = function(filename) {
	var cleanFilename = minko_file_File.sanitizeFilename(filename);
	var filenameWithoutPrefixPath = cleanFilename;
	var lastSeparatorPosition = filenameWithoutPrefixPath.lastIndexOf("/");
	if(lastSeparatorPosition != -1) {
		filenameWithoutPrefixPath = HxOverrides.substr(filenameWithoutPrefixPath,lastSeparatorPosition + 1,null);
	}
	return filenameWithoutPrefixPath;
};
minko_file_File.extractPrefixPathFromFilename = function(filename) {
	var cleanFilename = minko_file_File.sanitizeFilename(filename);
	var prefixPath = cleanFilename;
	var lastSeparatorPosition = prefixPath.lastIndexOf("/");
	if(lastSeparatorPosition != -1) {
		prefixPath = HxOverrides.substr(prefixPath,0,lastSeparatorPosition);
	} else {
		return "";
	}
	return prefixPath;
};
minko_file_File.getExtension = function(filename) {
	var extension = "";
	var lastDotPosition = filename.lastIndexOf(".");
	if(lastDotPosition != -1) {
		extension = HxOverrides.substr(filename,lastDotPosition + 1,null);
		extension = extension.toLowerCase();
	}
	return extension;
};
minko_file_File.replaceExtension = function(filename,extension) {
	var transformedFilename = filename;
	var lastDotPosition = transformedFilename.lastIndexOf(".");
	if(lastDotPosition != -1) {
		var previousExtension = HxOverrides.substr(transformedFilename,lastDotPosition + 1,null);
		transformedFilename = HxOverrides.substr(transformedFilename,0,transformedFilename.length - (previousExtension.length + 1));
	}
	transformedFilename += "." + extension;
	return transformedFilename;
};
minko_file_File.prototype = {
	get_filename: function() {
		return this._filename;
	}
	,set_filename: function(v) {
		this._filename = v;
		return v;
	}
	,get_resolvedFilename: function() {
		return this._resolvedFilename;
	}
	,set_resolvedFilename: function(v) {
		this._resolvedFilename = v;
		return v;
	}
	,get_data: function() {
		return this._data;
	}
	,__class__: minko_file_File
};
var minko_file_FileProtocol = $hx_exports["minko"]["file"]["FileProtocol"] = function() {
	this._workerSlots = new haxe_ds_ObjectMap();
	minko_file_AbstractProtocol.call(this);
};
minko_file_FileProtocol.__name__ = true;
minko_file_FileProtocol.create = function() {
	return new minko_file_FileProtocol();
};
minko_file_FileProtocol.__super__ = minko_file_AbstractProtocol;
minko_file_FileProtocol.prototype = $extend(minko_file_AbstractProtocol.prototype,{
	load: function() {
		var _gthis = this;
		var loader = this;
		minko_file_FileProtocol._runningLoaders.push(loader);
		var resolvedFilename = this.get_resolvedFilename();
		var options = this._options;
		var cleanFilename = resolvedFilename;
		var prefixPosition = resolvedFilename.indexOf("://");
		if(prefixPosition != -1) {
			cleanFilename = HxOverrides.substr(resolvedFilename,prefixPosition + 3,null);
		}
		if(this._options.get_loadAsynchronously() && minko_AbstractCanvas.get_defaultCanvas() != null && minko_AbstractCanvas.get_defaultCanvas().isWorkerRegistered("file-protocol")) {
			var worker = minko_AbstractCanvas.get_defaultCanvas().getWorker("file-protocol");
			var tmp = this._workerSlots;
			var tmp1 = worker.get_message().connect(function(UnnamedParameter1,message) {
				if(message.type == "complete") {
					var bytes = message.data;
					_gthis.set_data(bytes);
					_gthis._complete.execute(loader);
					HxOverrides.remove(minko_file_FileProtocol._runningLoaders,loader);
					_gthis._workerSlots.h[worker.__id__].disconnect();
					_gthis._workerSlots.remove(worker);
				} else if(message.type == "progress") {
					var ratio = message.data;
					_gthis._progress.execute(loader,ratio);
				} else if(message.type == "error") {
					var err = message.data;
					_gthis._error.execute(loader,err);
					_gthis._complete.execute(loader);
					HxOverrides.remove(minko_file_FileProtocol._runningLoaders,loader);
					_gthis._workerSlots.h[worker.__id__].disconnect();
					_gthis._workerSlots.remove(worker);
				}
			});
			tmp.set(worker,tmp1);
			var offset = options.get_seekingOffset();
			var length = options.get_seekedLength();
			var offsetByteArray = new haxe_io_BytesOutput();
			offsetByteArray.writeInt32(offset);
			offsetByteArray.writeInt32(length);
			minko_utils_BytesTool.writeUTF(offsetByteArray,cleanFilename);
			var tmp2 = offsetByteArray.getBytes();
			worker.start(tmp2);
		}
	}
	,fileExists: function(filename) {
		return false;
	}
	,isAbsolutePath: function(filename) {
		var cleanFilename = minko_file_File.sanitizeFilename(filename);
		return cleanFilename.indexOf("/") == 0;
	}
	,__class__: minko_file_FileProtocol
});
var minko_file_IOHandler = function(options,assets,resolvedFilename) {
	assimp_IOSystem.call(this);
	this._options = options;
	this._assets = assets;
	this._resolvedFilename = resolvedFilename;
	this.complete = new minko_signal_Signal();
};
minko_file_IOHandler.__name__ = true;
minko_file_IOHandler.__super__ = assimp_IOSystem;
minko_file_IOHandler.prototype = $extend(assimp_IOSystem.prototype,{
	errorFunction: function(errorFunction) {
		this._errorFunction = errorFunction;
	}
	,close: function(pFile) {
		this.complete.dispose();
	}
	,exists: function(file) {
		return false;
	}
	,getOsSeparator: function() {
		return "/";
	}
	,open: function(pFile) {
		var _gthis = this;
		var loader = minko_file_Loader.create();
		loader.set_options(this._options);
		this._options.set_loadAsynchronously(false);
		this._options.set_storeDataIfNotParsed(false);
		this._options.set_parserFunction(function(UnnamedParameter1) {
			return null;
		});
		var absolutePath = minko_file_File.extractPrefixPathFromFilename(this._resolvedFilename);
		var relativePath = minko_file_File.extractPrefixPathFromFilename(pFile);
		var completePath = absolutePath + "/" + relativePath;
		var filename = minko_file_File.removePrefixPathFromFilename(pFile);
		if(relativePath != null && !(relativePath.length == 1 && relativePath.charAt(0) == ".")) {
			this._options.get_includePaths().push(completePath);
		}
		var stream = null;
		var tmp = this._loaderCompleteSlots;
		var tmp1 = loader.get_complete().connect(function(loaderThis) {
			_gthis._loaderErrorSlots.remove(loader);
			_gthis._loaderCompleteSlots.remove(loader);
			_gthis.complete.execute(loader);
			var _this = loaderThis.get_files();
			stream = new assimp_MemoryIOStream((__map_reserved[filename] != null ? _this.getReserved(filename) : _this.h[filename]).get_data());
		});
		tmp.set(loader,tmp1);
		var tmp2 = this._loaderErrorSlots;
		var tmp3 = loader.get_error().connect(function(UnnamedParameter11,error) {
			if(_gthis._errorFunction != null) {
				_gthis._errorFunction(_gthis,filename,error);
			} else {
				throw new js__$Boot_HaxeError(error);
			}
		});
		tmp2.set(loader,tmp3);
		loader.queue(filename).load();
		return stream;
	}
	,__class__: minko_file_IOHandler
});
var minko_file_JPEGParser = $hx_exports["minko"]["file"]["JPEGParser"] = function() {
	minko_file_AbstractParser.call(this);
};
minko_file_JPEGParser.__name__ = true;
minko_file_JPEGParser.__super__ = minko_file_AbstractParser;
minko_file_JPEGParser.prototype = $extend(minko_file_AbstractParser.prototype,{
	parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var _gthis = this;
		minko_utils_WebNodeTools.loadFromBytes("jpg",data,function(pd) {
			_gthis.__parse(filename,resolvedFilename,options,pd,assetLibrary);
		});
	}
	,__parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var bmpData = data.pixels;
		var width = data.width;
		var height = data.height;
		var texture = null;
		if(options.get_isCubeTexture()) {
			var parser = new minko_file_MipMapChainParser();
			var cubeTexture = parser.parseCubeTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),options.get_parseMipMaps() || options.get_generateMipmaps(),options.get_resizeSmoothly(),1,filename);
			cubeTexture = (options.get_textureFunction())(filename,cubeTexture);
			assetLibrary.setCubeTexture(filename,cubeTexture);
			texture = cubeTexture;
		} else if(!options.get_isRectangleTexture()) {
			var parser1 = new minko_file_MipMapChainParser();
			var texture2d = parser1.parseTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),options.get_parseMipMaps() || options.get_generateMipmaps(),options.get_resizeSmoothly(),1,filename);
			texture2d = (options.get_textureFunction())(filename,texture2d);
			texture = texture2d;
			assetLibrary.setTexture(filename,texture2d);
		}
		console.log("JPEGParser" + filename);
		texture.upload();
		if(options.get_disposeTextureAfterLoading()) {
			texture.disposeData();
		}
		this.get_complete().execute(this);
	}
	,__class__: minko_file_JPEGParser
});
var minko_file_Loader = $hx_exports["minko"]["file"]["Loader"] = function() {
	this._options = minko_file_Options.empty();
	this._complete = new minko_signal_Signal();
	this._progress = new minko_signal_Signal2();
	this._parsingProgress = new minko_signal_Signal2();
	this._error = new minko_signal_Signal2();
	this._numFilesToParse = 0;
	this._numFilesToParseComplete = 0;
	this._filesQueue = [];
	this._loading = [];
	this._filenameToOptions = new haxe_ds_StringMap();
	this._files = new haxe_ds_StringMap();
	this._protocolErrorSlots = new haxe_ds_ObjectMap();
	this._protocolCompleteSlots = new haxe_ds_ObjectMap();
	this._protocolProgressSlots = new haxe_ds_ObjectMap();
	this._parserProgressSlots = new haxe_ds_ObjectMap();
	this._parserCompleteSlots = new haxe_ds_ObjectMap();
	this._parserErrorSlots = new haxe_ds_ObjectMap();
	this._protocolToProgress = new haxe_ds_ObjectMap();
	this._parserToProgress = new haxe_ds_ObjectMap();
};
minko_file_Loader.__name__ = true;
minko_file_Loader.create = function() {
	return new minko_file_Loader();
};
minko_file_Loader.createbyOptions = function(options) {
	var copy = minko_file_Loader.create();
	copy._options = options;
	return copy;
};
minko_file_Loader.createbyLoader = function(loader) {
	var copy = minko_file_Loader.create();
	copy._options = loader._options;
	return copy;
};
minko_file_Loader.prototype = {
	get_options: function() {
		return this._options;
	}
	,set_options: function(v) {
		this._options = v;
		return v;
	}
	,get_complete: function() {
		return this._complete;
	}
	,get_progress: function() {
		return this._progress;
	}
	,get_parsingProgress: function() {
		return this._parsingProgress;
	}
	,get_error: function() {
		return this._error;
	}
	,get_filesQueue: function() {
		return this._filesQueue;
	}
	,get_loading: function() {
		if(this._filesQueue.length <= 0) {
			return this._loading.length > 0;
		} else {
			return true;
		}
	}
	,queue: function(filename) {
		return this.setQueue(filename,null);
	}
	,setQueue: function(filename,options) {
		if(StringTools.trim(filename) == "") {
			return this;
		}
		this._filesQueue.push(filename);
		var _this = this._filenameToOptions;
		var value = options != null ? options : this._options;
		if(__map_reserved[filename] != null) {
			_this.setReserved(filename,value);
		} else {
			_this.h[filename] = value;
		}
		return this;
	}
	,load: function() {
		if(this._filesQueue.length == 0) {
			this._complete.execute(this);
		} else {
			this._numFiles = this._filesQueue.length;
			this._protocolToProgress = new haxe_ds_ObjectMap();
			var queue = this._filesQueue.concat([]);
			var _g = 0;
			while(_g < queue.length) {
				var filename = queue[_g];
				++_g;
				var _this = this._filenameToOptions;
				var options = __map_reserved[filename] != null ? _this.getReserved(filename) : _this.h[filename];
				var includePaths = options.get_includePaths();
				var loadFile = false;
				var resolvedFilename = (options.get_uriFunction())(minko_file_File.sanitizeFilename(filename));
				var protocol = ((options.get_protocolFunction())(resolvedFilename))();
				protocol.set_options(options);
				if(includePaths.length == 0 || protocol.isAbsolutePath(resolvedFilename)) {
					loadFile = true;
				} else {
					var _g1 = 0;
					while(_g1 < includePaths.length) {
						var includePath = includePaths[_g1];
						++_g1;
						resolvedFilename = (options.get_uriFunction())(minko_file_File.sanitizeFilename(includePath + "/" + filename));
						protocol = ((options.get_protocolFunction())(resolvedFilename))();
						protocol.set_options(options);
						if(protocol.fileExists(resolvedFilename)) {
							loadFile = true;
							break;
						}
					}
					if(loadFile == false) {
						includePaths = minko_file_Options.includePaths_clear();
						var _g11 = 0;
						while(_g11 < includePaths.length) {
							var includePath1 = includePaths[_g11];
							++_g11;
							resolvedFilename = (options.get_uriFunction())(minko_file_File.sanitizeFilename(includePath1 + "/" + filename));
							protocol = ((options.get_protocolFunction())(resolvedFilename))();
							protocol.set_options(options);
							if(protocol.fileExists(resolvedFilename)) {
								loadFile = true;
								break;
							}
						}
					}
				}
				if(loadFile) {
					var _this1 = this._files;
					var value = protocol.get_file();
					if(__map_reserved[filename] != null) {
						_this1.setReserved(filename,value);
					} else {
						_this1.h[filename] = value;
					}
					HxOverrides.remove(this._filesQueue,filename);
					this._loading.push(filename);
					var that = [this];
					this._protocolErrorSlots.set(protocol,protocol.get_error().connect((function(that1) {
						return function(protocol1,err) {
							that1[0].protocolErrorHandler(protocol1,err);
						};
					})(that)));
					this._protocolCompleteSlots.set(protocol,protocol.get_complete().connect((function(that2) {
						return function(protocol2) {
							that2[0].protocolCompleteHandler(protocol2);
						};
					})(that)));
					this._protocolProgressSlots.set(protocol,protocol.get_progress().connect((function(that3) {
						return function(protocol3,progress) {
							that3[0].protocolProgressHandler(protocol3,progress);
						};
					})(that)));
					protocol.loadFile(filename,resolvedFilename,options);
				} else {
					var error = "ProtocolError" + "File does not exist: " + filename + ", include paths: " + this._options.get_includePaths().join(",");
					this.errorThrown(error);
				}
			}
		}
	}
	,get_files: function() {
		return this._files;
	}
	,protocolErrorHandler: function(protocol,err) {
		var error = "ProtocolError" + "Protocol error: " + protocol.get_file().get_filename() + ", include paths: " + this._options.get_includePaths().join(",");
		this.errorThrown(error);
	}
	,protocolCompleteHandler: function(protocol) {
		this._protocolToProgress.set(protocol,1.0);
		var filename = protocol.get_file().get_filename();
		HxOverrides.remove(this._loading,filename);
		this._filenameToOptions.remove(filename);
		this._protocolErrorSlots.h[protocol.__id__].disconnect();
		this._protocolErrorSlots.remove(protocol);
		this._protocolCompleteSlots.h[protocol.__id__].disconnect();
		this._protocolCompleteSlots.remove(protocol);
		this._protocolProgressSlots.h[protocol.__id__].disconnect();
		this._protocolProgressSlots.remove(protocol);
		this._numFilesToParse++;
		console.log("file '" + protocol.get_file().get_filename() + "' loaded, " + this._loading.length + " file(s) still loading, " + this._filesQueue.length + " file(s) in the queue");
		var parsed = this.processData(filename,protocol.get_file().get_resolvedFilename(),protocol.get_options(),protocol.get_file().get_data());
		if(this.get_options().get_storeDataIfNotParsed()) {
			if(!parsed) {
				this._numFilesToParseComplete++;
				this.finalize();
			}
		}
	}
	,protocolProgressHandler: function(protocol,progress) {
		this._protocolToProgress.set(protocol,progress);
		var newTotalProgress = 0.0;
		var protocolAndProgress = this._protocolToProgress.keys();
		while(protocolAndProgress.hasNext()) {
			var protocolAndProgress1 = protocolAndProgress.next();
			newTotalProgress += this._protocolToProgress.h[protocolAndProgress1.__id__] / this._numFiles;
		}
		if(newTotalProgress > 1.0) {
			newTotalProgress = 1.0;
		}
		this._progress.execute(this,newTotalProgress);
	}
	,finalize: function() {
		if(this._loading.length == 0 && this._filesQueue.length == 0 && this._numFilesToParse == this._numFilesToParseComplete) {
			this._protocolErrorSlots = new haxe_ds_ObjectMap();
			this._protocolCompleteSlots = new haxe_ds_ObjectMap();
			this._protocolProgressSlots = new haxe_ds_ObjectMap();
			this._filenameToOptions = new haxe_ds_StringMap();
			this._complete.execute(this);
			this._parserErrorSlots = new haxe_ds_ObjectMap();
			this._protocolToProgress = new haxe_ds_ObjectMap();
			this._files = new haxe_ds_StringMap();
		}
	}
	,processData: function(filename,resolvedFilename,options,data) {
		var extension = HxOverrides.substr(filename,filename.lastIndexOf(".") + 1,null).toLowerCase();
		var parser = null;
		try {
			if(options.getParser(extension) != null) {
				parser = (options.getParser(extension))();
			}
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				console.log(e);
			} else throw(e);
		}
		if(parser != null) {
			this._parserProgressSlots.set(parser,parser.get_progress().connect($bind(this,this.parserProgressHandler)));
			this._parserCompleteSlots.set(parser,parser.get_complete().connect($bind(this,this.parserCompleteHandler)));
			this._parserErrorSlots.set(parser,parser.get_error().connect($bind(this,this.parserErrorHandler)));
			parser.parse(filename,resolvedFilename,options,data,options.get_assetLibrary());
		} else if(options.get_storeDataIfNotParsed()) {
			if(extension != "glsl") {
				console.log("no parser found for extension '" + extension + "'");
			}
			options.get_assetLibrary().setBlob(filename,data);
		}
		return parser != null;
	}
	,parserProgressHandler: function(parser,progress) {
		this._parserToProgress.set(parser,progress);
		var newTotalProgress = 0.0;
		var parserAndProgress = this._parserToProgress.keys();
		while(parserAndProgress.hasNext()) {
			var parserAndProgress1 = parserAndProgress.next();
			newTotalProgress += this._parserToProgress.h[parserAndProgress1.__id__] / this._numFiles;
		}
		if(newTotalProgress > 1.0) {
			newTotalProgress = 1.0;
		}
		this._parsingProgress.execute(this,newTotalProgress);
	}
	,parserCompleteHandler: function(parser) {
		this._numFilesToParseComplete++;
		this._parserCompleteSlots.remove(parser);
		this._parserToProgress.set(parser,1.0);
		this.finalize();
	}
	,parserErrorHandler: function(parser,error) {
		this.errorThrown(error);
	}
	,errorThrown: function(error) {
		if(this._error.get_numCallbacks() > 0) {
			this._error.execute(this,error);
		} else {
			console.log(error);
			throw new js__$Boot_HaxeError(error);
		}
	}
	,__class__: minko_file_Loader
};
var minko_file_MipMapChainParser = $hx_exports["minko"]["file"]["MipMapChainParser"] = function() {
};
minko_file_MipMapChainParser.__name__ = true;
minko_file_MipMapChainParser.prototype = {
	parseTexture: function(context,width,height,data,parseMipMaps,mipMapping,smooth,format,filename) {
		if(filename == null) {
			filename = "";
		}
		if(format == null) {
			format = 1;
		}
		if(smooth == null) {
			smooth = true;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		var numLevels;
		if(mipMapping && parseMipMaps) {
			var tmp = width;
			var p = 0;
			while(tmp >= 1) {
				++p;
				tmp >>= 1;
			}
			numLevels = p + 1;
		} else {
			numLevels = 1;
		}
		var actualHeight = height;
		if(mipMapping && parseMipMaps && width * 2 - 1 != height) {
			var diff = height - width * 2 - 1;
			actualHeight = height + Math.floor((diff + 1) / 2);
		}
		var bytesPerPixel = format == 0 ? 3 : 4;
		var rgba = new haxe_io_Bytes(new ArrayBuffer(width * actualHeight * 4));
		var texture = minko_render_Texture.create(context,width,actualHeight,mipMapping,false,smooth,1,filename);
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		this.parseMipMap(rgba,0,data,0,width,height,this1,width,actualHeight,bytesPerPixel);
		texture.get_data()[0] = rgba;
		texture.upload();
		if(mipMapping && parseMipMaps) {
			var dataOffset = width * actualHeight * bytesPerPixel;
			var _g1 = 1;
			var _g = numLevels;
			while(_g1 < _g) {
				var level = _g1++;
				if(dataOffset > width * height * bytesPerPixel) {
					break;
				}
				var mipMapSize = Math.floor(Math.max(width >> level,1) * Math.max(actualHeight >> level,1) * 4);
				var textureRgbaData = new haxe_io_Bytes(new ArrayBuffer(mipMapSize));
				texture.get_data()[level] = textureRgbaData;
				var this2 = new glm_Vec2Base();
				this2.x = 0;
				this2.y = 0;
				this.parseMipMap(textureRgbaData,0,data,dataOffset,width,height,this2,width >> level,actualHeight >> level,bytesPerPixel);
				dataOffset += width * (actualHeight >> level) * bytesPerPixel;
				texture.uploadMipLevel(level,textureRgbaData);
			}
		}
		return texture;
	}
	,parseMipMap: function(_out,rgbaOffset,data,dataOffset,width,height,offset,mipMapWidth,mipMapHeight,bytesPerPixel) {
		var endX = Math.floor(offset.x + mipMapWidth);
		var endY = Math.floor(offset.y + mipMapHeight);
		var idx = 0;
		var _g1 = Math.floor(offset.y);
		var _g = endY;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = Math.floor(offset.x);
			var _g2 = endX;
			while(_g3 < _g2) {
				var x = _g3++;
				var xy = (x + y * width) * bytesPerPixel;
				var _g5 = 0;
				var _g4 = bytesPerPixel;
				while(_g5 < _g4) {
					var i = _g5++;
					_out.b[rgbaOffset + idx++] = data.b[dataOffset + xy++] & 255;
				}
				var _g41 = bytesPerPixel;
				while(_g41 < 4) {
					var i1 = _g41++;
					_out.b[rgbaOffset + idx++] = 1;
				}
			}
		}
	}
	,parseCubeTexture: function(context,width,height,data,parseMipMaps,mipMapping,smooth,format,filename) {
		if(filename == null) {
			filename = "";
		}
		if(format == null) {
			format = 1;
		}
		if(smooth == null) {
			smooth = true;
		}
		if(mipMapping == null) {
			mipMapping = false;
		}
		var faceSize = Math.floor(width / 4);
		var texture = minko_render_CubeTexture.create(context,faceSize,faceSize,mipMapping,false,smooth,1,filename);
		var faces = [0,1,2,3,4,5];
		var this1 = new glm_Vec2Base();
		this1.x = 2;
		this1.y = 1;
		var this2 = new glm_Vec2Base();
		this2.x = 0;
		this2.y = 1;
		var this3 = new glm_Vec2Base();
		this3.x = 1;
		this3.y = 0;
		var this4 = new glm_Vec2Base();
		this4.x = 1;
		this4.y = 2;
		var this5 = new glm_Vec2Base();
		this5.x = 1;
		this5.y = 1;
		var this6 = new glm_Vec2Base();
		this6.x = 3;
		this6.y = 1;
		var faceOffset = [this1,this2,this3,this4,this5,this6];
		var rgba = new haxe_io_Bytes(new ArrayBuffer(faceSize * faceSize * 4));
		var bytesPerPixel = format == 1 ? 4 : 3;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var a = faceOffset[i];
			var this7 = new glm_Vec2Base();
			this7.x = 0;
			this7.y = 0;
			var dest = this7;
			dest.x = a.x * faceSize;
			dest.y = a.y * faceSize;
			var offset = dest;
			var face = faces[i];
			this.parseMipMap(rgba,0,data,0,width,height,offset,faceSize,faceSize,bytesPerPixel);
			texture.setData(rgba,face);
		}
		texture.upload();
		var eof = width * height * bytesPerPixel;
		if(mipMapping && parseMipMaps) {
			var _g1 = 0;
			while(_g1 < 6) {
				var i1 = _g1++;
				var face1 = faces[i1];
				var level = 1;
				var dataOffset = width * faceSize * 3 * bytesPerPixel;
				var size = faceSize / 2;
				while(size >= 1) {
					var a1 = faceOffset[i1];
					var this8 = new glm_Vec2Base();
					this8.x = 0;
					this8.y = 0;
					var dest1 = this8;
					dest1.x = a1.x * size;
					dest1.y = a1.y * size;
					var offset1 = dest1;
					if(dataOffset >= eof) {
						break;
					}
					this.parseMipMap(rgba,0,data,dataOffset,width,height,offset1,size,size,bytesPerPixel);
					texture.uploadMipLevel(level,rgba,face1);
					dataOffset += Math.floor(width * size * 3 * bytesPerPixel);
					size /= 2;
					++level;
				}
			}
		}
		return texture;
	}
	,dispose: function() {
	}
	,__class__: minko_file_MipMapChainParser
};
var minko_file_Options = $hx_exports["minko"]["file"]["Options"] = function() {
	this._parsers = new haxe_ds_StringMap();
	this._protocols = new haxe_ds_StringMap();
	this._context = null;
	this._includePaths = [];
	this._platforms = [];
	this._userFlags = [];
	this._optimizeForRendering = true;
	this._generateMipMaps = false;
	this._parseMipMaps = false;
	this._resizeSmoothly = false;
	this._isCubeTexture = false;
	this._isRectangleTexture = false;
	this._generateSmoothNormals = false;
	this._normalMaxSmoothingAngle = 80.0;
	this._includeAnimation = true;
	this._startAnimation = true;
	this._loadAsynchronously = true;
	this._disposeIndexBufferAfterLoading = false;
	this._disposeVertexBufferAfterLoading = false;
	this._disposeTextureAfterLoading = false;
	this._storeDataIfNotParsed = true;
	this._preserveMaterials = true;
	this._trackAssetDescriptor = false;
	this._skinningFramerate = 30;
	this._skinningMethod = 1;
	this._material = null;
	this._effect = null;
	this._seekingOffset = 0;
	this._seekedLength = 0;
	this._materialFunction = null;
	this._textureFunction = null;
	this._geometryFunction = null;
	this._protocolFunction = null;
	this._parserFunction = null;
	this._uriFunction = null;
	this._nodeFunction = null;
	this._effectFunction = null;
	this._textureFormatFunction = null;
	this._attributeFunction = null;
	this._fileStatusFunction = null;
	this._preventLoadingFunction = null;
	var binaryDir = minko_file_File.getBinaryDirectory();
	this.get_includePaths().push(binaryDir + "/asset");
	this.get_includePaths().push(".");
	this.initializePlatforms();
	this.initializeUserFlags();
};
minko_file_Options.__name__ = true;
minko_file_Options.empty = function() {
	var instance = new minko_file_Options();
	instance.initialize();
	return instance;
};
minko_file_Options.create = function(context) {
	var options = minko_file_Options.empty();
	options._context = context;
	return options;
};
minko_file_Options.registerDefaultProtocol = function(protocol,cls) {
	var prefix = protocol.toLowerCase();
	var _this = minko_file_Options._defaultProtocols;
	if(__map_reserved[prefix] != null) {
		_this.setReserved(prefix,cls);
	} else {
		_this.h[prefix] = cls;
	}
};
minko_file_Options.includePaths_clear = function() {
	var binaryDir = "";
	var __includePaths = [];
	__includePaths.push("asset/effect");
	return __includePaths;
};
minko_file_Options.prototype = {
	clone: function() {
		var copy = new minko_file_Options();
		copy.copyFrom(this);
		copy.initialize();
		return copy;
	}
	,get_context: function() {
		return this._context;
	}
	,set_context: function(v) {
		this._context = v;
		return v;
	}
	,get_assetLibrary: function() {
		return this._assets;
	}
	,set_assetLibrary: function(v) {
		this._assets = v;
		return v;
	}
	,set_includePaths: function(v) {
		this._includePaths = v;
		return v;
	}
	,get_includePaths: function() {
		return this._includePaths;
	}
	,get_platforms: function() {
		return this._platforms;
	}
	,get_userFlags: function() {
		return this._userFlags;
	}
	,get_optimizeForRendering: function() {
		return this._optimizeForRendering;
	}
	,set_optimizeForRendering: function(value) {
		this._optimizeForRendering = value;
		return value;
	}
	,get_generateMipmaps: function() {
		return this._generateMipMaps;
	}
	,set_generateMipmaps: function(generateMipmaps) {
		this._generateMipMaps = generateMipmaps;
		return generateMipmaps;
	}
	,get_parseMipMaps: function() {
		return this._parseMipMaps;
	}
	,set_parseMipMaps: function(parseMipMaps) {
		this._parseMipMaps = parseMipMaps;
		return parseMipMaps;
	}
	,get_includeAnimation: function() {
		return this._includeAnimation;
	}
	,set_includeAnimation: function(value) {
		this._includeAnimation = value;
		return value;
	}
	,get_startAnimation: function() {
		return this._startAnimation;
	}
	,set_startAnimation: function(value) {
		this._startAnimation = value;
		return value;
	}
	,get_loadAsynchronously: function() {
		return this._loadAsynchronously;
	}
	,set_loadAsynchronously: function(value) {
		this._loadAsynchronously = value;
		return value;
	}
	,get_resizeSmoothly: function() {
		return this._resizeSmoothly;
	}
	,set_resizeSmoothly: function(value) {
		this._resizeSmoothly = value;
		return value;
	}
	,get_isCubeTexture: function() {
		return this._isCubeTexture;
	}
	,set_isCubeTexture: function(value) {
		this._isCubeTexture = value;
		return value;
	}
	,get_isRectangleTexture: function() {
		return this._isRectangleTexture;
	}
	,set_isRectangleTexture: function(value) {
		this._isRectangleTexture = value;
		return value;
	}
	,get_generateSmoothNormals: function() {
		return this._generateSmoothNormals;
	}
	,set_generateSmoothNormals: function(value) {
		this._generateSmoothNormals = value;
		return value;
	}
	,get_normalMaxSmoothingAngle: function() {
		return this._normalMaxSmoothingAngle;
	}
	,set_normalMaxSmoothingAngle: function(value) {
		this._normalMaxSmoothingAngle = value;
		return value;
	}
	,get_disposeIndexBufferAfterLoading: function() {
		return this._disposeIndexBufferAfterLoading;
	}
	,set_disposeIndexBufferAfterLoading: function(value) {
		this._disposeIndexBufferAfterLoading = value;
		return value;
	}
	,get_disposeVertexBufferAfterLoading: function() {
		return this._disposeVertexBufferAfterLoading;
	}
	,set_disposeVertexBufferAfterLoading: function(value) {
		this._disposeVertexBufferAfterLoading = value;
		return value;
	}
	,get_disposeTextureAfterLoading: function() {
		return this._disposeTextureAfterLoading;
	}
	,set_disposeTextureAfterLoading: function(value) {
		this._disposeTextureAfterLoading = value;
		return value;
	}
	,get_storeDataIfNotParsed: function() {
		return this._storeDataIfNotParsed;
	}
	,set_storeDataIfNotParsed: function(value) {
		this._storeDataIfNotParsed = value;
		return value;
	}
	,get_preserveMaterials: function() {
		return this._preserveMaterials;
	}
	,set_preserveMaterials: function(value) {
		this._preserveMaterials = value;
		return value;
	}
	,get_trackAssetDescriptor: function() {
		return this._trackAssetDescriptor;
	}
	,set_trackAssetDescriptor: function(value) {
		this._trackAssetDescriptor = value;
		return value;
	}
	,get_skinningFramerate: function() {
		return this._skinningFramerate;
	}
	,set_skinningFramerate: function(value) {
		this._skinningFramerate = value;
		return value;
	}
	,get_skinningMethod: function() {
		return this._skinningMethod;
	}
	,set_skinningMethod: function(value) {
		this._skinningMethod = value;
		return value;
	}
	,get_effect: function() {
		return this._effect;
	}
	,set_effect: function(effect) {
		this._effect = effect;
		return effect;
	}
	,get_material: function() {
		return this._material;
	}
	,set_material: function(material) {
		this._material = material;
		return material;
	}
	,registerTextureFormat: function(textureFormat) {
		this._textureFormats.push(textureFormat);
		return this;
	}
	,get_protocolFunction: function() {
		if(this._protocolFunction != null) {
			return this._protocolFunction;
		} else {
			return $bind(this,this.defaultProtocolFunction);
		}
	}
	,set_protocolFunction: function(func) {
		this._protocolFunction = func;
		return func;
	}
	,get_parserFunction: function() {
		return this._parserFunction;
	}
	,set_parserFunction: function(func) {
		this._parserFunction = func;
		return func;
	}
	,get_materialFunction: function() {
		return this._materialFunction;
	}
	,set_materialFunction: function(func) {
		this._materialFunction = func;
		return func;
	}
	,get_textureFunction: function() {
		return this._textureFunction;
	}
	,set_textureFunction: function(func) {
		this._textureFunction = func;
		return func;
	}
	,get_geometryFunction: function() {
		return this._geometryFunction;
	}
	,set_geometryFunction: function(func) {
		this._geometryFunction = func;
		return func;
	}
	,get_uriFunction: function() {
		return this._uriFunction;
	}
	,set_uriFunction: function(func) {
		this._uriFunction = func;
		return func;
	}
	,get_nodeFunction: function() {
		return this._nodeFunction;
	}
	,set_nodeFunction: function(func) {
		this._nodeFunction = func;
		return func;
	}
	,get_effectFunction: function() {
		return this._effectFunction;
	}
	,set_effectFunction: function(func) {
		this._effectFunction = func;
		return func;
	}
	,get_textureFormatFunction: function() {
		return this._textureFormatFunction;
	}
	,set_textureFormatFunction: function(func) {
		this._textureFormatFunction = func;
		return func;
	}
	,get_attributeFunction: function() {
		return this._attributeFunction;
	}
	,set_attributeFunction: function(func) {
		this._attributeFunction = func;
		return func;
	}
	,get_fileStatusFunction: function() {
		return this._fileStatusFunction;
	}
	,set_fileStatusFunction: function(func) {
		this._fileStatusFunction = func;
		return func;
	}
	,get_preventLoadingFunction: function() {
		return this._preventLoadingFunction;
	}
	,set_preventLoadingFunction: function(func) {
		this._preventLoadingFunction = func;
		return func;
	}
	,get_seekingOffset: function() {
		return this._seekingOffset;
	}
	,set_seekingOffset: function(value) {
		this._seekingOffset = value;
		return value;
	}
	,get_seekedLength: function() {
		return this._seekedLength;
	}
	,set_seekedLength: function(value) {
		this._seekedLength = value;
		return value;
	}
	,registerParser: function(extension,cls) {
		var ext = extension.toLowerCase();
		var _this = this._parsers;
		if(__map_reserved[ext] != null) {
			_this.setReserved(ext,cls);
		} else {
			_this.h[ext] = cls;
		}
		return this;
	}
	,getParser: function(extension) {
		if(this._parserFunction != null) {
			return this._parserFunction(extension);
		}
		var _this = this._parsers;
		if((__map_reserved[extension] != null ? _this.existsReserved(extension) : _this.h.hasOwnProperty(extension)) == false) {
			return null;
		} else {
			var _this1 = this._parsers;
			if(__map_reserved[extension] != null) {
				return _this1.getReserved(extension);
			} else {
				return _this1.h[extension];
			}
		}
	}
	,registerProtocol: function(cls,protocol) {
		var prefix = protocol.toLowerCase();
		var _this = this._protocols;
		if(__map_reserved[prefix] != null) {
			_this.setReserved(prefix,cls);
		} else {
			_this.h[prefix] = cls;
		}
		return this;
	}
	,getProtocol: function(protocol) {
		var p;
		var _this = this._protocols;
		if((__map_reserved[protocol] != null ? _this.existsReserved(protocol) : _this.h.hasOwnProperty(protocol)) == false) {
			p = null;
		} else {
			var _this1 = this._protocols;
			if(__map_reserved[protocol] != null) {
				p = _this1.getReserved(protocol);
			} else {
				p = _this1.h[protocol];
			}
		}
		if(p != null) {
			return p;
		}
		var defaultProtocol;
		var _this2 = minko_file_Options._defaultProtocols;
		if((__map_reserved[protocol] != null ? _this2.existsReserved(protocol) : _this2.h.hasOwnProperty(protocol)) == false) {
			defaultProtocol = null;
		} else {
			var _this3 = minko_file_Options._defaultProtocols;
			if(__map_reserved[protocol] != null) {
				defaultProtocol = _this3.getReserved(protocol);
			} else {
				defaultProtocol = _this3.h[protocol];
			}
		}
		return defaultProtocol;
	}
	,copyFrom: function(copy) {
		this._context = copy._context;
		this._assets = copy._assets;
		this._includePaths = copy._includePaths.concat([]);
		this._platforms = copy._platforms.concat([]);
		this._userFlags = copy._userFlags.concat([]);
		this._optimizeForRendering = copy._optimizeForRendering;
		this._parsers = copy._parsers;
		this._protocols = copy._protocols;
		this._generateMipMaps = copy._generateMipMaps;
		this._parseMipMaps = copy._parseMipMaps;
		this._resizeSmoothly = copy._resizeSmoothly;
		this._isCubeTexture = copy._isCubeTexture;
		this._isRectangleTexture = copy._isRectangleTexture;
		this._generateSmoothNormals = copy._generateSmoothNormals;
		this._normalMaxSmoothingAngle = copy._normalMaxSmoothingAngle;
		this._includeAnimation = copy._includeAnimation;
		this._startAnimation = copy._startAnimation;
		this._disposeIndexBufferAfterLoading = copy._disposeIndexBufferAfterLoading;
		this._disposeVertexBufferAfterLoading = copy._disposeVertexBufferAfterLoading;
		this._disposeTextureAfterLoading = copy._disposeTextureAfterLoading;
		this._storeDataIfNotParsed = copy._storeDataIfNotParsed;
		this._preserveMaterials = copy._preserveMaterials;
		this._trackAssetDescriptor = copy._trackAssetDescriptor;
		this._skinningFramerate = copy._skinningFramerate;
		this._skinningMethod = copy._skinningMethod;
		this._effect = copy._effect;
		this._textureFormats = copy._textureFormats;
		this._material = copy._material;
		this._materialFunction = copy._materialFunction;
		this._textureFunction = copy._textureFunction;
		this._geometryFunction = copy._geometryFunction;
		this._protocolFunction = copy._protocolFunction;
		this._parserFunction = copy._parserFunction;
		this._uriFunction = copy._uriFunction;
		this._nodeFunction = copy._nodeFunction;
		this._effectFunction = copy._effectFunction;
		this._textureFormatFunction = copy._textureFormatFunction;
		this._attributeFunction = copy._attributeFunction;
		this._fileStatusFunction = copy._fileStatusFunction;
		this._preventLoadingFunction = copy._preventLoadingFunction;
		this._loadAsynchronously = copy._loadAsynchronously;
		this._seekingOffset = copy._seekingOffset;
		this._seekedLength = copy._seekedLength;
		return this;
	}
	,initialize: function() {
		this.resetNotInheritedValues();
		this.initializeDefaultFunctions();
		var _this = this._parsers;
		if(!(__map_reserved["effect"] != null ? _this.existsReserved("effect") : _this.h.hasOwnProperty("effect"))) {
			this.registerParser("effect",function() {
				return new minko_file_EffectParser();
			});
		}
		var _this1 = minko_file_Options._defaultProtocols;
		if(!(__map_reserved["file"] != null ? _this1.existsReserved("file") : _this1.h.hasOwnProperty("file"))) {
			minko_file_Options.registerDefaultProtocol("file",function() {
				return new minko_file_FileProtocol();
			});
		}
	}
	,initializePlatforms: function() {
	}
	,initializeUserFlags: function() {
	}
	,initializeDefaultFunctions: function() {
		var options = this;
		if(this._materialFunction == null) {
			this._materialFunction = function(UnnamedParameter1,material) {
				return material;
			};
		}
		if(this._textureFunction == null) {
			this._textureFunction = function(UnnamedParameter11,texture) {
				return texture;
			};
		}
		if(this._geometryFunction == null) {
			this._geometryFunction = function(UnnamedParameter12,geom) {
				return geom;
			};
		}
		if(this._uriFunction == null) {
			this._uriFunction = function(uri) {
				return uri;
			};
		}
		if(this._nodeFunction == null) {
			this._nodeFunction = function(node) {
				return node;
			};
		}
		if(this._effectFunction == null) {
			this._effectFunction = function(effect) {
				return effect;
			};
		}
		this._textureFormatFunction = function(availableTextureFormats) {
			var defaultTextureFormats = [12,13,10,11,8,9,5,4,15,14,7,6,3,2,1,0];
			var textureFormats = options._textureFormats.length == 0 ? defaultTextureFormats : options._textureFormats;
			var textureFormatIt = Lambda.find(textureFormats,function(textureFormat) {
				return Lambda.has(availableTextureFormats,textureFormat);
			});
			if(textureFormatIt != null) {
				return textureFormatIt;
			}
			if(Lambda.has(textureFormats,0) && Lambda.has(availableTextureFormats,1)) {
				return 1;
			}
			if(Lambda.has(textureFormats,1) && Lambda.has(availableTextureFormats,0)) {
				return 0;
			}
			var errorMessage = "No desired texture format available";
			throw new js__$Boot_HaxeError(errorMessage);
		};
		if(this._material == null) {
			this._material = minko_file_Options._defaultMaterial;
		}
		if(this._attributeFunction == null) {
			this._attributeFunction = function(node1,key,value) {
			};
		}
		this._parserFunction = null;
		if(this._preventLoadingFunction == null) {
			this._preventLoadingFunction = function(filename) {
				return false;
			};
		}
	}
	,resetNotInheritedValues: function() {
		this.set_seekingOffset(0);
		this.set_seekedLength(0);
	}
	,defaultProtocolFunction: function(filename) {
		var protocol = "";
		var index = 0;
		var _g1 = 0;
		var _g = filename.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < filename.length - 2 && filename.charAt(i) == ":" && filename.charAt(i + 1) == "/" && filename.charAt(i + 2) == "/") {
				break;
			}
			protocol += filename.charAt(i);
			index = i;
		}
		if(index != filename.length) {
			var loader = this.getProtocol(protocol);
			if(loader != null) {
				return loader;
			}
		}
		return this.getProtocol("file");
	}
	,__class__: minko_file_Options
};
var minko_file_PNGParser = $hx_exports["minko"]["file"]["PNGParser"] = function() {
	minko_file_AbstractParser.call(this);
};
minko_file_PNGParser.__name__ = true;
minko_file_PNGParser.__super__ = minko_file_AbstractParser;
minko_file_PNGParser.prototype = $extend(minko_file_AbstractParser.prototype,{
	parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var _gthis = this;
		minko_utils_WebNodeTools.loadFromBytes("png",data,function(pd) {
			_gthis.__parse(filename,resolvedFilename,options,pd,assetLibrary);
		});
	}
	,__parse: function(filename,resolvedFilename,options,data,assetLibrary) {
		var bmpData = data.pixels;
		var width = data.width;
		var height = data.height;
		var texture = null;
		if(options.get_isCubeTexture()) {
			var parser = new minko_file_MipMapChainParser();
			var cubeTexture = parser.parseCubeTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),options.get_parseMipMaps() || options.get_generateMipmaps(),options.get_resizeSmoothly(),1,filename);
			cubeTexture = (options.get_textureFunction())(filename,cubeTexture);
			assetLibrary.setCubeTexture(filename,cubeTexture);
			texture = cubeTexture;
		} else if(!options.get_isRectangleTexture()) {
			var parser1 = new minko_file_MipMapChainParser();
			var texture2d = parser1.parseTexture(options.get_context(),width,height,bmpData,options.get_parseMipMaps(),options.get_parseMipMaps() || options.get_generateMipmaps(),options.get_resizeSmoothly(),1,filename);
			texture2d = (options.get_textureFunction())(filename,texture2d);
			texture = texture2d;
			assetLibrary.setTexture(filename,texture2d);
		}
		console.log("PNGParser" + filename);
		texture.upload();
		if(options.get_disposeTextureAfterLoading()) {
			texture.disposeData();
		}
		this.get_complete().execute(this);
	}
	,__class__: minko_file_PNGParser
});
var minko_geometry_Bone = $hx_exports["minko"]["geometry"]["Bone"] = function(node,offsetMatrix,vertexIds,vertexWeights) {
	this._node = node;
	this._offsetMatrix = offsetMatrix;
	this._vertexIds = vertexIds;
	this._vertexWeights = vertexWeights;
	if(this._vertexIds.length != this._vertexWeights.length) {
		throw new js__$Boot_HaxeError("A bone's arrays of vertex indices and vertex weights must have the same size.");
	}
};
minko_geometry_Bone.__name__ = true;
minko_geometry_Bone.create = function(node,offsetMatrix,vertexIds,vertexWeights) {
	return new minko_geometry_Bone(node,offsetMatrix,vertexIds,vertexWeights);
};
minko_geometry_Bone.prototype = {
	get_node: function() {
		return this._node;
	}
	,get_offsetMatrix: function() {
		return this._offsetMatrix;
	}
	,get_vertexIds: function() {
		return this._vertexIds;
	}
	,get_vertexWeights: function() {
		return this._vertexWeights;
	}
	,__class__: minko_geometry_Bone
};
var minko_geometry_Geometry = $hx_exports["minko"]["geometry"]["Geometry"] = function(name) {
	minko_Has_$uuid.call(this);
	this._data = minko_data_Provider.create();
	this._vertexSize = 0;
	this._numVertices = 0;
	this._indexBuffer = null;
	this._vertexBuffers = [];
	this._vbToVertexSizeChangedSlot = new haxe_ds_ObjectMap();
	this._data.set("name",name);
	this._data.set("uuid",this._data.get_uuid());
};
minko_geometry_Geometry.__name__ = true;
minko_geometry_Geometry.create = function() {
	return minko_geometry_Geometry.createbyName("");
};
minko_geometry_Geometry.createbyName = function(name) {
	if(name == null) {
		name = "geometry";
	}
	return new minko_geometry_Geometry(name);
};
minko_geometry_Geometry.__super__ = minko_Has_$uuid;
minko_geometry_Geometry.prototype = $extend(minko_Has_$uuid.prototype,{
	dispose: function() {
		this._data = null;
		this._vertexBuffers = null;
		this._indexBuffer = null;
	}
	,get_uuid: function() {
		return this._data.get_uuid();
	}
	,clone: function() {
		var geometry = new minko_geometry_Geometry("").copyFrom(this);
		return geometry;
	}
	,get_data: function() {
		return this._data;
	}
	,get_vertexBuffers: function() {
		return this._vertexBuffers;
	}
	,get_name: function() {
		return this._data.get("name");
	}
	,vertexBuffer: function(vertexAttributeName) {
		var vertexBufferIt = Lambda.find(this._vertexBuffers,function(vb) {
			return vb.hasAttribute(vertexAttributeName);
		});
		if(vertexBufferIt == null) {
			return null;
		}
		return vertexBufferIt;
	}
	,hasVertexBuffer: function(vertexBuffer) {
		return Lambda.has(this._vertexBuffers,vertexBuffer);
	}
	,hasVertexAttribute: function(vertexAttributeName) {
		return this._data.hasProperty(vertexAttributeName);
	}
	,set_indices: function(__indices) {
		this._indexBuffer = __indices;
		if(__indices.get_isReady()) {
			this._data.set("indices",__indices.get_id());
			this._data.set("firstIndex",0);
			this._data.set("numIndices",__indices.get_numIndices());
		}
		return __indices;
	}
	,get_indices: function() {
		return this._indexBuffer;
	}
	,addVertexBuffer: function(vertexBuffer) {
		if(this.hasVertexBuffer(vertexBuffer)) {
			throw new js__$Boot_HaxeError("vertexBuffer");
		}
		var bufVertexSize = vertexBuffer.get_vertexSize();
		var bufNumVertices = vertexBuffer.get_numVertices();
		var _g = 0;
		var _g1 = vertexBuffer.get_attributes();
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this._data.set(attribute.name,attribute);
		}
		this._vertexSize += bufVertexSize;
		this._data.set("vertex.size",this._vertexSize);
		if(this._vertexBuffers.length > 0 && this._numVertices != bufNumVertices) {
			throw new js__$Boot_HaxeError("inconsistent number of vertices between the geometry's vertex streams.");
		} else if(this._vertexBuffers.length == 0) {
			this._numVertices = bufNumVertices;
		}
		this._vertexBuffers.push(vertexBuffer);
		this._vbToVertexSizeChangedSlot.set(vertexBuffer,vertexBuffer.get_vertexSizeChanged().connect($bind(this,this.vertexSizeChanged)));
		this.computeCenterPosition();
	}
	,removeVertexBuffer: function(vertexBufferIt) {
		if(!this.hasVertexBuffer(vertexBufferIt)) {
			throw new js__$Boot_HaxeError("vertexBuffer");
		}
		var vertexBuffer = vertexBufferIt;
		var _g = 0;
		var _g1 = vertexBuffer.get_attributes();
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this._data.unset(attribute.name);
		}
		this._vertexSize -= vertexBuffer.get_vertexSize();
		this._data.set("vertex.size",this._vertexSize);
		HxOverrides.remove(this._vertexBuffers,vertexBufferIt);
		if(this._vertexBuffers.length == 0) {
			this._numVertices = 0;
		}
		this._vbToVertexSizeChangedSlot.h[vertexBuffer.__id__].disconnect();
		this._vbToVertexSizeChangedSlot.remove(vertexBuffer);
		vertexBuffer.dispose();
	}
	,removeVertexBufferbyName: function(attributeName) {
		var vertexBufferIt = Lambda.find(this._vertexBuffers,function(vb) {
			return vb.hasAttribute(attributeName);
		});
		if(vertexBufferIt == null) {
			throw new js__$Boot_HaxeError("attributeName = " + attributeName);
		}
		this.removeVertexBuffer(vertexBufferIt);
	}
	,get_numVertices: function() {
		return this._numVertices;
	}
	,get_vertexSize: function() {
		return this._vertexSize;
	}
	,computeNormals: function() {
		if(this.get_numVertices() == 0) {
			return this;
		}
		var normalBuffer = this.vertexBuffer("normal");
		var xyzBuffer = this.vertexBuffer("position");
		if(xyzBuffer == null) {
			throw new js__$Boot_HaxeError("Computation of normals requires positions.");
		}
		var uintIndices = this.get_indices().get_dataPointer();
		var numFaces = Math.floor(uintIndices.length / 3);
		var vertexIds = [0,0,0];
		var xyz = [];
		var xyzAttribute = xyzBuffer.attribute("position");
		var xyzSize = xyzAttribute.vertexSize;
		var xyzOffset = xyzAttribute.offset;
		var xyzData = xyzBuffer.get_data();
		var normalSize;
		var normalOffset;
		var normalsData;
		if(normalBuffer != null) {
			normalsData = normalBuffer.get_data();
			var normalAttribute = normalBuffer.attribute("normal");
			normalSize = normalAttribute.vertexSize;
			normalOffset = normalAttribute.offset;
		} else {
			var _g = [];
			var _g2 = 0;
			var _g1 = 3 * this.get_numVertices();
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(0.0);
			}
			normalsData = _g;
			normalSize = 3;
			normalOffset = 0;
		}
		var _g11 = 0;
		var _g3 = this.get_numVertices();
		while(_g11 < _g3) {
			var i1 = _g11++;
			var index = normalOffset + i1 * normalSize;
			normalsData[index] = 0.0;
			normalsData[index + 1] = 0.0;
			normalsData[index + 2] = 0.0;
		}
		var offset = 0;
		var _g12 = 0;
		var _g4 = numFaces;
		while(_g12 < _g4) {
			var i2 = _g12++;
			var _g21 = 0;
			while(_g21 < 3) {
				var k = _g21++;
				vertexIds[k] = uintIndices[offset++];
				var index1 = xyzOffset + vertexIds[k] * xyzSize;
				var this1 = new glm_Vec3Base();
				this1.x = xyzData[index1];
				this1.y = xyzData[index1 + 1];
				this1.z = xyzData[index1 + 2];
				xyz[k] = this1;
			}
			var a = xyz[0];
			var b = xyz[1];
			var this2 = new glm_Vec3Base();
			this2.x = 0;
			this2.y = 0;
			this2.z = 0;
			var dest = this2;
			dest.x = a.x - b.x;
			dest.y = a.y - b.y;
			dest.z = a.z - b.z;
			var a1 = dest;
			var a2 = xyz[0];
			var b1 = xyz[2];
			var this3 = new glm_Vec3Base();
			this3.x = 0;
			this3.y = 0;
			this3.z = 0;
			var dest1 = this3;
			dest1.x = a2.x - b1.x;
			dest1.y = a2.y - b1.y;
			dest1.z = a2.z - b1.z;
			var b2 = dest1;
			var this4 = new glm_Vec3Base();
			this4.x = 0;
			this4.y = 0;
			this4.z = 0;
			var dest2 = this4;
			var x = a1.y * b2.z - a1.z * b2.y;
			var y = a1.z * b2.x - a1.x * b2.z;
			var z = a1.x * b2.y - a1.y * b2.x;
			var this5 = new glm_Vec3Base();
			this5.x = x;
			this5.y = y;
			this5.z = z;
			dest2 = this5;
			var faceNormal = dest2;
			var _g22 = 0;
			while(_g22 < 3) {
				var k1 = _g22++;
				var index2 = normalOffset + normalSize * vertexIds[k1];
				normalsData[index2] += faceNormal.x;
				normalsData[index2 + 1] += faceNormal.y;
				normalsData[index2 + 2] += faceNormal.z;
			}
		}
		var _g13 = 0;
		var _g5 = this.get_numVertices();
		while(_g13 < _g5) {
			var i3 = _g13++;
			var indexOffset = normalOffset + i3 * normalSize;
			var x1 = normalsData[indexOffset];
			var y1 = normalsData[indexOffset + 1];
			var z1 = normalsData[indexOffset + 2];
			var lengthSquared = x1 * x1 + y1 * y1 + z1 * z1;
			var invLength = lengthSquared > glm_GLM.EPSILON ? 1.0 / Math.sqrt(lengthSquared) : 1.0;
			normalsData[indexOffset] *= invLength;
			normalsData[indexOffset + 1] *= invLength;
			normalsData[indexOffset + 2] *= invLength;
		}
		if(normalBuffer == null) {
			normalBuffer = minko_render_VertexBuffer.createbyData(xyzBuffer.get_context(),normalsData);
			normalBuffer.addAttribute("normal",normalSize,normalOffset);
			this.addVertexBuffer(normalBuffer);
			normalsData = null;
		}
		return this;
	}
	,computeTangentSpace: function(doNormals) {
		if(this.get_numVertices() == 0) {
			return this;
		}
		var xyzBuffer = this.vertexBuffer("position");
		if(xyzBuffer == null) {
			throw new js__$Boot_HaxeError("Computation of tangent space requires positions.");
		}
		var uvBuffer = this.vertexBuffer("uv");
		if(uvBuffer == null) {
			throw new js__$Boot_HaxeError("Computation of tangent space requires uvs.");
		}
		if(doNormals) {
			this.computeNormals();
		}
		var uintIndices = this.get_indices().get_dataPointer();
		var numFaces = Math.floor(uintIndices.length / 3);
		var vertexIds = [0,0,0];
		var xyz = [];
		var uv = [];
		var xyzSize = xyzBuffer.get_vertexSize();
		var xyzOffset = xyzBuffer.attribute("position").offset;
		var xyzData = xyzBuffer.get_data();
		var uvSize = uvBuffer.get_vertexSize();
		var uvOffset = uvBuffer.attribute("uv").offset;
		var uvData = uvBuffer.get_data();
		var _g = [];
		var _g2 = 0;
		var _g1 = 3 * this.get_numVertices();
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0.0);
		}
		var tangentsData = _g;
		var offset = 0;
		var _g21 = 0;
		var _g11 = numFaces;
		while(_g21 < _g11) {
			var i1 = _g21++;
			var _g3 = 0;
			while(_g3 < 3) {
				var k = _g3++;
				vertexIds[k] = uintIndices[offset++];
				var index = xyzOffset + vertexIds[k] * xyzSize;
				var this1 = new glm_Vec3Base();
				this1.x = xyzData[index];
				this1.y = xyzData[index + 1];
				this1.z = xyzData[index + 2];
				xyz[k] = this1;
				index = uvOffset + vertexIds[k] * uvSize;
				var this2 = new glm_Vec2Base();
				this2.x = uvData[index];
				this2.y = uvData[index + 1];
				uv[k] = this2;
			}
			var a = uv[0];
			var b = uv[2];
			var this3 = new glm_Vec2Base();
			this3.x = 0;
			this3.y = 0;
			var dest = this3;
			dest.x = a.x - b.x;
			dest.y = a.y - b.y;
			var uv02 = dest;
			var a1 = uv[1];
			var b1 = uv[2];
			var this4 = new glm_Vec2Base();
			this4.x = 0;
			this4.y = 0;
			var dest1 = this4;
			dest1.x = a1.x - b1.x;
			dest1.y = a1.y - b1.y;
			var uv12 = dest1;
			var denom = uv02.x * uv12.y - uv12.x * uv02.y;
			var invDenom = Math.abs(denom) > glm_GLM.EPSILON ? 1.0 / denom : 1.0;
			var a2 = xyz[0];
			var b2 = xyz[2];
			var this5 = new glm_Vec3Base();
			this5.x = 0;
			this5.y = 0;
			this5.z = 0;
			var dest2 = this5;
			dest2.x = a2.x - b2.x;
			dest2.y = a2.y - b2.y;
			dest2.z = a2.z - b2.z;
			var a3 = dest2;
			var s = uv12.y;
			var this6 = new glm_Vec3Base();
			this6.x = 0;
			this6.y = 0;
			this6.z = 0;
			var dest3 = this6;
			dest3.x = a3.x * s;
			dest3.y = a3.y * s;
			dest3.z = a3.z * s;
			var a4 = dest3;
			var a5 = xyz[1];
			var b3 = xyz[2];
			var this7 = new glm_Vec3Base();
			this7.x = 0;
			this7.y = 0;
			this7.z = 0;
			var dest4 = this7;
			dest4.x = a5.x - b3.x;
			dest4.y = a5.y - b3.y;
			dest4.z = a5.z - b3.z;
			var a6 = dest4;
			var s1 = uv02.y;
			var this8 = new glm_Vec3Base();
			this8.x = 0;
			this8.y = 0;
			this8.z = 0;
			var dest5 = this8;
			dest5.x = a6.x * s1;
			dest5.y = a6.y * s1;
			dest5.z = a6.z * s1;
			var b4 = dest5;
			var this9 = new glm_Vec3Base();
			this9.x = 0;
			this9.y = 0;
			this9.z = 0;
			var dest6 = this9;
			dest6.x = a4.x - b4.x;
			dest6.y = a4.y - b4.y;
			dest6.z = a4.z - b4.z;
			var a7 = dest6;
			var this10 = new glm_Vec3Base();
			this10.x = 0;
			this10.y = 0;
			this10.z = 0;
			var dest7 = this10;
			dest7.x = a7.x * invDenom;
			dest7.y = a7.y * invDenom;
			dest7.z = a7.z * invDenom;
			var faceTangent = dest7;
			var _g31 = 0;
			while(_g31 < 3) {
				var k1 = _g31++;
				var index1 = 3 * vertexIds[k1];
				tangentsData[index1] += faceTangent.x;
				tangentsData[index1 + 1] += faceTangent.y;
				tangentsData[index1 + 2] += faceTangent.z;
			}
		}
		var index2 = 0;
		var _g22 = 0;
		var _g12 = this.get_numVertices();
		while(_g22 < _g12) {
			var i2 = _g22++;
			var x = tangentsData[index2];
			var y = tangentsData[index2 + 1];
			var z = tangentsData[index2 + 2];
			var lengthSquared = x * x + y * y + z * z;
			var invLength = lengthSquared > glm_GLM.EPSILON ? 1.0 / Math.sqrt(lengthSquared) : 1.0;
			tangentsData[index2] *= invLength;
			tangentsData[index2 + 1] *= invLength;
			tangentsData[index2 + 2] *= invLength;
			index2 += 3;
		}
		var tangentsBuffer = minko_render_VertexBuffer.createbyData(xyzBuffer.get_context(),tangentsData);
		tangentsBuffer.addAttribute("tangent",3,0);
		this.addVertexBuffer(tangentsBuffer);
		return this;
	}
	,computeCenterPosition: function() {
		if(this.get_numVertices() == 0) {
			return this;
		}
		var xyzBuffer = this.vertexBuffer("position");
		if(xyzBuffer == null) {
			return this;
		}
		var xyzAttr = xyzBuffer.attribute("position");
		var xyzOffset = xyzAttr.offset;
		var xyzSize = Math.floor(Math.max(0,Math.min(3,xyzAttr.size)));
		var xyzData = xyzBuffer.get_data();
		var minXYZ = [Infinity,Infinity,Infinity];
		var maxXYZ = [-Infinity,-Infinity,-Infinity];
		var vertexIndex = xyzOffset;
		while(vertexIndex < xyzData.length) {
			var _g1 = 0;
			var _g = xyzSize;
			while(_g1 < _g) {
				var k = _g1++;
				var vk = xyzData[vertexIndex + k];
				minXYZ[k] = Math.min(minXYZ[k],vk);
				maxXYZ[k] = Math.max(maxXYZ[k],vk);
			}
			vertexIndex += xyzBuffer.get_vertexSize();
		}
		var this1 = new glm_Vec3Base();
		this1.x = minXYZ[0];
		this1.y = minXYZ[1];
		this1.z = minXYZ[2];
		var minPosition = this1;
		var this2 = new glm_Vec3Base();
		this2.x = maxXYZ[0];
		this2.y = maxXYZ[1];
		this2.z = maxXYZ[2];
		var maxPosition = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var dest = this3;
		dest.x = minPosition.x - maxPosition.x;
		dest.y = minPosition.y - maxPosition.y;
		dest.z = minPosition.z - maxPosition.z;
		var a = dest;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest1 = this4;
		dest1.x = a.x * .5;
		dest1.y = a.y * .5;
		dest1.z = a.z * .5;
		var centerPosition = dest1;
		this._data.set("centerPosition",centerPosition);
		return this;
	}
	,removeDuplicatedVertices: function() {
		var vertices = [];
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vb = _g1[_g];
			++_g;
			vertices.push(vb.get_data());
		}
		this.removeDuplicateVertices(this._indexBuffer.get_data(),vertices,this.get_numVertices());
	}
	,removeDuplicateVertices: function(indices,vertices,numVertices) {
		var newVertexCount = 0;
		var newLimit = 0;
		var hashToNewVertexId = new haxe_ds_StringMap();
		var oldVertexIdToNewVertexId_h = { };
		var _g1 = 0;
		var _g = numVertices;
		while(_g1 < _g) {
			var oldVertexId = _g1++;
			var hash = "";
			var _g2 = 0;
			while(_g2 < vertices.length) {
				var vb = vertices[_g2];
				++_g2;
				var vertexSize = Math.floor(vb.length / numVertices);
				var _g4 = 0;
				var _g3 = vertexSize;
				while(_g4 < _g3) {
					var i = _g4++;
					hash += vb[oldVertexId * vertexSize + i] + " ";
				}
			}
			var newVertexId = 0;
			if(!(__map_reserved[hash] != null ? hashToNewVertexId.existsReserved(hash) : hashToNewVertexId.h.hasOwnProperty(hash))) {
				newVertexId = newVertexCount++;
				if(__map_reserved[hash] != null) {
					hashToNewVertexId.setReserved(hash,newVertexId);
				} else {
					hashToNewVertexId.h[hash] = newVertexId;
				}
				newLimit = 1 + newVertexId;
				if(newVertexId != oldVertexId) {
					var _g21 = 0;
					while(_g21 < vertices.length) {
						var vb1 = vertices[_g21];
						++_g21;
						var vertexSize1 = Math.floor(vb1.length / numVertices);
						var _g41 = 0;
						var _g31 = vertexSize1;
						while(_g41 < _g31) {
							var i1 = _g41++;
							vb1[newVertexId * vertexSize1 + i1] = vb1[oldVertexId * vertexSize1 + i1];
						}
					}
				}
			} else {
				newVertexId = __map_reserved[hash] != null ? hashToNewVertexId.getReserved(hash) : hashToNewVertexId.h[hash];
			}
			oldVertexIdToNewVertexId_h[oldVertexId] = newVertexId;
		}
		var _g5 = 0;
		while(_g5 < vertices.length) {
			var vb2 = vertices[_g5];
			++_g5;
			var len = newLimit * vb2.length / numVertices;
			while(vb2.length > len) vb2.pop();
		}
		var _g11 = 0;
		var _g6 = indices.length;
		while(_g11 < _g6) {
			var i2 = _g11++;
			var index = indices[i2];
			indices[i2] = oldVertexIdToNewVertexId_h[index];
		}
	}
	,getVertexAttribute: function(attributeName) {
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			if(vertexBuffer.hasAttribute(attributeName)) {
				return vertexBuffer.attribute(attributeName);
			}
		}
		throw new js__$Boot_HaxeError("attributeName = " + attributeName);
	}
	,castRay: function(ray,distance,triangle,hitXyz,hitUv,hitNormal) {
		var EPSILON = 0.00001;
		var hit = false;
		var indicesData = this._indexBuffer.get_data();
		var numIndices = indicesData.length;
		var xyzBuffer = this.vertexBuffer("position");
		var xyzData = xyzBuffer.get_data();
		var xyzPtr = xyzData;
		var xyzVertexSize = xyzBuffer.get_vertexSize();
		var xyzOffset = xyzBuffer.attribute("position").offset;
		var minDistance = Infinity;
		var this1 = new glm_Vec2Base();
		this1.x = 0;
		this1.y = 0;
		var lambda = this1;
		var triangleIndice = -3;
		var this2 = new glm_Vec3Base();
		this2.x = 0;
		this2.y = 0;
		this2.z = 0;
		var v0 = this2;
		var this3 = new glm_Vec3Base();
		this3.x = 0;
		this3.y = 0;
		this3.z = 0;
		var v1 = this3;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var v2 = this4;
		var this5 = new glm_Vec3Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		var edge1 = this5;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		var edge2 = this6;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var pvec = this7;
		var this8 = new glm_Vec3Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		var tvec = this8;
		var this9 = new glm_Vec3Base();
		this9.x = 0;
		this9.y = 0;
		this9.z = 0;
		var qvec = this9;
		var dot = 0.0;
		var invDot = 0.0;
		var u = 0.0;
		var v = 0.0;
		var t = 0.0;
		var i = 0;
		while(i < numIndices) {
			var index = indicesData[i] * xyzVertexSize;
			var this10 = new glm_Vec3Base();
			this10.x = xyzPtr[index];
			this10.y = xyzPtr[index + 1];
			this10.z = xyzPtr[index + 2];
			v0 = this10;
			index = indicesData[i + 1] * xyzVertexSize;
			var this11 = new glm_Vec3Base();
			this11.x = xyzPtr[index];
			this11.y = xyzPtr[index + 1];
			this11.z = xyzPtr[index + 2];
			v1 = this11;
			index = indicesData[i + 2] * xyzVertexSize;
			var this12 = new glm_Vec3Base();
			this12.x = xyzPtr[index];
			this12.y = xyzPtr[index + 1];
			this12.z = xyzPtr[index + 2];
			v2 = this12;
			var this13 = new glm_Vec3Base();
			this13.x = 0;
			this13.y = 0;
			this13.z = 0;
			var dest = this13;
			dest.x = v1.x - v0.x;
			dest.y = v1.y - v0.y;
			dest.z = v1.z - v0.z;
			edge1 = dest;
			var this14 = new glm_Vec3Base();
			this14.x = 0;
			this14.y = 0;
			this14.z = 0;
			var dest1 = this14;
			dest1.x = v2.x - v0.x;
			dest1.y = v2.y - v0.y;
			dest1.z = v2.z - v0.z;
			edge2 = dest1;
			var a = ray.get_direction();
			var this15 = new glm_Vec3Base();
			this15.x = 0;
			this15.y = 0;
			this15.z = 0;
			var dest2 = this15;
			var x = a.y * edge2.z - a.z * edge2.y;
			var y = a.z * edge2.x - a.x * edge2.z;
			var z = a.x * edge2.y - a.y * edge2.x;
			var this16 = new glm_Vec3Base();
			this16.x = x;
			this16.y = y;
			this16.z = z;
			dest2 = this16;
			pvec = dest2;
			dot = edge1.x * pvec.x + edge1.y * pvec.y + edge1.z * pvec.z;
			if(dot > -EPSILON && dot < EPSILON) {
				continue;
			}
			invDot = 1.0 / dot;
			var a1 = ray.get_origin();
			var this17 = new glm_Vec3Base();
			this17.x = 0;
			this17.y = 0;
			this17.z = 0;
			var dest3 = this17;
			dest3.x = a1.x - v0.x;
			dest3.y = a1.y - v0.y;
			dest3.z = a1.z - v0.z;
			tvec = dest3;
			u = (tvec.x * pvec.x + tvec.y * pvec.y + tvec.z * pvec.z) * invDot;
			if(u < 0.0 || u > 1.0) {
				continue;
			}
			var this18 = new glm_Vec3Base();
			this18.x = 0;
			this18.y = 0;
			this18.z = 0;
			var dest4 = this18;
			var x1 = tvec.y * edge1.z - tvec.z * edge1.y;
			var y1 = tvec.z * edge1.x - tvec.x * edge1.z;
			var z1 = tvec.x * edge1.y - tvec.y * edge1.x;
			var this19 = new glm_Vec3Base();
			this19.x = x1;
			this19.y = y1;
			this19.z = z1;
			dest4 = this19;
			qvec = dest4;
			var a2 = ray.get_direction();
			v = (a2.x * qvec.x + a2.y * qvec.y + a2.z * qvec.z) * invDot;
			if(v < 0.0 || u + v > 1.0) {
				continue;
			}
			t = (qvec.x * edge2.x + qvec.y * edge2.y + qvec.z * edge2.z) * invDot;
			if(t < minDistance && t > 0) {
				minDistance = t;
				distance = t;
				triangle = i;
				hit = true;
				if(hitUv != null) {
					lambda.x = u;
					lambda.y = v;
				}
				if(hitXyz != null) {
					var x2 = ray.get_origin().x + minDistance * ray.get_direction().x;
					var y2 = ray.get_origin().y + minDistance * ray.get_direction().y;
					var z2 = ray.get_origin().z + minDistance * ray.get_direction().z;
					var this20 = new glm_Vec3Base();
					this20.x = x2;
					this20.y = y2;
					this20.z = z2;
					hitXyz = this20;
				}
			}
			if(hitUv != null) {
				this.getHitUv(triangle,lambda,hitUv);
			}
			if(hitNormal != null) {
				this.getHitNormal(triangle,hitNormal);
			}
			i += 3;
		}
		return hit;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vb = _g1[_g];
			++_g;
			vb.upload();
		}
		this._indexBuffer.upload();
	}
	,disposeIndexBufferData: function() {
		this._indexBuffer.disposeData();
	}
	,disposeVertexBufferData: function() {
		var _g = 0;
		var _g1 = this._vertexBuffers;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.disposeData();
		}
	}
	,copyFrom: function(geometry) {
		this._data = minko_data_Provider.createbyProvider(geometry._data);
		this._vertexSize = geometry._vertexSize;
		this._numVertices = geometry._numVertices;
		this._vertexBuffers = geometry._vertexBuffers.concat([]);
		this._indexBuffer = geometry._indexBuffer;
		return this;
	}
	,set_vertexSize: function(value) {
		this._vertexSize = value;
		return value;
	}
	,vertexSizeChanged: function(vertexBuffer,offset) {
		this._vertexSize += offset;
	}
	,getHitUv: function(triangle,lambda,hitUv) {
		var uvBuffer = this.vertexBuffer("uv");
		var uvData = uvBuffer.get_data();
		var uvPtr = uvData[0];
		var uvVertexSize = uvBuffer.get_vertexSize();
		var uvOffset = uvBuffer.attribute("uv").offset;
		var indicesData = this._indexBuffer.get_data();
		var u0 = uvData[indicesData[triangle] * uvVertexSize + uvOffset];
		var v0 = uvData[indicesData[triangle] * uvVertexSize + uvOffset + 1];
		var u1 = uvData[indicesData[triangle + 1] * uvVertexSize + uvOffset];
		var v1 = uvData[indicesData[triangle + 1] * uvVertexSize + uvOffset + 1];
		var u2 = uvData[indicesData[triangle + 2] * uvVertexSize + uvOffset];
		var v2 = uvData[indicesData[triangle + 2] * uvVertexSize + uvOffset + 1];
		var z = 1.0 - lambda.x - lambda.y;
		var x = z * u0 + lambda.x * u1 + lambda.y * u2;
		var y = z * v0 + lambda.x * v1 + lambda.y * v2;
		var this1 = new glm_Vec2Base();
		this1.x = x;
		this1.y = y;
		hitUv = this1;
	}
	,getHitNormal: function(triangle,hitNormal) {
		var normalBuffer = this.vertexBuffer("normal");
		var normalData = normalBuffer.get_data();
		var normalVertexSize = normalBuffer.get_vertexSize();
		var normalOffset = normalBuffer.attribute("normal").offset;
		var indicesData = this._indexBuffer.get_data();
		var index = indicesData[triangle] * normalVertexSize + normalOffset;
		var this1 = new glm_Vec3Base();
		this1.x = normalData[index];
		this1.y = normalData[index + 1];
		this1.z = normalData[index + 2];
		var v0 = this1;
		index = indicesData[triangle + 1] * normalVertexSize + normalOffset;
		var this2 = new glm_Vec3Base();
		this2.x = normalData[index];
		this2.y = normalData[index + 1];
		this2.z = normalData[index + 2];
		var v1 = this2;
		index = indicesData[triangle + 2] * normalVertexSize + normalOffset;
		var this3 = new glm_Vec3Base();
		this3.x = normalData[index];
		this3.y = normalData[index + 1];
		this3.z = normalData[index + 2];
		var v2 = this3;
		var this4 = new glm_Vec3Base();
		this4.x = 0;
		this4.y = 0;
		this4.z = 0;
		var dest = this4;
		dest.x = v1.x - v0.x;
		dest.y = v1.y - v0.y;
		dest.z = v1.z - v0.z;
		var v = dest;
		var this5 = new glm_Vec3Base();
		this5.x = 0;
		this5.y = 0;
		this5.z = 0;
		var dest1 = this5;
		var length = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1.x = v.x * mult;
		dest1.y = v.y * mult;
		dest1.z = v.z * mult;
		var edge1 = dest1;
		var this6 = new glm_Vec3Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		var dest2 = this6;
		dest2.x = v2.x - v0.x;
		dest2.y = v2.y - v0.y;
		dest2.z = v2.z - v0.z;
		var v3 = dest2;
		var this7 = new glm_Vec3Base();
		this7.x = 0;
		this7.y = 0;
		this7.z = 0;
		var dest3 = this7;
		var length1 = Math.sqrt(v3.x * v3.x + v3.y * v3.y + v3.z * v3.z);
		var mult1 = 0;
		if(length1 >= glm_GLM.EPSILON) {
			mult1 = 1 / length1;
		}
		dest3.x = v3.x * mult1;
		dest3.y = v3.y * mult1;
		dest3.z = v3.z * mult1;
		var edge2 = dest3;
		var this8 = new glm_Vec3Base();
		this8.x = 0;
		this8.y = 0;
		this8.z = 0;
		var dest4 = this8;
		var x = edge2.y * edge1.z - edge2.z * edge1.y;
		var y = edge2.z * edge1.x - edge2.x * edge1.z;
		var z = edge2.x * edge1.y - edge2.y * edge1.x;
		var this9 = new glm_Vec3Base();
		this9.x = x;
		this9.y = y;
		this9.z = z;
		dest4 = this9;
		hitNormal = dest4;
	}
	,__class__: minko_geometry_Geometry
});
var minko_geometry_Skin = $hx_exports["minko"]["geometry"]["Skin"] = function(numBones,duration,numFrames) {
	if(numFrames == null) {
		numFrames = 0;
	}
	if(duration == null) {
		duration = 0;
	}
	if(numBones == null) {
		numBones = 0;
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = numBones;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(null);
	}
	this._bones = _g;
	this._numBones = numBones;
	this._duration = duration;
	this._timeFactor = duration > 0 ? numFrames / duration : 0.0;
	var _g11 = [];
	var _g3 = 0;
	var _g21 = numFrames;
	while(_g3 < _g21) {
		var i1 = _g3++;
		var _g4 = [];
		var _g6 = 0;
		var _g5 = numBones;
		while(_g6 < _g5) {
			var j = _g6++;
			var this1 = new glm_Mat4Base();
			this1._00 = 0;
			this1._01 = 0;
			this1._02 = 0;
			this1._03 = 0;
			this1._10 = 0;
			this1._11 = 0;
			this1._12 = 0;
			this1._13 = 0;
			this1._20 = 0;
			this1._21 = 0;
			this1._22 = 0;
			this1._23 = 0;
			this1._30 = 0;
			this1._31 = 0;
			this1._32 = 0;
			this1._33 = 0;
			var dest = this1;
			dest._00 = 1;
			dest._10 = 0;
			dest._20 = 0;
			dest._30 = 0;
			dest._01 = 0;
			dest._11 = 1;
			dest._21 = 0;
			dest._31 = 0;
			dest._02 = 0;
			dest._12 = 0;
			dest._22 = 1;
			dest._32 = 0;
			dest._03 = 0;
			dest._13 = 0;
			dest._23 = 0;
			dest._33 = 1;
			_g4.push(dest);
		}
		_g11.push(_g4);
	}
	this._boneMatricesPerFrame = _g11;
	this._maxNumVertexBones = 0;
	this._numVertexBones = [];
	this._vertexBones = [];
	this._vertexBoneWeights = [];
};
minko_geometry_Skin.__name__ = true;
minko_geometry_Skin.create = function(numBones,duration,numFrames) {
	return new minko_geometry_Skin(numBones,duration,numFrames);
};
minko_geometry_Skin.prototype = {
	clone: function() {
		var skin = new minko_geometry_Skin().copyFrom(this);
		return skin;
	}
	,get_numBones: function() {
		return this._numBones;
	}
	,get_maxNumVertexBones: function() {
		return this._maxNumVertexBones;
	}
	,get_bones: function() {
		return this._bones;
	}
	,set_bones: function(v) {
		this._bones = v;
		return v;
	}
	,getBone: function(boneId) {
		return this._bones[boneId];
	}
	,setBone: function(boneId,value) {
		this._bones[boneId] = value;
	}
	,get_duration: function() {
		return this._duration;
	}
	,getFrameId: function(time) {
		var frameId = time * this._timeFactor;
		return Math.floor(Math.min(frameId,this.get_numFrames() - 1));
	}
	,get_numFrames: function() {
		return this._boneMatricesPerFrame.length;
	}
	,set_boneMatricesPerFrame: function(v) {
		this._boneMatricesPerFrame = v;
		return v;
	}
	,get_boneMatricesPerFrame: function() {
		return this._boneMatricesPerFrame;
	}
	,getMatrices: function(frameId) {
		return this._boneMatricesPerFrame[frameId];
	}
	,setMatrix: function(frameId,boneId,value) {
		this._boneMatricesPerFrame[frameId][boneId] = value;
	}
	,get_numVertices: function() {
		return this._numVertexBones.length;
	}
	,numVertexBones: function(vertexId) {
		return this._numVertexBones[vertexId];
	}
	,vertexBoneData: function(vertexId,j,boneId,boneWeight) {
		var index = this.vertexArraysIndex(vertexId,j);
		boneId = this._vertexBones[index];
		boneWeight = this._vertexBoneWeights[index];
		return new minko_Tuple(boneId,boneWeight);
	}
	,vertexBoneId: function(vertexId,j) {
		return this._vertexBones[this.vertexArraysIndex(vertexId,j)];
	}
	,vertexBoneWeight: function(vertexId,j) {
		return this._vertexBoneWeights[this.vertexArraysIndex(vertexId,j)];
	}
	,reorganizeByVertices: function() {
		this._numVertexBones = null;
		this._vertexBones = null;
		this._vertexBoneWeights = null;
		var lastId = this.get_lastVertexId();
		var numVertices = lastId + 1;
		var numBones = this._bones.length;
		var _g = [];
		var _g2 = 0;
		var _g1 = numVertices;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0);
		}
		this._numVertexBones = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g21 = numVertices * numBones;
		while(_g3 < _g21) {
			var i1 = _g3++;
			_g11.push(0);
		}
		this._vertexBones = _g11;
		var _g22 = [];
		var _g4 = 0;
		var _g31 = numVertices * numBones;
		while(_g4 < _g31) {
			var i2 = _g4++;
			_g22.push(0.0);
		}
		this._vertexBoneWeights = _g22;
		var _g41 = 0;
		var _g32 = numBones;
		while(_g41 < _g32) {
			var boneId = _g41++;
			var bone = this._bones[boneId];
			var vertexIds = bone.get_vertexIds();
			var vertexWeights = bone.get_vertexWeights();
			var _g6 = 0;
			var _g5 = vertexIds.length;
			while(_g6 < _g5) {
				var i3 = _g6++;
				if(vertexWeights[i3] > 0.0) {
					var vId = vertexIds[i3];
					var j = this._numVertexBones[vId];
					++this._numVertexBones[vId];
					var index = this.vertexArraysIndex(vId,j);
					this._vertexBones[index] = boneId;
					this._vertexBoneWeights[index] = vertexWeights[i3];
				}
			}
		}
		this._maxNumVertexBones = 0;
		var _g42 = 0;
		var _g33 = numVertices;
		while(_g42 < _g33) {
			var vId1 = _g42++;
			this._maxNumVertexBones = Math.floor(Math.max(this._maxNumVertexBones,this._numVertexBones[vId1]));
		}
		return this;
	}
	,disposeBones: function() {
		this._bones = null;
		return this;
	}
	,copyFrom: function(skin) {
		this._bones = [];
		this._numBones = skin._numBones;
		this._duration = skin._duration;
		this._timeFactor = skin._timeFactor;
		this._boneMatricesPerFrame = skin._boneMatricesPerFrame.concat([]);
		this._maxNumVertexBones = skin._maxNumVertexBones;
		this._numVertexBones = skin._numVertexBones.concat([]);
		this._vertexBones = skin._vertexBones.concat([]);
		this._vertexBoneWeights = skin._vertexBoneWeights.concat([]);
		return this;
	}
	,get_lastVertexId: function() {
		var lastId = 0;
		var _g1 = 0;
		var _g = this._bones.length;
		while(_g1 < _g) {
			var boneId = _g1++;
			var vertexId = this._bones[boneId].get_vertexIds();
			var _g3 = 0;
			var _g2 = vertexId.length;
			while(_g3 < _g2) {
				var i = _g3++;
				lastId = Math.floor(Math.max(lastId,vertexId[i]));
			}
		}
		return lastId;
	}
	,vertexArraysIndex: function(vertexId,j) {
		return j + this._numBones * vertexId;
	}
	,__class__: minko_geometry_Skin
};
var minko_input_Joystick = $hx_exports["minko"]["input"]["Joystick"] = function(canvas,joystickId) {
	this._canvas = canvas;
	this._joystickAxisMotion = new minko_signal_Signal4();
	this._joystickHatMotion = new minko_signal_Signal4();
	this._joystickButtonUp = new minko_signal_Signal3();
	this._joystickButtonDown = new minko_signal_Signal3();
	this._joystickId = joystickId;
};
minko_input_Joystick.__name__ = true;
minko_input_Joystick.prototype = {
	get_joystickId: function() {
		return this._joystickId;
	}
	,get_joystickAxisMotion: function() {
		return this._joystickAxisMotion;
	}
	,get_joystickHatMotion: function() {
		return this._joystickHatMotion;
	}
	,get_joystickButtonDown: function() {
		return this._joystickButtonDown;
	}
	,get_joystickButtonUp: function() {
		return this._joystickButtonUp;
	}
	,__class__: minko_input_Joystick
};
var minko_input_KeyMap = $hx_exports["minko"]["input"]["KeyMap"] = function() { };
minko_input_KeyMap.__name__ = true;
minko_input_KeyMap.initializeKeyToKeyCodeMap = function() {
	var keyToKeyCodeMap = new haxe_ds_IntMap();
	keyToKeyCodeMap.h[3] = 24;
	keyToKeyCodeMap.h[8] = 8;
	keyToKeyCodeMap.h[9] = 9;
	keyToKeyCodeMap.h[12] = 12;
	keyToKeyCodeMap.h[13] = 13;
	keyToKeyCodeMap.h[27] = 27;
	keyToKeyCodeMap.h[28] = 28;
	keyToKeyCodeMap.h[29] = 29;
	keyToKeyCodeMap.h[30] = 30;
	keyToKeyCodeMap.h[31] = 31;
	keyToKeyCodeMap.h[32] = 32;
	keyToKeyCodeMap.h[46] = 127;
	keyToKeyCodeMap.h[48] = 48;
	keyToKeyCodeMap.h[49] = 49;
	keyToKeyCodeMap.h[50] = 50;
	keyToKeyCodeMap.h[51] = 51;
	keyToKeyCodeMap.h[52] = 52;
	keyToKeyCodeMap.h[53] = 53;
	keyToKeyCodeMap.h[54] = 54;
	keyToKeyCodeMap.h[55] = 55;
	keyToKeyCodeMap.h[56] = 56;
	keyToKeyCodeMap.h[57] = 57;
	keyToKeyCodeMap.h[58] = 58;
	keyToKeyCodeMap.h[59] = 59;
	keyToKeyCodeMap.h[60] = 60;
	keyToKeyCodeMap.h[61] = 61;
	keyToKeyCodeMap.h[62] = 62;
	keyToKeyCodeMap.h[63] = 63;
	keyToKeyCodeMap.h[64] = 64;
	keyToKeyCodeMap.h[65] = 97;
	keyToKeyCodeMap.h[66] = 98;
	keyToKeyCodeMap.h[67] = 99;
	keyToKeyCodeMap.h[68] = 100;
	keyToKeyCodeMap.h[69] = 101;
	keyToKeyCodeMap.h[70] = 102;
	keyToKeyCodeMap.h[71] = 103;
	keyToKeyCodeMap.h[72] = 104;
	keyToKeyCodeMap.h[73] = 105;
	keyToKeyCodeMap.h[74] = 106;
	keyToKeyCodeMap.h[75] = 107;
	keyToKeyCodeMap.h[76] = 108;
	keyToKeyCodeMap.h[77] = 109;
	keyToKeyCodeMap.h[78] = 110;
	keyToKeyCodeMap.h[79] = 111;
	keyToKeyCodeMap.h[80] = 112;
	keyToKeyCodeMap.h[81] = 113;
	keyToKeyCodeMap.h[82] = 114;
	keyToKeyCodeMap.h[83] = 115;
	keyToKeyCodeMap.h[84] = 116;
	keyToKeyCodeMap.h[85] = 117;
	keyToKeyCodeMap.h[86] = 118;
	keyToKeyCodeMap.h[87] = 119;
	keyToKeyCodeMap.h[88] = 120;
	keyToKeyCodeMap.h[89] = 121;
	keyToKeyCodeMap.h[90] = 122;
	keyToKeyCodeMap.h[160] = 94;
	keyToKeyCodeMap.h[161] = 33;
	keyToKeyCodeMap.h[162] = 34;
	keyToKeyCodeMap.h[163] = 35;
	keyToKeyCodeMap.h[164] = 36;
	keyToKeyCodeMap.h[165] = 37;
	keyToKeyCodeMap.h[166] = 38;
	keyToKeyCodeMap.h[167] = 95;
	keyToKeyCodeMap.h[168] = 40;
	keyToKeyCodeMap.h[169] = 41;
	keyToKeyCodeMap.h[170] = 42;
	keyToKeyCodeMap.h[171] = 43;
	keyToKeyCodeMap.h[172] = 124;
	keyToKeyCodeMap.h[173] = 45;
	keyToKeyCodeMap.h[174] = 123;
	keyToKeyCodeMap.h[175] = 125;
	keyToKeyCodeMap.h[176] = 126;
	keyToKeyCodeMap.h[188] = 44;
	keyToKeyCodeMap.h[190] = 46;
	keyToKeyCodeMap.h[191] = 47;
	keyToKeyCodeMap.h[192] = 96;
	keyToKeyCodeMap.h[219] = 91;
	keyToKeyCodeMap.h[220] = 92;
	keyToKeyCodeMap.h[221] = 93;
	keyToKeyCodeMap.h[222] = 39;
	return keyToKeyCodeMap;
};
minko_input_KeyMap.initializeKeyToScanCodeMap = function() {
	var keyToScanCodeMap = new haxe_ds_IntMap();
	keyToScanCodeMap.h[6] = 117;
	keyToScanCodeMap.h[145] = 71;
	keyToScanCodeMap.h[21] = 144;
	keyToScanCodeMap.h[22] = 144;
	keyToScanCodeMap.h[23] = 144;
	keyToScanCodeMap.h[24] = 144;
	keyToScanCodeMap.h[25] = 144;
	keyToScanCodeMap.h[16] = 225;
	keyToScanCodeMap.h[17] = 224;
	keyToScanCodeMap.h[18] = 226;
	keyToScanCodeMap.h[19] = 72;
	keyToScanCodeMap.h[20] = 57;
	keyToScanCodeMap.h[33] = 75;
	keyToScanCodeMap.h[34] = 78;
	keyToScanCodeMap.h[35] = 77;
	keyToScanCodeMap.h[36] = 74;
	keyToScanCodeMap.h[37] = 80;
	keyToScanCodeMap.h[38] = 82;
	keyToScanCodeMap.h[39] = 79;
	keyToScanCodeMap.h[40] = 81;
	keyToScanCodeMap.h[41] = 119;
	keyToScanCodeMap.h[43] = 116;
	keyToScanCodeMap.h[44] = 70;
	keyToScanCodeMap.h[45] = 73;
	keyToScanCodeMap.h[224] = 231;
	keyToScanCodeMap.h[225] = 230;
	keyToScanCodeMap.h[91] = 227;
	keyToScanCodeMap.h[93] = 101;
	keyToScanCodeMap.h[95] = 282;
	keyToScanCodeMap.h[96] = 98;
	keyToScanCodeMap.h[97] = 89;
	keyToScanCodeMap.h[98] = 90;
	keyToScanCodeMap.h[99] = 91;
	keyToScanCodeMap.h[100] = 92;
	keyToScanCodeMap.h[101] = 93;
	keyToScanCodeMap.h[102] = 94;
	keyToScanCodeMap.h[103] = 95;
	keyToScanCodeMap.h[104] = 96;
	keyToScanCodeMap.h[105] = 97;
	keyToScanCodeMap.h[106] = 85;
	keyToScanCodeMap.h[107] = 87;
	keyToScanCodeMap.h[108] = 159;
	keyToScanCodeMap.h[109] = 86;
	keyToScanCodeMap.h[110] = 220;
	keyToScanCodeMap.h[111] = 84;
	keyToScanCodeMap.h[112] = 58;
	keyToScanCodeMap.h[113] = 59;
	keyToScanCodeMap.h[114] = 60;
	keyToScanCodeMap.h[115] = 61;
	keyToScanCodeMap.h[116] = 62;
	keyToScanCodeMap.h[117] = 63;
	keyToScanCodeMap.h[118] = 64;
	keyToScanCodeMap.h[119] = 65;
	keyToScanCodeMap.h[120] = 66;
	keyToScanCodeMap.h[121] = 67;
	keyToScanCodeMap.h[122] = 68;
	keyToScanCodeMap.h[123] = 69;
	keyToScanCodeMap.h[124] = 104;
	keyToScanCodeMap.h[125] = 105;
	keyToScanCodeMap.h[126] = 106;
	keyToScanCodeMap.h[127] = 107;
	keyToScanCodeMap.h[128] = 108;
	keyToScanCodeMap.h[129] = 109;
	keyToScanCodeMap.h[130] = 110;
	keyToScanCodeMap.h[131] = 111;
	keyToScanCodeMap.h[132] = 112;
	keyToScanCodeMap.h[133] = 113;
	keyToScanCodeMap.h[134] = 114;
	keyToScanCodeMap.h[135] = 115;
	keyToScanCodeMap.h[144] = 83;
	keyToScanCodeMap.h[181] = 127;
	keyToScanCodeMap.h[182] = 129;
	keyToScanCodeMap.h[183] = 128;
	keyToScanCodeMap.h[300] = 228;
	keyToScanCodeMap.h[301] = 229;
	return keyToScanCodeMap;
};
var minko_input_Keyboard = $hx_exports["minko"]["input"]["Keyboard"] = function() {
	this._down = new minko_signal_Signal();
	this._up = new minko_signal_Signal();
	this._textInput = new minko_signal_Signal2();
	this._keyDown = new haxe_ds_IntMap();
	this._keyUp = new haxe_ds_IntMap();
};
minko_input_Keyboard.__name__ = true;
minko_input_Keyboard.create = function() {
	return new minko_input_Keyboard();
};
minko_input_Keyboard.getKeyName = function(key) {
	return minko_input_Keyboard._keyToName[key];
};
minko_input_Keyboard.initializeKeyNames = function() {
	var names = [];
	names[3] = "CANCEL";
	names[6] = "HELP";
	names[8] = "BACK_SPACE";
	names[9] = "TAB";
	names[12] = "CLEAR";
	names[13] = "RETURN";
	names[14] = "ENTER";
	names[16] = "SHIFT";
	names[17] = "CONTROL";
	names[18] = "ALT";
	names[19] = "PAUSE";
	names[20] = "CAPS_LOCK";
	names[21] = "KANA";
	names[22] = "EISU";
	names[23] = "JUNJA";
	names[24] = "FINAL";
	names[25] = "KANJI";
	names[27] = "ESCAPE";
	names[28] = "CONVERT";
	names[29] = "NONCONVERT";
	names[30] = "ACCEPT";
	names[31] = "MODECHANGE";
	names[32] = "SPACE";
	names[33] = "PAGE_UP";
	names[34] = "PAGE_DOWN";
	names[35] = "END";
	names[36] = "HOME";
	names[37] = "LEFT";
	names[38] = "UP";
	names[39] = "RIGHT";
	names[40] = "DOWN";
	names[41] = "SELECT";
	names[42] = "PRINT";
	names[43] = "EXECUTE";
	names[44] = "PRINTSCREEN";
	names[45] = "INSERT";
	names[46] = "DELETE";
	names[48] = "_0";
	names[49] = "_1";
	names[50] = "_2";
	names[51] = "_3";
	names[52] = "_4";
	names[53] = "_5";
	names[54] = "_6";
	names[55] = "_7";
	names[56] = "_8";
	names[57] = "_9";
	names[58] = "COLON";
	names[59] = "SEMICOLON";
	names[60] = "LESS_THAN";
	names[61] = "EQUALS";
	names[62] = "GREATER_THAN";
	names[63] = "QUESTION_MARK";
	names[64] = "AT";
	names[65] = "A";
	names[66] = "B";
	names[67] = "C";
	names[68] = "D";
	names[69] = "E";
	names[70] = "F";
	names[71] = "G";
	names[72] = "H";
	names[73] = "I";
	names[74] = "J";
	names[75] = "K";
	names[76] = "L";
	names[77] = "M";
	names[78] = "N";
	names[79] = "O";
	names[80] = "P";
	names[81] = "Q";
	names[82] = "R";
	names[83] = "S";
	names[84] = "T";
	names[85] = "U";
	names[86] = "V";
	names[87] = "W";
	names[88] = "X";
	names[89] = "Y";
	names[90] = "Z";
	names[91] = "WIN";
	names[93] = "CONTEXT_MENU";
	names[95] = "SLEEP";
	names[96] = "NUMPAD0";
	names[97] = "NUMPAD1";
	names[98] = "NUMPAD2";
	names[99] = "NUMPAD3";
	names[100] = "NUMPAD4";
	names[101] = "NUMPAD5";
	names[102] = "NUMPAD6";
	names[103] = "NUMPAD7";
	names[104] = "NUMPAD8";
	names[105] = "NUMPAD9";
	names[106] = "MULTIPLY";
	names[107] = "ADD";
	names[108] = "SEPARATOR";
	names[109] = "SUBTRACT";
	names[110] = "DECIMAL";
	names[111] = "DIVIDE";
	names[112] = "F1";
	names[113] = "F2";
	names[114] = "F3";
	names[115] = "F4";
	names[116] = "F5";
	names[117] = "F6";
	names[118] = "F7";
	names[119] = "F8";
	names[120] = "F9";
	names[121] = "F10";
	names[122] = "F11";
	names[123] = "F12";
	names[124] = "F13";
	names[125] = "F14";
	names[126] = "F15";
	names[127] = "F16";
	names[128] = "F17";
	names[129] = "F18";
	names[130] = "F19";
	names[131] = "F20";
	names[132] = "F21";
	names[133] = "F22";
	names[134] = "F23";
	names[135] = "F24";
	names[144] = "NUM_LOCK";
	names[145] = "SCROLL_LOCK";
	names[146] = "WIN_OEM_FJ_JISHO";
	names[147] = "WIN_OEM_FJ_MASSHOU";
	names[148] = "WIN_OEM_FJ_TOUROKU";
	names[149] = "WIN_OEM_FJ_LOYA";
	names[150] = "WIN_OEM_FJ_ROYA";
	names[160] = "CIRCUMFLEX";
	names[161] = "EXCLAMATION";
	names[162] = "DOUBLE_QUOTE";
	names[163] = "HASH";
	names[164] = "DOLLAR";
	names[165] = "PERCENT";
	names[166] = "AMPERSAND";
	names[167] = "UNDERSCORE";
	names[168] = "OPEN_PAREN";
	names[169] = "CLOSE_PAREN";
	names[170] = "ASTERISK";
	names[171] = "PLUS";
	names[172] = "PIPE";
	names[173] = "HYPHEN_MINUS";
	names[174] = "OPEN_CURLY_BRACKET";
	names[175] = "CLOSE_CURLY_BRACKET";
	names[176] = "TILDE";
	names[181] = "VOLUME_MUTE";
	names[182] = "VOLUME_DOWN";
	names[183] = "VOLUME_UP";
	names[188] = "COMMA";
	names[190] = "PERIOD";
	names[191] = "SLASH";
	names[192] = "BACK_QUOTE";
	names[219] = "OPEN_BRACKET";
	names[220] = "BACK_SLASH";
	names[221] = "CLOSE_BRACKET";
	names[222] = "QUOTE";
	names[224] = "META";
	names[225] = "ALTGR";
	names[227] = "WIN_ICO_HELP";
	names[228] = "WIN_ICO_00";
	names[230] = "WIN_ICO_CLEAR";
	names[233] = "WIN_OEM_RESET";
	names[234] = "WIN_OEM_JUMP";
	names[235] = "WIN_OEM_PA1";
	names[236] = "WIN_OEM_PA2";
	names[237] = "WIN_OEM_PA3";
	names[238] = "WIN_OEM_WSCTRL";
	names[239] = "WIN_OEM_CUSEL";
	names[240] = "WIN_OEM_ATTN";
	names[241] = "WIN_OEM_FINISH";
	names[242] = "WIN_OEM_COPY";
	names[243] = "WIN_OEM_AUTO";
	names[244] = "WIN_OEM_ENLW";
	names[245] = "WIN_OEM_BACKTAB";
	names[246] = "ATTN";
	names[247] = "CRSEL";
	names[248] = "EXSEL";
	names[249] = "EREOF";
	names[250] = "PLAY";
	names[251] = "ZOOM";
	names[253] = "PA1";
	names[254] = "WIN_OEM_CLEAR";
	names[300] = "CONTROL_RIGHT";
	names[301] = "SHIFT_RIGHT";
	return names;
};
minko_input_Keyboard.prototype = {
	get_keyDown: function() {
		return this._down;
	}
	,get_textInput: function() {
		return this._textInput;
	}
	,getKeyDown: function(key) {
		var index = key;
		if(!this._keyDown.h.hasOwnProperty(index)) {
			var _this = this._keyDown;
			var value = new minko_signal_Signal2();
			_this.h[index] = value;
		}
		return this._keyDown.h[index];
	}
	,get_keyUp: function() {
		return this._up;
	}
	,getKeyUp: function(key) {
		var index = key;
		if(!this._keyUp.h.hasOwnProperty(index)) {
			var _this = this._keyUp;
			var value = new minko_signal_Signal2();
			_this.h[index] = value;
		}
		return this._keyUp.h[index];
	}
	,keyIsDown: function(key) {
		return false;
	}
	,hasKeyDownSignal: function(key) {
		return this._keyDown.h.hasOwnProperty(key);
	}
	,hasKeyUpSignal: function(key) {
		return this._keyUp.h.hasOwnProperty(key);
	}
	,setKeyboardState: function(key,state) {
	}
	,__class__: minko_input_Keyboard
};
var minko_input_Mouse = $hx_exports["minko"]["input"]["Mouse"] = function(canvas) {
	var _gthis = this;
	this._canvas = canvas;
	this._x = 0;
	this._y = 0;
	this._dX = 0;
	this._dY = 0;
	this._leftButtonIsDown = false;
	this._rightButtonIsDown = false;
	this._middleButtonIsDown = false;
	this._mouseMove = new minko_signal_Signal3();
	this._mouseWheel = new minko_signal_Signal3();
	this._mouseLeftButtonDown = new minko_signal_Signal();
	this._mouseLeftButtonUp = new minko_signal_Signal();
	this._mouseLeftClick = new minko_signal_Signal();
	this._mouseRightButtonDown = new minko_signal_Signal();
	this._mouseRightButtonUp = new minko_signal_Signal();
	this._mouseRightClick = new minko_signal_Signal();
	this._mouseMiddleButtonDown = new minko_signal_Signal();
	this._mouseMiddleButtonUp = new minko_signal_Signal();
	this._mouseMiddleClick = new minko_signal_Signal();
	this._slots = [];
	this._slots.push(this._mouseLeftButtonDown.connect(function(mouse) {
		_gthis._leftButtonIsDown = true;
		_gthis._lastMouseLeftDownX = _gthis.get_x();
		_gthis._lastMouseLeftDownY = _gthis.get_y();
	}));
	this._slots.push(this._mouseLeftButtonUp.connect(function(mouse1) {
		_gthis._leftButtonIsDown = false;
		var dX = Math.abs(_gthis.get_x() - _gthis._lastMouseLeftDownX);
		var dY = Math.abs(_gthis.get_y() - _gthis._lastMouseLeftDownY);
		if(dX < 5 && dY < 5) {
			_gthis.get_leftButtonClick().execute(mouse1);
		}
	}));
	this._slots.push(this._mouseRightButtonDown.connect(function(mouse2) {
		_gthis._rightButtonIsDown = true;
		_gthis._lastMouseRightDownX = _gthis.get_x();
		_gthis._lastMouseRightDownY = _gthis.get_y();
	}));
	this._slots.push(this._mouseRightButtonUp.connect(function(mouse3) {
		_gthis._rightButtonIsDown = false;
		var dX1 = Math.abs(_gthis.get_x() - _gthis._lastMouseRightDownX);
		var dY1 = Math.abs(_gthis.get_y() - _gthis._lastMouseRightDownY);
		if(dX1 < 5 && dY1 < 5) {
			_gthis.get_rightButtonClick().execute(mouse3);
		}
	}));
	this._slots.push(this._mouseMiddleButtonDown.connect(function(mouse4) {
		_gthis._middleButtonIsDown = true;
		_gthis._lastMouseMiddleDownX = _gthis.get_x();
		_gthis._lastMouseMiddleDownY = _gthis.get_y();
	}));
	this._slots.push(this._mouseMiddleButtonUp.connect(function(mouse5) {
		_gthis._middleButtonIsDown = false;
		var dX2 = Math.abs(_gthis.get_x() - _gthis._lastMouseMiddleDownX);
		var dY2 = Math.abs(_gthis.get_y() - _gthis._lastMouseMiddleDownY);
		if(dX2 < 5 && dY2 < 5) {
			_gthis.get_middleButtonClick().execute(mouse5);
		}
	}));
};
minko_input_Mouse.__name__ = true;
minko_input_Mouse.create = function(canvas) {
	return new minko_input_Mouse(canvas);
};
minko_input_Mouse.prototype = {
	get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,set_x: function(v) {
		this._x = v;
		return v;
	}
	,set_y: function(v) {
		this._y = v;
		return v;
	}
	,get_dX: function() {
		return this._dX;
	}
	,get_dY: function() {
		return this._dY;
	}
	,set_dX: function(v) {
		this._dX = v;
		return v;
	}
	,set_dY: function(v) {
		this._dY = v;
		return v;
	}
	,get_leftButtonIsDown: function() {
		return this._leftButtonIsDown;
	}
	,get_rightButtonIsDown: function() {
		return this._rightButtonIsDown;
	}
	,get_middleButtonIsDown: function() {
		return this._middleButtonIsDown;
	}
	,get_normalizedX: function() {
		return 2.0 * (this._x / this._canvas.get_width() - 0.5);
	}
	,get_normalizedY: function() {
		return 2.0 * (this._y / this._canvas.get_height() - .5);
	}
	,get_move: function() {
		return this._mouseMove;
	}
	,get_wheel: function() {
		return this._mouseWheel;
	}
	,get_leftButtonDown: function() {
		return this._mouseLeftButtonDown;
	}
	,get_leftButtonUp: function() {
		return this._mouseLeftButtonUp;
	}
	,get_leftButtonClick: function() {
		return this._mouseLeftClick;
	}
	,get_rightButtonDown: function() {
		return this._mouseRightButtonDown;
	}
	,get_rightButtonUp: function() {
		return this._mouseRightButtonUp;
	}
	,get_rightButtonClick: function() {
		return this._mouseRightClick;
	}
	,get_middleButtonDown: function() {
		return this._mouseMiddleButtonDown;
	}
	,get_middleButtonUp: function() {
		return this._mouseMiddleButtonUp;
	}
	,get_middleButtonClick: function() {
		return this._mouseMiddleClick;
	}
	,__class__: minko_input_Mouse
};
var minko_input_TouchPoint = $hx_exports["minko"]["input"]["TouchPoint"] = function(x,y,dX,dY) {
	this.x = x;
	this.y = y;
	this.dX = dX;
	this.dY = dY;
};
minko_input_TouchPoint.__name__ = true;
minko_input_TouchPoint.prototype = {
	__class__: minko_input_TouchPoint
};
var minko_input_Touch = $hx_exports["minko"]["input"]["Touch"] = function(canvas) {
	this._canvas = canvas;
	this._touches = new haxe_ds_IntMap();
	this._touchMove = new minko_signal_Signal4();
	this._touchDown = new minko_signal_Signal4();
	this._touchUp = new minko_signal_Signal4();
	this._pinchZoom = new minko_signal_Signal2();
	this._swipeLeft = new minko_signal_Signal();
	this._swipeRight = new minko_signal_Signal();
	this._swipeUp = new minko_signal_Signal();
	this._swipeDown = new minko_signal_Signal();
	this._tap = new minko_signal_Signal3();
	this._doubleTap = new minko_signal_Signal3();
	this._longHold = new minko_signal_Signal3();
};
minko_input_Touch.__name__ = true;
minko_input_Touch.create = function(canvas) {
	return new minko_input_Touch(canvas);
};
minko_input_Touch.prototype = {
	get_touches: function() {
		return this._touches;
	}
	,get_identifiers: function() {
		return this._identifiers;
	}
	,get_numTouches: function() {
		return this._identifiers.length;
	}
	,touch: function(identifier) {
		return this._touches.h[identifier];
	}
	,get_touchMove: function() {
		return this._touchMove;
	}
	,get_touchDown: function() {
		return this._touchDown;
	}
	,get_touchUp: function() {
		return this._touchUp;
	}
	,get_swipeLeft: function() {
		return this._swipeLeft;
	}
	,get_swipeRight: function() {
		return this._swipeRight;
	}
	,get_swipeUp: function() {
		return this._swipeUp;
	}
	,get_swipeDown: function() {
		return this._swipeDown;
	}
	,get_pinchZoom: function() {
		return this._pinchZoom;
	}
	,get_tap: function() {
		return this._tap;
	}
	,get_doubleTap: function() {
		return this._doubleTap;
	}
	,get_longHold: function() {
		return this._longHold;
	}
	,get_averageX: function() {
		var x = 0.0;
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			x += this._touches.h[this._identifiers[i]].x;
		}
		x /= l;
		return x;
	}
	,get_averageY: function() {
		var y = 0.0;
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			y += this._touches.h[this._identifiers[i]].y;
		}
		y /= l;
		return y;
	}
	,get_averageDX: function() {
		var x = 0.0;
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			x += this._touches.h[this._identifiers[i]].dX;
		}
		x /= l;
		return x;
	}
	,get_averageDY: function() {
		var y = 0.0;
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			y += this._touches.h[this._identifiers[i]].dY;
		}
		y /= l;
		return y;
	}
	,resetDeltas: function() {
		var l = this.get_numTouches();
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			this._touches.h[this._identifiers[i]].dX = 0;
			this._touches.h[this._identifiers[i]].dY = 0;
		}
	}
	,addTouch: function(identifier,x,y,dX,dY) {
	}
	,updateTouch: function(identifier,x,y,dX,dY) {
	}
	,removeTouch: function(identifier) {
	}
	,__class__: minko_input_Touch
};
var minko_material_Material = $hx_exports["minko"]["material"]["Material"] = function(name) {
	minko_Has_$uuid.call(this);
	this._provider = minko_data_Provider.create();
	this._provider.set("name",name);
	this._provider.set("uuid",this._provider.get_uuid());
};
minko_material_Material.__name__ = true;
minko_material_Material.create = function(name) {
	if(name == null) {
		name = "material";
	}
	var instance = new minko_material_Material(name);
	instance.initialize();
	return instance;
};
minko_material_Material.createbyMaterial = function(source) {
	var mat = minko_material_Material.create();
	mat._provider.copyFrom(source._provider);
	return mat;
};
minko_material_Material.__super__ = minko_Has_$uuid;
minko_material_Material.prototype = $extend(minko_Has_$uuid.prototype,{
	dispose: function() {
		this._provider = null;
	}
	,get_uuid: function() {
		return this._provider.get_uuid();
	}
	,get_name: function() {
		return this._provider.get("name");
	}
	,get_data: function() {
		return this._provider;
	}
	,hasProperty: function(propertyName) {
		return this._provider.hasProperty(propertyName);
	}
	,get: function(propertyName) {
		return this._provider.get(propertyName);
	}
	,unset: function(propertyName) {
		this._provider.unset(propertyName);
	}
	,setbyKeyObject: function(values) {
		var fields = Reflect.fields(values);
		var _g = 0;
		while(_g < fields.length) {
			var key = fields[_g];
			++_g;
			this._provider.set(key,Reflect.field(values,key));
		}
		return this;
	}
	,set: function(key,values) {
		this._provider.set(key,values);
		return this;
	}
	,copyFrom: function(values) {
		this._provider = minko_data_Provider.createbyProvider(values);
		this._provider.set("uuid",this._provider.get_uuid());
	}
	,initialize: function() {
	}
	,__class__: minko_material_Material
});
var minko_material_BasicMaterial = $hx_exports["minko"]["material"]["BasicMaterial"] = function(name) {
	minko_material_Material.call(this,name);
};
minko_material_BasicMaterial.__name__ = true;
minko_material_BasicMaterial.create = function(name) {
	if(name == null) {
		name = "BasicMaterial";
	}
	return new minko_material_BasicMaterial(name);
};
minko_material_BasicMaterial.createbyBasicMaterial = function(source) {
	var pm = minko_material_BasicMaterial.create(source.get_name());
	pm.get_data().copyFrom(source.get_data());
	return pm;
};
minko_material_BasicMaterial.__super__ = minko_material_Material;
minko_material_BasicMaterial.prototype = $extend(minko_material_Material.prototype,{
	set_diffuseColor: function(value) {
		this.get_data().set("diffuseColor",value);
		return value;
	}
	,diffuseColorRGBA: function(diffuseRGBA) {
		var this1 = new glm_Vec4Base();
		this1.x = (diffuseRGBA >> 24 & 255) / 255;
		this1.y = (diffuseRGBA >> 16 & 255) / 255;
		this1.z = (diffuseRGBA >> 8 & 255) / 255;
		this1.w = (diffuseRGBA & 255) / 255;
		return this.set_diffuseColor(this1);
	}
	,get_diffuseColor: function() {
		return this.get_data().get("diffuseColor");
	}
	,set_uvScale: function(value) {
		this.get_data().set("uvScale",value);
		return value;
	}
	,get_uvScale: function() {
		return this.get_data().get("uvScale");
	}
	,set_uvOffset: function(value) {
		this.get_data().set("uvOffset",value);
		return value;
	}
	,get_uvOffset: function() {
		return this.get_data().get("uvOffset");
	}
	,get_diffuseMap: function() {
		if(this.get_data().hasProperty("diffuseMap")) {
			return this.get_data().get("diffuseMap");
		} else {
			return null;
		}
	}
	,set_diffuseMap: function(texture) {
		if(texture != null) {
			this.get_data().set("diffuseMap",texture);
		} else {
			this.get_data().unset("diffuseMap");
		}
		return texture;
	}
	,set_fogColor: function(value) {
		this.get_data().set("fogColor",value);
		return value;
	}
	,fogColorRGBA: function(fogRGBA) {
		var this1 = new glm_Vec4Base();
		this1.x = (fogRGBA >> 24 & 255) / 255;
		this1.y = (fogRGBA >> 16 & 255) / 255;
		this1.z = (fogRGBA >> 8 & 255) / 255;
		this1.w = (fogRGBA & 255) / 255;
		return this.set_fogColor(this1);
	}
	,get_fogColor: function() {
		return this.get_data().get("fogColor");
	}
	,set_fogStart: function(value) {
		this.get_data().get("fogBounds").x = value;
		return value;
	}
	,get_fogStart: function() {
		return this.get_data().get("fogBounds").x;
	}
	,set_fogEnd: function(value) {
		this.get_data().get("fogBounds").y = value;
		return value;
	}
	,get_fogEnd: function() {
		return this.get_data().get("fogBounds").y;
	}
	,set_fogTechnique: function(value) {
		this.get_data().set("fogTechnique",value);
		return value;
	}
	,get_fogTechnique: function() {
		return this.get_data().get("fogTechnique");
	}
	,setBlendingMode: function(src,dst) {
		this.get_data().set("blendingMode",src | dst);
		this.get_data().set("blendingSource",src);
		this.get_data().set("blendingDestination",dst);
		return this;
	}
	,set_blendingMode: function(value) {
		var srcBlendingMode = value & 255;
		var dstBlendingMode = value & 65280;
		this.get_data().set("blendingMode",value);
		this.get_data().set("blendingSource",srcBlendingMode);
		this.get_data().set("blendingDestination",dstBlendingMode);
		return value;
	}
	,get_blendingSourceFactor: function() {
		if(this.get_data().hasProperty("bleblendingModendMode")) {
			return this.get_data().get("blendingMode") & 255;
		} else {
			return this._defaultStates.get_blendingSourceFactor();
		}
	}
	,get_blendingDestinationFactor: function() {
		if(this.get_data().hasProperty("blendingMode")) {
			return this.get_data().get("blendingMode") & 65280;
		} else {
			return this._defaultStates.get_blendingDestinationFactor();
		}
	}
	,set_colorMask: function(value) {
		this.get_data().set("colorMask",value);
		return value;
	}
	,get_colorMask: function() {
		if(this.get_data().hasProperty("colorMask")) {
			return this.get_data().get("colorMask");
		} else {
			return this._defaultStates.get_colorMask();
		}
	}
	,set_depthMask: function(value) {
		this.get_data().set("depthMask",value);
		return value;
	}
	,get_depthMask: function() {
		if(this.get_data().hasProperty("depthMask")) {
			return this.get_data().get("depthMask");
		} else {
			return this._defaultStates.get_depthMask();
		}
	}
	,set_depthFunction: function(value) {
		this.get_data().set("depthFunction",value);
		return value;
	}
	,get_depthFunction: function() {
		if(this.get_data().hasProperty("depthFunction")) {
			return this.get_data().get("depthFunction");
		} else {
			return this._defaultStates.get_depthFunction();
		}
	}
	,set_triangleCulling: function(value) {
		this.get_data().set("triangleCulling",value);
		return value;
	}
	,get_triangleCulling: function() {
		if(this.get_data().hasProperty("triangleCulling")) {
			return this.get_data().get("triangleCulling");
		} else {
			return this._defaultStates.get_triangleCulling();
		}
	}
	,set_stencilFunction: function(value) {
		this.get_data().set("stencilFunction",value);
		return value;
	}
	,get_stencilFunction: function() {
		if(this.get_data().hasProperty("stencilFunction")) {
			return this.get_data().get("stencilFunction");
		} else {
			return this._defaultStates.get_stencilFunction();
		}
	}
	,set_stencilReference: function(value) {
		this.get_data().set("stencilReference",value);
		return value;
	}
	,get_stencilReference: function() {
		if(this.get_data().hasProperty("stencilReference")) {
			return this.get_data().get("stencilReference");
		} else {
			return this._defaultStates.get_stencilReference();
		}
	}
	,set_stencilMask: function(value) {
		this.get_data().set("stencilMask",value);
		return value;
	}
	,get_stencilMask: function() {
		if(this.get_data().hasProperty("stencilMask")) {
			return this.get_data().get("stencilMask");
		} else {
			return this._defaultStates.get_stencilMask();
		}
	}
	,set_stencilFailOperation: function(value) {
		this.get_data().set("stencilFailOperation",value);
		return value;
	}
	,get_stencilFailOperation: function() {
		if(this.get_data().hasProperty("stencilFailOperation")) {
			return this.get_data().get("stencilFailOperation");
		} else {
			return this._defaultStates.get_stencilFailOperation();
		}
	}
	,set_stencilZFailOperation: function(value) {
		this.get_data().set("stencilZFailOperation",value);
		return value;
	}
	,get_stencilZFailOperation: function() {
		if(this.get_data().hasProperty("stencilZFailOperation")) {
			return this.get_data().get("stencilZFailOperation");
		} else {
			return this._defaultStates.get_stencilZFailOperation();
		}
	}
	,set_stencilZPassOperation: function(value) {
		this.get_data().set("stencilZPassOperation",value);
		return value;
	}
	,get_stencilZPassOperation: function() {
		if(this.get_data().hasProperty("stencilZPassOperation")) {
			return this.get_data().get("stencilZPassOperation");
		} else {
			return this._defaultStates.get_stencilZPassOperation();
		}
	}
	,set_priority: function(value) {
		this.get_data().set("priority",value);
		return value;
	}
	,get_priority: function() {
		if(this.get_data().hasProperty("priority")) {
			return this.get_data().get("priority");
		} else {
			return this._defaultStates.get_priority();
		}
	}
	,set_zSorted: function(value) {
		this.get_data().set("zSorted",value);
		return value;
	}
	,get_zSorted: function() {
		if(this.get_data().hasProperty("zSorted")) {
			return this.get_data().get("zSorted");
		} else {
			return this._defaultStates.get_zSorted();
		}
	}
	,__class__: minko_material_BasicMaterial
});
var minko_material_PhongMaterial = $hx_exports["minko"]["material"]["PhongMaterial"] = function(name) {
	minko_material_BasicMaterial.call(this,name);
};
minko_material_PhongMaterial.__name__ = true;
minko_material_PhongMaterial.create = function(name) {
	if(name == null) {
		name = "PhongMaterial";
	}
	return new minko_material_PhongMaterial(name);
};
minko_material_PhongMaterial.createbyPhongMaterial = function(source) {
	var pm = minko_material_PhongMaterial.create(source.get_name());
	pm.get_data().copyFrom(source.get_data());
	return pm;
};
minko_material_PhongMaterial.__super__ = minko_material_BasicMaterial;
minko_material_PhongMaterial.prototype = $extend(minko_material_BasicMaterial.prototype,{
	set_specularColor: function(color) {
		this.get_data().set("specularColor",color);
		return color;
	}
	,specularColorRGBA: function(color) {
		var this1 = new glm_Vec4Base();
		this1.x = (color >> 24 & 255) / 255;
		this1.y = (color >> 16 & 255) / 255;
		this1.z = (color >> 8 & 255) / 255;
		this1.w = (color & 255) / 255;
		return this.set_specularColor(this1);
	}
	,get_specularColor: function() {
		return this.get_data().get("specularColor");
	}
	,set_shininess: function(value) {
		this.get_data().set("shininess",value);
		return value;
	}
	,get_shininess: function() {
		return this.get_data().get("shininess");
	}
	,get_normalMap: function() {
		if(this.get_data().hasProperty("normalMap")) {
			return this.get_data().get("normalMap");
		} else {
			return null;
		}
	}
	,set_normalMap: function(value) {
		if(value.get_type() == 1) {
			throw new js__$Boot_HaxeError("Only 2d normal maps are currently supported.");
		}
		this.get_data().set("normalMap",value);
		return value;
	}
	,get_specularMap: function() {
		if(this.get_data().hasProperty("specularMap")) {
			return this.get_data().get("specularMap");
		} else {
			return null;
		}
	}
	,set_specularMap: function(value) {
		if(value.get_type() == 1) {
			throw new js__$Boot_HaxeError("Only 2d normal maps are currently supported.");
		}
		this.get_data().set("specularMap",value);
		return value;
	}
	,set_environmentAlpha: function(value) {
		this.get_data().set("environmentAlpha",value);
		return value;
	}
	,get_environmentAlpha: function() {
		return this.get_data().get("environmentAlpha");
	}
	,get_environmentCubemap: function() {
		if(this.get_data().hasProperty("environmentCubemap")) {
			return this.get_data().get("environmentCubemap");
		} else {
			return null;
		}
	}
	,set_environmentMap: function(value) {
		if(value.get_type() == 0) {
			this.get_data().set("environmentMap2d",value);
		} else {
			this.get_data().set("environmentCubemap",value);
		}
		return value;
	}
	,get_environmentMap2d: function() {
		if(this.get_data().hasProperty("environmentMap2d")) {
			return this.get_data().get("environmentMap2d");
		} else {
			return null;
		}
	}
	,get_alphaMap: function() {
		if(this.get_data().hasProperty("alphaMap")) {
			return this.get_data().get("alphaMap");
		} else {
			return null;
		}
	}
	,set_alphaMap: function(value) {
		if(value.get_type() == 1) {
			throw new js__$Boot_HaxeError("Only 2d transparency maps are currently supported.");
		}
		this.get_data().set("alphaMap",value);
		return value;
	}
	,set_alphaThreshold: function(value) {
		this.get_data().set("alphaThreshold",value);
		return value;
	}
	,get_alphaThreshold: function() {
		return this.get_data().get("alphaThreshold");
	}
	,get_fresnelReflectance: function() {
		return this.get_data().get("fresnelReflectance");
	}
	,set_fresnelReflectance: function(value) {
		this.get_data().set("fresnelReflectance",value);
		return value;
	}
	,get_fresnelExponent: function() {
		return this.get_data().get("fresnelExponent");
	}
	,set_fresnelExponent: function(value) {
		this.get_data().set("fresnelExponent",value);
		return value;
	}
	,__class__: minko_material_PhongMaterial
});
var minko_math_HashCore = function() { };
minko_math_HashCore.__name__ = true;
minko_math_HashCore.djb2 = function(s) {
	var hash = 5381;
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		hash = (hash << 5) + hash + HxOverrides.cca(s,i);
	}
	return hash;
};
minko_math_HashCore.sdbm = function(s) {
	var hash = 0;
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		hash = HxOverrides.cca(s,i) + (hash << 6) + (hash << 16) - hash;
	}
	return hash;
};
minko_math_HashCore.javaHashCode = function(s) {
	var hash = 0;
	if(s.length == 0) {
		return hash;
	}
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		hash = (hash << 5) - hash + HxOverrides.cca(s,i);
		hash &= hash;
	}
	return hash;
};
var minko_math_Random = function() { };
minko_math_Random.__name__ = true;
minko_math_Random.makeRandomSeed = function() {
	return Math.floor(Math.random() * 2147483647.0);
};
minko_math_Random.nextParkMiller = function(seed) {
	return Math.floor(seed * 16807.0 % 2147483647.0);
};
minko_math_Random.nextParkMiller31 = function(seed) {
	var lo = 16807 * (seed & 65535);
	var hi = 16807 * (seed >>> 16);
	lo += (hi & 32767) << 16;
	lo += hi >>> 15;
	if(lo > 2147483647) {
		lo -= 2147483647;
	}
	return lo;
};
minko_math_Random.nextLCG = function(seed) {
	return Math.floor((1103515245.0 * seed + 12345) % 2147483647.0);
};
minko_math_Random.toFloat = function(seed) {
	return seed / 2147483647.0;
};
minko_math_Random.toBool = function(seed) {
	return seed / 2147483647.0 > 0.5;
};
minko_math_Random.toFloatRange = function(seed,min,max) {
	return min + (max - min) * (seed / 2147483647.0);
};
minko_math_Random.toIntRange = function(seed,min,max) {
	return Math.round(min - 0.4999 + (max + 0.4999 - (min - 0.4999)) * (seed / 2147483647.0));
};
minko_math_Random.stringToSeed = function(s) {
	return Math.floor(minko_math_HashCore.djb2(s) % 2147483647.0);
};
var minko_math_Ray = $hx_exports["minko"]["math"]["Ray"] = function() {
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this._origin = this1;
	var this2 = new glm_Vec3Base();
	this2.x = 0.0;
	this2.y = 0.0;
	this2.z = -1.0;
	this._direction = this2;
};
minko_math_Ray.__name__ = true;
minko_math_Ray.createbyVector3 = function(origin,direction) {
	var ray = new minko_math_Ray();
	ray.setRay(origin,direction);
	return ray;
};
minko_math_Ray.create = function() {
	return new minko_math_Ray();
};
minko_math_Ray.prototype = {
	get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		return value;
	}
	,get_origin: function() {
		return this._origin;
	}
	,set_origin: function(value) {
		this._origin = value;
		return value;
	}
	,setRay: function(origin,direction) {
		this._origin = origin;
		this._direction = direction;
	}
	,__class__: minko_math_Ray
};
var minko_net_HTTPOptions = $hx_exports["minko"]["net"]["HTTPOptions"] = function() {
	minko_file_Options.call(this);
	this._username = "";
	this._password = "";
	this._additionalHeaders = [];
	this._verifyPeer = true;
};
minko_net_HTTPOptions.__name__ = true;
minko_net_HTTPOptions.create = function() {
	var instance = new minko_net_HTTPOptions();
	instance.initialize();
	return instance;
};
minko_net_HTTPOptions.createbyOptions = function(copy) {
	var instance = new minko_net_HTTPOptions().copyFrom(copy);
	instance.initialize();
	return instance;
};
minko_net_HTTPOptions.__super__ = minko_file_Options;
minko_net_HTTPOptions.prototype = $extend(minko_file_Options.prototype,{
	get_username: function() {
		return this._username;
	}
	,set_username: function(v) {
		this._username = v;
		return v;
	}
	,get_password: function() {
		return this._password;
	}
	,set_password: function(v) {
		this._password = v;
		return v;
	}
	,get_additionalHeaders: function() {
		return this._additionalHeaders;
	}
	,get_verifyPeer: function() {
		return this._verifyPeer;
	}
	,set_verifyPeer: function(v) {
		this._verifyPeer = v;
		return v;
	}
	,copyFrom: function(copy) {
		minko_file_Options.prototype.copyFrom.call(this,copy);
		this._username = (js_Boot.__cast(copy , minko_net_HTTPOptions))._username;
		this._password = (js_Boot.__cast(copy , minko_net_HTTPOptions))._password;
		this._additionalHeaders = (js_Boot.__cast(copy , minko_net_HTTPOptions))._additionalHeaders;
		this._verifyPeer = (js_Boot.__cast(copy , minko_net_HTTPOptions))._verifyPeer;
		return this;
	}
	,clone: function() {
		var copy = new minko_net_HTTPOptions().copyFrom(this);
		copy.initialize();
		return copy;
	}
	,__class__: minko_net_HTTPOptions
});
var minko_net_WebHTTPProtocol = $hx_exports["minko"]["net"]["WebHTTPProtocol"] = function() {
	minko_file_AbstractProtocol.call(this);
	this._status = 0;
};
minko_net_WebHTTPProtocol.__name__ = true;
minko_net_WebHTTPProtocol.create = function() {
	return new minko_net_WebHTTPProtocol();
};
minko_net_WebHTTPProtocol.__super__ = minko_file_AbstractProtocol;
minko_net_WebHTTPProtocol.prototype = $extend(minko_file_AbstractProtocol.prototype,{
	wget2CompleteHandler: function(id,arg,data,size) {
		arg.completeHandler(data);
	}
	,wget2ErrorHandler: function(id,arg,code,message) {
		arg.errorHandler(code,message);
	}
	,wget2ProgressHandler: function(id,arg,loadedBytes,totalBytes) {
		arg.progressHandler(loadedBytes,totalBytes);
	}
	,load: function() {
		minko_net_WebHTTPProtocol._httpProtocolReferences.push(this);
		this._options.set_protocolFunction(function(filename) {
			return function() {
				return new minko_net_WebHTTPProtocol();
			};
		});
		this.get_progress().execute(this,0.0);
		var username = null;
		var password = null;
		var additionalHeaders = [];
		var verifyPeer = true;
		if(js_Boot.__instanceof(this._options,minko_net_HTTPOptions)) {
			var httpOptions = js_Boot.__cast(this._options , minko_net_HTTPOptions);
			username = haxe_io_Bytes.ofString(httpOptions.get_username());
			password = haxe_io_Bytes.ofString(httpOptions.get_password());
			additionalHeaders = httpOptions.get_additionalHeaders();
			verifyPeer = httpOptions.get_verifyPeer();
		}
		var seekingOffset = this._options.get_seekingOffset();
		var seekedLength = this._options.get_seekedLength();
		if(seekingOffset >= 0 && seekedLength > 0) {
			var rangeMin = seekingOffset == null ? "null" : "" + seekingOffset;
			var rangeMax = Std.string(seekingOffset + seekedLength - 1);
			additionalHeaders.push(new minko_Tuple("Range","bytes=" + rangeMin + "-" + rangeMax));
		}
		if(this.get_options().get_loadAsynchronously()) {
			var additionalHeadersJsonString = "";
			if(additionalHeaders.length != 0) {
				var additionalHeaderCount = 0;
				additionalHeadersJsonString += "{ ";
				var _g = 0;
				while(_g < additionalHeaders.length) {
					var additionalHeader = additionalHeaders[_g];
					++_g;
					additionalHeadersJsonString += "\"" + additionalHeader.first + "\" : \"" + additionalHeader.second + "\"";
					if(additionalHeaderCount < additionalHeaders.length - 1) {
						additionalHeadersJsonString += ", ";
					}
					++additionalHeaderCount;
				}
				additionalHeadersJsonString += " }";
			}
			this._handle = minko_net_EmscriptenAsync.emscripten_async_wget3_data(this.get_resolvedFilename(),"GET","",additionalHeadersJsonString,this,true,$bind(this,this.wget2CompleteHandler),$bind(this,this.wget2ErrorHandler),$bind(this,this.wget2ProgressHandler));
		} else {
			var xhr = new XMLHttpRequest();
			xhr.open("GET",this.get_resolvedFilename(),false);
			xhr.overrideMimeType("text/plain; charset=x-user-defined");
			var _g1 = 0;
			while(_g1 < additionalHeaders.length) {
				var additionalHeader1 = additionalHeaders[_g1];
				++_g1;
				xhr.setRequestHeader(additionalHeader1.first,additionalHeader1.second);
			}
			xhr.send(null);
			var size = -1;
			var bytes = null;
			if(xhr.readyState == 4 && xhr.status == 0 || (xhr.status == 200 || xhr.status == 206)) {
				var array = new Uint8Array(xhr.responseText.length);
				var _g11 = 0;
				var _g2 = xhr.responseText.length;
				while(_g11 < _g2) {
					var i = _g11++;
					array[i] = HxOverrides.cca(xhr.responseText,i) & 255;
				}
				bytes = haxe_io_Bytes.ofData(array.buffer);
				size = xhr.responseText.length;
			} else {
				size = -1;
			}
			if(size >= 0) {
				this.completeHandler(bytes);
			} else {
				this.errorHandler(0,"");
			}
		}
	}
	,fileExists: function(filename) {
		var username = "";
		var password = "";
		var additionalHeaders = [];
		var verifyPeer = true;
		if(js_Boot.__instanceof(this._options,minko_net_HTTPOptions)) {
			var httpOptions = this._options;
			username = httpOptions.get_username();
			password = httpOptions.get_password();
			additionalHeaders = httpOptions.get_additionalHeaders();
			verifyPeer = httpOptions.get_verifyPeer();
		}
		additionalHeaders.push(new minko_Tuple("Access-Control-Allow-Methods","GET, POST,PUT"));
		var xhr = new XMLHttpRequest();
		xhr.open("HEAD",filename,false);
		if(additionalHeaders != null) {
			var _g = 0;
			while(_g < additionalHeaders.length) {
				var additionalHeader = additionalHeaders[_g];
				++_g;
				if(additionalHeader.first == "") {
					continue;
				}
				xhr.setRequestHeader(additionalHeader.first,additionalHeader.second);
			}
		}
		try {
			xhr.send(null);
		} catch( e ) {
			return false;
		}
		var status = xhr.status;
		if(!(xhr.readyState == 4 && xhr.status == 0)) {
			if(status >= 200) {
				return status < 300;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isAbsolutePath: function(filename) {
		return filename.indexOf("://") != -1;
	}
	,completeHandler: function(data) {
		if(this._status == 1) {
			return;
		}
		this.set_data(data);
		this.get_progress().execute(this,1.0);
		this.get_complete().execute(this);
		HxOverrides.remove(minko_net_WebHTTPProtocol._httpProtocolReferences,this);
	}
	,errorHandler: function(code,message) {
		if(message == null) {
			message = "";
		}
		this.get_error().execute(this,message);
		HxOverrides.remove(minko_net_WebHTTPProtocol._httpProtocolReferences,this);
	}
	,progressHandler: function(loadedBytes,totalBytes) {
		if(this._status == 1) {
			return;
		}
		var progress = 0.0;
		if(totalBytes != 0) {
			progress = loadedBytes / totalBytes;
		}
		if(this.get_options().get_fileStatusFunction() != null) {
			var fileStatus = (this.get_options().get_fileStatusFunction())(this.get_file(),progress);
			if(fileStatus == 1) {
				this._status = 1;
				minko_net_EmscriptenAsync.emscripten_async_wget2_abort(this._handle);
				this.get_error().execute(this,"");
				return;
			}
		}
		this.get_progress().execute(this,progress);
	}
	,__class__: minko_net_WebHTTPProtocol
});
var minko_net_EmscriptenAsync = function() { };
minko_net_EmscriptenAsync.__name__ = true;
minko_net_EmscriptenAsync.getNextWgetRequestHandle = function() {
	var a = minko_net_EmscriptenAsync.nextWgetRequestHandle;
	minko_net_EmscriptenAsync.nextWgetRequestHandle++;
	return a;
};
minko_net_EmscriptenAsync.emscripten_async_wget2_abort = function(handle) {
	var http = minko_net_EmscriptenAsync.wgetRequests.h[handle];
	if(http != null) {
		http.abort();
	}
};
minko_net_EmscriptenAsync.emscripten_async_wget3_data = function(url,request,param,additionalHeader,arg,free,onload,onerror,onprogress) {
	var _url = url;
	var _request = request;
	var _param = param;
	var http = new XMLHttpRequest();
	http.open(_request,_url,true);
	http.responseType = "arraybuffer";
	var handle = minko_net_EmscriptenAsync.getNextWgetRequestHandle();
	var http_onload = function(e) {
		if(http.status == 200 || http.status == 206 || HxOverrides.substr(_url,0,4).toLowerCase() != "http") {
			var byteArray = new Uint8Array(http.response);
			var buffer = haxe_io_Bytes.ofData(byteArray.buffer);
			if(onload != null) {
				onload(handle,arg,buffer,byteArray.length);
			}
			if(free) {
				buffer = null;
			}
		} else if(onerror != null) {
			onerror(handle,arg,http.status,http.statusText);
		}
		minko_net_EmscriptenAsync.wgetRequests.remove(handle);
	};
	http.onload = http_onload;
	var http_onerror = function(e1) {
		if(onerror != null) {
			onerror(handle,arg,http.status,http.statusText);
		}
		minko_net_EmscriptenAsync.wgetRequests.remove(handle);
	};
	http.onerror = http_onerror;
	var http_onprogress = function(e2) {
		if(onprogress != null) {
			onprogress(handle,arg,e2.loaded,e2.lengthComputable || e2.lengthComputable == null ? e2.total : 0);
		}
	};
	http.onprogress = http_onprogress;
	var http_onabort = function(e3) {
		minko_net_EmscriptenAsync.wgetRequests.remove(handle);
	};
	http.onabort = http_onabort;
	if(additionalHeader != "") {
		var additionalHeaderObject = JSON.parse(additionalHeader);
		var _g = 0;
		var _g1 = Reflect.fields(additionalHeaderObject);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			var tmp = Reflect.field(additionalHeaderObject,entry);
			http.setRequestHeader(entry,tmp);
		}
	}
	if(_request == "POST") {
		http.setRequestHeader("Content-type","application/x-www-form-urlencoded");
		http.setRequestHeader("Content-length",_param.length == null ? "null" : "" + _param.length);
		http.setRequestHeader("Connection","close");
		http.send(_param);
	} else {
		http.send(null);
	}
	minko_net_EmscriptenAsync.wgetRequests.h[handle] = http;
	return handle;
};
var minko_render_AbstractContext = $hx_exports["minko"]["render"]["AbstractContext"] = function() {
};
minko_render_AbstractContext.__name__ = true;
minko_render_AbstractContext.prototype = {
	dispose: function() {
	}
	,get_errorsEnabled: function() {
		return false;
	}
	,set_errorsEnabled: function(errors) {
		return errors;
	}
	,get_driverInfo: function() {
		return "";
	}
	,get_renderTarget: function() {
		return -1;
	}
	,get_viewportWidth: function() {
		return -1;
	}
	,get_viewportHeight: function() {
		return -1;
	}
	,get_currentProgram: function() {
		return -1;
	}
	,configureViewport: function(x,y,width,height) {
	}
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = -1;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 0.0;
		}
		if(blue == null) {
			blue = 0.0;
		}
		if(green == null) {
			green = 0.0;
		}
		if(red == null) {
			red = 0.0;
		}
	}
	,present: function() {
	}
	,drawIndexBufferTriangles: function(indexBuffer,firstIndex,numTriangles) {
	}
	,drawTriangles: function(firstIndex,numTriangles) {
	}
	,createVertexBuffer: function(size) {
		return -1;
	}
	,setVertexBufferAt: function(position,vertexBuffer,size,stride,offset) {
	}
	,uploadVertexBufferData: function(vertexBuffer,offset,size,data) {
	}
	,deleteVertexBuffer: function(vertexBuffer) {
	}
	,createIndexBuffer: function(size) {
		return -1;
	}
	,uploaderIndexBufferData: function(indexBuffer,offset,size,data) {
	}
	,deleteIndexBuffer: function(indexBuffer) {
	}
	,createTexture: function(type,width,height,mipMapping,optimizeForRenderToTexture,assertPowerOfTwoSized) {
		if(assertPowerOfTwoSized == null) {
			assertPowerOfTwoSized = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		return -1;
	}
	,createRectangleTexture: function(type,width,height) {
		return -1;
	}
	,createCompressedTexture: function(type,format,width,height,mipMapping) {
		return -1;
	}
	,uploadTexture2dData: function(texture,width,height,mipLevel,data) {
	}
	,uploadCubeTextureData: function(texture,face,width,height,mipLevel,data) {
	}
	,uploadCompressedTexture2dData: function(texture,format,width,height,size,mipLevel,data) {
	}
	,uploadCompressedCubeTextureData: function(texture,face,format,width,height,mipLevel,data) {
	}
	,activateMipMapping: function(texture) {
	}
	,deleteTexture: function(texture) {
	}
	,setTextureAt: function(position,texture,location) {
		if(location == null) {
			location = -1;
		}
	}
	,setSamplerStateAt: function(position,wrapping,filtering,mipFiltering) {
	}
	,createProgram: function() {
		return -1;
	}
	,attachShader: function(program,shader) {
	}
	,linkProgram: function(program) {
	}
	,deleteProgram: function(program) {
	}
	,setProgram: function(program) {
	}
	,compileShader: function(shader) {
	}
	,setShaderSource: function(shader,source) {
	}
	,createVertexShader: function() {
		return -1;
	}
	,deleteVertexShader: function(vertexShader) {
	}
	,createFragmentShader: function() {
		return -1;
	}
	,deleteFragmentShader: function(fragmentShader) {
	}
	,getProgramInputs: function(program) {
		return null;
	}
	,setBlendingModeSD: function(source,destination) {
	}
	,setBlendingMode: function(blendMode) {
	}
	,setColorMask: function(NamelessParameter) {
	}
	,setDepthTest: function(depthMask,depthFunc) {
	}
	,setStencilTest: function(stencilFunc,stencilRef,stencilMask,stencilFailOp,stencilZFailOp,stencilZPassOp) {
	}
	,setScissorTest: function(scissorTest,NamelessParameter2) {
	}
	,readPixels: function(pixels) {
	}
	,readRectPixels: function(x,y,width,height,pixels) {
	}
	,setTriangleCulling: function(triangleCulling) {
	}
	,setRenderToBackBuffer: function() {
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
	}
	,generateMipmaps: function(texture) {
	}
	,setUniformFloat: function(location,count,v) {
	}
	,setUniformFloat2: function(location,count,v) {
	}
	,setUniformFloat3: function(location,count,v) {
	}
	,setUniformFloat4: function(location,count,v) {
	}
	,setUniformMatrix4x4: function(location,count,v) {
	}
	,setUniformInt: function(location,count,v) {
	}
	,setUniformInt2: function(location,count,v) {
	}
	,setUniformInt3: function(location,count,v) {
	}
	,setUniformInt4: function(location,count,v) {
	}
	,createVertexAttributeArray: function() {
		return -1;
	}
	,setVertexAttributeArray: function(vertexArray) {
	}
	,__class__: minko_render_AbstractContext
};
var minko_render_AbstractResource = $hx_exports["minko"]["render"]["AbstractResource"] = function(context) {
	this._uuid = minko_Uuid.getUuid();
	this._context = context;
	this._id = -1;
};
minko_render_AbstractResource.__name__ = true;
minko_render_AbstractResource.prototype = {
	get_uuid: function() {
		return this._uuid;
	}
	,get_context: function() {
		return this._context;
	}
	,set_id: function(v) {
		this._id = v;
		return this._id;
	}
	,get_id: function() {
		if(this._id == -1) {
			throw new js__$Boot_HaxeError("");
		}
		return this._id;
	}
	,get_isReady: function() {
		return this._id != -1;
	}
	,dispose: function() {
	}
	,upload: function() {
	}
	,__class__: minko_render_AbstractResource
};
var minko_render_AbstractTexture = $hx_exports["minko"]["render"]["AbstractTexture"] = function(type,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename) {
	this.MAX_SIZE = 4096;
	minko_render_AbstractResource.call(this,context);
	this._sampler = new minko_render_TextureSampler(this.get_uuid(),this._id);
	this._type = type;
	this._format = format;
	this._width = width;
	this._height = height;
	var x = width;
	--x;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	this._widthGPU = Math.floor(Math.min(x + 1,this.MAX_SIZE));
	var x1 = height;
	--x1;
	x1 |= x1 >> 1;
	x1 |= x1 >> 2;
	x1 |= x1 >> 4;
	x1 |= x1 >> 8;
	x1 |= x1 >> 16;
	this._heightGPU = Math.floor(Math.min(x1 + 1,this.MAX_SIZE));
	this._mipMapping = mipMapping;
	this._resizeSmoothly = resizeSmoothly;
	this._optimizeForRenderToTexture = optimizeForRenderToTexture;
	this._filename = filename;
};
minko_render_AbstractTexture.__name__ = true;
minko_render_AbstractTexture.resizeData = function(width,height,data,newWidth,newHeight,resizeSmoothly) {
	var newData = null;
	if(newWidth == 0 || newHeight == 0) {
		return data;
	}
	if(newWidth == width && newHeight == height) {
		newData = new haxe_io_Bytes(new ArrayBuffer(width * height * 4));
		newData.blit(0,data,0,width * height * 4);
		return newData;
	}
	var size = newWidth * newHeight * 4;
	var xFactor = (width - 1.0) / (newWidth - 1.0);
	var yFactor = (height - 1.0) / (newHeight - 1.0);
	newData = new haxe_io_Bytes(new ArrayBuffer(size));
	var idx = 0;
	var y = 0.0;
	var _g1 = 0;
	var _g = newHeight;
	while(_g1 < _g) {
		var q = _g1++;
		var j = Math.floor(y);
		var dy = y - j;
		if(j >= height) {
			j = height - 1;
		}
		var x = 0.0;
		var _g3 = 0;
		var _g2 = newWidth;
		while(_g3 < _g2) {
			var p = _g3++;
			var i = Math.floor(x);
			if(i >= width) {
				i = width - 1;
			}
			var ijTL = i + width * j << 2;
			if(resizeSmoothly) {
				var dx = x - i;
				var dxy = dx * dy;
				var ijTR = i < width - 1 ? ijTL + 4 : ijTL;
				var ijBL = j < height - 1 ? ijTL + (width << 2) : ijTL;
				var ijBR = i < width - 1 && j < height - 1 ? ijTL + (width + 1 << 2) : ijTL;
				var wTL = 1.0 - dx - dy + dxy;
				var wTR = dx - dxy;
				var wBL = dy - dxy;
				var wBR = dxy;
				var _g4 = 0;
				while(_g4 < 4) {
					var k = _g4++;
					var color = wTL * data.b[ijTL + k] + wTR * data.b[ijTR + k] + wBL * data.b[ijBL + k] + wBR * data.b[ijBR + k];
					newData.b[idx + k] = Math.floor(color) & 255;
				}
			} else {
				var _g41 = 0;
				while(_g41 < 4) {
					var k1 = _g41++;
					newData.b[idx + k1] = data.b[ijTL + k1] & 255;
				}
			}
			idx += 4;
			x += xFactor;
		}
		y += yFactor;
	}
	return newData;
};
minko_render_AbstractTexture.__super__ = minko_render_AbstractResource;
minko_render_AbstractTexture.prototype = $extend(minko_render_AbstractResource.prototype,{
	get_sampler: function() {
		return this._sampler;
	}
	,set_id: function(v) {
		this._id = v;
		this._sampler.id = v;
		return this._id;
	}
	,get_type: function() {
		return this._type;
	}
	,get_format: function() {
		return this._format;
	}
	,get_width: function() {
		return this._widthGPU;
	}
	,get_height: function() {
		return this._heightGPU;
	}
	,get_originalWidth: function() {
		return this._width;
	}
	,get_originalHeight: function() {
		return this._height;
	}
	,get_mipMapping: function() {
		return this._mipMapping;
	}
	,activateMipMapping: function() {
		if(this._mipMapping) {
			return;
		}
		this._mipMapping = true;
		this._context.activateMipMapping(this._id);
	}
	,get_optimizeForRenderToTexture: function() {
		return this._optimizeForRenderToTexture;
	}
	,resize: function(width,height,resizeSmoothly) {
	}
	,disposeData: function() {
	}
	,getMipmapWidth: function(level) {
		var tmp = this._widthGPU;
		var p = 0;
		while(tmp >= 1) {
			++p;
			tmp >>= 1;
		}
		var p1 = p;
		return 1 << p1 - level;
	}
	,getMipmapHeight: function(level) {
		var tmp = this._heightGPU;
		var p = 0;
		while(tmp >= 1) {
			++p;
			tmp >>= 1;
		}
		var p1 = p;
		return 1 << p1 - level;
	}
	,__class__: minko_render_AbstractTexture
});
var minko_render_CubeTexture = $hx_exports["minko"]["render"]["CubeTexture"] = function(context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename) {
	if(filename == null) {
		filename = "";
	}
	if(resizeSmoothly == null) {
		resizeSmoothly = true;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	if(format == null) {
		format = 1;
	}
	minko_render_AbstractTexture.call(this,1,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
	this._data = [];
	var x = width;
	--x;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	this._widthGPU = Math.floor(Math.min(x + 1,this.MAX_SIZE));
	var x1 = height;
	--x1;
	x1 |= x1 >> 1;
	x1 |= x1 >> 2;
	x1 |= x1 >> 4;
	x1 |= x1 >> 8;
	x1 |= x1 >> 16;
	this._heightGPU = Math.floor(Math.min(x1 + 1,this.MAX_SIZE));
};
minko_render_CubeTexture.__name__ = true;
minko_render_CubeTexture.create = function(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename) {
	if(filename == null) {
		filename = "";
	}
	if(format == null) {
		format = 1;
	}
	if(resizeSmoothly == null) {
		resizeSmoothly = true;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	return new minko_render_CubeTexture(context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
};
minko_render_CubeTexture.__super__ = minko_render_AbstractTexture;
minko_render_CubeTexture.prototype = $extend(minko_render_AbstractTexture.prototype,{
	setData: function(data,face,widthGPU,heightGPU) {
		if(heightGPU == null) {
			heightGPU = -1;
		}
		if(widthGPU == null) {
			widthGPU = -1;
		}
		this._data[face] = minko_render_AbstractTexture.resizeData(this._width,this._height,data,this._widthGPU,this._heightGPU,this._resizeSmoothly);
	}
	,resize: function(width,height,resizeSmoothly) {
		var previousWidth = this.get_width();
		var previousHeight = this.get_height();
		var _g = 0;
		while(_g < 6) {
			var faceId = _g++;
			var previousData = this._data[faceId];
			this._data[faceId] = minko_render_AbstractTexture.resizeData(previousWidth,previousHeight,previousData,width,height,resizeSmoothly);
		}
		this._width = width << 2;
		this._widthGPU = width;
		this._height = height * 3;
		this._heightGPU = height;
	}
	,uploadMipLevel: function(level,data,face) {
		var width = this._widthGPU >> level;
		var height = this._heightGPU >> level;
		this._context.uploadCubeTextureData(this._id,face,width,height,level,data);
	}
	,upload: function() {
		if(this._id == -1) {
			this.set_id(this._context.createTexture(this._type,this._widthGPU,this._heightGPU,this._mipMapping,this._optimizeForRenderToTexture));
		}
		var numFacePixels = this._widthGPU * this._heightGPU;
		if(numFacePixels == 0) {
			return;
		}
		var _g = 0;
		while(_g < 6) {
			var faceId = _g++;
			var faceData = this._data[faceId];
			var face = faceId;
			this._context.uploadCubeTextureData(this._id,face,this._widthGPU,this._heightGPU,0,faceData);
		}
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteTexture(this._id);
			this.set_id(-1);
		}
		this.disposeData();
	}
	,disposeData: function() {
		var _g = 0;
		var _g1 = this._data;
		while(_g < _g1.length) {
			var face = _g1[_g];
			++_g;
		}
		this._data = null;
	}
	,__class__: minko_render_CubeTexture
});
var minko_render_UniformValue = $hx_exports["minko"]["render"]["UniformValue"] = function(location,size,count,dataArray) {
	this.location = location;
	this.size = size;
	this.count = count;
	this.dataArray = dataArray;
};
minko_render_UniformValue.__name__ = true;
minko_render_UniformValue.vecInts1 = function(dataValue) {
	return [dataValue];
};
minko_render_UniformValue.vecInts2 = function(dataValue) {
	return [dataValue.x,dataValue.y].map(function(v) {
		return Math.floor(v);
	});
};
minko_render_UniformValue.vecInts3 = function(dataValue) {
	return [dataValue.x,dataValue.y,dataValue.z].map(function(v) {
		return Math.floor(v);
	});
};
minko_render_UniformValue.vecInts4 = function(dataValue) {
	return [dataValue.x,dataValue.y,dataValue.z,dataValue.w].map(function(v) {
		return Math.floor(v);
	});
};
minko_render_UniformValue.vecFloats1 = function(dataValue) {
	return [dataValue];
};
minko_render_UniformValue.vecFloats2 = function(dataValue) {
	return [dataValue.x,dataValue.y];
};
minko_render_UniformValue.vecFloats3 = function(dataValue) {
	return [dataValue.x,dataValue.y,dataValue.z];
};
minko_render_UniformValue.vecFloats4 = function(dataValue) {
	return [dataValue.x,dataValue.y,dataValue.z,dataValue.w];
};
minko_render_UniformValue.matFloats = function(dataValue) {
	return [dataValue._00,dataValue._01,dataValue._02,dataValue._03,dataValue._10,dataValue._11,dataValue._12,dataValue._13,dataValue._20,dataValue._21,dataValue._22,dataValue._23,dataValue._30,dataValue._31,dataValue._32,dataValue._33];
};
minko_render_UniformValue.vecsInts1 = function(dataValue) {
	return dataValue;
};
minko_render_UniformValue.vecsInts2 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecInts2(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsInts3 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecInts3(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsInts4 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecInts4(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsFloats1 = function(dataValue) {
	return dataValue;
};
minko_render_UniformValue.vecsFloats2 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecFloats2(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsFloats3 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecFloats3(d));
	}
	return tmp;
};
minko_render_UniformValue.vecsFloats4 = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.vecFloats4(d));
	}
	return tmp;
};
minko_render_UniformValue.matsFloats = function(dataValue) {
	var tmp = [];
	var _g = 0;
	while(_g < dataValue.length) {
		var d = dataValue[_g];
		++_g;
		tmp = tmp.concat(minko_render_UniformValue.matFloats(d));
	}
	return tmp;
};
minko_render_UniformValue.prototype = {
	__class__: minko_render_UniformValue
};
var minko_render_SamplerValue = $hx_exports["minko"]["render"]["SamplerValue"] = function(position,sampler,location) {
	this.position = position;
	this.location = location;
	this.sampler = sampler;
};
minko_render_SamplerValue.__name__ = true;
minko_render_SamplerValue.prototype = {
	__class__: minko_render_SamplerValue
};
var minko_render_AttributeValue = $hx_exports["minko"]["render"]["AttributeValue"] = function(location,resourceId,size,vertexSize,offset) {
	this.location = location;
	this.resourceId = resourceId;
	this.size = size;
	this.stride = vertexSize;
	this.offset = offset;
};
minko_render_AttributeValue.__name__ = true;
minko_render_AttributeValue.prototype = {
	__class__: minko_render_AttributeValue
};
var minko_render_DrawCall = $hx_exports["minko"]["render"]["DrawCall"] = function(batchId,pass,variables,rootData,rendererData,targetData) {
	this._enabled = true;
	this._pass = pass;
	this._rootData = rootData;
	this._rendererData = rendererData;
	this._targetData = targetData;
	this._variables = variables;
	this._indexBuffer = null;
	this._firstIndex = null;
	this._numIndices = null;
	this._priority = minko_render_States.DEFAULT_PRIORITY;
	this._zSorted = false;
	this._blendingSourceFactor = 2;
	this._blendingDestinationFactor = 256;
	this._colorMask = true;
	this._depthMask = true;
	this._depthFunc = 4;
	this._triangleCulling = 2;
	this._stencilFunction = 0;
	this._stencilReference = 0;
	this._stencilMask = 1;
	this._stencilFailOp = 0;
	this._stencilZFailOp = 0;
	this._stencilZPassOp = 0;
	this._scissorTest = false;
	this._scissorBox = minko_render_States.DEFAULT_SCISSOR_BOX;
	this._target = minko_render_States.DEFAULT_TARGET;
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this._centerPosition = this1;
	this._modelToWorldMatrix = null;
	this._worldToScreenMatrix = null;
	this._modelToWorldMatrixPropertyRemovedSlot = null;
	this._worldToScreenMatrixPropertyRemovedSlot = null;
	this._vertexAttribArray = 0;
	this._batchIDs = [batchId];
	this._uniformFloat = [];
	this._uniformInt = [];
	this._uniformBool = [];
	this._samplers = [];
	this._attributes = [];
	this.bindPositionalMembers();
	minko_Enable_$uuid.call(this);
	this.enable_uuid();
};
minko_render_DrawCall.__name__ = true;
minko_render_DrawCall.setUniformValue = function(uniforms,location,size,count,dataArray,data) {
	var it = Lambda.find(uniforms,function(u) {
		return u.location == location;
	});
	if(it == null) {
		it = new minko_render_UniformValue(location,size,count,dataArray);
		uniforms.push(it);
	} else {
		it.dataArray = dataArray;
	}
	it.data = data;
};
minko_render_DrawCall.__super__ = minko_Enable_$uuid;
minko_render_DrawCall.prototype = $extend(minko_Enable_$uuid.prototype,{
	dispose: function() {
		this._pass = null;
		this._rootData = null;
		this._rendererData = null;
		this._targetData = null;
		this._variables = null;
		if(this._modelToWorldMatrixPropertyAddedSlot != null) {
			this._modelToWorldMatrixPropertyAddedSlot.dispose();
		}
		if(this._worldToScreenMatrixPropertyAddedSlot != null) {
			this._worldToScreenMatrixPropertyAddedSlot.dispose();
		}
		if(this._modelToWorldMatrixPropertyRemovedSlot != null) {
			this._modelToWorldMatrixPropertyRemovedSlot.dispose();
		}
		if(this._worldToScreenMatrixPropertyRemovedSlot != null) {
			this._worldToScreenMatrixPropertyRemovedSlot.dispose();
		}
		this._modelToWorldMatrixPropertyAddedSlot = null;
		this._worldToScreenMatrixPropertyAddedSlot = null;
		this._modelToWorldMatrixPropertyRemovedSlot = null;
		this._worldToScreenMatrixPropertyRemovedSlot = null;
	}
	,get_enabled: function() {
		return this._enabled;
	}
	,set_enabled: function(value) {
		this._enabled = value;
		return value;
	}
	,get_batchIDs: function() {
		return this._batchIDs;
	}
	,get_pass: function() {
		return this._pass;
	}
	,get_program: function() {
		return this._program;
	}
	,set_variables: function(v) {
		this._variables = v;
		return v;
	}
	,get_variables: function() {
		return this._variables;
	}
	,get_rootData: function() {
		return this._rootData;
	}
	,get_rendererData: function() {
		return this._rendererData;
	}
	,get_targetData: function() {
		return this._targetData;
	}
	,get_boundBoolUniforms: function() {
		return this._uniformBool;
	}
	,get_boundIntUniforms: function() {
		return this._uniformInt;
	}
	,get_boundFloatUniforms: function() {
		return this._uniformFloat;
	}
	,get_samplers: function() {
		return this._samplers;
	}
	,get_priority: function() {
		return this._priority;
	}
	,get_zSorted: function() {
		if(this._zSorted) {
			return this._zSorted;
		} else {
			return false;
		}
	}
	,get_blendingSource: function() {
		return this._blendingSourceFactor;
	}
	,get_blendingDestination: function() {
		return this._blendingDestinationFactor;
	}
	,get_colorMask: function() {
		return this._colorMask;
	}
	,get_depthMask: function() {
		return this._depthMask;
	}
	,get_depthFunction: function() {
		return this._depthFunc;
	}
	,get_triangleCulling: function() {
		return this._triangleCulling;
	}
	,get_stencilFunction: function() {
		return this._stencilFunction;
	}
	,get_stencilReference: function() {
		return this._stencilReference;
	}
	,get_stencilMask: function() {
		return this._stencilMask;
	}
	,get_stencilFailOperation: function() {
		return this._stencilFailOp;
	}
	,get_stencilZFailOperation: function() {
		return this._stencilZFailOp;
	}
	,get_stencilZPassOperation: function() {
		return this._stencilZPassOp;
	}
	,get_scissorTest: function() {
		return this._scissorTest;
	}
	,get_scissorBox: function() {
		return this._scissorBox;
	}
	,get_target: function() {
		return this._target;
	}
	,get_numTriangles: function() {
		if(this._numIndices != null) {
			return Math.floor(this._numIndices / 3);
		} else {
			return 0;
		}
	}
	,bind: function(program) {
		this.reset();
		this._program = program;
	}
	,render: function(context,renderTarget,viewport,clearColor) {
		if(!this.get_enabled()) {
			return;
		}
		context.setProgram(this._program.get_id());
		var hasOwnTarget = this._target != null && this._target.get_id() != 0;
		var renderTargetId = hasOwnTarget ? this._target.get_id() : renderTarget != null ? renderTarget.get_id() : 0;
		var targetChanged = false;
		if(renderTargetId != 0) {
			if(renderTargetId != context.get_renderTarget()) {
				context.setRenderToTexture(renderTargetId,true);
				if(hasOwnTarget) {
					context.clear((clearColor >> 24 & 255) / 255.0,(clearColor >> 16 & 255) / 255.0,(clearColor >> 8 & 255) / 255.0,(clearColor & 255) / 255.0);
				}
				targetChanged = true;
			}
		} else {
			context.setRenderToBackBuffer();
		}
		if(targetChanged && !hasOwnTarget && viewport.z >= 0 && viewport.w >= 0) {
			context.configureViewport(Math.floor(viewport.x),Math.floor(viewport.y),Math.floor(viewport.z),Math.floor(viewport.w));
		}
		var _g = 0;
		var _g1 = this._uniformBool;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.size == 1) {
				context.setUniformInt(u.location,u.count,u.dataArray);
			} else if(u.size == 2) {
				context.setUniformInt2(u.location,u.count,u.dataArray);
			} else if(u.size == 3) {
				context.setUniformInt3(u.location,u.count,u.dataArray);
			} else if(u.size == 4) {
				context.setUniformInt4(u.location,u.count,u.dataArray);
			}
		}
		var _g2 = 0;
		var _g11 = this._uniformInt;
		while(_g2 < _g11.length) {
			var u1 = _g11[_g2];
			++_g2;
			if(u1.size == 1) {
				context.setUniformInt(u1.location,u1.count,u1.dataArray);
			} else if(u1.size == 2) {
				context.setUniformInt2(u1.location,u1.count,u1.dataArray);
			} else if(u1.size == 3) {
				context.setUniformInt3(u1.location,u1.count,u1.dataArray);
			} else if(u1.size == 4) {
				context.setUniformInt4(u1.location,u1.count,u1.dataArray);
			}
		}
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var mvMatrix = this1;
		var this2 = new glm_Mat4Base();
		this2._00 = 0;
		this2._01 = 0;
		this2._02 = 0;
		this2._03 = 0;
		this2._10 = 0;
		this2._11 = 0;
		this2._12 = 0;
		this2._13 = 0;
		this2._20 = 0;
		this2._21 = 0;
		this2._22 = 0;
		this2._23 = 0;
		this2._30 = 0;
		this2._31 = 0;
		this2._32 = 0;
		this2._33 = 0;
		var pMatrix = this2;
		var _g3 = 0;
		var _g12 = this._uniformFloat;
		while(_g3 < _g12.length) {
			var u2 = _g12[_g3];
			++_g3;
			if(u2.size == 1) {
				context.setUniformFloat(u2.location,u2.count,u2.dataArray);
			} else if(u2.size == 2) {
				context.setUniformFloat2(u2.location,u2.count,u2.dataArray);
			} else if(u2.size == 3) {
				context.setUniformFloat3(u2.location,u2.count,u2.dataArray);
			} else if(u2.size == 4) {
				context.setUniformFloat4(u2.location,u2.count,u2.dataArray);
			} else if(u2.size == 16) {
				context.setUniformMatrix4x4(u2.location,u2.count,u2.dataArray);
			}
		}
		var _g4 = 0;
		var _g13 = this._samplers;
		while(_g4 < _g13.length) {
			var s = _g13[_g4];
			++_g4;
			var ss = s.sampler;
			var sid = ss.id;
			context.setTextureAt(s.position,s.sampler.id,s.location);
			context.setSamplerStateAt(s.position,s.wrapMode,s.textureFilter,s.mipFilter);
		}
		var _g5 = 0;
		var _g14 = this._attributes;
		while(_g5 < _g14.length) {
			var a = _g14[_g5];
			++_g5;
			context.setVertexBufferAt(a.location,a.resourceId,a.size,a.stride,a.offset);
		}
		context.setColorMask(this._colorMask);
		context.setBlendingModeSD(this._blendingSourceFactor,this._blendingDestinationFactor);
		context.setDepthTest(this._depthMask,this._depthFunc);
		context.setStencilTest(this._stencilFunction,this._stencilReference,this._stencilMask,this._stencilFailOp,this._stencilZFailOp,this._stencilZPassOp);
		context.setScissorTest(this._scissorTest,this._scissorBox);
		context.setTriangleCulling(this._triangleCulling);
		if(!this._pass.get_isForward()) {
			context.drawTriangles(0,2);
		} else {
			context.drawIndexBufferTriangles(this._indexBuffer,this._firstIndex,Math.floor(this._numIndices / 3));
		}
	}
	,bindAttribute: function(input,attributeBindings,defaultValues) {
		var binding = this.resolveBinding(input.name,attributeBindings);
		if(binding == null) {
			if(!defaultValues.hasProperty(input.name)) {
				var it = Lambda.has(this._program.get_setAttributeNames(),input.name);
				if(it == false) {
					console.log("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
					throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
				}
				this.setAttributeValueFromStore(input,input.name,defaultValues);
			}
		} else {
			if(!binding.store.hasProperty(binding.propertyName)) {
				if(!defaultValues.hasProperty(input.name)) {
					console.log("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
					throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the attribute \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
				}
				this.setAttributeValueFromStore(input,input.name,defaultValues);
			} else {
				this.setAttributeValueFromStore(input,binding.propertyName,binding.store);
			}
			binding = null;
		}
	}
	,bindUniform: function(input,uniformBindings,defaultValues) {
		var binding = this.resolveBinding(input.name,uniformBindings);
		if(binding == null) {
			if(!defaultValues.hasProperty(input.name)) {
				var it = Lambda.has(this._program.get_setUniformNames(),input.name);
				if(it == false) {
					console.log("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
					throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is not bound, has not been set and no default value was provided.");
				}
			}
			this.setUniformValueFromStore(input,input.name,defaultValues);
		} else if(!binding.store.hasProperty(binding.propertyName)) {
			if(!defaultValues.hasProperty(input.name)) {
				console.log("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
				throw new js__$Boot_HaxeError("Program \"" + this._program.get_name() + "\": the uniform \"" + input.name + "\" is bound to the \"" + binding.propertyName + "\" property but it's not defined and no default value was provided.");
			} else {
				this.setUniformValueFromStore(input,input.name,defaultValues);
			}
		} else {
			this.setUniformValueFromStore(input,binding.propertyName,binding.store);
		}
		return binding;
	}
	,bindSamplerStates: function(input,uniformBindings,defaultValues) {
		var wrapModeBinding = this.bindSamplerState(input,uniformBindings,defaultValues,"wrapMode");
		var textureFilterBinding = this.bindSamplerState(input,uniformBindings,defaultValues,"textureFilter");
		var mipFilterBinding = this.bindSamplerState(input,uniformBindings,defaultValues,"mipFilter");
		var samplerStatesResolveBindings = [wrapModeBinding,textureFilterBinding,mipFilterBinding];
		return samplerStatesResolveBindings;
	}
	,bindSamplerState: function(input,uniformBindings,defaultValues,samplerStateProperty) {
		if(samplerStateProperty == "wrapMode" || samplerStateProperty == "textureFilter" || samplerStateProperty == "mipFilter") {
			var samplerStateUniformName = minko_render_SamplerStates.uniformNameToSamplerStateName(input.name,samplerStateProperty);
			var binding = this.resolveBinding(samplerStateUniformName,uniformBindings);
			if(binding == null) {
				this.setSamplerStateValueFromStore(input,samplerStateUniformName,defaultValues,samplerStateProperty);
			} else if(!binding.store.hasProperty(binding.propertyName)) {
				this.setSamplerStateValueFromStore(input,samplerStateUniformName,defaultValues,samplerStateProperty);
			} else {
				this.setSamplerStateValueFromStore(input,binding.propertyName,binding.store,samplerStateProperty);
			}
			return binding;
		}
		return null;
	}
	,bindStates: function(stateBindings,defaultValues) {
		var statesResolveBindings = [this.bindState("priority",stateBindings,defaultValues),this.bindState("zSorted",stateBindings,defaultValues),this.bindState("blendingSource",stateBindings,defaultValues),this.bindState("blendingDestination",stateBindings,defaultValues),this.bindState("colorMask",stateBindings,defaultValues),this.bindState("depthMask",stateBindings,defaultValues),this.bindState("depthFunction",stateBindings,defaultValues),this.bindState("triangleCulling",stateBindings,defaultValues),this.bindState("stencilFunction",stateBindings,defaultValues),this.bindState("stencilReference",stateBindings,defaultValues),this.bindState("stencilMask",stateBindings,defaultValues),this.bindState("stencilFailOperation",stateBindings,defaultValues),this.bindState("stencilZFailOperation",stateBindings,defaultValues),this.bindState("stencilZPassOperation",stateBindings,defaultValues),this.bindState("scissorTest",stateBindings,defaultValues),this.bindState("scissorBox",stateBindings,defaultValues),this.bindState("target",stateBindings,defaultValues)];
		return statesResolveBindings;
	}
	,bindState: function(stateName,bindings,defaultValues) {
		var binding = this.resolveBinding(stateName,bindings);
		if(binding == null) {
			this.setStateValueFromStore(stateName,defaultValues);
		} else if(!binding.store.hasProperty(binding.propertyName)) {
			this.setStateValueFromStore(stateName,defaultValues);
		} else {
			this.setStateValueFromStore(stateName,binding.store);
		}
		return binding;
	}
	,bindPositionalMembers: function() {
		var _gthis = this;
		if(this._targetData.hasProperty("centerPosition")) {
			this._centerPosition = this._targetData.get("centerPosition");
		}
		if(this._targetData.hasProperty("modelToWorldMatrix")) {
			this._modelToWorldMatrix = this._targetData.get("modelToWorldMatrix");
		} else {
			this._modelToWorldMatrixPropertyAddedSlot = this._targetData.getPropertyAdded("modelToWorldMatrix").connect(function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
				_gthis._modelToWorldMatrix = _gthis._targetData.get("modelToWorldMatrix");
			});
		}
		if(this._rendererData.hasProperty("worldToScreenMatrix")) {
			this._worldToScreenMatrix = this._rendererData.get("worldToScreenMatrix");
		} else {
			this._worldToScreenMatrixPropertyAddedSlot = this._rendererData.getPropertyAdded("worldToScreenMatrix").connect(function(store,data,UnnamedParameter11) {
				_gthis._worldToScreenMatrix = _gthis._rendererData.get("worldToScreenMatrix");
			});
		}
		this._modelToWorldMatrixPropertyRemovedSlot = this._targetData.getPropertyRemoved("modelToWorldMatrix").connect(function(UnnamedParameter12,UnnamedParameter21,UnnamedParameter31) {
			_gthis._modelToWorldMatrix = null;
		});
		this._worldToScreenMatrixPropertyRemovedSlot = this._rendererData.getPropertyRemoved("worldToScreenMatrix").connect(function(store1,data1,UnnamedParameter13) {
			_gthis._worldToScreenMatrix = null;
		});
	}
	,bindIndexBuffer: function() {
		var indexBufferProperty = minko_data_Store.getActualPropertyName(this._variables,"geometry[@{geometryUuid}].indices");
		if(this._targetData.hasProperty(indexBufferProperty)) {
			this._indexBuffer = this._targetData.get(indexBufferProperty);
		}
		var surfaceFirstIndexProperty = minko_data_Store.getActualPropertyName(this._variables,"surface[@{surfaceUuid}].firstIndex");
		if(!this._targetData.hasProperty(surfaceFirstIndexProperty)) {
			var geometryFirstIndexProperty = minko_data_Store.getActualPropertyName(this._variables,"geometry[@{geometryUuid}].firstIndex");
			if(this._targetData.hasProperty(geometryFirstIndexProperty)) {
				this._firstIndex = this._targetData.get(geometryFirstIndexProperty);
			}
		} else {
			this._firstIndex = this._targetData.get(surfaceFirstIndexProperty);
		}
		var surfaceNumIndicesProperty = minko_data_Store.getActualPropertyName(this._variables,"surface[@{surfaceUuid}].numIndices");
		if(!this._targetData.hasProperty(surfaceNumIndicesProperty)) {
			var geometryNumIndicesProperty = minko_data_Store.getActualPropertyName(this._variables,"geometry[@{geometryUuid}].numIndices");
			if(this._targetData.hasProperty(geometryNumIndicesProperty)) {
				this._numIndices = this._targetData.get(geometryNumIndicesProperty);
			}
		} else {
			this._numIndices = this._targetData.get(surfaceNumIndicesProperty);
		}
	}
	,getEyeSpacePosition: function() {
		var this1 = new glm_Mat4Base();
		this1._00 = 0;
		this1._01 = 0;
		this1._02 = 0;
		this1._03 = 0;
		this1._10 = 0;
		this1._11 = 0;
		this1._12 = 0;
		this1._13 = 0;
		this1._20 = 0;
		this1._21 = 0;
		this1._22 = 0;
		this1._23 = 0;
		this1._30 = 0;
		this1._31 = 0;
		this1._32 = 0;
		this1._33 = 0;
		var modelView = this1;
		if(this._modelToWorldMatrix != null) {
			modelView = this._modelToWorldMatrix;
		}
		if(this._worldToScreenMatrix != null) {
			var a = this._worldToScreenMatrix;
			var this2 = new glm_Mat4Base();
			this2._00 = 0;
			this2._01 = 0;
			this2._02 = 0;
			this2._03 = 0;
			this2._10 = 0;
			this2._11 = 0;
			this2._12 = 0;
			this2._13 = 0;
			this2._20 = 0;
			this2._21 = 0;
			this2._22 = 0;
			this2._23 = 0;
			this2._30 = 0;
			this2._31 = 0;
			this2._32 = 0;
			this2._33 = 0;
			var dest = this2;
			var _a;
			var _b;
			if(dest == a) {
				var this3 = new glm_Mat4Base();
				this3._00 = 0;
				this3._01 = 0;
				this3._02 = 0;
				this3._03 = 0;
				this3._10 = 0;
				this3._11 = 0;
				this3._12 = 0;
				this3._13 = 0;
				this3._20 = 0;
				this3._21 = 0;
				this3._22 = 0;
				this3._23 = 0;
				this3._30 = 0;
				this3._31 = 0;
				this3._32 = 0;
				this3._33 = 0;
				var dest1 = this3;
				dest1._00 = a._00;
				dest1._10 = a._10;
				dest1._20 = a._20;
				dest1._30 = a._30;
				dest1._01 = a._01;
				dest1._11 = a._11;
				dest1._21 = a._21;
				dest1._31 = a._31;
				dest1._02 = a._02;
				dest1._12 = a._12;
				dest1._22 = a._22;
				dest1._32 = a._32;
				dest1._03 = a._03;
				dest1._13 = a._13;
				dest1._23 = a._23;
				dest1._33 = a._33;
				_a = dest1;
				_b = modelView;
			} else if(dest == modelView) {
				_a = a;
				var this4 = new glm_Mat4Base();
				this4._00 = 0;
				this4._01 = 0;
				this4._02 = 0;
				this4._03 = 0;
				this4._10 = 0;
				this4._11 = 0;
				this4._12 = 0;
				this4._13 = 0;
				this4._20 = 0;
				this4._21 = 0;
				this4._22 = 0;
				this4._23 = 0;
				this4._30 = 0;
				this4._31 = 0;
				this4._32 = 0;
				this4._33 = 0;
				var dest2 = this4;
				dest2._00 = modelView._00;
				dest2._10 = modelView._10;
				dest2._20 = modelView._20;
				dest2._30 = modelView._30;
				dest2._01 = modelView._01;
				dest2._11 = modelView._11;
				dest2._21 = modelView._21;
				dest2._31 = modelView._31;
				dest2._02 = modelView._02;
				dest2._12 = modelView._12;
				dest2._22 = modelView._22;
				dest2._32 = modelView._32;
				dest2._03 = modelView._03;
				dest2._13 = modelView._13;
				dest2._23 = modelView._23;
				dest2._33 = modelView._33;
				_b = dest2;
			} else {
				_a = a;
				_b = modelView;
			}
			dest._00 = _a._00 * _b._00 + _a._10 * _b._01 + _a._20 * _b._02 + _a._30 * _b._03;
			dest._10 = _a._00 * _b._10 + _a._10 * _b._11 + _a._20 * _b._12 + _a._30 * _b._13;
			dest._20 = _a._00 * _b._20 + _a._10 * _b._21 + _a._20 * _b._22 + _a._30 * _b._23;
			dest._30 = _a._00 * _b._30 + _a._10 * _b._31 + _a._20 * _b._32 + _a._30 * _b._33;
			dest._01 = _a._01 * _b._00 + _a._11 * _b._01 + _a._21 * _b._02 + _a._31 * _b._03;
			dest._11 = _a._01 * _b._10 + _a._11 * _b._11 + _a._21 * _b._12 + _a._31 * _b._13;
			dest._21 = _a._01 * _b._20 + _a._11 * _b._21 + _a._21 * _b._22 + _a._31 * _b._23;
			dest._31 = _a._01 * _b._30 + _a._11 * _b._31 + _a._21 * _b._32 + _a._31 * _b._33;
			dest._02 = _a._02 * _b._00 + _a._12 * _b._01 + _a._22 * _b._02 + _a._32 * _b._03;
			dest._12 = _a._02 * _b._10 + _a._12 * _b._11 + _a._22 * _b._12 + _a._32 * _b._13;
			dest._22 = _a._02 * _b._20 + _a._12 * _b._21 + _a._22 * _b._22 + _a._32 * _b._23;
			dest._32 = _a._02 * _b._30 + _a._12 * _b._31 + _a._22 * _b._32 + _a._32 * _b._33;
			dest._03 = _a._03 * _b._00 + _a._13 * _b._01 + _a._23 * _b._02 + _a._33 * _b._03;
			dest._13 = _a._03 * _b._10 + _a._13 * _b._11 + _a._23 * _b._12 + _a._33 * _b._13;
			dest._23 = _a._03 * _b._20 + _a._13 * _b._21 + _a._23 * _b._22 + _a._33 * _b._23;
			dest._33 = _a._03 * _b._30 + _a._13 * _b._31 + _a._23 * _b._32 + _a._33 * _b._33;
			modelView = dest;
		}
		var x = this._centerPosition.x;
		var y = this._centerPosition.y;
		var z = this._centerPosition.z;
		var this5 = new glm_Vec4Base();
		this5.x = x;
		this5.y = y;
		this5.z = z;
		this5.w = 1;
		var v = this5;
		var this6 = new glm_Vec4Base();
		this6.x = 0;
		this6.y = 0;
		this6.z = 0;
		this6.w = 0;
		var dest3 = this6;
		var x1 = v.x;
		var y1 = v.y;
		var z1 = v.z;
		var w = v.w;
		dest3.x = modelView._00 * x1 + modelView._10 * y1 + modelView._20 * z1 + modelView._30 * w;
		dest3.y = modelView._01 * x1 + modelView._11 * y1 + modelView._21 * z1 + modelView._31 * w;
		dest3.z = modelView._02 * x1 + modelView._12 * y1 + modelView._22 * z1 + modelView._32 * w;
		dest3.w = modelView._03 * x1 + modelView._13 * y1 + modelView._23 * z1 + modelView._33 * w;
		var tmp = dest3;
		var x2 = tmp.x;
		var y2 = tmp.y;
		var z2 = tmp.z;
		var this7 = new glm_Vec3Base();
		this7.x = x2;
		this7.y = y2;
		this7.z = z2;
		return this7;
	}
	,initializeOnContext: function(context) {
	}
	,reset: function() {
		this._program = null;
		this._indexBuffer = null;
		this._firstIndex = null;
		this._numIndices = null;
		this._uniformFloat = [];
		this._uniformInt = [];
		this._uniformBool = [];
		this._samplers = [];
		this._attributes = [];
		this._vertexAttribArray = 0;
	}
	,getStore: function(source) {
		switch(source) {
		case 0:
			return this._targetData;
		case 1:
			return this._rendererData;
		case 2:
			return this._rootData;
		}
	}
	,resolveBinding: function(inputName,bindings) {
		var isCollection = false;
		var bindingName = inputName;
		var isArray = inputName.charAt(inputName.length - 1) == "]";
		var pos = bindingName.indexOf("[");
		if(!isArray && pos != -1) {
			bindingName = HxOverrides.substr(bindingName,0,pos);
			isCollection = true;
		}
		var binding = null;
		var bindingPropertyName = "";
		var tmp;
		if(!(__map_reserved[bindingName] != null ? bindings.existsReserved(bindingName) : bindings.h.hasOwnProperty(bindingName))) {
			if(!isArray) {
				var key = bindingName + "[0]";
				if(__map_reserved[key] != null) {
					tmp = bindings.existsReserved(key);
				} else {
					tmp = bindings.h.hasOwnProperty(key);
				}
			} else {
				tmp = false;
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			binding = __map_reserved[bindingName] != null ? bindings.getReserved(bindingName) : bindings.h[bindingName];
			bindingPropertyName = binding.propertyName;
		}
		if(binding == null) {
			return null;
		}
		var store = this.getStore(binding.source);
		var propertyName = minko_data_Store.getActualPropertyName(this._variables,bindingPropertyName);
		if(isCollection && !isArray) {
			propertyName += HxOverrides.substr(inputName,pos,null);
		}
		return new minko_data_ResolvedBinding(binding,propertyName,store);
	}
	,setUniformValueFromStore: function(input,propertyName,store) {
		var isArray = input.name.charAt(input.name.length - 1) == "]";
		var data = store.get(propertyName);
		if(isArray == false) {
			var _g = input.type;
			switch(_g) {
			case 1:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,1,input.size,minko_render_UniformValue.vecInts1(data),data);
				break;
			case 2:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,2,input.size,minko_render_UniformValue.vecInts2(data),data);
				break;
			case 3:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,3,input.size,minko_render_UniformValue.vecInts3(data),data);
				break;
			case 4:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,4,input.size,minko_render_UniformValue.vecInts4(data),data);
				break;
			case 5:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,1,input.size,minko_render_UniformValue.vecInts1(data),data);
				break;
			case 6:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,2,input.size,minko_render_UniformValue.vecInts2(data),data);
				break;
			case 7:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,3,input.size,minko_render_UniformValue.vecInts3(data),data);
				break;
			case 8:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,4,input.size,minko_render_UniformValue.vecInts4(data),data);
				break;
			case 9:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,1,input.size,minko_render_UniformValue.vecFloats1(data),data);
				break;
			case 10:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,2,input.size,minko_render_UniformValue.vecFloats2(data),data);
				break;
			case 11:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,3,input.size,minko_render_UniformValue.vecFloats3(data),data);
				break;
			case 12:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,4,input.size,minko_render_UniformValue.vecFloats4(data),data);
				break;
			case 0:case 13:
				console.log("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				throw new js__$Boot_HaxeError("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				break;
			case 14:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,16,input.size,minko_render_UniformValue.matFloats(data),data);
				break;
			case 15:case 16:
				var samplerIt = Lambda.find(this._samplers,function(samplerValue) {
					return samplerValue.location == input.location;
				});
				var texture = store.get(propertyName);
				if(samplerIt == null) {
					this._samplers.push(new minko_render_SamplerValue(this._program.get_setTextureNames().length + this._samplers.length,texture.get_sampler(),input.location));
				} else {
					samplerIt.sampler = texture.get_sampler();
				}
				break;
			}
		} else {
			var _g1 = input.type;
			switch(_g1) {
			case 1:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,1,input.size,minko_render_UniformValue.vecsInts1(data),data);
				break;
			case 2:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,2,input.size,minko_render_UniformValue.vecsInts2(data),data);
				break;
			case 3:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,3,input.size,minko_render_UniformValue.vecsInts3(data),data);
				break;
			case 4:
				minko_render_DrawCall.setUniformValue(this._uniformInt,input.location,4,input.size,minko_render_UniformValue.vecsInts4(data),data);
				break;
			case 5:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,1,input.size,minko_render_UniformValue.vecsInts1(data),data);
				break;
			case 6:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,2,input.size,minko_render_UniformValue.vecsInts2(data),data);
				break;
			case 7:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,3,input.size,minko_render_UniformValue.vecsInts3(data),data);
				break;
			case 8:
				minko_render_DrawCall.setUniformValue(this._uniformBool,input.location,4,input.size,minko_render_UniformValue.vecsInts4(data),data);
				break;
			case 9:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,1,input.size,minko_render_UniformValue.vecsFloats1(data),data);
				break;
			case 10:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,2,input.size,minko_render_UniformValue.vecsFloats2(data),data);
				break;
			case 11:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,3,input.size,minko_render_UniformValue.vecsFloats3(data),data);
				break;
			case 12:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,4,input.size,minko_render_UniformValue.vecsFloats4(data),data);
				break;
			case 0:case 13:
				console.log("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				throw new js__$Boot_HaxeError("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				break;
			case 14:
				minko_render_DrawCall.setUniformValue(this._uniformFloat,input.location,16,input.size,minko_render_UniformValue.matsFloats(data),data);
				break;
			case 15:case 16:
				console.log("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				throw new js__$Boot_HaxeError("unsupported program input type: " + minko_render_ProgramInputs.typeToString(input.type));
				break;
			}
		}
	}
	,setSamplerStateValueFromStore: function(input,propertyName,store,samplerStateProperty) {
		var it = Lambda.find(this._samplers,function(sampler) {
			return sampler.location == input.location;
		});
		if(it != null) {
			var sampler1 = it;
			if(samplerStateProperty == "wrapMode") {
				if(store.hasProperty(propertyName)) {
					sampler1.wrapMode = store.get(propertyName);
				} else {
					sampler1.wrapMode = 0;
				}
			} else if(samplerStateProperty == "textureFilter") {
				if(store.hasProperty(propertyName)) {
					sampler1.textureFilter = store.get(propertyName);
				} else {
					sampler1.textureFilter = 0;
				}
			} else if(samplerStateProperty == "mipFilter") {
				if(store.hasProperty(propertyName)) {
					sampler1.mipFilter = store.get(propertyName);
				} else {
					sampler1.mipFilter = 0;
				}
			}
		}
	}
	,setStateValueFromStore: function(stateName,store) {
		if(stateName == "priority") {
			if(store.hasProperty(stateName)) {
				this._priority = store.get(stateName);
			} else {
				this._priority = minko_render_States.DEFAULT_PRIORITY;
			}
		} else if(stateName == "zSorted") {
			if(store.hasProperty(stateName)) {
				this._zSorted = store.get(stateName);
			} else {
				this._zSorted = false;
			}
		} else if(stateName == "blendingSource") {
			if(store.hasProperty(stateName)) {
				this._blendingSourceFactor = store.get(stateName);
			} else {
				this._blendingSourceFactor = 2;
			}
		} else if(stateName == "blendingDestination") {
			if(store.hasProperty(stateName)) {
				this._blendingDestinationFactor = store.get(stateName);
			} else {
				this._blendingDestinationFactor = 256;
			}
		} else if(stateName == "colorMask") {
			if(store.hasProperty(stateName)) {
				this._colorMask = store.get(stateName);
			} else {
				this._colorMask = true;
			}
		} else if(stateName == "depthMask") {
			if(store.hasProperty(stateName)) {
				this._depthMask = store.get(stateName);
			} else {
				this._depthMask = true;
			}
		} else if(stateName == "depthFunction") {
			if(store.hasProperty(stateName)) {
				this._depthFunc = store.get(stateName);
			} else {
				this._depthFunc = 4;
			}
		} else if(stateName == "triangleCulling") {
			if(store.hasProperty(stateName)) {
				this._triangleCulling = store.get(stateName);
			} else {
				this._triangleCulling = 2;
			}
		} else if(stateName == "stencilFunction") {
			if(store.hasProperty(stateName)) {
				this._stencilFunction = store.get(stateName);
			} else {
				this._stencilFunction = 0;
			}
		} else if(stateName == "stencilReference") {
			if(store.hasProperty(stateName)) {
				this._stencilReference = store.get(stateName);
			} else {
				this._stencilReference = 0;
			}
		} else if(stateName == "stencilMask") {
			if(store.hasProperty(stateName)) {
				this._stencilMask = store.get(stateName);
			} else {
				this._stencilMask = 1;
			}
		} else if(stateName == "stencilFailOperation") {
			if(store.hasProperty(stateName)) {
				this._stencilFailOp = store.get(stateName);
			} else {
				this._stencilFailOp = 0;
			}
		} else if(stateName == "stencilZFailOperation") {
			if(store.hasProperty(stateName)) {
				this._stencilZFailOp = store.get(stateName);
			} else {
				this._stencilZFailOp = 0;
			}
		} else if(stateName == "stencilZPassOperation") {
			if(store.hasProperty(stateName)) {
				this._stencilZPassOp = store.get(stateName);
			} else {
				this._stencilZPassOp = 0;
			}
		} else if(stateName == "scissorTest") {
			if(store.hasProperty(stateName)) {
				this._scissorTest = store.get(stateName);
			} else {
				this._scissorTest = false;
			}
		} else if(stateName == "scissorBox") {
			if(store.hasProperty(stateName)) {
				this._scissorBox = store.get(stateName);
			} else {
				this._scissorBox = minko_render_States.DEFAULT_SCISSOR_BOX;
			}
		} else if(stateName == "target") {
			if(store.hasProperty(stateName)) {
				this._target = store.get(stateName);
			} else {
				this._target = minko_render_States.DEFAULT_TARGET;
			}
		}
	}
	,setAttributeValueFromStore: function(input,propertyName,store) {
		var attr = store.get(propertyName);
		this._attributes.push(new minko_render_AttributeValue(input.location,attr.resourceId,attr.size,attr.vertexSize,attr.offset));
	}
	,__class__: minko_render_DrawCall
});
var minko_render_DrawCallPool = $hx_exports["minko"]["render"]["DrawCallPool"] = function() {
	this._zSortUsefulPropertyNames = [];
	this._sortUsefulPropertyNames = [];
	this._batchId = 0;
	this._drawCalls = new haxe_ds_StringMap();
	this._drawCallsKeys = [];
	this._macroToDrawCalls = new haxe_ds_StringMap();
	this._invalidDrawCalls = new haxe_ds_ObjectMap();
	this._macroChangedSlot = new haxe_ds_StringMap();
	this._drawCallToPropRebindFuncs = new haxe_ds_ObjectMap();
	this._drawCallsToBeSorted = [];
	this._propChangedSlot = new haxe_ds_StringMap();
	this._sortUsefulPropertyChangedSlot = new haxe_ds_StringMap();
	this._zSortUsefulPropertyChangedSlot = new haxe_ds_StringMap();
	this._mustZSort = false;
};
minko_render_DrawCallPool.__name__ = true;
minko_render_DrawCallPool.macroBindingKey = function(propertyName,m,s) {
	return propertyName + "+" + m.get_uuid() + "_" + s.get_uuid();
};
minko_render_DrawCallPool.drawCallKey = function(m,s) {
	return m.get_uuid() + "_" + s.get_uuid();
};
minko_render_DrawCallPool.sortPropertyTuple = function(m,s) {
	return m + "_" + s;
};
minko_render_DrawCallPool.compareZSortedDrawCalls = function(a,b) {
	var aPosition = a.getEyeSpacePosition();
	var bPosition = b.getEyeSpacePosition();
	if(aPosition.z > bPosition.z) {
		return -1;
	} else if(aPosition.z < bPosition.z) {
		return 1;
	} else {
		return 0;
	}
};
minko_render_DrawCallPool.compareDrawCalls = function(a,b) {
	a = a.toUpperCase();
	b = b.toUpperCase();
	if(a > b) {
		return -1;
	} else if(a < b) {
		return 1;
	} else {
		return 0;
	}
};
minko_render_DrawCallPool.prototype = {
	dispose: function() {
		if(this._macroToDrawCalls != null) {
			this._macroToDrawCalls = null;
		}
		if(this._macroChangedSlot != null) {
			this._macroChangedSlot = null;
		}
		if(this._propChangedSlot != null) {
			this._propChangedSlot = null;
		}
		if(this._drawCallToPropRebindFuncs != null) {
			this._drawCallToPropRebindFuncs = null;
		}
	}
	,get_drawCallsKeys: function() {
		return this._drawCallsKeys;
	}
	,get_drawCalls: function() {
		return this._drawCalls;
	}
	,addDrawCalls: function(effect,techniqueName,variables,rootData,rendererData,targetData) {
		var technique = effect.technique(techniqueName);
		this._batchId++;
		var _g = 0;
		while(_g < technique.length) {
			var pass = technique[_g];
			++_g;
			var drawCall = [new minko_render_DrawCall(this._batchId,pass,variables,rootData,rendererData,targetData)];
			this.initializeDrawCall(drawCall[0]);
			if(!pass.get_isForward()) {
				var seekedDrawCall = this.findDrawCall((function(drawCall1) {
					return function(d) {
						return d.get_program() == drawCall1[0].get_program();
					};
				})(drawCall));
				if(seekedDrawCall != null) {
					seekedDrawCall.get_batchIDs().push(this._batchId);
					drawCall[0] = null;
					continue;
				}
			}
			this.addDrawCallToSortedBucket(drawCall[0]);
		}
		return this._batchId;
	}
	,_removeDrawCalls: function(drawCalls,batchId) {
		var _gthis = this;
		return drawCalls.filter(function(drawCall) {
			var batchIDs = drawCall.get_batchIDs();
			var it = Lambda.has(batchIDs,batchId);
			if(it != false) {
				HxOverrides.remove(batchIDs,batchId);
				if(batchIDs.length != 0) {
					return true;
				}
				var tmp = drawCall.get_pass().get_macroBindings();
				var tmp1 = drawCall.get_rootData();
				var tmp2 = drawCall.get_rendererData();
				var tmp3 = drawCall.get_targetData();
				_gthis.unwatchProgramSignature(drawCall,tmp,tmp1,tmp2,tmp3);
				_gthis.unbindDrawCall(drawCall);
				_gthis._invalidDrawCalls.remove(drawCall);
				HxOverrides.remove(_gthis._drawCallsToBeSorted,drawCall);
				drawCall.dispose();
				drawCall = null;
				return false;
			}
			return true;
		});
	}
	,removeDrawCalls: function(batchId) {
		var _this = this._drawCalls;
		var priorityAndTargetIdToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(priorityAndTargetIdToDrawCalls.hasNext()) {
			var priorityAndTargetIdToDrawCalls1 = priorityAndTargetIdToDrawCalls.next();
			var batchId1 = [batchId];
			var _gthis = [this];
			priorityAndTargetIdToDrawCalls1.first = priorityAndTargetIdToDrawCalls1.first.filter((function(_gthis1,batchId2) {
				return function(drawCall) {
					var batchIDs = drawCall.get_batchIDs();
					var it = Lambda.has(batchIDs,batchId2[0]);
					if(it != false) {
						HxOverrides.remove(batchIDs,batchId2[0]);
						if(batchIDs.length != 0) {
							return true;
						}
						var tmp = drawCall.get_pass().get_macroBindings();
						var tmp1 = drawCall.get_rootData();
						var tmp2 = drawCall.get_rendererData();
						var tmp3 = drawCall.get_targetData();
						_gthis1[0].unwatchProgramSignature(drawCall,tmp,tmp1,tmp2,tmp3);
						_gthis1[0].unbindDrawCall(drawCall);
						_gthis1[0]._invalidDrawCalls.remove(drawCall);
						HxOverrides.remove(_gthis1[0]._drawCallsToBeSorted,drawCall);
						drawCall.dispose();
						drawCall = null;
						return false;
					}
					return true;
				};
			})(_gthis,batchId1));
			var batchId3 = [batchId];
			var _gthis2 = [this];
			priorityAndTargetIdToDrawCalls1.second = priorityAndTargetIdToDrawCalls1.second.filter((function(_gthis3,batchId4) {
				return function(drawCall1) {
					var batchIDs1 = drawCall1.get_batchIDs();
					var it1 = Lambda.has(batchIDs1,batchId4[0]);
					if(it1 != false) {
						HxOverrides.remove(batchIDs1,batchId4[0]);
						if(batchIDs1.length != 0) {
							return true;
						}
						var tmp4 = drawCall1.get_pass().get_macroBindings();
						var tmp5 = drawCall1.get_rootData();
						var tmp6 = drawCall1.get_rendererData();
						var tmp7 = drawCall1.get_targetData();
						_gthis3[0].unwatchProgramSignature(drawCall1,tmp4,tmp5,tmp6,tmp7);
						_gthis3[0].unbindDrawCall(drawCall1);
						_gthis3[0]._invalidDrawCalls.remove(drawCall1);
						HxOverrides.remove(_gthis3[0]._drawCallsToBeSorted,drawCall1);
						drawCall1.dispose();
						drawCall1 = null;
						return false;
					}
					return true;
				};
			})(_gthis2,batchId3));
		}
	}
	,invalidateDrawCalls: function(batchId,variables) {
		var _gthis = this;
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				var batchIDs = drawCall.get_batchIDs();
				var it = Lambda.has(batchIDs,batchId);
				if(it != false) {
					_gthis._invalidDrawCalls.set(drawCall,new minko_Tuple(true,variables));
				}
			}
			var drawCalls1 = sortPropertiesToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls1.length) {
				var drawCall1 = drawCalls1[_g1];
				++_g1;
				var batchIDs1 = drawCall1.get_batchIDs();
				var it1 = Lambda.has(batchIDs1,batchId);
				if(it1 != false) {
					_gthis._invalidDrawCalls.set(drawCall1,new minko_Tuple(true,variables));
				}
			}
		}
	}
	,update: function(forceSort,mustZSort) {
		if(mustZSort == null) {
			mustZSort = false;
		}
		if(forceSort == null) {
			forceSort = false;
		}
		var invalidDrawCall = this._invalidDrawCalls.keys();
		while(invalidDrawCall.hasNext()) {
			var invalidDrawCall1 = invalidDrawCall.next();
			var drawCallPtr = invalidDrawCall1;
			this.initializeDrawCall(drawCallPtr,true);
		}
		this._invalidDrawCalls = new haxe_ds_ObjectMap();
		var drawCallPtrAndFuncList = this._drawCallToPropRebindFuncs.iterator();
		while(drawCallPtrAndFuncList.hasNext()) {
			var drawCallPtrAndFuncList1 = drawCallPtrAndFuncList.next();
			var _g = 0;
			while(_g < drawCallPtrAndFuncList1.length) {
				var func = drawCallPtrAndFuncList1[_g];
				++_g;
				func();
			}
		}
		this._drawCallToPropRebindFuncs = new haxe_ds_ObjectMap();
		var _g1 = 0;
		var _g11 = this._drawCallsToBeSorted;
		while(_g1 < _g11.length) {
			var drawCall = _g11[_g1];
			++_g1;
			this.removeDrawCallFromSortedBucket(drawCall);
			this.addDrawCallToSortedBucket(drawCall);
		}
		this._drawCallsToBeSorted = [];
		var finalMustZSort = forceSort || this._mustZSort || mustZSort;
		if(finalMustZSort) {
			this._mustZSort = false;
			this.zSortDrawCalls();
		}
	}
	,clear: function() {
		this._drawCalls = new haxe_ds_StringMap();
		this._drawCallsKeys = [];
		this._macroToDrawCalls = new haxe_ds_StringMap();
		this._invalidDrawCalls = new haxe_ds_ObjectMap();
		this._macroChangedSlot = new haxe_ds_StringMap();
		this._propChangedSlot = new haxe_ds_StringMap();
		this._drawCallToPropRebindFuncs = new haxe_ds_ObjectMap();
		this._sortUsefulPropertyChangedSlot = new haxe_ds_StringMap();
		this._zSortUsefulPropertyChangedSlot = new haxe_ds_StringMap();
	}
	,get_numDrawCalls: function() {
		var numDrawCalls = 0;
		var _this = this._drawCalls;
		var drawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(drawCalls.hasNext()) {
			var drawCalls1 = drawCalls.next();
			numDrawCalls += drawCalls1.first.length;
			numDrawCalls += drawCalls1.second.length;
		}
		return numDrawCalls;
	}
	,watchProgramSignature: function(drawCall,macroBindings,rootData,rendererData,targetData) {
		var _gthis = this;
		var macroNameAndBinding = macroBindings.bindings.keys();
		while(macroNameAndBinding.hasNext()) {
			var macroNameAndBinding1 = macroNameAndBinding.next();
			var macroName = macroNameAndBinding1;
			var _this = macroBindings.bindings;
			var macroBinding = [__map_reserved[macroNameAndBinding1] != null ? _this.getReserved(macroNameAndBinding1) : _this.h[macroNameAndBinding1]];
			var store = macroBinding[0].source == 2 ? rootData : macroBinding[0].source == 1 ? rendererData : targetData;
			var propertyName = [minko_data_Store.getActualPropertyName(drawCall.get_variables(),macroBinding[0].propertyName)];
			var _bindingKey = minko_render_DrawCallPool.macroBindingKey(propertyName[0],macroBinding[0],store);
			var _this1 = this._macroToDrawCalls;
			if(!(__map_reserved[_bindingKey] != null ? _this1.existsReserved(_bindingKey) : _this1.h.hasOwnProperty(_bindingKey))) {
				var _this2 = this._macroToDrawCalls;
				var value = [];
				if(__map_reserved[_bindingKey] != null) {
					_this2.setReserved(_bindingKey,value);
				} else {
					_this2.h[_bindingKey] = value;
				}
			}
			var _this3 = this._macroToDrawCalls;
			var drawCalls = [__map_reserved[_bindingKey] != null ? _this3.getReserved(_bindingKey) : _this3.h[_bindingKey]];
			drawCalls[0].push(drawCall);
			var _this4 = macroBindings.types;
			if((__map_reserved[macroName] != null ? _this4.getReserved(macroName) : _this4.h[macroName]) != 0) {
				this.addMacroCallback(_bindingKey,store.getPropertyChanged(propertyName[0]),(function(drawCalls1,macroBinding1) {
					return function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
						_gthis.macroPropertyChangedHandler(macroBinding1[0],drawCalls1[0]);
					};
				})(drawCalls,macroBinding));
			} else {
				var hasProperty = [store.hasProperty(propertyName[0])];
				this.addMacroCallback(_bindingKey,hasProperty[0] ? store.getPropertyRemoved(propertyName[0]) : store.getPropertyAdded(propertyName[0]),(function(hasProperty1,drawCalls2,propertyName1,macroBinding2) {
					return function(s,UnnamedParameter11,p) {
						if(hasProperty1[0]) {
							_gthis.macroPropertyRemovedHandler(macroBinding2[0],propertyName1[0],s,drawCalls2[0]);
						} else {
							_gthis.macroPropertyAddedHandler(macroBinding2[0],propertyName1[0],s,drawCalls2[0]);
						}
					};
				})(hasProperty,drawCalls,propertyName,macroBinding));
			}
		}
	}
	,unwatchProgramSignature: function(drawCall,macroBindings,rootData,rendererData,targetData) {
		var macroNameAndBinding = macroBindings.bindings.keys();
		while(macroNameAndBinding.hasNext()) {
			var macroNameAndBinding1 = macroNameAndBinding.next();
			var _this = macroBindings.bindings;
			var macroBinding = __map_reserved[macroNameAndBinding1] != null ? _this.getReserved(macroNameAndBinding1) : _this.h[macroNameAndBinding1];
			var store = macroBinding.source == 2 ? rootData : macroBinding.source == 1 ? rendererData : targetData;
			var propertyName = minko_data_Store.getActualPropertyName(drawCall.get_variables(),macroBinding.propertyName);
			var bindingKey = minko_render_DrawCallPool.macroBindingKey(propertyName,macroBinding,store);
			var _this1 = this._macroToDrawCalls;
			if(__map_reserved[bindingKey] != null ? _this1.existsReserved(bindingKey) : _this1.h.hasOwnProperty(bindingKey)) {
				var _this2 = this._macroToDrawCalls;
				var drawCalls = __map_reserved[bindingKey] != null ? _this2.getReserved(bindingKey) : _this2.h[bindingKey];
				HxOverrides.remove(drawCalls,drawCall);
				if(drawCalls.length == 0) {
					drawCalls = null;
					this._macroToDrawCalls.remove(bindingKey);
				}
			}
			this.removeMacroCallback(bindingKey);
		}
	}
	,macroPropertyAddedHandler: function(macroBinding,propertyName,store,drawCalls) {
		var _gthis = this;
		var key = minko_render_DrawCallPool.macroBindingKey(propertyName,macroBinding,store);
		this.removeMacroCallback(key);
		this.addMacroCallback(key,store.getPropertyRemoved(propertyName),function(s,UnnamedParameter1,p) {
			_gthis.macroPropertyRemovedHandler(macroBinding,propertyName,s,drawCalls);
		});
		this.macroPropertyChangedHandler(macroBinding,drawCalls);
	}
	,macroPropertyRemovedHandler: function(macroBinding,propertyName,store,drawCalls) {
		var _gthis = this;
		if(store.hasProperty(propertyName)) {
			return;
		}
		var key = minko_render_DrawCallPool.macroBindingKey(propertyName,macroBinding,store);
		this.removeMacroCallback(key);
		this.addMacroCallback(key,store.getPropertyAdded(propertyName),function(s,UnnamedParameter1,p) {
			_gthis.macroPropertyAddedHandler(macroBinding,propertyName,s,drawCalls);
		});
		this.macroPropertyChangedHandler(macroBinding,drawCalls);
	}
	,macroPropertyChangedHandler: function(macroBinding,drawCalls) {
		var _g = 0;
		while(_g < drawCalls.length) {
			var drawCall = drawCalls[_g];
			++_g;
			this._invalidDrawCalls.set(drawCall,new minko_Tuple(false,[]));
		}
	}
	,initializeDrawCall: function(drawCall,forceRebind) {
		if(forceRebind == null) {
			forceRebind = false;
		}
		var invalidDrawCallIt = this._invalidDrawCalls.h[drawCall.__id__];
		var variablesChanged = false;
		if(invalidDrawCallIt != null) {
			variablesChanged = invalidDrawCallIt.first;
		}
		var newVariables = [];
		if(variablesChanged) {
			newVariables = invalidDrawCallIt.second;
		}
		var variables = variablesChanged ? newVariables : drawCall.get_variables();
		var pass = drawCall.get_pass();
		var programAndSignature = pass.selectProgram(variables,drawCall.get_targetData(),drawCall.get_rendererData(),drawCall.get_rootData());
		var program = programAndSignature.first;
		if(program == drawCall.get_program()) {
			if(variablesChanged) {
				drawCall.set_variables(variables);
			}
			return;
		}
		if(drawCall.get_program() != null) {
			this.unwatchProgramSignature(drawCall,drawCall.get_pass().get_macroBindings(),drawCall.get_rootData(),drawCall.get_rendererData(),drawCall.get_targetData());
			this.unbindDrawCall(drawCall);
		}
		if(variablesChanged) {
			drawCall.set_variables(variables);
		}
		this.bindDrawCall(drawCall,pass,program,forceRebind);
		if(programAndSignature.second != null) {
			this.watchProgramSignature(drawCall,drawCall.get_pass().get_macroBindings(),drawCall.get_rootData(),drawCall.get_rendererData(),drawCall.get_targetData());
		}
	}
	,addMacroCallback: function(key,signal,callback) {
		var _this = this._macroChangedSlot;
		var value = new minko_Tuple(signal.connect(callback),1);
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	}
	,removeMacroCallback: function(key) {
		var _this = this._macroChangedSlot;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			return;
		}
		var _this1 = this._macroChangedSlot;
		var tmp = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
		tmp.second--;
		var _this2 = this._macroChangedSlot;
		if((__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]).second == 0) {
			var _this3 = this._macroChangedSlot;
			var signalSlot3 = (__map_reserved[key] != null ? _this3.getReserved(key) : _this3.h[key]).first;
			signalSlot3.disconnect();
			this._macroChangedSlot.remove(key);
		}
	}
	,hasMacroCallback: function(key) {
		var _this = this._macroChangedSlot;
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,uniformBindingPropertyAddedHandler: function(drawCall,input,uniformBindingMap,forceRebind) {
		if(forceRebind == null) {
			forceRebind = false;
		}
		var _gthis = this;
		if(!forceRebind && this._invalidDrawCalls.h.__keys__[drawCall.__id__] != null) {
			return;
		}
		var resolvedBinding = drawCall.bindUniform(input,uniformBindingMap.bindings,uniformBindingMap.defaultValues);
		if(resolvedBinding != null) {
			var propertyName = resolvedBinding.propertyName;
			var bindingPtr = resolvedBinding.binding;
			var propertyExist = resolvedBinding.store.hasProperty(propertyName);
			var signal = resolvedBinding.store.getPropertyChanged(propertyName);
			var _drawCallKey = minko_render_DrawCallPool.drawCallKey(bindingPtr,drawCall);
			var _this = this._propChangedSlot;
			if(__map_reserved[_drawCallKey] != null ? _this.existsReserved(_drawCallKey) : _this.h.hasOwnProperty(_drawCallKey)) {
				var _this1 = this._propChangedSlot;
				(__map_reserved[_drawCallKey] != null ? _this1.getReserved(_drawCallKey) : _this1.h[_drawCallKey]).second.disconnect();
			}
			var changedSlot = signal.connect(function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
				_gthis._propChangedSlot.remove(_drawCallKey);
				if(_gthis._drawCallToPropRebindFuncs.h.__keys__[drawCall.__id__] != null == false) {
					_gthis._drawCallToPropRebindFuncs.set(drawCall,[]);
				}
				_gthis._drawCallToPropRebindFuncs.h[drawCall.__id__].push(function() {
					_gthis.uniformBindingPropertyAddedHandler(drawCall,input,uniformBindingMap,forceRebind);
				});
			},0,true);
			var _this2 = this._propChangedSlot;
			var value = new minko_Tuple(drawCall,changedSlot);
			if(__map_reserved[_drawCallKey] != null) {
				_this2.setReserved(_drawCallKey,value);
			} else {
				_this2.h[_drawCallKey] = value;
			}
			if(propertyExist && drawCall.get_zSorted()) {
				var propertyRelatedToZSortIt = Lambda.find(this._zSortUsefulPropertyNames,function(zSortUsefulPropertyName) {
					return minko_data_Store.getActualPropertyName(drawCall.get_variables(),zSortUsefulPropertyName) == propertyName;
				});
				if(propertyRelatedToZSortIt != null) {
					var _this3 = this._zSortUsefulPropertyChangedSlot;
					if(__map_reserved[_drawCallKey] != null ? _this3.existsReserved(_drawCallKey) : _this3.h.hasOwnProperty(_drawCallKey)) {
						var _this4 = this._zSortUsefulPropertyChangedSlot;
						(__map_reserved[_drawCallKey] != null ? _this4.getReserved(_drawCallKey) : _this4.h[_drawCallKey]).second.disconnect();
					}
					var _this5 = this._zSortUsefulPropertyChangedSlot;
					var value1 = resolvedBinding.store.getPropertyChanged(propertyName).connect(function(UnnamedParameter11,UnnamedParameter21,UnnamedParameter31) {
						_gthis._mustZSort = true;
					});
					var value2 = new minko_Tuple(drawCall,value1);
					if(__map_reserved[_drawCallKey] != null) {
						_this5.setReserved(_drawCallKey,value2);
					} else {
						_this5.h[_drawCallKey] = value2;
					}
				}
			}
			resolvedBinding = null;
		}
		if(input.type == 15 || input.type == 16) {
			this.samplerStatesBindingPropertyAddedHandler(drawCall,input,uniformBindingMap);
		}
	}
	,stateBindingPropertyAddedHandler: function(stateName,drawCall,stateBindingMap,forceRebind) {
		var _gthis = this;
		if(!forceRebind && this._invalidDrawCalls.h.__keys__[drawCall.__id__] != null) {
			return;
		}
		var resolvedBinding = drawCall.bindState(stateName,stateBindingMap.bindings,stateBindingMap.defaultValues);
		if(resolvedBinding != null) {
			var bindingPtr = resolvedBinding.binding;
			var propertyName = resolvedBinding.propertyName;
			var propertyExist = resolvedBinding.store.hasProperty(propertyName);
			var signal = resolvedBinding.store.getPropertyChanged(propertyName);
			var _drawCallKey = minko_render_DrawCallPool.drawCallKey(resolvedBinding.binding,drawCall);
			var _this = this._propChangedSlot;
			if(__map_reserved[_drawCallKey] != null ? _this.existsReserved(_drawCallKey) : _this.h.hasOwnProperty(_drawCallKey)) {
				var _this1 = this._propChangedSlot;
				(__map_reserved[_drawCallKey] != null ? _this1.getReserved(_drawCallKey) : _this1.h[_drawCallKey]).second.disconnect();
			}
			var changedSlot = signal.connect(function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
				_gthis._propChangedSlot.remove(_drawCallKey);
				if(_gthis._drawCallToPropRebindFuncs.h.__keys__[drawCall.__id__] != null == false) {
					_gthis._drawCallToPropRebindFuncs.set(drawCall,[]);
				}
				_gthis._drawCallToPropRebindFuncs.h[drawCall.__id__].push(function() {
					_gthis.stateBindingPropertyAddedHandler(stateName,drawCall,stateBindingMap,forceRebind);
				});
			},0,true);
			var _this2 = this._propChangedSlot;
			var value = new minko_Tuple(drawCall,changedSlot);
			if(__map_reserved[_drawCallKey] != null) {
				_this2.setReserved(_drawCallKey,value);
			} else {
				_this2.h[_drawCallKey] = value;
			}
			var propertyRelatedToSortIt = Lambda.find(this._sortUsefulPropertyNames,function(sortUsefulPropertyName) {
				return minko_data_Store.getActualPropertyName(drawCall.get_variables(),sortUsefulPropertyName) == propertyName;
			});
			if(propertyRelatedToSortIt != null) {
				var _this3 = this._sortUsefulPropertyChangedSlot;
				if(__map_reserved[_drawCallKey] != null ? _this3.existsReserved(_drawCallKey) : _this3.h.hasOwnProperty(_drawCallKey)) {
					var _this4 = this._sortUsefulPropertyChangedSlot;
					(__map_reserved[_drawCallKey] != null ? _this4.getReserved(_drawCallKey) : _this4.h[_drawCallKey]).second.disconnect();
				}
				var _this5 = this._sortUsefulPropertyChangedSlot;
				var value1 = resolvedBinding.store.getPropertyChanged(propertyName).connect(function(UnnamedParameter11,UnnamedParameter21,UnnamedParameter31) {
					_gthis._drawCallsToBeSorted.push(drawCall);
				});
				var value2 = new minko_Tuple(drawCall,value1);
				if(__map_reserved[_drawCallKey] != null) {
					_this5.setReserved(_drawCallKey,value2);
				} else {
					_this5.h[_drawCallKey] = value2;
				}
			}
			resolvedBinding = null;
		}
	}
	,samplerStatesBindingPropertyAddedHandler: function(drawCall,input,uniformBindingMap) {
		var _gthis = this;
		var resolvedBindings = drawCall.bindSamplerStates(input,uniformBindingMap.bindings,uniformBindingMap.defaultValues);
		var _g = 0;
		while(_g < resolvedBindings.length) {
			var resolvedBinding = resolvedBindings[_g];
			++_g;
			if(resolvedBinding != null) {
				var propertyName = resolvedBinding.propertyName;
				var propertyExist = resolvedBinding.store.hasProperty(propertyName);
				var signal = resolvedBinding.store.getPropertyChanged(propertyName);
				var _drawCallKey = [minko_render_DrawCallPool.drawCallKey(resolvedBinding.binding,drawCall)];
				var _this = this._propChangedSlot;
				if(__map_reserved[_drawCallKey[0]] != null ? _this.existsReserved(_drawCallKey[0]) : _this.h.hasOwnProperty(_drawCallKey[0])) {
					var _this1 = this._propChangedSlot;
					(__map_reserved[_drawCallKey[0]] != null ? _this1.getReserved(_drawCallKey[0]) : _this1.h[_drawCallKey[0]]).second.disconnect();
				}
				var changedSlot = signal.connect((function(_drawCallKey1) {
					return function(UnnamedParameter1,UnnamedParameter2,UnnamedParameter3) {
						_gthis._propChangedSlot.remove(_drawCallKey1[0]);
						if(_gthis._drawCallToPropRebindFuncs.h.__keys__[drawCall.__id__] != null == false) {
							_gthis._drawCallToPropRebindFuncs.set(drawCall,[]);
						}
						_gthis._drawCallToPropRebindFuncs.h[drawCall.__id__].push((function() {
							return function() {
								_gthis.samplerStatesBindingPropertyAddedHandler(drawCall,input,uniformBindingMap);
							};
						})());
					};
				})(_drawCallKey),0,true);
				var _this2 = this._propChangedSlot;
				var value = new minko_Tuple(drawCall,changedSlot);
				if(__map_reserved[_drawCallKey[0]] != null) {
					_this2.setReserved(_drawCallKey[0],value);
				} else {
					_this2.h[_drawCallKey[0]] = value;
				}
				resolvedBinding = null;
			}
		}
	}
	,addDrawCallToSortedBucket: function(drawCall) {
		var priority = drawCall.get_priority();
		var targetId = drawCall.get_target() != null ? drawCall.get_target().get_id() : 0;
		var zSortedIndex = drawCall.get_zSorted() ? 1 : 0;
		var _sortPropertyTuple = minko_render_DrawCallPool.sortPropertyTuple(priority,targetId);
		var _this = this._drawCalls;
		if(!(__map_reserved[_sortPropertyTuple] != null ? _this.existsReserved(_sortPropertyTuple) : _this.h.hasOwnProperty(_sortPropertyTuple))) {
			this._drawCallsKeys.push(_sortPropertyTuple);
			this._drawCallsKeys.sort(minko_render_DrawCallPool.compareDrawCalls);
			var _this1 = this._drawCalls;
			var value = new minko_Tuple([],[]);
			if(__map_reserved[_sortPropertyTuple] != null) {
				_this1.setReserved(_sortPropertyTuple,value);
			} else {
				_this1.h[_sortPropertyTuple] = value;
			}
		}
		var _this2 = this._drawCalls;
		var _drawCallList = __map_reserved[_sortPropertyTuple] != null ? _this2.getReserved(_sortPropertyTuple) : _this2.h[_sortPropertyTuple];
		if(zSortedIndex == 1) {
			_drawCallList.second.push(drawCall);
		} else {
			_drawCallList.first.push(drawCall);
		}
	}
	,removeDrawCallFromSortedBucket: function(drawCall) {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			HxOverrides.remove(sortPropertiesToDrawCalls1.first,drawCall);
			HxOverrides.remove(sortPropertiesToDrawCalls1.second,drawCall);
		}
	}
	,findDrawCall: function(predicate) {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				if(predicate(drawCall)) {
					return drawCall;
				}
			}
			drawCalls = sortPropertiesToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls.length) {
				var drawCall1 = drawCalls[_g1];
				++_g1;
				if(predicate(drawCall1)) {
					return drawCall1;
				}
			}
		}
		return null;
	}
	,foreachDrawCall: function(func) {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.first;
			var _g = 0;
			while(_g < drawCalls.length) {
				var drawCall = drawCalls[_g];
				++_g;
				func(drawCall);
			}
			var drawCalls1 = sortPropertiesToDrawCalls1.second;
			var _g1 = 0;
			while(_g1 < drawCalls1.length) {
				var drawCall1 = drawCalls1[_g1];
				++_g1;
				func(drawCall1);
			}
		}
	}
	,bindDrawCall: function(drawCall,pass,program,forceRebind) {
		drawCall.bind(program);
		var _g = 0;
		var _g1 = program.get_inputs().get_attributes();
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			drawCall.bindAttribute(input,pass.get_attributeBindings().bindings,pass.get_attributeBindings().defaultValues);
		}
		var _g2 = 0;
		var _g11 = minko_render_States.PROPERTY_NAMES;
		while(_g2 < _g11.length) {
			var stateName = _g11[_g2];
			++_g2;
			this.stateBindingPropertyAddedHandler(stateName,drawCall,pass.get_stateBindings(),forceRebind);
		}
		var _g3 = 0;
		var _g12 = program.get_inputs().get_uniforms();
		while(_g3 < _g12.length) {
			var input1 = _g12[_g3];
			++_g3;
			this.uniformBindingPropertyAddedHandler(drawCall,input1,pass.get_uniformBindings(),forceRebind);
		}
		if(!(!pass.get_isForward())) {
			drawCall.bindIndexBuffer();
		}
	}
	,unbindDrawCall: function(drawCall) {
		var _gthis = this;
		var keys = this._propChangedSlot.keys();
		var tmp = [];
		while(keys.hasNext()) {
			var value = keys.next();
			var _this = _gthis._propChangedSlot;
			if((__map_reserved[value] != null ? _this.getReserved(value) : _this.h[value]).first == drawCall) {
				tmp.push(value);
			}
		}
		var __propChangedSlot_keys = tmp;
		var _g = 0;
		while(_g < __propChangedSlot_keys.length) {
			var it = __propChangedSlot_keys[_g];
			++_g;
			var _this1 = this._propChangedSlot;
			(__map_reserved[it] != null ? _this1.getReserved(it) : _this1.h[it]).second.disconnect();
			this._propChangedSlot.remove(it);
		}
		var keys1 = this._sortUsefulPropertyChangedSlot.keys();
		var tmp1 = [];
		while(keys1.hasNext()) {
			var value1 = keys1.next();
			var _this2 = _gthis._sortUsefulPropertyChangedSlot;
			if((__map_reserved[value1] != null ? _this2.getReserved(value1) : _this2.h[value1]).first == drawCall) {
				tmp1.push(value1);
			}
		}
		var _sortUsefulPropertyChangedSlot_keys = tmp1;
		var _g1 = 0;
		while(_g1 < _sortUsefulPropertyChangedSlot_keys.length) {
			var it1 = _sortUsefulPropertyChangedSlot_keys[_g1];
			++_g1;
			var _this3 = this._sortUsefulPropertyChangedSlot;
			(__map_reserved[it1] != null ? _this3.getReserved(it1) : _this3.h[it1]).second.disconnect();
			this._sortUsefulPropertyChangedSlot.remove(it1);
		}
		var keys2 = this._zSortUsefulPropertyChangedSlot.keys();
		var tmp2 = [];
		while(keys2.hasNext()) {
			var value2 = keys2.next();
			var _this4 = _gthis._zSortUsefulPropertyChangedSlot;
			if((__map_reserved[value2] != null ? _this4.getReserved(value2) : _this4.h[value2]).first == drawCall) {
				tmp2.push(value2);
			}
		}
		var _zSortUsefulPropertyChangedSlot_keys = tmp2;
		var _g2 = 0;
		while(_g2 < _zSortUsefulPropertyChangedSlot_keys.length) {
			var it2 = _zSortUsefulPropertyChangedSlot_keys[_g2];
			++_g2;
			var _this5 = this._zSortUsefulPropertyChangedSlot;
			(__map_reserved[it2] != null ? _this5.getReserved(it2) : _this5.h[it2]).second.disconnect();
			this._zSortUsefulPropertyChangedSlot.remove(it2);
		}
		this._drawCallToPropRebindFuncs.remove(drawCall);
	}
	,zSortDrawCalls: function() {
		var _this = this._drawCalls;
		var sortPropertiesToDrawCalls = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sortPropertiesToDrawCalls.hasNext()) {
			var sortPropertiesToDrawCalls1 = sortPropertiesToDrawCalls.next();
			var drawCalls = sortPropertiesToDrawCalls1.second;
			drawCalls.sort(minko_render_DrawCallPool.compareZSortedDrawCalls);
		}
	}
	,__class__: minko_render_DrawCallPool
};
var minko_render_Effect = $hx_exports["minko"]["render"]["Effect"] = function(name) {
	if(name == null) {
		name = "";
	}
	minko_Has_$uuid.call(this);
	this._data = minko_data_Provider.create();
	this._name = name;
	this._techniques = new haxe_ds_StringMap();
	this._fallback = new haxe_ds_StringMap();
	this._uniformFunctions = [];
	this._attributeFunctions = [];
	this._macroFunctions = [];
};
minko_render_Effect.__name__ = true;
minko_render_Effect.create = function(name) {
	if(name == null) {
		name = "";
	}
	return new minko_render_Effect(name);
};
minko_render_Effect.createbyTechnique = function(name,passes) {
	var effect = minko_render_Effect.create(name);
	var _this = effect._techniques;
	if(__map_reserved["default"] != null) {
		_this.setReserved("default",passes);
	} else {
		_this.h["default"] = passes;
	}
	return effect;
};
minko_render_Effect.setUniformOnPass = function(pass,name,values) {
	pass.setUniform(name,values);
};
minko_render_Effect.setVertexAttributeOnPass = function(pass,name,attribute) {
	pass.setAttribute(name,attribute);
};
minko_render_Effect.defineOnPass = function(pass,macroName) {
	pass.define(macroName);
};
minko_render_Effect.defineOnPassWithValue = function(pass,macroName,macroValue) {
	pass.setDefine(macroName,macroValue);
};
minko_render_Effect.__super__ = minko_Has_$uuid;
minko_render_Effect.prototype = $extend(minko_Has_$uuid.prototype,{
	get_uuid: function() {
		return this._data.get_uuid();
	}
	,get_name: function() {
		return this._name;
	}
	,get_techniques: function() {
		return this._techniques;
	}
	,get_data: function() {
		return this._data;
	}
	,technique: function(techniqueName) {
		if(!this.hasTechnique(techniqueName)) {
			throw new js__$Boot_HaxeError("techniqueName = " + techniqueName);
		}
		var _this = this._techniques;
		if(__map_reserved[techniqueName] != null) {
			return _this.getReserved(techniqueName);
		} else {
			return _this.h[techniqueName];
		}
	}
	,fallback: function(techniqueName) {
		var _this = this._fallback;
		var foundFallbackIt = __map_reserved[techniqueName] != null ? _this.existsReserved(techniqueName) : _this.h.hasOwnProperty(techniqueName);
		if(foundFallbackIt == false) {
			throw new js__$Boot_HaxeError("techniqueName = " + techniqueName);
		}
		var _this1 = this._fallback;
		if(__map_reserved[techniqueName] != null) {
			return _this1.getReserved(techniqueName);
		} else {
			return _this1.h[techniqueName];
		}
	}
	,hasTechnique: function(techniqueName) {
		var _this = this._techniques;
		return (__map_reserved[techniqueName] != null ? _this.existsReserved(techniqueName) : _this.h.hasOwnProperty(techniqueName)) != false;
	}
	,hasFallback: function(techniqueName) {
		var _this = this._fallback;
		return (__map_reserved[techniqueName] != null ? _this.existsReserved(techniqueName) : _this.h.hasOwnProperty(techniqueName)) != false;
	}
	,setUniform: function(name,values) {
		this._uniformFunctions.push(function(pass) {
			minko_render_Effect.setUniformOnPass(pass,name,values);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.setUniform(name,values);
			}
		}
	}
	,setAttribute: function(name,attribute) {
		this._attributeFunctions.push(function(pass) {
			minko_render_Effect.setVertexAttributeOnPass(pass,name,attribute);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.setAttribute(name,attribute);
			}
		}
	}
	,define: function(macroName) {
		this._macroFunctions.push(function(pass) {
			minko_render_Effect.defineOnPass(pass,macroName);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.define(macroName);
			}
		}
	}
	,setDefine: function(macroName,macroValue) {
		this._macroFunctions.push(function(pass) {
			minko_render_Effect.defineOnPassWithValue(pass,macroName,macroValue);
		});
		var _this = this._techniques;
		var technique = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(technique.hasNext()) {
			var technique1 = technique.next();
			var _g = 0;
			while(_g < technique1.length) {
				var pass1 = technique1[_g];
				++_g;
				pass1.setDefine(macroName,macroValue);
			}
		}
	}
	,addTechnique: function(name,passes) {
		if(this.hasTechnique(name)) {
			throw new js__$Boot_HaxeError("A technique named '" + name + "' already exists.");
		}
		var _g = 0;
		while(_g < passes.length) {
			var pass = passes[_g];
			++_g;
			var _g1 = 0;
			var _g2 = this._uniformFunctions;
			while(_g1 < _g2.length) {
				var func = _g2[_g1];
				++_g1;
				func(pass);
			}
			var _g11 = 0;
			var _g21 = this._attributeFunctions;
			while(_g11 < _g21.length) {
				var func1 = _g21[_g11];
				++_g11;
				func1(pass);
			}
			var _g12 = 0;
			var _g22 = this._macroFunctions;
			while(_g12 < _g22.length) {
				var func2 = _g22[_g12];
				++_g12;
				func2(pass);
			}
		}
		var _this = this._techniques;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,passes);
		} else {
			_this.h[name] = passes;
		}
	}
	,addTechniqueFallback: function(name,passes,fallback) {
		var _this = this._fallback;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,fallback);
		} else {
			_this.h[name] = fallback;
		}
		this.addTechnique(name,passes);
	}
	,removeTechnique: function(name) {
		if(!this.hasTechnique(name)) {
			throw new js__$Boot_HaxeError("The technique named '" + name + "' does not exist.");
		}
		this._techniques.remove(name);
		this._fallback.remove(name);
	}
	,initializeMaterial: function(material,technique) {
		if(technique == null) {
			technique = "default";
		}
		this.fillMaterial(material,technique);
		return material;
	}
	,fillMaterial: function(material,technique) {
		var _this = this._techniques;
		var passes = __map_reserved[technique] != null ? _this.getReserved(technique) : _this.h[technique];
		var _g = 0;
		while(_g < passes.length) {
			var pass = passes[_g];
			++_g;
			var defaultValues = pass.get_uniformBindings().defaultValues.get_providers()[0];
			var nameAndBinding = pass.get_uniformBindings().bindings.keys();
			while(nameAndBinding.hasNext()) {
				var nameAndBinding1 = nameAndBinding.next();
				var uniformName = nameAndBinding1;
				var _this1 = pass.get_uniformBindings().bindings;
				var nameAndBinding_second = __map_reserved[nameAndBinding1] != null ? _this1.getReserved(nameAndBinding1) : _this1.h[nameAndBinding1];
				if(defaultValues.hasProperty(uniformName)) {
					var pos = nameAndBinding_second.propertyName.indexOf("material[@{materialUuid}].");
					if(pos == 0) {
						var tmp = material.get_data();
						var tmp1 = HxOverrides.substr(nameAndBinding_second.propertyName,pos + 26,null);
						var _this2 = defaultValues.get_values();
						tmp.set(tmp1,__map_reserved[uniformName] != null ? _this2.getReserved(uniformName) : _this2.h[uniformName]);
					}
				}
			}
		}
	}
	,__class__: minko_render_Effect
});
var minko_render_GlContext = $hx_exports["minko"]["render"]["GlContext"] = function() {
	minko_render_AbstractContext.call(this);
};
minko_render_GlContext.__name__ = true;
minko_render_GlContext.bytesToUint8Array = function(b) {
	return new Uint8Array(b.b.bufferValue);
};
minko_render_GlContext.initializeBlendFactorsMap = function() {
	var m = new haxe_ds_IntMap();
	m.h[1] = 0;
	m.h[2] = 1;
	m.h[4] = 768;
	m.h[8] = 769;
	m.h[16] = 770;
	m.h[32] = 771;
	m.h[64] = 772;
	m.h[128] = 773;
	m.h[256] = 0;
	m.h[512] = 1;
	m.h[1024] = 774;
	m.h[2048] = 775;
	m.h[32768] = 773;
	m.h[8192] = 771;
	m.h[16384] = 772;
	m.h[32768] = 773;
	return m;
};
minko_render_GlContext.initializeDepthFuncsMap = function() {
	var m = new haxe_ds_IntMap();
	m.h[0] = 519;
	m.h[1] = 514;
	m.h[2] = 516;
	m.h[3] = 518;
	m.h[4] = 513;
	m.h[5] = 515;
	m.h[6] = 512;
	m.h[7] = 517;
	return m;
};
minko_render_GlContext.initializeStencilOperationsMap = function() {
	var m = new haxe_ds_IntMap();
	m.h[0] = 7680;
	m.h[1] = 0;
	m.h[2] = 7681;
	m.h[3] = 7682;
	m.h[4] = 34055;
	m.h[5] = 7683;
	m.h[6] = 34056;
	m.h[7] = 5386;
	return m;
};
minko_render_GlContext.create = function() {
	return new minko_render_GlContext();
};
minko_render_GlContext.__super__ = minko_render_AbstractContext;
minko_render_GlContext.prototype = $extend(minko_render_AbstractContext.prototype,{
	initialize: function() {
		this._textureTypes = new haxe_ds_IntMap();
		this._uniformInputLocations = new haxe_ds_IntMap();
		this._uniformInputLocationKeys = new haxe_ds_ObjectMap();
		this._errorsEnabled = false;
		this._textures = new haxe_ds_IntMap();
		this._textureSizes = new haxe_ds_IntMap();
		this._textureHasMipmaps = new haxe_ds_IntMap();
		this._oldViewportX = this._viewportX = 0;
		this._oldViewportY = this._viewportY = 0;
		this._oldViewportWidth = this._viewportWidth = 0;
		this._oldViewportHeight = this._viewportHeight = 0;
		this._currentTarget = 0;
		this._currentIndexBuffer = 0;
		this._currentVertexBuffer = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			this._currentVertexBuffer.h[i] = 0;
		}
		this._currentVertexSize = new haxe_ds_IntMap();
		var _g1 = 0;
		while(_g1 < 8) {
			var i1 = _g1++;
			this._currentVertexSize.h[i1] = -1;
		}
		this._currentVertexStride = new haxe_ds_IntMap();
		var _g2 = 0;
		while(_g2 < 8) {
			var i2 = _g2++;
			this._currentVertexStride.h[i2] = -1;
		}
		this._currentVertexOffset = new haxe_ds_IntMap();
		var _g3 = 0;
		while(_g3 < 8) {
			var i3 = _g3++;
			this._currentVertexOffset.h[i3] = -1;
		}
		this._currentBoundTexture = 0;
		this._currentTexture = new haxe_ds_IntMap();
		var _g4 = 0;
		while(_g4 < 8) {
			var i4 = _g4++;
			this._currentTexture.h[i4] = 0;
		}
		this._currentProgram = 0;
		this._currentTriangleCulling = 2;
		this._currentWrapMode = new haxe_ds_IntMap();
		this._currentTextureFilter = new haxe_ds_IntMap();
		this._currentMipFilter = new haxe_ds_IntMap();
		this._currentBlendingMode = 2 | 256;
		this._currentColorMask = true;
		this._currentDepthMask = true;
		this._currentDepthFunc = 8;
		this._currentStencilFunc = 8;
		this._currentStencilRef = 0;
		this._currentStencilMask = 1;
		this._currentStencilFailOp = 8;
		this._currentStencilZFailOp = 8;
		this._currentStencilZPassOp = 8;
		this._vertexAttributeEnabled = new haxe_ds_IntMap();
		var _g5 = 0;
		while(_g5 < 32) {
			var i5 = _g5++;
			this._vertexAttributeEnabled.h[i5] = false;
		}
		this._stencilBits = 0;
		this._vertexBuffers = new haxe_ds_IntMap();
		this._indexBuffers = new haxe_ds_IntMap();
		this._programs = new haxe_ds_IntMap();
		this._vertexShaders = new haxe_ds_IntMap();
		this._fragmentShaders = new haxe_ds_IntMap();
		this._shaders = new haxe_ds_IntMap();
		this._frameBuffers = new haxe_ds_IntMap();
		this._renderBuffers = new haxe_ds_IntMap();
		this.gl.enable(2929);
		this.gl.enable(3042);
		this.gl.enable(2884);
		this.gl.cullFace(1029);
		this.gl.frontFace(2305);
		this._driverInfo = "";
		this._oglMajorVersion = 2;
		this._oglMinorVersion = 0;
		var viewportSettings = this.gl.getParameter(2978);
		this._viewportX = viewportSettings[0];
		this._viewportY = viewportSettings[1];
		this._viewportWidth = viewportSettings[2];
		this._viewportHeight = viewportSettings[3];
		this.setColorMask(true);
		this.setDepthTest(true,4);
		this._stencilBits = this.gl.getParameter(3415);
		if(this._stencilBits != -1) {
			this.gl.enable(2960);
			this.setStencilTest(0,0,1,0,0,0);
		}
		this.initializeExtFunctions();
	}
	,initializeExtFunctions: function() {
	}
	,dispose: function() {
		var vertexBuffer = this._vertexBuffers.iterator();
		while(vertexBuffer.hasNext()) {
			var vertexBuffer1 = vertexBuffer.next();
			this.gl.deleteBuffer(vertexBuffer1);
		}
		var indexBuffer = this._indexBuffers.iterator();
		while(indexBuffer.hasNext()) {
			var indexBuffer1 = indexBuffer.next();
			this.gl.deleteBuffer(indexBuffer1);
		}
		var texture = this._textures.iterator();
		while(texture.hasNext()) {
			var texture1 = texture.next();
			this.gl.deleteTexture(texture1);
		}
		var program = this._programs.iterator();
		while(program.hasNext()) {
			var program1 = program.next();
			this.gl.deleteProgram(program1);
		}
		var vertexShader = this._vertexShaders.iterator();
		while(vertexShader.hasNext()) {
			var vertexShader1 = vertexShader.next();
			this.gl.deleteShader(vertexShader1);
		}
		var fragmentShader = this._fragmentShaders.iterator();
		while(fragmentShader.hasNext()) {
			var fragmentShader1 = fragmentShader.next();
			this.gl.deleteShader(fragmentShader1);
		}
		minko_render_AbstractContext.prototype.dispose.call(this);
	}
	,get_errorsEnabled: function() {
		return this._errorsEnabled;
	}
	,set_errorsEnabled: function(errors) {
		this._errorsEnabled = errors;
		return errors;
	}
	,get_driverInfo: function() {
		return this._driverInfo;
	}
	,get_renderTarget: function() {
		return this._currentTarget;
	}
	,get_viewportWidth: function() {
		return this._viewportWidth;
	}
	,get_viewportHeight: function() {
		return this._viewportHeight;
	}
	,get_currentProgram: function() {
		return this._currentProgram;
	}
	,configureViewport: function(x,y,width,height) {
		if(x != this._viewportX || y != this._viewportY || width != this._viewportWidth || height != this._viewportHeight) {
			this._viewportX = x;
			this._viewportY = y;
			this._viewportWidth = width;
			this._viewportHeight = height;
			this.gl.viewport(x,y,width,height);
		}
	}
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = -1;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 0.0;
		}
		if(blue == null) {
			blue = 0.0;
		}
		if(green == null) {
			green = 0.0;
		}
		if(red == null) {
			red = 0.0;
		}
		this.gl.clearColor(red,green,blue,alpha);
		this.gl.clearDepth(depth);
		if(this._stencilBits != 0) {
			this.gl.clearStencil(stencil);
		}
		mask = 17664 & mask;
		if((mask & 256) != null) {
			this.gl.depthMask(this._currentDepthMask = true);
		}
		this.gl.clear(mask);
	}
	,present: function() {
		this.gl.flush();
	}
	,drawTriangles: function(firstIndex,numTriangles) {
		this.gl.bindBuffer(34963,null);
		this._currentIndexBuffer = 0;
		this.gl.drawArrays(4,firstIndex,numTriangles * 3);
		this.checkForErrors();
	}
	,drawIndexBufferTriangles: function(indexBuffer,firstIndex,numTriangles) {
		this.gl.bindBuffer(34963,this._indexBuffers.h[indexBuffer]);
		this.checkForErrors();
		this.gl.drawElements(4,numTriangles * 3,5123,firstIndex);
		this.checkForErrors();
	}
	,checkForErrors: function() {
		if(this._errorsEnabled && this.getError() != 0) {
			console.log("error: OpenGLES2Context::checkForErrors()");
			console.log("\n");
			throw new js__$Boot_HaxeError("");
		}
	}
	,createVertexBuffer: function(size) {
		var vertexBuffer = this.gl.createBuffer();
		this.gl.bindBuffer(34962,vertexBuffer);
		this.gl.bufferData(34962,size * 4,35044);
		minko_render_GlContext.vertexBufferCount += 1;
		this._vertexBuffers.h[minko_render_GlContext.vertexBufferCount] = vertexBuffer;
		this.checkForErrors();
		return minko_render_GlContext.vertexBufferCount;
	}
	,createVertexAttributeArray: function() {
		return -1;
	}
	,setVertexAttributeArray: function(vertexArray) {
	}
	,setVertexBufferAt: function(position,vertexBuffer,size,stride,offset) {
		var vertexAttributeEnabled = vertexBuffer > 0;
		var vertexBufferChanged = this._currentVertexBuffer.h[position] != vertexBuffer || vertexAttributeEnabled;
		if(vertexBufferChanged) {
			this.gl.bindBuffer(34962,this._vertexBuffers.h[vertexBuffer]);
			this.checkForErrors();
			this._currentVertexBuffer.h[position] = vertexBuffer;
		}
		if(vertexBufferChanged || this._currentVertexSize.h[position] != size || this._currentVertexStride.h[position] != stride || this._currentVertexOffset.h[position] != offset) {
			this.gl.vertexAttribPointer(position,size,5126,false,4 * stride,4 * offset);
			this.checkForErrors();
			this._currentVertexSize.h[position] = size;
			this._currentVertexStride.h[position] = stride;
			this._currentVertexOffset.h[position] = offset;
		}
		if(vertexBufferChanged || this._vertexAttributeEnabled.h[position] != vertexAttributeEnabled) {
			if(vertexAttributeEnabled) {
				this.gl.enableVertexAttribArray(position);
				this.checkForErrors();
				this._vertexAttributeEnabled.h[position] = true;
			} else {
				this.gl.disableVertexAttribArray(position);
				this.checkForErrors();
				this._vertexAttributeEnabled.h[position] = false;
			}
		}
	}
	,uploadVertexBufferData: function(vertexBuffer,offset,size,data) {
		this.gl.bindBuffer(34962,this._vertexBuffers.h[vertexBuffer]);
		this.gl.bufferSubData(34962,offset * 4,new Float32Array(data));
		this.checkForErrors();
	}
	,deleteVertexBuffer: function(vertexBuffer) {
		var currentVertexBuffer = this._currentVertexBuffer.keys();
		while(currentVertexBuffer.hasNext()) {
			var currentVertexBuffer1 = currentVertexBuffer.next();
			if(this._currentVertexBuffer.h[currentVertexBuffer1] == vertexBuffer) {
				this._currentVertexBuffer.h[currentVertexBuffer1] = 0;
			}
		}
		this.gl.deleteBuffer(this._vertexBuffers.h[vertexBuffer]);
		this._vertexBuffers.remove(vertexBuffer);
		this.checkForErrors();
	}
	,createIndexBuffer: function(size) {
		var indexBuffer = this.gl.createBuffer();
		this.gl.bindBuffer(34963,indexBuffer);
		this.gl.bufferData(34963,size * 2,35044);
		minko_render_GlContext.indexBufferCount += 1;
		this._currentIndexBuffer = minko_render_GlContext.indexBufferCount;
		this._indexBuffers.h[minko_render_GlContext.indexBufferCount] = indexBuffer;
		this.checkForErrors();
		return minko_render_GlContext.indexBufferCount;
	}
	,uploaderIndexBufferData: function(indexBuffer,offset,size,data) {
		if(this._currentIndexBuffer != indexBuffer) {
			this.gl.bindBuffer(34963,this._indexBuffers.h[indexBuffer]);
			this._currentIndexBuffer = indexBuffer;
		}
		this.gl.bufferSubData(34963,offset * 2,new Uint16Array(data));
		this.checkForErrors();
	}
	,deleteIndexBuffer: function(indexBuffer) {
		if(this._currentIndexBuffer == indexBuffer) {
			this._currentIndexBuffer = 0;
		}
		this.gl.deleteBuffer(this._indexBuffers.h[indexBuffer]);
		this._indexBuffers.remove(indexBuffer);
		this.checkForErrors();
	}
	,createTexture: function(type,width,height,mipMapping,optimizeForRenderToTexture,assertPowerOfTwoSized) {
		if(assertPowerOfTwoSized == null) {
			assertPowerOfTwoSized = true;
		}
		if(optimizeForRenderToTexture == null) {
			optimizeForRenderToTexture = false;
		}
		if(assertPowerOfTwoSized) {
			if(!(width != 0 && (width & width - 1) == 0)) {
				throw new js__$Boot_HaxeError("width");
			}
			if(!(height != 0 && (height & height - 1) == 0)) {
				throw new js__$Boot_HaxeError("height");
			}
		} else if(mipMapping) {
			throw new js__$Boot_HaxeError("assertPowerOfTwoSized must be true when mipMapping is true");
		}
		var texture = this.gl.createTexture();
		var glTarget = type == 0 ? 3553 : 34067;
		this.gl.bindTexture(glTarget,texture);
		minko_render_GlContext.textureCount++;
		this._currentBoundTexture = minko_render_GlContext.textureCount;
		this.gl.texParameteri(glTarget,10242,33071);
		this.gl.texParameteri(glTarget,10243,33071);
		this.gl.texParameteri(glTarget,10241,9728);
		this.gl.texParameteri(glTarget,10240,9728);
		this._textures.h[minko_render_GlContext.textureCount] = texture;
		var _this = this._textureSizes;
		var key = minko_render_GlContext.textureCount;
		var value = new minko_Tuple(width,height);
		_this.h[key] = value;
		this._textureHasMipmaps.h[minko_render_GlContext.textureCount] = mipMapping;
		this._textureTypes.h[minko_render_GlContext.textureCount] = type;
		this._currentWrapMode.h[minko_render_GlContext.textureCount] = 0;
		this._currentTextureFilter.h[minko_render_GlContext.textureCount] = 0;
		this._currentMipFilter.h[minko_render_GlContext.textureCount] = 0;
		if(mipMapping) {
			var level = 0;
			var h = height;
			var w = width;
			var size = width > height ? width : height;
			while(size > 0) {
				if(type == 0) {
					this.gl.texImage2D(3553,level,6408,w,h,0,6408,5121,null);
				} else {
					this.gl.texImage2D(34069,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34070,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34071,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34072,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34073,level,6408,w,h,0,6408,5121,null);
					this.gl.texImage2D(34074,level,6408,w,h,0,6408,5121,null);
				}
				++level;
				size >>= 1;
				w >>= 1;
				h >>= 1;
			}
		} else if(type == 0) {
			this.gl.texImage2D(3553,0,6408,width,height,0,6408,5121,null);
		} else {
			this.gl.texImage2D(34069,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34070,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34071,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34072,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34073,0,6408,width,height,0,6408,5121,null);
			this.gl.texImage2D(34074,0,6408,width,height,0,6408,5121,null);
		}
		if(optimizeForRenderToTexture) {
			this.createRTTBuffers(type,minko_render_GlContext.textureCount,width,height);
		}
		this.checkForErrors();
		return minko_render_GlContext.textureCount;
	}
	,createRectangleTexture: function(type,width,height) {
		return this.createTexture(type,width,height,false,false,false);
	}
	,createCompressedTexture: function(type,format,width,height,mipMapping) {
		if(!(width != 0 && (width & width - 1) == 0)) {
			throw new js__$Boot_HaxeError("width");
		}
		if(!(height != 0 && (height & height - 1) == 0)) {
			throw new js__$Boot_HaxeError("height");
		}
		var texture = this.gl.createTexture();
		var glTarget = type == 0 ? 3553 : 34067;
		this.gl.bindTexture(glTarget,texture);
		minko_render_GlContext.textureCount++;
		this._currentBoundTexture = minko_render_GlContext.textureCount;
		this.gl.texParameteri(glTarget,10242,33071);
		this.gl.texParameteri(glTarget,10243,33071);
		this.gl.texParameteri(glTarget,10241,9728);
		this.gl.texParameteri(glTarget,10240,9728);
		this._textures.h[minko_render_GlContext.textureCount] = texture;
		var _this = this._textureSizes;
		var key = minko_render_GlContext.textureCount;
		var value = new minko_Tuple(width,height);
		_this.h[key] = value;
		this._textureHasMipmaps.h[minko_render_GlContext.textureCount] = mipMapping;
		this._textureTypes.h[minko_render_GlContext.textureCount] = type;
		this._currentWrapMode.h[minko_render_GlContext.textureCount] = 0;
		this._currentTextureFilter.h[minko_render_GlContext.textureCount] = 0;
		this._currentMipFilter.h[minko_render_GlContext.textureCount] = 0;
		var oglFormat = this.availableTextureFormats().h[format];
		var level = 0;
		var h = height;
		var w = width;
		if(mipMapping) {
			var size = width > height ? width : height;
			while(size > 0) {
				var dataSize = minko_render_TextureFormatInfo.textureSize(format,w,h);
				var data = new haxe_io_Bytes(new ArrayBuffer(dataSize));
				if(type == 0) {
					this.gl.compressedTexImage2D(3553,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
				} else {
					this.gl.compressedTexImage2D(34069,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34070,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34071,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34072,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34073,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
					this.gl.compressedTexImage2D(34074,level,oglFormat,w,h,0,new Uint8Array(data.b.bufferValue));
				}
				++level;
				size >>= 1;
				w >>= 1;
				h >>= 1;
			}
		} else {
			var dataSize1 = minko_render_TextureFormatInfo.textureSize(format,width,height);
			var data1 = new haxe_io_Bytes(new ArrayBuffer(dataSize1));
			if(type == 0) {
				this.gl.compressedTexImage2D(3553,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
			} else {
				this.gl.compressedTexImage2D(34069,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34070,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34071,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34072,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34073,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
				this.gl.compressedTexImage2D(34074,level,oglFormat,w,h,0,new Uint8Array(data1.b.bufferValue));
			}
		}
		this.checkForErrors();
		return minko_render_GlContext.textureCount;
	}
	,getTextureType: function(textureId) {
		var foundTypeIt = this._textureTypes.h[textureId];
		return foundTypeIt;
	}
	,uploadTexture2dData: function(texture,width,height,mipLevel,data) {
		this.gl.bindTexture(3553,this._textures.h[texture]);
		this.gl.texImage2D(3553,mipLevel,6408,width,height,0,6408,5121,new Uint8Array(data.b.bufferValue));
		this._currentBoundTexture = texture;
		this.checkForErrors();
	}
	,uploadCubeTextureData: function(texture,face,width,height,mipLevel,data) {
		this.gl.bindTexture(34067,this._textures.h[texture]);
		var cubeFace = 0;
		switch(face) {
		case 0:
			cubeFace = 34069;
			break;
		case 1:
			cubeFace = 34070;
			break;
		case 2:
			cubeFace = 34071;
			break;
		case 3:
			cubeFace = 34072;
			break;
		case 4:
			cubeFace = 34073;
			break;
		case 5:
			cubeFace = 34074;
			break;
		default:
			throw new js__$Boot_HaxeError("");
		}
		this.gl.texImage2D(cubeFace,mipLevel,6408,width,height,0,6408,5121,new Uint8Array(data.b.bufferValue));
		this._currentBoundTexture = texture;
		this.checkForErrors();
	}
	,uploadCompressedTexture2dData: function(texture,format,width,height,size,mipLevel,data) {
		var formats = this.availableTextureFormats();
		this.gl.bindTexture(3553,this._textures.h[texture]);
		this.gl.compressedTexSubImage2D(3553,mipLevel,0,0,width,height,formats.h[format],new Uint8Array(data.b.bufferValue));
		this._currentBoundTexture = texture;
		this.checkForErrors();
	}
	,uploadCompressedCubeTextureData: function(texture,face,format,width,height,mipLevel,data) {
		throw new js__$Boot_HaxeError("");
	}
	,activateMipMapping: function(texture) {
		this._textureHasMipmaps.h[texture] = true;
	}
	,deleteTexture: function(texture) {
		this.gl.deleteTexture(this._textures.h[texture]);
		this._textures.remove(texture);
		if(this._frameBuffers.h.hasOwnProperty(texture)) {
			this.gl.deleteFramebuffer(this._frameBuffers.h[texture]);
			this._frameBuffers.remove(texture);
			this.gl.deleteRenderbuffer(this._renderBuffers.h[texture]);
			this._renderBuffers.remove(texture);
		}
		this._textureSizes.remove(texture);
		this._textureHasMipmaps.remove(texture);
		this._textureTypes.remove(texture);
		this._currentWrapMode.remove(texture);
		this._currentTextureFilter.remove(texture);
		this._currentMipFilter.remove(texture);
		this._currentTexture.h[texture] = 0;
		this._currentBoundTexture = this._currentBoundTexture == texture ? 0 : this._currentBoundTexture;
		this.checkForErrors();
	}
	,setTextureAt: function(position,texture,location) {
		if(location == null) {
			location = -1;
		}
		var textureIsValid = texture > 0;
		if(!textureIsValid) {
			return;
		}
		if(position >= Lambda.count(this._currentTexture)) {
			return;
		}
		var glTarget = this.getTextureType(texture) == 0 ? 3553 : 34067;
		if(this._currentTexture.h[position] != texture || this._currentBoundTexture != texture) {
			this.gl.activeTexture(33984 + position);
			this.gl.bindTexture(glTarget,this._textures.h[texture]);
			this._currentTexture.h[position] = texture;
			this._currentBoundTexture = texture;
		}
		if(textureIsValid && location >= 0) {
			this.gl.uniform1i(this._uniformInputLocations.h[location],position);
		}
		this.checkForErrors();
	}
	,setSamplerStateAt: function(position,wrapping,filtering,mipFiltering) {
		var texture = this._currentTexture.h[position];
		var glTarget = this.getTextureType(texture) == 0 ? 3553 : 34067;
		var active = false;
		if(!this._textureHasMipmaps.h[texture]) {
			mipFiltering = 0;
		}
		if(this._currentWrapMode.h[texture] != wrapping) {
			this._currentWrapMode.h[texture] = wrapping;
			this.gl.activeTexture(33984 + position);
			active = true;
			switch(wrapping) {
			case 0:
				this.gl.texParameteri(glTarget,10242,33071);
				this.gl.texParameteri(glTarget,10243,33071);
				break;
			case 1:
				this.gl.texParameteri(glTarget,10242,10497);
				this.gl.texParameteri(glTarget,10243,10497);
				break;
			}
		}
		if(this._currentTextureFilter.h[texture] != filtering || this._currentMipFilter.h[texture] != mipFiltering) {
			this._currentTextureFilter.h[texture] = filtering;
			this._currentMipFilter.h[texture] = mipFiltering;
			if(!active) {
				this.gl.activeTexture(33984 + position);
			}
			switch(filtering) {
			case 0:
				switch(mipFiltering) {
				case 0:
					this.gl.texParameteri(glTarget,10241,9728);
					break;
				case 1:
					this.gl.texParameteri(glTarget,10241,9984);
					break;
				case 2:
					this.gl.texParameteri(glTarget,10241,9986);
					break;
				}
				this.gl.texParameteri(glTarget,10240,9728);
				break;
			case 1:
				switch(mipFiltering) {
				case 0:
					this.gl.texParameteri(glTarget,10241,9729);
					break;
				case 1:
					this.gl.texParameteri(glTarget,10241,9985);
					break;
				case 2:
					this.gl.texParameteri(glTarget,10241,9987);
					break;
				}
				this.gl.texParameteri(glTarget,10240,9729);
				break;
			}
		}
		this.checkForErrors();
	}
	,createProgram: function() {
		var handle = this.gl.createProgram();
		this.checkForErrors();
		minko_render_GlContext.programCount++;
		this._programs.h[minko_render_GlContext.programCount] = handle;
		return minko_render_GlContext.programCount;
	}
	,attachShader: function(program,shader) {
		this.gl.attachShader(this._programs.h[program],this._shaders.h[shader]);
		this.checkForErrors();
	}
	,linkProgram: function(program) {
		this.gl.linkProgram(this._programs.h[program]);
		this.checkForErrors();
	}
	,deleteProgram: function(program) {
		this.gl.deleteProgram(this._programs.h[program]);
		this._programs.remove(program);
		this.checkForErrors();
	}
	,compileShader: function(shader) {
		this.gl.compileShader(this._shaders.h[shader]);
		this.checkForErrors();
	}
	,setProgram: function(program) {
		if(this._currentProgram == program) {
			return;
		}
		this._currentProgram = program;
		this.gl.useProgram(this._programs.h[program]);
		this.checkForErrors();
	}
	,setShaderSource: function(shader,source) {
		var sourceString = source;
		this.gl.shaderSource(this._shaders.h[shader],sourceString);
		this.checkForErrors();
	}
	,getShaderSource: function(shader) {
		var source = this.gl.getShaderSource(this._shaders.h[shader]);
		this.checkForErrors();
		return source;
	}
	,createVertexShader: function() {
		var vertexShader = this.gl.createShader(35633);
		minko_render_GlContext.shaderCount++;
		this._vertexShaders.h[minko_render_GlContext.shaderCount] = vertexShader;
		this._shaders.h[minko_render_GlContext.shaderCount] = vertexShader;
		this.checkForErrors();
		return minko_render_GlContext.shaderCount;
	}
	,deleteVertexShader: function(vertexShader) {
		this.gl.deleteShader(this._vertexShaders.h[vertexShader]);
		this._vertexShaders.remove(vertexShader);
		this._shaders.remove(vertexShader);
		this.checkForErrors();
	}
	,createFragmentShader: function() {
		var fragmentShader = this.gl.createShader(35632);
		minko_render_GlContext.shaderCount++;
		this._fragmentShaders.h[minko_render_GlContext.shaderCount] = fragmentShader;
		this._shaders.h[minko_render_GlContext.shaderCount] = fragmentShader;
		this.checkForErrors();
		return minko_render_GlContext.shaderCount;
	}
	,deleteFragmentShader: function(fragmentShader) {
		this.gl.deleteShader(this._fragmentShaders.h[fragmentShader]);
		this._fragmentShaders.remove(fragmentShader);
		this._shaders.remove(fragmentShader);
		this.checkForErrors();
	}
	,getProgramInputs: function(program) {
		this.setProgram(program);
		var ip = new minko_render_ProgramInputs();
		var program1 = this._programs.h[program];
		var inputs = [];
		var total = -1;
		var maxUniformNameLength = -1;
		total = this.gl.getProgramParameter(program1,35718);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveUniform(program1,i);
			this.checkForErrors();
			var name = activeInfo.name;
			var size = activeInfo.size;
			var type = activeInfo.type;
			var inputType = this.convertInputType(type);
			var location = this.gl.getUniformLocation(program1,name);
			if(location != null && inputType != 0) {
				if(this._uniformInputLocationKeys.h.__keys__[location.__id__] != null == false) {
					minko_render_GlContext.locationCount++;
					this._uniformInputLocationKeys.set(location,minko_render_GlContext.locationCount);
					this._uniformInputLocations.h[minko_render_GlContext.locationCount] = location;
				}
				var location_index = this._uniformInputLocationKeys.h[location.__id__];
				inputs.push(new minko_render_UniformInput(name,location_index,size,inputType));
			}
		}
		var tmp = inputs;
		var program2 = this._programs.h[program];
		var inputs1 = [];
		var total1 = -1;
		var maxAttributeNameLength = -1;
		total1 = this.gl.getProgramParameter(program2,35721);
		var _g11 = 0;
		var _g2 = total1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var activeInfo1 = this.gl.getActiveAttrib(program2,i1);
			var size1 = activeInfo1.size;
			var type1 = activeInfo1.type;
			var name1 = activeInfo1.name;
			this.checkForErrors();
			var location1 = this.gl.getAttribLocation(program2,name1);
			if(location1 >= 0) {
				inputs1.push(new minko_render_AttributeInput(name1,location1));
			}
		}
		ip.setProgramInputs(tmp,inputs1);
		return ip;
	}
	,convertInputType: function(type) {
		switch(type) {
		case 5124:
			return 1;
		case 5126:
			return 9;
		case 35664:
			return 10;
		case 35665:
			return 11;
		case 35666:
			return 12;
		case 35667:
			return 2;
		case 35668:
			return 3;
		case 35669:
			return 4;
		case 35670:
			return 5;
		case 35671:
			return 6;
		case 35672:
			return 7;
		case 35673:
			return 8;
		case 35675:
			return 13;
		case 35676:
			return 14;
		case 35678:
			return 15;
		case 35680:
			return 16;
		default:
			throw new js__$Boot_HaxeError("unsupported type");
		}
	}
	,getUniformInput: function(program,name) {
		var program1 = this._programs.h[program];
		var inputs = [];
		var total = -1;
		var maxUniformNameLength = -1;
		total = this.gl.getProgramParameter(program1,35718);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveUniform(program1,i);
			this.checkForErrors();
			var name1 = activeInfo.name;
			var size = activeInfo.size;
			var type = activeInfo.type;
			var inputType = this.convertInputType(type);
			var location = this.gl.getUniformLocation(program1,name1);
			if(location != null && inputType != 0) {
				if(this._uniformInputLocationKeys.h.__keys__[location.__id__] != null == false) {
					minko_render_GlContext.locationCount++;
					this._uniformInputLocationKeys.set(location,minko_render_GlContext.locationCount);
					this._uniformInputLocations.h[minko_render_GlContext.locationCount] = location;
				}
				var location_index = this._uniformInputLocationKeys.h[location.__id__];
				inputs.push(new minko_render_UniformInput(name1,location_index,size,inputType));
			}
		}
		var inputs1 = inputs;
		inputs1 = inputs1.filter(function(i1) {
			return i1.name == name;
		});
		if(inputs1.length > 0) {
			return inputs1[0];
		} else {
			return null;
		}
	}
	,getUniformInputs: function(program) {
		var inputs = [];
		var total = -1;
		var maxUniformNameLength = -1;
		total = this.gl.getProgramParameter(program,35718);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveUniform(program,i);
			this.checkForErrors();
			var name = activeInfo.name;
			var size = activeInfo.size;
			var type = activeInfo.type;
			var inputType = this.convertInputType(type);
			var location = this.gl.getUniformLocation(program,name);
			if(location != null && inputType != 0) {
				if(this._uniformInputLocationKeys.h.__keys__[location.__id__] != null == false) {
					minko_render_GlContext.locationCount++;
					this._uniformInputLocationKeys.set(location,minko_render_GlContext.locationCount);
					this._uniformInputLocations.h[minko_render_GlContext.locationCount] = location;
				}
				var location_index = this._uniformInputLocationKeys.h[location.__id__];
				inputs.push(new minko_render_UniformInput(name,location_index,size,inputType));
			}
		}
		return inputs;
	}
	,getAttributeInput: function(program,name) {
		var program1 = this._programs.h[program];
		var inputs = [];
		var total = -1;
		var maxAttributeNameLength = -1;
		total = this.gl.getProgramParameter(program1,35721);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveAttrib(program1,i);
			var size = activeInfo.size;
			var type = activeInfo.type;
			var name1 = activeInfo.name;
			this.checkForErrors();
			var location = this.gl.getAttribLocation(program1,name1);
			if(location >= 0) {
				inputs.push(new minko_render_AttributeInput(name1,location));
			}
		}
		var inputs1 = inputs;
		inputs1 = inputs1.filter(function(i1) {
			return i1.name == name;
		});
		if(inputs1.length > 0) {
			return inputs1[0];
		} else {
			return null;
		}
	}
	,getAttributeInputs: function(program) {
		var inputs = [];
		var total = -1;
		var maxAttributeNameLength = -1;
		total = this.gl.getProgramParameter(program,35721);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var activeInfo = this.gl.getActiveAttrib(program,i);
			var size = activeInfo.size;
			var type = activeInfo.type;
			var name = activeInfo.name;
			this.checkForErrors();
			var location = this.gl.getAttribLocation(program,name);
			if(location >= 0) {
				inputs.push(new minko_render_AttributeInput(name,location));
			}
		}
		return inputs;
	}
	,getShaderCompilationLogs: function(shader) {
		var compileStatus = this.gl.getShaderParameter(this._shaders.h[shader],35713);
		if(compileStatus == false) {
			var logs = this.gl.getShaderInfoLog(this._shaders.h[shader]);
			return logs;
		}
		return "";
	}
	,getProgramInfoLogs: function(program) {
		var programInfo = this.gl.getProgramInfoLog(this._programs.h[program]);
		return programInfo;
	}
	,setBlendingModeSD: function(source,destination) {
		if((source | destination) != this._currentBlendingMode) {
			this._currentBlendingMode = source | destination;
			this.gl.blendFunc(minko_render_GlContext._blendingFactors.h[source & 255],minko_render_GlContext._blendingFactors.h[destination & 65280]);
			this.checkForErrors();
		}
	}
	,setBlendingMode: function(blendingMode) {
		if(blendingMode != this._currentBlendingMode) {
			this._currentBlendingMode = blendingMode;
			this.gl.blendFunc(minko_render_GlContext._blendingFactors.h[blendingMode & 255],minko_render_GlContext._blendingFactors.h[blendingMode & 65280]);
			this.checkForErrors();
		}
	}
	,setDepthTest: function(depthMask,depthFunc) {
		if(depthMask != this._currentDepthMask || depthFunc != this._currentDepthFunc) {
			this._currentDepthMask = depthMask;
			this._currentDepthFunc = depthFunc;
			this.gl.depthMask(depthMask);
			this.gl.depthFunc(minko_render_GlContext._compareFuncs.h[depthFunc]);
			this.checkForErrors();
		}
	}
	,setColorMask: function(colorMask) {
		if(this._currentColorMask != colorMask) {
			this._currentColorMask = colorMask;
			this.gl.colorMask(colorMask,colorMask,colorMask,colorMask);
			this.checkForErrors();
		}
	}
	,setStencilTest: function(stencilFunc,stencilRef,stencilMask,stencilFailOp,stencilZFailOp,stencilZPassOp) {
		if(stencilFunc != this._currentStencilFunc || stencilRef != this._currentStencilRef || stencilMask != this._currentStencilMask) {
			this._currentStencilFunc = stencilFunc;
			this._currentStencilRef = stencilRef;
			this._currentStencilMask = stencilMask;
			this.gl.stencilFunc(minko_render_GlContext._compareFuncs.h[stencilFunc],stencilRef,stencilMask);
			this.checkForErrors();
		}
		if(stencilFailOp != this._currentStencilFailOp || stencilZFailOp != this._currentStencilZFailOp || stencilZPassOp != this._currentStencilZPassOp) {
			this._currentStencilFailOp = stencilFailOp;
			this._currentStencilZFailOp = stencilZFailOp;
			this._currentStencilZPassOp = stencilZPassOp;
			this.gl.stencilOp(minko_render_GlContext._stencilOps.h[stencilFailOp],minko_render_GlContext._stencilOps.h[stencilZFailOp],minko_render_GlContext._stencilOps.h[stencilZPassOp]);
			this.checkForErrors();
		}
	}
	,readRectPixels: function(x,y,width,height,pixels) {
		this.gl.readPixels(x,y,width,height,6408,5121,pixels.b);
		this.checkForErrors();
	}
	,setScissorTest: function(scissorTest,scissorBox) {
		if(scissorTest == this._scissorTest && scissorBox == this._scissorBox) {
			return;
		}
		if(scissorTest) {
			this.gl.enable(3089);
			var x = 0;
			var y = 0;
			var width = 0;
			var height = 0;
			if(scissorBox.z < 0 || scissorBox.w < 0) {
				x = this._viewportX;
				y = this._viewportY;
				width = this._viewportWidth;
				height = this._viewportHeight;
			} else {
				x = scissorBox.x | 0;
				y = scissorBox.y | 0;
				width = scissorBox.z | 0;
				height = scissorBox.w | 0;
			}
			this.gl.scissor(x,y,width,height);
		} else {
			this.gl.disable(3089);
		}
		this._scissorTest = scissorTest;
		this._scissorBox = scissorBox;
		this.checkForErrors();
	}
	,readPixels: function(pixels) {
		this.gl.readPixels(this._viewportX,this._viewportY,this._viewportWidth,this._viewportHeight,6408,5121,pixels.b);
		this.checkForErrors();
	}
	,setTriangleCulling: function(triangleCulling) {
		if(triangleCulling == this._currentTriangleCulling) {
			return;
		}
		if(this._currentTriangleCulling == 0) {
			this.gl.enable(2884);
		}
		this._currentTriangleCulling = triangleCulling;
		switch(triangleCulling) {
		case 0:
			this.gl.disable(2884);
			break;
		case 1:
			this.gl.cullFace(1028);
			break;
		case 2:
			this.gl.cullFace(1029);
			break;
		case 3:
			this.gl.cullFace(1032);
			break;
		}
		this.checkForErrors();
	}
	,createRTTBuffers: function(type,textureKey,width,height) {
		var texture = this._textures.h[textureKey];
		var frameBuffer = this.gl.createFramebuffer();
		this.gl.bindFramebuffer(36160,frameBuffer);
		if(type == 0) {
			this.gl.framebufferTexture2D(36160,36064,3553,texture,0);
		} else {
			this.gl.framebufferTexture2D(36160,36064,34069,texture,0);
			this.gl.framebufferTexture2D(36160,36065,34070,texture,0);
			this.gl.framebufferTexture2D(36160,36066,34071,texture,0);
			this.gl.framebufferTexture2D(36160,36067,34072,texture,0);
			this.gl.framebufferTexture2D(36160,36068,34073,texture,0);
			this.gl.framebufferTexture2D(36160,36069,34074,texture,0);
		}
		var renderBuffer = this.gl.createRenderbuffer();
		this.gl.bindRenderbuffer(36161,renderBuffer);
		this.gl.renderbufferStorage(36161,33189,width,height);
		this.gl.framebufferRenderbuffer(36160,36096,36161,renderBuffer);
		var status = this.gl.checkFramebufferStatus(36160);
		if(status != 36053) {
			throw new js__$Boot_HaxeError("");
		}
		this._frameBuffers.h[textureKey] = frameBuffer;
		this._renderBuffers.h[textureKey] = renderBuffer;
		this.gl.bindFramebuffer(36160,null);
		this.gl.bindRenderbuffer(36161,null);
		this.checkForErrors();
	}
	,setRenderToBackBuffer: function() {
		if(this._currentTarget == 0) {
			return;
		}
		this.gl.bindFramebuffer(36160,null);
		this.gl.bindRenderbuffer(36161,null);
		this.configureViewport(this._oldViewportX,this._oldViewportY,this._oldViewportWidth,this._oldViewportHeight);
		this._currentTarget = 0;
		this.checkForErrors();
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		if(texture == this._currentTarget) {
			return;
		}
		if(this._frameBuffers.h.hasOwnProperty(texture) == false) {
			throw new js__$Boot_HaxeError("this texture cannot be used for RTT");
		}
		if(this._renderBuffers.h.hasOwnProperty(texture) == false) {
			throw new js__$Boot_HaxeError("this texture cannot be used for RTT");
		}
		if(this._currentTarget == 0) {
			this._oldViewportX = this._viewportX;
			this._oldViewportY = this._viewportY;
			this._oldViewportWidth = this._viewportWidth;
			this._oldViewportHeight = this._viewportHeight;
		}
		this._currentTarget = texture;
		this.gl.bindFramebuffer(36160,this._frameBuffers.h[texture]);
		this.checkForErrors();
		if(enableDepthAndStencil) {
			this.gl.bindRenderbuffer(36161,this._renderBuffers.h[texture]);
			this.checkForErrors();
		}
		var textureSize = this._textureSizes.h[texture];
		this.configureViewport(0,0,textureSize.first,textureSize.second);
		this.checkForErrors();
	}
	,getError: function() {
		return 0;
	}
	,generateMipmaps: function(texture) {
		this.gl.bindTexture(3553,this._textures.h[texture]);
		if(this._oglMajorVersion < 3) {
			this.gl.generateMipmap(3553);
		} else {
			this.gl.generateMipmap(3553);
		}
		this.checkForErrors();
		this._currentBoundTexture = texture;
	}
	,setUniformFloat: function(location,count,v) {
		this.gl.uniform1fv(this._uniformInputLocations.h[location],v);
	}
	,setUniformFloat2: function(location,count,v) {
		this.gl.uniform2fv(this._uniformInputLocations.h[location],v);
	}
	,setUniformFloat3: function(location,count,v) {
		this.gl.uniform3fv(this._uniformInputLocations.h[location],v);
	}
	,setUniformFloat4: function(location,count,v) {
		this.gl.uniform4fv(this._uniformInputLocations.h[location],v);
	}
	,setUniformMatrix4x4: function(location,count,v) {
		this.gl.uniformMatrix4fv(this._uniformInputLocations.h[location],false,v);
	}
	,setUniformInt: function(location,count,v) {
		this.gl.uniform1iv(this._uniformInputLocations.h[location],v);
	}
	,setUniformInt2: function(location,count,v) {
		this.gl.uniform2iv(this._uniformInputLocations.h[location],v);
	}
	,setUniformInt3: function(location,count,v) {
		this.gl.uniform3iv(this._uniformInputLocations.h[location],v);
	}
	,setUniformInt4: function(location,count,v) {
		this.gl.uniform4iv(this._uniformInputLocations.h[location],v);
	}
	,supportsExtension: function(extensionNameString) {
		return this.gl.getExtension(extensionNameString) != null;
	}
	,availableTextureFormats: function() {
		if(Lambda.count(minko_render_GlContext._availableTextureFormats) > 0) {
			return minko_render_GlContext._availableTextureFormats;
		}
		var formats = minko_render_GlContext._availableTextureFormats;
		formats.h[0] = 6407;
		formats.h[1] = 6408;
		var rawFormats = this.gl.getParameter(34467);
		var _g = 0;
		try {
			while(_g < rawFormats.length) {
				var rawFormat = rawFormats[_g];
				++_g;
				switch(rawFormat) {
				case 33776:
					formats.h[2] = 33776;
					throw "__break__";
					break;
				case 33777:
					formats.h[3] = 33777;
					throw "__break__";
					break;
				case 33778:
					formats.h[4] = 33778;
					throw "__break__";
					break;
				case 33779:
					formats.h[5] = 33779;
					throw "__break__";
					break;
				case 35840:
					formats.h[9] = 35840;
					throw "__break__";
					break;
				case 35841:
					formats.h[8] = 35841;
					throw "__break__";
					break;
				case 35842:
					formats.h[11] = 35842;
					throw "__break__";
					break;
				case 35843:
					formats.h[10] = 35843;
					throw "__break__";
					break;
				case 35986:
					formats.h[14] = 35986;
					throw "__break__";
					break;
				case 35987:
					formats.h[15] = 35987;
					throw "__break__";
					break;
				case 36196:
					formats.h[6] = 36196;
					formats.h[7] = 36196;
					throw "__break__";
					break;
				case 37175:
					formats.h[12] = 37175;
					throw "__break__";
					break;
				case 37176:
					formats.h[13] = 37176;
					throw "__break__";
					break;
				default:
					throw "__break__";
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return formats;
	}
	,__class__: minko_render_GlContext
});
var minko_render_IndexBuffer = $hx_exports["minko"]["render"]["IndexBuffer"] = function(context) {
	minko_render_AbstractResource.call(this,context);
	this._data = [];
	this._numIndices = 0;
	this._changed = new minko_signal_Signal();
};
minko_render_IndexBuffer.__name__ = true;
minko_render_IndexBuffer.create = function(context) {
	return new minko_render_IndexBuffer(context);
};
minko_render_IndexBuffer.createbyData = function(context,data) {
	var ptr = new minko_render_IndexBuffer(context);
	ptr.set_data(data);
	ptr.upload();
	return ptr;
};
minko_render_IndexBuffer.__super__ = minko_render_AbstractResource;
minko_render_IndexBuffer.prototype = $extend(minko_render_AbstractResource.prototype,{
	get_data: function() {
		return this._data;
	}
	,set_data: function(v) {
		this._data = v;
		return this._data;
	}
	,get_dataPointer: function() {
		return this._data;
	}
	,get_numIndices: function() {
		return this._numIndices;
	}
	,upload: function() {
		this.uploadOffset();
	}
	,uploadOffset: function(offset,count) {
		if(count == null) {
			count = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		if(this.get_data().length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createIndexBuffer(this.get_data().length);
		}
		var oldNumIndices = this._numIndices;
		this._numIndices = count > 0 ? count : this.get_data().length;
		this._context.uploaderIndexBufferData(this._id,offset,this._numIndices,this.get_data());
		if(this._numIndices != oldNumIndices) {
			this._changed.execute(this);
		}
	}
	,uploadOffsetData: function(offset,count,data) {
		if(data.length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createIndexBuffer(data.length);
		}
		var numIndices = count > 0 ? count : data.length;
		this._numIndices = numIndices;
		this._context.uploaderIndexBufferData(this._id,offset,numIndices,data);
		this._changed.execute(this);
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteIndexBuffer(this._id);
		}
		this._id = -1;
		this._numIndices = 0;
		this.disposeData();
		this._changed.execute(null);
	}
	,disposeData: function() {
		if(this._data != null) {
			this._data = null;
		}
	}
	,equals: function(indexBuffer) {
		return this.get_dataPointer() == indexBuffer.get_dataPointer();
	}
	,get_changed: function() {
		return this._changed;
	}
	,__class__: minko_render_IndexBuffer
});
var minko_render_Pass = $hx_exports["minko"]["render"]["Pass"] = function(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings) {
	this._name = name;
	this._isForward = isForward;
	this._programTemplate = program;
	this._attributeBindings = minko_data_BindingMapBase.copyFrom(new minko_data_BindingMapBase(),attributeBindings);
	this._uniformBindings = minko_data_BindingMapBase.copyFrom(new minko_data_BindingMapBase(),uniformBindings);
	this._stateBindings = minko_data_BindingMapBase.copyFrom(new minko_data_BindingMapBase(),stateBindings);
	this._macroBindings = minko_data_MacroBindingMap.copyFrom2(new minko_data_MacroBindingMap(),macroBindings);
	this._states = minko_render_States.createbyProvider(this._stateBindings.defaultValues.get_providers()[0]);
	this._signatureToProgram = new haxe_ds_ObjectMap();
	this._uniformFunctions = new haxe_ds_StringMap();
	this._attributeFunctions = new haxe_ds_StringMap();
	this._macroFunctions = new haxe_ds_StringMap();
	this._signature = new haxe_ds_StringMap();
};
minko_render_Pass.__name__ = true;
minko_render_Pass.create = function(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings) {
	return new minko_render_Pass(name,isForward,program,attributeBindings,uniformBindings,stateBindings,macroBindings);
};
minko_render_Pass.createbyPass = function(pass,deepCopy) {
	if(deepCopy == null) {
		deepCopy = false;
	}
	var p = minko_render_Pass.create(pass._name,pass._isForward,deepCopy ? minko_render_Program.createbyProgram(pass._programTemplate,deepCopy) : pass._programTemplate,pass._attributeBindings,pass._uniformBindings,pass._stateBindings,pass._macroBindings);
	var signatureProgram = pass._signatureToProgram.keys();
	while(signatureProgram.hasNext()) {
		var signatureProgram1 = signatureProgram.next();
		var programSignature = new minko_render_ProgramSignature().copyFrom(signatureProgram1);
		p._signatureToProgram.set(programSignature,pass._signatureToProgram.h[signatureProgram1.__id__]);
		var _this = p._signature;
		var key = programSignature.get_key();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,programSignature);
		} else {
			_this.h[key] = programSignature;
		}
	}
	p._uniformFunctions = pass._uniformFunctions;
	p._attributeFunctions = pass._attributeFunctions;
	p._macroFunctions = pass._macroFunctions;
	if(pass._programTemplate.get_isReady()) {
		var _this1 = p._uniformFunctions;
		var nameAndFunc = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(nameAndFunc.hasNext()) {
			var nameAndFunc1 = nameAndFunc.next();
			nameAndFunc1(pass._programTemplate);
		}
		var _this2 = p._attributeFunctions;
		var nameAndFunc2 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(nameAndFunc2.hasNext()) {
			var nameAndFunc3 = nameAndFunc2.next();
			nameAndFunc3(pass._programTemplate);
		}
		var _this3 = p._macroFunctions;
		var nameAndFunc4 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
		while(nameAndFunc4.hasNext()) {
			var nameAndFunc5 = nameAndFunc4.next();
			nameAndFunc5(pass._programTemplate);
		}
	}
	return p;
};
minko_render_Pass.setUniformOnProgram = function(program,name,values) {
	program.setUniform(name,values);
};
minko_render_Pass.setVertexAttributeOnProgram = function(program,name,attribute) {
	program.setAttributebyName(name,attribute);
};
minko_render_Pass.defineOnProgram = function(program,macroName) {
	program.define(macroName);
};
minko_render_Pass.defineOnProgramWithValue = function(program,macroName,value) {
};
minko_render_Pass.prototype = {
	dispose: function() {
		var signatureAndProgram = this._signatureToProgram.iterator();
		while(signatureAndProgram.hasNext()) {
			var signatureAndProgram1 = signatureAndProgram.next();
			if(signatureAndProgram1 != null) {
				signatureAndProgram1.dispose();
			}
		}
	}
	,get_name: function() {
		return this._name;
	}
	,get_isForward: function() {
		return this._isForward;
	}
	,get_program: function() {
		return this._programTemplate;
	}
	,get_attributeBindings: function() {
		return this._attributeBindings;
	}
	,get_uniformBindings: function() {
		return this._uniformBindings;
	}
	,get_stateBindings: function() {
		return this._stateBindings;
	}
	,get_macroBindings: function() {
		return this._macroBindings;
	}
	,get_states: function() {
		return this._states;
	}
	,setUniform: function(name,values) {
		var _this = this._uniformFunctions;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,function(program1) {
				minko_render_Pass.setUniformOnProgram(program1,name,values);
			});
		} else {
			_this.h[name] = function(program1) {
				minko_render_Pass.setUniformOnProgram(program1,name,values);
			};
		}
		if(this._programTemplate.get_isReady()) {
			this._programTemplate.setUniform(name,values);
		}
		var signatureAndProgram = this._signatureToProgram.iterator();
		while(signatureAndProgram.hasNext()) {
			var signatureAndProgram1 = signatureAndProgram.next();
			signatureAndProgram1.setUniform(name,values);
		}
	}
	,setAttribute: function(name,attribute) {
		var _this = this._attributeFunctions;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,function(program1) {
				minko_render_Pass.setVertexAttributeOnProgram(program1,name,attribute);
			});
		} else {
			_this.h[name] = function(program1) {
				minko_render_Pass.setVertexAttributeOnProgram(program1,name,attribute);
			};
		}
		if(this._programTemplate.get_isReady()) {
			this._programTemplate.setAttributebyName(name,attribute);
		}
		var signatureAndProgram = this._signatureToProgram.iterator();
		while(signatureAndProgram.hasNext()) {
			var signatureAndProgram1 = signatureAndProgram.next();
			signatureAndProgram1.setAttributebyName(name,attribute);
		}
	}
	,define: function(macroName) {
		var _this = this._macroFunctions;
		if(__map_reserved[macroName] != null) {
			_this.setReserved(macroName,function(program1) {
				minko_render_Pass.defineOnProgram(program1,macroName);
			});
		} else {
			_this.h[macroName] = function(program1) {
				minko_render_Pass.defineOnProgram(program1,macroName);
			};
		}
		this._programTemplate.define(macroName);
	}
	,setDefine: function(macroName,macroValue) {
		var _this = this._macroFunctions;
		if(__map_reserved[macroName] != null) {
			_this.setReserved(macroName,function(program1) {
				minko_render_Pass.defineOnProgramWithValue(program1,macroName,macroValue);
			});
		} else {
			_this.h[macroName] = function(program1) {
				minko_render_Pass.defineOnProgramWithValue(program1,macroName,macroValue);
			};
		}
		this._programTemplate.setDefine(macroName,macroValue);
	}
	,selectProgram: function(vars,targetData,rendererData,rootData) {
		var program = null;
		var signature = new minko_render_ProgramSignature();
		if(Lambda.count(this._macroBindings.bindings) == 0) {
			program = this._programTemplate;
		} else {
			signature.bind(this._macroBindings,vars,targetData,rendererData,rootData);
			var signatureKey = signature.get_key();
			var _this = this._signature;
			var foundProgramIt = __map_reserved[signatureKey] != null ? _this.existsReserved(signatureKey) : _this.h.hasOwnProperty(signatureKey);
			if(foundProgramIt) {
				signature.dispose();
				var _this1 = this._signature;
				if(__map_reserved[signatureKey] != null) {
					signature = _this1.getReserved(signatureKey);
				} else {
					signature = _this1.h[signatureKey];
				}
				program = this._signatureToProgram.h[signature.__id__];
				return new minko_Tuple(program,signature);
			} else {
				var _this2 = this._signature;
				if(__map_reserved[signatureKey] != null) {
					_this2.setReserved(signatureKey,signature);
				} else {
					_this2.h[signatureKey] = signature;
				}
				program = minko_render_Program.createbyProgram(this._programTemplate,true);
				this._signatureToProgram.set(signature,program);
				signature.updateProgram(program);
			}
		}
		return new minko_Tuple(this.finalizeProgram(program),signature);
	}
	,finalizeProgram: function(program) {
		if(!program.get_vertexShader().get_isReady()) {
			program.get_vertexShader().upload();
		}
		if(!program.get_fragmentShader().get_isReady()) {
			program.get_fragmentShader().upload();
		}
		if(!program.get_isReady()) {
			try {
				program.upload();
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,haxe_io_Error) ) {
					throw new js__$Boot_HaxeError(e);
				} else throw(e);
			}
			var _this = this._uniformFunctions;
			var nameAndFunc = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(nameAndFunc.hasNext()) {
				var nameAndFunc1 = nameAndFunc.next();
				nameAndFunc1(program);
			}
			var _this1 = this._attributeFunctions;
			var nameAndFunc2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(nameAndFunc2.hasNext()) {
				var nameAndFunc3 = nameAndFunc2.next();
				nameAndFunc3(program);
			}
			var _this2 = this._macroFunctions;
			var nameAndFunc4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(nameAndFunc4.hasNext()) {
				var nameAndFunc5 = nameAndFunc4.next();
				nameAndFunc5(program);
			}
		}
		return program;
	}
	,__class__: minko_render_Pass
};
var minko_render_Program = $hx_exports["minko"]["render"]["Program"] = function(_name,context) {
	minko_render_AbstractResource.call(this,context);
	this._name = _name;
	this._inputs = new minko_render_ProgramInputs();
	this._setUniforms = [];
	this._setTextures = [];
	this._setAttributes = [];
	this._definedMacros = [];
};
minko_render_Program.__name__ = true;
minko_render_Program.create = function(name,context) {
	return new minko_render_Program(name,context);
};
minko_render_Program.createbyProgram = function(program,deepCopy) {
	if(deepCopy == null) {
		deepCopy = false;
	}
	var p = minko_render_Program.create(program._name,program._context);
	p._vertexShader = deepCopy ? minko_render_Shader.createbyShader(program._vertexShader) : program._vertexShader;
	p._fragmentShader = deepCopy ? minko_render_Shader.createbyShader(program._fragmentShader) : program._fragmentShader;
	p._inputs = new minko_render_ProgramInputs();
	p._setTextures = [];
	p._setAttributes = [];
	return p;
};
minko_render_Program.createbyShader = function(name,context,vertexShader,fragmentShader) {
	var p = minko_render_Program.create(name,context);
	p._vertexShader = vertexShader;
	p._fragmentShader = fragmentShader;
	return p;
};
minko_render_Program.__super__ = minko_render_AbstractResource;
minko_render_Program.prototype = $extend(minko_render_AbstractResource.prototype,{
	clearDefinedMacros: function() {
		this._definedMacros = [];
		this._vertexShader.clearDefinedMacros();
		this._fragmentShader.clearDefinedMacros();
	}
	,get_name: function() {
		return this._name;
	}
	,get_vertexShader: function() {
		return this._vertexShader;
	}
	,get_fragmentShader: function() {
		return this._fragmentShader;
	}
	,get_setTextureNames: function() {
		return this._setTextures;
	}
	,get_setAttributeNames: function() {
		return this._setAttributes;
	}
	,get_setUniformNames: function() {
		return this._setUniforms;
	}
	,get_definedMacroNames: function() {
		return this._definedMacros;
	}
	,get_inputs: function() {
		return this._inputs;
	}
	,upload: function() {
		this._id = this.get_context().createProgram();
		this._context.attachShader(this._id,this._vertexShader.get_id());
		this._context.attachShader(this._id,this._fragmentShader.get_id());
		this._context.linkProgram(this._id);
		this._inputs.copyFrom(this._context.getProgramInputs(this._id));
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteProgram(this._id);
			this._id = -1;
		}
		this._vertexShader = null;
		this._fragmentShader = null;
	}
	,setUniform: function(name,v) {
	}
	,setUniformFloat: function(size,name,count,v) {
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			switch(size) {
			case 1:
				this._context.setUniformFloat(it.location,count,v);
				break;
			case 2:
				this._context.setUniformFloat2(it.location,count,v);
				break;
			case 3:
				this._context.setUniformFloat3(it.location,count,v);
				break;
			case 4:
				this._context.setUniformFloat4(it.location,count,v);
				break;
			case 16:
				this._context.setUniformMatrix4x4(it.location,count,v);
				break;
			}
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name);
		}
		return this;
	}
	,setUniformInt: function(size,name,count,v) {
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			switch(size) {
			case 1:
				this._context.setUniformInt(it.location,count,v);
				break;
			case 2:
				this._context.setUniformInt2(it.location,count,v);
				break;
			case 3:
				this._context.setUniformInt3(it.location,count,v);
				break;
			case 4:
				this._context.setUniformInt4(it.location,count,v);
				break;
			}
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name);
		}
		return this;
	}
	,setUniformFloat1: function(name,v) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat(it.location,1,v);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformFloat2: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat2(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformFloat3: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat3(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformFloat4: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformFloat4(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformMatrix4x4: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformMatrix4x4(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformInt1: function(name,v) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt(it.location,1,v);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformInt2: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt2(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformInt3: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt3(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformInt4: function(name,value) {
		var name1 = name;
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name1;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setProgram(this._id);
			this._context.setUniformInt4(it.location,1,value);
			this._context.setProgram(oldProgram);
			this._setUniforms.push(name1);
		}
		return this;
	}
	,setUniformAbstractTexture: function(name,texture) {
		var it = Lambda.find(this._inputs.get_uniforms(),function(u) {
			return u.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setTextureAt(this._setTextures.length,texture.get_id(),it.location);
			this._context.setProgram(oldProgram);
			this._setTextures.push(name);
			this._setUniforms.push(name);
		}
		return this;
	}
	,define: function(macroName) {
		this._vertexShader.define(macroName);
		this._fragmentShader.define(macroName);
		this._definedMacros.push(macroName);
		return this;
	}
	,setDefine: function(macroName,value) {
		this._vertexShader.setDefine(macroName,value);
		this._fragmentShader.setDefine(macroName,value);
		this._definedMacros.push(macroName);
		return this;
	}
	,setAttributebyName: function(name,attribute) {
		return this.setAttribute(name,attribute,name);
	}
	,setAttribute: function(name,attribute,attributeName) {
		var it = Lambda.find(this._inputs.get_attributes(),function(a) {
			return a.name == name;
		});
		if(it != null) {
			var oldProgram = this._context.get_currentProgram();
			this._context.setVertexBufferAt(it.location,attribute.resourceId,attribute.size,attribute.vertexSize,attribute.offset);
			this._context.setProgram(oldProgram);
			this._setAttributes.push(name);
		}
		return this;
	}
	,__class__: minko_render_Program
});
var minko_render_AbstractInput = $hx_exports["minko"]["render"]["AbstractInput"] = function(name,location) {
	this.name = name;
	this.location = location;
};
minko_render_AbstractInput.__name__ = true;
minko_render_AbstractInput.prototype = {
	dispose: function() {
	}
	,__class__: minko_render_AbstractInput
};
var minko_render_UniformInput = $hx_exports["minko"]["render"]["UniformInput"] = function(name,location,size,type) {
	minko_render_AbstractInput.call(this,name,location);
	this.size = size;
	this.type = type;
};
minko_render_UniformInput.__name__ = true;
minko_render_UniformInput.__super__ = minko_render_AbstractInput;
minko_render_UniformInput.prototype = $extend(minko_render_AbstractInput.prototype,{
	__class__: minko_render_UniformInput
});
var minko_render_AttributeInput = $hx_exports["minko"]["render"]["AttributeInput"] = function(name,location) {
	minko_render_AbstractInput.call(this,name,location);
};
minko_render_AttributeInput.__name__ = true;
minko_render_AttributeInput.__super__ = minko_render_AbstractInput;
minko_render_AttributeInput.prototype = $extend(minko_render_AbstractInput.prototype,{
	__class__: minko_render_AttributeInput
});
var minko_render_ProgramInputs = $hx_exports["minko"]["render"]["ProgramInputs"] = function() {
	this._uniforms = [];
	this._attributes = [];
};
minko_render_ProgramInputs.__name__ = true;
minko_render_ProgramInputs.typeToString = function(type) {
	switch(type) {
	case 0:
		return "unknown";
	case 1:
		return "int1";
	case 2:
		return "int2";
	case 3:
		return "int3";
	case 4:
		return "int4";
	case 5:
		return "bool1";
	case 6:
		return "bool2";
	case 7:
		return "bool3";
	case 8:
		return "bool4";
	case 9:
		return "float1";
	case 10:
		return "float2";
	case 11:
		return "float3";
	case 12:
		return "float4";
	case 13:
		return "float9";
	case 14:
		return "float16";
	case 15:
		return "sampler2d";
	case 16:
		return "samplerCube";
	default:
		throw new js__$Boot_HaxeError("type");
	}
};
minko_render_ProgramInputs.prototype = {
	get_uniforms: function() {
		return this._uniforms;
	}
	,get_attributes: function() {
		return this._attributes;
	}
	,copyFrom: function(inputs) {
		this._uniforms = inputs._uniforms.concat([]);
		this._attributes = inputs._attributes.concat([]);
		return this;
	}
	,setProgramInputs: function(uniforms,attributes) {
		this._uniforms = uniforms.concat([]);
		this._attributes = attributes.concat([]);
	}
	,__class__: minko_render_ProgramInputs
};
var minko_render_ProgramSignature = $hx_exports["minko"]["render"]["ProgramSignature"] = function() {
	this._mask = [];
	this._values = [];
	this._types = [];
	this._macros = [];
};
minko_render_ProgramSignature.__name__ = true;
minko_render_ProgramSignature.prototype = {
	get_key: function() {
		return this._macros.toString() + this._values.toString();
	}
	,bind: function(macroBindings,variables,targetData,rendererData,rootData) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 64) {
			var i = _g1++;
			_g.push(0);
		}
		this._mask = _g;
		this._values = [];
		this._macros = [];
		this._types = [];
		var macroId = 0;
		var _g11 = 0;
		var _g2 = macroBindings.defaultValues.get_providers();
		while(_g11 < _g2.length) {
			var provider = _g2[_g11];
			++_g11;
			var propertyNameAndValue = provider.get_values().keys();
			while(propertyNameAndValue.hasNext()) {
				var propertyNameAndValue1 = propertyNameAndValue.next();
				var _this = macroBindings.bindings;
				if(!(__map_reserved[propertyNameAndValue1] != null ? _this.existsReserved(propertyNameAndValue1) : _this.h.hasOwnProperty(propertyNameAndValue1))) {
					this._mask[macroId] = 1;
					this._macros.push(propertyNameAndValue1);
					var _this1 = macroBindings.types;
					this._types.push(__map_reserved[propertyNameAndValue1] != null ? _this1.getReserved(propertyNameAndValue1) : _this1.h[propertyNameAndValue1]);
					var tmp = this._values;
					var _this2 = provider.get_values();
					tmp.push(__map_reserved[propertyNameAndValue1] != null ? _this2.getReserved(propertyNameAndValue1) : _this2.h[propertyNameAndValue1]);
					++macroId;
				}
			}
		}
		var macroNameAndBinding = macroBindings.bindings.keys();
		while(macroNameAndBinding.hasNext()) {
			var macroNameAndBinding1 = macroNameAndBinding.next();
			var macroName = macroNameAndBinding1;
			var _this3 = macroBindings.bindings;
			var macroBinding = __map_reserved[macroNameAndBinding1] != null ? _this3.getReserved(macroNameAndBinding1) : _this3.h[macroNameAndBinding1];
			var propertyName = minko_data_Store.getActualPropertyName(variables,macroBinding.propertyName);
			var store = targetData;
			if(macroBinding.source != 0) {
				if(macroBinding.source == 1) {
					store = rendererData;
				} else {
					store = rootData;
				}
			}
			var macroIsDefined = store.hasProperty(propertyName);
			var hasDefaultValue = macroBindings.defaultValues.hasProperty(propertyName);
			if(macroIsDefined || hasDefaultValue) {
				var _this4 = macroBindings.types;
				var type = __map_reserved[macroName] != null ? _this4.getReserved(macroName) : _this4.h[macroName];
				if(macroId == 64) {
					throw new js__$Boot_HaxeError("");
				}
				this._mask[macroId] = 1;
				this._macros.push(macroName);
				this._types.push(type);
				if(type != 0) {
					var value = this.getValueFromStore(macroIsDefined ? store : macroBindings.defaultValues,propertyName,type);
					if(type == 1) {
						value = Math.max(macroBinding.minValue,Math.min(macroBinding.maxValue,value));
					}
					this._values.push(value);
				}
			}
			++macroId;
		}
	}
	,copyFrom: function(signature) {
		this._mask = signature._mask.concat([]);
		this._values = signature._values;
		this.key = signature.get_key();
		return this;
	}
	,updateProgram: function(program) {
		var typeIndex = 0;
		var macroIndex = 0;
		var valueIndex = 0;
		var _g = 0;
		while(_g < 64) {
			var j = _g++;
			if(this._mask[j] != 0) {
				var _g1 = this._types[typeIndex];
				switch(_g1) {
				case 0:
					program.define(this._macros[macroIndex]);
					break;
				case 1:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 2:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 3:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 4:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 5:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 6:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 7:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 8:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 9:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 10:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 11:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 12:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 13:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				case 14:
					program.setDefine(this._macros[macroIndex],this._values[valueIndex++]);
					break;
				}
				++typeIndex;
				++macroIndex;
			}
		}
	}
	,getValueFromStore: function(store,propertyName,type) {
		switch(type) {
		case 0:
			throw new js__$Boot_HaxeError("");
			break;
		case 1:
			return store.get(propertyName);
		case 2:
			return store.get(propertyName);
		case 3:
			return store.get(propertyName);
		case 4:
			return store.get(propertyName);
		case 5:
			return store.get(propertyName);
		case 6:
			return store.get(propertyName);
		case 7:
			return store.get(propertyName);
		case 8:
			return store.get(propertyName);
		case 9:
			return store.get(propertyName);
		case 10:
			return store.get(propertyName);
		case 11:
			return store.get(propertyName);
		case 12:
			return store.get(propertyName);
		case 13:
			return store.get(propertyName);
		case 14:
			return store.get(propertyName);
		}
	}
	,dispose: function() {
	}
	,__class__: minko_render_ProgramSignature
};
var minko_render_RectangleTexture = $hx_exports["minko"]["render"]["RectangleTexture"] = function(context,width,height,format,filename) {
	if(filename == null) {
		filename = "";
	}
	minko_render_AbstractTexture.call(this,0,context,width,height,format,false,false,false,filename);
};
minko_render_RectangleTexture.__name__ = true;
minko_render_RectangleTexture.create = function(context,width,height,format,filename) {
	if(filename == null) {
		filename = "";
	}
	return new minko_render_RectangleTexture(context,width,height,format,filename);
};
minko_render_RectangleTexture.__super__ = minko_render_AbstractTexture;
minko_render_RectangleTexture.prototype = $extend(minko_render_AbstractTexture.prototype,{
	get_data: function() {
		return this._data;
	}
	,setData: function(data,widthGPU,heightGPU) {
		if(heightGPU == null) {
			heightGPU = -1;
		}
		if(widthGPU == null) {
			widthGPU = -1;
		}
		if(widthGPU >= 0) {
			if(widthGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("widthGPU");
			}
			this._width = widthGPU;
			this._widthGPU = widthGPU;
		}
		if(heightGPU >= 0) {
			if(heightGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("heightGPU");
			}
			this._height = heightGPU;
			this._heightGPU = heightGPU;
		}
		var size = this._width * this._height * 4;
		this._data = new haxe_io_Bytes(new ArrayBuffer(size));
		if(this._format == 1) {
			this._data.blit(0,data,0,size);
		} else if(this._format == 0) {
			var i = 0;
			var j = 0;
			while(j < size) {
				this._data.b[j] = data.b[i] & 255;
				this._data.b[j + 1] = data.b[i + 1] & 255;
				this._data.b[j + 2] = data.b[i + 2] & 255;
				this._data.b[j + 3] = 255;
				i += 3;
				j += 4;
			}
		}
	}
	,resize: function(width,height,resizeSmoothly) {
		var previousWidth = this.get_width();
		var previousHeight = this.get_height();
		var previousData = this._data;
		this._data = minko_render_AbstractTexture.resizeData(previousWidth,previousHeight,previousData,width,height,resizeSmoothly);
		this._width = width;
		this._widthGPU = width;
		this._height = height;
		this._heightGPU = height;
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteTexture(this._id);
			this._id = -1;
		}
		this.disposeData();
	}
	,disposeData: function() {
		this._data = null;
	}
	,upload: function() {
		if(this._id == -1) {
			this._id = this._context.createRectangleTexture(this._type,this._widthGPU,this._heightGPU);
		}
		if(this._data.length > 0) {
			this._context.uploadTexture2dData(this._id,this._widthGPU,this._heightGPU,0,this._data);
		}
	}
	,__class__: minko_render_RectangleTexture
});
var minko_render_SamplerStates = $hx_exports["minko"]["render"]["SamplerStates"] = function(wm,tf,mf) {
	this.wrapMode = wm;
	this.textureFilter = tf;
	this.mipFilter = mf;
};
minko_render_SamplerStates.__name__ = true;
minko_render_SamplerStates.uniformNameToSamplerStateName = function(uniformName,sampleState) {
	return uniformName + "/" + sampleState;
};
minko_render_SamplerStates.uniformNameToSamplerStateBindingName = function(uniformName,samplerState) {
	var samplerStateCapitalized = samplerState.charAt(0).toUpperCase() + HxOverrides.substr(samplerState,1,null);
	return uniformName + samplerStateCapitalized;
};
minko_render_SamplerStates.stringToWrapMode = function(value) {
	if(value == "repeat") {
		return 1;
	} else {
		return 0;
	}
};
minko_render_SamplerStates.stringToTextureFilter = function(value) {
	if(value == "linear") {
		return 1;
	} else {
		return 0;
	}
};
minko_render_SamplerStates.stringToMipFilter = function(value) {
	if(value == "linear") {
		return 2;
	} else if(value == "nearest") {
		return 1;
	} else {
		return 0;
	}
};
minko_render_SamplerStates.prototype = {
	__class__: minko_render_SamplerStates
};
var minko_render_Shader = $hx_exports["minko"]["render"]["Shader"] = function(context,type) {
	minko_render_AbstractResource.call(this,context);
	this._type = type;
	this._definedMacros = new haxe_ds_StringMap();
};
minko_render_Shader.__name__ = true;
minko_render_Shader.create = function(context,type) {
	return new minko_render_Shader(context,type);
};
minko_render_Shader.createbySource = function(context,type,source) {
	var s = minko_render_Shader.create(context,type);
	s._source = source;
	return s;
};
minko_render_Shader.createbyShader = function(shader) {
	var s = minko_render_Shader.create(shader.get_context(),shader._type);
	s._source = shader._source;
	var k = shader._definedMacros.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		var _this = s._definedMacros;
		var _this1 = shader._definedMacros;
		var value = __map_reserved[k1] != null ? _this1.getReserved(k1) : _this1.h[k1];
		if(__map_reserved[k1] != null) {
			_this.setReserved(k1,value);
		} else {
			_this.h[k1] = value;
		}
	}
	return s;
};
minko_render_Shader.__super__ = minko_render_AbstractResource;
minko_render_Shader.prototype = $extend(minko_render_AbstractResource.prototype,{
	clearDefinedMacros: function() {
		this._definedMacros = new haxe_ds_StringMap();
	}
	,get_type: function() {
		return this._type;
	}
	,get_source: function() {
		return this._source;
	}
	,set_source: function(v) {
		this._source = v;
		return v;
	}
	,define: function(macroName) {
		if(!Lambda.has(this._definedMacros,macroName)) {
			var _this = this._definedMacros;
			var value = "#define " + macroName + "\n";
			if(__map_reserved[macroName] != null) {
				_this.setReserved(macroName,value);
			} else {
				_this.h[macroName] = value;
			}
		}
	}
	,setDefine: function(macroName,value) {
		if(!Lambda.has(this._definedMacros,macroName)) {
			var _this = this._definedMacros;
			var value1 = "#define " + macroName + " " + value + "\n";
			if(__map_reserved[macroName] != null) {
				_this.setReserved(macroName,value1);
			} else {
				_this.h[macroName] = value1;
			}
		}
	}
	,dispose: function() {
		if(this._type == 0) {
			this._context.deleteVertexShader(this._id);
		} else if(this._type == 1) {
			this._context.deleteFragmentShader(this._id);
		}
		this._id = -1;
	}
	,upload: function() {
		if(this._type == 0) {
			this._id = this._context.createVertexShader();
		} else {
			this._id = this._context.createFragmentShader();
		}
		var source = "#version 100\n  ";
		var _this = this._definedMacros;
		var s = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(s.hasNext()) {
			var s1 = s.next();
			source += s1;
		}
		source += this._source;
		this._context.setShaderSource(this._id,source);
		this._context.compileShader(this._id);
	}
	,__class__: minko_render_Shader
});
var minko_render_States = $hx_exports["minko"]["render"]["States"] = function(priority,zSorted,blendingSourceFactor,blendingDestinationFactor,colorMask,depthMask,depthFunction,triangleCulling,stencilFunction,stencilRef,stencilMask,stencilFailOp,stencilZFailOp,stencilZPassOp,scissorTest,scissorBox,target) {
	if(scissorTest == null) {
		scissorTest = false;
	}
	if(stencilZPassOp == null) {
		stencilZPassOp = 0;
	}
	if(stencilZFailOp == null) {
		stencilZFailOp = 0;
	}
	if(stencilFailOp == null) {
		stencilFailOp = 0;
	}
	if(stencilMask == null) {
		stencilMask = 1;
	}
	if(stencilRef == null) {
		stencilRef = 0;
	}
	if(stencilFunction == null) {
		stencilFunction = 0;
	}
	if(triangleCulling == null) {
		triangleCulling = 2;
	}
	if(depthFunction == null) {
		depthFunction = 4;
	}
	if(depthMask == null) {
		depthMask = true;
	}
	if(colorMask == null) {
		colorMask = true;
	}
	if(blendingDestinationFactor == null) {
		blendingDestinationFactor = 256;
	}
	if(blendingSourceFactor == null) {
		blendingSourceFactor = 2;
	}
	if(zSorted == null) {
		zSorted = false;
	}
	this._data = minko_data_Provider.create();
	this.set_priority(priority == null ? minko_render_States.DEFAULT_PRIORITY : priority);
	this.set_zSorted(zSorted);
	this.set_blendingSourceFactor(blendingSourceFactor);
	this.set_blendingDestinationFactor(blendingDestinationFactor);
	this.set_colorMask(colorMask);
	this.set_depthMask(depthMask);
	this.set_depthFunction(depthFunction);
	this.set_triangleCulling(triangleCulling);
	this.set_stencilFunction(stencilFunction);
	this.set_stencilReference(stencilRef);
	this.set_stencilMask(stencilMask);
	this.set_stencilFailOperation(stencilFailOp);
	this.set_stencilZFailOperation(stencilZFailOp);
	this.set_stencilZPassOperation(stencilZPassOp);
	this.set_scissorTest(scissorTest);
	this.set_scissorBox(scissorBox == null ? minko_render_States.DEFAULT_SCISSOR_BOX : scissorBox);
	this.set_target(target == null ? minko_render_States.DEFAULT_TARGET : target);
};
minko_render_States.__name__ = true;
minko_render_States.createbyProvider = function(a) {
	var s = new minko_render_States();
	s.set_data(a);
	return s;
};
minko_render_States.prototype = {
	copyFrom: function(states) {
		this._data = minko_data_Provider.createbyProvider(states._data);
		return this;
	}
	,resetDefaultValues: function() {
		this._data.set("priority",minko_render_States.DEFAULT_PRIORITY);
		this._data.set("zSorted",false);
		this._data.set("blendingSource",2);
		this._data.set("blendingDestination",256);
		this._data.set("colorMask",true);
		this._data.set("depthMask",true);
		this._data.set("depthFunction",4);
		this._data.set("triangleCulling",2);
		this._data.set("stencilFunction",0);
		this._data.set("stencilReference",0);
		this._data.set("stencilMask",1);
		this._data.set("stencilFailOperation",0);
		this._data.set("stencilZFailOperation",0);
		this._data.set("stencilZPassOperation",0);
		this._data.set("scissorTest",false);
		this._data.set("scissorBox",minko_render_States.DEFAULT_SCISSOR_BOX);
		this._data.set("target",minko_render_States.DEFAULT_TARGET);
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(v) {
		this._data = v;
		return v;
	}
	,get_priority: function() {
		return this._data.get("priority");
	}
	,set_priority: function(priority) {
		this._data.set("priority",priority);
		return priority;
	}
	,get_zSorted: function() {
		return this._data.get("zSorted");
	}
	,set_zSorted: function(zSorted) {
		this._data.set("zSorted",zSorted);
		return zSorted;
	}
	,get_blendingSourceFactor: function() {
		return this._data.get("blendingSource");
	}
	,set_blendingSourceFactor: function(value) {
		this._data.set("blendingSource",value);
		return value;
	}
	,get_blendingDestinationFactor: function() {
		return this._data.get("blendingDestination");
	}
	,set_blendingDestinationFactor: function(value) {
		this._data.set("blendingDestination",value);
		return value;
	}
	,get_colorMask: function() {
		return this._data.get("colorMask");
	}
	,set_colorMask: function(value) {
		this._data.set("colorMask",value);
		return value;
	}
	,get_depthMask: function() {
		return this._data.get("depthMask");
	}
	,set_depthMask: function(value) {
		this._data.set("depthMask",value);
		return value;
	}
	,get_depthFunction: function() {
		return this._data.get("depthFunction");
	}
	,set_depthFunction: function(value) {
		this._data.set("depthFunction",value);
		return value;
	}
	,get_triangleCulling: function() {
		return this._data.get("triangleCulling");
	}
	,set_triangleCulling: function(value) {
		this._data.set("triangleCulling",value);
		return value;
	}
	,get_stencilFunction: function() {
		return this._data.get("stencilFunction");
	}
	,set_stencilFunction: function(value) {
		this._data.set("stencilFunction",value);
		return value;
	}
	,get_stencilReference: function() {
		return this._data.get("stencilReference");
	}
	,set_stencilReference: function(value) {
		this._data.set("stencilReference",value);
		return value;
	}
	,get_stencilMask: function() {
		return this._data.get("stencilMask");
	}
	,set_stencilMask: function(value) {
		this._data.set("stencilMask",value);
		return value;
	}
	,get_stencilFailOperation: function() {
		return this._data.get("stencilFailOperation");
	}
	,set_stencilFailOperation: function(value) {
		this._data.set("stencilFailOperation",value);
		return value;
	}
	,get_stencilZFailOperation: function() {
		return this._data.get("stencilZFailOperation");
	}
	,set_stencilZFailOperation: function(value) {
		this._data.set("stencilZFailOperation",value);
		return value;
	}
	,get_stencilZPassOperation: function() {
		return this._data.get("stencilZPassOperation");
	}
	,set_stencilZPassOperation: function(value) {
		this._data.set("stencilZPassOperation",value);
		return value;
	}
	,get_scissorTest: function() {
		return this._data.get("scissorTest");
	}
	,set_scissorTest: function(value) {
		this._data.set("scissorTest",value);
		return value;
	}
	,get_scissorBox: function() {
		return this._data.get("scissorBox");
	}
	,set_scissorBox: function(value) {
		this._data.set("scissorBox",value);
		return value;
	}
	,get_target: function() {
		return this._data.get("target");
	}
	,set_target: function(value) {
		this._data.set("target",value);
		return value;
	}
	,__class__: minko_render_States
};
var minko_render_Texture = $hx_exports["minko"]["render"]["Texture"] = function(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename) {
	if(filename == null) {
		filename = "";
	}
	if(format == null) {
		format = 1;
	}
	if(resizeSmoothly == null) {
		resizeSmoothly = true;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	minko_render_AbstractTexture.call(this,0,context,width,height,format,mipMapping,optimizeForRenderToTexture,resizeSmoothly,filename);
	this._data = [];
};
minko_render_Texture.__name__ = true;
minko_render_Texture.create = function(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename) {
	if(filename == null) {
		filename = "";
	}
	if(format == null) {
		format = 1;
	}
	if(resizeSmoothly == null) {
		resizeSmoothly = true;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	return new minko_render_Texture(context,width,height,mipMapping,optimizeForRenderToTexture,resizeSmoothly,format,filename);
};
minko_render_Texture.__super__ = minko_render_AbstractTexture;
minko_render_Texture.prototype = $extend(minko_render_AbstractTexture.prototype,{
	get_data: function() {
		return this._data;
	}
	,setData: function(data,widthGPU,heightGPU) {
		if(widthGPU >= 0) {
			if(widthGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("widthGPU");
			}
			this._width = widthGPU;
			this._widthGPU = widthGPU;
		}
		if(heightGPU >= 0) {
			if(heightGPU > this.MAX_SIZE) {
				throw new js__$Boot_HaxeError("heightGPU");
			}
			this._height = heightGPU;
			this._heightGPU = heightGPU;
		}
		if(!minko_render_TextureFormatInfo.isCompressed(this._format)) {
			var size = this._width * this._height * 4;
			var rgba = new haxe_io_Bytes(new ArrayBuffer(size));
			if(this._format == 1) {
				rgba.blit(0,data,0,size);
			} else if(this._format == 0) {
				this._format = 1;
				var i = 0;
				var j = 0;
				while(j < size) {
					rgba.b[j] = data.b[i] & 255;
					rgba.b[j + 1] = data.b[i + 1] & 255;
					rgba.b[j + 2] = data.b[i + 2] & 255;
					rgba.b[j + 3] = 255;
					i += 3;
					j += 4;
				}
			}
			rgba = minko_render_AbstractTexture.resizeData(this._width,this._height,rgba,this._widthGPU,this._heightGPU,this._resizeSmoothly);
			this._data.push(rgba);
		} else {
			var size1 = minko_render_TextureFormatInfo.textureSize(this._format,this._width,this._height);
			var rgb = new haxe_io_Bytes(new ArrayBuffer(size1));
			rgb.blit(0,data,0,size1);
			this._data.push(rgb);
		}
	}
	,resize: function(width,height,resizeSmoothly) {
		var previousWidth = this.get_width();
		var previousHeight = this.get_height();
		var previousNumMipMaps;
		if(this.get_data().length > minko_render_TextureFormatInfo.textureSize(this._format,previousWidth,previousHeight)) {
			var tmp = previousWidth;
			var p = 0;
			while(tmp >= 1) {
				++p;
				tmp >>= 1;
			}
			previousNumMipMaps = p + 1;
		} else {
			previousNumMipMaps = 1;
		}
		var numMipMaps;
		if(previousNumMipMaps > 1) {
			var tmp1 = width;
			var p1 = 0;
			while(tmp1 >= 1) {
				++p1;
				tmp1 >>= 1;
			}
			numMipMaps = p1 + 1;
		} else {
			numMipMaps = 1;
		}
		var newData = [];
		var _g1 = 0;
		var _g = numMipMaps;
		while(_g1 < _g) {
			var i = _g1++;
			var mipMapData = this.get_data()[i];
			var mipMapPreviousWidth = Math.floor(Math.max(previousWidth >> i,1));
			var mipMapPreviousHeight = Math.floor(Math.max(previousHeight >> i,1));
			var mipMapWidth = width >> i;
			var mipMapHeight = height >> i;
			var newMipMapData = minko_render_AbstractTexture.resizeData(mipMapPreviousWidth,mipMapPreviousHeight,mipMapData,mipMapWidth,mipMapHeight,resizeSmoothly);
			newData.push(newMipMapData);
		}
		this._data = newData;
		this._width = width;
		this._widthGPU = width;
		this._height = height;
		this._heightGPU = height;
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteTexture(this._id);
			this.set_id(-1);
		}
		this.disposeData();
	}
	,disposeData: function() {
		this._data = null;
	}
	,upload: function() {
		if(this._id == -1) {
			if(minko_render_TextureFormatInfo.isCompressed(this._format)) {
				this.set_id(this._context.createCompressedTexture(this._type,this._format,this._widthGPU,this._heightGPU,this._mipMapping));
			} else {
				this.set_id(this._context.createTexture(this._type,this._widthGPU,this._heightGPU,this._mipMapping,this._optimizeForRenderToTexture));
			}
		}
		if(this._data.length > 0) {
			if(minko_render_TextureFormatInfo.isCompressed(this._format)) {
				this._context.uploadCompressedTexture2dData(this._id,this._format,this._widthGPU,this._heightGPU,this._data.length,0,this._data[0]);
			} else {
				this._context.uploadTexture2dData(this._id,this._widthGPU,this._heightGPU,0,this._data[0]);
				if(this._mipMapping) {
					this._context.generateMipmaps(this._id);
				}
			}
		}
	}
	,uploadMipLevel: function(level,data) {
		var width = this._widthGPU >> level;
		var height = this._heightGPU >> level;
		if(minko_render_TextureFormatInfo.isCompressed(this._format)) {
			var size = minko_render_TextureFormatInfo.textureSize(this._format,width,height);
			this._context.uploadCompressedTexture2dData(this._id,this._format,width,height,size,level,data);
		} else {
			this._context.uploadTexture2dData(this._id,width,height,level,data);
		}
	}
	,__class__: minko_render_Texture
});
var minko_render_Entry = $hx_exports["minko"]["render"]["Entry"] = function(name,isCompressed,numBitsPerPixel,minimumSize,hasAlphaChannel,hasSeparateAlphaChannel) {
	this._name = name;
	this._isCompressed = isCompressed;
	this._numBitsPerPixel = numBitsPerPixel;
	this._minimumSize = minimumSize;
	this._hasAlphaChannel = hasAlphaChannel;
	this._hasSeparateAlphaChannel = hasSeparateAlphaChannel;
};
minko_render_Entry.__name__ = true;
minko_render_Entry.prototype = {
	__class__: minko_render_Entry
};
var minko_render_TextureFormatInfo = $hx_exports["minko"]["render"]["TextureFormatInfo"] = function() { };
minko_render_TextureFormatInfo.__name__ = true;
minko_render_TextureFormatInfo.initializeFormatsMap = function() {
	var m = new haxe_ds_IntMap();
	var value = new minko_render_Entry("RGB",false,24,3,false,false);
	m.h[0] = value;
	var value1 = new minko_render_Entry("RGBA",false,32,4,true,false);
	m.h[1] = value1;
	var value2 = new minko_render_Entry("RGB_DXT1",true,4,8,false,false);
	m.h[2] = value2;
	var value3 = new minko_render_Entry("RGBA_DXT1",true,4,8,true,false);
	m.h[3] = value3;
	var value4 = new minko_render_Entry("RGBA_DXT3",true,8,16,true,false);
	m.h[4] = value4;
	var value5 = new minko_render_Entry("RGBA_DXT5",true,8,16,true,false);
	m.h[5] = value5;
	var value6 = new minko_render_Entry("RGB_ETC1",true,4,8,false,false);
	m.h[6] = value6;
	var value7 = new minko_render_Entry("RGBA_ETC1",true,4,8,true,true);
	m.h[7] = value7;
	var value8 = new minko_render_Entry("RGB_PVRTC1_2BPP",true,2,32,false,false);
	m.h[8] = value8;
	var value9 = new minko_render_Entry("RGB_PVRTC1_4BPP",true,4,32,false,false);
	m.h[9] = value9;
	var value10 = new minko_render_Entry("RGBA_PVRTC1_2BPP",true,2,32,true,false);
	m.h[10] = value10;
	var value11 = new minko_render_Entry("RGBA_PVRTC1_4BPP",true,4,32,true,false);
	m.h[11] = value11;
	var value12 = new minko_render_Entry("RGBA_PVRTC2_2BPP",true,2,32,true,false);
	m.h[12] = value12;
	var value13 = new minko_render_Entry("RGBA_PVRTC2_4BPP",true,4,32,true,false);
	m.h[13] = value13;
	var value14 = new minko_render_Entry("RGB_ATITC",true,8,16,false,false);
	m.h[14] = value14;
	var value15 = new minko_render_Entry("RGBA_ATITC",true,8,16,true,false);
	m.h[15] = value15;
	return m;
};
minko_render_TextureFormatInfo.isSupported = function(format) {
	return false;
};
minko_render_TextureFormatInfo.textureSize = function(format,width,height) {
	return Math.floor(Math.max(minko_render_TextureFormatInfo.minimumSize(format),minko_render_TextureFormatInfo.numBitsPerPixel(format) / 8.0 * width * height));
};
minko_render_TextureFormatInfo.$name = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._name;
};
minko_render_TextureFormatInfo.isCompressed = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._isCompressed;
};
minko_render_TextureFormatInfo.numBitsPerPixel = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._numBitsPerPixel;
};
minko_render_TextureFormatInfo.minimumSize = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._minimumSize;
};
minko_render_TextureFormatInfo.hasAlphaChannel = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._hasAlphaChannel;
};
minko_render_TextureFormatInfo.hasSeparateAlphaChannel = function(format) {
	return minko_render_TextureFormatInfo._formats.h[format]._hasSeparateAlphaChannel;
};
minko_render_TextureFormatInfo.get_textureFormats = function() {
	var formats = [];
	var textureFormat = minko_render_TextureFormatInfo._formats.keys();
	while(textureFormat.hasNext()) {
		var textureFormat1 = textureFormat.next();
		formats.push(textureFormat1);
	}
	return formats;
};
var minko_render_TextureSampler = $hx_exports["minko"]["render"]["TextureSampler"] = function(uuid,id) {
	this.uuid = uuid;
	this.id = id;
	this.mipFilter = 0;
	this.textureFilter = 0;
	this.wrapMode = 0;
};
minko_render_TextureSampler.__name__ = true;
minko_render_TextureSampler.prototype = {
	copyFrom: function(rhs) {
		this.uuid = rhs.uuid;
		this.id = rhs.id;
		this.mipFilter = rhs.mipFilter;
		this.textureFilter = rhs.textureFilter;
		this.wrapMode = rhs.wrapMode;
	}
	,equals: function(rhs) {
		if(this.uuid == rhs.uuid && this.id == rhs.id && this.mipFilter == rhs.mipFilter && this.textureFilter == rhs.textureFilter) {
			return this.wrapMode == rhs.wrapMode;
		} else {
			return false;
		}
	}
	,__class__: minko_render_TextureSampler
};
var minko_render_VertexAttribute = $hx_exports["minko"]["render"]["VertexAttribute"] = function(_id,_vertexSize,name,size,actualOffset) {
	this.resourceId = _id;
	this.vertexSize = _vertexSize;
	this.name = name;
	this.size = size;
	this.offset = actualOffset;
};
minko_render_VertexAttribute.__name__ = true;
minko_render_VertexAttribute.prototype = {
	equals: function(rhs) {
		if(this.resourceId == rhs.resourceId && this.vertexSize == rhs.vertexSize && this.name == rhs.name && this.size == rhs.size) {
			return this.offset == rhs.offset;
		} else {
			return false;
		}
	}
	,__class__: minko_render_VertexAttribute
};
var minko_render_VertexBuffer = $hx_exports["minko"]["render"]["VertexBuffer"] = function(context) {
	minko_render_AbstractResource.call(this,context);
	this._data = [];
	this._attributes = [];
	this._vertexSize = 0;
	this._vertexSizeChanged = new minko_signal_Signal2();
};
minko_render_VertexBuffer.__name__ = true;
minko_render_VertexBuffer.create = function(context) {
	return new minko_render_VertexBuffer(context);
};
minko_render_VertexBuffer.createbyVec3Data = function(context,data,len) {
	var ptr = new minko_render_VertexBuffer(context);
	ptr.set_data([]);
	var _g = 0;
	while(_g < data.length) {
		var d = data[_g];
		++_g;
		ptr.get_data().push(d.x);
		ptr.get_data().push(d.y);
		ptr.get_data().push(d.z);
	}
	ptr.upload();
	return ptr;
};
minko_render_VertexBuffer.createbyData = function(context,data) {
	var ptr = new minko_render_VertexBuffer(context);
	ptr.set_data(data);
	ptr.upload();
	return ptr;
};
minko_render_VertexBuffer.__super__ = minko_render_AbstractResource;
minko_render_VertexBuffer.prototype = $extend(minko_render_AbstractResource.prototype,{
	set_data: function(v) {
		this._data = v;
		return v;
	}
	,get_data: function() {
		return this._data;
	}
	,get_attributes: function() {
		return this._attributes;
	}
	,get_vertexSize: function() {
		return this._vertexSize;
	}
	,set_vertexSize: function(value) {
		var offset = value - this._vertexSize;
		this._vertexSize = value;
		this._vertexSizeChanged.execute(this,offset);
		return value;
	}
	,get_vertexSizeChanged: function() {
		return this._vertexSizeChanged;
	}
	,get_numVertices: function() {
		if(this._vertexSize > 0) {
			return Math.floor(this._data.length / this._vertexSize);
		} else {
			return 0;
		}
	}
	,upload: function() {
		this.uploadOffset(0,0);
	}
	,uploadOffset: function(offset,numVertices) {
		if(numVertices == null) {
			numVertices = 0;
		}
		if(this._data.length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createVertexBuffer(this._data.length);
		}
		this._context.uploadVertexBufferData(this._id,offset * this._vertexSize,numVertices == 0 ? this._data.length : numVertices * this._vertexSize,this._data);
	}
	,uploadData: function(offset,numVertices,data) {
		if(data.length == 0) {
			return;
		}
		if(this._id == -1) {
			this._id = this._context.createVertexBuffer(data.length);
		}
		this._context.uploadVertexBufferData(this._id,offset * this._vertexSize,numVertices == 0 ? data.length : numVertices * this._vertexSize,data);
	}
	,dispose: function() {
		if(this._id != -1) {
			this._context.deleteVertexBuffer(this._id);
			this._id = -1;
		}
		this.disposeData();
	}
	,disposeData: function() {
		this._data = null;
	}
	,addAttribute: function(name,size,offset) {
		if(offset == null) {
			offset = 0;
		}
		var _gthis = this;
		if(this.hasAttribute(name)) {
			throw new js__$Boot_HaxeError("name");
		}
		var actualOffset = offset;
		if(actualOffset == 0) {
			actualOffset = this._vertexSize;
		}
		this._attributes.push(new minko_render_VertexAttribute(this._id,this._vertexSize,name,size,actualOffset));
		this.set_vertexSize(this._vertexSize + size);
		this._attributes = this._attributes.map(function(a) {
			a.vertexSize = _gthis.get_vertexSize();
			return a;
		});
	}
	,removeAttribute: function(attributeName) {
		var _gthis = this;
		var it = Lambda.find(this._attributes,function(attr) {
			return attr.name == attributeName;
		});
		if(it == null) {
			throw new js__$Boot_HaxeError("attributeName = " + attributeName);
		}
		this.set_vertexSize(this._vertexSize - it.size);
		HxOverrides.remove(this._attributes,it);
		this._attributes = this._attributes.map(function(a) {
			a.vertexSize = _gthis.get_vertexSize();
			return a;
		});
	}
	,hasAttribute: function(attributeName) {
		var it = Lambda.exists(this._attributes,function(attr) {
			return attr.name == attributeName;
		});
		return it;
	}
	,attribute: function(attributeName) {
		var it = Lambda.find(this._attributes,function(attr) {
			return attr.name == attributeName;
		});
		if(it == null) {
			throw new js__$Boot_HaxeError("attributeName = " + attributeName);
		}
		return it;
	}
	,equals: function(vertexBuffer) {
		return this._data == vertexBuffer._data;
	}
	,__class__: minko_render_VertexBuffer
});
var minko_scene_Node = $hx_exports["minko"]["scene"]["Node"] = function(n) {
	if(n == null) {
		n = "";
	}
	minko_Enable_$uuid.call(this);
	this._name = n;
	this._layout = 1;
	this._children = [];
	this._container = new minko_data_Store();
	this._components = [];
	this._added = new minko_signal_Signal3();
	this._removed = new minko_signal_Signal3();
	this._layoutChanged = new minko_signal_Signal2();
	this._componentAdded = new minko_signal_Signal3();
	this._componentRemoved = new minko_signal_Signal3();
};
minko_scene_Node.__name__ = true;
minko_scene_Node.create = function(n) {
	if(n == null) {
		n = "";
	}
	var node = new minko_scene_Node(n);
	node._root = node;
	return node;
};
minko_scene_Node.createbyLayout = function(n,l) {
	var node = new minko_scene_Node(n);
	node._root = node;
	node.set_layout(l);
	return node;
};
minko_scene_Node.__super__ = minko_Enable_$uuid;
minko_scene_Node.prototype = $extend(minko_Enable_$uuid.prototype,{
	clone: function(option) {
		var clone = this.cloneNode();
		var nodeMap = new haxe_ds_ObjectMap();
		var componentsMap = new haxe_ds_ObjectMap();
		this.listItems(clone,nodeMap,componentsMap);
		this.rebindComponentsDependencies(componentsMap,nodeMap,option);
		var itn = nodeMap.keys();
		while(itn.hasNext()) {
			var itn1 = itn.next();
			var node = itn1;
			var originComponents = node.getComponents(minko_component_AbstractComponent);
			var itc = componentsMap.keys();
			while(itc.hasNext()) {
				var itc1 = itc.next();
				var component = itc1;
				if(Lambda.has(originComponents,component)) {
					nodeMap.h[node.__id__].addComponent(componentsMap.h[component.__id__]);
				}
			}
		}
		return nodeMap.h[this.__id__];
	}
	,cloneNode: function() {
		var clone = minko_scene_Node.create();
		clone._name = this.get_name() + "_clone";
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			clone.addChild(child.cloneNode());
		}
		return clone;
	}
	,listItems: function(clonedRoot,nodeMap,components) {
		var _g = 0;
		var _g1 = this._components;
		while(_g < _g1.length) {
			var component = _g1[_g];
			++_g;
			components.set(component,component.clone(1));
		}
		nodeMap.set(this,clonedRoot);
		var _g11 = 0;
		var _g2 = this.get_children().length;
		while(_g11 < _g2) {
			var childId = _g11++;
			var child = this.get_children()[childId];
			var clonedChild = clonedRoot.get_children()[childId];
			child.listItems(clonedChild,nodeMap,components);
		}
	}
	,rebindComponentsDependencies: function(componentsMap,nodeMap,option) {
		var comp = componentsMap.keys();
		while(comp.hasNext()) {
			var comp1 = comp.next();
			var compClone = js_Boot.__cast(componentsMap.h[comp1.__id__] , minko_component_AbstractComponent);
			if(compClone != null) {
				compClone.rebindDependencies(componentsMap,nodeMap,option);
			}
		}
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(v) {
		this._name = v;
		return v;
	}
	,get_layout: function() {
		return this._layout;
	}
	,set_layout: function(v) {
		if(v != this._layout) {
			this._layout = v;
			var descendants = minko_scene_NodeSet.createbyNode(this).descendants(true);
			var _g = 0;
			var _g1 = descendants.get_nodes();
			while(_g < _g1.length) {
				var descendant = _g1[_g];
				++_g;
				descendant._layoutChanged.execute(descendant,this);
			}
			var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors();
			var _g2 = 0;
			var _g11 = ancestors.get_nodes();
			while(_g2 < _g11.length) {
				var ancestor = _g11[_g2];
				++_g2;
				ancestor._layoutChanged.execute(ancestor,this);
			}
		}
		return v;
	}
	,get_parent: function() {
		return this._parent;
	}
	,get_root: function() {
		return this._root;
	}
	,get_children: function() {
		return this._children;
	}
	,get_data: function() {
		return this._container;
	}
	,get_added: function() {
		return this._added;
	}
	,get_removed: function() {
		return this._removed;
	}
	,get_layoutChanged: function() {
		return this._layoutChanged;
	}
	,get_componentAdded: function() {
		return this._componentAdded;
	}
	,get_componentRemoved: function() {
		return this._componentRemoved;
	}
	,addChild: function(child) {
		if(child.get_parent() != null) {
			child.get_parent().removeChild(child);
		}
		this._children.push(child);
		child._parent = this;
		child.updateRoot();
		var descendants = minko_scene_NodeSet.createbyNode(child).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._added.execute(descendant,child,this);
		}
		var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors(true);
		var _g2 = 0;
		var _g11 = ancestors.get_nodes();
		while(_g2 < _g11.length) {
			var ancestor = _g11[_g2];
			++_g2;
			ancestor._added.execute(ancestor,child,this);
		}
		return this;
	}
	,removeChild: function(child) {
		var it = Lambda.has(this._children,child);
		if(it == false) {
			throw new js__$Boot_HaxeError("child");
		}
		HxOverrides.remove(this._children,child);
		child._parent = null;
		child.updateRoot();
		var descendants = minko_scene_NodeSet.createbyNode(child).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._removed.execute(descendant,child,this);
		}
		var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors(true);
		var _g2 = 0;
		var _g11 = ancestors.get_nodes();
		while(_g2 < _g11.length) {
			var ancestor = _g11[_g2];
			++_g2;
			ancestor._removed.execute(ancestor,child,this);
		}
		return this;
	}
	,removeChildren: function() {
		var numChildren = this._children.length;
		var i = numChildren - 1;
		while(i >= 0) {
			this.removeChild(this._children[i]);
			--i;
		}
		return this;
	}
	,contains: function(node) {
		return Lambda.has(this._children,node);
	}
	,addComponent: function(component) {
		if(component == null) {
			throw new js__$Boot_HaxeError("component");
		}
		var it = Lambda.has(this._components,component);
		if(it) {
			throw new js__$Boot_HaxeError("The same component cannot be added twice.");
		}
		if(component.get_target() != null) {
			component.get_target().removeComponent(component);
		}
		this._components.push(component);
		component.set_target(this);
		var descendants = minko_scene_NodeSet.createbyNode(this).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._componentAdded.execute(descendant,this,component);
		}
		var ancestors = minko_scene_NodeSet.createbyNode(this).ancestors();
		var _g2 = 0;
		var _g11 = ancestors.get_nodes();
		while(_g2 < _g11.length) {
			var ancestor = _g11[_g2];
			++_g2;
			ancestor._componentAdded.execute(ancestor,this,component);
		}
		return this;
	}
	,removeComponent: function(component) {
		if(component == null) {
			throw new js__$Boot_HaxeError("component");
		}
		var it = Lambda.has(this._components,component);
		if(it == false) {
			throw new js__$Boot_HaxeError("component");
		}
		HxOverrides.remove(this._components,component);
		component.set_target(null);
		var descendants = minko_scene_NodeSet.createbyNode(this).descendants(true);
		var _g = 0;
		var _g1 = descendants.get_nodes();
		while(_g < _g1.length) {
			var descendant = _g1[_g];
			++_g;
			descendant._componentRemoved.execute(descendant,this,component);
		}
		var ancestor = this.get_parent();
		while(ancestor != null) {
			ancestor._componentRemoved.execute(ancestor,this,component);
			ancestor = ancestor.get_parent();
		}
		return this;
	}
	,existsComponent: function(c) {
		return Lambda.has(this._components,c);
	}
	,hasComponent: function(cClass) {
		return Lambda.exists(this._components,function(c) {
			return js_Boot.__instanceof(c,cClass);
		});
	}
	,getComponent: function(cClass) {
		return Lambda.find(this._components,function(c) {
			return js_Boot.__instanceof(c,cClass);
		});
	}
	,getComponents: function(cClass) {
		return this._components.filter(function(c) {
			return js_Boot.__instanceof(c,cClass);
		});
	}
	,get_components: function() {
		return this._components;
	}
	,setNode: function(uuid,name) {
		this.set_uuid(uuid);
		this._name = name;
		this._layout = 1;
	}
	,updateRoot: function() {
		this._root = this.get_parent() != null ? this.get_parent().get_root() != null ? this.get_parent()._root : this._parent : this;
		var _g = 0;
		var _g1 = this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.updateRoot();
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dispose();
		}
		this._container.dispose();
		this._added.dispose();
		this._removed.dispose();
		this._layoutChanged.dispose();
		this._componentAdded.dispose();
		this._componentRemoved.dispose();
		this._children = null;
		this._components = null;
		this._container = null;
		this._added = null;
		this._removed = null;
		this._layoutChanged = null;
		this._componentAdded = null;
		this._componentRemoved = null;
	}
	,__class__: minko_scene_Node
});
var minko_scene_NodeSet = $hx_exports["minko"]["scene"]["NodeSet"] = function() {
	minko_scene_Node.call(this);
	this._nodes = [];
};
minko_scene_NodeSet.__name__ = true;
minko_scene_NodeSet.createbyArray = function(nodes) {
	var set = new minko_scene_NodeSet();
	set.nodes = nodes.concat([]);
	return set;
};
minko_scene_NodeSet.create = function() {
	var set = new minko_scene_NodeSet();
	return set;
};
minko_scene_NodeSet.createbyNode = function(node) {
	var set = new minko_scene_NodeSet();
	set.get_nodes().push(node);
	return set;
};
minko_scene_NodeSet.__super__ = minko_scene_Node;
minko_scene_NodeSet.prototype = $extend(minko_scene_Node.prototype,{
	get_nodes: function() {
		return this._nodes;
	}
	,dispose: function() {
		minko_scene_Node.prototype.dispose.call(this);
		this._nodes = null;
	}
	,size: function() {
		return this._nodes.length;
	}
	,descendants: function(andSelf,depthFirst,result) {
		if(depthFirst == null) {
			depthFirst = false;
		}
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var nodesStack = [];
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			nodesStack.push(node);
			while(nodesStack.length != 0) {
				var descendant = nodesStack.shift();
				if(descendant != node || andSelf) {
					result._nodes.push(descendant);
				}
				if(depthFirst) {
					nodesStack = descendant.get_children().concat(nodesStack);
				} else {
					nodesStack = nodesStack.concat(descendant.get_children());
				}
			}
		}
		return result;
	}
	,ancestors: function(andSelf,result) {
		if(andSelf == null) {
			andSelf = false;
		}
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(andSelf) {
				result._nodes.push(node);
			}
			while(node != null) {
				if(node.get_parent() != null) {
					result._nodes.push(node.get_parent());
				}
				node = node.get_parent();
			}
		}
		return result;
	}
	,childrens: function(andSelf,result) {
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(andSelf) {
				result._nodes.push(node);
			}
			result._nodes = result._nodes.concat(node.get_children());
		}
		return result;
	}
	,where: function(filter,result) {
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(filter(node)) {
				result._nodes.push(node);
			}
		}
		return result;
	}
	,roots: function(result) {
		if(result == null) {
			result = minko_scene_NodeSet.create();
		}
		var _g = 0;
		var _g1 = this._nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(result._nodes.indexOf(node.get_root()) == -1) {
				result._nodes.push(node.get_root());
			}
		}
		return result;
	}
	,__class__: minko_scene_NodeSet
});
var minko_signal_SignalSlot = $hx_exports["minko"]["signal"]["SignalSlot"] = function(_s) {
	this.expired = false;
	this._signal = _s;
};
minko_signal_SignalSlot.__name__ = true;
minko_signal_SignalSlot.prototype = {
	disconnect: function() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	,dispose: function() {
		this.disconnect();
	}
	,__class__: minko_signal_SignalSlot
};
var minko_signal_Signal = $hx_exports["minko"]["signal"]["Signal"] = function() {
	this._callbacks = [];
};
minko_signal_Signal.__name__ = true;
minko_signal_Signal.create = function() {
	return new minko_signal_Signal();
};
minko_signal_Signal.prototype = {
	copyFrom: function(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	,get_numCallbacks: function() {
		return this._callbacks.length;
	}
	,connect: function(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	,execute: function(a) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	,remove: function(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	,__class__: minko_signal_Signal
};
var minko_signal_SignalSlot2 = $hx_exports["minko"]["signal"]["SignalSlot2"] = function(_s) {
	this.expired = false;
	this._signal = _s;
};
minko_signal_SignalSlot2.__name__ = true;
minko_signal_SignalSlot2.prototype = {
	disconnect: function() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	,dispose: function() {
		this.disconnect();
	}
	,__class__: minko_signal_SignalSlot2
};
var minko_signal_Signal2 = $hx_exports["minko"]["signal"]["Signal2"] = function() {
	this._callbacks = [];
};
minko_signal_Signal2.__name__ = true;
minko_signal_Signal2.create = function() {
	return new minko_signal_Signal2();
};
minko_signal_Signal2.prototype = {
	copyFrom: function(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	,get_numCallbacks: function() {
		return this._callbacks.length;
	}
	,connect: function(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot2(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	,remove: function(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	,execute: function(a,b) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	,__class__: minko_signal_Signal2
};
var minko_signal_SignalSlot3 = $hx_exports["minko"]["signal"]["SignalSlot3"] = function(_s) {
	this.expired = false;
	this._signal = _s;
};
minko_signal_SignalSlot3.__name__ = true;
minko_signal_SignalSlot3.prototype = {
	disconnect: function() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	,dispose: function() {
		this.disconnect();
	}
	,__class__: minko_signal_SignalSlot3
};
var minko_signal_Signal3 = $hx_exports["minko"]["signal"]["Signal3"] = function() {
	this._callbacks = [];
};
minko_signal_Signal3.__name__ = true;
minko_signal_Signal3.create = function() {
	return new minko_signal_Signal3();
};
minko_signal_Signal3.prototype = {
	copyFrom: function(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	,get_numCallbacks: function() {
		return this._callbacks.length;
	}
	,connect: function(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot3(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	,execute: function(a,b,c) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b,c);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	,remove: function(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	,__class__: minko_signal_Signal3
};
var minko_signal_SignalSlot4 = $hx_exports["minko"]["signal"]["SignalSlot4"] = function(_s) {
	this.expired = false;
	this._signal = _s;
};
minko_signal_SignalSlot4.__name__ = true;
minko_signal_SignalSlot4.prototype = {
	disconnect: function() {
		if(this._signal != null) {
			this._signal.remove(this);
			this._signal = null;
		}
	}
	,dispose: function() {
		this.disconnect();
	}
	,__class__: minko_signal_SignalSlot4
};
var minko_signal_Signal4 = $hx_exports["minko"]["signal"]["Signal4"] = function() {
	this._callbacks = [];
};
minko_signal_Signal4.__name__ = true;
minko_signal_Signal4.create = function() {
	return new minko_signal_Signal4();
};
minko_signal_Signal4.prototype = {
	copyFrom: function(other) {
		var _g = [];
		var _g1 = 0;
		var _g2 = other._callbacks;
		while(_g1 < _g2.length) {
			var c = _g2[_g1];
			++_g1;
			_g.push(c);
		}
		this._callbacks = _g;
		return this;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this._callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			var slot = callback.second;
			if(slot != null) {
				slot._signal = null;
			}
		}
		this._callbacks = [];
	}
	,get_numCallbacks: function() {
		return this._callbacks.length;
	}
	,connect: function(callback,priority,once) {
		if(once == null) {
			once = false;
		}
		if(priority == null) {
			priority = 0;
		}
		var connection = new minko_signal_SignalSlot4(this);
		connection.callback = callback;
		connection.once = once;
		this._callbacks.push(new minko_Tuple(priority,connection));
		this._callbacks.sort(function(a,b) {
			return Math.floor(b.first - a.first);
		});
		return connection;
	}
	,execute: function(a,b,c,d) {
		var callbacks = this._callbacks;
		var onces = [];
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			var slot = callback.second;
			if(!slot.expired) {
				slot.callback(a,b,c,d);
				if(slot.once) {
					slot.expired = true;
					onces.push(slot);
				}
			}
		}
		var _g1 = 0;
		while(_g1 < onces.length) {
			var callback1 = onces[_g1];
			++_g1;
			callback1.disconnect();
		}
	}
	,remove: function(it) {
		this._callbacks = this._callbacks.filter(function(b) {
			return b.second != it;
		});
	}
	,__class__: minko_signal_Signal4
};
var minko_utils_BytesTool = function() { };
minko_utils_BytesTool.__name__ = true;
minko_utils_BytesTool.readUTF = function(b) {
	var len = b.readInt32();
	return b.readString(len);
};
minko_utils_BytesTool.readOneBytes = function(b) {
	var len = b.readInt32();
	return b.read(len);
};
minko_utils_BytesTool.writeUTF = function(b,bt) {
	b.writeInt32(bt.length);
	b.writeString(bt);
};
minko_utils_BytesTool.writeOneBytes = function(b,bt) {
	b.writeInt32(bt.length);
	b.writeFullBytes(bt,0,bt.length);
};
var minko_utils_MathUtil = function() { };
minko_utils_MathUtil.__name__ = true;
minko_utils_MathUtil.lerp = function(from,to,t) {
	return from + (to - from) * Math.min(Math.max(t,0),1);
};
minko_utils_MathUtil.fract = function(x) {
	return x - Math.floor(x);
};
minko_utils_MathUtil.std_copy = function(s,begin,size,d,index) {
	var g = 0;
	var _g1 = begin;
	var _g = size;
	while(_g1 < _g) {
		var k = _g1++;
		d[index + g] = s[k];
		++g;
	}
};
minko_utils_MathUtil.make_vec2 = function(a,b) {
	var this1 = new glm_Vec2Base();
	this1.x = a[b];
	this1.y = a[b + 1];
	return this1;
};
minko_utils_MathUtil.make_vec3 = function(a,b) {
	var this1 = new glm_Vec3Base();
	this1.x = a[b];
	this1.y = a[b + 1];
	this1.z = a[b + 2];
	return this1;
};
minko_utils_MathUtil.make_vec4 = function(a,b) {
	var this1 = new glm_Vec4Base();
	this1.x = a[b];
	this1.y = a[b + 1];
	this1.z = a[b + 2];
	this1.w = a[b + 3];
	return this1;
};
minko_utils_MathUtil.isEpsilonEqual = function(a,b,EPSILON) {
	if(EPSILON == null) {
		EPSILON = 1.19209290e-007;
	}
	return Math.abs(a - b) < EPSILON;
};
minko_utils_MathUtil.isEpsilonEqualVec3 = function(a,b,EPSILON) {
	if(EPSILON == null) {
		EPSILON = 1.19209290e-007;
	}
	var this1 = new glm_Vec3Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	var dest = this1;
	dest.x = a.x - b.x;
	dest.y = a.y - b.y;
	dest.z = a.z - b.z;
	var this2 = dest;
	return Math.abs(this2.x * this2.x + this2.y * this2.y + this2.z * this2.z) < EPSILON;
};
minko_utils_MathUtil.linearRand = function(from,to) {
	return from + (to - from) * (minko_math_Random.makeRandomSeed() / 2147483647.0);
};
minko_utils_MathUtil.sphericalRand = function(Radius) {
	var z = -1 + 2 * (minko_math_Random.makeRandomSeed() / 2147483647.0);
	var a = 6.283185307179586476925286766559 * (minko_math_Random.makeRandomSeed() / 2147483647.0);
	var r = Math.sqrt(1 - z * z);
	var x = r * Math.cos(a);
	var y = r * Math.sin(a);
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	var a1 = this1;
	var this2 = new glm_Vec3Base();
	this2.x = 0;
	this2.y = 0;
	this2.z = 0;
	var dest = this2;
	dest.x = a1.x * Radius;
	dest.y = a1.y * Radius;
	dest.z = a1.z * Radius;
	return dest;
};
minko_utils_MathUtil.diskRand = function(Radius) {
	var Result = null;
	var LenRadius = 0;
	while(true) {
		var from = -Radius;
		var x = from + (Radius - from) * (minko_math_Random.makeRandomSeed() / 2147483647.0);
		var from1 = -Radius;
		var y = from1 + (Radius - from1) * (minko_math_Random.makeRandomSeed() / 2147483647.0);
		var this1 = new glm_Vec2Base();
		this1.x = x;
		this1.y = y;
		Result = this1;
		LenRadius = Math.sqrt(Result.x * Result.x + Result.y * Result.y);
		if(!(LenRadius > Radius)) {
			break;
		}
	}
	return Result;
};
minko_utils_MathUtil.rand01 = function() {
	return Math.random();
};
minko_utils_MathUtil.clamp = function(x,minVal,maxVal) {
	return Math.min(Math.max(x,minVal),maxVal);
};
minko_utils_MathUtil.mat4_mat3 = function(a) {
	var _r0c0 = a._00;
	var _r0c1 = a._10;
	var _r0c2 = a._20;
	var _r1c0 = a._01;
	var _r1c1 = a._11;
	var _r1c2 = a._21;
	var _r2c0 = a._02;
	var _r2c1 = a._22;
	var _r2c2 = a._22;
	var this1 = new glm_Mat3Base();
	this1._00 = _r0c0;
	this1._01 = _r1c0;
	this1._02 = _r2c0;
	this1._10 = _r0c1;
	this1._11 = _r1c1;
	this1._12 = _r2c1;
	this1._20 = _r0c2;
	this1._21 = _r1c2;
	this1._22 = _r2c2;
	return this1;
};
minko_utils_MathUtil.vec4_vec3 = function(v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	var this1 = new glm_Vec3Base();
	this1.x = x;
	this1.y = y;
	this1.z = z;
	return this1;
};
minko_utils_MathUtil.vec3_vec4 = function(v,z) {
	var x = v.x;
	var y = v.y;
	var z1 = v.z;
	var this1 = new glm_Vec4Base();
	this1.x = x;
	this1.y = y;
	this1.z = z1;
	this1.w = z;
	return this1;
};
minko_utils_MathUtil.mat4_copyFrom = function(a,b) {
	a._00 = b._00;
	a._10 = b._10;
	a._20 = b._20;
	a._30 = b._30;
	a._01 = b._01;
	a._11 = b._11;
	a._21 = b._21;
	a._31 = b._31;
	a._02 = b._02;
	a._12 = b._12;
	a._22 = b._22;
	a._32 = b._32;
	a._03 = b._03;
	a._13 = b._13;
	a._23 = b._23;
	a._33 = b._33;
};
minko_utils_MathUtil.getp2 = function(x) {
	var tmp = x;
	var p = 0;
	while(tmp >= 1) {
		++p;
		tmp >>= 1;
	}
	return p;
};
minko_utils_MathUtil.mix = function(v,n,rt) {
	return n * rt + v * (1 - rt);
};
minko_utils_MathUtil.clp2 = function(x) {
	--x;
	x |= x >> 1;
	x |= x >> 2;
	x |= x >> 4;
	x |= x >> 8;
	x |= x >> 16;
	return x + 1;
};
minko_utils_MathUtil.rgba = function(x) {
	var this1 = new glm_Vec4Base();
	this1.x = (x >> 24 & 255) / 255;
	this1.y = (x >> 16 & 255) / 255;
	this1.z = (x >> 8 & 255) / 255;
	this1.w = (x & 255) / 255;
	return this1;
};
minko_utils_MathUtil.vec2_equals = function(a,b) {
	return !(Math.abs(a.x - b.x) >= glm_GLM.EPSILON || Math.abs(a.y - b.y) >= glm_GLM.EPSILON);
};
minko_utils_MathUtil.vec3_equals = function(a,b) {
	return !(Math.abs(a.x - b.x) >= glm_GLM.EPSILON || Math.abs(a.y - b.y) >= glm_GLM.EPSILON || Math.abs(a.z - b.z) >= glm_GLM.EPSILON);
};
minko_utils_MathUtil.vec4_equals = function(a,b) {
	return !(Math.abs(a.x - b.x) >= glm_GLM.EPSILON || Math.abs(a.y - b.y) >= glm_GLM.EPSILON || Math.abs(a.z - b.z) >= glm_GLM.EPSILON || Math.abs(a.w - b.w) >= glm_GLM.EPSILON);
};
minko_utils_MathUtil.vec3_max = function(a,b) {
	return a;
};
var minko_utils_WebNodeTools = function() { };
minko_utils_WebNodeTools.__name__ = true;
minko_utils_WebNodeTools.createCanvasElement = function() {
	var r = window.document.createElement("canvas");
	var r_style = r.style;
	r_style.position = "absolute";
	r_style.setProperty("-webkit-touch-callout","none");
	r_style.setProperty("user-select","none");
	return r;
};
minko_utils_WebNodeTools.loadFromBytes = function(t,c,h) {
	var component = minko_utils_WebNodeTools.createCanvasElement();
	var o = window.document.createElement("img");
	var n = component;
	var q;
	var f = null;
	var i;
	var l;
	var p;
	f = function(_) {
		o.removeEventListener("load",f);
		var x = o.width;
		--x;
		x |= x >> 1;
		x |= x >> 2;
		x |= x >> 4;
		x |= x >> 8;
		x |= x >> 16;
		n.width = Math.floor(Math.min(x + 1,minko_utils_WebNodeTools.MAX_SIZE));
		var x1 = o.height;
		--x1;
		x1 |= x1 >> 1;
		x1 |= x1 >> 2;
		x1 |= x1 >> 4;
		x1 |= x1 >> 8;
		x1 |= x1 >> 16;
		n.height = Math.floor(Math.min(x1 + 1,minko_utils_WebNodeTools.MAX_SIZE));
		q = n.getContext("2d");
		q.drawImage(o,0,0,o.width,o.height,0,0,n.width,n.height);
		p = q.getImageData(0,0,n.width,n.height);
		if(h != null) {
			var n1 = n.width;
			var n2 = n.height;
			var f1 = haxe_io_Bytes.ofData(p.data.buffer);
			h(new minko_data_PixelData(n1,n2,f1));
		}
		component.remove();
		o.remove();
		o = null;
		p = null;
	};
	o.addEventListener("load",f);
	var tmp = haxe_crypto_Base64.encode(c);
	o.src = "data:image/" + t + ";base64," + tmp;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
ExampleAssimp.WINDOW_WIDTH = 800;
ExampleAssimp.WINDOW_HEIGHT = 600;
ExampleAssimp.MODEL_FILENAME = "pirate.assbin";
ExampleAssimp.LABEL_RUN_START = "run_start";
ExampleAssimp.LABEL_RUN_STOP = "run_stop";
ExampleAssimp.LABEL_IDLE = "idle";
ExampleAssimp.LABEL_WALK_START = "walk_start";
ExampleAssimp.LABEL_WALK_STOP = "walk_stop";
ExampleAssimp.LABEL_PUNCH_START = "punch_start";
ExampleAssimp.LABEL_PUNCH_HIT = "punch_hit";
ExampleAssimp.LABEL_PUNCH_STOP = "punch_stop";
ExampleAssimp.LABEL_KICK_START = "kick_start";
ExampleAssimp.LABEL_KICK_HIT = "kick_hit";
ExampleAssimp.LABEL_KICK_STOP = "kick_stop";
ExampleAssimp.LABEL_STUN_START = "stun_start";
ExampleAssimp.LABEL_STUN_STOP = "stun_stop";
assimp_Assimp.DEBUG = true;
assimp_Assimp.BLENDER_DEBUG = false;
assimp_Assimp.BLENDER_NO_STATS = false;
assimp_Assimp.NO = new assimp_No();
assimp_Assimp.PROCESS = new assimp_Process();
assimp_Assimp.AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE = "PP_GSN_MAX_SMOOTHING_ANGLE";
assimp_Assimp.AI_CONFIG_PP_RVC_FLAGS = "PP_RVC_FLAGS";
assimp_Assimp.AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS = "IMPORT_FBX_PRESERVE_PIVOTS";
assimp_AiConfig.GLOB_MEASURE_TIME = "GLOB_MEASURE_TIME";
assimp_AiConfig.FAVOUR_SPEED = "FAVOUR_SPEED";
assimp_AiConfig.ANDROID_JNI_ASSIMP_MANAGER_SUPPORT = false;
assimp_AiConfig.EXPORT_XFILE_64BIT = false;
assimp_AiConfig.PP = { SBBC_MAX_BONES : "PP_SBBC_MAX_BONES", CT : { MAX_SMOOTHING_ANGLE : "PP_CT_MAX_SMOOTHING_ANGLE", TEXTURE_CHANNEL_INDEX : "PP_CT_TEXTURE_CHANNEL_INDEX"}, GSN_MAX_SMOOTHING_ANGLE : "PP_GSN_MAX_SMOOTHING_ANGLE", RRM_EXCLUDE_LIST : "PP_RRM_EXCLUDE_LIST", PTV : { KEEP_HIERARCHY : "PP_PTV_KEEP_HIERARCHY", NORMALIZE : "PP_PTV_NORMALIZE", ADD_ROOT_TRANSFORMATION : "PP_PTV_ADD_ROOT_TRANSFORMATION", ROOT_TRANSFORMATION : "PP_PTV_ROOT_TRANSFORMATION"}, FD_REMOVE : "PP_FD_REMOVE", OG_EXCLUDE_LIST : "PP_OG_EXCLUDE_LIST", SLM : { TRIANGLE_LIMIT : "PP_SLM_TRIANGLE_LIMIT", VERTEX_LIMIT : "PP_SLM_VERTEX_LIMIT"}, LBW_MAX_WEIGHTS : "PP_LBW_MAX_WEIGHTS", DB_THRESHOLD : "PP_DB_THRESHOLD", DB_ALL_OR_NONE : "PP_DB_ALL_OR_NONE", ICL_PTCACHE_SIZE : "PP_ICL_PTCACHE_SIZE", RVC_FLAGS : "PP_RVC_FLAGS", SBP_REMOVE : "PP_SBP_REMOVE", FID_ANIM_ACCURACY : "PP_FID_ANIM_ACCURACY", TUV_EVALUATE : "PP_TUV_EVALUATE"};
assimp_AiConfig.Import = { NO_SKELETON_MESHES : "IMPORT_NO_SKELETON_MESHES", GLOBAL_KEYFRAME : "IMPORT_GLOBAL_KEYFRAME", Mdl : { COLORMAP : "IMPORT_MDL_COLORMAP", KEYFRAME : "IMPORT_MDL_KEYFRAME"}, Fbx : { Read : { ALL_GEOMETRY_LAYERS : "IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS", ALL_MATERIALS : "IMPORT_FBX_READ_ALL_MATERIALS", MATERIALS : "IMPORT_FBX_READ_MATERIALS", TEXTURES : "IMPORT_FBX_READ_TEXTURES", CAMERAS : "IMPORT_FBX_READ_CAMERAS", LIGHTS : "IMPORT_FBX_READ_LIGHTS", ANIMATIONS : "IMPORT_FBX_READ_ANIMATIONS"}, STRICT_MODE : "IMPORT_FBX_STRICT_MODE", PRESERVE_PIVOTS : "IMPORT_FBX_PRESERVE_PIVOTS", OPTIMIZE_EMPTY_ANIMATION_CURVES : "IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES", SEARCH_EMBEDDED_TEXTURES : "IMPORT_FBX_SEARCH_EMBEDDED_TEXTURES"}, Md3 : { KEYFRAME : "IMPORT_MD3_KEYFRAME", SKIN_NAME : "IMPORT_MD3_SKIN_NAME", SHADER_SRC : "IMPORT_MD3_SHADER_SRC", HANDLE_MULTIPART : "IMPORT_MD3_HANDLE_MULTIPART"}, MD2_KEYFRAME : "IMPORT_MD2_KEYFRAME", MDC_KEYFRAME : -1, SMD_KEYFRAME : -1, UNREAL_KEYFRAME : -1, Ac : { SEPARATE_BFCULL : "IMPORT_AC_SEPARATE_BFCULL", EVAL_SUBDIVISION : "IMPORT_AC_EVAL_SUBDIVISION"}, UNREAL_HANDLE_FLAGS : "UNREAL_HANDLE_FLAGS", TER_MAKE_UVS : "IMPORT_TER_MAKE_UVS", ASE_RECONSTRUCT_NORMALS : "IMPORT_ASE_RECONSTRUCT_NORMALS", LWO_ONE_LAYER_ONLY : "IMPORT_LWO_ONE_LAYER_ONLY", MD5_NO_ANIM_AUTOLOAD : "IMPORT_MD5_NO_ANIM_AUTOLOAD", Lws : { LWS_ANIM_START : "IMPORT_LWS_ANIM_START", LWS_ANIM_END : "IMPORT_LWS_ANIM_END"}, IRR_ANIM_FPS : "IMPORT_IRR_ANIM_FPS", Ogre : { MATERIAL_FILE : "IMPORT_OGRE_MATERIAL_FILE", OGRE_TEXTURETYPE_FROM_FILENAME : "IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME"}, Ifc : { IFC_SKIP_SPACE_REPRESENTATIONS : "IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS", IFC_CUSTOM_TRIANGULATION : "IMPORT_IFC_CUSTOM_TRIANGULATION", IFC_SMOOTHING_ANGLE : "IMPORT_IFC_SMOOTHING_ANGLE", IFC_CYLINDRICAL_TESSELLATION : "IMPORT_IFC_CYLINDRICAL_TESSELLATION"}, COLLADA_IGNORE_UP_DIRECTION : "IMPORT_COLLADA_IGNORE_UP_DIRECTION"};
assimp_Importer.impl = new assimp_ImporterPimpl();
assimp_Types.MAXLEN = 1024;
assimp_AiMemoryInfo.textures = 0;
assimp_AiMemoryInfo.materials = 0;
assimp_AiMemoryInfo.meshes = 0;
assimp_AiMemoryInfo.nodes = 0;
assimp_AiMemoryInfo.animations = 0;
assimp_AiMemoryInfo.cameras = 0;
assimp_AiMemoryInfo.lights = 0;
assimp_AiMemoryInfo.total = 0;
assimp_format_AiMatKeys.NAME_BASE = "?mat.name";
assimp_format_AiMatKeys.NAME = "?mat.name,0,0";
assimp_format_AiMatKeys.TWOSIDED_BASE = "$mat.twosided";
assimp_format_AiMatKeys.TWOSIDED = "$mat.twosided,0,0";
assimp_format_AiMatKeys.SHADING_MODEL_BASE = "$mat.shadingm";
assimp_format_AiMatKeys.SHADING_MODEL = "$mat.shadingm,0,0";
assimp_format_AiMatKeys.ENABLE_WIREFRAME_BASE = "$mat.wireframe";
assimp_format_AiMatKeys.ENABLE_WIREFRAME = "$mat.wireframe,0,0";
assimp_format_AiMatKeys.BLEND_FUNC_BASE = "$mat.blend";
assimp_format_AiMatKeys.BLEND_FUNC = "$mat.blend,0,0";
assimp_format_AiMatKeys.OPACITY_BASE = "$mat.opacity";
assimp_format_AiMatKeys.OPACITY = "$mat.opacity,0,0";
assimp_format_AiMatKeys.BUMPSCALING_BASE = "$mat.bumpscaling";
assimp_format_AiMatKeys.BUMPSCALING = "$mat.bumpscaling,0,0";
assimp_format_AiMatKeys.SHININESS_BASE = "$mat.shininess";
assimp_format_AiMatKeys.SHININESS = "$mat.shininess,0,0";
assimp_format_AiMatKeys.REFLECTIVITY_BASE = "$mat.reflectivity";
assimp_format_AiMatKeys.REFLECTIVITY = "$mat.reflectivity,0,0";
assimp_format_AiMatKeys.SHININESS_STRENGTH_BASE = "$mat.shinpercent";
assimp_format_AiMatKeys.SHININESS_STRENGTH = "$mat.shinpercent,0,0";
assimp_format_AiMatKeys.REFRACTI_BASE = "$mat.refracti";
assimp_format_AiMatKeys.REFRACTI = "$mat.refracti,0,0";
assimp_format_AiMatKeys.COLOR_DIFFUSE_BASE = "$clr.diffuse";
assimp_format_AiMatKeys.COLOR_DIFFUSE = "$clr.diffuse,0,0";
assimp_format_AiMatKeys.COLOR_AMBIENT_BASE = "$clr.ambient";
assimp_format_AiMatKeys.COLOR_AMBIENT = "$clr.ambient,0,0";
assimp_format_AiMatKeys.COLOR_SPECULAR_BASE = "$clr.specular";
assimp_format_AiMatKeys.COLOR_SPECULAR = "$clr.specular,0,0";
assimp_format_AiMatKeys.COLOR_EMISSIVE_BASE = "$clr.emissive";
assimp_format_AiMatKeys.COLOR_EMISSIVE = "$clr.emissive,0,0";
assimp_format_AiMatKeys.COLOR_TRANSPARENT_BASE = "$clr.transparent";
assimp_format_AiMatKeys.COLOR_TRANSPARENT = "$clr.transparent,0,0";
assimp_format_AiMatKeys.COLOR_REFLECTIVE_BASE = "$clr.reflective";
assimp_format_AiMatKeys.COLOR_REFLECTIVE = "$clr.reflective,0,0";
assimp_format_AiMatKeys.GLOBAL_BACKGROUND_IMAGE_BASE = "?bg.global";
assimp_format_AiMatKeys.GLOBAL_BACKGROUND_IMAGE = "?bg.global,0,0";
assimp_format_AiMatKeys.TEXTURE_BASE = "$tex.file";
assimp_format_AiMatKeys.UVWSRC_BASE = "$tex.uvwsrc";
assimp_format_AiMatKeys.TEXOP_BASE = "$tex.op";
assimp_format_AiMatKeys.MAPPING_BASE = "$tex.mapping";
assimp_format_AiMatKeys.TEXBLEND_BASE = "$tex.blend";
assimp_format_AiMatKeys.MAPPINGMODE_U_BASE = "$tex.mapmodeu";
assimp_format_AiMatKeys.MAPPINGMODE_V_BASE = "$tex.mapmodev";
assimp_format_AiMatKeys.TEXMAP_AXIS_BASE = "$tex.mapaxis";
assimp_format_AiMatKeys.UVTRANSFORM_BASE = "$tex.uvtrafo";
assimp_format_AiMatKeys.TEXFLAGS_BASE = "$tex.flags";
assimp_format_AiDefines.AI_SLM_DEFAULT_MAX_TRIANGLES = 1000000;
assimp_format_AiDefines.AI_SLM_DEFAULT_MAX_VERTICES = 1000000;
assimp_format_AiDefines.AI_LBW_MAX_WEIGHTS = 4;
assimp_format_AiDefines.PP_ICL_PTCACHE_SIZE = 12;
assimp_format_AiDefines.AI_MAX_FACE_INDICES = 32767;
assimp_format_AiDefines.AI_MAX_BONE_WEIGHTS = 2147483647;
assimp_format_AiDefines.AI_MAX_VERTICES = 2147483647;
assimp_format_AiDefines.AI_MAX_FACES = 2147483647;
assimp_format_AiDefines.AI_MAX_NUMBER_OF_COLOR_SETS = 8;
assimp_format_AiDefines.AI_MAX_NUMBER_OF_TEXTURECOORDS = 8;
assimp_format_AiDefines.AI_SBBC_DEFAULT_MAX_BONES = 60;
assimp_format_AiDefines.AI_DEBONE_THRESHOLD = 1.0;
assimp_format_AiDefines.MAX_LENGTH = 1024;
assimp_format_AiDefines.AI_DEFAULT_MATERIAL_NAME = "DefaultMaterial";
assimp_format_AiDefines.AI_DEFAULT_TEXTURED_MATERIAL_NAME = "TexturedDefaultMaterial";
assimp_format_Defs.AI_MATH_TWO_PI = Math.PI * 2;
assimp_format_Defs.AI_MATH_TWO_PIf = Math.PI * 2;
assimp_format_Defs.AI_MATH_HALF_PI = Math.PI;
assimp_format_Defs.epsilon = 10e-3;
assimp_format_Mesh.AI_MAX_FACE_INDICES = 32767;
assimp_format_Mesh.AI_MAX_BONE_WEIGHTS = 2147483647;
assimp_format_Mesh.AI_MAX_VERTICES = 2147483647;
assimp_format_Mesh.AI_MAX_FACES = 2147483647;
assimp_format_Mesh.AI_MAX_NUMBER_OF_COLOR_SETS = 8;
assimp_format_Mesh.AI_MAX_NUMBER_OF_TEXTURECOORDS = 8;
assimp_format_Scene.AI_SCENE_FLAGS_INCOMPLETE = 1;
assimp_format_Scene.AI_SCENE_FLAGS_VALIDATED = 2;
assimp_format_Scene.AI_SCENE_FLAGS_VALIDATION_WARNING = 4;
assimp_format_Scene.AI_SCENE_FLAGS_NON_VERBOSE_FORMAT = 8;
assimp_format_Scene.AI_SCENE_FLAGS_TERRAIN = 16;
assimp_format_Scene.AI_SCENE_FLAGS_ALLOW_SHARED = 32;
assimp_format_Version.legalString = "\"";
assimp_format_Version.versionMinor = 0;
assimp_format_Version.versionMajor = 4;
assimp_format_Version.versionRevision = -296288351;
assimp_format_Version.branch = "master";
assimp_format_Version.build = 14;
assimp_format_Version.compileFlags = assimp_Assimp.DEBUG;
assimp_format_Version.version = "$versionMajor.$versionMinor.$build";
assimp_format_assbin_AssbinLoader.ASSBIN_VERSION_MINOR = 0;
assimp_format_assbin_AssbinLoader.ASSBIN_VERSION_MAJOR = 0;
assimp_format_assbin_AssbinLoader.ASSBIN_HEADER_LENGTH = 512;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AICAMERA = 4660;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AILIGHT = 4661;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AITEXTURE = 4662;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMESH = 4663;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AINODEANIM = 4664;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AISCENE = 4665;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIBONE = 4666;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIANIMATION = 4667;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AINODE = 4668;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMATERIAL = 4669;
assimp_format_assbin_AssbinLoader.ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_POSITIONS = 1;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_NORMALS = 2;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;
assimp_format_assbin_AssbinLoader.ASSBIN_MESH_HAS_COLOR_BASE = 65536;
glm_GLM.EPSILON = 0.0000001;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
minko_Timer.wantedFPS = 60.;
minko_Timer.maxDeltaTime = 0.5;
minko_Timer.smoothFactor = 0.95;
minko_Timer.lastTimeStamp = new Date().getTime() / 1000;
minko_Timer.startTimeStamp = new Date().getTime() / 1000;
minko_Timer.elapsedTime = 0.;
minko_Timer.frameCount = 0;
minko_Timer.dt = 1 / minko_Timer.wantedFPS;
minko_Timer.currentDT = 1 / minko_Timer.wantedFPS;
minko_Timer.remainingTime = 1 / minko_Timer.wantedFPS;
minko_Uuid.CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
minko_WebBackend.loopInit = false;
minko_component_DirectionalLight.MAX_NUM_SHADOW_CASCADES = 4;
minko_component_DirectionalLight.DEFAULT_NUM_SHADOW_CASCADES = 4;
minko_component_DirectionalLight.MIN_SHADOWMAP_SIZE = 32;
minko_component_DirectionalLight.MAX_SHADOWMAP_SIZE = 1024;
minko_component_DirectionalLight.DEFAULT_SHADOWMAP_SIZE = 512;
minko_component_Skinning.PNAME_NUM_BONES = "numBones";
minko_component_Skinning.PNAME_BONE_MATRICES = "boneMatrices";
minko_component_Skinning.ATTRNAME_BONE_IDS_A = "boneIdsA";
minko_component_Skinning.ATTRNAME_BONE_IDS_B = "boneIdsB";
minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_A = "boneWeightsA";
minko_component_Skinning.ATTRNAME_BONE_WEIGHTS_B = "boneWeightsB";
minko_component_Skinning.MAX_NUM_BONES_PER_VERTEX = 8;
minko_component_Skinning.ATTRNAME_POSITION = "position";
minko_component_Skinning.ATTRNAME_NORMAL = "normal";
minko_component_SpotLight.PI = 3.141592653589793;
minko_component_Surface.SURFACE_COLLECTION_NAME = "surface";
minko_component_Surface.GEOMETRY_COLLECTION_NAME = "geometry";
minko_component_Surface.MATERIAL_COLLECTION_NAME = "material";
minko_component_Surface.EFFECT_COLLECTION_NAME = "effect";
minko_file_AbstractASSIMPParser._textureTypeToName = minko_file_AbstractASSIMPParser.initializeTextureTypeToName();
minko_file_AbstractASSIMPParser.PNAME_TRANSFORM = "matrix";
minko_file_AbstractASSIMPParser.MAX_NUM_UV_CHANNELS = 2;
minko_render__$Priority_Priority_$Impl_$.FIRST = 4000.0;
minko_render__$Priority_Priority_$Impl_$.BACKGROUND = 3000.0;
minko_render__$Priority_Priority_$Impl_$.OPAQUE = 2000.0;
minko_render__$Priority_Priority_$Impl_$.TRANSPARENT = 1000.0;
minko_render__$Priority_Priority_$Impl_$.LAST = 0.0;
minko_file_EffectParser.EXTRA_PROPERTY_BLENDING_MODE = "blendingMode";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_TEST = "stencilTest";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_OPS = "stencilOps";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_FAIL_OP = "fail";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_Z_FAIL_OP = "zfail";
minko_file_EffectParser.EXTRA_PROPERTY_STENCIL_Z_PASS_OP = "zpass";
minko_file_EffectParser._blendingSourceMap = minko_file_EffectParser.initialize_blendingSourceMap();
minko_file_EffectParser._blendingDestinationMap = minko_file_EffectParser.initialize_blendingDestinationMap();
minko_file_EffectParser._blendingModeMap = minko_file_EffectParser.initialize_blendingModeMap();
minko_file_EffectParser._compareFuncMap = minko_file_EffectParser.initialize_compareFuncMap();
minko_file_EffectParser._triangleCullingMap = minko_file_EffectParser.initialize_triangleCullingMap();
minko_file_EffectParser._stencilOpMap = minko_file_EffectParser.initialize_stencilOpMap();
minko_file_EffectParser._priorityMap = minko_file_EffectParser.initialize_priorityMap();
minko_file_EffectParser._extraStateNames = ["blendingMode","stencilTest"];
minko_file_FileProtocol._runningLoaders = [];
minko_file_Options._defaultProtocols = new haxe_ds_StringMap();
minko_input_KeyMap.keyToKeyCodeMap = minko_input_KeyMap.initializeKeyToKeyCodeMap();
minko_input_KeyMap.keyToScanCodeMap = minko_input_KeyMap.initializeKeyToScanCodeMap();
minko_input_Keyboard.NUM_KEYS = 350;
minko_input_Keyboard._keyToName = minko_input_Keyboard.initializeKeyNames();
minko_input_Mouse.CLICK_MOVE_THRESHOLD = 5;
minko_math_Random.MPM = 2147483647.0;
minko_math_Random.MINSTD = 16807.0;
minko_net_WebHTTPProtocol._httpProtocolReferences = [];
minko_net_EmscriptenAsync.nextWgetRequestHandle = 0;
minko_net_EmscriptenAsync.wgetRequests = new haxe_ds_IntMap();
minko_render_DrawCall.MAX_NUM_TEXTURES = 8;
minko_render_DrawCall.MAX_NUM_VERTEXBUFFERS = 8;
minko_render_GlContext.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
minko_render_GlContext.GL_STENCIL = 6146;
minko_render_GlContext.GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
minko_render_GlContext.GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
minko_render_GlContext.GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
minko_render_GlContext.GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
minko_render_GlContext.GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
minko_render_GlContext.GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 37175;
minko_render_GlContext.GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 37176;
minko_render_GlContext.GL_ETC1_RGB8_OES = 36196;
minko_render_GlContext.GL_ATC_RGB_AMD = 35986;
minko_render_GlContext.GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987;
minko_render_GlContext._blendingFactors = minko_render_GlContext.initializeBlendFactorsMap();
minko_render_GlContext._compareFuncs = minko_render_GlContext.initializeDepthFuncsMap();
minko_render_GlContext._stencilOps = minko_render_GlContext.initializeStencilOperationsMap();
minko_render_GlContext._availableTextureFormats = new haxe_ds_IntMap();
minko_render_GlContext.locationCount = 0;
minko_render_GlContext.vertexBufferCount = 0;
minko_render_GlContext.indexBufferCount = 0;
minko_render_GlContext.textureCount = 0;
minko_render_GlContext.programCount = 0;
minko_render_GlContext.shaderCount = 0;
minko_render_ProgramSignature._maxNumMacros = 64;
minko_render_SamplerStates.PROPERTY_WRAP_MODE = "wrapMode";
minko_render_SamplerStates.PROPERTY_TEXTURE_FILTER = "textureFilter";
minko_render_SamplerStates.PROPERTY_MIP_FILTER = "mipFilter";
minko_render_SamplerStates.PROPERTY_NAMES = ["wrapMode","textureFilter","mipFilter"];
minko_render_SamplerStates.DEFAULT_WRAP_MODE = 0;
minko_render_SamplerStates.DEFAULT_TEXTURE_FILTER = 0;
minko_render_SamplerStates.DEFAULT_MIP_FILTER = 0;
minko_render_States.PROPERTY_PRIORITY = "priority";
minko_render_States.PROPERTY_ZSORTED = "zSorted";
minko_render_States.PROPERTY_BLENDING_SOURCE = "blendingSource";
minko_render_States.PROPERTY_BLENDING_DESTINATION = "blendingDestination";
minko_render_States.PROPERTY_COLOR_MASK = "colorMask";
minko_render_States.PROPERTY_DEPTH_MASK = "depthMask";
minko_render_States.PROPERTY_DEPTH_FUNCTION = "depthFunction";
minko_render_States.PROPERTY_TRIANGLE_CULLING = "triangleCulling";
minko_render_States.PROPERTY_STENCIL_FUNCTION = "stencilFunction";
minko_render_States.PROPERTY_STENCIL_REFERENCE = "stencilReference";
minko_render_States.PROPERTY_STENCIL_MASK = "stencilMask";
minko_render_States.PROPERTY_STENCIL_FAIL_OPERATION = "stencilFailOperation";
minko_render_States.PROPERTY_STENCIL_ZFAIL_OPERATION = "stencilZFailOperation";
minko_render_States.PROPERTY_STENCIL_ZPASS_OPERATION = "stencilZPassOperation";
minko_render_States.PROPERTY_SCISSOR_TEST = "scissorTest";
minko_render_States.PROPERTY_SCISSOR_BOX = "scissorBox";
minko_render_States.PROPERTY_TARGET = "target";
minko_render_States.PROPERTY_NAMES = ["priority","zSorted","blendingSource","blendingDestination","colorMask","depthMask","depthFunction","triangleCulling","stencilFunction","stencilReference","stencilMask","stencilFailOperation","stencilZFailOperation","stencilZPassOperation","scissorTest","scissorBox","target"];
minko_render_States.DEFAULT_PRIORITY = minko_render__$Priority_Priority_$Impl_$.OPAQUE;
minko_render_States.DEFAULT_ZSORTED = false;
minko_render_States.DEFAULT_BLENDING_SOURCE = 2;
minko_render_States.DEFAULT_BLENDING_DESTINATION = 256;
minko_render_States.DEFAULT_COLOR_MASK = true;
minko_render_States.DEFAULT_DEPTH_MASK = true;
minko_render_States.DEFAULT_DEPTH_FUNCTION = 4;
minko_render_States.DEFAULT_TRIANGLE_CULLING = 2;
minko_render_States.DEFAULT_STENCIL_FUNCTION = 0;
minko_render_States.DEFAULT_STENCIL_REFERENCE = 0;
minko_render_States.DEFAULT_STENCIL_MASK = 1;
minko_render_States.DEFAULT_STENCIL_FAIL_OPERATION = 0;
minko_render_States.DEFAULT_STENCIL_ZFAIL_OPERATION = 0;
minko_render_States.DEFAULT_STENCIL_ZPASS_OPERATION = 0;
minko_render_States.DEFAULT_SCISSOR_TEST = false;
minko_render_States.DEFAULT_SCISSOR_BOX = (function($this) {
	var $r;
	var this1 = new glm_Vec4Base();
	this1.x = 0;
	this1.y = 0;
	this1.z = 0;
	this1.w = 0;
	$r = this1;
	return $r;
}(this));
minko_render_States.UNSET_PRIORITY_VALUE = -Infinity;
minko_render_TextureFormatInfo._formats = minko_render_TextureFormatInfo.initializeFormatsMap();
minko_utils_MathUtil.pi = 3.14159265;
minko_utils_MathUtil.half_pi = 1.57079637;
minko_utils_WebNodeTools.MAX_SIZE = 4096;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=Main.js.map